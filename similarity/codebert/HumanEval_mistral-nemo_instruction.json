{
    "HumanEval/0": {
        "similarity": 0.9985082745552063,
        "body": "for i in range(len(numbers) - 1):\n    if abs(numbers[i] - numbers[i+1]) <= threshold:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.998482346534729,
            0.998505175113678,
            0.9976407289505005,
            0.998482346534729,
            0.998258113861084,
            0.99835205078125,
            0.9983493685722351,
            0.99835205078125,
            0.9972284436225891,
            0.9985082745552063,
            0.9980416893959045,
            0.9899990558624268,
            0.998482346534729,
            0.9983363747596741,
            0.998482346534729,
            0.9899990558624268,
            0.998482346534729,
            0.9976523518562317,
            0.998482346534729,
            0.9980416893959045
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9966137409210205,
        "body": "    groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if stack:\n                start = stack.pop()\n                groups.append(paren_string[start:i+1])\n        i += 1\n    return groups",
        "result": "failed: ",
        "similarities": [
            0.9934045076370239,
            0.99567049741745,
            0.9958559274673462,
            0.987772524356842,
            0.9943132996559143,
            0.9960891604423523,
            0.9964274168014526,
            0.9952854514122009,
            0.9949899911880493,
            0.9948158264160156,
            0.9966137409210205,
            0.9948247671127319,
            0.9950464963912964,
            0.9951603412628174,
            0.9961411356925964,
            0.9862345457077026,
            0.9947929382324219,
            0.9952998757362366,
            0.9954472780227661,
            0.9955803751945496
        ]
    },
    "HumanEval/2": {
        "similarity": 0.997761607170105,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            0.997761607170105,
            0.997761607170105,
            0.997761607170105,
            0.997761607170105,
            0.997761607170105,
            0.9962658286094666,
            0.9962658286094666,
            0.9962658286094666,
            0.9933047890663147,
            0.997761607170105,
            0.997761607170105,
            0.997761607170105,
            0.9962658286094666,
            0.9933047890663147,
            0.997761607170105,
            0.9962177276611328,
            0.9941897988319397,
            0.9948874115943909,
            0.997761607170105,
            0.997761607170105
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9994806051254272,
        "body": "balance = 0\nfor op in operations:\n    balance += op\n    if balance < 0:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9994806051254272,
            0.9994527101516724,
            0.9958724975585938,
            0.9971562623977661,
            0.9994806051254272,
            0.9994806051254272,
            0.9994806051254272,
            0.9994806051254272,
            0.9994527101516724,
            0.9987245202064514,
            0.9994527101516724,
            0.9994806051254272,
            0.9987245202064514,
            0.9994806051254272,
            0.9994806051254272,
            0.9994806051254272,
            0.9994806051254272,
            0.9994527101516724,
            0.9994527101516724,
            0.9994806051254272
        ]
    },
    "HumanEval/4": {
        "similarity": 0.997268795967102,
        "body": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n",
        "result": "passed",
        "similarities": [
            0.9916628003120422,
            0.997268795967102,
            0.997268795967102,
            0.9966486692428589,
            0.9966486692428589,
            0.9966486692428589,
            0.997268795967102,
            0.9919362664222717,
            0.9968387484550476,
            0.9965559244155884,
            0.9886986613273621,
            0.9966486692428589,
            0.997268795967102,
            0.997268795967102,
            0.9919363260269165,
            0.997268795967102,
            0.9968387484550476,
            0.9943243265151978,
            0.997268795967102,
            0.9966486692428589
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9915307760238647,
        "body": "if numbers:\n    return [(numbers[i], delimeter) for i in range(len(numbers) - 1)] + [numbers[-1]]\nelse:\n    return []",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9904552102088928,
            0.9915307760238647,
            0.9799704551696777,
            0.990366518497467,
            0.9888799786567688,
            0.9895838499069214,
            0.9887534976005554,
            0.9902936816215515,
            0.9856838583946228,
            0.987361490726471,
            0.9889512658119202,
            0.9847697019577026,
            0.9888501763343811,
            0.9900755882263184,
            0.9784846305847168,
            0.9896349906921387,
            0.9890123009681702,
            0.989288330078125,
            0.981211245059967,
            0.9830721616744995
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9928638339042664,
        "body": "    levels = []\n    for group in paren_string.split():\n        count = depth = 0\n        for c in group:\n            if c == '(':\n                count += 1\n                depth = max(depth, count)\n            elif c == ')':\n                count -= 1\n        levels.append(depth)\n    return levels",
        "result": "passed",
        "similarities": [
            0.9920588135719299,
            0.9888380169868469,
            0.9928638339042664,
            0.9917188882827759,
            0.9915891885757446,
            0.9691749215126038,
            0.9755489230155945,
            0.9927661418914795,
            0.9924633502960205,
            0.9926213622093201,
            0.9917188882827759,
            0.9833226799964905,
            0.9896508455276489,
            0.9915891885757446,
            0.9693955183029175,
            0.9910414814949036,
            0.9915891885757446,
            0.9904199242591858,
            0.9923282265663147,
            0.9923840761184692
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9983197450637817,
        "body": "  return [s for s in strings if substring in s]",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 11)",
        "similarities": [
            0.9943332672119141,
            0.9983197450637817,
            0.9982896447181702,
            0.996057391166687,
            0.9982896447181702,
            0.9983197450637817,
            0.9982896447181702,
            0.9982896447181702,
            0.9982896447181702,
            0.9922125935554504,
            0.9983197450637817,
            0.993863582611084,
            0.9983197450637817,
            0.9950910210609436,
            0.9983197450637817,
            0.9983197450637817,
            0.9982896447181702,
            0.9983197450637817,
            0.9982896447181702,
            0.9983197450637817
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9957900047302246,
        "body": "product = 1\nfor num in numbers:\n    product *= num\nreturn sum(numbers), product",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9956725239753723,
            0.9947854280471802,
            0.9949679374694824,
            0.9953952431678772,
            0.9956824779510498,
            0.9940199851989746,
            0.9850877523422241,
            0.9946978688240051,
            0.9952330589294434,
            0.9957900047302246,
            0.9937407970428467,
            0.9952330589294434,
            0.9956843852996826,
            0.9954311847686768,
            0.9939111471176147,
            0.9928712248802185,
            0.995620846748352,
            0.9952331185340881,
            0.9956725239753723,
            0.9955721497535706
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9968177676200867,
        "body": "max_num = float('-inf')\nresult = []\nfor num in numbers:\n    max_num = max(max_num, num)\n    result.append(max_num)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9968170523643494,
            0.9913129210472107,
            0.9957743287086487,
            0.9902390241622925,
            0.9890546202659607,
            0.9967752695083618,
            0.9863853454589844,
            0.9966608285903931,
            0.9967752695083618,
            0.9934690594673157,
            0.9967752695083618,
            0.9967752695083618,
            0.9839881062507629,
            0.9967752695083618,
            0.9968171715736389,
            0.9967752695083618,
            0.9967855215072632,
            0.9912351369857788,
            0.9968177676200867,
            0.9967752695083618
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9979720115661621,
        "body": "    for i in range(len(string)):\n        if string == string[i::-1]:\n            return string + string[:i][::-1]\n    return ''",
        "result": "failed: ",
        "similarities": [
            0.9979159832000732,
            0.9978092908859253,
            0.9978175163269043,
            0.9977539777755737,
            0.9975667595863342,
            0.9965073466300964,
            0.9974706768989563,
            0.9972102642059326,
            0.9976426362991333,
            0.997667133808136,
            0.9977282285690308,
            0.9977270364761353,
            0.9811536073684692,
            0.9978222250938416,
            0.9977839589118958,
            0.9975475668907166,
            0.9976021647453308,
            0.9979720115661621,
            0.9971998333930969,
            0.9977893829345703
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9961104393005371,
        "body": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
        "result": "passed",
        "similarities": [
            0.9953292012214661,
            0.9900449514389038,
            0.9942960143089294,
            0.9960971474647522,
            0.9961104393005371,
            0.9898545145988464,
            0.9867576956748962,
            0.9961104393005371,
            0.9960971474647522,
            0.9961104393005371,
            0.9961104393005371,
            0.9898557066917419,
            0.9879628419876099,
            0.9961104393005371,
            0.9951377511024475,
            0.9903530478477478,
            0.9896430969238281,
            0.9961104393005371,
            0.9953292012214661,
            0.9960971474647522
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9933863282203674,
        "body": "if not strings:\n    return None\nreturn max(strings, key=len)",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9933684468269348,
            0.9880761504173279,
            0.9847473502159119,
            0.9933684468269348,
            0.9933863282203674,
            0.9874173402786255,
            0.9906957745552063,
            0.9793049693107605,
            0.9933863282203674,
            0.9933863282203674,
            0.9886106252670288,
            0.9910123944282532,
            0.9763004183769226,
            0.9806535840034485,
            0.9905720949172974,
            0.989139974117279,
            0.9933863282203674,
            0.9926487803459167,
            0.9922119975090027,
            0.9887730479240417
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9951912760734558,
        "body": "while b:\n    a, b = b, a % b\nreturn a",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.994529128074646,
            0.9947744011878967,
            0.9951912760734558,
            0.9946042895317078,
            0.9901624917984009,
            0.995070219039917,
            0.9951912760734558,
            0.9901624917984009,
            0.9941223859786987,
            0.9946042895317078,
            0.9946042895317078,
            0.9917345643043518,
            0.9941223859786987,
            0.995070219039917,
            0.9945292472839355,
            0.9945292472839355,
            0.9901624917984009,
            0.995070219039917,
            0.9946042895317078,
            0.9880561828613281
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9943275451660156,
        "body": "        return [string[:i] for i in range(1, len(string)+1)]",
        "result": "failed: unexpected indent (<string>, line 9)",
        "similarities": [
            0.9889345765113831,
            0.9935275912284851,
            0.9918627738952637,
            0.9901815056800842,
            0.9943275451660156,
            0.989834725856781,
            0.9935275912284851,
            0.9935275912284851,
            0.9909509420394897,
            0.9935275912284851,
            0.9935275912284851,
            0.9940822124481201,
            0.9938533306121826,
            0.9938533306121826,
            0.989834725856781,
            0.9935275912284851,
            0.9939148426055908,
            0.987973690032959,
            0.9757652282714844,
            0.9940822124481201
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9948740601539612,
        "body": "    return \" \".join(str(i) for i in range(n + 1))",
        "result": "passed",
        "similarities": [
            0.9942996501922607,
            0.9945875406265259,
            0.9927840232849121,
            0.9941610097885132,
            0.9948230385780334,
            0.9948230385780334,
            0.9941830039024353,
            0.9942418336868286,
            0.9945788383483887,
            0.9941868185997009,
            0.98211669921875,
            0.9927840232849121,
            0.9894198179244995,
            0.9945788383483887,
            0.9912263751029968,
            0.9948099255561829,
            0.9943628907203674,
            0.9948099255561829,
            0.9948740601539612,
            0.9941610097885132
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9982396364212036,
        "body": "    return len(set(string.lower()))",
        "result": "passed",
        "similarities": [
            0.9982396364212036,
            0.9960923790931702,
            0.9982396364212036,
            0.9963750243186951,
            0.9982396364212036,
            0.9959198832511902,
            0.9982396364212036,
            0.9855085611343384,
            0.9959198832511902,
            0.9982396364212036,
            0.9982396364212036,
            0.9959198832511902,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036,
            0.9982396364212036
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9958341717720032,
        "body": "notes = {'o': 4, '|': 0}\n    return [notes[note] for note in music_string.split()]",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9958341717720032,
            0.9955440163612366,
            0.9948592185974121,
            0.9905810356140137,
            0.99493408203125,
            0.995646059513092,
            0.9942009449005127,
            0.9957571625709534,
            0.9955440163612366,
            0.9937045574188232,
            0.9948660135269165,
            0.995646059513092,
            0.9769365191459656,
            0.9948667287826538,
            0.9948592185974121,
            0.994268536567688,
            0.989953875541687,
            0.995646059513092,
            0.99493408203125,
            0.994083821773529
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9864576458930969,
        "body": "    return len(string) // len(substring)",
        "result": "failed: ",
        "similarities": [
            0.982863187789917,
            0.9834976196289062,
            0.982863187789917,
            0.9852127432823181,
            0.9834976196289062,
            0.9848181009292603,
            0.9729548096656799,
            0.9729548096656799,
            0.9729548096656799,
            0.9618024230003357,
            0.9864576458930969,
            0.9834976196289062,
            0.9759789705276489,
            0.9852127432823181,
            0.9848181009292603,
            0.9856197834014893,
            0.9729548096656799,
            0.9848181009292603,
            0.9848181009292603,
            0.9618024230003357
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9919028282165527,
        "body": "numbers = list(map(int, [ord(c) - ord('0') for c in input.split()]))\nreturn ' '.join([str(i) for i in sorted(numbers)]",
        "result": "failed: invalid syntax (<string>, line 15)",
        "similarities": [
            0.9895860552787781,
            0.9876251220703125,
            0.9843176007270813,
            0.9891124367713928,
            0.9877094626426697,
            0.9883750081062317,
            0.9904889464378357,
            0.9912797808647156,
            0.9844317436218262,
            0.9828347563743591,
            0.9868742227554321,
            0.9896722435951233,
            0.9828963279724121,
            0.9887557029724121,
            0.9887414574623108,
            0.9865368604660034,
            0.9919028282165527,
            0.9863722920417786,
            0.9897521138191223,
            0.9891857504844666
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9970202445983887,
        "body": "min_diff = float('inf')\nclosest_pair = None\n\nfor i in range(len(numbers) - 1):\n    for j in range(i + 1, len(numbers)):\n        diff = numbers[j] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[j])\n\nreturn closest_pair",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.9965475797653198,
            0.9970202445983887,
            0.9965581297874451,
            0.9969664216041565,
            0.9929733276367188,
            0.9965895414352417,
            0.9967046976089478,
            0.9969664216041565,
            0.9774718880653381,
            0.996958315372467,
            0.9967564344406128,
            0.996547520160675,
            0.9967761635780334,
            0.9965015053749084,
            0.9966936707496643,
            0.9924294352531433,
            0.9967564344406128,
            0.9970202445983887,
            0.9968349933624268,
            0.9969253540039062
        ]
    },
    "HumanEval/21": {
        "similarity": 0.995468258857727,
        "body": "min_val = min(numbers)\nmax_val = max(numbers)\n\nreturn [(x - min_val) / (max_val - min_val) for x in numbers]",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9939996600151062,
            0.9929264783859253,
            0.9945464134216309,
            0.9952409863471985,
            0.9943485260009766,
            0.9941800832748413,
            0.9943006634712219,
            0.9848489165306091,
            0.9953106641769409,
            0.995468258857727,
            0.9889951348304749,
            0.9954273700714111,
            0.9943249225616455,
            0.9935938119888306,
            0.9943006634712219,
            0.9942743182182312,
            0.9930823445320129,
            0.9837952852249146,
            0.9942811727523804,
            0.9941800832748413
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9993829131126404,
        "body": "return [v for v in values if isinstance(v, int)]",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9993829131126404,
            0.9993829131126404,
            0.9959903359413147,
            0.9992910623550415,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9992910623550415,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9993829131126404,
            0.9992910623550415,
            0.9923029541969299
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9985502362251282,
        "body": "len(string)",
        "result": "failed: name 'string' is not defined",
        "similarities": [
            0.9985502362251282,
            0.9985502362251282,
            0.9985502362251282,
            0.9983118176460266,
            0.9961464405059814,
            0.9983118176460266,
            0.9985502362251282,
            0.9961464405059814,
            0.996146559715271,
            0.9983118176460266,
            0.997668445110321,
            0.9985502362251282,
            0.9983118176460266,
            0.996146559715271,
            0.9983118176460266,
            0.9985502362251282,
            0.9985502362251282,
            0.9983118176460266,
            0.9983118176460266,
            0.9985502362251282
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9993828535079956,
        "body": "for i in range(n//2, 0, -1):\n    if n % i == 0:\n        return i",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9993828535079956,
            0.9993353486061096,
            0.9990253448486328,
            0.9993402361869812,
            0.9993353486061096,
            0.9993353486061096,
            0.9990253448486328,
            0.9993402361869812,
            0.9990326762199402,
            0.9956457018852234,
            0.9993828535079956,
            0.9959521293640137,
            0.9993828535079956,
            0.9993828535079956,
            0.9993828535079956,
            0.9993402361869812,
            0.999356746673584,
            0.9993828535079956,
            0.9993828535079956,
            0.9990326762199402
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9984641075134277,
        "body": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "similarities": [
            0.9984375834465027,
            0.9984641075134277,
            0.9984167218208313,
            0.9923778176307678,
            0.9975999593734741,
            0.9984375834465027,
            0.9975312948226929,
            0.9984641075134277,
            0.9984167218208313,
            0.9975599050521851,
            0.9939360618591309,
            0.9966201782226562,
            0.9984375834465027,
            0.9984641075134277,
            0.9984167218208313,
            0.9984588623046875,
            0.9984641075134277,
            0.9975600242614746,
            0.9984375834465027,
            0.9984375834465027
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9933131337165833,
        "body": "seen = set()\nresult = []\n\nfor num in numbers:\n    if num not in seen:\n        result.append(num)\n        seen.add(num)\n\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "similarities": [
            0.9841440916061401,
            0.986749529838562,
            0.9910731911659241,
            0.9871834516525269,
            0.9841440916061401,
            0.9841440916061401,
            0.9910731911659241,
            0.9871834516525269,
            0.9907471537590027,
            0.9910731911659241,
            0.9910731911659241,
            0.9910731911659241,
            0.9910731911659241,
            0.9910731911659241,
            0.9933131337165833,
            0.9905379414558411,
            0.9910731911659241,
            0.9866218566894531,
            0.9841440916061401,
            0.9903987050056458
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9991965293884277,
        "body": "return string.swapcase()",
        "result": "failed: 'return' outside function (<string>, line 8)",
        "similarities": [
            0.9988265037536621,
            0.9990519285202026,
            0.9991965293884277,
            0.9991965293884277,
            0.9988265037536621,
            0.9988265037536621,
            0.9991965293884277,
            0.9991965293884277,
            0.9990519285202026,
            0.9990519285202026,
            0.9990519285202026,
            0.9991965293884277,
            0.9991965293884277,
            0.9991965293884277,
            0.9991965293884277,
            0.9991965293884277,
            0.9988265037536621,
            0.9991965293884277,
            0.9990519285202026,
            0.9991965293884277
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9964109063148499,
        "body": "    return \"\".join(strings)",
        "result": "passed",
        "similarities": [
            0.9949995279312134,
            0.9962548017501831,
            0.9964109063148499,
            0.9855764508247375,
            0.9962548017501831,
            0.9857643842697144,
            0.9949995279312134,
            0.9962548017501831,
            0.9964109063148499,
            0.9964109063148499,
            0.9964109063148499,
            0.9964109063148499,
            0.9964109063148499,
            0.9964109063148499,
            0.9962548017501831,
            0.9964109063148499,
            0.9949995279312134,
            0.9962548017501831,
            0.9949995279312134,
            0.9940435290336609
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9979375600814819,
        "body": "  return [s for s in strings if s.startswith(prefix)]",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 11)",
        "similarities": [
            0.9979375600814819,
            0.9973325133323669,
            0.9961358904838562,
            0.9961358904838562,
            0.9973325133323669,
            0.9979375600814819,
            0.9961358904838562,
            0.9973325133323669,
            0.9979375600814819,
            0.9973325133323669,
            0.9979375600814819,
            0.9973325133323669,
            0.9979375600814819,
            0.9973325133323669,
            0.9973325133323669,
            0.9973325133323669,
            0.9979375600814819,
            0.9965476989746094,
            0.9979375600814819,
            0.9979375600814819
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9995062947273254,
        "body": "return [i for i in l if i > 0]",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9993773102760315,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9995062947273254,
            0.9993773102760315,
            0.9995062947273254,
            0.9995062947273254,
            0.9993773102760315,
            0.9955233335494995,
            0.9993773102760315,
            0.9995062947273254,
            0.9993773102760315,
            0.9995062947273254,
            0.9964665770530701,
            0.9995062947273254
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9968215823173523,
        "body": "  if n < 2:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 20)",
        "similarities": [
            0.9954795837402344,
            0.9963676333427429,
            0.9917649626731873,
            0.9963676333427429,
            0.9963886737823486,
            0.9967124462127686,
            0.9963622689247131,
            0.9960613250732422,
            0.9954795837402344,
            0.9968215823173523,
            0.9917649626731873,
            0.9966357350349426,
            0.9945495128631592,
            0.996698260307312,
            0.9954795837402344,
            0.9952414631843567,
            0.9890009164810181,
            0.9960166811943054,
            0.9963676333427429,
            0.9917747974395752
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9954293966293335,
        "body": "    a, b = xs[-2:]\n    return -b / a if a != 0 else None",
        "result": "failed: ",
        "similarities": [
            0.9950279593467712,
            0.9930513501167297,
            0.9844906330108643,
            0.9931105375289917,
            0.9936426281929016,
            0.9949043989181519,
            0.9943357706069946,
            0.9945824146270752,
            0.9921044111251831,
            0.9944655895233154,
            0.9947410225868225,
            0.9947224855422974,
            0.9930295348167419,
            0.9947409629821777,
            0.9944726228713989,
            0.9916786551475525,
            0.9954293966293335,
            0.9943801760673523,
            0.9936909079551697,
            0.9948908090591431
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9924201965332031,
        "body": "    sorted_third = sorted([l[i] for i in range(0, len(l)) if i % 3 == 0])\n    return [sorted_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]",
        "result": "passed",
        "similarities": [
            0.9884511232376099,
            0.9917869567871094,
            0.9896388053894043,
            0.9920074343681335,
            0.9912242889404297,
            0.9893504977226257,
            0.9913284182548523,
            0.9847219586372375,
            0.9852094054222107,
            0.9897043108940125,
            0.991478681564331,
            0.9921757578849792,
            0.9924201965332031,
            0.9922730326652527,
            0.9852094054222107,
            0.9839791655540466,
            0.97819983959198,
            0.9878078103065491,
            0.9859220385551453,
            0.9921296834945679
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9990838766098022,
        "body": "    return sorted(set(l))",
        "result": "passed",
        "similarities": [
            0.9990838766098022,
            0.9984161257743835,
            0.9984161257743835,
            0.9984161257743835,
            0.9990838766098022,
            0.9990838766098022,
            0.9990838766098022,
            0.9990838766098022,
            0.9983978271484375,
            0.9984161257743835,
            0.9990838766098022,
            0.9983978271484375,
            0.9981246590614319,
            0.9990838766098022,
            0.9990838766098022,
            0.9980310201644897,
            0.9990838766098022,
            0.9990838766098022,
            0.9990838766098022,
            0.9983978271484375
        ]
    },
    "HumanEval/35": {
        "similarity": 0.997847318649292,
        "body": "return max(l)",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.997847318649292,
            0.997847318649292,
            0.9941514730453491,
            0.997847318649292,
            0.9941514730453491,
            0.9941514730453491,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.9886059165000916,
            0.997847318649292,
            0.9941514730453491,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292,
            0.997847318649292
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9964185953140259,
        "body": "for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n        count += str(i).count('7')\nreturn count",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9953433871269226,
            0.9952820539474487,
            0.9953433871269226,
            0.9941721558570862,
            0.9947218894958496,
            0.9952110648155212,
            0.9927595257759094,
            0.9961565732955933,
            0.9953433871269226,
            0.995697021484375,
            0.9953235983848572,
            0.9933921694755554,
            0.9953433871269226,
            0.9953433871269226,
            0.9961565732955933,
            0.9953433871269226,
            0.9961565732955933,
            0.9956371784210205,
            0.9964185953140259,
            0.9957404732704163
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9940320253372192,
        "body": "even_indices = sorted(l[::2])\nl[::2] = even_indices\nreturn l",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9937431812286377,
            0.9937431812286377,
            0.993448793888092,
            0.9901167154312134,
            0.9937431812286377,
            0.9940320253372192,
            0.9934608340263367,
            0.9874337911605835,
            0.9914491772651672,
            0.9902893900871277,
            0.9937431812286377,
            0.9937431812286377,
            0.9940320253372192,
            0.9937431812286377,
            0.9911546111106873,
            0.9937431812286377,
            0.9861201047897339,
            0.9857127666473389,
            0.9906944632530212,
            0.9905503988265991
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9907374382019043,
        "body": "    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed",
        "similarities": [
            0.985564112663269,
            0.9872800707817078,
            0.9844542145729065,
            0.9865320920944214,
            0.9866369366645813,
            0.9843264222145081,
            0.9886952638626099,
            0.9907374382019043,
            0.9868027567863464,
            0.9906042814254761,
            0.9800367951393127,
            0.987849771976471,
            0.9863188862800598,
            0.9903994202613831,
            0.9886952638626099,
            0.9890841245651245,
            0.9904757142066956,
            0.9904081225395203,
            0.9800367951393127,
            0.9886952638626099
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9984657764434814,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\na, b = 1, 2\nfor _ in range(n):\n    a, b = b, a + b\nwhile not is_prime(b):\n    a, b = b, a + b\nreturn b",
        "result": "failed: 'return' outside function (<string>, line 29)",
        "similarities": [
            0.9972327351570129,
            0.9978348612785339,
            0.9966798424720764,
            0.9966635704040527,
            0.9984657764434814,
            0.9968228936195374,
            0.9982149004936218,
            0.9980708956718445,
            0.9983452558517456,
            0.997768223285675,
            0.9980587363243103,
            0.9984339475631714,
            0.998346209526062,
            0.9980707764625549,
            0.9971972107887268,
            0.9979870319366455,
            0.9974592924118042,
            0.998346209526062,
            0.9947681427001953,
            0.9980587363243103
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9924408793449402,
        "body": "    l = sorted(set(l))\n    for i in range(len(l) - 2):\n        if l[i] + l[i+1] + l[-1] == 0:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.991217851638794,
            0.992072582244873,
            0.982745349407196,
            0.9865654706954956,
            0.9910017251968384,
            0.9867362976074219,
            0.9905555248260498,
            0.9849922060966492,
            0.9849922060966492,
            0.9922425150871277,
            0.9757826924324036,
            0.9862931966781616,
            0.9899510145187378,
            0.9885042905807495,
            0.9849036335945129,
            0.9857646822929382,
            0.9909629821777344,
            0.9906302094459534,
            0.9924408793449402,
            0.9788405895233154
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9918153882026672,
        "body": "  collisions = 0\n  for i in range(n):\n    if (i % 2 == 0):\n      collisions += 1\n  return collisions",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 15)",
        "similarities": [
            0.9897177815437317,
            0.9850789308547974,
            0.9907200336456299,
            0.98895663022995,
            0.9896938800811768,
            0.9918153882026672,
            0.9895808696746826,
            0.9890240430831909,
            0.9887304902076721,
            0.9845664501190186,
            0.9887304902076721,
            0.9902962446212769,
            0.9902281761169434,
            0.9845664501190186,
            0.9918153882026672,
            0.9851704835891724,
            0.9845664501190186,
            0.9912573099136353,
            0.9893797039985657,
            0.98895663022995
        ]
    },
    "HumanEval/42": {
        "similarity": 0.99871826171875,
        "body": "  return [i + 1 for i in l]",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 10)",
        "similarities": [
            0.9986640810966492,
            0.9986230134963989,
            0.9971016645431519,
            0.9971016645431519,
            0.9986640810966492,
            0.9958887696266174,
            0.99871826171875,
            0.9985767006874084,
            0.9971017241477966,
            0.9986230134963989,
            0.9986640810966492,
            0.9986230134963989,
            0.9986640810966492,
            0.997228741645813,
            0.9986640810966492,
            0.9986381530761719,
            0.9986640810966492,
            0.9986640810966492,
            0.9955258965492249,
            0.9986640810966492
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9955736398696899,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9854409098625183,
            0.9955735802650452,
            0.9954476952552795,
            0.9955735802650452,
            0.9955735802650452,
            0.9955735802650452,
            0.9955735802650452,
            0.9955735802650452,
            0.9926545023918152,
            0.9954920411109924,
            0.9953790903091431,
            0.9935726523399353,
            0.9955735802650452,
            0.9854409098625183,
            0.9891788959503174,
            0.9955736398696899,
            0.9797417521476746,
            0.9955735802650452,
            0.9955735802650452,
            0.9955735802650452
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9961361289024353,
        "body": "    result = ''\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x //= base\n    return result",
        "result": "passed",
        "similarities": [
            0.9959003925323486,
            0.9953418374061584,
            0.9888832569122314,
            0.9898778200149536,
            0.9930785298347473,
            0.9951587319374084,
            0.99582439661026,
            0.9957121014595032,
            0.9957935810089111,
            0.9950681924819946,
            0.9961361289024353,
            0.9898778200149536,
            0.9952442646026611,
            0.9957784414291382,
            0.9954710602760315,
            0.9867405295372009,
            0.9956685304641724,
            0.9957185387611389,
            0.99582439661026,
            0.9947006106376648
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9984357953071594,
        "body": "    return 0.5 * a * h",
        "result": "passed",
        "similarities": [
            0.9980591535568237,
            0.9980097413063049,
            0.9979928731918335,
            0.9959074258804321,
            0.9984357953071594,
            0.9976608157157898,
            0.9979928731918335,
            0.9959074258804321,
            0.9984357953071594,
            0.9984357953071594,
            0.9980097413063049,
            0.9984357953071594,
            0.9980097413063049,
            0.9984357953071594,
            0.9984357953071594,
            0.9976608157157898,
            0.9979928731918335,
            0.9984357953071594,
            0.9984357953071594,
            0.9980097413063049
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9976676106452942,
        "body": "    if n < 4:\n        return [0, 0, 2][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d",
        "result": "passed",
        "similarities": [
            0.9975101947784424,
            0.9974867105484009,
            0.9975101947784424,
            0.9976676106452942,
            0.9951026439666748,
            0.9959879517555237,
            0.9975101947784424,
            0.996965229511261,
            0.996636152267456,
            0.9948989748954773,
            0.9956148862838745,
            0.9965326189994812,
            0.9936134815216064,
            0.9957781434059143,
            0.9971561431884766,
            0.9927799105644226,
            0.9975118041038513,
            0.9975925087928772,
            0.9975101947784424,
            0.9975101947784424
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9958248138427734,
        "body": "l.sort()\nn = len(l)\nif n % 2 == 0:\n    return (l[n//2-1] + l[n//2]) / 2\nelse:\n    return l[n//2]",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9947144389152527,
            0.9921798706054688,
            0.9920645356178284,
            0.993386447429657,
            0.9936360716819763,
            0.9947630167007446,
            0.9939189553260803,
            0.9934262633323669,
            0.9933943748474121,
            0.9912326335906982,
            0.9958248138427734,
            0.9958248138427734,
            0.9900363087654114,
            0.994789719581604,
            0.9937891960144043,
            0.9936075806617737,
            0.9931802153587341,
            0.9958248138427734,
            0.9926378130912781,
            0.9906606078147888
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9996194243431091,
        "body": "    return text == text[::-1]",
        "result": "passed",
        "similarities": [
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9992576241493225,
            0.9992576241493225,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9972079396247864,
            0.9996194243431091,
            0.9996194243431091,
            0.9996194243431091,
            0.9972079396247864,
            0.9996194243431091
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9996119141578674,
        "body": "    return pow(2, n, p)",
        "result": "passed",
        "similarities": [
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996117949485779,
            0.9996117949485779,
            0.9926223754882812,
            0.9996117949485779,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674,
            0.9996119141578674
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9993613362312317,
        "body": "  return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9993613362312317,
            0.9985270500183105,
            0.9992972016334534,
            0.99857097864151,
            0.9992972016334534,
            0.9991896748542786,
            0.99857097864151,
            0.9992572665214539,
            0.9992972016334534,
            0.9992972016334534,
            0.9992972016334534,
            0.9992972016334534,
            0.9982489347457886,
            0.9992972016334534,
            0.99857097864151,
            0.9992972016334534,
            0.99857097864151,
            0.9992972016334534,
            0.9992972016334534,
            0.9992972016334534
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9967806935310364,
        "body": "    return \"\".join(char for char in text if char.lower() not in \"aeiou\")",
        "result": "passed",
        "similarities": [
            0.9967806935310364,
            0.9961844086647034,
            0.9963013529777527,
            0.9962998628616333,
            0.9953252077102661,
            0.9958984851837158,
            0.9958984851837158,
            0.9958984851837158,
            0.9966286420822144,
            0.9965755939483643,
            0.9965146780014038,
            0.9952560067176819,
            0.9965980052947998,
            0.9957128763198853,
            0.9965980052947998,
            0.9959909319877625,
            0.9961844086647034,
            0.9958984851837158,
            0.9959909319877625,
            0.9965146780014038
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9936708211898804,
        "body": "    return all(x < t for x in l)",
        "result": "passed",
        "similarities": [
            0.9889426231384277,
            0.9840101003646851,
            0.9840101003646851,
            0.9839966297149658,
            0.9913575053215027,
            0.9840101003646851,
            0.9936708211898804,
            0.9920682311058044,
            0.9901341795921326,
            0.9920682311058044,
            0.9918913841247559,
            0.9844703674316406,
            0.9908657073974609,
            0.9901341795921326,
            0.9908657073974609,
            0.9839966297149658,
            0.9908657073974609,
            0.9935689568519592,
            0.9913575053215027,
            0.9936708211898804
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9992662668228149,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            0.9992662668228149,
            0.9992662668228149,
            0.9974386096000671,
            0.9974386096000671,
            0.9992662668228149,
            0.9992662668228149,
            0.9992662668228149,
            0.9988102316856384,
            0.9992662668228149,
            0.9992662668228149,
            0.9974386096000671,
            0.9992662668228149,
            0.9974386096000671,
            0.9992662668228149,
            0.9992662668228149,
            0.9988102316856384,
            0.9992662668228149,
            0.9992662668228149,
            0.9992662668228149,
            0.9992662668228149
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9997968077659607,
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "similarities": [
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9993107318878174,
            0.9993107318878174,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9997968077659607,
            0.9975908994674683,
            0.9997968077659607,
            0.9997968077659607
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9965786337852478,
        "body": "    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b",
        "result": "passed",
        "similarities": [
            0.995261549949646,
            0.9962828755378723,
            0.9919806122779846,
            0.9963366985321045,
            0.9962828755378723,
            0.9965786337852478,
            0.995261549949646,
            0.995261549949646,
            0.995261549949646,
            0.9946112632751465,
            0.9965786337852478,
            0.995261549949646,
            0.9963366985321045,
            0.9962828755378723,
            0.995261549949646,
            0.995261549949646,
            0.995261549949646,
            0.9946112632751465,
            0.9950804710388184,
            0.9962828755378723
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9977261424064636,
        "body": "    count = 0\n    for b in brackets:\n        if b == '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "result": "passed",
        "similarities": [
            0.9971221089363098,
            0.9977261424064636,
            0.9977261424064636,
            0.9973092675209045,
            0.996260404586792,
            0.9971505403518677,
            0.9977261424064636,
            0.9970082640647888,
            0.997637927532196,
            0.9977261424064636,
            0.9970424175262451,
            0.9960858225822449,
            0.9883729815483093,
            0.9972774982452393,
            0.9970534443855286,
            0.9977261424064636,
            0.9968045949935913,
            0.9977261424064636,
            0.9949744343757629,
            0.9970534443855286
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9951456785202026,
        "body": "  return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 12)",
        "similarities": [
            0.9944185018539429,
            0.9947360157966614,
            0.9947524666786194,
            0.9951456785202026,
            0.9950253367424011,
            0.9951456785202026,
            0.9877265095710754,
            0.9950253367424011,
            0.9947580099105835,
            0.9951210021972656,
            0.9838789701461792,
            0.9944185018539429,
            0.985023021697998,
            0.9944269061088562,
            0.9950253367424011,
            0.9940341114997864,
            0.9947580099105835,
            0.9944185018539429,
            0.983585774898529,
            0.9947580099105835
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9983577728271484,
        "body": "return sorted(set(l1) & set(l2))",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9983576536178589,
            0.9968392252922058,
            0.9983576536178589,
            0.9983576536178589,
            0.9918408989906311,
            0.9983576536178589,
            0.9983576536178589,
            0.9983576536178589,
            0.9934374094009399,
            0.9983576536178589,
            0.9983576536178589,
            0.9968392252922058,
            0.9968392252922058,
            0.9983576536178589,
            0.9983577728271484,
            0.9983577728271484,
            0.9968392252922058,
            0.9983576536178589,
            0.9968392252922058,
            0.9983576536178589
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9972787499427795,
        "body": "    i = n\n    while i % 2 == 0:\n        i /= 2\n    for num in range(3,int(i**0.5)+1,2):\n        if i % num == 0:\n            i /= num\n    return i",
        "result": "failed: ",
        "similarities": [
            0.9956845045089722,
            0.9958368539810181,
            0.9956845045089722,
            0.9957906603813171,
            0.9932352304458618,
            0.9970522522926331,
            0.9969305992126465,
            0.990217924118042,
            0.9956845045089722,
            0.9941962361335754,
            0.9971131682395935,
            0.9963496327400208,
            0.9972787499427795,
            0.9968388080596924,
            0.9947351217269897,
            0.9956843852996826,
            0.9961279034614563,
            0.9957601428031921,
            0.9967147707939148,
            0.996566891670227
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9991609454154968,
        "body": "    return n * (n + 1) // 2",
        "result": "passed",
        "similarities": [
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9981173276901245,
            0.9991609454154968,
            0.9981173276901245,
            0.9981173276901245,
            0.9991609454154968,
            0.9928405284881592,
            0.9981173276901245,
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9991609454154968,
            0.9989367127418518,
            0.9981173276901245,
            0.9991609454154968
        ]
    },
    "HumanEval/61": {
        "similarity": 0.997409999370575,
        "body": "stack = []\nfor b in brackets:\n    if b == '(':\n        stack.append(b)\n    elif b == ')':\n        if not stack or stack[-1] != '(':\n            return False\n        stack.pop()\nreturn len(stack) == 0",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.9962461590766907,
            0.9971116781234741,
            0.997409999370575,
            0.9959656596183777,
            0.9962461590766907,
            0.996540904045105,
            0.996540904045105,
            0.9970046877861023,
            0.996897280216217,
            0.9966155886650085,
            0.9963494539260864,
            0.9968246817588806,
            0.9971194863319397,
            0.9971194863319397,
            0.9970189332962036,
            0.996540904045105,
            0.9967975616455078,
            0.9970189332962036,
            0.996188223361969,
            0.9967975616455078
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9942282438278198,
        "body": "    return [(i+1)*xs[i] for i in range(1, len(xs))]",
        "result": "failed: ",
        "similarities": [
            0.9773783683776855,
            0.9927907586097717,
            0.9915100932121277,
            0.9941428303718567,
            0.9919360280036926,
            0.992042064666748,
            0.9941402077674866,
            0.9896191954612732,
            0.994086742401123,
            0.986197829246521,
            0.992042064666748,
            0.9942282438278198,
            0.9912848472595215,
            0.9933000206947327,
            0.994086742401123,
            0.9893403649330139,
            0.9941118359565735,
            0.9770142436027527,
            0.9941017031669617,
            0.9940028190612793
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9966737031936646,
        "body": "    if n < 3: return n % 2\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "failed: ",
        "similarities": [
            0.9960092306137085,
            0.9960645437240601,
            0.9957849383354187,
            0.9940963387489319,
            0.9955109357833862,
            0.9964410662651062,
            0.9964595437049866,
            0.995529055595398,
            0.9961969256401062,
            0.9954630136489868,
            0.9947828054428101,
            0.9956092834472656,
            0.9874894022941589,
            0.9839867353439331,
            0.9950294494628906,
            0.9965822100639343,
            0.9957064390182495,
            0.9964589476585388,
            0.9951372742652893,
            0.9966737031936646
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9975181221961975,
        "body": "    return sum(1 for c in s.lower() if c in 'aeiou' or (c == 'y' and s[-1] != 'y'))",
        "result": "failed: Test 3",
        "similarities": [
            0.9973366260528564,
            0.9973366260528564,
            0.9973366260528564,
            0.9954006671905518,
            0.9970976114273071,
            0.9970565438270569,
            0.9975181221961975,
            0.9916221499443054,
            0.9974761009216309,
            0.9970337748527527,
            0.9973611235618591,
            0.9974702596664429,
            0.9965202212333679,
            0.9972774982452393,
            0.9936268329620361,
            0.9973366260528564,
            0.9972580671310425,
            0.9966139793395996,
            0.9973366260528564,
            0.9967576265335083
        ]
    },
    "HumanEval/65": {
        "similarity": 0.996741533279419,
        "body": "    s = str(x)[::-1]\n    return s[shift:] + s[:shift]",
        "result": "failed: ",
        "similarities": [
            0.9906349182128906,
            0.9902325868606567,
            0.9958602786064148,
            0.996741533279419,
            0.9961661100387573,
            0.9948239922523499,
            0.9949693083763123,
            0.9958602786064148,
            0.9966391324996948,
            0.996741533279419,
            0.996741533279419,
            0.9919354319572449,
            0.9959836602210999,
            0.9944424033164978,
            0.9957829713821411,
            0.9958602786064148,
            0.996741533279419,
            0.996741533279419,
            0.987739086151123,
            0.9879244565963745
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9992461800575256,
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed",
        "similarities": [
            0.9992461800575256,
            0.9989336133003235,
            0.997836172580719,
            0.9978672862052917,
            0.9992461800575256,
            0.9992461800575256,
            0.9992461800575256,
            0.9992461800575256,
            0.9992461800575256,
            0.9992461800575256,
            0.9970361590385437,
            0.9992461800575256,
            0.9992461800575256,
            0.9989336133003235,
            0.9992461800575256,
            0.9992461800575256,
            0.9978672862052917,
            0.9978672862052917,
            0.9989336133003235,
            0.9992461800575256
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9958577752113342,
        "body": "    a, o = map(int, s.split(' apples and ')[1].split(' oranges'))\n    return n - a - o",
        "result": "failed: invalid literal for int() with base 10: ''",
        "similarities": [
            0.9958577752113342,
            0.9954028725624084,
            0.9917113780975342,
            0.9948588013648987,
            0.9955067038536072,
            0.9956533312797546,
            0.9943010210990906,
            0.9932717680931091,
            0.9928287863731384,
            0.9937415719032288,
            0.9949545860290527,
            0.9951280355453491,
            0.9950884580612183,
            0.9946240782737732,
            0.9951501488685608,
            0.9951284527778625,
            0.9950529336929321,
            0.9943200945854187,
            0.9894918203353882,
            0.9950870871543884
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9985319375991821,
        "body": "    evens = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    return min(evens, key=lambda x: (x[0], x[1])) if evens else []",
        "result": "failed: Error",
        "similarities": [
            0.9981648325920105,
            0.9967805743217468,
            0.997368574142456,
            0.9962541460990906,
            0.9985319375991821,
            0.9964884519577026,
            0.998252272605896,
            0.9983845949172974,
            0.9975860118865967,
            0.9974170327186584,
            0.9985319375991821,
            0.9983845949172974,
            0.9980354309082031,
            0.997368574142456,
            0.9968480467796326,
            0.9972285032272339,
            0.9978849291801453,
            0.9972872734069824,
            0.9980235695838928,
            0.995773434638977
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9954254627227783,
        "body": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, count in freq.items():\n        if num >= count > 0:\n            return num\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9948834180831909,
            0.9942079186439514,
            0.9917289614677429,
            0.9942651391029358,
            0.9947330951690674,
            0.9950263500213623,
            0.9875134825706482,
            0.9902119040489197,
            0.9900643229484558,
            0.992531418800354,
            0.9954254627227783,
            0.9933185577392578,
            0.9949814677238464,
            0.9947887063026428,
            0.9924609661102295,
            0.9879276752471924,
            0.9898239970207214,
            0.9944329857826233,
            0.9910828471183777,
            0.9950140714645386
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9894309639930725,
        "body": "    sorted_lst = []\n    while lst:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
        "result": "passed",
        "similarities": [
            0.9834241271018982,
            0.9829621911048889,
            0.9782653450965881,
            0.984710693359375,
            0.9829792380332947,
            0.9856800436973572,
            0.9866469502449036,
            0.9857192039489746,
            0.9830630421638489,
            0.9827846884727478,
            0.9840549826622009,
            0.9825431704521179,
            0.9894309639930725,
            0.9787133932113647,
            0.9856800436973572,
            0.9760318398475647,
            0.9886662364006042,
            0.983110249042511,
            0.9862227439880371,
            0.9893700480461121
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9962156414985657,
        "body": "if a + b > c and a + c > b and b + c > a:\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** .5, 2)\nelse:\n    return -1",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9946551322937012,
            0.9906306266784668,
            0.9954890012741089,
            0.9950049519538879,
            0.9953241944313049,
            0.9937300682067871,
            0.9949038624763489,
            0.9940283894538879,
            0.9949038624763489,
            0.9926445484161377,
            0.9895718097686768,
            0.9923005700111389,
            0.9961172342300415,
            0.9959291219711304,
            0.9956519603729248,
            0.9951848387718201,
            0.9961836934089661,
            0.9960641264915466,
            0.9949038624763489,
            0.9962156414985657
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9997747540473938,
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9994745850563049,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9994745850563049,
            0.9997747540473938,
            0.9994745850563049,
            0.9994745850563049,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9997747540473938,
            0.9994745850563049,
            0.9994745850563049,
            0.9997747540473938
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9944677948951721,
        "body": "    left, right = 0, len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes // 2",
        "result": "failed: ",
        "similarities": [
            0.9898667931556702,
            0.9941388964653015,
            0.9754014611244202,
            0.9944677948951721,
            0.9795393943786621,
            0.9936237335205078,
            0.9812846183776855,
            0.994443416595459,
            0.9941388964653015,
            0.994403064250946,
            0.9933152794837952,
            0.994403064250946,
            0.994443416595459,
            0.994443416595459,
            0.9944677948951721,
            0.9930914640426636,
            0.9923589825630188,
            0.988734781742096,
            0.9944677948951721,
            0.994443416595459
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9974520802497864,
        "body": "    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2",
        "result": "failed: ",
        "similarities": [
            0.9974520802497864,
            0.9945796132087708,
            0.9962922930717468,
            0.9959871172904968,
            0.9966728091239929,
            0.9966728091239929,
            0.9974519610404968,
            0.9944612383842468,
            0.9966728091239929,
            0.9924368858337402,
            0.9974520802497864,
            0.9966728091239929,
            0.9974519610404968,
            0.989963710308075,
            0.9966728091239929,
            0.9966728091239929,
            0.9944612383842468,
            0.9974520802497864,
            0.989963710308075,
            0.9966728091239929
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9961161613464355,
        "body": "    primes = [2, 3, 5, 7, 11, 13]\n    factors = []\n    while a % 2 == 0:\n        factors.append(2)\n        a /= 2\n    for prime in primes[2:]:\n        while a % prime == 0:\n            factors.append(prime)\n            a /= prime\n    return len(factors) == 3",
        "result": "failed: ",
        "similarities": [
            0.9943376183509827,
            0.9925025105476379,
            0.9955276846885681,
            0.9959442019462585,
            0.9925037026405334,
            0.9961161613464355,
            0.9949327111244202,
            0.9942022562026978,
            0.9926418662071228,
            0.995408833026886,
            0.9957886934280396,
            0.9960594177246094,
            0.9932956695556641,
            0.995599627494812,
            0.9954829216003418,
            0.9952558279037476,
            0.99553382396698,
            0.9928120970726013,
            0.9941089153289795,
            0.9939809441566467
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9988720417022705,
        "body": "    return x == n ** int(math.log(x, n))",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9964914917945862,
            0.9958218336105347,
            0.9988720417022705,
            0.9985814690589905,
            0.9982370138168335,
            0.9977425932884216,
            0.9988720417022705,
            0.9985743165016174,
            0.9985814690589905,
            0.997380793094635,
            0.9973146319389343,
            0.9985743165016174,
            0.9988720417022705,
            0.9988720417022705,
            0.9981566071510315,
            0.998301088809967,
            0.9965641498565674,
            0.9985743165016174,
            0.9988720417022705,
            0.9985814690589905
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9989956617355347,
        "body": "  return round(a ** (1/3)) ** 3 == a",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 15)",
        "similarities": [
            0.9989956617355347,
            0.9988375306129456,
            0.9985986948013306,
            0.998228907585144,
            0.9988676309585571,
            0.9984179139137268,
            0.9989463686943054,
            0.9987897276878357,
            0.9942798614501953,
            0.997250497341156,
            0.9985866546630859,
            0.9989464282989502,
            0.9980219602584839,
            0.9988709688186646,
            0.998957097530365,
            0.9989956617355347,
            0.9989463686943054,
            0.9967036843299866,
            0.9985986351966858,
            0.9989464282989502
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9984678030014038,
        "body": "    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(digit in primes for digit in num)",
        "result": "passed",
        "similarities": [
            0.9976840615272522,
            0.9949750304222107,
            0.9963210225105286,
            0.9983737468719482,
            0.9984678030014038,
            0.9966344237327576,
            0.9981352090835571,
            0.9976050853729248,
            0.9981352090835571,
            0.9981237649917603,
            0.9957413077354431,
            0.9980314373970032,
            0.9984399676322937,
            0.9976841807365417,
            0.9983737468719482,
            0.9980314373970032,
            0.9981237649917603,
            0.9983737468719482,
            0.9981613159179688,
            0.9971743226051331
        ]
    },
    "HumanEval/79": {
        "similarity": 0.996024489402771,
        "body": "    return f\"db{bin(n)[2:] if n else '0'}db\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9953398704528809,
            0.9931003451347351,
            0.9930612444877625,
            0.9947943687438965,
            0.9939019083976746,
            0.9944875836372375,
            0.9818876385688782,
            0.9932133555412292,
            0.9942799806594849,
            0.9947472810745239,
            0.9938639402389526,
            0.9949959516525269,
            0.9955714344978333,
            0.9945325255393982,
            0.9935449361801147,
            0.9956092834472656,
            0.9923872947692871,
            0.9934403300285339,
            0.996024489402771,
            0.991806149482727
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9944888949394226,
        "body": "  return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s)-2))",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9944888949394226,
            0.9933687448501587,
            0.9944888949394226,
            0.9891646504402161,
            0.9899230003356934,
            0.9907292127609253,
            0.9944888949394226,
            0.9944888949394226,
            0.9925556182861328,
            0.9944888949394226,
            0.9907292127609253,
            0.9921361207962036,
            0.9925556182861328,
            0.9944888949394226,
            0.9886633157730103,
            0.9873304963111877,
            0.9864692687988281,
            0.9944888949394226,
            0.9944888949394226,
            0.9874066114425659
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9829455018043518,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        # ... and so on ...\n    return letter_grades",
        "result": "failed: ",
        "similarities": [
            0.9670333862304688,
            0.9809706807136536,
            0.9780889749526978,
            0.9738002419471741,
            0.978045642375946,
            0.9734423756599426,
            0.9792420268058777,
            0.9733344912528992,
            0.9794822335243225,
            0.9799410104751587,
            0.9790175557136536,
            0.9738002419471741,
            0.9802985787391663,
            0.9768173098564148,
            0.9775135517120361,
            0.9788601398468018,
            0.9829455018043518,
            0.9809682965278625,
            0.9735466837882996,
            0.9810792803764343
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9977926015853882,
        "body": "    if n < 2: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return is_prime(len(s))",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9965812563896179,
            0.9924837350845337,
            0.9968908429145813,
            0.9853578209877014,
            0.9967564940452576,
            0.9977821707725525,
            0.9975406527519226,
            0.9960858225822449,
            0.996496319770813,
            0.9974425435066223,
            0.9974425435066223,
            0.9977926015853882,
            0.9974425435066223,
            0.9968908429145813,
            0.9959427714347839,
            0.9974409341812134,
            0.995624840259552,
            0.9976535439491272,
            0.9971598386764526,
            0.9977821707725525
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9962831139564514,
        "body": "if n == 1:\n    return 2\nelif n == 2:\n    return 4\nelse:\n    return (9 ** (n-1)) * 2",
        "result": "failed: 'return' outside function (<string>, line 8)",
        "similarities": [
            0.9868834614753723,
            0.9958814382553101,
            0.9960451722145081,
            0.9960439801216125,
            0.9904016256332397,
            0.9958978891372681,
            0.9955198168754578,
            0.995530903339386,
            0.9960522055625916,
            0.9948862791061401,
            0.9932153820991516,
            0.9893494844436646,
            0.9940407276153564,
            0.9929333925247192,
            0.9897816181182861,
            0.9960347414016724,
            0.9962831139564514,
            0.9943275451660156,
            0.9946147799491882,
            0.9944596886634827
        ]
    },
    "HumanEval/84": {
        "similarity": 0.99716717004776,
        "body": "    return bin(sum(int(digit) for digit in str(bin(N))[2:]))[2:]",
        "result": "failed: Error",
        "similarities": [
            0.9964128136634827,
            0.9953964948654175,
            0.9968314170837402,
            0.9967579245567322,
            0.9955099821090698,
            0.9967629313468933,
            0.9968314170837402,
            0.99716717004776,
            0.9964413046836853,
            0.9969919323921204,
            0.9930928945541382,
            0.9969055652618408,
            0.9969919323921204,
            0.99716717004776,
            0.990593671798706,
            0.990593671798706,
            0.99716717004776,
            0.9969919323921204,
            0.9967888593673706,
            0.990593671798706
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9979571104049683,
        "body": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
        "result": "passed",
        "similarities": [
            0.9974983930587769,
            0.996927797794342,
            0.9946849346160889,
            0.9979571104049683,
            0.9974983930587769,
            0.9914992451667786,
            0.9979571104049683,
            0.9970703125,
            0.9979571104049683,
            0.9917789101600647,
            0.9966933727264404,
            0.996927797794342,
            0.9979571104049683,
            0.9946849346160889,
            0.9979571104049683,
            0.9979571104049683,
            0.9979571104049683,
            0.9979571104049683,
            0.9979571104049683,
            0.996927797794342
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9989937543869019,
        "body": "  return ' '.join(''.join(sorted(word)) for word in s.split())",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 15)",
        "similarities": [
            0.9986628293991089,
            0.9989937543869019,
            0.9982370138168335,
            0.9989937543869019,
            0.9982370138168335,
            0.9987961649894714,
            0.9986106753349304,
            0.9989509582519531,
            0.9989509582519531,
            0.9989937543869019,
            0.9987502098083496,
            0.9986313581466675,
            0.9989509582519531,
            0.9987961649894714,
            0.9989937543869019,
            0.9985323548316956,
            0.9988903403282166,
            0.9988903403282166,
            0.9989509582519531,
            0.9986628293991089
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9965861439704895,
        "body": "    return sorted([(i, j) for i, row in enumerate(lst) for j, num in enumerate(row) if num == x], key=lambda x: (x[0], -x[1]))",
        "result": "passed",
        "similarities": [
            0.9960097074508667,
            0.995324969291687,
            0.9964307546615601,
            0.9954675436019897,
            0.9959339499473572,
            0.9965861439704895,
            0.9926170706748962,
            0.994891345500946,
            0.994891345500946,
            0.996557354927063,
            0.9960617423057556,
            0.9943594932556152,
            0.9924139976501465,
            0.9958072304725647,
            0.9933461546897888,
            0.9945853352546692,
            0.9965564608573914,
            0.9959408640861511,
            0.9908009767532349,
            0.9879706501960754
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9931674003601074,
        "body": "    copy = array.copy()\n    if sum(copy[0] + copy[-1]) % 2 == 1:\n        return sorted(copy)\n    else:\n        return sorted(copy, reverse=True)",
        "result": "failed: list index out of range",
        "similarities": [
            0.9920505881309509,
            0.9880658984184265,
            0.9921136498451233,
            0.9866271018981934,
            0.9927636981010437,
            0.9931674003601074,
            0.9856747388839722,
            0.988656222820282,
            0.9882504343986511,
            0.9882147908210754,
            0.9925814270973206,
            0.9913105368614197,
            0.9886733889579773,
            0.9925814270973206,
            0.9775421619415283,
            0.9833922386169434,
            0.9925814270973206,
            0.9906104207038879,
            0.9862368702888489,
            0.9874387979507446
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9918667674064636,
        "body": "    return ''.join(chr((ord(c) - 97 + 4 * 2) % 26 + 97) for c in s.lower() if c.isalpha())",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9867028594017029,
            0.976394534111023,
            0.9883108735084534,
            0.9867936968803406,
            0.9912407398223877,
            0.984454333782196,
            0.9917640686035156,
            0.9780086874961853,
            0.9917076826095581,
            0.9897027611732483,
            0.991439700126648,
            0.9918667674064636,
            0.9859657287597656,
            0.9912407398223877,
            0.9904803037643433,
            0.9914982318878174,
            0.9830894470214844,
            0.987676739692688,
            0.991032063961029,
            0.9912964701652527
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9953809380531311,
        "body": "    if len(lst) < 2: return None\n    lst.sort()\n    return lst[1]",
        "result": "failed: ",
        "similarities": [
            0.9921011924743652,
            0.9935979247093201,
            0.9944213032722473,
            0.9944213032722473,
            0.9940544962882996,
            0.989695131778717,
            0.9940420389175415,
            0.9953809380531311,
            0.9935657382011414,
            0.993272066116333,
            0.9940420389175415,
            0.990879476070404,
            0.9923127889633179,
            0.9835364818572998,
            0.9943859577178955,
            0.9953809380531311,
            0.9944213032722473,
            0.9940420389175415,
            0.9873594045639038,
            0.9916609525680542
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9972384572029114,
        "body": "  return sum(1 for s in S.split('.') + S.split('?') + S.split('!') if s.strip().startswith('I'))",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9918052554130554,
            0.9967394471168518,
            0.9930140972137451,
            0.9971978068351746,
            0.9970569610595703,
            0.9972384572029114,
            0.9960420727729797,
            0.9969635009765625,
            0.996407687664032,
            0.9960529804229736,
            0.9895110726356506,
            0.9958401918411255,
            0.9951968193054199,
            0.9949527382850647,
            0.996426522731781,
            0.9971922636032104,
            0.9965355396270752,
            0.9971978068351746,
            0.9969857931137085,
            0.996407687664032
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9932190775871277,
        "body": "    return x + y == z or y + z == x or z + x == y and all(isinstance(i, int) for i in (x, y, z))",
        "result": "failed: This prints if this assert fails 10 (also good for debugging!)",
        "similarities": [
            0.988010585308075,
            0.9916251301765442,
            0.9849349856376648,
            0.9896551370620728,
            0.9896551370620728,
            0.9865192770957947,
            0.9920774102210999,
            0.9878503680229187,
            0.9918454885482788,
            0.9904443025588989,
            0.9892198443412781,
            0.9874659180641174,
            0.9771308898925781,
            0.9928560853004456,
            0.9860265851020813,
            0.988010585308075,
            0.9926962852478027,
            0.9918534159660339,
            0.9932190775871277,
            0.989375650882721
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9966515898704529,
        "body": "    vowels = \"aeiou\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded += chr((ord(char) - ord(vowels[0]) + 2) % 5 + ord('a'))\n            else:\n                encoded += chr(39 - (ord(char) - ord('a')) % 26)\n        else:\n            encoded += char\n    return encoded.swapcase()",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9898823499679565,
            0.9953882098197937,
            0.9956700205802917,
            0.9926866292953491,
            0.9964808225631714,
            0.9946478605270386,
            0.9941620230674744,
            0.9966515898704529,
            0.9951342344284058,
            0.9946065545082092,
            0.9959088563919067,
            0.9964733123779297,
            0.9949047565460205,
            0.9957046508789062,
            0.996225893497467,
            0.9960235953330994,
            0.9964480996131897,
            0.9951229095458984,
            0.9958943128585815,
            0.9957075715065002
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9983765482902527,
        "body": "        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes) if primes else None\n    return sum(int(digit) for digit in str(largest_prime))",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9982337951660156,
            0.9950334429740906,
            0.9979230761528015,
            0.998087465763092,
            0.9972472190856934,
            0.9980791211128235,
            0.9983323812484741,
            0.9983447194099426,
            0.9968487620353699,
            0.9983446002006531,
            0.9914613366127014,
            0.9983446002006531,
            0.997918963432312,
            0.9981898069381714,
            0.9979048371315002,
            0.9978828430175781,
            0.9918261170387268,
            0.9983765482902527,
            0.998087465763092,
            0.9979566335678101
        ]
    },
    "HumanEval/95": {
        "similarity": 0.99542236328125,
        "body": "  if not d: return False\n  case = next((k[0].islower() for k in d), None)\n  return all(k[0].isupper() == case for k in d)",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9939817190170288,
            0.9898045063018799,
            0.9773896932601929,
            0.9952496290206909,
            0.9950585961341858,
            0.986883282661438,
            0.9942138195037842,
            0.9951053261756897,
            0.9950585961341858,
            0.9949716329574585,
            0.9897722005844116,
            0.9954129457473755,
            0.9893361926078796,
            0.9940524101257324,
            0.994251549243927,
            0.9948940277099609,
            0.9950585961341858,
            0.994555652141571,
            0.99542236328125,
            0.9895736575126648
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9989392161369324,
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    primes = []\n    for num in range(2, n+1):\n        if is_prime(num):\n            primes.append(num)\n    return primes[:n]",
        "result": "failed: ",
        "similarities": [
            0.9989373087882996,
            0.9978519082069397,
            0.9967606067657471,
            0.9980794191360474,
            0.9982554912567139,
            0.9984349608421326,
            0.9987233877182007,
            0.9985389709472656,
            0.9967737793922424,
            0.9989392161369324,
            0.9982696175575256,
            0.9987697601318359,
            0.9980807900428772,
            0.9987713694572449,
            0.9989349246025085,
            0.9988950490951538,
            0.9989392161369324,
            0.998154878616333,
            0.9989392161369324,
            0.9989339709281921
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9986827373504639,
        "body": "    return abs(a % 10 * b % 10)",
        "result": "failed: First test error: 6",
        "similarities": [
            0.9986827373504639,
            0.9877409934997559,
            0.9986827373504639,
            0.9986827373504639,
            0.9986827373504639,
            0.9986827373504639,
            0.9986827373504639,
            0.9985401034355164,
            0.9986827373504639,
            0.9985401034355164,
            0.9985401034355164,
            0.9986827373504639,
            0.9980043172836304,
            0.9985401034355164,
            0.9985401034355164,
            0.9985401034355164,
            0.9985401034355164,
            0.9986827373504639,
            0.9986827373504639,
            0.9986827373504639
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9967573285102844,
        "body": "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')",
        "result": "failed: ",
        "similarities": [
            0.9966687560081482,
            0.9965864419937134,
            0.9924601316452026,
            0.9959586262702942,
            0.9967573285102844,
            0.9957040548324585,
            0.9951999187469482,
            0.9956939220428467,
            0.9965864419937134,
            0.9965864419937134,
            0.9879286885261536,
            0.9957237243652344,
            0.9957237243652344,
            0.9964439868927002,
            0.9957237243652344,
            0.9957040548324585,
            0.9934560060501099,
            0.9965864419937134,
            0.9951431155204773,
            0.9940289855003357
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9922529458999634,
        "body": "    num = float(value)\n    return round(num) if num >= 0 else round(num) - 1",
        "result": "failed: Test 2",
        "similarities": [
            0.9907600283622742,
            0.9908061623573303,
            0.9863467812538147,
            0.9863467812538147,
            0.9873112440109253,
            0.9854202270507812,
            0.9908034801483154,
            0.985593318939209,
            0.9898040294647217,
            0.9863718748092651,
            0.9863467812538147,
            0.9810618162155151,
            0.9863599538803101,
            0.9834582805633545,
            0.9898667931556702,
            0.9922529458999634,
            0.9908730387687683,
            0.985593318939209,
            0.9863467812538147,
            0.9858021140098572
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9950962066650391,
        "body": "  pile = []\n  for i in range(n):\n    stone = n - (2 * i) if n % 2 == 0 else n + (2 * i + 1)\n    pile.append(stone)\n  return pile",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 16)",
        "similarities": [
            0.9885614514350891,
            0.9950125813484192,
            0.9945032000541687,
            0.9941394329071045,
            0.9876145124435425,
            0.9950962066650391,
            0.994483232498169,
            0.9940472841262817,
            0.9943749308586121,
            0.9945675730705261,
            0.9939916729927063,
            0.9946491718292236,
            0.9948332905769348,
            0.994118869304657,
            0.9947652220726013,
            0.9879427552223206,
            0.993015468120575,
            0.9887457489967346,
            0.9893320202827454,
            0.9932708740234375
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9965546131134033,
        "body": "    return s.replace(',', ' ').split()",
        "result": "passed",
        "similarities": [
            0.9956915974617004,
            0.9874183535575867,
            0.9957016706466675,
            0.9959100484848022,
            0.9956915974617004,
            0.9958558678627014,
            0.9965546131134033,
            0.9945929646492004,
            0.9951996207237244,
            0.995189368724823,
            0.9961915612220764,
            0.9910549521446228,
            0.9910549521446228,
            0.9949854612350464,
            0.995189368724823,
            0.9959781169891357,
            0.9958558678627014,
            0.9962624311447144,
            0.9956915974617004,
            0.9949854612350464
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9971153140068054,
        "body": "for num in range(y, x-1, -1):\n    if num % 2 == 0:\n        return num\nreturn -1",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9970207214355469,
            0.9959087371826172,
            0.9971153140068054,
            0.9970206022262573,
            0.9965397715568542,
            0.9959087371826172,
            0.9918984174728394,
            0.9893785715103149,
            0.9970206022262573,
            0.9958670735359192,
            0.9970206022262573,
            0.9970206022262573,
            0.9958670735359192,
            0.9970206022262573,
            0.9877279996871948,
            0.9970206022262573,
            0.9970207214355469,
            0.990525484085083,
            0.9959088563919067,
            0.9936530590057373
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9960353374481201,
        "body": "    if n > m: return -1\n    avg = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(avg)[2:]",
        "result": "failed: ",
        "similarities": [
            0.9947949647903442,
            0.9919483065605164,
            0.9945626854896545,
            0.9936413168907166,
            0.9956296682357788,
            0.9960353374481201,
            0.9940419793128967,
            0.9930726885795593,
            0.9923647046089172,
            0.995694637298584,
            0.9945626854896545,
            0.9959462881088257,
            0.9960353374481201,
            0.9936413168907166,
            0.9945626854896545,
            0.9902898669242859,
            0.9940366148948669,
            0.9855025410652161,
            0.9906947612762451,
            0.9922043681144714
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9934916496276855,
        "body": "    return sorted(set(n for n in x if '0' not in str(n)))",
        "result": "failed: ",
        "similarities": [
            0.9902130961418152,
            0.9934916496276855,
            0.9903692007064819,
            0.990262508392334,
            0.9864817261695862,
            0.9924728274345398,
            0.9918079376220703,
            0.9789935946464539,
            0.9934287667274475,
            0.990262508392334,
            0.9924728274345398,
            0.9934916496276855,
            0.9934287667274475,
            0.9912148714065552,
            0.9887341856956482,
            0.9878005981445312,
            0.9897103905677795,
            0.9813897013664246,
            0.992617666721344,
            0.9934287071228027
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9974396228790283,
        "body": "    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    return [names[x-1] for x in reversed(arr)]",
        "result": "passed",
        "similarities": [
            0.9961766600608826,
            0.9957221150398254,
            0.9974396228790283,
            0.9973406791687012,
            0.9968591928482056,
            0.9961950182914734,
            0.996557354927063,
            0.9924150109291077,
            0.9936599731445312,
            0.9974396228790283,
            0.9945024251937866,
            0.9974396228790283,
            0.9972262978553772,
            0.9959017038345337,
            0.9918206930160522,
            0.9974396228790283,
            0.9968591928482056,
            0.9959622621536255,
            0.9941023588180542,
            0.9941017627716064
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9952902793884277,
        "body": "    return [(factorial(i) if i%2==0 else sum(range(1,i+1))) for i in range(1,n+1)]",
        "result": "failed: name 'factorial' is not defined",
        "similarities": [
            0.9895276427268982,
            0.9740926027297974,
            0.9947038292884827,
            0.9948660135269165,
            0.9950957298278809,
            0.9943664073944092,
            0.9945966005325317,
            0.976535975933075,
            0.9946871399879456,
            0.9896700978279114,
            0.9952902793884277,
            0.992680013179779,
            0.9941245913505554,
            0.9950957298278809,
            0.9945668578147888,
            0.9926044940948486,
            0.9948660135269165,
            0.9945628643035889,
            0.9946202635765076,
            0.9930383563041687
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9963275790214539,
        "body": "    evens = odds = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)",
        "result": "passed",
        "similarities": [
            0.9963275790214539,
            0.996235191822052,
            0.9963275790214539,
            0.9916773438453674,
            0.9962712526321411,
            0.9955881834030151,
            0.9919469952583313,
            0.9919847249984741,
            0.9963275790214539,
            0.9959904551506042,
            0.9947415590286255,
            0.9898690581321716,
            0.9958971738815308,
            0.9905851483345032,
            0.9956793785095215,
            0.9952980875968933,
            0.9956321716308594,
            0.9961945414543152,
            0.9956827759742737,
            0.9957731366157532
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9911319613456726,
        "body": "    return sum(1 for n in arr if sum(int(d) for d in str(abs(n))) > 0)",
        "result": "failed: ",
        "similarities": [
            0.9903470277786255,
            0.9879387617111206,
            0.9878036379814148,
            0.9877421855926514,
            0.9845824241638184,
            0.9856141805648804,
            0.9911318421363831,
            0.987884521484375,
            0.9911318421363831,
            0.9907377362251282,
            0.9852588176727295,
            0.9905763268470764,
            0.9858414530754089,
            0.9770875573158264,
            0.9863497018814087,
            0.9864782094955444,
            0.9845824241638184,
            0.9911319613456726,
            0.9882100820541382,
            0.9874474406242371
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9906410574913025,
        "body": "    return arr == sorted(arr) or arr == [arr[-1]] + arr[:-1]",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9852100014686584,
            0.9852979779243469,
            0.9784919619560242,
            0.9852100014686584,
            0.9873595833778381,
            0.9835875630378723,
            0.9882428050041199,
            0.9852100014686584,
            0.9891175627708435,
            0.9852100014686584,
            0.9849144816398621,
            0.9832735657691956,
            0.9876648783683777,
            0.9792569875717163,
            0.9876500964164734,
            0.9894458651542664,
            0.9765673279762268,
            0.9844706654548645,
            0.9906410574913025,
            0.9808506369590759
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9923771619796753,
        "body": "for i in range(len(lst1)):\n    if lst1[i] % 2 != 0:\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                break\n        else:\n            return \"NO\"\nreturn \"YES\"",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.9751033782958984,
            0.9838556051254272,
            0.9876278638839722,
            0.9903518557548523,
            0.990045428276062,
            0.992110013961792,
            0.9916474223136902,
            0.9853756427764893,
            0.9923771619796753,
            0.9899814128875732,
            0.9853911399841309,
            0.9900960326194763,
            0.9776854515075684,
            0.9895754456520081,
            0.9921386241912842,
            0.990045428276062,
            0.9910495281219482,
            0.9914000630378723,
            0.98746258020401,
            0.9830652475357056
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9900417327880859,
        "body": "{\n  \"code\": \"\"\"\nfrom collections import Counter\n\n    counts = Counter(test.split())\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}\n  \"\"\"\n}",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9869421124458313,
            0.9879022240638733,
            0.9883055686950684,
            0.9853646159172058,
            0.9877229928970337,
            0.9824244976043701,
            0.9883151650428772,
            0.9874929189682007,
            0.9886243939399719,
            0.9694796204566956,
            0.988865315914154,
            0.9882220029830933,
            0.9879967570304871,
            0.9868850708007812,
            0.969756007194519,
            0.9884292483329773,
            0.9886772632598877,
            0.9885703921318054,
            0.9900417327880859,
            0.9732064008712769
        ]
    },
    "HumanEval/112": {
        "similarity": 0.996974766254425,
        "body": "    s = ''.join([ch for ch in s if ch not in c])\n    return (s, s == s[::-1])",
        "result": "passed",
        "similarities": [
            0.9960560202598572,
            0.9928647875785828,
            0.9961524605751038,
            0.9962038993835449,
            0.9959098696708679,
            0.9969699382781982,
            0.9966247081756592,
            0.9964196085929871,
            0.9959098696708679,
            0.996974766254425,
            0.99680095911026,
            0.9936948418617249,
            0.9928647875785828,
            0.9964526295661926,
            0.9964526295661926,
            0.9953765869140625,
            0.9966087341308594,
            0.9944510459899902,
            0.9925243854522705,
            0.9959098696708679
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9985986351966858,
        "body": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for c in s if int(c) % 2), i+1, i+1, i+1) for i,s in enumerate(lst)]",
        "result": "failed: Test 1",
        "similarities": [
            0.9980260133743286,
            0.9985733032226562,
            0.9985020160675049,
            0.9985986351966858,
            0.9984545707702637,
            0.9976688027381897,
            0.9980570077896118,
            0.9985986351966858,
            0.9985822439193726,
            0.9959616661071777,
            0.9985209107398987,
            0.9985209107398987,
            0.997086763381958,
            0.9985986351966858,
            0.9984836578369141,
            0.9970903992652893,
            0.9950087666511536,
            0.9969325065612793,
            0.9917899966239929,
            0.9982597827911377
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9961788654327393,
        "body": "    curr_sum = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum < min_sum:\n            min_sum = curr_sum\n    return -min_sum if min_sum == float('inf') else min_sum",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.993137776851654,
            0.9961034059524536,
            0.9957008361816406,
            0.9938386678695679,
            0.9954645037651062,
            0.9940701723098755,
            0.9961788654327393,
            0.995111882686615,
            0.9957068562507629,
            0.9950591921806335,
            0.9950238466262817,
            0.9943650960922241,
            0.9957582354545593,
            0.9949057698249817,
            0.9960706830024719,
            0.9953309893608093,
            0.9917043447494507,
            0.9949772357940674,
            0.9952254891395569,
            0.9945072531700134
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9964982867240906,
        "body": "    return sum(sum(row) for row in grid) // capacity",
        "result": "failed: Error",
        "similarities": [
            0.9961307048797607,
            0.9957315325737,
            0.9964982867240906,
            0.9957315325737,
            0.9961307048797607,
            0.9964982867240906,
            0.9956221580505371,
            0.9903291463851929,
            0.9961307048797607,
            0.9964982867240906,
            0.9964982867240906,
            0.9951096773147583,
            0.9810570478439331,
            0.9964982867240906,
            0.9926150441169739,
            0.9964982867240906,
            0.9903291463851929,
            0.9964982867240906,
            0.9903292655944824,
            0.9958769083023071
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9987104535102844,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            0.9971864819526672,
            0.9984453916549683,
            0.9971864819526672,
            0.9987104535102844,
            0.9987104535102844,
            0.9967186450958252,
            0.9987104535102844,
            0.9967186450958252,
            0.9971864819526672,
            0.9981435537338257,
            0.9981435537338257,
            0.9967186450958252,
            0.9951981902122498,
            0.9967187643051147,
            0.9987104535102844,
            0.9987104535102844,
            0.9959235191345215,
            0.9987104535102844,
            0.9987104535102844,
            0.9987104535102844
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9986761212348938,
        "body": "    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = [word for word in words if sum(c in consonants for c in word) == n]\n    return result",
        "result": "passed",
        "similarities": [
            0.9962393045425415,
            0.9985841512680054,
            0.9986344575881958,
            0.9986344575881958,
            0.9979039430618286,
            0.9969111084938049,
            0.9969111084938049,
            0.9986761212348938,
            0.9986761212348938,
            0.9984452128410339,
            0.9973474144935608,
            0.9971824288368225,
            0.9969111084938049,
            0.9986344575881958,
            0.9970390200614929,
            0.9986178874969482,
            0.9983105063438416,
            0.9986178874969482,
            0.9984452128410339,
            0.9982566833496094
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9976152181625366,
        "body": "    vowels = 'aeiou'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed",
        "similarities": [
            0.9968253970146179,
            0.9975243806838989,
            0.9973909258842468,
            0.9975990653038025,
            0.9950857758522034,
            0.9970371127128601,
            0.9970371127128601,
            0.9930785298347473,
            0.9970026612281799,
            0.9976152181625366,
            0.9974960684776306,
            0.9949533343315125,
            0.996881365776062,
            0.9975961446762085,
            0.9906589388847351,
            0.9962562918663025,
            0.9972111582756042,
            0.9972111582756042,
            0.9921101927757263,
            0.9975619912147522
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9904412031173706,
        "body": "  open = lst[0].count('(')\n  close = lst[1].count(')')\n  if open == close or open > close:\n    return 'Yes'\n  else:\n    return 'No'",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 17)",
        "similarities": [
            0.987096905708313,
            0.9904412031173706,
            0.9850472211837769,
            0.9826086759567261,
            0.9703317880630493,
            0.9883401989936829,
            0.989577054977417,
            0.9898276329040527,
            0.9886440634727478,
            0.9641225934028625,
            0.989859938621521,
            0.9884431958198547,
            0.9834070801734924,
            0.987501859664917,
            0.9842028617858887,
            0.9879967570304871,
            0.984383225440979,
            0.9883736371994019,
            0.9825270771980286,
            0.9850545525550842
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9928522706031799,
        "body": "    return sorted(set(arr))[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9896926879882812,
            0.9890140891075134,
            0.9928522706031799,
            0.9917649030685425,
            0.9896926879882812,
            0.9896926879882812,
            0.9834473133087158,
            0.9834473133087158,
            0.9923590421676636,
            0.9910371899604797,
            0.9896926879882812,
            0.9928522706031799,
            0.9928522706031799,
            0.9911613464355469,
            0.9896926879882812,
            0.9923590421676636,
            0.9834473133087158,
            0.9896926879882812,
            0.9923590421676636,
            0.9894136190414429
        ]
    },
    "HumanEval/121": {
        "similarity": 0.997189998626709,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.997189998626709,
            0.9963569641113281,
            0.9963569641113281,
            0.997189998626709,
            0.9867854714393616,
            0.997189998626709,
            0.9940434694290161,
            0.997189998626709,
            0.9892645478248596,
            0.997189998626709,
            0.9940434694290161,
            0.997189998626709,
            0.997189998626709,
            0.9936360120773315,
            0.997189998626709,
            0.9955483675003052,
            0.9963569641113281,
            0.9940434694290161,
            0.997189998626709,
            0.997109055519104
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9976850152015686,
        "body": "    return sum(i for i in arr[:k] if abs(i) < 100)",
        "result": "passed",
        "similarities": [
            0.9976850152015686,
            0.9974840879440308,
            0.9911543130874634,
            0.9974300861358643,
            0.9976850152015686,
            0.9976850152015686,
            0.9976850152015686,
            0.9970044493675232,
            0.9906598329544067,
            0.9969033002853394,
            0.9842563271522522,
            0.9973593354225159,
            0.9976850152015686,
            0.9974526166915894,
            0.9972074627876282,
            0.9976850152015686,
            0.9975610375404358,
            0.9976831674575806,
            0.9975610375404358,
            0.996616542339325
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9981306195259094,
        "body": "    seq = []\n    while n != 1:\n        if n % 2 == 1:\n            seq.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(seq)",
        "result": "failed: ",
        "similarities": [
            0.996548593044281,
            0.9979029297828674,
            0.9981306195259094,
            0.9973092675209045,
            0.997686505317688,
            0.9980135560035706,
            0.9975651502609253,
            0.9981306195259094,
            0.9979243874549866,
            0.9978895783424377,
            0.9961929321289062,
            0.9971213936805725,
            0.9979225993156433,
            0.9963362812995911,
            0.9975867867469788,
            0.9963080883026123,
            0.9976457357406616,
            0.9981306195259094,
            0.9969165325164795,
            0.9973283410072327
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9955458641052246,
        "body": "    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    day = int(date[:2])\n    month = int(date[3:5])\n    max_days = {1:31, 2:29, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if day < 1 or month < 1 or month > 12:\n        return False\n    elif date[6:] != '20' + date[-2:] and len(date) == 10:\n        return False\n    elif day > max_days.get(month):\n        return False\n    else:\n        return True",
        "result": "failed: ",
        "similarities": [
            0.9928544759750366,
            0.9936140179634094,
            0.9935110211372375,
            0.9923439025878906,
            0.9923039674758911,
            0.9948034882545471,
            0.9925141930580139,
            0.9943273663520813,
            0.992839515209198,
            0.9955458641052246,
            0.9940868020057678,
            0.9922170042991638,
            0.9949832558631897,
            0.991148829460144,
            0.9949904084205627,
            0.9939579367637634,
            0.9942846894264221,
            0.9932776093482971,
            0.9940669536590576,
            0.9930406808853149
        ]
    },
    "HumanEval/125": {
        "similarity": 0.994010329246521,
        "body": "if ',' in txt:\n    return txt.split(',')\nelif ' ' in txt:\n    return txt.split()\nelse:\n    return sum(1 for c in txt if ord(c) % 2 != 0)",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9933715462684631,
            0.9936627149581909,
            0.994010329246521,
            0.9923188090324402,
            0.9851361513137817,
            0.9933715462684631,
            0.9914323091506958,
            0.9928399324417114,
            0.9935951232910156,
            0.987849771976471,
            0.9930264353752136,
            0.9939109683036804,
            0.990048885345459,
            0.9860368371009827,
            0.9910906553268433,
            0.991317868232727,
            0.9935486316680908,
            0.9932856559753418,
            0.9881592988967896,
            0.9923155903816223
        ]
    },
    "HumanEval/126": {
        "similarity": 0.992764949798584,
        "body": "return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "similarities": [
            0.9868269562721252,
            0.9836824536323547,
            0.9900317788124084,
            0.9918459057807922,
            0.9918459057807922,
            0.9900317788124084,
            0.9918459057807922,
            0.9886223673820496,
            0.9900317788124084,
            0.9909340739250183,
            0.992764949798584,
            0.9886223673820496,
            0.9911143779754639,
            0.9900317788124084,
            0.9900317788124084,
            0.9886223673820496,
            0.9870294332504272,
            0.9870294332504272,
            0.9900317788124084,
            0.9820027947425842
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9984158873558044,
        "body": "    if n < 2: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1 if start <= end else 0\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9983696341514587,
            0.9978392720222473,
            0.9972456097602844,
            0.9971449971199036,
            0.9976458549499512,
            0.9938499927520752,
            0.9953352212905884,
            0.9977937340736389,
            0.9961116313934326,
            0.9983007311820984,
            0.9984158873558044,
            0.9951180219650269,
            0.9982414245605469,
            0.9969106316566467,
            0.9977291822433472,
            0.9979755878448486,
            0.9975901246070862,
            0.9978373646736145,
            0.9978509545326233,
            0.9978728890419006
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9960736036300659,
        "body": "    if not arr:\n        return None\n    sign = 1\n    mag_sum = sum(abs(x) for x in arr)\n    for x in arr:\n        sign *= -1 if x < 0 else (1 if x > 0 else 0)\n    return sign * mag_sum",
        "result": "passed",
        "similarities": [
            0.9941630959510803,
            0.9933669567108154,
            0.9960736036300659,
            0.9939151406288147,
            0.9957880973815918,
            0.9948764443397522,
            0.995466947555542,
            0.9954081177711487,
            0.9948459267616272,
            0.9960232973098755,
            0.980022132396698,
            0.9949390888214111,
            0.9944321513175964,
            0.9959873557090759,
            0.9960569143295288,
            0.9954769015312195,
            0.995083749294281,
            0.9792803525924683,
            0.9945371747016907,
            0.9942119121551514
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9973241090774536,
        "body": "    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        if k == 0:\n            return []\n        min_path = float('inf')\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                min_path = min(min_path, new_path)\n        return min_path\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            result = dfs(i, j, k, [])\n            if len(result) == k:\n                return sorted(result)\n\n    return []",
        "result": "failed: unexpected indent (<string>, line 36)",
        "similarities": [
            0.9937667846679688,
            0.9951257109642029,
            0.9967191815376282,
            0.9962316751480103,
            0.9956349730491638,
            0.9973241090774536,
            0.9926878213882446,
            0.995346188545227,
            0.9965158104896545,
            0.9963424205780029,
            0.9949475526809692,
            0.9960379600524902,
            0.9958323240280151,
            0.9965527057647705,
            0.9954673647880554,
            0.9964098930358887,
            0.9966897368431091,
            0.9967937469482422,
            0.9958815574645996,
            0.9907959699630737
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9956129789352417,
        "body": "    if n == 0: return []\n    elif n == 1: return [3]\n    else:\n        trib = [3]\n        for i in range(2, n + 1):\n            trib.append(trib[i - 1] + (trib[i - 2] if i % 2 == 0 else trib[i]) + ((i + 1) if i % 2 != 0 else 1))\n        return trib",
        "result": "failed: list index out of range",
        "similarities": [
            0.9952989816665649,
            0.9956129789352417,
            0.9911394715309143,
            0.9955548644065857,
            0.9901323914527893,
            0.9935653209686279,
            0.9943287372589111,
            0.9928365349769592,
            0.9953038096427917,
            0.9824283123016357,
            0.9945520162582397,
            0.9948250651359558,
            0.9949609637260437,
            0.9949694275856018,
            0.9940091371536255,
            0.9939560294151306,
            0.9952754974365234,
            0.9925042986869812,
            0.9938780069351196,
            0.9941412210464478
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9968081116676331,
        "body": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9961522817611694,
            0.9968081116676331,
            0.9968081116676331,
            0.9966942667961121,
            0.9782084226608276,
            0.9854491353034973,
            0.9966851472854614,
            0.9968081116676331,
            0.995153546333313,
            0.9967036843299866,
            0.9961522817611694,
            0.9954179525375366,
            0.9960824847221375,
            0.995357096195221,
            0.9961814880371094,
            0.9968081116676331,
            0.9968081116676331,
            0.9968081116676331,
            0.9967968463897705,
            0.9960824847221375
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9982231855392456,
        "body": "  count = 0\n  for c in s:\n    if c == '[':\n      count += 1\n    elif c == ']':\n      count -= 1\n      if count < 0:\n        return True\n  return False",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 15)",
        "similarities": [
            0.9978906512260437,
            0.9965330362319946,
            0.997816801071167,
            0.9978906512260437,
            0.9981203675270081,
            0.9960755705833435,
            0.9977023601531982,
            0.997714102268219,
            0.9980942606925964,
            0.9980790019035339,
            0.9982231855392456,
            0.9980103373527527,
            0.9972200989723206,
            0.9972200989723206,
            0.9978906512260437,
            0.9980993866920471,
            0.9980626702308655,
            0.9980103373527527,
            0.9980961680412292,
            0.9973289370536804
        ]
    },
    "HumanEval/133": {
        "similarity": 0.996343731880188,
        "body": "    return sum(int(x) ** 2 for x in lst)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9962831735610962,
            0.9951342344284058,
            0.9955297112464905,
            0.9951017498970032,
            0.9955297112464905,
            0.9912804365158081,
            0.996343731880188,
            0.9962831735610962,
            0.9896168112754822,
            0.9955297112464905,
            0.996224582195282,
            0.9951017498970032,
            0.9955297112464905,
            0.9951017498970032,
            0.9962831735610962,
            0.9962831735610962,
            0.9961427450180054,
            0.9955297112464905,
            0.9865156412124634,
            0.9865156412124634
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9962487816810608,
        "body": "if txt and txt[-1].isalpha() and not txt[-2:].isspace():\n    return True\nelse:\n    return False",
        "result": "failed: 'return' outside function (<string>, line 16)",
        "similarities": [
            0.9930230379104614,
            0.9954583048820496,
            0.9948577880859375,
            0.9939303398132324,
            0.9928376078605652,
            0.9943895936012268,
            0.9962487816810608,
            0.9944876432418823,
            0.9950748085975647,
            0.9945354461669922,
            0.9945809245109558,
            0.995918869972229,
            0.9956243634223938,
            0.9936256408691406,
            0.9943895936012268,
            0.9957420229911804,
            0.9943895936012268,
            0.9962487816810608,
            0.995784342288971,
            0.9952937960624695
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9970130920410156,
        "body": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9953233003616333,
            0.9970130920410156,
            0.9965286254882812,
            0.9968458414077759,
            0.9965286254882812,
            0.9960973858833313,
            0.9967605471611023,
            0.9908477663993835,
            0.9968458414077759,
            0.995335042476654,
            0.9893346428871155,
            0.9965286254882812,
            0.9970130920410156,
            0.9970130920410156,
            0.9908477663993835,
            0.9970130920410156,
            0.9955639243125916,
            0.9970130920410156,
            0.9965286254882812,
            0.9970130920410156
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9941385388374329,
        "body": "  negatives = sorted(x for x in lst if x < 0)\n  positives = sorted(x for x in lst if x > 0)\n  return (negatives[-1] if negatives else None, positives[0] if positives else None)",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9890770316123962,
            0.9941385388374329,
            0.9901966452598572,
            0.9924900531768799,
            0.981899082660675,
            0.9892918467521667,
            0.9903355836868286,
            0.9912053942680359,
            0.9936119914054871,
            0.9901966452598572,
            0.9941385388374329,
            0.9928464293479919,
            0.991187334060669,
            0.9932981729507446,
            0.9936119914054871,
            0.9936898946762085,
            0.9936898946762085,
            0.9910312294960022,
            0.9892351031303406,
            0.9937776327133179
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9908047914505005,
        "body": "    if isinstance(a, str): a = float(a.replace(',', '.'))\n    if isinstance(b, str): b = float(b.replace(',', '.'))\n\n    if a > b: return a\n    elif a < b: return b\n    else: return None",
        "result": "failed: ",
        "similarities": [
            0.9872168302536011,
            0.9908047914505005,
            0.9832466840744019,
            0.9886135458946228,
            0.9887240529060364,
            0.9849743247032166,
            0.9890084862709045,
            0.9893619418144226,
            0.9866664409637451,
            0.9844406843185425,
            0.9893336892127991,
            0.9811479449272156,
            0.9724680185317993,
            0.9895387291908264,
            0.986314058303833,
            0.9844759106636047,
            0.9883790612220764,
            0.9868665933609009,
            0.9877589344978333,
            0.9749577045440674
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9915503263473511,
        "body": "  return any(n == sum(sorted([i for i in range(2, n+1, 2) if i%4==0], reverse=True))[:4] for _ in range(4))",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 9)",
        "similarities": [
            0.9824469685554504,
            0.9885225892066956,
            0.9899914264678955,
            0.9815330505371094,
            0.9908829927444458,
            0.9873219728469849,
            0.9901131391525269,
            0.9799854755401611,
            0.9913371205329895,
            0.983090877532959,
            0.9899133443832397,
            0.9868413805961609,
            0.9900113344192505,
            0.9891969561576843,
            0.9915503263473511,
            0.9912305474281311,
            0.9905715584754944,
            0.9888976216316223,
            0.9883447885513306,
            0.9889460206031799
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9964174032211304,
        "body": "    product = 1\n    for i in range(1, n + 1):\n        product *= math.factorial(i)\n    return product",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9953269958496094,
            0.9859696626663208,
            0.9952545166015625,
            0.996243953704834,
            0.9940848350524902,
            0.9950641989707947,
            0.9963039755821228,
            0.9828196167945862,
            0.9926794171333313,
            0.9960511922836304,
            0.9945437908172607,
            0.9960262179374695,
            0.9950624108314514,
            0.9934310913085938,
            0.9964174032211304,
            0.9842960834503174,
            0.996243953704834,
            0.9942167401313782,
            0.9932865500450134,
            0.9956699013710022
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9958688616752625,
        "body": "    return '_'.join('' if c == ' ' else c for c in text.replace('  ', '-').split())",
        "result": "failed: This prints if this assert fails 2 (good for debugging!)",
        "similarities": [
            0.9941665530204773,
            0.9942610859870911,
            0.9952993988990784,
            0.9955542683601379,
            0.9941942095756531,
            0.9823591113090515,
            0.9944867491722107,
            0.9938668012619019,
            0.9929048418998718,
            0.9930627942085266,
            0.9926402568817139,
            0.9958688616752625,
            0.9957063794136047,
            0.9956091642379761,
            0.9937372803688049,
            0.9953614473342896,
            0.994781494140625,
            0.9937258362770081,
            0.9873230457305908,
            0.9932243227958679
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9941481351852417,
        "body": "  if len(re.findall(r'\\d', file_name)) > 3 or file_name.count('.') != 1 or not file_name[0].isalpha() or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  else:\n    return 'Yes'",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 16)",
        "similarities": [
            0.9941481351852417,
            0.9710705280303955,
            0.9888572692871094,
            0.993818998336792,
            0.9928331971168518,
            0.9928889274597168,
            0.9892949461936951,
            0.9890215992927551,
            0.9937810301780701,
            0.9925822019577026,
            0.9866965413093567,
            0.9934877157211304,
            0.9921209216117859,
            0.9920421242713928,
            0.9924559593200684,
            0.9916236400604248,
            0.9934818148612976,
            0.9916343688964844,
            0.9882413148880005,
            0.9909249544143677
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9986903667449951,
        "body": "    return sum(x**3 if i%4==0 and i%3!=0 else x**2 if i%3==0 else x for i,x in enumerate(lst))",
        "result": "passed",
        "similarities": [
            0.9985181093215942,
            0.9986903667449951,
            0.9986903667449951,
            0.9986903667449951,
            0.9981245994567871,
            0.9969723224639893,
            0.9983325600624084,
            0.9986767172813416,
            0.9985181093215942,
            0.9982602000236511,
            0.9985041618347168,
            0.9985650777816772,
            0.9985181093215942,
            0.9978697896003723,
            0.9950781464576721,
            0.9986767172813416,
            0.9982602000236511,
            0.9904552102088928,
            0.9986903667449951,
            0.9984845519065857
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9930371046066284,
        "body": "    primes = [2,3,5,7,11,13,17,19]\n    return ' '.join(word for word in sentence.split() if len(word) in primes)",
        "result": "passed",
        "similarities": [
            0.9843212962150574,
            0.9741761088371277,
            0.9765588045120239,
            0.991155207157135,
            0.9853477478027344,
            0.9858266115188599,
            0.99261873960495,
            0.9903847575187683,
            0.990403950214386,
            0.992557942867279,
            0.9930371046066284,
            0.9872406721115112,
            0.991155207157135,
            0.992557942867279,
            0.990403950214386,
            0.9845907092094421,
            0.9909685850143433,
            0.992059588432312,
            0.9892087578773499,
            0.9900361895561218
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9971548318862915,
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * den_n) % den_x == 0",
        "result": "failed: test1",
        "similarities": [
            0.9968683123588562,
            0.9971548318862915,
            0.9971326589584351,
            0.9933505654335022,
            0.9939394593238831,
            0.9963244199752808,
            0.9967928528785706,
            0.9907925128936768,
            0.9967513084411621,
            0.995941162109375,
            0.9959303140640259,
            0.9970921277999878,
            0.9925298094749451,
            0.9957309365272522,
            0.9968683123588562,
            0.9968031048774719,
            0.9966354370117188,
            0.9930213093757629,
            0.9958542585372925,
            0.9968683123588562
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9962313771247864,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            0.9962313771247864,
            0.9949026703834534,
            0.9858809113502502,
            0.9923955202102661,
            0.9947068095207214,
            0.9947662353515625,
            0.9947068095207214,
            0.991473376750946,
            0.9947068095207214,
            0.9962313771247864,
            0.9962313771247864,
            0.9926343560218811,
            0.9953681826591492,
            0.9962313771247864,
            0.9953717589378357,
            0.9962313771247864,
            0.9954546689987183,
            0.9956908226013184,
            0.9955447316169739,
            0.9962313771247864
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9968129992485046,
        "body": "    return sum(1 for n in nums if n > 10 and str(n)[0]%2==1 and str(n)[-1]%2==1)",
        "result": "failed: not all arguments converted during string formatting",
        "similarities": [
            0.9930819272994995,
            0.9961919188499451,
            0.9956689476966858,
            0.9956689476966858,
            0.9941624999046326,
            0.9935675263404846,
            0.9946615099906921,
            0.9933543801307678,
            0.9968129992485046,
            0.9962990283966064,
            0.9894633889198303,
            0.9965531229972839,
            0.9954884052276611,
            0.9966087341308594,
            0.9962990283966064,
            0.9956689476966858,
            0.994537889957428,
            0.995819091796875,
            0.995928943157196,
            0.9962990283966064
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9953413605690002,
        "body": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 and i < j < k for i in range(n) for j in range(i+1, n) for k in range(j+1, n))",
        "result": "failed: ",
        "similarities": [
            0.9953413605690002,
            0.9942969083786011,
            0.9927573204040527,
            0.9950005412101746,
            0.9946510195732117,
            0.9952159523963928,
            0.9923722147941589,
            0.9943334460258484,
            0.994381844997406,
            0.9896661639213562,
            0.9948143362998962,
            0.9945695996284485,
            0.9944455027580261,
            0.9948775768280029,
            0.9891456961631775,
            0.9946449995040894,
            0.9944711327552795,
            0.9946510195732117,
            0.9953412413597107,
            0.9945259094238281
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9975436329841614,
        "body": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])",
        "result": "failed: unexpected indent (<string>, line 19)",
        "similarities": [
            0.9966195821762085,
            0.9972392916679382,
            0.9970807433128357,
            0.995365560054779,
            0.9972453713417053,
            0.9958409667015076,
            0.9970227479934692,
            0.9967980980873108,
            0.9968511462211609,
            0.9965757131576538,
            0.9915884137153625,
            0.9972968101501465,
            0.9943554401397705,
            0.9964742064476013,
            0.9925157427787781,
            0.9963812828063965,
            0.9975436329841614,
            0.9966195821762085,
            0.9956217408180237,
            0.9970278739929199
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9959854483604431,
        "body": "  return sorted([x for x in lst if len(x) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 17)",
        "similarities": [
            0.9959854483604431,
            0.9959313273429871,
            0.9855777621269226,
            0.9958544373512268,
            0.9959854483604431,
            0.9957683086395264,
            0.9958544373512268,
            0.9815919995307922,
            0.9929406046867371,
            0.9959854483604431,
            0.9880202412605286,
            0.9957683086395264,
            0.9927248954772949,
            0.9949883818626404,
            0.9959391355514526,
            0.9934827089309692,
            0.9850736856460571,
            0.9959854483604431,
            0.9958544373512268,
            0.9959313273429871
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9988020062446594,
        "body": "    if n < 2: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return x if is_prime(n) else y",
        "result": "failed: ",
        "similarities": [
            0.9987590312957764,
            0.9980006814002991,
            0.9978880882263184,
            0.998680830001831,
            0.9987590312957764,
            0.9985592365264893,
            0.9987590312957764,
            0.9987590312957764,
            0.9987590312957764,
            0.9981057047843933,
            0.9987590312957764,
            0.9983689188957214,
            0.9987590312957764,
            0.9987590312957764,
            0.9914949536323547,
            0.9987590312957764,
            0.996470034122467,
            0.9937456250190735,
            0.9987590312957764,
            0.9988020062446594
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9982290863990784,
        "body": "    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.9979085326194763,
            0.9981290102005005,
            0.9978535175323486,
            0.9894267916679382,
            0.9982290863990784,
            0.9982290863990784,
            0.9969473481178284,
            0.9982290863990784,
            0.9941729307174683,
            0.9981290102005005,
            0.9982290863990784,
            0.9959186911582947,
            0.9981124401092529,
            0.9981290102005005,
            0.9982290863990784,
            0.9981290102005005,
            0.9957898855209351,
            0.9981124401092529,
            0.9971703290939331,
            0.994899570941925
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9979647397994995,
        "body": "  return [abs(a - b) for a, b in zip(game, guess)]",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 17)",
        "similarities": [
            0.9977205991744995,
            0.9975612163543701,
            0.997604489326477,
            0.9975612163543701,
            0.997604489326477,
            0.9977205991744995,
            0.9976649880409241,
            0.9962965250015259,
            0.997855544090271,
            0.9979647397994995,
            0.9977205991744995,
            0.9944425225257874,
            0.9970932006835938,
            0.997604489326477,
            0.9964028596878052,
            0.9979647397994995,
            0.9976649880409241,
            0.9906610250473022,
            0.9977205991744995,
            0.9978621602058411
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9954119324684143,
        "body": "  strongest = max(extensions, key=lambda x: sum(c.isupper() for c in x) - sum(c.islower() for c in x))\n  return f\"{class_name}.{strongest}\"",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 19)",
        "similarities": [
            0.9878507852554321,
            0.9938260316848755,
            0.9954119324684143,
            0.9924070239067078,
            0.9954119324684143,
            0.9950323700904846,
            0.9949160218238831,
            0.9946214556694031,
            0.9914248585700989,
            0.9928206205368042,
            0.9946214556694031,
            0.9829123616218567,
            0.9916307330131531,
            0.9833274483680725,
            0.9929458498954773,
            0.9930290579795837,
            0.9942685961723328,
            0.9951601624488831,
            0.9950322508811951,
            0.9950322508811951
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9982556700706482,
        "body": "    return any(b[i:] + b[:i] in a for i in range(len(b)))",
        "result": "passed",
        "similarities": [
            0.9979842305183411,
            0.9931735992431641,
            0.9982556700706482,
            0.9978970885276794,
            0.9978970885276794,
            0.9945769309997559,
            0.9982556700706482,
            0.9982556700706482,
            0.993415355682373,
            0.9978970885276794,
            0.9976118206977844,
            0.9931735992431641,
            0.9982556700706482,
            0.9976741671562195,
            0.9982556700706482,
            0.9979532957077026,
            0.9982556700706482,
            0.9982556700706482,
            0.9979842305183411,
            0.9981906414031982
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9948292970657349,
        "body": "    count_even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    count_odd = len(str(abs(num))) - count_even\n    return count_even, count_odd",
        "result": "passed",
        "similarities": [
            0.9935526847839355,
            0.9892855286598206,
            0.9948292970657349,
            0.9942740201950073,
            0.9886203408241272,
            0.9886203408241272,
            0.9892855286598206,
            0.9942740201950073,
            0.9931426048278809,
            0.9942740201950073,
            0.9942740201950073,
            0.9942740201950073,
            0.9948292970657349,
            0.9943617582321167,
            0.9894724488258362,
            0.9946044087409973,
            0.9941379427909851,
            0.9946044087409973,
            0.9761820435523987,
            0.9942740201950073
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9957102537155151,
        "body": "    roman = ''\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman += syms[i]\n            number -= val[i]\n    return roman",
        "result": "passed",
        "similarities": [
            0.9954001903533936,
            0.9937739968299866,
            0.9947252869606018,
            0.9939635396003723,
            0.9927099347114563,
            0.9957102537155151,
            0.9949156045913696,
            0.9955052137374878,
            0.9933558106422424,
            0.9925355315208435,
            0.9944504499435425,
            0.9941815733909607,
            0.9945068359375,
            0.9952906370162964,
            0.9952439069747925,
            0.9927734732627869,
            0.9935262799263,
            0.9924713969230652,
            0.9937739968299866,
            0.9933722615242004
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9978059530258179,
        "body": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2",
        "result": "passed",
        "similarities": [
            0.9978059530258179,
            0.9958524107933044,
            0.9978059530258179,
            0.9950799345970154,
            0.9936103820800781,
            0.9977896809577942,
            0.9977896809577942,
            0.994870662689209,
            0.9936103820800781,
            0.9978059530258179,
            0.9977896809577942,
            0.9977896809577942,
            0.9977896809577942,
            0.9963218569755554,
            0.9977896809577942,
            0.9977896809577942,
            0.9957460165023804,
            0.9963218569755554,
            0.9961981773376465,
            0.9948142170906067
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9923531413078308,
        "body": "    return max(words, key=lambda x: (len(set(x)), x))",
        "result": "failed: t2",
        "similarities": [
            0.9908553957939148,
            0.9851914644241333,
            0.9829113483428955,
            0.9923531413078308,
            0.9916305541992188,
            0.9818663597106934,
            0.9916709065437317,
            0.9835665822029114,
            0.9922569990158081,
            0.9916709065437317,
            0.9922745227813721,
            0.9920744895935059,
            0.9920744895935059,
            0.9835664629936218,
            0.9916305541992188,
            0.9916709065437317,
            0.9916305541992188,
            0.9836747050285339,
            0.9835664629936218,
            0.9844794273376465
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9958867430686951,
        "body": "    eaten = min(need, remaining + number)\n    left = max(0, remaining + number - eaten)\n    return [eaten, left]",
        "result": "failed: Error",
        "similarities": [
            0.9931338429450989,
            0.9956283569335938,
            0.9958627820014954,
            0.9954647421836853,
            0.9851838946342468,
            0.9930766224861145,
            0.9933983683586121,
            0.9942980408668518,
            0.9958867430686951,
            0.9947348237037659,
            0.9958867430686951,
            0.9941906332969666,
            0.9958867430686951,
            0.9944594502449036,
            0.9947945475578308,
            0.9953095316886902,
            0.9943193197250366,
            0.9936658143997192,
            0.9947348237037659,
            0.9952327609062195
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9962624311447144,
        "body": "    result = operand[0]\n    for i in range(len(operand) - 1):\n        op = operator[i]\n        num = operand[i + 1]\n        if op == '+': result += num\n        elif op == '-': result -= num\n        elif op == '*': result *= num\n        elif op == '//': result //= num\n        elif op == '**': result **= num\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9932379722595215,
            0.9933451414108276,
            0.9947041869163513,
            0.9909059405326843,
            0.9949904084205627,
            0.9962624311447144,
            0.995334804058075,
            0.9958691000938416,
            0.9957458972930908,
            0.995387613773346,
            0.9949490427970886,
            0.9957458972930908,
            0.9958674907684326,
            0.993047833442688,
            0.9958674907684326,
            0.9949142336845398,
            0.9958691000938416,
            0.9950816631317139,
            0.9950059652328491,
            0.9958674907684326
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9948810935020447,
        "body": "    return ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1] if not all(char.isalpha() for char in s) or c.isalpha())",
        "result": "failed: ",
        "similarities": [
            0.9909572601318359,
            0.9902072548866272,
            0.9948810935020447,
            0.9887077808380127,
            0.9872371554374695,
            0.9937589764595032,
            0.9948539733886719,
            0.9871252775192261,
            0.9947944283485413,
            0.992655336856842,
            0.994450032711029,
            0.9897329211235046,
            0.979908287525177,
            0.9942236542701721,
            0.9931310415267944,
            0.9871026277542114,
            0.9926248788833618,
            0.9947085976600647,
            0.9939786791801453,
            0.9918425679206848
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9984989166259766,
        "body": "import hashlib\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9975854754447937,
            0.9939202070236206,
            0.9977063536643982,
            0.9982079863548279,
            0.9984989166259766,
            0.9984989166259766,
            0.9984989166259766,
            0.995566725730896,
            0.9929455518722534,
            0.998498797416687,
            0.998498797416687,
            0.9978068470954895,
            0.9984989166259766,
            0.9984989166259766,
            0.996962308883667,
            0.9984989166259766,
            0.9984989166259766,
            0.995566725730896,
            0.9982582926750183,
            0.9984577894210815
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9913619160652161,
        "body": "    return sorted([x for x in range(max(a, b), min(a, b) + 1) if x % 2 == 0])",
        "result": "failed: Test 1",
        "similarities": [
            0.988287091255188,
            0.9844316244125366,
            0.9844236969947815,
            0.9876947999000549,
            0.9851493835449219,
            0.9903799295425415,
            0.9871577024459839,
            0.988287091255188,
            0.9913619160652161,
            0.9871577024459839,
            0.9906626343727112,
            0.9912934899330139,
            0.9804087281227112,
            0.9852162599563599,
            0.9771836996078491,
            0.9871577024459839,
            0.9871577024459839,
            0.9844316244125366,
            0.9830356240272522,
            0.9813768267631531
        ]
    }
}