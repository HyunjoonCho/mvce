{
    "4693": {
        "similarity": 0.9946720004081726,
        "body": "A, B = map(int, input().split())\nresult = A + B if result < 10 else \"error\"\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940823912620544,
            0.9940436482429504,
            0.9940436482429504,
            0.9940823912620544,
            0.9940392374992371,
            0.990328848361969,
            0.9941099882125854,
            0.9922063946723938,
            0.9922001361846924,
            0.9933146238327026,
            0.9835348725318909,
            0.9943835735321045,
            0.9913809895515442,
            0.9913347959518433,
            0.9903014302253723,
            0.9943687319755554,
            0.9892420768737793,
            0.9904395937919617,
            0.9940392374992371,
            0.9946720004081726
        ]
    },
    "4077": {
        "similarity": 0.9968302845954895,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        l, r = i, i + 1\n        while r < n and a[r] <= m:\n            r += 1\n        if r > i + 1 and a[l] == m == a[r - 1]:\n            count += max(0, min(r - l - 2, 2 * (r - l - 2)))\n    print(count)\n\ncount_median_pairs()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949830770492554,
            0.9968302845954895,
            0.9955517649650574,
            0.9957143664360046,
            0.9928968548774719,
            0.9963840842247009,
            0.9962937235832214,
            0.9963513612747192,
            0.9961230754852295,
            0.9957767128944397,
            0.9956421256065369,
            0.995857834815979,
            0.994756817817688,
            0.9949981570243835,
            0.9964305758476257,
            0.9965836405754089,
            0.9947015643119812,
            0.9915478229522705,
            0.9959933757781982,
            0.992405354976654
        ]
    },
    "4006": {
        "similarity": 0.9964301586151123,
        "body": "    reachable = set()\n    while n <= 10**9:\n        reachable.add(n)\n        n += 1\n        while n % 10 == 0:\n            n //= 10\n    return len(reachable)\n\nn = int(input())\nprint(count_reachable(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931623339653015,
            0.9944310784339905,
            0.9930513501167297,
            0.9958773255348206,
            0.9927529096603394,
            0.996118426322937,
            0.9929388761520386,
            0.9942619204521179,
            0.9926223754882812,
            0.9922499656677246,
            0.995688796043396,
            0.9953843355178833,
            0.9943979978561401,
            0.9934718608856201,
            0.9962875843048096,
            0.9950791597366333,
            0.9964301586151123,
            0.9927988648414612,
            0.994411289691925,
            0.9964301586151123
        ]
    },
    "4556": {
        "similarity": 0.996080219745636,
        "body": "s = input()\nprint(s[0] + \"C\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.99496990442276,
            0.9937115907669067,
            0.9924576282501221,
            0.9920995831489563,
            0.9958348870277405,
            0.9946629405021667,
            0.9931136965751648,
            0.9952468872070312,
            0.9917874932289124,
            0.9920425415039062,
            0.9950920939445496,
            0.9924576282501221,
            0.996080219745636,
            0.9935465455055237,
            0.996080219745636,
            0.9937371611595154,
            0.9956635236740112,
            0.9958064556121826,
            0.9953683614730835,
            0.9939108490943909
        ]
    },
    "4571": {
        "similarity": 0.9960538148880005,
        "body": "N, M = map(int, input().split())\nX = sum((i * 2 ** i) * 1900 / 2 ** i for i in range(1, M + 1)) + N - M\nprint(X)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960144758224487,
            0.9937717318534851,
            0.9925623536109924,
            0.9949793815612793,
            0.9955345988273621,
            0.9951568245887756,
            0.9955106973648071,
            0.9954349994659424,
            0.9950007200241089,
            0.9948541522026062,
            0.994330883026123,
            0.9925394654273987,
            0.9940674304962158,
            0.9846257567405701,
            0.9952552318572998,
            0.9955428242683411,
            0.9960538148880005,
            0.9956157207489014,
            0.9912028908729553,
            0.9958475828170776
        ]
    },
    "4019": {
        "similarity": 0.9978682994842529,
        "body": "    n, m, D = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        v, u = map(int, input().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n        if node == 1 and degree != D:\n            return False\n        for neighbor in graph[node]:\n            if neighbor != parent and not visited[neighbor]:\n                visited[neighbor] = True\n                if dfs(neighbor, node, degree + 1):\n                    result.append((node, neighbor))\n                    break\n        return True\n\n    visited = [False] * (n+1)\n    result = []\n    visited[1] = True\n    dfs(1, -1, 0)\n\n    print(\"YES\" if len(result) == n-1 else \"NO\")\n    if len(result) == n-1:\n        for v, u in result:\n            print(v, u)\n\nfind_spanning_tree()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969165325164795,
            0.9961541891098022,
            0.994999349117279,
            0.9971717000007629,
            0.9958506226539612,
            0.9966426491737366,
            0.9953357577323914,
            0.9978682994842529,
            0.9951310753822327,
            0.9967547059059143,
            0.9963983297348022,
            0.9977443218231201,
            0.9968627095222473,
            0.9978547692298889,
            0.9974042773246765,
            0.9973054528236389,
            0.9964350461959839,
            0.9959104657173157,
            0.9971376061439514,
            0.9977335929870605
        ]
    },
    "4265": {
        "similarity": 0.9928467273712158,
        "body": "    s = input()\n    t = input()\n    return sum(a != b for a, b in zip(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9900575280189514,
            0.9900575280189514,
            0.9893996715545654,
            0.9900575280189514,
            0.9912238121032715,
            0.9924110770225525,
            0.9912395477294922,
            0.9903613924980164,
            0.9905094504356384,
            0.9927775859832764,
            0.9928467273712158,
            0.9900973439216614,
            0.9900708794593811,
            0.992099940776825,
            0.9911729693412781,
            0.9900417327880859,
            0.9904161095619202,
            0.9918516874313354,
            0.9900022149085999,
            0.9900575280189514
        ]
    },
    "4657": {
        "similarity": 0.996839702129364,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k > 1 and sum(a) % k != 0:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    r = []\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += a[i]\n        if len(r) < k - 1 and cur_sum % 2 == 1:\n            r.append(i + 1)\n    if len(r) != k - 1 or cur_sum % 2 == 0:\n        print(\"NO\")\n        return\n    print(*(r + [n]))\n\nfor _ in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946271777153015,
            0.9959669709205627,
            0.9906719923019409,
            0.9957693815231323,
            0.9911624789237976,
            0.996839702129364,
            0.9965192079544067,
            0.996516764163971,
            0.9951583743095398,
            0.9959921836853027,
            0.9946205019950867,
            0.9940145611763,
            0.9967134594917297,
            0.9963515400886536,
            0.9968235492706299,
            0.9961887001991272,
            0.9960981011390686,
            0.993402898311615,
            0.9967570304870605,
            0.9951005578041077
        ]
    },
    "4599": {
        "similarity": 0.9942097067832947,
        "body": "N = int(input())\ncards = list(map(int, input().split()))\nalice, bob = 0, 0\nfor i in range(N):\n    if i % 2 == 0:\n        alice += cards[i]\n    else:\n        bob += cards[i]\nprint(alice - bob)",
        "result": "failed: testcase 1",
        "similarities": [
            0.993722140789032,
            0.9870011210441589,
            0.9942097067832947,
            0.9894200563430786,
            0.9919079542160034,
            0.9920337200164795,
            0.9869123101234436,
            0.9908540844917297,
            0.9931069612503052,
            0.989080548286438,
            0.9940565228462219,
            0.9940317869186401,
            0.989145815372467,
            0.9920337200164795,
            0.9921582937240601,
            0.9924899935722351,
            0.994022786617279,
            0.9924395680427551,
            0.9920629262924194,
            0.9891664385795593
        ]
    },
    "4774": {
        "similarity": 0.9968153238296509,
        "body": "ops = ['+', '-', '*', '/']\na, b, c, d = map(int, input().split())\nvalid_exprs = []\nfor op1 in ops:\n    for op2 in ops:\n        expr = f\"{a} {op1} {b} = {c} {op2} {d}\"\n        try:\n            if eval(expr) and not (op2 == '/' and d == 0):\n                valid_exprs.append(expr)\n        except ZeroDivisionError:\n            pass\nif valid_exprs:\n    print('\\n'.join(sorted(valid_exprs)))\nelse:\n    print(\"problems ahead\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960184693336487,
            0.9957423210144043,
            0.9967074394226074,
            0.9947975873947144,
            0.9951930642127991,
            0.9934969544410706,
            0.995316743850708,
            0.9951030611991882,
            0.9966135621070862,
            0.9962832927703857,
            0.9928609132766724,
            0.9955648183822632,
            0.9954850077629089,
            0.9965944886207581,
            0.9968153238296509,
            0.9964497089385986,
            0.9945785403251648,
            0.9961861371994019,
            0.9909909963607788,
            0.9952521920204163
        ]
    },
    "4851": {
        "similarity": 0.9974128603935242,
        "body": "    while True:\n        if sum(int(digit) for digit in str(n)) % n == 0:\n            return n\n        n += 1\nn = int(input())\nprint(smallest_harshad(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946850538253784,
            0.9946790337562561,
            0.9954195618629456,
            0.9968624114990234,
            0.9946850538253784,
            0.9974128603935242,
            0.9958708882331848,
            0.9934080839157104,
            0.9959281086921692,
            0.9967610239982605,
            0.9968624114990234,
            0.9965561628341675,
            0.9925014972686768,
            0.9972010254859924,
            0.9965704083442688,
            0.9972010254859924,
            0.9971252083778381,
            0.9954075217247009,
            0.9970698356628418,
            0.996078372001648
        ]
    },
    "4655": {
        "similarity": 0.9942030906677246,
        "body": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    m = max(a, b)\n    if m == a:\n        print((c + a - 1) // 2)\n    else:\n        print(min(c, a + (b + 1) // 2))",
        "result": "failed: testcase 0",
        "similarities": [
            0.994068443775177,
            0.9805004596710205,
            0.9910675883293152,
            0.9934858083724976,
            0.9887984395027161,
            0.9846140146255493,
            0.9882003664970398,
            0.9925071597099304,
            0.9895110130310059,
            0.9925933480262756,
            0.9915395975112915,
            0.9942030906677246,
            0.9908087849617004,
            0.993262529373169,
            0.9925410747528076,
            0.991801917552948,
            0.9916584491729736,
            0.9922069907188416,
            0.9894627928733826,
            0.9937722086906433
        ]
    },
    "4132": {
        "similarity": 0.9962145090103149,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nwhile len(A) > 1:\n    A.sort()\n    A.pop(0)\n    if A[0] > 1:\n        A[0] -= 1\nprint(min(A))",
        "result": "timed out",
        "similarities": [
            0.995830237865448,
            0.9960516095161438,
            0.9901735186576843,
            0.9958301186561584,
            0.9954097270965576,
            0.9960156679153442,
            0.9962145090103149,
            0.9950344562530518,
            0.9905640482902527,
            0.9949554800987244,
            0.9897123575210571,
            0.9915264844894409,
            0.9927691221237183,
            0.9957736134529114,
            0.995586097240448,
            0.9951921701431274,
            0.9953616261482239,
            0.9949824810028076,
            0.990615725517273,
            0.9951135516166687
        ]
    },
    "4085": {
        "similarity": 0.9968082904815674,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        d = sorted(map(int, input().split()))\n        x = 1\n        while True:\n            if all(d[i] % x == 0 for i in range(n)) and x != 1 and x != min(d):\n                break\n            elif max(d) % x == 0 and x > 1:\n                x *= 2\n            else:\n                print(-1)\n                return\n        print(x)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954432249069214,
            0.9965425133705139,
            0.9846209287643433,
            0.9961318969726562,
            0.9954057335853577,
            0.9958627820014954,
            0.9934152364730835,
            0.9962515830993652,
            0.9955769777297974,
            0.9945883750915527,
            0.9932355284690857,
            0.9966037273406982,
            0.9931561350822449,
            0.9948426485061646,
            0.9967872500419617,
            0.9968082904815674,
            0.9961664080619812,
            0.9962654113769531,
            0.9940442442893982,
            0.9928034543991089
        ]
    },
    "4399": {
        "similarity": 0.9941287636756897,
        "body": "    s = input()\n    if (s[0] != s[1] or s[1] != s[2]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916012287139893,
            0.9941287636756897,
            0.9935021996498108,
            0.9922462105751038,
            0.9937310814857483,
            0.9901763796806335,
            0.9927470684051514,
            0.9922462105751038,
            0.9938235282897949,
            0.9922395348548889,
            0.9910985231399536,
            0.9916012287139893,
            0.9916012287139893,
            0.9906755089759827,
            0.9933992028236389,
            0.9927470684051514,
            0.9927470684051514,
            0.9935145378112793,
            0.9921613931655884,
            0.9900243878364563
        ]
    },
    "4999": {
        "similarity": 0.9974911212921143,
        "body": "    a, b = map(int, input().split())\n    count = 0\n    while a != b:\n        if a % 2 == 0 and a > b:\n            a //= 2\n        elif a < b:\n            a += 1\n        count += 1\n    print(count)\nmin_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971668124198914,
            0.9898077249526978,
            0.9967157244682312,
            0.9971612691879272,
            0.9965412020683289,
            0.9972773194313049,
            0.9974511861801147,
            0.9967416524887085,
            0.9973345398902893,
            0.9967689514160156,
            0.9969245791435242,
            0.996671199798584,
            0.9971668124198914,
            0.9974911212921143,
            0.9963998198509216,
            0.9971668124198914,
            0.9939576983451843,
            0.9968970417976379,
            0.9915661215782166,
            0.9968810081481934
        ]
    },
    "4727": {
        "similarity": 0.9952701926231384,
        "body": "grid = [[int(x) for x in input().split()] for _ in range(4)]\ndirection = {'left': 0, 'up': 1, 'right': 2, 'down': 3}\nmove = direction[input()]\n\n    new_row = [0] * len(row)\n    i = j = 0\n    while j < len(row):\n        if row[j] != 0:\n            if new_row[i] == 0:\n                new_row[i] = row[j]\n            elif new_row[i] == row[j]:\n                new_row[i] += row[j]\n                i += 1\n                j += 1\n            else:\n                i += 1\n        j += 1\n    return new_row\n\n    if direction == 'left':\n        grid = [move_left(row) for row in grid]\n    elif direction == 'right':\n        grid = [[row[i] for i in range(len(row)-1, -1, -1)] for row in grid]\n        grid = [move_left(row) for row in grid]\n        grid = [[row[i] for i in range(len(row))] for row in grid]\n    elif direction == 'up':\n        grid = list(zip(*grid[::-1]))\n        grid = [move_left(row) for row in grid]\n        grid = list(zip(*grid))\n    else: # down\n        grid = list(zip(*grid))\n        grid = [[row[i] for i in range(len(row))] for row in grid]\n        grid = [move_left(row) for row in grid]\n        grid = list(zip(*grid))\n\n    return grid\n\n    empty_cells = [(i, j) for i in range(4) for j in range(4) if grid[i][j] == 0]\n    if not empty_cells:\n        return False\n    cell = random.choice(empty_cells)\n    value = 2 if random.random() < 0.9 else 4\n    grid[cell[0]][cell[1]] = value\n    return True\n\n    for row in grid:\n        print(' '.join(str(x) for x in row))\n\ngrid = move(grid, direction)\nwhile add_random_tile(grid): pass\nprint_grid(grid)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945671558380127,
            0.9936294555664062,
            0.9945432543754578,
            0.9947603940963745,
            0.9951298236846924,
            0.9952701926231384,
            0.9947728514671326,
            0.9941012859344482,
            0.9925128817558289,
            0.9886876940727234,
            0.9891982078552246,
            0.9944348931312561,
            0.991581380367279,
            0.9947654604911804,
            0.9934372305870056,
            0.9946214556694031,
            0.993169903755188,
            0.990594744682312,
            0.9927797913551331,
            0.9948866963386536
        ]
    },
    "4906": {
        "similarity": 0.9958723187446594,
        "body": "    cmd, data = input().split(' ', 1)\n    if cmd == 'E':\n        return encode(data)\n    elif cmd == 'D':\n        return decode(data)\n\n    encoded = []\n    i = 0\n    while i < len(s):\n        count = 1\n        while i + 1 < len(s) and s[i] == s[i + 1]:\n            i += 1\n            count += 1\n        encoded.append(f'{s[i]}{count}')\n        i += 1\n    return ''.join(encoded)\n\n    decoded = ''\n    for i in range(0, len(s), 2):\n        char = s[i]\n        count = int(s[i + 1])\n        decoded += char * count\n    return decoded\n\nprint(process_input())",
        "result": "failed: testcase 0",
        "similarities": [
            0.990604817867279,
            0.9950693845748901,
            0.9908868670463562,
            0.9958723187446594,
            0.9947767853736877,
            0.9944177865982056,
            0.9864877462387085,
            0.9952436089515686,
            0.9948417544364929,
            0.994425356388092,
            0.9942647218704224,
            0.9953653216362,
            0.9948244690895081,
            0.9957461357116699,
            0.9947519898414612,
            0.9928157329559326,
            0.9948605895042419,
            0.9928542971611023,
            0.995209276676178,
            0.9947728514671326
        ]
    },
    "4011": {
        "similarity": 0.9955990314483643,
        "body": "    n = int(input())\n    a = list(map(int, input()))\n    f = list(map(int, input().split()))\n\n        return [f[x] for x in a[i:]]\n\n    max_a = a[:]\n    for i in range(1, n + 1):\n        cur_a = apply_f(i)\n        if cur_a > max_a:\n            max_a = cur_a\n        elif len(set(cur_a)) == 1 and cur_a[0] != max_a[-1]:\n            break\n\n    print(''.join(map(str, max_a)))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936698079109192,
            0.9947989583015442,
            0.9939537048339844,
            0.9945330619812012,
            0.9901677370071411,
            0.9942061901092529,
            0.9947302937507629,
            0.9955109357833862,
            0.9949762225151062,
            0.9944051504135132,
            0.994704008102417,
            0.9943568706512451,
            0.9932397603988647,
            0.9910046458244324,
            0.9955523610115051,
            0.9917199015617371,
            0.9950448274612427,
            0.9908077716827393,
            0.9955990314483643,
            0.9953852295875549
        ]
    },
    "4099": {
        "similarity": 0.9972633719444275,
        "body": "    N, K, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    total = sum(A)\n    if (total + K) / N < M:\n        return -1\n    return max(0, M * N - total)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968923330307007,
            0.9971433877944946,
            0.9961495995521545,
            0.9965144991874695,
            0.9961355924606323,
            0.994441568851471,
            0.9963943362236023,
            0.9969460368156433,
            0.9961616396903992,
            0.9966599345207214,
            0.9963545799255371,
            0.9972633719444275,
            0.9958371520042419,
            0.9964396953582764,
            0.9963469505310059,
            0.9966490864753723,
            0.9952625632286072,
            0.9967185854911804,
            0.9955771565437317,
            0.9954956769943237
        ]
    },
    "4465": {
        "similarity": 0.9973110556602478,
        "body": "    a, b = map(int, input().split())\n    return (a - 2) * (b - 2)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969484210014343,
            0.9970895051956177,
            0.9962928295135498,
            0.9972171783447266,
            0.9967303276062012,
            0.9973110556602478,
            0.9964438080787659,
            0.9968031644821167,
            0.9956048727035522,
            0.9962928295135498,
            0.9970585703849792,
            0.9970585703849792,
            0.9970604777336121,
            0.9967303276062012,
            0.9971188902854919,
            0.9964141845703125,
            0.9968824982643127,
            0.9956048727035522,
            0.9971883893013,
            0.9956048727035522
        ]
    },
    "4315": {
        "similarity": 0.9974199533462524,
        "body": "R = int(input())\nprint(2 * 3.14 * R)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918898344039917,
            0.9972014427185059,
            0.9965769052505493,
            0.9972014427185059,
            0.9972014427185059,
            0.9968933463096619,
            0.9972014427185059,
            0.9972014427185059,
            0.9969006776809692,
            0.9971544146537781,
            0.9974199533462524,
            0.9957309365272522,
            0.9974199533462524,
            0.9968933463096619,
            0.9940645098686218,
            0.9956552386283875,
            0.9942616820335388,
            0.9969913959503174,
            0.9933363199234009,
            0.9946690797805786
        ]
    },
    "4633": {
        "similarity": 0.9974091053009033,
        "body": "    n, s = map(int, input().split())\n    moves = 0\n    while sum(map(int, str(n))) > s:\n        n += 1\n        moves += 1\n    print(moves)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969537854194641,
            0.9972343444824219,
            0.9971693158149719,
            0.9971998333930969,
            0.9937278628349304,
            0.9934319257736206,
            0.9973778128623962,
            0.9972769021987915,
            0.9953615069389343,
            0.9960039854049683,
            0.9974091053009033,
            0.9949241280555725,
            0.99325031042099,
            0.9970496296882629,
            0.9971998333930969,
            0.989513099193573,
            0.9961280822753906,
            0.9960084557533264,
            0.9960668683052063,
            0.9949182271957397
        ]
    },
    "4734": {
        "similarity": 0.9967247843742371,
        "body": "Y, P = input().split()\nif Y.endswith('e'):\n    print(Y + 'x' + P)\nelif Y.endswith(('a', 'i', 'o', 'u')):\n    print(Y[:-1] + 'ex' + P)\nelif Y.endswith('ex'):\n    print(Y + P)\nelse:\n    print(Y + 'ex' + P)",
        "result": "passed",
        "similarities": [
            0.9940635561943054,
            0.9947914481163025,
            0.9967049956321716,
            0.9944108724594116,
            0.9960653185844421,
            0.9960365295410156,
            0.993005633354187,
            0.9964469075202942,
            0.9948760867118835,
            0.9947239756584167,
            0.994761049747467,
            0.9952936768531799,
            0.9962118268013,
            0.9967247843742371,
            0.9956380128860474,
            0.9962708353996277,
            0.9962539672851562,
            0.995389461517334,
            0.991739809513092,
            0.9948571920394897
        ]
    },
    "4229": {
        "similarity": 0.9913519620895386,
        "body": "    n = int(input())\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        elif i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        else:\n            total += i\n    print(total)\n\nfizzbuzz_sum()",
        "result": "failed: testcase 0",
        "similarities": [
            0.987787127494812,
            0.987658679485321,
            0.9871544241905212,
            0.9899695515632629,
            0.9913519620895386,
            0.9851614236831665,
            0.9881619811058044,
            0.9896163940429688,
            0.9855290651321411,
            0.9897145628929138,
            0.9832476377487183,
            0.9893983602523804,
            0.9829858541488647,
            0.9890019297599792,
            0.9854806661605835,
            0.983650803565979,
            0.9892451763153076,
            0.9911370873451233,
            0.9873818159103394,
            0.9879903197288513
        ]
    },
    "4321": {
        "similarity": 0.9978439807891846,
        "body": "    n, k = map(int, input().split())\n    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    print(n)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975707530975342,
            0.9956606030464172,
            0.9963734149932861,
            0.9949775338172913,
            0.9963734149932861,
            0.9977889060974121,
            0.9966756105422974,
            0.9969909191131592,
            0.9963734149932861,
            0.9978439807891846,
            0.9947591423988342,
            0.9978439807891846,
            0.9977889060974121,
            0.9937431812286377,
            0.9957042336463928,
            0.9963734149932861,
            0.9978439807891846,
            0.9978439807891846,
            0.9943845868110657,
            0.9970604777336121
        ]
    },
    "4503": {
        "similarity": 0.9945351481437683,
        "body": "H, N = map(int, input().split())\nA = list(map(int, input().split()))\nused = [False] * N\nwhile H > 0 and sum(used):\n    for i in range(N):\n        if not used[i] and A[i] <= H:\n            H -= A[i]\n            used[i] = True\nprint('Yes' if H <= 0 else 'No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909892678260803,
            0.990878164768219,
            0.9913080930709839,
            0.9906714558601379,
            0.9926100373268127,
            0.9924681782722473,
            0.9880917072296143,
            0.9870918989181519,
            0.9915968179702759,
            0.9920017123222351,
            0.9941522479057312,
            0.9945351481437683,
            0.991845965385437,
            0.9929524660110474,
            0.9938633441925049,
            0.9938966631889343,
            0.9909757375717163,
            0.9935579895973206,
            0.9913538098335266,
            0.9933753609657288
        ]
    },
    "4855": {
        "similarity": 0.9944739937782288,
        "body": "    a, i = map(int, input().split())\n    return (i * a + i - 1) // i",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931080341339111,
            0.9936372637748718,
            0.9939731955528259,
            0.9932136535644531,
            0.9932275414466858,
            0.9939242005348206,
            0.99100261926651,
            0.9926448464393616,
            0.9944739937782288,
            0.9941524863243103,
            0.9931080341339111,
            0.9932325482368469,
            0.9910660982131958,
            0.9917705059051514,
            0.9932275414466858,
            0.9932275414466858,
            0.9939242005348206,
            0.9937461018562317,
            0.9931556582450867,
            0.9932275414466858
        ]
    },
    "4704": {
        "similarity": 0.9945999979972839,
        "body": "N = int(input())\ncards = list(map(int, input().split()))\ntotal_sum = sum(cards)\nmin_diff = float('inf')\nfor i in range(1, N):\n    x, y = sum(cards[:i]), total_sum - sum(cards[:i])\n    min_diff = min(min_diff, abs(x-y))\nprint(min_diff)",
        "result": "passed",
        "similarities": [
            0.9943900108337402,
            0.992213785648346,
            0.9925941824913025,
            0.9913793206214905,
            0.9945999979972839,
            0.9930891990661621,
            0.9906122088432312,
            0.991471529006958,
            0.9943687319755554,
            0.9917864799499512,
            0.9901474714279175,
            0.9893625378608704,
            0.9924559593200684,
            0.9938157796859741,
            0.9902000427246094,
            0.9934248924255371,
            0.9937074780464172,
            0.99395751953125,
            0.9931137561798096,
            0.9891247153282166
        ]
    },
    "4829": {
        "similarity": 0.9958025217056274,
        "body": "l, r = map(int, input().split())\nif l == r:\n    print(f'Even {l*2}')\nelif l + r > 0:\n    print(f'Odd {(max(l,r))*2}')\nelse:\n    print('Not a moose')",
        "result": "failed: testcase 2",
        "similarities": [
            0.995247483253479,
            0.9956757426261902,
            0.9847347736358643,
            0.9953247904777527,
            0.9955406188964844,
            0.9954063296318054,
            0.9952995181083679,
            0.9916295409202576,
            0.9953316450119019,
            0.9929576516151428,
            0.993732750415802,
            0.9955084919929504,
            0.9932650327682495,
            0.9955998659133911,
            0.9954575300216675,
            0.9949328899383545,
            0.9954107999801636,
            0.9958025217056274,
            0.995333731174469,
            0.9906116127967834
        ]
    },
    "4730": {
        "similarity": 0.9958873391151428,
        "body": "L = input().strip()\nstack = []\nfor i, c in enumerate(L):\n    if c in '([{':\n        stack.append((c, i))\n    elif c in ')]}':\n        opening, index = stack.pop() if stack else ('', -1)\n        if c not in {')' if opening == '(' else ']' if opening == '[' else '}'}:\n            print(c, i)\n            break\nelse:\n    if stack:\n        print(f\"{stack[-1][0]} {len(L) - 1}\")\n    else:\n        print(\"ok so far\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946405291557312,
            0.9862990975379944,
            0.9902000427246094,
            0.9927208423614502,
            0.993614912033081,
            0.9953389763832092,
            0.9868260622024536,
            0.9943227171897888,
            0.992400050163269,
            0.9958873391151428,
            0.994165301322937,
            0.9946557283401489,
            0.9949396848678589,
            0.9950417876243591,
            0.9955576658248901,
            0.9957432150840759,
            0.9952095746994019,
            0.9927492737770081,
            0.9958239197731018,
            0.994054913520813
        ]
    },
    "4729": {
        "similarity": 0.9959509968757629,
        "body": "    password, message = input().split()\n    for i in range(len(password)):\n        if password[i] not in message[:message.index(password[i])]:\n            return \"FAIL\"\n        message = message[message.index(password[i]) + 1:]\n    print(\"PASS\" if len(message) == 0 else \"FAIL\")\nvalidate_message()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941703677177429,
            0.9938259124755859,
            0.9957279562950134,
            0.9923290610313416,
            0.99371337890625,
            0.9930504560470581,
            0.995086669921875,
            0.9901459217071533,
            0.9938804507255554,
            0.9950743317604065,
            0.9937376976013184,
            0.9886946678161621,
            0.9906401634216309,
            0.9959509968757629,
            0.9930208921432495,
            0.9954930543899536,
            0.9916799664497375,
            0.9956536889076233,
            0.9928450584411621,
            0.9949461221694946
        ]
    },
    "4582": {
        "similarity": 0.9952688813209534,
        "body": "    a, b = input().split()\n    if a == 'H':\n        print(b)\n    else:\n        print('D' if b == 'H' else 'H')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947556257247925,
            0.9947313070297241,
            0.988861083984375,
            0.9935981631278992,
            0.9924833178520203,
            0.9940935373306274,
            0.9909987449645996,
            0.9947352409362793,
            0.9947352409362793,
            0.9952688813209534,
            0.9930940270423889,
            0.9881277680397034,
            0.9911673665046692,
            0.9940935373306274,
            0.9947352409362793,
            0.9923519492149353,
            0.9847179055213928,
            0.9941127300262451,
            0.9941046833992004,
            0.9924833178520203
        ]
    },
    "4910": {
        "similarity": 0.9963607788085938,
        "body": "from collections import Counter\nN = int(input())\ncostumes = [input() for _ in range(N)]\ncounter = Counter(costumes)\nmax_count = max(counter.values())\nfor category, count in counter.items():\n    if count == max_count:\n        print(category)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939548969268799,
            0.9955931305885315,
            0.9962997436523438,
            0.9945926666259766,
            0.9932977557182312,
            0.990716814994812,
            0.9963607788085938,
            0.9962997436523438,
            0.9934784770011902,
            0.9949773550033569,
            0.9956777691841125,
            0.9939703941345215,
            0.994140625,
            0.9931232929229736,
            0.9926210641860962,
            0.9952973127365112,
            0.9958897829055786,
            0.9946867227554321,
            0.9956735372543335,
            0.9957650899887085
        ]
    },
    "4323": {
        "similarity": 0.9975146055221558,
        "body": "    n, m = map(int, input().split())\n    songs = [list(map(int, input().split())) for _ in range(n)]\n    songs.sort(key=lambda x: x[1] - x[0])\n    current_size = 0\n    compressed_count = 0\n    for a, b in songs:\n        if current_size + (a - b) <= m:\n            current_size += (a - b)\n        else:\n            compressed_count += 1\n    return -1 if current_size > m else compressed_count\n\nif __name__ == \"__main__\":\n    print(compress_songs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967723488807678,
            0.9965499043464661,
            0.9955727458000183,
            0.9968465566635132,
            0.9963509440422058,
            0.9975146055221558,
            0.9966879487037659,
            0.9970521330833435,
            0.9974742531776428,
            0.9968876242637634,
            0.9966899752616882,
            0.9968801140785217,
            0.9962404370307922,
            0.9964856505393982,
            0.9972833395004272,
            0.9971253275871277,
            0.9968404173851013,
            0.99492347240448,
            0.9946614503860474,
            0.9966681599617004
        ]
    },
    "4626": {
        "similarity": 0.9957602620124817,
        "body": "    for _ in range(int(input())):\n        a, b, c = map(int, input().split())\n        res = abs(a - b) + abs(a - c) + abs(b - c)\n        print(min(res))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9846504926681519,
            0.9954158663749695,
            0.9955838918685913,
            0.9956074953079224,
            0.9957602620124817,
            0.9955838918685913,
            0.9944427013397217,
            0.9945899844169617,
            0.9912225604057312,
            0.992362380027771,
            0.9954537749290466,
            0.9922007322311401,
            0.9950260519981384,
            0.9956074953079224,
            0.9896647930145264,
            0.9950312376022339,
            0.9956074953079224,
            0.9944925904273987,
            0.9910555481910706,
            0.9881047010421753
        ]
    },
    "4400": {
        "similarity": 0.990985095500946,
        "body": "    S = input()\n    count = 0\n    max_count = 0\n    for i in range(3):\n        if S[i] == 'R':\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    print(max_count)\n\nmax_consecutive_rainy_days()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9813640117645264,
            0.9871073365211487,
            0.9897913932800293,
            0.9848710894584656,
            0.9876648783683777,
            0.984444260597229,
            0.9885026216506958,
            0.9871849417686462,
            0.9853094816207886,
            0.9871469736099243,
            0.9859192371368408,
            0.9860088229179382,
            0.9908174276351929,
            0.9888080954551697,
            0.9797934293746948,
            0.9781815409660339,
            0.9892500638961792,
            0.990985095500946,
            0.9776781797409058,
            0.9760822653770447
        ]
    },
    "4794": {
        "similarity": 0.9958645701408386,
        "body": "    R, C = map(int, input().split())\n    grid = [input() for _ in range(R)]\n\n        if x < 0 or y < 0 or x >= R - 1 or y >= C - 1:\n            return False\n        if grid[x][y] == '#':\n            return False\n        return all(grid[i][j] != 'X' for i in range(x, x + 2) for j in range(y, y + 2))\n\n    counts = [0] * 5\n    for i in range(R - 1):\n        for j in range(C - 1):\n            if check(i, j):\n                counts[0] += 1\n                if grid[i+1][j] == 'X':\n                    counts[1] += 1\n                if grid[i][j+1] == 'X':\n                    counts[1] += 1\n                if grid[i+1][j+1] == 'X':\n                    counts[2] += 1\n\n    print(counts[0], counts[1], counts[2], counts[3], counts[4])\n\ncount_parking_spaces()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958645701408386,
            0.9945492148399353,
            0.9956117868423462,
            0.9934014081954956,
            0.9918727874755859,
            0.9945257902145386,
            0.9939002990722656,
            0.9953240156173706,
            0.9938520193099976,
            0.9920674562454224,
            0.9946241974830627,
            0.9930810332298279,
            0.995012104511261,
            0.9933748841285706,
            0.99286288022995,
            0.9947772026062012,
            0.9943372011184692,
            0.9924350380897522,
            0.9956484436988831,
            0.99506014585495
        ]
    },
    "4096": {
        "similarity": 0.9964256286621094,
        "body": "    days = 0\n    pages = 0\n    for i in range(n):\n        pages += max(0, a[i] - days)\n        if pages >= m:\n            return days + 1\n        days += 1\n    return -1 if pages < m else days\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nprint(min_days(n, m, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947752952575684,
            0.9937812685966492,
            0.9959936738014221,
            0.9940314292907715,
            0.9960459470748901,
            0.9948463439941406,
            0.9962233304977417,
            0.9955114126205444,
            0.9960959553718567,
            0.9960606098175049,
            0.9950135946273804,
            0.9952443838119507,
            0.9957798719406128,
            0.9963912963867188,
            0.9964256286621094,
            0.9949854612350464,
            0.9934268593788147,
            0.9957683086395264,
            0.9940908551216125,
            0.994357168674469
        ]
    },
    "4530": {
        "similarity": 0.9964426755905151,
        "body": "    n = int(input())\n    skills = list(map(int, input().split()))\n    count = {}\n    for skill in skills:\n        count[skill] = count.get(skill, 0) + 1\n    unique_skills = len(count)\n    same_skill_count = max(count.values() or [0])\n    return min(n // 2, same_skill_count if unique_skills >= 2 else 0)\n\nfor _ in range(int(input())):\n    print(max_team_size())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933225512504578,
            0.993039608001709,
            0.9961835741996765,
            0.9952329397201538,
            0.9919658303260803,
            0.9937242269515991,
            0.9945753216743469,
            0.9957472085952759,
            0.9956586956977844,
            0.9952925443649292,
            0.9962360262870789,
            0.9958996176719666,
            0.9950474500656128,
            0.9923219084739685,
            0.9919402599334717,
            0.9959233999252319,
            0.9964426755905151,
            0.995754063129425,
            0.9961198568344116,
            0.9902704954147339
        ]
    },
    "4724": {
        "similarity": 0.9971895813941956,
        "body": "R = int(input())\nG = int(input())\n\nprint(2 * G - R)",
        "result": "passed",
        "similarities": [
            0.9971895813941956,
            0.99575275182724,
            0.9969516396522522,
            0.9969516396522522,
            0.9896257519721985,
            0.9950718283653259,
            0.9963730573654175,
            0.9969516396522522,
            0.9969516396522522,
            0.996160626411438,
            0.9931508898735046,
            0.9970846772193909,
            0.9969516396522522,
            0.9913673400878906,
            0.9969516396522522,
            0.9960987567901611,
            0.9970846772193909,
            0.9913673400878906,
            0.9971098899841309,
            0.9969516396522522
        ]
    },
    "4276": {
        "similarity": 0.9967197775840759,
        "body": "N,T = map(int,input().split())\nroutes = [list(map(int,input().split())) for _ in range(N)]\nvalid_routes = [(c,t) for c,t in routes if t <= T]\nif valid_routes:\n    print(min(c for c,_ in valid_routes))\nelse:\n    print('TLE')",
        "result": "passed",
        "similarities": [
            0.9958839416503906,
            0.9949631094932556,
            0.9955862164497375,
            0.9958401918411255,
            0.9939704537391663,
            0.9956880211830139,
            0.9946907758712769,
            0.9958404898643494,
            0.9954867959022522,
            0.9958040118217468,
            0.9959298968315125,
            0.9953790903091431,
            0.9932180643081665,
            0.9958787560462952,
            0.9959298968315125,
            0.9938290119171143,
            0.9964398741722107,
            0.994114100933075,
            0.9961066842079163,
            0.9967197775840759
        ]
    },
    "4708": {
        "similarity": 0.9962447285652161,
        "body": "    N = int(input())\n    K = int(input())\n    X = int(input())\n    Y = int(input())\n\n    return min(N * X, K * X + (N - K) * Y)\n\nprint(calculate_total_fee())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942807555198669,
            0.9947905540466309,
            0.9946168661117554,
            0.9941249489784241,
            0.9960956573486328,
            0.9953362345695496,
            0.9823248982429504,
            0.9953770041465759,
            0.9938350319862366,
            0.9924001097679138,
            0.9957738518714905,
            0.9940118193626404,
            0.9938593506813049,
            0.9943011403083801,
            0.9944095611572266,
            0.9962447285652161,
            0.9943011403083801,
            0.995745837688446,
            0.9939529299736023,
            0.9941249489784241
        ]
    },
    "4396": {
        "similarity": 0.9981266856193542,
        "body": "N = int(input())\ntotal = 0\nfor _ in range(N):\n    x, u = input().split()\n    if u == 'JPY':\n        total += int(x)\n    elif u == 'BTC':\n        total += float(x) * 380000.0\nprint(total)",
        "result": "passed",
        "similarities": [
            0.9981266856193542,
            0.9977449178695679,
            0.9974719882011414,
            0.9976896047592163,
            0.9979037046432495,
            0.9969163537025452,
            0.9974014163017273,
            0.997674822807312,
            0.9981266856193542,
            0.9969831109046936,
            0.9980876445770264,
            0.9971714019775391,
            0.9980876445770264,
            0.9945999979972839,
            0.9959313273429871,
            0.9973257184028625,
            0.9934509992599487,
            0.9969891905784607,
            0.9977449178695679,
            0.9981266856193542
        ]
    },
    "4155": {
        "similarity": 0.9951404929161072,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    max_heights = [0] * n\n    for i in range(n):\n        max_heights[i] = max(max_heights[:i+1]) + 1\n    operations = sum(h > mh for h, mh in zip(heights, max_heights))\n    print(operations)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949598908424377,
            0.9922314882278442,
            0.9946764707565308,
            0.9941591024398804,
            0.989671528339386,
            0.9939278960227966,
            0.9941954612731934,
            0.9865058064460754,
            0.9949597716331482,
            0.993360698223114,
            0.9887605309486389,
            0.9951404929161072,
            0.9935066103935242,
            0.9933088421821594,
            0.9938115477561951,
            0.9950858950614929,
            0.9950540661811829,
            0.9865871071815491,
            0.9944915771484375,
            0.9896408915519714
        ]
    },
    "4557": {
        "similarity": 0.9968420267105103,
        "body": "A,B,X = map(int, input().split())\nif A >= X: print(\"YES\")\nelse: print(\"NO\" if B >= X-A else \"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968420267105103,
            0.9963870644569397,
            0.9935304522514343,
            0.9943956136703491,
            0.9963206052780151,
            0.9964160919189453,
            0.9954667687416077,
            0.9961847066879272,
            0.9955956339836121,
            0.9947425723075867,
            0.9935542941093445,
            0.9951171875,
            0.9963873028755188,
            0.9961760640144348,
            0.9962746500968933,
            0.9962209463119507,
            0.9968231916427612,
            0.9934859275817871,
            0.996737539768219,
            0.9951834678649902
        ]
    },
    "4930": {
        "similarity": 0.9899274110794067,
        "body": "  coded = input().split()\n  decoded = [''.join([c for c in word if c not in 'aeiou']) + 'p' + ''.join([c for c in word if c in 'aeiou']) for word in coded]\n  print(' '.join(decoded))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9899274110794067,
            0.973759114742279,
            0.9872273206710815,
            0.9836633801460266,
            0.978440523147583,
            0.977649986743927,
            0.9881760478019714,
            0.984931230545044,
            0.9817679524421692,
            0.9839405417442322,
            0.9825649261474609,
            0.9838468432426453,
            0.9871768951416016,
            0.988974928855896,
            0.9803804159164429,
            0.9844048023223877,
            0.980890691280365,
            0.9873847961425781,
            0.9867716431617737,
            0.9818200469017029
        ]
    },
    "4715": {
        "similarity": 0.9962291717529297,
        "body": "a, b, c = map(int, input().split())\nprint(len(set([a, b, c])))",
        "result": "passed",
        "similarities": [
            0.9934910535812378,
            0.994053065776825,
            0.9920982718467712,
            0.9934910535812378,
            0.9934910535812378,
            0.9961943626403809,
            0.995583176612854,
            0.9944221377372742,
            0.995583176612854,
            0.9956186413764954,
            0.9942293763160706,
            0.9962290525436401,
            0.9962291717529297,
            0.9954210519790649,
            0.9954145550727844,
            0.9961166381835938,
            0.9934910535812378,
            0.9934910535812378,
            0.9940433502197266,
            0.9956060647964478
        ]
    },
    "4008": {
        "similarity": 0.9973295331001282,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    colors = []\n    for i in range(n):\n        c = 0\n        while True:\n            if len(colors) < k or (colors[c] == 1 and all(a[i] != colors[j][-1] for j in range(k))):\n                break\n            else:\n                c += 1\n                if c >= k:\n                    print(\"NO\")\n                    return\n        colors.append([a[i]])\n    print(\"YES\")\n    print(*[c[-1] for c in colors])\n\nif __name__ == \"__main__\":\n    color_array()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962267875671387,
            0.9968964457511902,
            0.9966038465499878,
            0.9963650107383728,
            0.9968927502632141,
            0.9969897866249084,
            0.9963973164558411,
            0.9964382648468018,
            0.9957712292671204,
            0.9953362345695496,
            0.9973295331001282,
            0.9963110089302063,
            0.9959965944290161,
            0.9965029358863831,
            0.9947198629379272,
            0.9956924319267273,
            0.9973073601722717,
            0.9964177012443542,
            0.9968427419662476,
            0.9963889122009277
        ]
    },
    "4257": {
        "similarity": 0.996728777885437,
        "body": "    A, B = map(int, input().split())\n    print(A * B)\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925230741500854,
            0.996728777885437,
            0.9966232180595398,
            0.9956676959991455,
            0.9966232180595398,
            0.9957240223884583,
            0.9966232180595398,
            0.996728777885437,
            0.9966232180595398,
            0.9937113523483276,
            0.9957240223884583,
            0.9966232180595398,
            0.9964532256126404,
            0.9946322441101074,
            0.9957240223884583,
            0.9966232180595398,
            0.9952317476272583,
            0.9934647083282471,
            0.9966232180595398,
            0.9966232180595398
        ]
    },
    "4584": {
        "similarity": 0.9984720945358276,
        "body": "N = int(input())\nA = list(map(int, input().split()))\ncount = [0] * (N+1)\nfor i in range(2, N+1):\n    count[A[i]] += 1\nprint(*count[1:], sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9983066916465759,
            0.9966688752174377,
            0.9981617331504822,
            0.9983339905738831,
            0.9984301328659058,
            0.9968627095222473,
            0.9982115030288696,
            0.9981287717819214,
            0.9981756806373596,
            0.9980450868606567,
            0.9981213808059692,
            0.9961381554603577,
            0.9983199238777161,
            0.9983125329017639,
            0.9980601072311401,
            0.9983492493629456,
            0.9958456754684448,
            0.9980714917182922,
            0.9984004497528076,
            0.9984720945358276
        ]
    },
    "4195": {
        "similarity": 0.9957172274589539,
        "body": "    d, n = map(int, input().split())\n    return 10 ** d * n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942993521690369,
            0.9919140338897705,
            0.9957172274589539,
            0.9817693829536438,
            0.9950843453407288,
            0.9943376183509827,
            0.9937424063682556,
            0.9945550560951233,
            0.9945867657661438,
            0.9945867657661438,
            0.9913952350616455,
            0.9928017854690552,
            0.9933300018310547,
            0.9936248660087585,
            0.9914121031761169,
            0.9946570992469788,
            0.9949057698249817,
            0.9937912821769714,
            0.9945829510688782,
            0.9937723875045776
        ]
    },
    "4176": {
        "similarity": 0.9963330626487732,
        "body": "  a,b = map(int,input().split())\n  return max(a*b,a*(b//2)+(b%2),b*(a//2)+(a%2))*2\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962362051010132,
            0.9939125776290894,
            0.9954107999801636,
            0.995732843875885,
            0.9959006309509277,
            0.9930383563041687,
            0.9957180023193359,
            0.9957180023193359,
            0.9958003163337708,
            0.995916485786438,
            0.9894846677780151,
            0.9955546855926514,
            0.9931082725524902,
            0.9952417016029358,
            0.9963330626487732,
            0.9955546855926514,
            0.9955335259437561,
            0.9953482747077942,
            0.9956055879592896,
            0.9877772331237793
        ]
    },
    "4166": {
        "similarity": 0.9966647624969482,
        "body": "    N, M = map(int, input().split())\n    reqs = [list(map(int, input().split())) for _ in range(M)]\n    for i in range(10**N):\n        if all(i // 10**(s-1) % 10 == c for s, c in reqs):\n            print(i)\n            return\n    print(-1)\n\nif __name__ == '__main__':\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944781064987183,
            0.9958010315895081,
            0.9965838193893433,
            0.9961945414543152,
            0.9950372576713562,
            0.9890092611312866,
            0.9931755065917969,
            0.9957210421562195,
            0.993655264377594,
            0.9962297081947327,
            0.9961451292037964,
            0.9946419596672058,
            0.9946506023406982,
            0.9939793944358826,
            0.9964396953582764,
            0.9954028725624084,
            0.9960673451423645,
            0.995705783367157,
            0.9966647624969482,
            0.9906303286552429
        ]
    },
    "4827": {
        "similarity": 0.9957429766654968,
        "body": "units = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']\nteens = ['eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\ntens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\nhundreds = ['onehundred', 'twohundred', 'threehundred', 'fourhundred', 'fivehundred', 'sixhundred', 'sevenhundred', 'eighthundred', 'ninehundred']\n\n    if n < 10:\n        return units[n-1]\n    elif n < 20:\n        return teens[n-11]\n    elif n < 100:\n        tens_digit = n // 10\n        ones_digit = n % 10\n        return tens[tens_digit - 2] + (['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'][ones_digit] if ones_digit > 0 else '')\n    elif n < 1000:\n        hundreds_digit = n // 100\n        remaining_digit = n % 100\n        return hundreds[hundreds_digit - 1] + (num2word(remaining_digit) if remaining_digit > 0 else '')\n\n    N = int(input())\n    words = []\n    for _ in range(N):\n        word = input()\n        if '$' in word:\n            idx = words.index(num2word(len(' '.join(words))))\n            words.insert(idx, '')\n        words.append(word)\n    print(' '.join(words))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939315319061279,
            0.9938918948173523,
            0.9935892224311829,
            0.9949026703834534,
            0.9942722320556641,
            0.9951485991477966,
            0.9922717213630676,
            0.9931536316871643,
            0.9929331541061401,
            0.9957429766654968,
            0.9948292970657349,
            0.9948090314865112,
            0.9955598711967468,
            0.994392991065979,
            0.9930739402770996,
            0.9845843315124512,
            0.9942802786827087,
            0.9943232536315918,
            0.9942306876182556,
            0.9928723573684692
        ]
    },
    "4871": {
        "similarity": 0.996707022190094,
        "body": "n = int(input())\nscores = sorted([int(input()) for _ in range(n)], reverse=True)\ngroup_score = sum(s * ((4/5)**i) for i, s in enumerate(scores)) / 5\nnew_scores = [sum(scores[:i] + scores[i+1:]) / (n-1) for i in range(n)]\navg_new_score = sum(new_scores) / n\nprint(group_score)\nprint(avg_new_score)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963459372520447,
            0.9955087304115295,
            0.996707022190094,
            0.9965051412582397,
            0.9960070252418518,
            0.9881698489189148,
            0.9961615204811096,
            0.9941918253898621,
            0.9949420094490051,
            0.9950388669967651,
            0.9951294660568237,
            0.9946356415748596,
            0.9960331320762634,
            0.9961267709732056,
            0.9963396191596985,
            0.9955739378929138,
            0.9933161735534668,
            0.9942123293876648,
            0.9930450320243835,
            0.9928173422813416
        ]
    },
    "4148": {
        "similarity": 0.9956817626953125,
        "body": "    N = int(input())\n    S = input()\n    return ''.join(chr((ord(c) - ord('A') + N) % 26 + ord('A')) for c in S)\n\nprint(shift_string())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950248599052429,
            0.9951845407485962,
            0.9945412874221802,
            0.9941454529762268,
            0.9952124357223511,
            0.9908862113952637,
            0.9921833872795105,
            0.9904943704605103,
            0.9939795136451721,
            0.9956817626953125,
            0.9954336285591125,
            0.9947435259819031,
            0.9930241107940674,
            0.9952124357223511,
            0.9908862113952637,
            0.9955061078071594,
            0.9909576773643494,
            0.9901443123817444,
            0.9934154152870178,
            0.9934815168380737
        ]
    },
    "4316": {
        "similarity": 0.9956545829772949,
        "body": "    s = input().strip()\n    if len(set(s)) == 2:\n        print('Yes')\n    else:\n        print('No')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921562075614929,
            0.9947519898414612,
            0.9919736981391907,
            0.9949320554733276,
            0.991817057132721,
            0.9941924214363098,
            0.9950793385505676,
            0.9924057722091675,
            0.9926477074623108,
            0.9892891645431519,
            0.9955761432647705,
            0.9814302325248718,
            0.9925824403762817,
            0.9945424795150757,
            0.9945270419120789,
            0.9939243793487549,
            0.9956545829772949,
            0.9924057722091675,
            0.9956545829772949,
            0.9933379292488098
        ]
    },
    "4397": {
        "similarity": 0.9971339702606201,
        "body": "    N, i = map(int, input().split())\n    j = N - i + 1\n    print(j)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993098795413971,
            0.9971339702606201,
            0.9920346140861511,
            0.9951921105384827,
            0.9971339702606201,
            0.9951921105384827,
            0.9950571656227112,
            0.9971339702606201,
            0.9956543445587158,
            0.9971339702606201,
            0.9971339702606201,
            0.997026264667511,
            0.9971339702606201,
            0.9971339702606201,
            0.9971339702606201,
            0.9951921105384827,
            0.9951921105384827,
            0.9971339702606201,
            0.9971339702606201,
            0.9956756234169006
        ]
    },
    "4180": {
        "similarity": 0.9974945783615112,
        "body": "n = int(input())\nprint(n - (n // 1000) * 1000)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962552785873413,
            0.9967631101608276,
            0.9964844584465027,
            0.9950451254844666,
            0.9938207268714905,
            0.9965116381645203,
            0.9963575601577759,
            0.9974415302276611,
            0.9973849058151245,
            0.995786190032959,
            0.9974415302276611,
            0.9959656596183777,
            0.994565486907959,
            0.9966660737991333,
            0.9963575601577759,
            0.9969006776809692,
            0.9974945783615112,
            0.9971708059310913,
            0.9970102906227112,
            0.9955412149429321
        ]
    },
    "4907": {
        "similarity": 0.9976734519004822,
        "body": "n = int(input())\nprint(\"Alice\" if n % 2 == 0 else \"Bob\")\nif n % 2 == 0:\n    print(n // 2)",
        "result": "passed",
        "similarities": [
            0.9935935139656067,
            0.9972068667411804,
            0.9974036812782288,
            0.996163010597229,
            0.9974036812782288,
            0.9972933530807495,
            0.995775043964386,
            0.9974582195281982,
            0.9976734519004822,
            0.9976734519004822,
            0.9963908195495605,
            0.9974600076675415,
            0.9966313242912292,
            0.9963826537132263,
            0.9961515665054321,
            0.9959662556648254,
            0.9957722425460815,
            0.997597336769104,
            0.9970072507858276,
            0.9974036812782288
        ]
    },
    "4839": {
        "similarity": 0.9959884285926819,
        "body": "    n = int(input())\n    cans = list(map(int, input().split()))\n    cans.sort(reverse=True)\n    balloons = [i+1 for i in range(n)]\n    filled = 0\n    max_fraction = 0.0\n    for can in cans:\n        if can <= balloons[filled]:\n            max_fraction = max(max_fraction, can / balloons[filled])\n            filled += 1\n    if filled < n:\n        print(\"impossible\")\n    else:\n        print(f\"{max_fraction:.6f}\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918613433837891,
            0.9951591491699219,
            0.9917958974838257,
            0.9954283833503723,
            0.9906309843063354,
            0.994825541973114,
            0.995557963848114,
            0.9959884285926819,
            0.9947301149368286,
            0.9954060912132263,
            0.9948192238807678,
            0.9939318299293518,
            0.9956209063529968,
            0.994663417339325,
            0.9952650666236877,
            0.9937663674354553,
            0.994127094745636,
            0.9948617815971375,
            0.9872957468032837,
            0.991868257522583
        ]
    },
    "4665": {
        "similarity": 0.9979435801506042,
        "body": "import sys\nfrom collections import namedtuple\n\nN = int(input())\ncolumns = input().split()\nStudent = namedtuple('Student', columns)\n\nstudents = []\nfor _ in range(N):\n    student_data = dict(zip(columns, input().split()))\n    students.append(Student(**student_data))\n\ntotal_marks = sum(getattr(student, 'MARKS') for student in students)\naverage_marks = round(total_marks / N, 2)\nprint(average_marks)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954123497009277,
            0.9955287575721741,
            0.9975780844688416,
            0.9971033334732056,
            0.9969879984855652,
            0.9979057312011719,
            0.9966747164726257,
            0.9965972900390625,
            0.9957783222198486,
            0.9968546032905579,
            0.9969351887702942,
            0.9962413311004639,
            0.9972496032714844,
            0.9977779388427734,
            0.9979435801506042,
            0.9954136610031128,
            0.9974353313446045,
            0.9968612194061279,
            0.9957488179206848,
            0.9972440004348755
        ]
    },
    "4785": {
        "similarity": 0.9958885908126831,
        "body": "    s = input()\n    print('hiss' if 'ss' in s else 'no hiss')",
        "result": "passed",
        "similarities": [
            0.9945352673530579,
            0.9945352673530579,
            0.992743730545044,
            0.992743730545044,
            0.9945352673530579,
            0.9949214458465576,
            0.9776919484138489,
            0.9945352673530579,
            0.9936060905456543,
            0.992743730545044,
            0.9958885908126831,
            0.9954772591590881,
            0.9943130016326904,
            0.9945599436759949,
            0.9914168119430542,
            0.992743730545044,
            0.9945352673530579,
            0.9890764355659485,
            0.9952009916305542,
            0.9945352673530579
        ]
    },
    "4272": {
        "similarity": 0.996679425239563,
        "body": "    n = int(input())\n    s = input()\n    return print(s.count('ABC'))",
        "result": "passed",
        "similarities": [
            0.996679425239563,
            0.9962736368179321,
            0.9949158430099487,
            0.9954376220703125,
            0.9965015053749084,
            0.9962736368179321,
            0.996679425239563,
            0.9962736368179321,
            0.9922900199890137,
            0.9965015053749084,
            0.9966561198234558,
            0.9940894246101379,
            0.9957178235054016,
            0.9965380430221558,
            0.996631920337677,
            0.9957178235054016,
            0.9924982786178589,
            0.9957178831100464,
            0.9953121542930603,
            0.9953121542930603
        ]
    },
    "4092": {
        "similarity": 0.9952105283737183,
        "body": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\n    if a[i] == -a[i-1]:\n        ans += 1\n        a[i] = a[i-1]\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948084950447083,
            0.9943726062774658,
            0.9952105283737183,
            0.989983320236206,
            0.9940937757492065,
            0.9932877421379089,
            0.9846742749214172,
            0.9948360323905945,
            0.9943900108337402,
            0.9945440888404846,
            0.9917768239974976,
            0.9946958422660828,
            0.9945994019508362,
            0.9932019114494324,
            0.9950938820838928,
            0.993854820728302,
            0.9942154288291931,
            0.9924094676971436,
            0.9952075481414795,
            0.9946921467781067
        ]
    },
    "4023": {
        "similarity": 0.9960812926292419,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    min_height = min(a)\n    max_height = max(a)\n    if len(set(a)) == 1 or (min_height + 1 == max_height):\n        print('YES')\n    else:\n        print('NO')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940739870071411,
            0.9943505525588989,
            0.9874925017356873,
            0.9942936301231384,
            0.9954535961151123,
            0.9954804182052612,
            0.9924371838569641,
            0.9960812926292419,
            0.9945471882820129,
            0.9927018880844116,
            0.9953246712684631,
            0.9932634234428406,
            0.9935174584388733,
            0.9942380785942078,
            0.9951109886169434,
            0.9948903322219849,
            0.993780255317688,
            0.9937726259231567,
            0.9949367046356201,
            0.9952665567398071
        ]
    },
    "4160": {
        "similarity": 0.9978066682815552,
        "body": "    X = int(input())\n    balance = 100\n    year = 0\n    while balance < X:\n        balance += balance * 0.01\n        year += 1\n    print(year)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965783953666687,
            0.9972813129425049,
            0.9948877096176147,
            0.9949937462806702,
            0.9972813129425049,
            0.9978066682815552,
            0.9977996349334717,
            0.9951292276382446,
            0.9959028363227844,
            0.9978066682815552,
            0.9971470236778259,
            0.9951599836349487,
            0.9978066682815552,
            0.9952276349067688,
            0.9954319000244141,
            0.9967020750045776,
            0.996271014213562,
            0.9950326681137085,
            0.9978066682815552,
            0.9951547384262085
        ]
    },
    "4815": {
        "similarity": 0.998396635055542,
        "body": "n, p, m = map(int, input().split())\nplayers = {}\nfor i in range(n):\n    player_name = input()\n    players[player_name] = 0\n\nfor _ in range(m):\n    player_name, points = input().split()\n    players[player_name] += int(points)\n\nwinners = []\nfor player, score in players.items():\n    if score >= p:\n        winners.append(player)\n        print(f\"{player} wins!\")\n\nif not winners:\n    print(\"No winner!\")",
        "result": "passed",
        "similarities": [
            0.9972934722900391,
            0.9973443746566772,
            0.9977590441703796,
            0.9978511333465576,
            0.9979328513145447,
            0.9977024793624878,
            0.9972656965255737,
            0.9974254965782166,
            0.9979906678199768,
            0.9954131245613098,
            0.998396635055542,
            0.996651828289032,
            0.997939944267273,
            0.9980279803276062,
            0.997684895992279,
            0.9982673525810242,
            0.9971247315406799,
            0.9973559975624084,
            0.9977461099624634,
            0.9962425231933594
        ]
    },
    "4514": {
        "similarity": 0.9974149465560913,
        "body": "    graph = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        graph[p[i-2]].append(i)\n    ans = []\n        if len(graph[node]) == 0:\n            return -1\n        for child in sorted(graph[node]):\n            temp = dfs(child, k)\n            if temp != -1:\n                ans.append(temp)\n                k -= 1\n                if k == 0:\n                    return node\n    for u, k in queries:\n        ans = []\n        dfs(u, k)\n        print(ans[k-1] if k <= len(ans) else -1)\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\nsolve(n, q, p, queries)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974149465560913,
            0.9959648847579956,
            0.9962447285652161,
            0.9967027306556702,
            0.9971938729286194,
            0.9967102408409119,
            0.991840660572052,
            0.9953715801239014,
            0.995631754398346,
            0.9955390095710754,
            0.9958881735801697,
            0.9971894025802612,
            0.9973608255386353,
            0.9960513710975647,
            0.9963717460632324,
            0.9961841106414795,
            0.995688796043396,
            0.9960384368896484,
            0.9963682293891907,
            0.9950622916221619
        ]
    },
    "4585": {
        "similarity": 0.9901816844940186,
        "body": "X = int(input())\ntime = X\nwhile X > 0: X -= min(X, time)\nprint(time)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9880557656288147,
            0.9814236164093018,
            0.9788646697998047,
            0.9893118143081665,
            0.984706699848175,
            0.9869842529296875,
            0.980307936668396,
            0.9888107180595398,
            0.9901816844940186,
            0.9872568845748901,
            0.9811007976531982,
            0.9894020557403564,
            0.9830756187438965,
            0.9838706851005554,
            0.9890491962432861,
            0.9830756187438965,
            0.9865742921829224,
            0.989334225654602,
            0.9811007976531982,
            0.9862613677978516
        ]
    },
    "4781": {
        "similarity": 0.9973493218421936,
        "body": "    K = int(input())\n    N = int(input())\n    players = list(range(1, 9))\n    current = K - 1\n    for _ in range(N):\n        T, Z = input().split()\n        if Z != 'P':\n            players[current] -= int(T)\n            current = (current + 1) % 8\n    return players.index(min(players)) + 1\n\nprint(find_player())",
        "result": "failed: testcase 0",
        "similarities": [
            0.997029185295105,
            0.9973493218421936,
            0.9952239990234375,
            0.9971253275871277,
            0.9957332611083984,
            0.9966851472854614,
            0.9967491030693054,
            0.9967402219772339,
            0.9964479207992554,
            0.9941182732582092,
            0.9962965250015259,
            0.9954308867454529,
            0.9958406090736389,
            0.9948624968528748,
            0.9970750212669373,
            0.993536114692688,
            0.9966741800308228,
            0.9949775338172913,
            0.995649516582489,
            0.997220516204834
        ]
    },
    "4551": {
        "similarity": 0.9943134784698486,
        "body": "    A, B, C, D = map(int, input().split())\n    L = A + B\n    R = C + D\n    print('Left' if L > R else 'Balanced' if L == R else 'Right')",
        "result": "passed",
        "similarities": [
            0.9906131625175476,
            0.992893636226654,
            0.990281879901886,
            0.9930365681648254,
            0.9893460869789124,
            0.9902727007865906,
            0.9890637993812561,
            0.9890967011451721,
            0.9891359210014343,
            0.9904698133468628,
            0.9903806447982788,
            0.9875478148460388,
            0.9913109540939331,
            0.99339759349823,
            0.9943134784698486,
            0.9926203489303589,
            0.989302396774292,
            0.9898885488510132,
            0.9903806447982788,
            0.9904993772506714
        ]
    },
    "4345": {
        "similarity": 0.9975000023841858,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if not increasing or a[i] > increasing[-1]:\n            increasing.append(a[i])\n        elif not decreasing or a[i] < decreasing[-1]:\n            decreasing.append(a[i])\n        else:\n            print(\"NO\")\n            return\n    res = ['0' if x in increasing else '1' for x in a]\n    print('YES')\n    print(*res)\nsplit_sequence()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964272379875183,
            0.9968488812446594,
            0.9970130920410156,
            0.9968981742858887,
            0.9941083192825317,
            0.9959375262260437,
            0.9963067770004272,
            0.9971743226051331,
            0.9960694909095764,
            0.996850848197937,
            0.9957414269447327,
            0.9975000023841858,
            0.9968454241752625,
            0.9970425963401794,
            0.9955084919929504,
            0.9963776469230652,
            0.991113543510437,
            0.9967906475067139,
            0.9958234429359436,
            0.9968175292015076
        ]
    },
    "4075": {
        "similarity": 0.9974552989006042,
        "body": "    N, M = map(int, input().split())\n    connections = [list(map(int, input().split()))[1:] for _ in range(M)]\n    parities = list(map(int, input().split()))\n    switches = [0] * N\n        switches[s] ^= 1\n        return all(sum(switches[c-1::2]) % 2 == p for c, p in zip(connections, parities))\n    count = 0\n    for i in range(1 << N):\n        switches[:] = [int(j) for j in format(i, 'b').zfill(N)]\n        if check():\n            count += 1\n    print(count)\n\ncount_combinations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964800477027893,
            0.9970641136169434,
            0.9937321543693542,
            0.9956088066101074,
            0.9970324635505676,
            0.9967820048332214,
            0.9971303343772888,
            0.9929947257041931,
            0.9966960549354553,
            0.9972987174987793,
            0.9954599142074585,
            0.9970235228538513,
            0.9968703389167786,
            0.9963052868843079,
            0.9974552989006042,
            0.9954201579093933,
            0.9973706603050232,
            0.9971960186958313,
            0.996537446975708,
            0.9965819120407104
        ]
    },
    "4408": {
        "similarity": 0.9948521852493286,
        "body": "    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    favs = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n\n    # Count frequency of each number on card\n    freq = [0] * (10**6 + 1)\n    for card in cards:\n        freq[card] += 1\n\n    max_joy = 0\n    for player_fav in favs:\n        num_fav_cards = min(freq[player_fav], k)\n        joy = joy_levels[num_fav_cards]\n        freq[player_fav] -= num_fav_cards\n        max_joy += joy\n\n    print(max_joy)\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994616687297821,
            0.9945124387741089,
            0.9936674237251282,
            0.9925334453582764,
            0.9927831888198853,
            0.993518054485321,
            0.990842342376709,
            0.9917090535163879,
            0.9948521852493286,
            0.9879459738731384,
            0.9928490519523621,
            0.9940184354782104,
            0.9932783246040344,
            0.9866670370101929,
            0.9941630363464355,
            0.9907791018486023,
            0.9936495423316956,
            0.9943875670433044,
            0.9938589334487915,
            0.9941374063491821
        ]
    },
    "4282": {
        "similarity": 0.9953106641769409,
        "body": "from collections import deque\n\nn = int(input())\na = {i: set(map(int, input().split())) for i in range(1, n + 1)}\np = deque([i for i in range(1, n + 1)])\nwhile len(a) > 0:\n    x = p[-1]\n    y = (a[x] & a[p[0]]).pop()\n    del a[x], a[y]\n    if len(a[x]) == 0:\n        del a[x]\n    while len(a[p[0]]) == 0:\n        p.popleft()\n    print(*p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994193434715271,
            0.9883164167404175,
            0.9947324991226196,
            0.9905294179916382,
            0.9941868185997009,
            0.9940861463546753,
            0.9952107667922974,
            0.9936605095863342,
            0.9883164167404175,
            0.9953106641769409,
            0.9952722787857056,
            0.9938237071037292,
            0.9923431873321533,
            0.9950835704803467,
            0.9912723898887634,
            0.9950155019760132,
            0.9947307109832764,
            0.9885250926017761,
            0.9942763447761536,
            0.9946058392524719
        ]
    },
    "4331": {
        "similarity": 0.9971747398376465,
        "body": "    N = int(input())\n    if '7' in str(N):\n        print('Yes')\n    else:\n        print('No')",
        "result": "passed",
        "similarities": [
            0.993198812007904,
            0.9958434104919434,
            0.9956918358802795,
            0.9918478727340698,
            0.9971747398376465,
            0.9971747398376465,
            0.9958434104919434,
            0.9970813393592834,
            0.9971747398376465,
            0.9919226765632629,
            0.9970813393592834,
            0.9970813393592834,
            0.9971747398376465,
            0.9963144063949585,
            0.9962953329086304,
            0.9971747398376465,
            0.9970227479934692,
            0.9928908348083496,
            0.9942766427993774,
            0.9963144063949585
        ]
    },
    "4550": {
        "similarity": 0.9950937032699585,
        "body": "\ta, b, c = map(int, input().split())\n\treturn 'Yes' if a + b == c or a + c == b or b + c == a else 'No'\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.994867742061615,
            0.9918299317359924,
            0.98996502161026,
            0.9940761923789978,
            0.9904554486274719,
            0.9946372509002686,
            0.9931129813194275,
            0.9926919341087341,
            0.9943353533744812,
            0.9933425784111023,
            0.9917711019515991,
            0.9908947348594666,
            0.9944778084754944,
            0.9950937032699585,
            0.9913438558578491,
            0.9948115348815918,
            0.9943353533744812,
            0.9935895800590515,
            0.9940480589866638,
            0.9944778084754944
        ]
    },
    "4271": {
        "similarity": 0.9974491596221924,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\ntotal_satisfaction = 0\nfor i in range(N):\n    total_satisfaction += B[A[i] - 1]\n    if i < N - 1:\n        total_satisfaction += C[A[i + 1] - A[i]]\n\nprint(total_satisfaction)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996837317943573,
            0.9974491596221924,
            0.9940918684005737,
            0.997223436832428,
            0.9961867928504944,
            0.9963025450706482,
            0.9973347187042236,
            0.9970727562904358,
            0.9965334534645081,
            0.9966036081314087,
            0.9963250756263733,
            0.9954789876937866,
            0.9963108897209167,
            0.9933433532714844,
            0.9956920146942139,
            0.9966031908988953,
            0.993158221244812,
            0.9968470335006714,
            0.9958714842796326,
            0.9915944337844849
        ]
    },
    "4848": {
        "similarity": 0.9964982867240906,
        "body": "import math\nn = int(input())\nm = 2\nwhile True:\n    if math.isqrt(m * n) ** 2 > m * n or m >= n:\n        break\n    m += 1\nprint(m)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954449534416199,
            0.9949754476547241,
            0.9941956400871277,
            0.9937955141067505,
            0.9954826235771179,
            0.9964982867240906,
            0.9908761382102966,
            0.9914129376411438,
            0.9964613914489746,
            0.992584228515625,
            0.9928277730941772,
            0.9949609041213989,
            0.9940489530563354,
            0.9945937991142273,
            0.9949320554733276,
            0.9963417053222656,
            0.9930339455604553,
            0.9954813718795776,
            0.9956148266792297,
            0.9964898824691772
        ]
    },
    "4694": {
        "similarity": 0.9966741800308228,
        "body": "    n = int(input())\n    houses = list(map(int, input().split()))\n    return max(houses[0], houses[-1]) - min(houses[0], houses[-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962629079818726,
            0.9965720176696777,
            0.9951528310775757,
            0.9965184926986694,
            0.9958891868591309,
            0.9925739765167236,
            0.995613694190979,
            0.9955068826675415,
            0.9960897564888,
            0.9960793256759644,
            0.9938517212867737,
            0.9966741800308228,
            0.9961948394775391,
            0.9956715106964111,
            0.9961948394775391,
            0.9954346418380737,
            0.9963571429252625,
            0.9953325986862183,
            0.9934682250022888,
            0.9955681562423706
        ]
    },
    "4213": {
        "similarity": 0.994927167892456,
        "body": "    N = int(input())\n    A = list(map(int, input().split()))\n    return max(A) - min(A)\n\nprint(max_diff())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939318299293518,
            0.992141842842102,
            0.993158757686615,
            0.9944256544113159,
            0.9947013854980469,
            0.9948535561561584,
            0.9835969805717468,
            0.9930142760276794,
            0.9947013854980469,
            0.9938593506813049,
            0.9929077625274658,
            0.9901955127716064,
            0.9947013854980469,
            0.9944256544113159,
            0.9604554772377014,
            0.994927167892456,
            0.9944257140159607,
            0.994927167892456,
            0.9947013854980469,
            0.994927167892456
        ]
    },
    "4471": {
        "similarity": 0.9970519542694092,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if all(i % 2 == 0 or i % 2 == 1 and a[i] > 0 else False for i in range(n)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949573874473572,
            0.9947933554649353,
            0.9928707480430603,
            0.9955994486808777,
            0.9928303956985474,
            0.9961591958999634,
            0.9957917928695679,
            0.9956111907958984,
            0.9970519542694092,
            0.9958775043487549,
            0.996487557888031,
            0.9967857003211975,
            0.9961644411087036,
            0.9967964887619019,
            0.9964041709899902,
            0.9966966509819031,
            0.9941434264183044,
            0.9963961243629456,
            0.9968051910400391,
            0.9953523278236389
        ]
    },
    "4802": {
        "similarity": 0.9971249103546143,
        "body": "H, M = map(int, input().split())\nM -= 45\nif M < 0:\n    H -= 1\n    M += 60\nprint(H, M)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9971249103546143,
            0.9970518350601196,
            0.9950448274612427,
            0.996194064617157,
            0.9950612783432007,
            0.9965774416923523,
            0.9947658181190491,
            0.9951689839363098,
            0.9954191446304321,
            0.994703471660614,
            0.9948970675468445,
            0.9967378377914429,
            0.9970518350601196,
            0.9955573081970215,
            0.9955611228942871,
            0.9964407086372375,
            0.9954191446304321,
            0.9970518350601196,
            0.9970518350601196,
            0.9970518350601196
        ]
    },
    "4890": {
        "similarity": 0.9969287514686584,
        "body": "n, m, s, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nif n >= m * d or sum(c) + n < m:\n    print(\"impossible\")\nelse:\n    refill = [0] * s\n    new_bottles = n\n    for i in range(s):\n        if c[i] > 0 and new_bottles > 0:\n            refill[i] = min(new_bottles, d)\n            new_bottles -= refill[i]\n            c[i] += refill[i]\n    print(*refill)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992327868938446,
            0.9969287514686584,
            0.9967243671417236,
            0.9953736662864685,
            0.9963870644569397,
            0.9969257712364197,
            0.9944886565208435,
            0.9953694939613342,
            0.9929191470146179,
            0.9926486015319824,
            0.9966605305671692,
            0.9957076907157898,
            0.9946142435073853,
            0.9963431358337402,
            0.9936937093734741,
            0.9911720156669617,
            0.9962633848190308,
            0.9928203225135803,
            0.9953398704528809,
            0.9964770078659058
        ]
    },
    "4286": {
        "similarity": 0.9972893595695496,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        offers.append((x-1, y-1, w))\n    offers.sort(key=lambda x: x[2])\n    cost = 0\n    used = [False] * n\n    for x, y, _ in offers:\n        if not used[x] and not used[y]:\n            cost += max(a[x], a[y])\n            used[x] = used[y] = True\n        elif not used[x]:\n            used[x] = True\n        elif not used[y]:\n            used[y] = True\n    return cost + sum(max(a[i], 0) for i in range(n) if not used[i])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947434663772583,
            0.9954866170883179,
            0.9965716004371643,
            0.9964916706085205,
            0.9958263039588928,
            0.9970486164093018,
            0.99603271484375,
            0.9950172901153564,
            0.99632728099823,
            0.9954205751419067,
            0.9958861470222473,
            0.9952143430709839,
            0.9964728355407715,
            0.9941251873970032,
            0.9952413439750671,
            0.9963507652282715,
            0.9958453178405762,
            0.9972893595695496,
            0.9959031939506531,
            0.9971005320549011
        ]
    },
    "4713": {
        "similarity": 0.9964706301689148,
        "body": "x = 0\nmax_x = 0\nfor i in input():\n    if i == 'I':\n        x += 1\n    else:\n        x -= 1\n    max_x = max(max_x, x)\nprint(max_x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961881041526794,
            0.9950067400932312,
            0.9872918725013733,
            0.9955329895019531,
            0.9915940165519714,
            0.9963160157203674,
            0.9961881041526794,
            0.9959040284156799,
            0.9961881041526794,
            0.9963507652282715,
            0.9946582317352295,
            0.9949846863746643,
            0.995173990726471,
            0.9964388608932495,
            0.9964706301689148,
            0.991591215133667,
            0.9940316081047058,
            0.9944256544113159,
            0.9964577555656433,
            0.9946203827857971
        ]
    },
    "4698": {
        "similarity": 0.9981269836425781,
        "body": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\n\nfor _ in range(M):\n    P, X = map(int, input().split())\n    new_T = T[:]\n    new_T[P-1] = X\n    print(sum(new_T))",
        "result": "passed",
        "similarities": [
            0.9974526762962341,
            0.9967713952064514,
            0.9967983961105347,
            0.9960382580757141,
            0.9974064230918884,
            0.997214674949646,
            0.997739315032959,
            0.9971602559089661,
            0.9981269836425781,
            0.9950567483901978,
            0.9974526762962341,
            0.9959781169891357,
            0.9981269836425781,
            0.9967443346977234,
            0.9963856935501099,
            0.9969586730003357,
            0.9963856935501099,
            0.9977349638938904,
            0.9972200989723206,
            0.9966719746589661
        ]
    },
    "4841": {
        "similarity": 0.9971910119056702,
        "body": "    n = int(input())\n    counts = [s for s in input().split()]\n    prev = 0\n    for c in counts:\n        if c == 'mumble':\n            continue\n        elif int(c) > prev + 1:\n            print('something is fishy')\n            return\n        prev = int(c)\n    print('makes sense')\n\ncheck_counting()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961952567100525,
            0.9960973858833313,
            0.9963513612747192,
            0.9963718056678772,
            0.9960411787033081,
            0.9956022500991821,
            0.994998037815094,
            0.9966943860054016,
            0.996673583984375,
            0.9956870079040527,
            0.9931635856628418,
            0.9967011213302612,
            0.9960987567901611,
            0.9959553480148315,
            0.9948104023933411,
            0.9961552023887634,
            0.9966322183609009,
            0.9958807229995728,
            0.9958773255348206,
            0.9971910119056702
        ]
    },
    "4865": {
        "similarity": 0.9969678521156311,
        "body": "for _ in range(int(input())):\n    direction, minutes, hour, minute = input().split()\n    minutes = int(minutes)\n    hour = int(hour)\n    minute += int(minute)\n\n    if direction == 'F':\n        minute += minutes\n        if minute >= 60:\n            minute -= 60\n            hour += 1\n    else:\n        minute -= minutes\n        if minute < 0:\n            minute += 60\n            hour -= 1\n\n    print(f\"{hour:02d} {minute:02d}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958752393722534,
            0.9966728687286377,
            0.9945967793464661,
            0.9945552349090576,
            0.9964483380317688,
            0.9960115551948547,
            0.9965839385986328,
            0.9891279339790344,
            0.9967842102050781,
            0.994669497013092,
            0.9920058250427246,
            0.9942126870155334,
            0.9945608377456665,
            0.9962551593780518,
            0.9962320923805237,
            0.9964401721954346,
            0.9941745400428772,
            0.9969678521156311,
            0.9955677390098572,
            0.9966982007026672
        ]
    },
    "4957": {
        "similarity": 0.9967579245567322,
        "body": "    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    shops = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                neighbors = [(i-1,j), (i+1,j), (i,j-1), (i,j+1)]\n                valid_neighbors = [pos for pos in neighbors if 0 <= pos[0] < n and 0 <= pos[1] < m and grid[pos[0]][pos[1]] == '.']\n                if valid_neighbors:\n                    shops.append((i, j))\n    for i, j in shops:\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n    print('\\n'.join(grid))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963667988777161,
            0.9955886006355286,
            0.9944655895233154,
            0.9909315705299377,
            0.9951213002204895,
            0.9953070282936096,
            0.9958042502403259,
            0.9925645589828491,
            0.9946710467338562,
            0.9962639212608337,
            0.9956157207489014,
            0.9960214495658875,
            0.9919794797897339,
            0.9967579245567322,
            0.9953611493110657,
            0.995697021484375,
            0.9959731101989746,
            0.9934849143028259,
            0.995196521282196,
            0.9950852990150452
        ]
    },
    "4382": {
        "similarity": 0.9974395632743835,
        "body": "N = int(input())\nprint(N**3)",
        "result": "passed",
        "similarities": [
            0.9974395632743835,
            0.994118332862854,
            0.9942346215248108,
            0.9961346387863159,
            0.9924035668373108,
            0.9973912835121155,
            0.9951362609863281,
            0.9956501722335815,
            0.9973923563957214,
            0.9973913431167603,
            0.9923164248466492,
            0.9973912835121155,
            0.9973923563957214,
            0.9974395632743835,
            0.9943109154701233,
            0.9974109530448914,
            0.9973912835121155,
            0.9931457042694092,
            0.9931457042694092,
            0.9961346387863159
        ]
    },
    "4456": {
        "similarity": 0.9958590269088745,
        "body": "n, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input(), split()))\n\ns = ''\ni = 1\nwhile len(set(s)) < k:\n    if i not in p and i not in q:\n        s += chr(ord('a') + i)\n        i += 1\n\nfor pi, qi in zip(p, q):\n    s[pi - 1] = s[qi - 1]\n\nif len(set(s)) < k:\n    print(\"NO\")\nelse:\n    print(\"YES\\n\", s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944259524345398,
            0.9921380281448364,
            0.9934529662132263,
            0.9926387667655945,
            0.9950878620147705,
            0.9950922727584839,
            0.9954516887664795,
            0.9942783713340759,
            0.9916636943817139,
            0.9943283796310425,
            0.9953117370605469,
            0.9947361350059509,
            0.9936195015907288,
            0.995015025138855,
            0.9958590269088745,
            0.994157075881958,
            0.9928371906280518,
            0.9950246214866638,
            0.9946818947792053,
            0.9918922781944275
        ]
    },
    "4594": {
        "similarity": 0.9931967854499817,
        "body": "N = int(input())\ndiameters = sorted([int(input()) for _ in range(N)], reverse=True)\nmax_layers = len(set(diameters))\nprint(max_layers)",
        "result": "passed",
        "similarities": [
            0.9923720955848694,
            0.9915708303451538,
            0.9878674745559692,
            0.9925972819328308,
            0.9879003763198853,
            0.9914615154266357,
            0.9917933940887451,
            0.9891220927238464,
            0.9931967854499817,
            0.9924139976501465,
            0.9907546043395996,
            0.9877891540527344,
            0.9894967675209045,
            0.9929008483886719,
            0.992152988910675,
            0.9919795989990234,
            0.9903841614723206,
            0.9914615154266357,
            0.9914615154266357,
            0.989158034324646
        ]
    },
    "4560": {
        "similarity": 0.9972901940345764,
        "body": "N = int(input())\nA = int(input())\n\nif N % 500 <= A and N >= 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9972668886184692,
            0.997088611125946,
            0.9972513914108276,
            0.9968587160110474,
            0.9952680468559265,
            0.9970123171806335,
            0.9972668886184692,
            0.9959894418716431,
            0.996256411075592,
            0.9972513914108276,
            0.9972579479217529,
            0.9971960783004761,
            0.9972901940345764,
            0.9971960783004761,
            0.9971960783004761,
            0.9959894418716431,
            0.9972513914108276,
            0.9970742464065552,
            0.9972668886184692,
            0.9972886443138123
        ]
    },
    "4320": {
        "similarity": 0.9919857382774353,
        "body": "    n = int(input())\n    x = n.bit_length()\n    if n == 1 << x:\n        print(x)\n    else:\n        print(1)\n\nfor _ in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.988059401512146,
            0.9905567169189453,
            0.9860458374023438,
            0.9886642098426819,
            0.9877136945724487,
            0.9714118838310242,
            0.9876230955123901,
            0.958689272403717,
            0.9899090528488159,
            0.9888786673545837,
            0.9905483722686768,
            0.9887563586235046,
            0.9895755648612976,
            0.9891114830970764,
            0.990626871585846,
            0.9735885262489319,
            0.9919857382774353,
            0.9879371523857117,
            0.9906548857688904,
            0.9916613698005676
        ]
    },
    "4500": {
        "similarity": 0.9970725178718567,
        "body": "A, B, C = map(int, input().split())\nprint('Yes' if A + B >= C else 'No')",
        "result": "passed",
        "similarities": [
            0.9934875965118408,
            0.9933714866638184,
            0.9970725178718567,
            0.9968448281288147,
            0.9969139099121094,
            0.9933509826660156,
            0.9957232475280762,
            0.9933714866638184,
            0.9968934655189514,
            0.9968187212944031,
            0.9970725178718567,
            0.9968791007995605,
            0.9968187212944031,
            0.9970725178718567,
            0.9967510104179382,
            0.9951674938201904,
            0.9968448281288147,
            0.9967079162597656,
            0.9970725178718567,
            0.9942220449447632
        ]
    },
    "4739": {
        "similarity": 0.9972596764564514,
        "body": "M, N = map(int, input().split())\nT = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nspeeds = set()\nfor i in range(M-1):\n    for j in range(N-1):\n        if X[j] <= T[i+1]:\n            speed = (T[i+1] - T[i]) / (X[j+1] - X[j])\n            speeds.add(speed)\n\nprint(len(speeds))\nprint(*sorted(list(speeds)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955980181694031,
            0.9970044493675232,
            0.9958580732345581,
            0.9970600605010986,
            0.9947429299354553,
            0.9971307516098022,
            0.9945341348648071,
            0.9971433281898499,
            0.9966658353805542,
            0.9949491620063782,
            0.9972596764564514,
            0.9970827698707581,
            0.9933756589889526,
            0.9964197278022766,
            0.9949051737785339,
            0.9963701367378235,
            0.9953275918960571,
            0.9953883290290833,
            0.9952693581581116,
            0.9935157299041748
        ]
    },
    "4410": {
        "similarity": 0.9965986013412476,
        "body": "    occupied = [i for i in range(n) if s[i] == '1']\n    free_count = 0\n    prev_occupied = -k-1\n    for i in range(n):\n        if s[i] == '0' and i > prev_occupied + k:\n            free_count += 1\n            prev_occupied = i\n    return free_count\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_free_tables(n, k, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962711334228516,
            0.9931837320327759,
            0.9938143491744995,
            0.9921660423278809,
            0.9965223073959351,
            0.9946407675743103,
            0.9938418865203857,
            0.9953746795654297,
            0.9913137555122375,
            0.9956380128860474,
            0.9946619272232056,
            0.9958289265632629,
            0.9930036664009094,
            0.9948109984397888,
            0.9957554340362549,
            0.9955281615257263,
            0.9951062798500061,
            0.9954877495765686,
            0.9948900938034058,
            0.9965986013412476
        ]
    },
    "2441": {
        "similarity": 0.9964863657951355,
        "body": "    n = int(input())\n    costs = list(map(int, input().split()))\n    m = int(input())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u - 1].append(v - 1)\n\n    dp = [[0] * (n + 1) for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = costs[i]\n        for j in range(i + 1, n):\n            if j not in graph[i]:\n                continue\n            dp[i][j] = min(dp[i][k] + dp[k + 1][j] for k in range(i, j)) + costs[j]\n    print(min(dp[0][n - 1], dp[n // 2][(n - 1) // 2]))\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942207336425781,
            0.9940922260284424,
            0.9930700063705444,
            0.9950914978981018,
            0.9904478192329407,
            0.9943360090255737,
            0.9963854551315308,
            0.9953987002372742,
            0.9961453676223755,
            0.996255099773407,
            0.9947676658630371,
            0.9939317107200623,
            0.9959197640419006,
            0.9957702159881592,
            0.9962874054908752,
            0.9935094118118286,
            0.9930588603019714,
            0.9964863657951355,
            0.9954288005828857,
            0.9959501028060913
        ]
    },
    "276": {
        "similarity": 0.9964551329612732,
        "body": "gem_colors = {'power': 'purple', 'time': 'green', 'space': 'blue', 'soul': 'orange', 'reality': 'red', 'mind': 'yellow'}\nn = int(input())\nseen_gems = set([input() for _ in range(n)])\nabsent_gems = [gem for gem, color in gem_colors.items() if color not in seen_gems]\nprint(len(absent_gems))\nfor gem in absent_gems:\n    print(gem.capitalize())",
        "result": "passed",
        "similarities": [
            0.9952746033668518,
            0.9917916655540466,
            0.9939412474632263,
            0.9958804249763489,
            0.994742751121521,
            0.9963277578353882,
            0.9963277578353882,
            0.9916012287139893,
            0.9955452680587769,
            0.9944394826889038,
            0.9956623911857605,
            0.9953378438949585,
            0.9949002861976624,
            0.9950234293937683,
            0.9960551261901855,
            0.9921411275863647,
            0.9947969317436218,
            0.9964551329612732,
            0.9942120313644409,
            0.9957605004310608
        ]
    },
    "2635": {
        "similarity": 0.99686199426651,
        "body": "    if not matrix: return []\n    R, C = len(matrix), len(matrix[0])\n    seen = [[False] * C for _ in range(R)]\n    ans = []\n    dr, dc = 0, 1\n    r, c = 0, 0\n    for _ in range(R*C):\n        ans.append(matrix[r][c])\n        seen[r][c] = True\n        cr, cc = (r + dr) % R, (c + dc) % C\n        if 0 <= cr < R and 0 <= cc < C and not seen[cr][cc]:\n            r, c = cr, cc\n        else:\n            dr, dc = dc, -dr\n            r, c = r + dr, c + dc\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930126667022705,
            0.9944315552711487,
            0.9956450462341309,
            0.9960909485816956,
            0.9968549013137817,
            0.9965362548828125,
            0.9961035847663879,
            0.9952915906906128,
            0.9963541626930237,
            0.9956324696540833,
            0.9968050718307495,
            0.9929658770561218,
            0.9957546591758728,
            0.99686199426651,
            0.9961996674537659,
            0.9945006370544434,
            0.9898070096969604,
            0.9958924055099487,
            0.9968050718307495,
            0.9964348673820496
        ]
    },
    "281": {
        "similarity": 0.9933367371559143,
        "body": "    a, b = map(int, input().split())\n    factorial = 1\n    for i in range(max(a, b), min(a, b) - 1, -1):\n        factorial *= i % 10\n    print(factorial % 10)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931307435035706,
            0.9926027059555054,
            0.9874129891395569,
            0.9926091432571411,
            0.9840326905250549,
            0.9911086559295654,
            0.9887803792953491,
            0.9916484355926514,
            0.9906185865402222,
            0.9912175536155701,
            0.9898214936256409,
            0.9911481142044067,
            0.9933367371559143,
            0.9884248971939087,
            0.9877397418022156,
            0.9892451763153076,
            0.9907543659210205,
            0.9856330752372742,
            0.9867921471595764,
            0.9922397136688232
        ]
    },
    "2300": {
        "similarity": 0.9979591369628906,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = [1] * max(n + 10, 3)\n    for i in range(3, len(f)):\n        f[i] = f[i - 1] + f[i - 2]\n    for _ in range(m):\n        t = int(input())\n        if t == 1:\n            x, v = map(int, input().split())\n            a[x - 1] = v\n        elif t == 2:\n            l, r = map(int, input().split())\n            print(sum(f[i] * a[l + i - 1] for i in range(r - l + 1)) % 1000000000)\n        else:\n            l, r, d = map(int, input().split())\n            a[l - 1:r] = [a[i] + d for i in range(l - 1, r)]\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968839287757874,
            0.997343897819519,
            0.9977287650108337,
            0.9979591369628906,
            0.9972795248031616,
            0.9977766275405884,
            0.9975792765617371,
            0.9967488050460815,
            0.9956158995628357,
            0.9973722696304321,
            0.9956610798835754,
            0.995859682559967,
            0.9975761771202087,
            0.9961180686950684,
            0.9954596161842346,
            0.9953632354736328,
            0.9974445700645447,
            0.9969907402992249,
            0.9963533282279968,
            0.9969850182533264
        ]
    },
    "2104": {
        "similarity": 0.9975981712341309,
        "body": "    l, r = map(int, input().split())\n    pairs = []\n    for i in range(l, r + 1):\n        if len(pairs) == (r - l + 1) // 2:\n            break\n        for j in range(i + 1, r + 1):\n            if math.gcd(i, j) == 1 and (j, i) not in pairs:\n                pairs.append((i, j))\n                break\n    print('YES' if len(pairs) == (r - l + 1) // 2 else 'NO')\n    for pair in pairs:\n        print(*pair)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931584596633911,
            0.9960146546363831,
            0.9973680377006531,
            0.9961995482444763,
            0.9964041709899902,
            0.9973608255386353,
            0.9958849549293518,
            0.9969293475151062,
            0.997489333152771,
            0.9965510368347168,
            0.9961283802986145,
            0.9955673217773438,
            0.9942723512649536,
            0.9933038353919983,
            0.9975981712341309,
            0.9973935484886169,
            0.9974330067634583,
            0.9971897602081299,
            0.9958837628364563,
            0.9961656332015991
        ]
    },
    "1995": {
        "similarity": 0.9976800680160522,
        "body": "s = input()\nm = int(input())\nfor _ in range(m):\n    l, r, k = map(int, input().split())\n    s = s[l-1:r] + s[:l-1]\n    s = s[-k:] + s[:-k]\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972261190414429,
            0.9973090291023254,
            0.9974182844161987,
            0.9972261190414429,
            0.9973090291023254,
            0.9935457110404968,
            0.9942609071731567,
            0.9918233156204224,
            0.9976800680160522,
            0.9973090291023254,
            0.9976800680160522,
            0.9970375895500183,
            0.9973090291023254,
            0.9966515302658081,
            0.9971266388893127,
            0.9960656762123108,
            0.9931267499923706,
            0.9902628660202026,
            0.9975204467773438,
            0.9973762035369873
        ]
    },
    "2064": {
        "similarity": 0.9931000471115112,
        "body": "    n = int(input())\n    return str(9 * (n - 1))\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.990073561668396,
            0.9920240640640259,
            0.9925640821456909,
            0.9858585000038147,
            0.9877285361289978,
            0.9800099730491638,
            0.9922413229942322,
            0.9911894798278809,
            0.9846377372741699,
            0.99273282289505,
            0.9917908906936646,
            0.9927984476089478,
            0.9888229370117188,
            0.9928640127182007,
            0.9844651818275452,
            0.9910417795181274,
            0.9899918437004089,
            0.9903781414031982,
            0.9931000471115112,
            0.9908083081245422
        ]
    },
    "1715": {
        "similarity": 0.9959696531295776,
        "body": "    shrines = list(map(int, [input() for _ in range(A)]))\n    temples = list(map(int, [input() for _ in range(B)]))\n    queries = list(map(int, [input() for _ in range(Q)]))\n\n        left, right = 0, len(locations)\n        while left < right:\n            mid = (left + right) // 2\n            if locations[mid] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        return abs(x - locations[right-1])\n\n    for query in queries:\n        shrine_dist = min(find_nearest(shrines, query), find_nearest(temples, query))\n        temple_dist = min(find_nearest(shrines, query), find_nearest(temples, query))\n        print(max(shrine_dist, temple_dist))\n\nmin_distance(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927777051925659,
            0.9956725239753723,
            0.9945068359375,
            0.9903530478477478,
            0.9912207722663879,
            0.9957865476608276,
            0.9938951134681702,
            0.995223879814148,
            0.9950712323188782,
            0.9925592541694641,
            0.9959696531295776,
            0.9959184527397156,
            0.9932917356491089,
            0.9918949604034424,
            0.9922011494636536,
            0.9958018064498901,
            0.9936900734901428,
            0.9950499534606934,
            0.9925850629806519,
            0.9936769604682922
        ]
    },
    "2074": {
        "similarity": 0.9955083131790161,
        "body": "    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    max_row = max(min(row) for row in matrix)\n    return max_row\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951792359352112,
            0.9946108460426331,
            0.9937900900840759,
            0.9944570660591125,
            0.9945263266563416,
            0.994339108467102,
            0.9937955141067505,
            0.9932774305343628,
            0.9938369393348694,
            0.99419105052948,
            0.9940584897994995,
            0.9919981956481934,
            0.9932774305343628,
            0.9955083131790161,
            0.9948809742927551,
            0.9940944314002991,
            0.9951726794242859,
            0.9940584897994995,
            0.995167076587677,
            0.9948142170906067
        ]
    },
    "2921": {
        "similarity": 0.9975173473358154,
        "body": "    m, u, d = map(float, input().split())\n    drinks = []\n    for _ in range(d):\n        name, strength, size, cost = input().split()\n        strength = float(strength[:-1])\n        size = {'1/1': 1.0, '1/2': 0.5, '1/3': 1/3}[size]\n        drinks.append((name, strength * size / 100, float(cost)))\n    for name, units, cost in drinks:\n        if u // units > m / cost:\n            print(\"IMPOSSIBLE\")\n            return\n    for name, units, cost in sorted(drinks):\n        bought = min(u // units, m // cost)\n        if bought:\n            print(f\"{name} {bought}\")\n            u -= bought * units\n            m -= bought * cost\n\nbeer_tasting()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970753192901611,
            0.9966493844985962,
            0.9972809553146362,
            0.9975120425224304,
            0.9966259002685547,
            0.996099591255188,
            0.9951784014701843,
            0.9963723421096802,
            0.9961603283882141,
            0.997336745262146,
            0.996557354927063,
            0.9958485960960388,
            0.9970600605010986,
            0.9975173473358154,
            0.9962943196296692,
            0.9966005086898804,
            0.9968120455741882,
            0.9964290261268616,
            0.9968374371528625,
            0.9972890615463257
        ]
    },
    "1642": {
        "similarity": 0.9953163862228394,
        "body": "import sys\n\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    x_max = max(x for x, y in points)\n    y_max = max(y for x, y in points)\n\n        moved_points = [(x + D * (y - y0), y) if y > y0 else (x, y) for x, y in points]\n        return all((moved_points[i][0] - moved_points[(i + 1) % n][0]) * (moved_points[i][1] - moved_points[(i + 2) % n][1]) >= (moved_points[i][1] - moved_points[(i + 1) % n][1]) * (moved_points[i][0] - moved_points[(i + 2) % n][0]) for i in range(n))\n\n    left, right = 0.0, max(x_max, y_max)\n    for _ in range(50):\n        mid = (left + right) / 2\n        if is_valid(mid):\n            left = mid\n        else:\n            right = mid\n    return left\n\nprint(max_distance())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938725233078003,
            0.9929278492927551,
            0.9920604228973389,
            0.9926326274871826,
            0.9950721263885498,
            0.9948350787162781,
            0.9944387674331665,
            0.9910386800765991,
            0.9922242760658264,
            0.9943740367889404,
            0.9925937652587891,
            0.9953163862228394,
            0.9921045899391174,
            0.9913504719734192,
            0.9922292828559875,
            0.9928785562515259,
            0.9933297038078308,
            0.9945098757743835,
            0.9949125051498413,
            0.9897199869155884
        ]
    },
    "947": {
        "similarity": 0.9964643716812134,
        "body": "    n = int(input())\n    if n % 2 == 0:\n        print(n//2, n//2)\n    else:\n        print((n+1)//2, (n-1)//2)\n\nwhile True:\n    t = int(input())\n    for _ in range(t):\n        solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995448648929596,
            0.9961975812911987,
            0.9964643716812134,
            0.9962055683135986,
            0.9958742260932922,
            0.9963868856430054,
            0.9927068948745728,
            0.9915803670883179,
            0.9916421175003052,
            0.9954734444618225,
            0.9964048266410828,
            0.9906425476074219,
            0.9956024885177612,
            0.9919508695602417,
            0.9932724833488464,
            0.9959554076194763,
            0.9953099489212036,
            0.9936872720718384,
            0.994074285030365,
            0.9962142109870911
        ]
    },
    "743": {
        "similarity": 0.9942170977592468,
        "body": "    n = int(input())\n    xs = list(map(int, input().split()))\n    xs.sort()\n    ans = sum(xs[1:])\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.99310702085495,
            0.9924991130828857,
            0.987628161907196,
            0.9895000457763672,
            0.9941451549530029,
            0.991886556148529,
            0.9938823580741882,
            0.9905134439468384,
            0.9888396263122559,
            0.9919116497039795,
            0.9841280579566956,
            0.993688702583313,
            0.9919116497039795,
            0.990736722946167,
            0.9936807751655579,
            0.9887360334396362,
            0.9916641116142273,
            0.9857518076896667,
            0.9908444285392761,
            0.9942170977592468
        ]
    },
    "1397": {
        "similarity": 0.9969993233680725,
        "body": "    n, m = map(int, input().split())\n    forbidden_pairs = {tuple(sorted(map(int, input().split()))) for _ in range(m)}\n    roads = []\n    for i in range(1, n + 1):\n        if (i, i + 1) not in forbidden_pairs:\n            roads.append((i, i + 1))\n        if i < n and (n, i) not in forbidden_pairs:\n            roads.append((n, i))\n    print(len(roads))\n    for road in roads:\n        print(*road)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959328174591064,
            0.9945192933082581,
            0.9932438731193542,
            0.9945306181907654,
            0.9966790080070496,
            0.9963011741638184,
            0.996254563331604,
            0.9937136769294739,
            0.9967547059059143,
            0.9957900643348694,
            0.9966012239456177,
            0.9933074116706848,
            0.9969993233680725,
            0.9963122010231018,
            0.9922090768814087,
            0.9936764240264893,
            0.9963662028312683,
            0.996526300907135,
            0.9959378838539124,
            0.9933837056159973
        ]
    },
    "1144": {
        "similarity": 0.99626624584198,
        "body": "n = int(input())\ns = input()\nm = int(input())\n\n    cnt, curr = 0, 0\n    for i in range(n - m + 1):\n        if s[i] == t[curr]:\n            curr += 1\n            if curr == m:\n                cnt += 1\n                curr = 0\n        else:\n            curr = 0\n    return cnt\n\n    t = 'a' * ((m + 1) // 2) + 'b' * (m // 2)\n    occurrences = count_occurrences(t)\n    replacements = s.count('?') - occurrences * (m - 1)\n    return max(replacements, 0)\n\nprint(min_replacements())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942243695259094,
            0.9950565695762634,
            0.9950776696205139,
            0.9943969249725342,
            0.9853543043136597,
            0.9950932860374451,
            0.9959955811500549,
            0.9939853549003601,
            0.9935212731361389,
            0.9936473369598389,
            0.9939862489700317,
            0.9954675436019897,
            0.9947764873504639,
            0.99626624584198,
            0.9957939982414246,
            0.9959166646003723,
            0.9952341318130493,
            0.9926964640617371,
            0.9955257773399353,
            0.9949060082435608
        ]
    },
    "890": {
        "similarity": 0.9966948628425598,
        "body": "from itertools import combinations\n\nn, l, r, x = map(int, input().split())\nc = list(map(int, input().split()))\n\n    count = 0\n    for i in range(2, n+1):\n        for subset in combinations(c, i):\n            if l <= sum(subset) <= r and max(subset) - min(subset) >= x:\n                count += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960399270057678,
            0.995117723941803,
            0.9966948628425598,
            0.995833158493042,
            0.9953842163085938,
            0.9959292411804199,
            0.9954850077629089,
            0.9925001859664917,
            0.9906202554702759,
            0.9940958619117737,
            0.9944846630096436,
            0.9942907094955444,
            0.9958367943763733,
            0.9965800046920776,
            0.9954466819763184,
            0.9953978657722473,
            0.9948236346244812,
            0.9949455261230469,
            0.9960840344429016,
            0.9951854348182678
        ]
    },
    "2410": {
        "similarity": 0.9970799684524536,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        yasser_total = sum(a)\n        max_adel_total = max(sum(a[i:j]) for i in range(1, n) for j in range(i + 1, n + 1))\n        print(\"YES\" if yasser_total > max_adel_total else \"NO\")",
        "result": "passed",
        "similarities": [
            0.996982991695404,
            0.9961079955101013,
            0.9939026236534119,
            0.9970799684524536,
            0.9948065876960754,
            0.9960086345672607,
            0.9959542155265808,
            0.9964932799339294,
            0.9927865266799927,
            0.9967724680900574,
            0.995522677898407,
            0.9955298900604248,
            0.9970396161079407,
            0.9942516684532166,
            0.9961168169975281,
            0.9878451824188232,
            0.9946845173835754,
            0.9966984987258911,
            0.993941068649292,
            0.9969481229782104
        ]
    },
    "1004": {
        "similarity": 0.9962894916534424,
        "body": "    n = int(input())\n    events = list(map(int, input().split()))\n    entered = set()\n    days = []\n    current_day = []\n\n    for i in range(n):\n        if abs(events[i]) not in entered:\n            entered.add(abs(events[i]))\n            current_day.append(1)\n        else:\n            current_day.append(-abs(events[i]))\n\n        if len(current_day) > 0 and current_day[-1] == -current_day[0]:\n            days.append(len(current_day))\n            current_day = []\n\n    print(-1 if not all(day % 2 == 0 for day in days) else len(days))\n    print(*days)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995134174823761,
            0.9960158467292786,
            0.995112955570221,
            0.9956600069999695,
            0.9954009652137756,
            0.9955074787139893,
            0.9962515830993652,
            0.9945184588432312,
            0.9953344464302063,
            0.996120035648346,
            0.9891570210456848,
            0.994276762008667,
            0.9962894916534424,
            0.9953214526176453,
            0.9918453097343445,
            0.9938693046569824,
            0.9959235191345215,
            0.9938935041427612,
            0.993000864982605,
            0.9947564005851746
        ]
    },
    "531": {
        "similarity": 0.9964926838874817,
        "body": "    n = int(input())\n    x = list(map(int, input().split()))\n    min_x = min(x)\n    max_x = max(x)\n\n    avg_x = sum(x) / n\n    y = [avg_x] * n\n\n    for i in range(n):\n        if y[i] < min_x:\n            y[i] = min_x\n        elif y[i] > max_x:\n            y[i] = max_x\n\n    print(sum([1 for a, b in zip(x, y) if a == b]))\n    print(' '.join(map(str, y)))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.991662859916687,
            0.9947425723075867,
            0.9949493408203125,
            0.9934255480766296,
            0.9924367666244507,
            0.9905694723129272,
            0.9952003359794617,
            0.9952718019485474,
            0.9960500597953796,
            0.9948812127113342,
            0.992034912109375,
            0.9956638813018799,
            0.9964926838874817,
            0.9944893717765808,
            0.9958106875419617,
            0.9961600303649902,
            0.9942556619644165,
            0.9949623942375183,
            0.9964634776115417,
            0.9958102703094482
        ]
    },
    "510": {
        "similarity": 0.9941469430923462,
        "body": "a, b, c, d = map(int, input().split())\nmax_abs_diff = max(abs(a-b), abs(b-c), abs(a-c))\nif max_abs_diff >= d:\n    print(0)\nelse:\n    print(d - max_abs_diff)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903050661087036,
            0.9921404123306274,
            0.9936167001724243,
            0.9901695251464844,
            0.9923132061958313,
            0.9908677935600281,
            0.9932278990745544,
            0.9907973408699036,
            0.9910693764686584,
            0.9941469430923462,
            0.9932195544242859,
            0.9940222501754761,
            0.9817042946815491,
            0.9925416707992554,
            0.992518961429596,
            0.9883418083190918,
            0.9927387237548828,
            0.9898281097412109,
            0.9930660724639893,
            0.9926973581314087
        ]
    },
    "2555": {
        "similarity": 0.9949355125427246,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_strength = [0] * (n + 1)\n    for i in range(n):\n        if i == 0 or a[i - 1] > a[i]:\n            max_strength[i + 1] = max_strength[i]\n        else:\n            max_strength[i + 1] = max_strength[i] + 2 * a[i]\n    print(max_strength[-1])\n    for _ in range(q):\n        l, r = map(int, input().split())\n        if a[l - 1] > a[r - 1]:\n            print(max_strength[l - 1] - max_strength[r], end=' ')\n        elif a[l - 1] < a[r - 1]:\n            print(max_strength[r - 1] + 2 * a[r - 1] - max_strength[l - 1], end=' ')\n        else:\n            print(max_strength[r - 1] - max_strength[l - 1], end=' ')\n    print()\n\nt = int(input())\nfor _ in range(t):\n    process_test_case()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942132830619812,
            0.9947421550750732,
            0.9924713969230652,
            0.987705409526825,
            0.9942430257797241,
            0.9944747090339661,
            0.994827151298523,
            0.9897246360778809,
            0.9949355125427246,
            0.9942685961723328,
            0.9938045144081116,
            0.9904156923294067,
            0.9930861592292786,
            0.9938135743141174,
            0.9948822855949402,
            0.9933663606643677,
            0.9949240684509277,
            0.9932058453559875,
            0.9935430288314819,
            0.9941432476043701
        ]
    },
    "324": {
        "similarity": 0.9952125549316406,
        "body": "    n = int(input())\n    a, b = max(2, n // 2), min(n // 2 + 1, 999998)\n    print(a, a - n)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9901713132858276,
            0.9937889575958252,
            0.9921945333480835,
            0.9889351725578308,
            0.994340717792511,
            0.9934011697769165,
            0.993843674659729,
            0.9938734173774719,
            0.9944177269935608,
            0.9926686882972717,
            0.9942883849143982,
            0.990635097026825,
            0.9951567649841309,
            0.9930871725082397,
            0.9948005676269531,
            0.9814113974571228,
            0.9904122948646545,
            0.9926203489303589,
            0.9952125549316406,
            0.9930292367935181
        ]
    },
    "2912": {
        "similarity": 0.9983083605766296,
        "body": "N = int(input())\nS = [input() for _ in range(N)]\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    S[a-1] += S[b-1]\n    S[b-1] = \"\"\nprint(''.join(S))",
        "result": "passed",
        "similarities": [
            0.9972366690635681,
            0.9965649843215942,
            0.9965402483940125,
            0.9973065257072449,
            0.9983083605766296,
            0.9974973797798157,
            0.9974877238273621,
            0.9983083605766296,
            0.9977366924285889,
            0.994831383228302,
            0.9982433319091797,
            0.9964756369590759,
            0.9981707334518433,
            0.9976668953895569,
            0.9979347586631775,
            0.9968390464782715,
            0.9983049035072327,
            0.9982032775878906,
            0.9981878399848938,
            0.9976780414581299
        ]
    },
    "9": {
        "similarity": 0.9967013001441956,
        "body": "d = int(input())\nn, m = map(int, input().split())\nsofas = [list(map(int, input().split())) for _ in range(d)]\ncnts = list(map(int, input().split()))\n\nfor i in range(d):\n    left, right, top, bottom = 0, 0, 0, 0\n    for j in range(d):\n        if sofas[j][2] < sofas[i][0]:\n            left += 1\n        elif sofas[j][0] > sofas[i][2]:\n            right += 1\n        elif sofas[j][3] < sofas[i][1]:\n            top += 1\n        elif sofas[j][1] > sofas[i][3]:\n            bottom += 1\n\n    if left == cnts[0] and right == cnts[1] and top == cnts[2] and bottom == cnts[3]:\n        print(i + 1)\n        break\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928995370864868,
            0.9942024946212769,
            0.9959449768066406,
            0.9961959719657898,
            0.9954156279563904,
            0.9959688782691956,
            0.9964033365249634,
            0.9951980113983154,
            0.9966919422149658,
            0.9943745136260986,
            0.9962608218193054,
            0.9960120320320129,
            0.9937089681625366,
            0.9953224658966064,
            0.9967013001441956,
            0.9917586445808411,
            0.9955064654350281,
            0.9935976266860962,
            0.9962610006332397,
            0.9957247376441956
        ]
    },
    "249": {
        "similarity": 0.9960072040557861,
        "body": "n, l, x, y = map(int, input().split())\nmarks = list(map(int, input().split()))\n\n    v = 0\n    p = []\n    if x not in marks:\n        v += 1\n        p.append(x)\n    if y not in marks:\n        v += 1\n        p.append(y)\n    return v, sorted(p)\n\nv, p = min_marks()\nprint(v)\nprint(*p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946642518043518,
            0.9947046041488647,
            0.9960072040557861,
            0.9938838481903076,
            0.9954433441162109,
            0.9958353638648987,
            0.9931738972663879,
            0.9950191974639893,
            0.9943972229957581,
            0.9951380491256714,
            0.9948137998580933,
            0.9953586459159851,
            0.9955190420150757,
            0.9949261546134949,
            0.9953908324241638,
            0.9954636096954346,
            0.9945301413536072,
            0.9941196441650391,
            0.9937906861305237,
            0.9952079653739929
        ]
    },
    "2999": {
        "similarity": 0.9964486360549927,
        "body": "n, s = map(int, input().split())\nbids = {}\nfor _ in range(n):\n    name, bid = input().split()\n    bid = int(bid)\n    bids[name] = bid\n\nwinners = []\ntotal_bid = 0\nfor name, bid in sorted(bids.items(), key=lambda x: x[1]):\n    total_bid += bid\n    if total_bid == s:\n        winners.append(name)\n\nprint(len(winners))\nif winners:\n    print('\\n'.join(winners))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955524802207947,
            0.9923755526542664,
            0.9910866618156433,
            0.9955586194992065,
            0.9950816631317139,
            0.9964486360549927,
            0.994198739528656,
            0.9932922720909119,
            0.9905775785446167,
            0.9958173036575317,
            0.9958829283714294,
            0.9929207563400269,
            0.9940398335456848,
            0.9953079223632812,
            0.9933544993400574,
            0.9953070282936096,
            0.9956870675086975,
            0.99261075258255,
            0.994198739528656,
            0.990975022315979
        ]
    },
    "2239": {
        "similarity": 0.9945608377456665,
        "body": "    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        n = 1\n        while True:\n            if 2 + n * 7 <= x <= 2 + (n + 1) * 7:\n                break\n            n += 1\n        print(n)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9908167123794556,
            0.9920343160629272,
            0.9938947558403015,
            0.9942117929458618,
            0.9880915284156799,
            0.9943746328353882,
            0.991130530834198,
            0.9943667054176331,
            0.9945608377456665,
            0.9926086068153381,
            0.9944566488265991,
            0.9939733743667603,
            0.9944933652877808,
            0.9823465943336487,
            0.9941932559013367,
            0.9852920174598694,
            0.9787841439247131,
            0.9881883263587952,
            0.9878115653991699,
            0.9940691590309143
        ]
    },
    "2615": {
        "similarity": 0.9978960156440735,
        "body": "from math import gcd\n\n    elegant_count = 0\n    for i in range(2, n + 1):\n        prime_factors = []\n        j = i\n        while j % 2 == 0:\n            prime_factors.append(1)\n            j //= 2\n        while j % 3 == 0:\n            prime_factors.append(2)\n            j //= 3\n        while j > 1:\n            prime_factors.append(3)\n            j //= 5\n        elegant = True\n        for i in range(len(prime_factors) - 1):\n            elegant &= gcd(prime_factors[i], prime_factors[i + 1]) == 1\n        if elegant:\n            elegant_count += 1\n    return elegant_count\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(count_elegant_numbers(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969117045402527,
            0.9973817467689514,
            0.9969974160194397,
            0.9975012540817261,
            0.9976139068603516,
            0.9971775412559509,
            0.9974756836891174,
            0.9978960156440735,
            0.9975273013114929,
            0.995934247970581,
            0.9971474409103394,
            0.9957610964775085,
            0.9978463053703308,
            0.996968150138855,
            0.9971367716789246,
            0.9977251291275024,
            0.9954661130905151,
            0.9969605207443237,
            0.9961756467819214,
            0.9960182905197144
        ]
    },
    "2542": {
        "similarity": 0.9951297640800476,
        "body": "    n = len(s)\n    if s == s[::-1]: return 0\n    for i in range(1, n // 2 + 1):\n        if s[i:] == s[:n-i][::-1]: return i\n    return n\n\nfor _ in range(int(input())):\n    print(min_erase(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9888662099838257,
            0.9868341088294983,
            0.9949138164520264,
            0.9897639751434326,
            0.9951297640800476,
            0.992933988571167,
            0.9940025210380554,
            0.989546000957489,
            0.9911874532699585,
            0.9923808574676514,
            0.9950169920921326,
            0.9944939017295837,
            0.9926785230636597,
            0.9940117597579956,
            0.9915721416473389,
            0.9928529858589172,
            0.9942861795425415,
            0.9945777058601379,
            0.992218554019928,
            0.9917902946472168
        ]
    },
    "511": {
        "similarity": 0.9967213869094849,
        "body": "from math import gcd\n\n    if b == 0:\n        return 0\n    else:\n        return 1 + f(a, b - gcd(a, b))\n\nx, y = map(int, input().split())\nprint(f(x, y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967213869094849,
            0.995639979839325,
            0.9853112101554871,
            0.9960105419158936,
            0.994974672794342,
            0.991489827632904,
            0.9960105419158936,
            0.9956600666046143,
            0.9960105419158936,
            0.9960105419158936,
            0.9956444501876831,
            0.99603670835495,
            0.9960105419158936,
            0.9910205006599426,
            0.9967213869094849,
            0.9947917461395264,
            0.9960105419158936,
            0.995245099067688,
            0.9964505434036255,
            0.9937134981155396
        ]
    },
    "1409": {
        "similarity": 0.9950775504112244,
        "body": "    counts = list(map(int, input().split()))\n    valid = [i for i in range(n) if counts[i] >= k]\n    return min(len(valid), 3)\n\nprint(solve(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949765801429749,
            0.9907757639884949,
            0.991860032081604,
            0.9929030537605286,
            0.9945924878120422,
            0.9935826659202576,
            0.9935106039047241,
            0.9931257963180542,
            0.9935137033462524,
            0.9890698790550232,
            0.9944769144058228,
            0.9924976229667664,
            0.993503749370575,
            0.9935029745101929,
            0.9905575513839722,
            0.9950775504112244,
            0.9945100545883179,
            0.9933831095695496,
            0.9929105639457703,
            0.9926823973655701
        ]
    },
    "2274": {
        "similarity": 0.9975886940956116,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [list(input()) for _ in range(n)]\n        changes = 0\n        for i in range(n - 1):\n            for j in range(m):\n                if grid[i][j] == 'D' and grid[i + 1][j] != 'C':\n                    changes += 1\n                    grid[i + 1][j] = 'R'\n        for j in range(m - 1):\n            if grid[n - 1][j] == 'R':\n                changes += 1\n        print(changes)\nmin_changes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972571134567261,
            0.9966769814491272,
            0.9912652373313904,
            0.9882404804229736,
            0.9972142577171326,
            0.9975886940956116,
            0.996826171875,
            0.9955018758773804,
            0.9970368146896362,
            0.9966882467269897,
            0.9974492788314819,
            0.9958378672599792,
            0.9961482882499695,
            0.9974372386932373,
            0.9971561431884766,
            0.9956996440887451,
            0.9973998069763184,
            0.9973526000976562,
            0.9967139363288879,
            0.9974431395530701
        ]
    },
    "2420": {
        "similarity": 0.9955257773399353,
        "body": "    points = [tuple(map(int, input().split())) for _ in range(n)]\n    balls = []\n    for x, y in points:\n        balls.append((abs(x), abs(y)))\n    balls.sort()\n    dp = [0] * (r + 1)\n    for _, y in balls:\n        if y <= r:\n            dp[y] = max(dp[y], dp[y - 1] + 1)\n    print(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913427233695984,
            0.9940999746322632,
            0.9879177808761597,
            0.9953191876411438,
            0.9945025444030762,
            0.9935254454612732,
            0.9955257773399353,
            0.9950900077819824,
            0.9952139854431152,
            0.993496835231781,
            0.9940564036369324,
            0.9945793151855469,
            0.9945850372314453,
            0.9938061237335205,
            0.9947609305381775,
            0.9920783042907715,
            0.9950944781303406,
            0.9929990172386169,
            0.9933313131332397,
            0.9923431277275085
        ]
    },
    "1267": {
        "similarity": 0.9964480400085449,
        "body": "    n = int(input())\n    scores = list(map(int, input().split()))\n    max_score = max(score for score in scores if score > 0)\n    ways = sum(1 for score in scores if score >= max_score)\n    print(max(ways - 1, 1))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942197203636169,
            0.9934949278831482,
            0.9950218200683594,
            0.9964480400085449,
            0.9947357177734375,
            0.9948009848594666,
            0.9933248162269592,
            0.9943825602531433,
            0.994076669216156,
            0.9957329630851746,
            0.9930097460746765,
            0.996006190776825,
            0.9927580952644348,
            0.9956535696983337,
            0.9912810325622559,
            0.9941214323043823,
            0.9936812520027161,
            0.9948284029960632,
            0.9931410551071167,
            0.9944783449172974
        ]
    },
    "2356": {
        "similarity": 0.9935339093208313,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = [0] * n\n        for i in range(n):\n            b[a[i]-1] = i + 1\n        print(*b)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911117553710938,
            0.9901249408721924,
            0.972772479057312,
            0.9821996092796326,
            0.9903906583786011,
            0.991465151309967,
            0.9898905754089355,
            0.991990327835083,
            0.9933854937553406,
            0.9929479360580444,
            0.9889036417007446,
            0.9924867749214172,
            0.9925256371498108,
            0.9935339093208313,
            0.9917299151420593,
            0.9921349287033081,
            0.9889036417007446,
            0.9853445291519165,
            0.9901487231254578,
            0.9860009551048279
        ]
    },
    "108": {
        "similarity": 0.9945791363716125,
        "body": "s = input().strip()\nresult = []\nfor c in 'abcdefghijklmnopqrstuvwxyz':\n    if c not in s:\n        print(-1)\n        exit(0)\n    while len(result) < ord(c) + 1:\n        result.append(s[0])\n        s = s[1:]\nprint(''.join(result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9858797788619995,
            0.9935895800590515,
            0.9943059682846069,
            0.9898992776870728,
            0.9942513704299927,
            0.9891521334648132,
            0.9858797788619995,
            0.9916203022003174,
            0.9858797788619995,
            0.9927430748939514,
            0.9931857585906982,
            0.9945791363716125,
            0.9941504597663879,
            0.9921958446502686,
            0.9902534484863281,
            0.9922011494636536,
            0.9935379028320312,
            0.9935172200202942,
            0.9882696270942688,
            0.9895543456077576
        ]
    },
    "1833": {
        "similarity": 0.9979496002197266,
        "body": "MOD = 10**9 + 7\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i+1):\n            dp[i][j] = dp[i-1][j]\n            if a[i-1] % j == 0:\n                dp[i][j] += dp[i-1][min(j, a[i-1])]\n                dp[i][j] %= MOD\n    print(sum(dp[-1]) - 1)\n\ncount_good_subsequences()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977497458457947,
            0.9956640005111694,
            0.9975398182868958,
            0.9963912963867188,
            0.9978512525558472,
            0.9974313378334045,
            0.9977315664291382,
            0.9963003396987915,
            0.9971204400062561,
            0.9975481629371643,
            0.9972195029258728,
            0.9976826906204224,
            0.9949939250946045,
            0.9965429902076721,
            0.9975182414054871,
            0.9946469664573669,
            0.9975469708442688,
            0.9972927570343018,
            0.9979496002197266,
            0.9976029992103577
        ]
    },
    "2324": {
        "similarity": 0.99545818567276,
        "body": "    s = input()\n    n = len(s)\n    p = [0] * (n + 1)\n    for i in range(1, n + 1):\n        p[i] = p[i - 1]\n        if s[i - 1] == s[-i]:\n            p[i] += 1\n    print(*p[1:n+1])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9892303347587585,
            0.9933714866638184,
            0.992362380027771,
            0.9948552846908569,
            0.9942119121551514,
            0.9941281676292419,
            0.989875078201294,
            0.994602382183075,
            0.9951472282409668,
            0.9936422109603882,
            0.9809899926185608,
            0.9919800162315369,
            0.9899946451187134,
            0.9948268532752991,
            0.9946130514144897,
            0.9949635863304138,
            0.995231032371521,
            0.9940788745880127,
            0.995114803314209,
            0.99545818567276
        ]
    },
    "2372": {
        "similarity": 0.997904360294342,
        "body": "    H, W = map(int, input().split())\n    C_h, C_w = map(int, input().split())\n    D_h, D_w = map(int, input().split())\n    grid = [list(input()) for _ in range(H)]\n    queue = [(C_h - 1, C_w - 1, 0)]\n    visited = {(C_h - 1, C_w - 1): True}\n    while queue:\n        h, w, magic = queue.pop(0)\n        if (h, w) == (D_h - 1, D_w - 1):\n            print(magic)\n            return\n        for dh, dw in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nh, nw = h + dh, w + dw\n            if 0 <= nh < H and 0 <= nw < W and grid[nh][nw] == '.' and not visited.get((nh, nw)):\n                queue.append((nh, nw, magic))\n                visited[(nh, nw)] = True\n        if (h - 2 <= D_h - 1 <= h + 2) and (w - 2 <= D_w - 1 <= w + 2):\n            for dh in range(-2, 3):\n                for dw in range(-2, 3):\n                    nh, nw = h + dh, w + dw\n                    if 0 <= nh < H and 0 <= nw < W and grid[nh][nw] == '.' and not visited.get((nh, nw)):\n                        queue.append((nh, nw, magic + 1))\n                        visited[(nh, nw)] = True\n    print(-1)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973059296607971,
            0.9972769021987915,
            0.9975569844245911,
            0.997904360294342,
            0.9972161054611206,
            0.996997058391571,
            0.9968191385269165,
            0.9976763725280762,
            0.9977079033851624,
            0.9949949979782104,
            0.997819721698761,
            0.996903657913208,
            0.9976455569267273,
            0.9969972372055054,
            0.9939475059509277,
            0.9961624145507812,
            0.9978296160697937,
            0.9975641965866089,
            0.9958451986312866,
            0.9975038766860962
        ]
    },
    "1984": {
        "similarity": 0.9967878460884094,
        "body": "    n, m, k, w = map(int, input().split())\n    levels = [input() for _ in range(k)]\n    dp = [[0] * k for _ in range(1 << k)]\n    prev = [[-1] * k for _ in range(1 << k)]\n\n        return sum(a != b for a, b in zip(levels[x], levels[y]))\n\n    for i in range(1 << k):\n        dp[i][0] = n * m\n        for j in range(k):\n            if (i & (1 << j)) == 0:\n                continue\n            for l in range(j):\n                if ((i & (1 << l)) != 0) and count_diff(l, j) > 0:\n                    curr = dp[i][j] + count_diff(l, j) * w\n                    if curr < dp[i - (1 << j)][l]:\n                        dp[i][j] = curr\n                        prev[i][j] = l\n\n    min_traffic = min(dp[(1 << k) - 1])\n    print(min_traffic)\n    res = []\n    i, state = (1 << k) - 1, (1 << k) - 1\n    while i > 0:\n        j = prev[state][i]\n        if j == -1:\n            break\n        res.append((i + 1, j + 1))\n        state ^= (1 << i)\n        i = j\n    print(*res[::-1])\n\nmin_traffic()",
        "result": "failed: testcase 0",
        "similarities": [
            0.992663562297821,
            0.9961816668510437,
            0.9955117106437683,
            0.9958956837654114,
            0.9955989718437195,
            0.9967594146728516,
            0.9961138367652893,
            0.9949946999549866,
            0.9925820231437683,
            0.9963389039039612,
            0.9962993264198303,
            0.9963692426681519,
            0.9963645935058594,
            0.9955711364746094,
            0.995875895023346,
            0.9941396117210388,
            0.995644748210907,
            0.9967878460884094,
            0.9965488910675049,
            0.9957143068313599
        ]
    },
    "1253": {
        "similarity": 0.9965199828147888,
        "body": "    n, k = map(int, input().split())\n    incomes = list(map(int, input().split()))\n    incomes.sort()\n    for i in range(k):\n        if incomes[i] < 0:\n            incomes[i] *= -1\n    print(sum(incomes))\n\nmax_income()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933183789253235,
            0.9937026500701904,
            0.9963129758834839,
            0.9951158165931702,
            0.9943379759788513,
            0.9923933744430542,
            0.9935289025306702,
            0.9932951927185059,
            0.995035707950592,
            0.9950331449508667,
            0.9929344654083252,
            0.9949874877929688,
            0.9959556460380554,
            0.9933794140815735,
            0.9929385185241699,
            0.9965199828147888,
            0.9960349202156067,
            0.9952722191810608,
            0.9957066774368286,
            0.9949509501457214
        ]
    },
    "523": {
        "similarity": 0.9962148070335388,
        "body": "    n, m = map(int, input().split())\n    strings = [input() for _ in range(n)]\n    left, right = [], []\n    for s in strings:\n        if s[:m//2] == s[m-1:m//2:-1]:\n            left.append(s)\n        else:\n            right.append(s[::-1])\n    left.reverse()\n    result = ''.join(left + ['']*(len(right) - len(left)) + right)\n    print(len(result))\n    if result: print(result)\n\nsolve_palindrome_problem()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950706958770752,
            0.9962148070335388,
            0.9892931580543518,
            0.9956870675086975,
            0.9946532249450684,
            0.9944771528244019,
            0.9950141906738281,
            0.9904435873031616,
            0.9919094443321228,
            0.9941099882125854,
            0.9948780536651611,
            0.9938360452651978,
            0.9920790791511536,
            0.9940974712371826,
            0.9940270185470581,
            0.9949789643287659,
            0.9931175112724304,
            0.9929458498954773,
            0.9923434853553772,
            0.9924976825714111
        ]
    },
    "2934": {
        "similarity": 0.9971272349357605,
        "body": "    N = int(input())\n    M = int(input())\n    MOD = 10**9\n    dp = [[0, 0] for _ in range(M + 1)]\n    dp[0][0] = 1\n    for i in range(1, min(N+1, M//2)+1):\n        if i == N:\n            dp[i*2][1] = (dp[i*2-2][0] + dp[i*2-2][1]) % MOD\n        else:\n            dp[i*2][0] = (dp[i*2-2][0] + dp[i*2-2][1]) % MOD\n    return str((dp[M][0] + dp[M][1]) % MOD)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963077902793884,
            0.9971272349357605,
            0.9966415762901306,
            0.9941193461418152,
            0.9939799308776855,
            0.9947617053985596,
            0.996913492679596,
            0.9935907125473022,
            0.996349036693573,
            0.9962828755378723,
            0.9962960481643677,
            0.9961720705032349,
            0.9904348254203796,
            0.9944170117378235,
            0.9966723918914795,
            0.9954800009727478,
            0.9960451722145081,
            0.9963126182556152,
            0.9960680603981018,
            0.9963740110397339
        ]
    },
    "1745": {
        "similarity": 0.9959785342216492,
        "body": "    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    ways = 0\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        nonlocal ways\n        if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == '#':\n            return False\n        if x in [0, n-1] and y in [0, m-1]:\n            ways += 1\n            return True\n        for dx, dy in directions:\n            if direction != (dx, dy) or (direction == (dx, dy) and grid[x+dx][y+dy] != '.'):\n                continue\n            grid[x][y] = '*'\n            dfs(x+dx, y+dy, (dx, dy))\n            grid[x][y] = '.'\n        return False\n    for i in range(1, n-1):\n        if grid[i][0] == '.':\n            dfs(i, 0, None)\n        if grid[i][m-1] == '.':\n            dfs(i, m-1, None)\n    print(ways)\n\ncount_pipes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946303367614746,
            0.9947680234909058,
            0.9942155480384827,
            0.9946455955505371,
            0.9906017780303955,
            0.9955015778541565,
            0.9946831464767456,
            0.9934391379356384,
            0.9920060038566589,
            0.9953856468200684,
            0.9949091672897339,
            0.9942982196807861,
            0.9948334097862244,
            0.9940676689147949,
            0.9943022727966309,
            0.9959785342216492,
            0.992856502532959,
            0.9854175448417664,
            0.9952213168144226,
            0.9948592185974121
        ]
    },
    "1422": {
        "similarity": 0.9966432452201843,
        "body": "    weights = list(map(int, input().strip()))\n    m = int(input())\n    if sum(weights[i] for i in range(m)) == 0 or any(weights[i] == weights[i-1] for i in range(2, m+1)):\n        print('NO')\n        return\n    print('YES')\n    prev_weight = -1\n    result = []\n    for i in range(1, m+1):\n        if not weights[prev_weight]:\n            prev_weight = (prev_weight + 1) % len(weights)\n        while weights[prev_weight] == 0:\n            prev_weight = (prev_weight + 1) % len(weights)\n        result.append(prev_weight+1)\n        weights[prev_weight] -= 1\n    print(' '.join(map(str, result)))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956783652305603,
            0.9946475625038147,
            0.9957147240638733,
            0.9950926899909973,
            0.9877468943595886,
            0.9961715340614319,
            0.993692934513092,
            0.9935619831085205,
            0.996376633644104,
            0.9938791394233704,
            0.9939131736755371,
            0.9949170351028442,
            0.9958802461624146,
            0.9954850077629089,
            0.9961126446723938,
            0.9937784075737,
            0.9957744479179382,
            0.9951663017272949,
            0.9936826825141907,
            0.9966432452201843
        ]
    },
    "1763": {
        "similarity": 0.996087908744812,
        "body": "N, A, R, M = map(int, input().split())\nheights = list(map(int, input().split()))\nmax_height = max(heights)\ntotal_cost = 0\nfor h in heights:\n    if h < max_height:\n        total_cost += (max_height - h) * A\n    elif h > max_height:\n        total_cost += min(h - max_height, R + M) * M\nprint(total_cost)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9903512597084045,
            0.9953643679618835,
            0.9940480589866638,
            0.9954453706741333,
            0.9953692555427551,
            0.9953325986862183,
            0.9950206279754639,
            0.9902592897415161,
            0.993294358253479,
            0.9939910769462585,
            0.9949128031730652,
            0.9937433004379272,
            0.9949519634246826,
            0.9955775737762451,
            0.9920771718025208,
            0.996087908744812,
            0.9951412081718445,
            0.9945685863494873,
            0.9949265718460083,
            0.9958409667015076
        ]
    },
    "974": {
        "similarity": 0.9974849224090576,
        "body": "n = int(input())\nops = [input().split() for _ in range(2*n)]\nstack, i, reorders = [], 0, 0\nfor op, x in ops:\n    if op == 'add':\n        stack.append(int(x))\n    else:\n        while stack and stack[-1] != i+1:\n            stack.pop()\n            reorders += 1\n        stack.pop()\n        i += 1\nprint(reorders)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997053325176239,
            0.9968452453613281,
            0.9937548637390137,
            0.9966842532157898,
            0.996898353099823,
            0.9960386157035828,
            0.9949674010276794,
            0.9974849224090576,
            0.996704638004303,
            0.9959901571273804,
            0.9972118735313416,
            0.995358943939209,
            0.9963043928146362,
            0.9969679117202759,
            0.9959248304367065,
            0.9969226717948914,
            0.9963117837905884,
            0.9973663687705994,
            0.9971791505813599,
            0.9965289235115051
        ]
    },
    "2343": {
        "similarity": 0.9955237507820129,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        size = 2 ** n\n        if k % size == 0:\n            print(\"YES\", k // size)\n        else:\n            print(\"NO\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952699542045593,
            0.994511067867279,
            0.9934585094451904,
            0.995520830154419,
            0.9955237507820129,
            0.9953176379203796,
            0.9925023317337036,
            0.9934526085853577,
            0.9951133728027344,
            0.9943102598190308,
            0.9853129982948303,
            0.9885529279708862,
            0.9840007424354553,
            0.9940400719642639,
            0.9926599264144897,
            0.9942845702171326,
            0.9949716329574585,
            0.9926968812942505,
            0.9937683939933777,
            0.9947965741157532
        ]
    },
    "627": {
        "similarity": 0.9946656823158264,
        "body": "    n = int(input())\n    s = input()\n    for i in range(n):\n        if i > 0 and s[i-1] < s[i]:\n            return s[:i]\n    return s[:-1]\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9888556599617004,
            0.9912117719650269,
            0.9916192293167114,
            0.994256854057312,
            0.9940609335899353,
            0.9892598390579224,
            0.9909818768501282,
            0.9937707185745239,
            0.9904806017875671,
            0.9945032000541687,
            0.9939783215522766,
            0.9905092120170593,
            0.9946218729019165,
            0.9946656823158264,
            0.9795506000518799,
            0.9942399263381958,
            0.9946118593215942,
            0.9919897317886353,
            0.9918137788772583,
            0.9774881601333618
        ]
    },
    "1655": {
        "similarity": 0.9977231621742249,
        "body": "n = int(input())\nL = list(map(int, input().split()))\nalive = n\nfor i in range(n):\n    alive -= max(0, min(i - L[i], alive))\nprint(alive)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925662875175476,
            0.9969291687011719,
            0.9967103600502014,
            0.9947700500488281,
            0.9971787333488464,
            0.9971598386764526,
            0.9964788556098938,
            0.9960052371025085,
            0.996383547782898,
            0.996293306350708,
            0.9967164397239685,
            0.9970748424530029,
            0.9974750876426697,
            0.9971471428871155,
            0.99728924036026,
            0.9971471428871155,
            0.9971681237220764,
            0.9967645406723022,
            0.9972813129425049,
            0.9977231621742249
        ]
    },
    "2124": {
        "similarity": 0.995047926902771,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        usernames = set(input().split())\n        m = int(input())\n\n        prev_username = None\n        messages = []\n        impossible = False\n        for i in range(m):\n            message = input()\n            if message.startswith('?'):\n                user_mentioned = any(user in message[2:] for user in usernames)\n                if user_mentioned:\n                    impossible = True\n                    break\n                else:\n                    username = next((u for u in usernames if u not in messages), None)\n                    if username is None or username == prev_username:\n                        impossible = True\n                        break\n                    prev_username = username\n            messages.append(f\"{message[:2]}:{message[3:]}\")\n\n        print('\\n'.join(messages) if not impossible else 'Impossible')\n\nrecover_senders()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935632348060608,
            0.9945626854896545,
            0.9950436949729919,
            0.993122935295105,
            0.9944230318069458,
            0.9943882822990417,
            0.9942478537559509,
            0.9948234558105469,
            0.995047926902771,
            0.9945483803749084,
            0.9932953715324402,
            0.9941087961196899,
            0.9926822185516357,
            0.9949798583984375,
            0.9517722129821777,
            0.9946616291999817,
            0.9933409690856934,
            0.9932714104652405,
            0.9940386414527893,
            0.9938398599624634
        ]
    },
    "1093": {
        "similarity": 0.9971012473106384,
        "body": "    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    heights = [0] * m\n    max_up = max_down = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                heights[j] = i + 1\n    for i in range(1, m):\n        up = heights[i - 1]\n        down = heights[i]\n        max_up = max(max_up, down - up)\n        max_down = max(max_down, up - down)\n    print(max_up, max_down)\n\nfind_max_up_and_down()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993204653263092,
            0.9963422417640686,
            0.9965186715126038,
            0.9960934519767761,
            0.9958886504173279,
            0.996917724609375,
            0.994531512260437,
            0.9883695840835571,
            0.9965380430221558,
            0.9962948560714722,
            0.9964659810066223,
            0.9949214458465576,
            0.9966045022010803,
            0.9971012473106384,
            0.9952379465103149,
            0.9920814037322998,
            0.996884286403656,
            0.9966393709182739,
            0.9946812987327576,
            0.9949817657470703
        ]
    },
    "899": {
        "similarity": 0.9969636797904968,
        "body": "import sys\n\n    n, m = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    weights = []\n\n    for _ in range(m):\n        a, b, c = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n        weights.append(c)\n\n    visited = [False] * (n + 1)\n    non_shortest_edges = set()\n\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor] and neighbor != parent:\n                dfs(neighbor, node, max(weight, weights[graph[node].index(neighbor)]))\n            elif neighbor != parent and weight < weights[graph[node].index(neighbor)]:\n                non_shortest_edges.add((node, neighbor))\n\n    dfs(1, None, 0)\n\n    print(len(non_shortest_edges))\n\nfind_non_shortest_edges()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996537446975708,
            0.9954635500907898,
            0.9963973164558411,
            0.9968392252922058,
            0.996425211429596,
            0.9948724508285522,
            0.9952677488327026,
            0.9968599081039429,
            0.9952003359794617,
            0.9957156777381897,
            0.9956727623939514,
            0.9949945211410522,
            0.9947600364685059,
            0.9969636797904968,
            0.9968370199203491,
            0.9965043663978577,
            0.9952914714813232,
            0.9968546628952026,
            0.9940785765647888,
            0.9964464902877808
        ]
    },
    "551": {
        "similarity": 0.9955995678901672,
        "body": "    n = int(input())\n    y_coords = list(map(int, input().split()))\n    if len(set(y_coords)) == 1:\n        return \"No\"\n    y_coords.sort()\n    for i in range(n - 2):\n        if y_coords[i] + 2 * (i + 1) <= y_coords[n - 1]:\n            return \"Yes\"\n    return \"No\"\n\nprint(can_place_rods())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951376914978027,
            0.9955058693885803,
            0.9951774477958679,
            0.9903885722160339,
            0.9953289031982422,
            0.9952900409698486,
            0.9951459169387817,
            0.9950557351112366,
            0.9902857542037964,
            0.9946058392524719,
            0.9951736330986023,
            0.9893149137496948,
            0.9950869679450989,
            0.9955995678901672,
            0.9946265816688538,
            0.9932367205619812,
            0.9948708415031433,
            0.9926803112030029,
            0.9898247122764587,
            0.9928340911865234
        ]
    },
    "1772": {
        "similarity": 0.9940071105957031,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    even, odd = 0, 0\n    for x in a:\n        if x % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return min(even, odd)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940071105957031,
            0.9896389842033386,
            0.9911128878593445,
            0.9935221672058105,
            0.9933860301971436,
            0.9938414692878723,
            0.9849200248718262,
            0.9884922504425049,
            0.9926223754882812,
            0.9886213541030884,
            0.9923047423362732,
            0.9888301491737366,
            0.9881943464279175,
            0.9931240081787109,
            0.9930606484413147,
            0.994001567363739,
            0.9925014972686768,
            0.9890074729919434,
            0.9919065237045288,
            0.9937359690666199
        ]
    },
    "1339": {
        "similarity": 0.9963821768760681,
        "body": "n = int(input())\nsegments = [tuple(map(int, input().split())) for _ in range(n)]\nfor i, seg in enumerate(segments):\n    if all(seg[0] <= s[0] and s[1] <= seg[1] for s in segments if s != seg):\n        print(i + 1)\n        break\nelse:\n    print(-1)",
        "result": "passed",
        "similarities": [
            0.9955926537513733,
            0.9944009184837341,
            0.9951890707015991,
            0.9938804507255554,
            0.9963821768760681,
            0.995197594165802,
            0.9956337809562683,
            0.996349036693573,
            0.991965651512146,
            0.9952446818351746,
            0.9963821768760681,
            0.9937940835952759,
            0.9955878257751465,
            0.9897453188896179,
            0.9942625164985657,
            0.9959524273872375,
            0.9954000115394592,
            0.9958975911140442,
            0.9943104982376099,
            0.9948952198028564
        ]
    },
    "440": {
        "similarity": 0.9949173331260681,
        "body": "s = input()\nwhile 'a' in s or 'e' in s or 'i' in s or 'o' in s or 'u' in s or 'y' in s:\n    i = 0\n    while i < len(s) - 1:\n        if s[i] in 'aeiouy' and s[i + 1] in 'aeiouy':\n            break\n        i += 1\n    else:\n        break\n    s = s[:i] + s[i+2:]\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940325021743774,
            0.9890833497047424,
            0.9924037456512451,
            0.9937244057655334,
            0.9944542646408081,
            0.9938861727714539,
            0.9940388202667236,
            0.9944214224815369,
            0.9931941628456116,
            0.9949173331260681,
            0.9945135712623596,
            0.9945665001869202,
            0.9904487133026123,
            0.9904871582984924,
            0.994645893573761,
            0.9877226948738098,
            0.9942787885665894,
            0.9934014081954956,
            0.9874780774116516,
            0.9934909343719482
        ]
    },
    "2801": {
        "similarity": 0.9976627826690674,
        "body": "import sys\nfrom collections import deque\n\n    n, m = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, sys.stdin.readline().split())\n        graph[s].append(t)\n\n        max_sat = 0\n        for child in graph[node]:\n            if child != parent:\n                sat = dfs(child, node, depth + 1)\n                max_sat = max(max_sat, sat)\n        if depth > 0:\n            max_sat += c[node] / (2 ** (depth - 1))\n        return max_sat\n\n    return dfs(0, None, 1)\n\nprint(max_satisfaction())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973574280738831,
            0.9972825646400452,
            0.997282862663269,
            0.9971566796302795,
            0.9962822794914246,
            0.9974830150604248,
            0.9973219037055969,
            0.9963619709014893,
            0.9965139031410217,
            0.9975864291191101,
            0.9952346682548523,
            0.996898353099823,
            0.99725341796875,
            0.9976627826690674,
            0.9960278868675232,
            0.9974313974380493,
            0.9965288043022156,
            0.997137188911438,
            0.9970666170120239,
            0.9969783425331116
        ]
    },
    "2749": {
        "similarity": 0.9963539838790894,
        "body": "H, W = map(int, input().split())\nN = int(input())\na = list(map(int, input().split()))\n\ngrid = [[0] * W for _ in range(H)]\ncolor = 1\n\nfor i in range(N):\n    for j in range(a[i]):\n        if color > N:\n            break\n        for k in range(H):\n            for l in range(W):\n                if grid[k][l] == 0 and (k > 0 and grid[k-1][l] == color or k < H-1 and grid[k+1][l] == color or l > 0 and grid[k][l-1] == color or l < W-1 and grid[k][l+1] == color):\n                    grid[k][l] = color\n        color += 1\n\nfor row in grid:\n    print(' '.join(map(str, row)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947411417961121,
            0.9945065379142761,
            0.9946736693382263,
            0.9958506226539612,
            0.9957128763198853,
            0.9951085448265076,
            0.9958215355873108,
            0.9945926666259766,
            0.9942980408668518,
            0.9958410859107971,
            0.9922270774841309,
            0.9952846169471741,
            0.9940169453620911,
            0.9939431548118591,
            0.9922888875007629,
            0.9955988526344299,
            0.9954838156700134,
            0.9934521913528442,
            0.9963539838790894,
            0.9951541423797607
        ]
    },
    "2319": {
        "similarity": 0.9960371255874634,
        "body": "    if s == t:\n        return 0\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == t:\n            return 1\n    return -1\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    print(min_rotations(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995361328125,
            0.9951907992362976,
            0.9946313500404358,
            0.9950932860374451,
            0.9954308867454529,
            0.9839760661125183,
            0.9957038760185242,
            0.9944965839385986,
            0.9954757690429688,
            0.9947807192802429,
            0.9894894957542419,
            0.9960371255874634,
            0.9885513186454773,
            0.9940727949142456,
            0.9955008625984192,
            0.9951790571212769,
            0.9914572834968567,
            0.9930320382118225,
            0.994907557964325,
            0.9937246441841125
        ]
    },
    "2121": {
        "similarity": 0.997556209564209,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n        if depth >= k:\n            return float('inf')\n        min_a = min(a[node], dfs(neighbor, node) for neighbor in adj[node] if neighbor != parent)\n        return min_a\n\n    ans = min(dfs(i, None) for i in range(n))\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969002604484558,
            0.9973175525665283,
            0.997556209564209,
            0.9965665936470032,
            0.995876133441925,
            0.9967372417449951,
            0.9957793354988098,
            0.9970996379852295,
            0.9951520562171936,
            0.9970009326934814,
            0.9964587688446045,
            0.9962246417999268,
            0.9961616396903992,
            0.9941444396972656,
            0.9968597292900085,
            0.994608461856842,
            0.9971789121627808,
            0.9958826303482056,
            0.9968543648719788,
            0.9973880648612976
        ]
    },
    "2617": {
        "similarity": 0.9983553886413574,
        "body": "    n = int(input())\n    if n < 3:\n        print(-1)\n        return\n    d = 0\n    splits = []\n    while n > 1:\n        if n % 2 == 1:\n            splits.append(1)\n            n -= 1\n        else:\n            splits.append(2)\n            n /= 2\n        d += 1\n    print(d)\n    print(*splits)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975329041481018,
            0.9958361387252808,
            0.9977036714553833,
            0.9970842003822327,
            0.9977485537528992,
            0.997888445854187,
            0.9976259469985962,
            0.998052179813385,
            0.9961258769035339,
            0.9974152445793152,
            0.9920085072517395,
            0.998256266117096,
            0.9977734088897705,
            0.9983553886413574,
            0.9972227215766907,
            0.9983167052268982,
            0.9976128339767456,
            0.9981702566146851,
            0.9972308278083801,
            0.9978681802749634
        ]
    },
    "175": {
        "similarity": 0.9967391490936279,
        "body": "a, b = map(int, input().split())\n\nwhile True:\n    if a == 0 or b == 0:\n        break\n    elif a >= 2 * b:\n        a -= 2 * b\n    elif b >= 2 * a:\n        b -= 2 * a\n\nprint(a, b)",
        "result": "timed out",
        "similarities": [
            0.9956139922142029,
            0.9941008687019348,
            0.9961788654327393,
            0.9946469664573669,
            0.9956139922142029,
            0.9956139922142029,
            0.9945467114448547,
            0.9967391490936279,
            0.9918128848075867,
            0.9918128848075867,
            0.9929128289222717,
            0.996534526348114,
            0.9961788654327393,
            0.9949231743812561,
            0.9956139922142029,
            0.9956139922142029,
            0.9940012097358704,
            0.9952916502952576,
            0.9963313937187195,
            0.9949663877487183
        ]
    },
    "995": {
        "similarity": 0.9959403872489929,
        "body": "    n = int(input())\n    A = list(map(int, input().split()))\n    groups = [0] * n\n    for i in range(n):\n        g = 1\n        for j in range(i, n):\n            if all(A[j-k]**2 % A[k] == 0 for k in range(j-i+1)):\n                groups[i] += 1\n            else:\n                break\n            g *= A[j]\n    print(*groups)\n\ncount_subarrays()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932208061218262,
            0.9908236265182495,
            0.9959403872489929,
            0.9930459856987,
            0.9880535006523132,
            0.9943231344223022,
            0.9953802227973938,
            0.9940431714057922,
            0.9956952333450317,
            0.9946091175079346,
            0.9957715272903442,
            0.9919731020927429,
            0.9955761432647705,
            0.9895190000534058,
            0.9933687448501587,
            0.993331789970398,
            0.9948909282684326,
            0.9900960326194763,
            0.9958921074867249,
            0.991279125213623
        ]
    },
    "582": {
        "similarity": 0.9957038760185242,
        "body": "n = int(input())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nmin_time = 0\nfor i in range(n):\n    if a.count(a[i]) > 1:\n        for j in range(i+1, n):\n            if a[j] != a[i]:\n                min_time += t[j]\n                break\n\nprint(min_time)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950023293495178,
            0.9949979186058044,
            0.9954301118850708,
            0.990531325340271,
            0.9923729300498962,
            0.989652156829834,
            0.9931040406227112,
            0.9913924336433411,
            0.9926362633705139,
            0.9914663434028625,
            0.9906184673309326,
            0.993788480758667,
            0.9920297861099243,
            0.9957038760185242,
            0.9935622215270996,
            0.991198718547821,
            0.9940111041069031,
            0.9943887591362,
            0.9942479729652405,
            0.9904931783676147
        ]
    },
    "1402": {
        "similarity": 0.996242344379425,
        "body": "    mod = int(1e9 + 7)\n    n = int(input())\n    s = input()\n    w = input()\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[i-1] != '?' and w[j] != '?':\n                continue\n            if s[i-1] == '?' and w[j] != '?':\n                dp[i][j] = (dp[i][j] + dp[i-1][j]) % mod\n            elif w[j] == '?' and s[i-1] != '?':\n                dp[i][j] = (dp[i][j] + dp[i][j-1]) % mod\n            elif ord(s[i-1]) > ord(w[j]):\n                dp[i][j] = (dp[i][j] + dp[i-1][j-1]) % mod\n    print(sum(dp[n]) % mod)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959301352500916,
            0.9942507743835449,
            0.9958969950675964,
            0.995672345161438,
            0.9957578778266907,
            0.9948939085006714,
            0.9959707856178284,
            0.9961524605751038,
            0.9955862760543823,
            0.9954499006271362,
            0.9950959086418152,
            0.9951327443122864,
            0.993983805179596,
            0.9934702515602112,
            0.996242344379425,
            0.9947488903999329,
            0.9943413138389587,
            0.9940371513366699,
            0.994616687297821,
            0.994706928730011
        ]
    },
    "1141": {
        "similarity": 0.9968597292900085,
        "body": "s = input()\nm = int(input())\nfor _ in range(m):\n    l, r, c1, c2 = map(str, input().split())\n    l, r = map(int, [l, r])\n    s = s[:l-1] + c2 * (r - l + 1) + s[r:]\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953376650810242,
            0.9958139061927795,
            0.9962099194526672,
            0.9960675835609436,
            0.9960095286369324,
            0.9948827028274536,
            0.9954381585121155,
            0.9961025714874268,
            0.9924127459526062,
            0.9959141612052917,
            0.9949765801429749,
            0.9955781698226929,
            0.9941306114196777,
            0.9962445497512817,
            0.995509922504425,
            0.9960446953773499,
            0.9968597292900085,
            0.9963660836219788,
            0.9948694109916687,
            0.995601236820221
        ]
    },
    "2836": {
        "similarity": 0.9950756430625916,
        "body": "    n = int(input())\n    boys = list(map(int, input().split()))\n    a, b = map(int, input().split())\n\n        return min([abs(x - boy) for boy in boys])\n\n    girl_names = [i for i in range(a, b + 1) if i % 2 != 0]\n    max_dist = max(max_distance(girl_name) for girl_name in girl_names)\n\n    print(next(i for i in girl_names if max_distance(i) == max_dist))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909326434135437,
            0.9930179119110107,
            0.9937309622764587,
            0.9928345084190369,
            0.9940499067306519,
            0.9917963147163391,
            0.9938032031059265,
            0.9927821159362793,
            0.9846920371055603,
            0.9913972616195679,
            0.9950756430625916,
            0.994974672794342,
            0.9930849671363831,
            0.9928897023200989,
            0.9920894503593445,
            0.9935861229896545,
            0.9921095967292786,
            0.9925569295883179,
            0.9944493174552917,
            0.9912388324737549
        ]
    },
    "1109": {
        "similarity": 0.9968550801277161,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    period = [0] * k\n    for i in range(n):\n        period[a[i]-1] += 1\n    changes = sum(period) - min(period)\n    print(changes)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966241121292114,
            0.9951866865158081,
            0.9950376749038696,
            0.9966191649436951,
            0.9960052371025085,
            0.9968405365943909,
            0.995164155960083,
            0.996307373046875,
            0.994931161403656,
            0.9947845339775085,
            0.9965944886207581,
            0.9953938722610474,
            0.9968550801277161,
            0.9955586791038513,
            0.9955102801322937,
            0.9954518675804138,
            0.9963662028312683,
            0.9943124651908875,
            0.9964278340339661,
            0.996235191822052
        ]
    },
    "2125": {
        "similarity": 0.9969061017036438,
        "body": "    n, m = map(int, input().split())\n    blanket = [list(input()) for _ in range(n)]\n    flags = 0\n    for i in range(1, n - 1):\n        for j in range(m):\n            if (blanket[i][j] != blanket[i-1][j]) and (blanket[i][j] != blanket[i+1][j]):\n                flags += m - j + 1\n    print(flags)\n\ncount_flags()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959622621536255,
            0.9951978921890259,
            0.9941529035568237,
            0.994720995426178,
            0.9955146312713623,
            0.9957795739173889,
            0.9959741234779358,
            0.9944393634796143,
            0.99528968334198,
            0.9968053698539734,
            0.9969061017036438,
            0.9964916110038757,
            0.9954866170883179,
            0.9957143664360046,
            0.9967158436775208,
            0.995574951171875,
            0.9964646100997925,
            0.995927095413208,
            0.9968456625938416,
            0.9943321943283081
        ]
    },
    "1746": {
        "similarity": 0.996799886226654,
        "body": "    n = int(input())\n    parents = [0] * n\n    for i in range(n - 1):\n        p = int(input()) - 1\n        parents[i + 1] = p\n\n    children_count = [0] * n\n    for i, p in enumerate(parents[1:], start=1):\n        children_count[p] += 1\n\n        leaf_count = 0\n        for c in range(n):\n            if parents[c] == v:\n                leaf_count += dfs(c)\n        return leaf_count + (children_count[v] > 0)\n\n    print(\"Yes\" if dfs(0) >= 3 else \"No\")\n\ncheck_spruce()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934279918670654,
            0.9953767657279968,
            0.9965537190437317,
            0.9952936768531799,
            0.9928693175315857,
            0.9946516156196594,
            0.9954025745391846,
            0.9967984557151794,
            0.9933336973190308,
            0.9963616132736206,
            0.9966665506362915,
            0.9956079125404358,
            0.9924458861351013,
            0.9958752393722534,
            0.9962907433509827,
            0.9962433576583862,
            0.9957078695297241,
            0.9963483214378357,
            0.9955456256866455,
            0.996799886226654
        ]
    },
    "1294": {
        "similarity": 0.996528148651123,
        "body": "t = int(input())\nfor _ in range(t):\n    s = input()\n    res = set(s[0])\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            res.discard(s[i])\n    print(''.join(sorted(res)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957753419876099,
            0.9939748048782349,
            0.9962794780731201,
            0.9924169182777405,
            0.9954904317855835,
            0.9956450462341309,
            0.9939309358596802,
            0.996324360370636,
            0.9959377646446228,
            0.9955334067344666,
            0.9945321679115295,
            0.9954729676246643,
            0.9922762513160706,
            0.9963568449020386,
            0.9872459769248962,
            0.9951330423355103,
            0.9953472018241882,
            0.9947733879089355,
            0.996528148651123,
            0.9954553842544556
        ]
    },
    "1159": {
        "similarity": 0.9949946999549866,
        "body": "    n = int(input())\n    if n % 2 == 0 or n < 3:\n        print(-1)\n        return\n    m = prime(n * (n - 1) // 2)\n    edges = []\n    for i in range(1, n + 1):\n        j = i + 1\n        while j <= n and len(edges) < m:\n            edges.append((i, j))\n            if len(set(e[0] for e in edges)) == len(edges):\n                break\n            else:\n                j += 2\n    print(m)\n    for edge in edges:\n        print(*edge)\n\nbob_graph()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919125437736511,
            0.9949946999549866,
            0.9906488060951233,
            0.9930289387702942,
            0.9941014647483826,
            0.994346022605896,
            0.9913385510444641,
            0.9938423037528992,
            0.9942837953567505,
            0.9948121905326843,
            0.9928044676780701,
            0.9946117401123047,
            0.991754412651062,
            0.9933191537857056,
            0.9827681183815002,
            0.9908162951469421,
            0.9934508800506592,
            0.9928916096687317,
            0.9828706383705139,
            0.9941721558570862
        ]
    },
    "2025": {
        "similarity": 0.9941243529319763,
        "body": "    for _ in range(int(input())):\n        n = int(input())\n        c = 0\n        while n % 2 == 0:\n            c += 1\n            n //= 2\n        if n != 1 or c <= 1:\n            print(-1)\n        else:\n            print(c)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927350878715515,
            0.9919784069061279,
            0.9896800518035889,
            0.9941095113754272,
            0.9925892353057861,
            0.9907263517379761,
            0.9885850548744202,
            0.9911925792694092,
            0.9922124147415161,
            0.9922982454299927,
            0.9882391095161438,
            0.9936554431915283,
            0.9926708936691284,
            0.9936262369155884,
            0.9852223992347717,
            0.976409912109375,
            0.993425190448761,
            0.9922080636024475,
            0.9941243529319763,
            0.9936413168907166
        ]
    },
    "1429": {
        "similarity": 0.99590665102005,
        "body": "    N, S = map(str, input().split())\n    N = int(N)\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            T = S[i-1:j]\n            if sorted(T) == sorted(T.replace('A', 'T').replace('C', 'G')):\n                count += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.99590665102005,
            0.994057297706604,
            0.9945092797279358,
            0.9947757720947266,
            0.9949174523353577,
            0.9950457215309143,
            0.9931207299232483,
            0.9889963269233704,
            0.9950413107872009,
            0.994662344455719,
            0.995376467704773,
            0.9950985312461853,
            0.9958102703094482,
            0.991633951663971,
            0.9946849346160889,
            0.987995982170105,
            0.9945288300514221,
            0.9940295815467834,
            0.9741162657737732,
            0.9955784678459167
        ]
    },
    "1950": {
        "similarity": 0.9934627413749695,
        "body": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * n\nfor i in range(n):\n    if a[i] > 1:\n        dp[i] = min(2 * a[i], a[i - 1] + a[i]) if i > 0 else a[i]\nfor i in range(n - 1, 0, -1):\n    if dp[i] < a[i]:\n        dp[i - 1] += dp[i]\nprint(sum(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917235374450684,
            0.9868848919868469,
            0.9915295839309692,
            0.9868326783180237,
            0.9931281208992004,
            0.9889149069786072,
            0.9912105202674866,
            0.9868093729019165,
            0.9911962151527405,
            0.9921886920928955,
            0.9931891560554504,
            0.9929536581039429,
            0.9845029711723328,
            0.992710530757904,
            0.9924308657646179,
            0.9858889579772949,
            0.9934627413749695,
            0.9871810078620911,
            0.9931111931800842,
            0.9919844269752502
        ]
    },
    "631": {
        "similarity": 0.9969077110290527,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a[i] / (i + 1) for i in range(n))\n    if abs(s - m) < 1e-9:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943042397499084,
            0.9969008564949036,
            0.9940093159675598,
            0.9968276619911194,
            0.9962586164474487,
            0.9908985495567322,
            0.9956415295600891,
            0.9930858612060547,
            0.9969077110290527,
            0.99554842710495,
            0.995987057685852,
            0.996823787689209,
            0.9956915974617004,
            0.9947216510772705,
            0.9964734315872192,
            0.994906485080719,
            0.9954378008842468,
            0.9945468902587891,
            0.9951177835464478,
            0.9950162172317505
        ]
    },
    "2480": {
        "similarity": 0.9964944124221802,
        "body": "    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = [0] * K\n    prefix_sum = 0\n    prefix_count = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum += A[i]\n        remainder = prefix_sum % K\n        if remainder == i + 1:\n            prefix_count[i + 1] = prefix_count[i] + 1\n        else:\n            prefix_count[i + 1] = prefix_count[i]\n    print(prefix_count[-1])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955458641052246,
            0.9960319399833679,
            0.9958887696266174,
            0.9953956604003906,
            0.9922722578048706,
            0.9957018494606018,
            0.9955567121505737,
            0.995544970035553,
            0.9876255393028259,
            0.9941717386245728,
            0.996198832988739,
            0.992313802242279,
            0.9958747029304504,
            0.9960363507270813,
            0.9952889680862427,
            0.9937069416046143,
            0.9964338541030884,
            0.9956794381141663,
            0.9950844645500183,
            0.9964944124221802
        ]
    },
    "2363": {
        "similarity": 0.9935804009437561,
        "body": "    n = int(input())\n    for _ in range(n):\n        a, b = map(int, input().split())\n        if a > b:\n            print(a - b)\n        else:\n            print(b - a)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935804009437561,
            0.9901379942893982,
            0.9908162355422974,
            0.9902780652046204,
            0.9932618737220764,
            0.9929015636444092,
            0.9930575489997864,
            0.9915225505828857,
            0.9848514199256897,
            0.989826500415802,
            0.9899144768714905,
            0.9907684326171875,
            0.9853798747062683,
            0.9865396618843079,
            0.9910801649093628,
            0.9905610680580139,
            0.9928215742111206,
            0.989826500415802,
            0.9911535382270813,
            0.9935402274131775
        ]
    },
    "909": {
        "similarity": 0.9968284964561462,
        "body": "a = int(input())\nb = int(input())\nc = int(input())\nprint(max(a*(b+c), a+b*c, (a+b)*c))",
        "result": "failed: testcase 1",
        "similarities": [
            0.9968284964561462,
            0.9957726001739502,
            0.9962314963340759,
            0.9949361085891724,
            0.996640682220459,
            0.9939117431640625,
            0.9963308572769165,
            0.9962821006774902,
            0.9957842826843262,
            0.9951956868171692,
            0.9966951012611389,
            0.9959068298339844,
            0.9958767294883728,
            0.99483722448349,
            0.9950166940689087,
            0.995299220085144,
            0.9961449503898621,
            0.9936290383338928,
            0.9965590238571167,
            0.9936138987541199
        ]
    },
    "154": {
        "similarity": 0.9960309863090515,
        "body": "    mod = 998244353\n    if n % 2 == 1: return 0\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 2\n    for i in range(2, n + 1):\n        dp[i] = ((dp[i - 1] << 1) + dp[i // 2]) % mod\n    return dp[n]\n\nn = int(input())\nprint(count_trees(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946965575218201,
            0.9950068593025208,
            0.9909647703170776,
            0.9946717023849487,
            0.9959356188774109,
            0.9920995831489563,
            0.9933730959892273,
            0.9938075542449951,
            0.9919867515563965,
            0.9953553080558777,
            0.9954065084457397,
            0.9918264150619507,
            0.9947559833526611,
            0.9960309863090515,
            0.9951531291007996,
            0.9901140928268433,
            0.9944810271263123,
            0.994143545627594,
            0.9951842427253723,
            0.9908086061477661
        ]
    },
    "39": {
        "similarity": 0.9980705976486206,
        "body": "    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1] != s[i:j+1][::-1]:\n                max_len = max(max_len, j-i+1)\n    return max_len\n\ns = input()\nprint(longest_non_palindrome(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976762533187866,
            0.9966597557067871,
            0.9968006610870361,
            0.9972912669181824,
            0.9968348145484924,
            0.9979272484779358,
            0.997156023979187,
            0.9976601004600525,
            0.9963632822036743,
            0.9973279237747192,
            0.997094988822937,
            0.9973885416984558,
            0.9972073435783386,
            0.9956231713294983,
            0.9972162842750549,
            0.9980705976486206,
            0.9964427947998047,
            0.9955047965049744,
            0.9966631531715393,
            0.9950951933860779
        ]
    },
    "1885": {
        "similarity": 0.9942695498466492,
        "body": "    n = int(input())\n    return sum(comb(n, i) for i in range(5, 8))\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942695498466492,
            0.9895025491714478,
            0.9896491169929504,
            0.9860947132110596,
            0.9938860535621643,
            0.9938172698020935,
            0.9934249520301819,
            0.9883061647415161,
            0.9925084710121155,
            0.9935103058815002,
            0.9909886717796326,
            0.993181049823761,
            0.9776507019996643,
            0.9876506328582764,
            0.991943895816803,
            0.9894341230392456,
            0.9914801716804504,
            0.991585373878479,
            0.991299569606781,
            0.9904729723930359
        ]
    },
    "1180": {
        "similarity": 0.9970594644546509,
        "body": "    mod = 10**9 + 7\n    n, k = map(int, input().split())\n    s = input()\n    dp = [0] * (n + 1)\n    dp[0] = int(s[0])\n    for i in range(1, n):\n        if s[i] != '0':\n            dp[i] = dp[i - 1] * 10 + int(s[i]) + dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] * 10\n    return sum(dp[n - i] for i in range(k + 1)) % mod\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963679313659668,
            0.9923112988471985,
            0.9968140125274658,
            0.9965898394584656,
            0.9942490458488464,
            0.9965015053749084,
            0.996873140335083,
            0.9969683289527893,
            0.9964172840118408,
            0.9966213703155518,
            0.9952800273895264,
            0.9970594644546509,
            0.9955049753189087,
            0.9968701601028442,
            0.9895070791244507,
            0.995452880859375,
            0.9965249300003052,
            0.9965428709983826,
            0.995754063129425,
            0.9935529828071594
        ]
    },
    "1856": {
        "similarity": 0.9948190450668335,
        "body": "    n = int(input())\n    passwords = [set(input()) for _ in range(n)]\n    groups = []\n    for i in range(n):\n        if len(passwords[i]) == 0:\n            continue\n        found = False\n        for group in groups:\n            if any(char in group for char in passwords[i]):\n                group.update(passwords[i])\n                found = True\n                break\n        if not found:\n            groups.append(passwords[i])\n    return len(groups)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917817711830139,
            0.9928581118583679,
            0.9863602519035339,
            0.9919118285179138,
            0.9932205677032471,
            0.9936489462852478,
            0.9878937602043152,
            0.9925019145011902,
            0.994071364402771,
            0.9903856515884399,
            0.9931608438491821,
            0.9908686280250549,
            0.9948190450668335,
            0.993587076663971,
            0.9903833270072937,
            0.9918128848075867,
            0.9931051135063171,
            0.9924970865249634,
            0.99334317445755,
            0.9878975749015808
        ]
    },
    "522": {
        "similarity": 0.9965525269508362,
        "body": "MOD = 10**9 + 7\n\n    n, f1, f2, f3, c = map(int, input().split())\n    f = [0] * max(4, n+1)\n    f[1], f[2], f[3] = f1 % MOD, f2 % MOD, f3 % MOD\n    for x in range(4, n+1):\n        f[x] = (c ** ((x << 1) - 6)) * f[x-1] * f[x-2] * f[x-3] % MOD\n    print(f[n])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995083749294281,
            0.9960670471191406,
            0.9922080039978027,
            0.9965525269508362,
            0.9943474531173706,
            0.9957097768783569,
            0.9962748289108276,
            0.9947654604911804,
            0.9945002198219299,
            0.9946427941322327,
            0.9949336051940918,
            0.996010422706604,
            0.9961917400360107,
            0.9961943626403809,
            0.9963371157646179,
            0.995593249797821,
            0.9962621331214905,
            0.9963085651397705,
            0.9890329241752625,
            0.996199369430542
        ]
    },
    "1719": {
        "similarity": 0.9936251640319824,
        "body": "    mod = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = dp[1] = 1\n\n    for i in range(2, n+1):\n        dp[i] = (4 * dp[i-1]) % mod\n        if i > 2:\n            dp[i] -= ((dp[i-2] + dp[i-3]) % mod)\n            dp[i] %= mod\n\n    return dp[n]\n\nn = int(input())\nprint(solve(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935491681098938,
            0.9923010468482971,
            0.993039608001709,
            0.9847118854522705,
            0.9917137026786804,
            0.9916988015174866,
            0.9920699596405029,
            0.9919305443763733,
            0.9721699953079224,
            0.9911808371543884,
            0.9899400472640991,
            0.9908387064933777,
            0.9921398162841797,
            0.9917683005332947,
            0.9911413788795471,
            0.9933069944381714,
            0.988429844379425,
            0.9839146137237549,
            0.9936251640319824,
            0.9928075671195984
        ]
    },
    "1842": {
        "similarity": 0.997955322265625,
        "body": "import math\n\na, b, c = map(int, input().split())\ndiscriminant = b**2 - 4*a*c\nroot1 = (-b + math.sqrt(discriminant)) / (2*a)\nroot2 = (-b - math.sqrt(discriminant)) / (2*a)\nprint(max(root1, root2))\nprint(min(root1, root2))",
        "result": "passed",
        "similarities": [
            0.995482325553894,
            0.9961332082748413,
            0.9979081749916077,
            0.99791419506073,
            0.997790515422821,
            0.996182918548584,
            0.9971782565116882,
            0.9977842569351196,
            0.9959436058998108,
            0.9970579743385315,
            0.997225821018219,
            0.9972708821296692,
            0.997955322265625,
            0.9953126311302185,
            0.9976553916931152,
            0.9958036541938782,
            0.9973927736282349,
            0.9979482889175415,
            0.9954884052276611,
            0.9979482889175415
        ]
    },
    "806": {
        "similarity": 0.9950413107872009,
        "body": "mod = 10**9 + 7\nn, l, r = map(int, input().split())\nif n == 1:\n    print(1 if l % 3 == 0 else 0)\nelse:\n    ways = [0] * (r - l + 1)\n    for i in range(l, r+1):\n        if i % 3 == 0:\n            ways[i-l] += pow(3, n-2, mod) if n > 2 else 1\n    print(sum(ways) % mod)",
        "result": "timed out",
        "similarities": [
            0.9944707155227661,
            0.9903881549835205,
            0.9950413107872009,
            0.9941526055335999,
            0.9933549761772156,
            0.9939008355140686,
            0.9946975708007812,
            0.9906532168388367,
            0.9912737607955933,
            0.9934322834014893,
            0.9919174909591675,
            0.9924549460411072,
            0.991499662399292,
            0.9945493340492249,
            0.9877212047576904,
            0.9944600462913513,
            0.9866658449172974,
            0.991502046585083,
            0.9930089712142944,
            0.9935176372528076
        ]
    },
    "365": {
        "similarity": 0.996925950050354,
        "body": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nif n == 1:\n    if a[0] == x:\n        print('YES')\n    else:\n        print('NO')\nelif n > 1:\n    if sum(a) + n - 1 < x or any(i == 1 for i in a):\n        print('NO')\n    elif n * max(a) >= x:\n        print('YES')\n    else:\n        print('NO')",
        "result": "failed: testcase 1",
        "similarities": [
            0.996925950050354,
            0.9948143362998962,
            0.9940648674964905,
            0.9948549866676331,
            0.9962419271469116,
            0.9957492351531982,
            0.9962282776832581,
            0.9949895143508911,
            0.9953482747077942,
            0.9952100515365601,
            0.9953715801239014,
            0.9945282340049744,
            0.9944023489952087,
            0.9951324462890625,
            0.9948664307594299,
            0.9961267113685608,
            0.9959560036659241,
            0.9963393211364746,
            0.9943122863769531,
            0.9963836669921875
        ]
    },
    "1158": {
        "similarity": 0.993240475654602,
        "body": "n, k = map(int, input().split())\nutensils = list(map(int, input().split()))\nutensil_count = {}\nfor ut in utensils:\n    if ut not in utensil_count:\n        utensil_count[ut] = 0\n    utensil_count[ut] += 1\nmin_steal = min(utensil_count.values())\nprint(min_steal)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9798229932785034,
            0.9918525218963623,
            0.9864567518234253,
            0.9917787313461304,
            0.9920134544372559,
            0.9897328615188599,
            0.9891960620880127,
            0.9879716634750366,
            0.9930660724639893,
            0.9840468168258667,
            0.9885755181312561,
            0.9895094037055969,
            0.9910147786140442,
            0.9927868247032166,
            0.9922065734863281,
            0.9920858144760132,
            0.9930599927902222,
            0.9906077980995178,
            0.993240475654602,
            0.9916739463806152
        ]
    },
    "33": {
        "similarity": 0.9964788556098938,
        "body": "a1, b1, a2, b2, L, R = map(int, input().split())\ncount = 0\nfor k in range((L - b1) // a1 + 1):\n    for l in range((L - b2) // a2 + 1):\n        if (a1 * k + b1 == a2 * l + b2) and L <= a1 * k + b1 <= R:\n            count += 1\nprint(count)",
        "result": "timed out",
        "similarities": [
            0.9958528280258179,
            0.9964788556098938,
            0.9956859946250916,
            0.9922479391098022,
            0.9964043498039246,
            0.9962493777275085,
            0.9951472878456116,
            0.9958109855651855,
            0.9957649111747742,
            0.9960651397705078,
            0.9906221032142639,
            0.9941356182098389,
            0.9906482696533203,
            0.9958109855651855,
            0.9951199889183044,
            0.9941693544387817,
            0.9962500333786011,
            0.996277391910553,
            0.9954075217247009,
            0.9908583760261536
        ]
    },
    "2498": {
        "similarity": 0.9961600303649902,
        "body": "    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = 0\n    for X in range(1, M + 1):\n        if all(X % a == 0 or X % (a * 2) == a // 2 for a in A):\n            count += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995733380317688,
            0.9959455132484436,
            0.9944105744361877,
            0.9932478070259094,
            0.9942241311073303,
            0.9961600303649902,
            0.9958771467208862,
            0.9960688352584839,
            0.9933919310569763,
            0.9945323467254639,
            0.9940918684005737,
            0.9925771355628967,
            0.9959996938705444,
            0.9961034059524536,
            0.9937171936035156,
            0.9947914481163025,
            0.9917694926261902,
            0.9952906370162964,
            0.9959694743156433,
            0.9958986043930054
        ]
    },
    "2309": {
        "similarity": 0.9968826174736023,
        "body": "    return sum(1 for c in word if c in 'aeiou')\n\n    lyrics = []\n    words_count = {word: count_vowels(word) for word in words}\n    used_words = set()\n    for i, word1 in enumerate(words):\n        if word1 not in used_words:\n            vowels1 = words_count[word1]\n            last_vowel1 = next((c for c in word1[::-1] if c in 'aeiou'), None)\n            for j, word2 in enumerate(words[i+1:]):\n                if word2 != word1 and word2 not in used_words:\n                    vowels2 = words_count[word2]\n                    last_vowel2 = next((c for c in word2[::-1] if c in 'aeiou'), None)\n                    if vowels1 == vowels2 and last_vowel1 == last_vowel2:\n                        lyrics.append([word1, word2])\n                        used_words.add(word1)\n                        used_words.add(word2)\n    return lyrics\n\nn = int(input())\nwords = [input() for _ in range(n)]\nlyrics = find_lyrics(words)\n\nprint(len(lyrics))\nfor lyric in lyrics:\n    print('\\n'.join(lyric))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961060881614685,
            0.9956570863723755,
            0.9944249391555786,
            0.9954360127449036,
            0.9919162392616272,
            0.9959120750427246,
            0.9953169822692871,
            0.9964911937713623,
            0.994674801826477,
            0.9955973625183105,
            0.9951900839805603,
            0.9968176484107971,
            0.996484637260437,
            0.9954175353050232,
            0.9960682392120361,
            0.9961694478988647,
            0.9954885244369507,
            0.9968826174736023,
            0.9967758059501648,
            0.9961549639701843
        ]
    },
    "1326": {
        "similarity": 0.9935284852981567,
        "body": "    N = int(input())\n    total = 0\n    for K in range(1, N + 1):\n        f_K = sum(K % i == 0 for i in range(1, K + 1))\n        total += K * f_K\n    print(total)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906001687049866,
            0.9935284852981567,
            0.9890281558036804,
            0.9867355227470398,
            0.9903687238693237,
            0.9892020225524902,
            0.9897799491882324,
            0.9932648539543152,
            0.9892796874046326,
            0.9930466413497925,
            0.9900109171867371,
            0.9927904009819031,
            0.9905790090560913,
            0.9930940866470337,
            0.9916796684265137,
            0.9868516325950623,
            0.9929602742195129,
            0.9912402629852295,
            0.9910762310028076,
            0.9927747845649719
        ]
    },
    "2950": {
        "similarity": 0.9952515363693237,
        "body": "n = int(input())\nh = list(map(int, input().split()))\nc = [0] * max(h)\nfor x in h:\n  if c[x - 1] == 0:\n    for i in range(x):\n      c[i] += 1\nprint(sum(c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949676394462585,
            0.9941481351852417,
            0.9934114217758179,
            0.9922143816947937,
            0.9917677640914917,
            0.9951478838920593,
            0.9923371076583862,
            0.9944682717323303,
            0.9952515363693237,
            0.9927669167518616,
            0.9943169355392456,
            0.9810594320297241,
            0.9937947988510132,
            0.9916955828666687,
            0.9934594035148621,
            0.9948449730873108,
            0.9945305585861206,
            0.9887929558753967,
            0.990871012210846,
            0.9949396252632141
        ]
    },
    "1983": {
        "similarity": 0.9980223774909973,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1]*n\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i],dp[j]+1)\n    print(max(dp)*2)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977684020996094,
            0.9900936484336853,
            0.9980223774909973,
            0.9953804016113281,
            0.9979695677757263,
            0.9977298378944397,
            0.9974349141120911,
            0.997614324092865,
            0.9946001768112183,
            0.9962626099586487,
            0.9973652362823486,
            0.9968503713607788,
            0.9976723194122314,
            0.9965733885765076,
            0.9979139566421509,
            0.9979437589645386,
            0.9960742592811584,
            0.9971000552177429,
            0.9975216388702393,
            0.9970784783363342
        ]
    },
    "1767": {
        "similarity": 0.9959030151367188,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n        return sum(x[i] | x[j] for i in range(l-1, r) for j in range(i+1, r+1))\n\n    max_sum = 0\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            max_sum = max(max_sum, f(a, l, r) + f(b, l, r))\n    print(max_sum)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914737343788147,
            0.994433581829071,
            0.9945644736289978,
            0.9931580424308777,
            0.989335298538208,
            0.9955133199691772,
            0.9953940510749817,
            0.9834625124931335,
            0.9934373497962952,
            0.9885569214820862,
            0.9951639771461487,
            0.9952297210693359,
            0.9945610761642456,
            0.9948692321777344,
            0.9932450652122498,
            0.9959030151367188,
            0.9923519492149353,
            0.993962824344635,
            0.9920627474784851,
            0.9958235025405884
        ]
    },
    "2382": {
        "similarity": 0.9963676929473877,
        "body": "from collections import Counter\n\nN = int(input())\nS = list(map(int, input().split()))\n\n    slime_healths = [0] * (1 << N)\n    counter_S = Counter(S)\n    counter_slime = Counter()\n\n    for i in range(1 << N):\n        if counter_S[counter_slime[i]] > 0:\n            print('Yes')\n            return\n        counter_slime[i] += 1\n\n    print('No')\n\ncan_form_multiset(N, S)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992140531539917,
            0.9959521889686584,
            0.9951184988021851,
            0.9943867921829224,
            0.9961286783218384,
            0.9960372447967529,
            0.9963676929473877,
            0.9943686127662659,
            0.9949546456336975,
            0.9948786497116089,
            0.9934172630310059,
            0.9942415952682495,
            0.9959034323692322,
            0.9893209338188171,
            0.9937312602996826,
            0.9940894246101379,
            0.994595468044281,
            0.9956445097923279,
            0.9957008361816406,
            0.98965984582901
        ]
    },
    "3907": {
        "similarity": 0.9931560158729553,
        "body": "    n, m = map(int, input().split())\n    coupons = []\n    for _ in range(m):\n        q, w = map(int, input().split())\n        coupons.append((q, w))\n    money = 0\n    used = set()\n    for coupon in sorted(coupons, key=lambda x: x[0]):\n        if coupon[0] not in used:\n            money += coupon[1]\n            used.add(coupon[0])\n    print(money)\n\nmax_money()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9825972318649292,
            0.9922899007797241,
            0.9901509881019592,
            0.9916261434555054,
            0.9922615885734558,
            0.9921632409095764,
            0.9918510317802429,
            0.9920924305915833,
            0.9819353222846985,
            0.9883694052696228,
            0.9835200905799866,
            0.9931560158729553,
            0.9814766645431519,
            0.9916595816612244,
            0.9907662272453308,
            0.9880432486534119,
            0.9886810779571533,
            0.9923151731491089,
            0.9879247546195984,
            0.991937518119812
        ]
    },
    "3676": {
        "similarity": 0.9941545724868774,
        "body": "R, C = map(int, input().split())\nways = 0\nfor r in range(R):\n    for c in range(C):\n        if r == 0 or c == 0:\n            ways += (C - c + R - r) // 2\nif R > 1 and C > 1:\n    ways -= ((R * C - R - C + 1) // 2) ** 2\nprint(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925817251205444,
            0.9935835599899292,
            0.9891253113746643,
            0.9917843341827393,
            0.9923527240753174,
            0.9937095642089844,
            0.9935632348060608,
            0.9926317930221558,
            0.9941545724868774,
            0.9861830472946167,
            0.9872710704803467,
            0.9878553152084351,
            0.9923880696296692,
            0.9894517660140991,
            0.9887762665748596,
            0.9866211414337158,
            0.9917736053466797,
            0.9865477681159973,
            0.9877625703811646,
            0.9917266368865967
        ]
    },
    "3293": {
        "similarity": 0.9960698485374451,
        "body": "    n = int(input())\n    snacks = []\n    for _ in range(n):\n        f, p, m, s = map(int, input().split())\n        snacks.append((f-1, p, m, s))\n    profit = 0\n    bought = [False] * n\n    for i in range(n):\n        if not bought[i]:\n            if snacks[i][3] > 0 and snacks[snacks[i][0]][3] > 0:\n                profit += max(0, snacks[i][2] - snacks[i][1])\n                bought[i] = True\n                bought[snacks[i][0]] = True\n    print(profit)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935500621795654,
            0.9937594532966614,
            0.9943801760673523,
            0.9950340986251831,
            0.9948489665985107,
            0.9950780272483826,
            0.9859300851821899,
            0.9938886761665344,
            0.9935559630393982,
            0.9902620911598206,
            0.9956744313240051,
            0.9957898855209351,
            0.9957094788551331,
            0.995392382144928,
            0.9955040812492371,
            0.9908078908920288,
            0.9938194155693054,
            0.9960698485374451,
            0.9950671792030334,
            0.993840754032135
        ]
    },
    "3587": {
        "similarity": 0.9963625073432922,
        "body": "N = int(input())\ntaboo = [input() for _ in range(N)]\nmax_len = 200001\nfor length in range(max_len, -1, -1):\n    clue = '1' * length\n    if all(clue not in t for t in taboo):\n        print(clue)\n        break\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937002062797546,
            0.9959701895713806,
            0.9951308369636536,
            0.9953832030296326,
            0.9940954446792603,
            0.9949565529823303,
            0.9958738088607788,
            0.994546115398407,
            0.9947416186332703,
            0.9945817589759827,
            0.9945479035377502,
            0.9947985410690308,
            0.9943391680717468,
            0.992730975151062,
            0.9952621459960938,
            0.9939202666282654,
            0.9963625073432922,
            0.9942245483398438,
            0.995574951171875,
            0.9954615235328674
        ]
    },
    "3530": {
        "similarity": 0.9960391521453857,
        "body": "    n = int(input())\n    coasters = []\n    for _ in range(n):\n        a, b, t = map(int, input().split())\n        coasters.append((a, b, t))\n\n    q = int(input())\n    for _ in range(q):\n        T = int(input())\n\n        total_fun = 0\n        for a, b, t in coasters:\n            k = min(T // t, 100)\n            if a - (k-1)**2 * b > 0:\n                total_fun += a - (k-1)**2 * b\n\n        print(total_fun)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919497966766357,
            0.9931724071502686,
            0.9933322072029114,
            0.9957221150398254,
            0.994968831539154,
            0.9950324892997742,
            0.9927938580513,
            0.995572566986084,
            0.9950430989265442,
            0.9910653829574585,
            0.9872112274169922,
            0.9932913780212402,
            0.9955458641052246,
            0.995070219039917,
            0.9959734082221985,
            0.9960391521453857,
            0.9954769611358643,
            0.9945365786552429,
            0.9940159320831299,
            0.9957894086837769
        ]
    },
    "3900": {
        "similarity": 0.9965204000473022,
        "body": "    n, p = map(int, input().split())\n    suspects = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        x, y = map(int, input().split())\n        suspects[x].append(i)\n        suspects[y].append(i)\n\n        if len(visited) == p:\n            return 1\n        count = 0\n        for neighbor in suspects[node]:\n            if neighbor not in visited:\n                count += dfs(neighbor, visited | {node})\n        return count\n\n    return sum(dfs(i, {i}) for i in range(1, n+1)) // 2",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963389039039612,
            0.9952593445777893,
            0.9954143166542053,
            0.9952669739723206,
            0.9949281811714172,
            0.9962605834007263,
            0.9928278923034668,
            0.9906375408172607,
            0.9925245046615601,
            0.9965204000473022,
            0.9930798411369324,
            0.9950001239776611,
            0.9961418509483337,
            0.9943941831588745,
            0.9897857308387756,
            0.9953463673591614,
            0.9944913983345032,
            0.9962916970252991,
            0.9943552613258362,
            0.9954795837402344
        ]
    },
    "3996": {
        "similarity": 0.9955955147743225,
        "body": "MOD = int(1e9 + 7)\n\nk = int(input())\na = list(map(int, input().split()))\n\nn = 1\nfor x in a:\n    n *= x\n\np = q = pow(3, n // 2, MOD)\nif n % 2 == 1:\n    p = (p * pow(3, ((n - 1) // 2) + 1, MOD)) % MOD\nelse:\n    q = (q * pow(3, ((n + 1) // 2), MOD)) % MOD\n\nprint(f\"{p}/{q}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952976703643799,
            0.9920080304145813,
            0.9953109622001648,
            0.9955955147743225,
            0.995222806930542,
            0.9842481017112732,
            0.9928504824638367,
            0.9921289086341858,
            0.9946619272232056,
            0.9899529218673706,
            0.995102047920227,
            0.993984043598175,
            0.9948740601539612,
            0.9947823882102966,
            0.9948253631591797,
            0.9947102069854736,
            0.9948407411575317,
            0.994228184223175,
            0.9930412173271179,
            0.9944632649421692
        ]
    },
    "3276": {
        "similarity": 0.9964222311973572,
        "body": "n, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\nstamps = ['RRR', 'GGG', 'BBB']\nfor i in range(n - 2):\n    for j in range(m - 2):\n        if grid[i][j] == 'W' and grid[i + 1][j] == 'W' and grid[i + 2][j] == 'W':\n            continue\n        valid = False\n        for stamp in stamps:\n            if all(grid[x][y] == color or grid[x][y] == 'W' for x, y, color in zip([i, i+1, i+2], [j, j, j], stamp)):\n                valid = True\n                break\n        if not valid:\n            print(\"NO\")\n            exit()\nprint(\"YES\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954752922058105,
            0.9964119791984558,
            0.9951373934745789,
            0.992745041847229,
            0.9953617453575134,
            0.9937816262245178,
            0.9901869893074036,
            0.9930253624916077,
            0.9950789213180542,
            0.9954851269721985,
            0.9928402304649353,
            0.9943172931671143,
            0.9937790632247925,
            0.9925271272659302,
            0.9963595867156982,
            0.9955511689186096,
            0.9957678914070129,
            0.9951974749565125,
            0.9912511110305786,
            0.9964222311973572
        ]
    },
    "3834": {
        "similarity": 0.9965265393257141,
        "body": "    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    directions = [(0, 1), (1, 0)]\n        if i < 0 or j < 0 or i >= n or j >= m:\n            return 0\n        if grid[i][j] == 0:\n            return 0\n        grid[i][j] = 0\n        size = 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1)\n        h, w = i - max(i for _, _ in directions if dfs(i-1, _) > dfs(i+1, _)), j - max(j for _, _ in directions if dfs(i, j-1) > dfs(i, j+1))\n        return size == (h + 1) * (w + 1)\n    changed = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                changed += not dfs(i, j)\n    print(-1 if changed > k else changed)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960609078407288,
            0.9957847595214844,
            0.9962140917778015,
            0.9954648613929749,
            0.9965265393257141,
            0.9960925579071045,
            0.9951733946800232,
            0.9886330366134644,
            0.9955990314483643,
            0.9960821270942688,
            0.9943109154701233,
            0.9956415891647339,
            0.9955456256866455,
            0.9958186745643616,
            0.9955137372016907,
            0.995873212814331,
            0.9941864013671875,
            0.9962693452835083,
            0.9895543456077576,
            0.9962044954299927
        ]
    },
    "3012": {
        "similarity": 0.9945939779281616,
        "body": "MOD = 10**9 + 7\na, b, c, d, N = map(int, input().split())\n\n    dp = [[0] * 3 for _ in range(N + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, N + 1):\n        for j in range(3):\n            if j < a:\n                dp[i][j] += dp[i - 1][j]\n            elif j >= b and j < a + b:\n                dp[i][j] += dp[i - 1][j - a] * (a + c)\n                if i > 2:\n                    dp[i][j] -= dp[i - 3][j - a]\n            else:\n                dp[i][j] += dp[i - 1][j]\n\n        dp[i][0] %= MOD\n        dp[i][1] %= MOD\n        dp[i][2] %= MOD\n\n    return sum(dp[N]) % MOD\n\nprint(count_sequences())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902519583702087,
            0.9935714602470398,
            0.9940759539604187,
            0.9930384755134583,
            0.9916247129440308,
            0.9908993244171143,
            0.9913448691368103,
            0.9931322336196899,
            0.9933962821960449,
            0.9935718178749084,
            0.9945451617240906,
            0.9892969727516174,
            0.9924647808074951,
            0.9933419823646545,
            0.9867467284202576,
            0.9933515191078186,
            0.9873721599578857,
            0.9945939779281616,
            0.9907455444335938,
            0.993182361125946
        ]
    },
    "3745": {
        "similarity": 0.9960208535194397,
        "body": "from collections import defaultdict\n\n    n, m = map(int, input().split())\n    graph = defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    colors = ['a', 'b', 'c']\n    used = [False] * n\n    s = [''] * n\n\n        if used[node]:\n            return False\n        used[node] = True\n        s[node] = colors[color_index]\n        for neighbor in graph[node]:\n            if not dfs(neighbor, (color_index + 1) % 3):\n                return False\n        return True\n\n    if all(dfs(i, i // 2) for i in range(n)):\n        print(\"Yes\")\n        print(''.join(s))\n    else:\n        print(\"No\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957592487335205,
            0.9952790141105652,
            0.9956548810005188,
            0.9934284687042236,
            0.993748128414154,
            0.9957299828529358,
            0.9960208535194397,
            0.9946384429931641,
            0.9839110970497131,
            0.9948567748069763,
            0.9945612549781799,
            0.9955705404281616,
            0.9922906756401062,
            0.9920042157173157,
            0.994626522064209,
            0.9889293313026428,
            0.9948071837425232,
            0.9933191537857056,
            0.9950852990150452,
            0.9959262013435364
        ]
    },
    "3028": {
        "similarity": 0.9977778196334839,
        "body": "    n, m, p = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    moves = []\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                moves.append((i+1, j+1))\n                for k in range(n):\n                    board[k][j] += 1\n                    if board[k][j] > p:\n                        board[k][j] = 1\n                for l in range(m):\n                    board[i][l] += 1\n                    if board[i][l] > p:\n                        board[i][l] = 1\n    if any(0 < num < p for row in board for num in row):\n        print(-1)\n    else:\n        print(len(moves))\n        print(' '.join(map(str, moves)))\nprimonimo()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974763989448547,
            0.997721254825592,
            0.9931039214134216,
            0.9975000023841858,
            0.9970709085464478,
            0.9937716126441956,
            0.996714174747467,
            0.9961632490158081,
            0.9968839883804321,
            0.9968737363815308,
            0.9958365559577942,
            0.9977778196334839,
            0.9949072003364563,
            0.9967683553695679,
            0.9952443838119507,
            0.9964083433151245,
            0.9966875314712524,
            0.9959338307380676,
            0.9973589181900024,
            0.9974338412284851
        ]
    },
    "3196": {
        "similarity": 0.9969121217727661,
        "body": "    N, M = map(int, input().split())\n    roads = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        A, B = map(int, input().split())\n        roads[A].append(B)\n        roads[B].append(A)\n\n        visited.add(node)\n        count = 1\n        if node == N:\n            return float('inf')\n        for child in roads[node]:\n            if child != parent and child not in visited:\n                count += dfs(child, node)\n        return count\n\n    visited = set()\n    ways = dfs(1, None)\n    print(str(ways)[-9:] if ways < float('inf') else 'inf')\n\nbicycle_race()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936169981956482,
            0.9955519437789917,
            0.9946606159210205,
            0.994072675704956,
            0.9964686036109924,
            0.9960532188415527,
            0.9963807463645935,
            0.9966188073158264,
            0.9964794516563416,
            0.9961636066436768,
            0.9958221316337585,
            0.995885968208313,
            0.9959042072296143,
            0.9967774152755737,
            0.9941834807395935,
            0.9954625368118286,
            0.9969121217727661,
            0.9941549897193909,
            0.9962338805198669,
            0.9938257932662964
        ]
    },
    "3405": {
        "similarity": 0.9951886534690857,
        "body": "X = float(input())\nfor i in range(1, 10**8):\n    str_i = str(i)\n    if len(str_i) > 1 and int(str_i[0]) * X == int(str_i + str_i[0]):\n        print(str_i)\nelse:\n    print(\"No solution\")",
        "result": "timed out",
        "similarities": [
            0.9934766888618469,
            0.993799090385437,
            0.9917557239532471,
            0.9897961020469666,
            0.9941778779029846,
            0.9951378703117371,
            0.9946513175964355,
            0.9902781248092651,
            0.9924452900886536,
            0.9904088377952576,
            0.9941850304603577,
            0.9933981895446777,
            0.993853747844696,
            0.994472086429596,
            0.9951886534690857,
            0.9946086406707764,
            0.9944270253181458,
            0.9944810271263123,
            0.9944676160812378,
            0.9938541054725647
        ]
    },
    "3126": {
        "similarity": 0.9966615438461304,
        "body": "n, t = map(int, input().split())\nps = list(map(int, input().split()))\nC = int(input())\nfor _ in range(C):\n    cmd = input().split()\n    if cmd[0] == '+':\n        a = int(cmd[1])\n        ps.append(a)\n    elif cmd[0] == '-':\n        a = int(cmd[1])\n        while a in ps:\n            ps.remove(a)\n    else:\n        t = int(cmd[1])\n    jumps = 0\n    for p in sorted(ps):\n        jumps += abs(p - t) + sum(range(1, abs(p - t) + 1))\n    print(jumps)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933270812034607,
            0.9959583282470703,
            0.9957795739173889,
            0.9961796998977661,
            0.9960403442382812,
            0.9952595233917236,
            0.996616780757904,
            0.9948523640632629,
            0.9966615438461304,
            0.994055986404419,
            0.9950780272483826,
            0.9944040179252625,
            0.9954352378845215,
            0.9959842562675476,
            0.9952693581581116,
            0.995975911617279,
            0.9962404370307922,
            0.9953335523605347,
            0.9950693845748901,
            0.9953259229660034
        ]
    },
    "3279": {
        "similarity": 0.9964300394058228,
        "body": "    n = int(input())\n    rows = [list(map(int, input().split())) for _ in range(n)]\n    cols = [list(map(int, input().split())) for _ in range(n)]\n\n        for i in range(n + 1):\n            if sum(grid[i]) != rows[i][0]:\n                return False\n            if sum(grid[:, i]) != cols[i][0]:\n                return False\n        return True\n\n        if i == n:\n            return solve(grid)\n        for j in range(n + 1):\n            grid[i] = [1] * (n - j) + [0] * (j + 1)\n            if generate(grid, i + 1):\n                return True\n            grid[i] = [0] * n + [1]\n\n    grid = [[0] * (n + 1) for _ in range(n)]\n    generate(grid)\n\n    for row in grid:\n        print(\"\".join(map(str, row)))\n\nbar_code()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956228137016296,
            0.9949320554733276,
            0.9929559826850891,
            0.9939848184585571,
            0.9938467144966125,
            0.9948011040687561,
            0.9941231608390808,
            0.9921549558639526,
            0.9957578778266907,
            0.9947832822799683,
            0.9931190013885498,
            0.9962533712387085,
            0.9942777752876282,
            0.9936742186546326,
            0.9961324334144592,
            0.9953312277793884,
            0.9942458271980286,
            0.9958793520927429,
            0.9964300394058228,
            0.9956241250038147
        ]
    },
    "3599": {
        "similarity": 0.9972782135009766,
        "body": "T, N = map(int, input().split())\nbreaks = list(map(int, input().split()))\n\nschedule = [0]*N\nfor i in range(N):\n    while schedule[i] < T:\n        if sum(1 for j in range(i+1) if schedule[j] == breaks[j]) <= 2:\n            break\n        else:\n            schedule[i] += breaks[i]\n\nprint(*schedule)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992478609085083,
            0.9972782135009766,
            0.9964015483856201,
            0.9960649609565735,
            0.9946275949478149,
            0.9946179986000061,
            0.9948722720146179,
            0.9961802959442139,
            0.9967159628868103,
            0.9969513416290283,
            0.9972270131111145,
            0.9966440796852112,
            0.9950779676437378,
            0.9949088096618652,
            0.9966762065887451,
            0.9965968728065491,
            0.9960472583770752,
            0.9930374622344971,
            0.9970846772193909,
            0.9943568706512451
        ]
    },
    "3687": {
        "similarity": 0.996966540813446,
        "body": "    n, q, s = map(int, input().split())\n    qs = list(map(int, input().split()))\n    cs = list(map(int, input().split()))\n    queues = [[] for _ in range(q)]\n    for i, q in enumerate(qs):\n        queues[q - 1].append(i)\n    for _ in range(n):\n        d = int(input())\n        datas = list(map(int, input().split()))\n        for i, data in enumerate(datas):\n            if cs[i] >= data:\n                cs[i] -= data\n            else:\n                print(\"impossible\")\n                return\n        if all(c == 0 for c in cs):\n            print(\"possible\")\n            return\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949434995651245,
            0.9962192177772522,
            0.996966540813446,
            0.9958616495132446,
            0.9938353300094604,
            0.9966344237327576,
            0.9953017830848694,
            0.994712233543396,
            0.996221125125885,
            0.9967536926269531,
            0.9962401390075684,
            0.9954689741134644,
            0.9958447217941284,
            0.995935320854187,
            0.9920092225074768,
            0.9960411787033081,
            0.9956713318824768,
            0.9955840110778809,
            0.9943357706069946,
            0.9948576092720032
        ]
    },
    "3864": {
        "similarity": 0.9944879412651062,
        "body": "mod = 998244353\n\n    res = [0] * n\n    for i in range(1, n+1):\n        if i == 1:\n            res[i-1] = (pow(2, i) - pow(2, i-1)) % mod\n        else:\n            res[i-1] = ((res[i-2] + pow(2, i)) * pow(2, i-2) + pow(2, i-1)) % mod\n    return res\n\nn = int(input())\nprint('\\n'.join(map(str, solve(n))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896068572998047,
            0.9933260679244995,
            0.9912133812904358,
            0.9891636371612549,
            0.9882749319076538,
            0.993804931640625,
            0.9935100078582764,
            0.9934710264205933,
            0.9890462160110474,
            0.9934147596359253,
            0.9891952872276306,
            0.9898803234100342,
            0.9890626668930054,
            0.9894363284111023,
            0.9921929240226746,
            0.9924119710922241,
            0.9934290647506714,
            0.9925330281257629,
            0.9888218641281128,
            0.9944879412651062
        ]
    },
    "3504": {
        "similarity": 0.9968722462654114,
        "body": "D, S = map(int, input().split())\ndrops = [tuple(map(int, input().split())) for _ in range(D)]\nsensors = [tuple(map(int, input().split())) for _ in range(S)]\n\nfor drop in drops:\n    x, y = drop\n    hit = False\n    for sensor in sensors:\n        xl, xr, yl = sensor\n        if xl <= x <= xr and y == yl:\n            print(yl)\n            hit = True\n            break\n    if not hit:\n        print(0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938599467277527,
            0.9900750517845154,
            0.9966697692871094,
            0.9963752627372742,
            0.9948172569274902,
            0.9962807893753052,
            0.9957815408706665,
            0.9949999451637268,
            0.9968722462654114,
            0.995317280292511,
            0.9961969256401062,
            0.9919058084487915,
            0.9963277578353882,
            0.9938759207725525,
            0.9966741800308228,
            0.995492160320282,
            0.9956586956977844,
            0.9963738322257996,
            0.9942408204078674,
            0.9965341687202454
        ]
    },
    "3451": {
        "similarity": 0.9963858723640442,
        "body": "    n, k = map(int, input().split())\n    s = input()\n    c = [int(input()) for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == '(':\n            dp[i][0] = c[i - 1]\n            for j in range(k):\n                if dp[i - 1][j]:\n                    dp[i][j + 1] = min(dp[i].pop(), dp[i - 1][j] + c[i - 1])\n        else:\n            dp[i][k] = float('inf')\n            for j in reversed(range(k)):\n                if dp[i - 1][j + 1]:\n                    dp[i][j] = min(dp[i].pop(), dp[i - 1][j + 1] + c[i - 1])\n    print(-dp[n][k]) if dp[n][k] < float('inf') else print('?')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961655139923096,
            0.9955564141273499,
            0.9948907494544983,
            0.995151937007904,
            0.9922177195549011,
            0.9943005442619324,
            0.9952031373977661,
            0.9922173023223877,
            0.9918115735054016,
            0.9952139854431152,
            0.9963858723640442,
            0.9912320971488953,
            0.9962326884269714,
            0.9949597716331482,
            0.9955592751502991,
            0.9923987984657288,
            0.9961591362953186,
            0.995371401309967,
            0.9913093447685242,
            0.9913045167922974
        ]
    },
    "3156": {
        "similarity": 0.9970546364784241,
        "body": "N = int(input())\nK = int(input())\n\nstores = {}\nfor _ in range(K):\n    i, S = map(str, input().split())\n    if i not in stores:\n        stores[i] = []\n    stores[i].append(S)\n\nM = int(input())\nbought = []\nfor _ in range(M):\n    T = input()\n    bought.append(T)\n\n    for item in bought:\n        found = False\n        for store_index, stores_items in enumerate(stores.values()):\n            if item in stores_items and store_index == path[0]:\n                path.pop(0)\n                found = True\n                break\n        if not found:\n            return \"impossible\"\n    return \"unique\" if len(path) == 0 else \"ambiguous\"\n\npath = list(range(N))\nprint(check_path(path))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959779977798462,
            0.9955812096595764,
            0.9965457916259766,
            0.9970546364784241,
            0.9919561147689819,
            0.9965043663978577,
            0.9905393719673157,
            0.9963943958282471,
            0.9965284466743469,
            0.9953826069831848,
            0.9954360127449036,
            0.9964549541473389,
            0.9969515800476074,
            0.9955924153327942,
            0.9955306053161621,
            0.9958773255348206,
            0.9946736693382263,
            0.99626624584198,
            0.9947248697280884,
            0.9963717460632324
        ]
    },
    "3697": {
        "similarity": 0.9954329133033752,
        "body": "    n, k, m, a = map(int, input().split())\n    votes = list(map(int, input().split()))\n    counts = [0] * n\n    for vote in votes:\n        counts[vote - 1] += 1\n    sorted_candidates = sorted(range(n), key=lambda i: (-counts[i], votes.index(i + 1) if i < a else float('inf')))\n    results = [0] * n\n    for i, candidate in enumerate(sorted_candidates):\n        if i < k:\n            results[candidate] = 1\n        elif counts[candidate] > (m - a) // (n - k):\n            results[candidate] = 2\n        else:\n            results[candidate] = 3\n    return ' '.join(map(str, results))\n\nprint(berland_elections())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9899287223815918,
            0.9924630522727966,
            0.9943756461143494,
            0.9953920245170593,
            0.9945106506347656,
            0.9925798177719116,
            0.9930978417396545,
            0.9940958619117737,
            0.9933668375015259,
            0.9949662089347839,
            0.9924479126930237,
            0.9954329133033752,
            0.994792640209198,
            0.9922342896461487,
            0.9941551089286804,
            0.9902108907699585,
            0.9953159689903259,
            0.992588460445404,
            0.9905966520309448,
            0.9945204854011536
        ]
    },
    "3647": {
        "similarity": 0.9975268840789795,
        "body": "    C, R = map(int, input().split())\n    maze = [list(input()) for _ in range(R)]\n    dx, dy = [-1, 0, 1, 0], [0, -1, 0, 1]\n    queue = [(i, j) for i, j in enumerate(range(C)) if maze[i][j] == 'M']\n    dist = [[-1]*C for _ in range(R)]\n    for i, j in queue:\n        dist[i][j] = 0\n    while queue:\n        x, y = queue.pop(0)\n        for k in range(4):\n            nx, ny = x + dx[k], y + dy[k]\n            while 0 <= nx < R and 0 <= ny < C and maze[nx][ny] != '#':\n                if maze[nx][ny] == '.':\n                    break\n                elif maze[nx][ny] == '_':\n                    nx += dx[k]\n                    ny += dy[k]\n            if dist[nx][ny] == -1:\n                dist[nx][ny] = dist[x][y] + 1\n                queue.append((nx, ny))\n    for row in dist:\n        print(*row)\n\nsolve_maze()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956437945365906,
            0.9971057772636414,
            0.9959314465522766,
            0.9965386986732483,
            0.9975268840789795,
            0.9974107146263123,
            0.9963556528091431,
            0.9972168803215027,
            0.9966859221458435,
            0.9966205954551697,
            0.9949289560317993,
            0.9971045255661011,
            0.9961836934089661,
            0.9972988963127136,
            0.9957516193389893,
            0.9964473247528076,
            0.9957962036132812,
            0.9963716268539429,
            0.9965187907218933,
            0.9966031908988953
        ]
    },
    "3699": {
        "similarity": 0.9963762164115906,
        "body": "import heapq\n\n    bottles = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        bottles.append((x, y))\n\n    dist = [[float('inf')] * (n + 1) for _ in range(2)]\n    dist[0][0] = abs(a_x - t_x) + abs(a_y - t_y)\n    dist[1][0] = abs(b_x - t_x) + abs(b_y - t_y)\n\n    heap = [(dist[0][0], 0, True), (dist[1][0], 0, False)]\n    visited = set()\n\n    while heap:\n        d, i, turn = heapq.heappop(heap)\n        if (turn, i) in visited: continue\n        visited.add((turn, i))\n\n        if i == n:\n            return d\n\n        for j in range(i + 1, n + 1):\n            next_dist_adil = abs(a_x - bottles[j][0]) + abs(a_y - bottles[j][1]) + dist[not turn][j]\n            next_dist_bera = abs(b_x - bottles[j][0]) + abs(b_y - bottles[j][1]) + dist[turn][j]\n\n            if next_dist_adil < dist[not turn][j]:\n                dist[not turn][j] = next_dist_adil\n                heapq.heappush(heap, (next_dist_adil, j, not turn))\n\n            if next_dist_bera < dist[turn][j]:\n                dist[turn][j] = next_dist_bera\n                heapq.heappush(heap, (next_dist_bera, j, turn))\n\n    return float('inf')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959191083908081,
            0.995279848575592,
            0.9947524666786194,
            0.9954951405525208,
            0.9957210421562195,
            0.9945504069328308,
            0.9952302575111389,
            0.9930870532989502,
            0.9959645867347717,
            0.9876059293746948,
            0.9962256550788879,
            0.9954149127006531,
            0.9959526062011719,
            0.995996356010437,
            0.9949472546577454,
            0.995813250541687,
            0.9954017996788025,
            0.9949437379837036,
            0.9963762164115906,
            0.9945759177207947
        ]
    },
    "3145": {
        "similarity": 0.9955379366874695,
        "body": "    count = 0\n    for i in range(A // X * X, B + 1, X):\n        if all(digit in allowed_digits for digit in str(i)):\n            count += 1\n    return count\n\nX, A, B = map(int, input().split())\nallowed_digits = set(input())\n\nprint(count_multiples(X, A, B, allowed_digits))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950457215309143,
            0.9942979216575623,
            0.99383544921875,
            0.9955379366874695,
            0.9920409321784973,
            0.9952043294906616,
            0.9945923686027527,
            0.9931909441947937,
            0.9946761131286621,
            0.9951413869857788,
            0.9927440285682678,
            0.994983971118927,
            0.9917084574699402,
            0.9908451437950134,
            0.9955354928970337,
            0.9932478070259094,
            0.9922341704368591,
            0.9940248727798462,
            0.9923799633979797,
            0.9915556907653809
        ]
    },
    "3795": {
        "similarity": 0.9919355511665344,
        "body": "    n = int(input())\n    d, e = map(int, input().split())\n    coins = [1, 2, 5, 10, 20, 50, 100] + list(range(5, 206, 5))\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, n + 1):\n            dp[i] = min(dp[i], dp[i - coin] + coin // d if i >= coin else float('inf'))\n    return min(n - sum(dollars) * dollars // e for dollars in dp)\nprint(min_rubles())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9894475340843201,
            0.988857090473175,
            0.9694071412086487,
            0.9885404706001282,
            0.9863941669464111,
            0.9891725778579712,
            0.9817765951156616,
            0.9918702840805054,
            0.979300856590271,
            0.9871280193328857,
            0.9906544089317322,
            0.9902390241622925,
            0.9808076620101929,
            0.9861668348312378,
            0.9913327097892761,
            0.9900075197219849,
            0.9889000654220581,
            0.9919355511665344,
            0.9850713014602661,
            0.9819733500480652
        ]
    },
    "3353": {
        "similarity": 0.9976276755332947,
        "body": "    P, R, L = map(int, input().split())\n    graph = [[] for _ in range(R+2)]\n    for _ in range(L):\n        E1, E2 = map(int, input().split())\n        graph[abs(E1)].append(abs(E2))\n        graph[abs(E2)].append(abs(E1))\n\n    visited = [False] * (R + 2)\n    queue = [(0, 0)]  # current person, time\n    while queue:\n        p, t = queue.pop(0)\n        if p == R+1:  # reached right bank\n            continue\n        if visited[p]:  # already crossed\n            continue\n        visited[p] = True\n        for n in graph[p]:\n            queue.append((n, t + 1))\n    if P > sum(not v for v in visited):\n        print(P - sum(not v for v in visited))\n    else:\n        print(t)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967824816703796,
            0.9963533282279968,
            0.9966993927955627,
            0.9972293376922607,
            0.995937168598175,
            0.9965065717697144,
            0.997042715549469,
            0.9967362284660339,
            0.9959855675697327,
            0.9934366345405579,
            0.9970319867134094,
            0.9976276755332947,
            0.9972752332687378,
            0.9970918297767639,
            0.9969200491905212,
            0.9968550801277161,
            0.9967629313468933,
            0.9961856007575989,
            0.9965657591819763,
            0.996372401714325
        ]
    },
    "3065": {
        "similarity": 0.9968450665473938,
        "body": "from collections import defaultdict\nimport sys\n\n    queue = [(start, 1)]\n    visited = set()\n    while queue:\n        node, time = queue.pop(0)\n        if time == len(path):\n            return True\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                queue.append((neighbor, time + 1))\n    return False\n\nN = int(input())\nL = int(input())\npath = list(map(int, input().split()))\ngraph = defaultdict(list)\nfor i in range(N):\n    n_i = int(input())\n    neighbors = list(map(int, input().split()))\n    graph[i] = [neighbor for neighbor in neighbors if neighbor != i]\n\nprint(1 - bfs(graph, path[0]) / 2 ** (L - 1))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943161010742188,
            0.9947009682655334,
            0.9962562918663025,
            0.9956126809120178,
            0.9949241280555725,
            0.9962059855461121,
            0.9960601329803467,
            0.9968450665473938,
            0.9956038594245911,
            0.9936366677284241,
            0.995553195476532,
            0.9944873452186584,
            0.9936121106147766,
            0.9962762594223022,
            0.9964665770530701,
            0.9965562224388123,
            0.9962824583053589,
            0.9964923858642578,
            0.9944018125534058,
            0.9956745505332947
        ]
    },
    "3250": {
        "similarity": 0.9949371814727783,
        "body": "    b, d = map(int, input().split())\n    m = 1\n    while True:\n        if all(n % d == f_{b,m}(n) % d for n in range(1, int(b**m))):\n            print(\"yes\")\n            return\n        m += 1\n    print(\"no\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949371814727783,
            0.9902210235595703,
            0.9935763478279114,
            0.9943521618843079,
            0.9859026074409485,
            0.9943690896034241,
            0.9934239983558655,
            0.9942812919616699,
            0.9935089945793152,
            0.9895110130310059,
            0.9931418895721436,
            0.992924153804779,
            0.9905270338058472,
            0.9937196373939514,
            0.9942278861999512,
            0.9934859275817871,
            0.9949046969413757,
            0.9932546019554138,
            0.9945581555366516,
            0.9920510649681091
        ]
    },
    "3306": {
        "similarity": 0.9950388669967651,
        "body": "    N, M = map(int, input().split())\n    detectors = [list(map(int, input().split())) for _ in range(N)]\n    calls = [[0]*(M+1) for _ in range(M+1)]\n    for P, C in detectors:\n        calls[P][P+1] += C\n    calls[M][M] += 1\n    for i in range(1, M+1):\n        for j in range(i+2, M+2):\n            if calls[i][j]:\n                calls[i][j-1] = max(calls[i][j-1], calls[i][j])\n    print(min(calls[0]))\nmin_phone_calls()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946222901344299,
            0.9901672005653381,
            0.9934576153755188,
            0.9928549528121948,
            0.993097186088562,
            0.9942053556442261,
            0.9938621520996094,
            0.9902177453041077,
            0.9924344420433044,
            0.9932255148887634,
            0.9930617809295654,
            0.9889347553253174,
            0.9950388669967651,
            0.9940797686576843,
            0.9945496320724487,
            0.9945486783981323,
            0.9919681549072266,
            0.9946395754814148,
            0.9920473694801331,
            0.9942399859428406
        ]
    },
    "3970": {
        "similarity": 0.9954771995544434,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    free_set = [False] * (k + 1)\n    for x in a:\n        if not free_set[x % k]:\n            free_set[x % k] = True\n            print(x // k, end=' ')\n    print(len(free_set) - free_set.count(True))",
        "result": "timed out",
        "similarities": [
            0.9923354983329773,
            0.9936035871505737,
            0.9942671060562134,
            0.9937425255775452,
            0.9901295900344849,
            0.9954771995544434,
            0.993940532207489,
            0.9940025210380554,
            0.9934254884719849,
            0.9939567446708679,
            0.9915801882743835,
            0.9923761487007141,
            0.9954632520675659,
            0.9954478740692139,
            0.9911655783653259,
            0.9904375672340393,
            0.992073655128479,
            0.9950889945030212,
            0.992155909538269,
            0.98876953125
        ]
    },
    "3655": {
        "similarity": 0.9980679750442505,
        "body": "    W, H = map(int, input().split())\n    robot_image = [list(map(int, input().split())) for _ in range(H)]\n    floor_image = [list(map(int, input().split())) for _ in range(H)]\n\n    max_match = 0\n    candidates = []\n    for i in range(floor_image[0][1:]):\n        for j in range(floor_image[:, 0]):\n            match_count = sum(min(robot_image[k], floor_image[i+k][j+k]) for k in range(W))\n            if match_count > max_match:\n                max_match = match_count\n                candidates = [(i, j)]\n            elif match_count == max_match:\n                candidates.append((i, j))\n\n    print('\\n'.join(f\"{x} {y}\" for x, y in sorted(candidates)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980141520500183,
            0.9974263906478882,
            0.9977396726608276,
            0.997417151927948,
            0.9961216449737549,
            0.997175931930542,
            0.9920373558998108,
            0.9976241588592529,
            0.9967327117919922,
            0.9970664978027344,
            0.9967450499534607,
            0.9980470538139343,
            0.9973276853561401,
            0.9976903200149536,
            0.9973247051239014,
            0.9980521202087402,
            0.9974318146705627,
            0.9978203177452087,
            0.9976275563240051,
            0.9980679750442505
        ]
    },
    "3589": {
        "similarity": 0.9979007244110107,
        "body": "    counts = [0] * 9\n    for x in range(L, R + 1):\n        num = x\n        while num > 0:\n            product = 1\n            while num % 10 != 0:\n                product *= num % 10\n                num //= 10\n            counts[product] += 1\n    print(*counts)\n\nL, R = map(int, input().split())\ncount_digits(L, R)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974445700645447,
            0.997043788433075,
            0.9974111318588257,
            0.9967020750045776,
            0.9963374733924866,
            0.9969888925552368,
            0.9979007244110107,
            0.9926565289497375,
            0.9925748109817505,
            0.9974290728569031,
            0.9974182844161987,
            0.996616780757904,
            0.9971446990966797,
            0.9956094622612,
            0.9966387748718262,
            0.9972664713859558,
            0.9968295693397522,
            0.9972661733627319,
            0.9952688813209534,
            0.9973429441452026
        ]
    },
    "3257": {
        "similarity": 0.9960237741470337,
        "body": "import math\n\na, b, c = map(float, input().split())\n\nif a + b > c and a + c > b and b + c > a:\n    area = (math.sqrt(3) / 4) * min(a**2, b**2, c**2)\n    print(area)\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956028461456299,
            0.9899419546127319,
            0.995768129825592,
            0.9960237741470337,
            0.9937142729759216,
            0.9949794411659241,
            0.9948652386665344,
            0.9936692118644714,
            0.9957494139671326,
            0.9943369626998901,
            0.9955722689628601,
            0.9956421256065369,
            0.9926103353500366,
            0.9947654604911804,
            0.9944006204605103,
            0.9941843152046204,
            0.9952410459518433,
            0.9951618909835815,
            0.9956519603729248,
            0.9951868653297424
        ]
    },
    "3927": {
        "similarity": 0.9962955117225647,
        "body": "n = int(input())\na = list(map(int, input().split()))\nmax_weights = 0\nfor k in range(1, n + 1):\n    for m in range(sum(a), -1, -1):\n        if any(sum(w) == m for w in combinations(a, k)) and max_weights < k:\n            max_weights = k\nprint(max_weights)",
        "result": "timed out",
        "similarities": [
            0.9958226084709167,
            0.9942852854728699,
            0.99371337890625,
            0.9910103678703308,
            0.9953474998474121,
            0.9943326711654663,
            0.9952782392501831,
            0.9934256672859192,
            0.9934929609298706,
            0.9953100085258484,
            0.995212972164154,
            0.989932119846344,
            0.9935202598571777,
            0.9881845116615295,
            0.9956920146942139,
            0.9948039650917053,
            0.9962955117225647,
            0.992432177066803,
            0.9954808950424194,
            0.9936776757240295
        ]
    },
    "3319": {
        "similarity": 0.9980575442314148,
        "body": "    n, nx, ny, nz = map(int, input().split())\n    planets = []\n    for _ in range(n):\n        m, x, y, z, vx, vy, vz = map(int, input().split())\n        planets.append((m, (x % nx, y % ny, z % nz), (vx, vy, vz)))\n\n        x, y, z, vx, vy, vz = planet[1][0], planet[1][1], planet[1][2], planet[2][0], planet[2][1], planet[2][2]\n        return (planet[0], ((x + vx) % nx, (y + vy) % ny, (z + vz) % nz), (vx, vy, vz))\n\n        collisions = []\n        for i in range(len(planets)):\n            for j in range(i+1, len(planets)):\n                if planets[i][1] == planets[j][1]:\n                    collisions.append((i, j))\n        return collisions\n\n    time = 0\n    while True:\n        new_planets = []\n        collisions = find_collisions(planets)\n        if not collisions: break\n        for i in range(len(planets)):\n            if i not in [c[0] for c in collisions]:\n                new_planets.append(update_planet(planets[i]))\n            else:\n                j = next(c[1] for c in collisions if c[0] == i)\n                new_mass = planets[i][0] + planets[j][0]\n                new_vx = (planets[i][2][0]*planets[i][0] + planets[j][2][0]*planets[j][0]) // new_mass\n                new_vy = (planets[i][2][1]*planets[i][0] + planets[j][2][1]*planets[j][0]) // new_mass\n                new_vz = (planets[i][2][2]*planets[i][0] + planets[j][2][2]*planets[j][0]) // new_mass\n                new_planets.append((new_mass, planets[i][1], (new_vx, new_vy, new_vz)))\n        planets = new_planets\n        time += 1\n\n    planets.sort(key=lambda x: (-x[0], x[1]))\n    print(len(planets))\n    for i, planet in enumerate(planets):\n        print(f\"P{i}: {planet[0]} {' '.join(map(str, planet[1]))} {' '.join(map(str, planet[2]))}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974377155303955,
            0.9975324273109436,
            0.9960964918136597,
            0.9975786805152893,
            0.9976820945739746,
            0.9978073835372925,
            0.997569739818573,
            0.99759441614151,
            0.9977999329566956,
            0.9964847564697266,
            0.9975603818893433,
            0.9974516034126282,
            0.9969523549079895,
            0.9966163635253906,
            0.9970341920852661,
            0.9958627820014954,
            0.9980575442314148,
            0.9962090253829956,
            0.9977955222129822,
            0.9976052045822144
        ]
    },
    "3009": {
        "similarity": 0.9962194561958313,
        "body": "    N = int(input())\n    lamps = [tuple(map(int, input().split())) for _ in range(N)]\n    positive, negative = [], []\n    for x, y, e in lamps:\n        if e > 0:\n            positive.append((x, y))\n        else:\n            negative.append((x, y))\n    if not positive or not negative:\n        print(\"IMPOSSIBLE\")\n        return\n        return ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    min_distance = float('inf')\n    for p in positive:\n        for n in negative:\n            min_distance = min(min_distance, distance(*p, *n))\n    print(min_distance)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953398704528809,
            0.9946606159210205,
            0.9958871603012085,
            0.9961764812469482,
            0.9945359826087952,
            0.9948281049728394,
            0.9961174726486206,
            0.990181565284729,
            0.9954586029052734,
            0.9956449270248413,
            0.9959725141525269,
            0.9957570433616638,
            0.9948922395706177,
            0.9949750304222107,
            0.9962194561958313,
            0.9941446185112,
            0.9952155947685242,
            0.9956484436988831,
            0.9949974417686462,
            0.990034818649292
        ]
    },
    "3896": {
        "similarity": 0.9945508241653442,
        "body": "    x = int(input(), 2)\n    n = len(bin(x)[2:])\n    complexity = sum((x >> i & 1) * ((n - i - 1) % (10**9 + 7)) for i in range(n))\n    print(complexity % (10**9 + 7))\n\ndance_complexity()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9786726236343384,
            0.9934560060501099,
            0.9940786957740784,
            0.9916567802429199,
            0.9922174215316772,
            0.9887092113494873,
            0.9933613538742065,
            0.9899685382843018,
            0.9943476319313049,
            0.994407057762146,
            0.9925860166549683,
            0.9931182861328125,
            0.9927341341972351,
            0.9932150840759277,
            0.9945508241653442,
            0.9836829304695129,
            0.9903578758239746,
            0.9942598938941956,
            0.9901406168937683,
            0.9908826947212219
        ]
    },
    "3509": {
        "similarity": 0.9976884126663208,
        "body": "    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, t = map(int, input().split())\n        graph[u - 1].append((v - 1, t))\n    dp = [float('inf')] * n\n    dp[0] = 0\n    q = [(0, 0)]\n    while q:\n        t, u = heapq.heappop(q)\n        if t > dp[u]:\n            continue\n        for v, w in graph[u]:\n            next_t = max(t + w, a)\n            if next_t <= b and next_t < dp[v]:\n                dp[v] = next_t\n                heapq.heappush(q, (next_t, v))\n    print(max(0, dp[n - 1] - a))\n\nshortest_path()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970881938934326,
            0.9976884126663208,
            0.9954346418380737,
            0.9969486594200134,
            0.9972966909408569,
            0.9973480105400085,
            0.9975305199623108,
            0.9925428032875061,
            0.9965116381645203,
            0.9966275095939636,
            0.9964925646781921,
            0.9951583743095398,
            0.9971545338630676,
            0.9921989440917969,
            0.9975507855415344,
            0.997166097164154,
            0.9968786835670471,
            0.997515857219696,
            0.9971218109130859,
            0.9970550537109375
        ]
    },
    "3547": {
        "similarity": 0.9954339861869812,
        "body": "    n = int(input())\n    rectangles = [tuple(map(float, input().split())) for _ in range(n)]\n    x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n    for x1, y1, x2, y2 in rectangles:\n        x_min = min(x_min, x1)\n        y_min = min(y_min, y1)\n        x_max = max(x_max, x2)\n        y_max = max(y_max, y2)\n    area = (x_max - x_min) * (y_max - y_min)\n    print(round(area, 2))\n\ntotal_area()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925347566604614,
            0.9911327362060547,
            0.9952853322029114,
            0.9877716898918152,
            0.9929319620132446,
            0.9928738474845886,
            0.9941515922546387,
            0.991739809513092,
            0.9916185140609741,
            0.9936909079551697,
            0.9910592436790466,
            0.9931366443634033,
            0.9951183795928955,
            0.9954339861869812,
            0.9919049143791199,
            0.9940518140792847,
            0.9923973083496094,
            0.9935786724090576,
            0.9906349182128906,
            0.9918841123580933
        ]
    },
    "3017": {
        "similarity": 0.9939281344413757,
        "body": "    power = pow(2, e)\n    digits = str(power)\n    count = sum(int(x) for x in range(min(n + 1, pow(10, len(digits)))) if digits in str(x))\n    return count\n\nn, e = map(int, input().split())\nprint(count_numbers_with_power(n, e))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935135245323181,
            0.9939281344413757,
            0.9921757578849792,
            0.9911465048789978,
            0.9915578961372375,
            0.9923995137214661,
            0.9919354319572449,
            0.9925828576087952,
            0.9817469716072083,
            0.9931550621986389,
            0.9934281706809998,
            0.9936336874961853,
            0.9798572063446045,
            0.9905498027801514,
            0.9916666746139526,
            0.992027997970581,
            0.9934359192848206,
            0.9923998117446899,
            0.9927598834037781,
            0.9932675957679749
        ]
    },
    "3076": {
        "similarity": 0.9973678588867188,
        "body": "    n, k = map(int, input().split())\n    jewels = [tuple(map(int, input().split())) for _ in range(n)]\n    dp = [0] * (k + 1)\n    for s, v in jewels:\n        for i in range(k, s - 1, -1):\n            dp[i] = max(dp[i], dp[i - s] + v)\n    return ' '.join(map(str, dp[1:]))\n\nprint(knapsack_dp())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960613250732422,
            0.9931750893592834,
            0.996854305267334,
            0.9963995218276978,
            0.9969655275344849,
            0.9943857789039612,
            0.9950385093688965,
            0.9950046539306641,
            0.9964531660079956,
            0.9964398741722107,
            0.9970013499259949,
            0.9967454671859741,
            0.9955679178237915,
            0.9963760375976562,
            0.9973678588867188,
            0.995521068572998,
            0.9935726523399353,
            0.9949551820755005,
            0.9965451955795288,
            0.9964618682861328
        ]
    },
    "3923": {
        "similarity": 0.996476948261261,
        "body": "N, A, B = map(int, input().split())\nP = list(range(1, N + 1))\nfor i in range(N):\n    if (i % A == 0 or i % B == 0) and P[i] != i:\n        j = i\n        while P[j] != i:\n            P[j], P[P[j]] = P[P[j]], P[j]\nprint(*P)",
        "result": "timed out",
        "similarities": [
            0.9944198131561279,
            0.9958904981613159,
            0.9950832724571228,
            0.993403971195221,
            0.9963776469230652,
            0.9960567355155945,
            0.9893895387649536,
            0.9939509034156799,
            0.9950803518295288,
            0.995011568069458,
            0.9951888918876648,
            0.9949350953102112,
            0.9958761930465698,
            0.9956795573234558,
            0.9943817853927612,
            0.9922067523002625,
            0.9959919452667236,
            0.9949999451637268,
            0.9949933290481567,
            0.996476948261261
        ]
    },
    "3332": {
        "similarity": 0.9950351715087891,
        "body": "    n = int(input())\n    streams = [tuple(map(int, input().split())) for _ in range(n)]\n    streams.sort()\n    priority_sum = 0\n    stack = []\n    for s, d, p in streams:\n        if stack and stack[-1][0] <= s < stack[-1][1]:\n            continue\n        while stack and stack[-1][1] <= s:\n            stack.pop()\n        if not stack or (stack and stack[-1][0] > s):\n            priority_sum += p\n            stack.append((s, s+d))\n    print(priority_sum)\n\nmax_total_priority()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925839304924011,
            0.9938620328903198,
            0.9922838807106018,
            0.9940308332443237,
            0.9915739297866821,
            0.9945951700210571,
            0.9935280680656433,
            0.9940446615219116,
            0.9894906878471375,
            0.9937953948974609,
            0.9927938580513,
            0.994096040725708,
            0.9920250773429871,
            0.992312490940094,
            0.9897786378860474,
            0.9934865236282349,
            0.9950351715087891,
            0.9915086627006531,
            0.9928346276283264,
            0.9936420917510986
        ]
    },
    "3240": {
        "similarity": 0.9950659871101379,
        "body": "    k, v = map(int, input().split())\n    voters = [tuple(map(float, input().split())) for _ in range(v - 1)]\n    max_expect = 0\n    opt_ballots = 0\n    for ballots in range(2 ** k):\n        expect = sum(p * (ballots ^ b) & (1 << i) for i, (p, b) in enumerate(voters))\n        if expect > max_expect:\n            max_expect = expect\n            opt_ballots = ballots\n    print((opt_ballots | voters[-1][1]) % (2 ** k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9889596700668335,
            0.9925801157951355,
            0.9943954348564148,
            0.9938880801200867,
            0.9940712451934814,
            0.9923151731491089,
            0.9943239092826843,
            0.9884567260742188,
            0.9947478771209717,
            0.9946987628936768,
            0.9950659871101379,
            0.9931486248970032,
            0.9927052855491638,
            0.9935704469680786,
            0.9907951354980469,
            0.9948568940162659,
            0.9888776540756226,
            0.9921214580535889,
            0.9945598244667053,
            0.9942275881767273
        ]
    },
    "3368": {
        "similarity": 0.9959569573402405,
        "body": "n, m = map(int, input().split())\nanimals_in_enclosures = {}\nfor _ in range(n):\n    animal_type, num_animals = input().split(' ', 1)\n    animals_in_enclosures[animal_type] = [line.strip() for line in input().split()[1:]]\n    visited = set()\n        if len(visited) >= m:\n            return True\n        for animal in animals_in_enclosures[animal_type]:\n            if animal not in visited and enclosure_type == animal:\n                visited.add(animal)\n                if dfs(animal_type, animal):\n                    return True\n        return False\n    for animal_type in animals_in_enclosures:\n        if dfs(animal_type, animal_type):\n            print('POSSIBLE')\n            return\nprint('IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959569573402405,
            0.9929315447807312,
            0.9951972961425781,
            0.9935922026634216,
            0.9948548078536987,
            0.9955267906188965,
            0.9938951134681702,
            0.9956984519958496,
            0.9935983419418335,
            0.9937312602996826,
            0.9921593070030212,
            0.9953033328056335,
            0.9951404929161072,
            0.9935462474822998,
            0.9920437335968018,
            0.9948369264602661,
            0.9942885041236877,
            0.9926010966300964,
            0.9943640828132629,
            0.9897521138191223
        ]
    },
    "3538": {
        "similarity": 0.9961668252944946,
        "body": "n, d = map(int, input().split())\nfrogs = [tuple(map(int, input().split())) for _ in range(n)]\n\n    return frog[0] + sum(pile[2]) > d\n\n    frogs.sort(reverse=True)\n    escaping = 0\n    while frogs:\n        current_pile = []\n        for _ in range(n):\n            if can_escape(frogs[-1], current_pile) and sum([f[1] for f in current_pile]) + frogs[-1][1] <= frogs[-1][2]:\n                current_pile.append(frogs.pop())\n                escaping += 1\n            else:\n                break\n    return escaping\n\nprint(max_frogs_escaping())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960554242134094,
            0.9959198832511902,
            0.9954383373260498,
            0.9948126077651978,
            0.9948477745056152,
            0.9961261749267578,
            0.9954700469970703,
            0.9926386475563049,
            0.9918887615203857,
            0.9942927956581116,
            0.995329737663269,
            0.9960660338401794,
            0.9954534769058228,
            0.993414044380188,
            0.9958651661872864,
            0.9961668252944946,
            0.9956732392311096,
            0.9922687411308289,
            0.9961631298065186,
            0.9945756196975708
        ]
    },
    "3183": {
        "similarity": 0.9980857372283936,
        "body": "    n, m, s, t = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    capacities = []\n    costs = []\n\n    for i in range(m):\n        u, v, c, w = map(int, input().split())\n        graph[u].append((v, c, w))\n        graph[v].append((u, 0, -w))\n        capacities.append(c)\n        costs.append(w)\n\n        if node == t:\n            return flow, cost\n        for i in range(len(graph[node])):\n            v, cap, weight = graph[node][i]\n            if cap > 0 and not visited[i]:\n                visited[i] = True\n                flow2, cost2 = dfs(v, min(flow, cap), cost - weight)\n                if flow2 > 0:\n                    graph[node][i] = (v, cap - flow2, weight)\n                    graph[v][i^1] = (node, flow2, -weight)\n                    return flow2, cost2\n                visited[i] = False\n\n        return 0, float('inf')\n\n    max_flow = 0\n    min_cost = float('inf')\n    for _ in range(n):\n        visited = [False]*len(graph[s])\n        flow, cost = dfs(s, float('inf'), float('inf'))\n        max_flow += flow\n        if flow > 0:\n            min_cost = min(min_cost, cost)\n\n    print(max_flow, sum(costs) - min_cost)\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979158043861389,
            0.9974137544631958,
            0.997952938079834,
            0.9978190064430237,
            0.9980857372283936,
            0.997608482837677,
            0.997458815574646,
            0.9975969195365906,
            0.9945932626724243,
            0.997298002243042,
            0.997003436088562,
            0.9969803690910339,
            0.9971734881401062,
            0.9976074695587158,
            0.9975284934043884,
            0.9957467913627625,
            0.9963308572769165,
            0.9970713257789612,
            0.9965202212333679,
            0.9975854754447937
        ]
    },
    "3916": {
        "similarity": 0.9939290285110474,
        "body": "import math\n\n    n = int(input())\n    k = list(map(int, input().split()))\n    fact = [1] * 5001\n    for i in range(2, len(fact)):\n        fact[i] = i * fact[i-1]\n    paths = [math.inf] * (n+1)\n    total = 0\n    for i in range(n):\n        total += k[i]\n        if paths[k[i]] > total:\n            paths[k[i]] = total\n    print(min(paths))\n\nif __name__ == '__main__':\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933921694755554,
            0.9907702207565308,
            0.9915544390678406,
            0.9931401014328003,
            0.9933866262435913,
            0.9913892149925232,
            0.9863588213920593,
            0.9928674101829529,
            0.9935832023620605,
            0.9907578825950623,
            0.9939290285110474,
            0.9687903523445129,
            0.9835919737815857,
            0.9896557331085205,
            0.9930561780929565,
            0.9910064339637756,
            0.9927780032157898,
            0.9909763336181641,
            0.9919298887252808,
            0.9937989115715027
        ]
    },
    "3195": {
        "similarity": 0.9957917928695679,
        "body": "T_g, T_y, T_r = map(int, input().split())\nn = int(input())\nobs = []\nfor _ in range(n):\n    t, c = input().split()\n    obs.append((int(t), {'green': 'G', 'yellow': 'Y', 'red': 'R'}[c]))\n\nT = 0\nfor t, c in obs:\n    if c == 'G':\n        T_g = min(T_g, t - T)\n        T += T_g\n    elif c == 'Y':\n        T_y = min(T_y, t - T)\n        T += T_y + T_g\n    else:  # R\n        T_r = min(T_r, t - T)\n        T += T_y + T_g + T_r\n\nt_q, c_q = input().split()\np = 0 if (int(t_q) - T) % (T_g + T_y + T_r) != int(c_q in 'GY') else 1 / max(T_g + T_y + T_r, 1)\nprint(p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935535788536072,
            0.9947311878204346,
            0.9953362345695496,
            0.9955074787139893,
            0.9956074953079224,
            0.9935024976730347,
            0.9936999082565308,
            0.9930544495582581,
            0.9873515963554382,
            0.9954060912132263,
            0.9912575483322144,
            0.9954450726509094,
            0.9957917928695679,
            0.9937968850135803,
            0.9951704144477844,
            0.9956943988800049,
            0.9953887462615967,
            0.9952021241188049,
            0.9949929118156433,
            0.9955980181694031
        ]
    },
    "3998": {
        "similarity": 0.9955871105194092,
        "body": "n = int(input())\nratings = list(map(int, input().split()))\n\nmax_rating = max(ratings)\ndiff = [max_rating - r for r in ratings]\n\nmatch_strategy = []\ntotal_matches = 0\n\nwhile any(diff):\n    match_participants = [i for i in range(n) if diff[i] > 0]\n    if not match_participants:\n        break\n    match_strategy.append(''.join(['1' if i in match_participants else '0' for i in range(n)]))\n    for i in match_participants:\n        diff[i] -= 1\n    total_matches += 1\n\nprint(max_rating)\nprint(total_matches)\nfor line in match_strategy:\n    print(line)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935462474822998,
            0.9955090284347534,
            0.995166003704071,
            0.9941064715385437,
            0.9946991801261902,
            0.9939306378364563,
            0.9857661724090576,
            0.9909775257110596,
            0.9953360557556152,
            0.9951888918876648,
            0.99284827709198,
            0.9950478076934814,
            0.9948077201843262,
            0.9950324892997742,
            0.9915036559104919,
            0.9903000593185425,
            0.9955871105194092,
            0.9925253987312317,
            0.9933210611343384,
            0.9948742389678955
        ]
    },
    "3150": {
        "similarity": 0.9954575896263123,
        "body": "    N = int(input())\n    trenches = [tuple(map(int, input().split())) for _ in range(N)]\n    guards = []\n    for x1, y1, x2, y2 in trenches:\n        if x1 == x2: # vertical trench\n            guards.append((min(y1, y2), max(y1, y2)))\n        elif y1 == y2: # horizontal trench\n            guards.append((min(x1, x2), max(x1, x2)))\n    guards.sort()\n    ways = 0\n    for i in range(len(guards) - 2):\n        if guards[i][1] < guards[i+1][0]:\n            ways += 1\n    print(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9830362200737,
            0.9935044050216675,
            0.9918409585952759,
            0.9932726621627808,
            0.9945377707481384,
            0.9938467144966125,
            0.9931724071502686,
            0.9943519234657288,
            0.9937352538108826,
            0.9920414686203003,
            0.9934157133102417,
            0.9950668215751648,
            0.9934208393096924,
            0.9950366020202637,
            0.99298495054245,
            0.9895797371864319,
            0.9938129782676697,
            0.992182195186615,
            0.9954575896263123,
            0.9948740601539612
        ]
    },
    "3566": {
        "similarity": 0.9957038760185242,
        "body": "    guests = list(map(int, input().split()))\n    queries = []\n    for _ in range(q):\n        i, x = map(int, input().split())\n        queries.append((i, x))\n\n    position = 0\n    for _, (i, _) in enumerate(queries):\n        guests[i] += 1 if _ % 2 == 0 else -1\n        left, right = sum(guests[:position]), sum(guests[position+1:])\n        while abs(left-right) > min(left, right):\n            if left < right:\n                position += 1\n            else:\n                position -= 1\n        print(position)\n\nfind_position(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950186014175415,
            0.9949706196784973,
            0.9908778667449951,
            0.9944387674331665,
            0.9933695793151855,
            0.9931766986846924,
            0.9944844841957092,
            0.9950986504554749,
            0.9955165386199951,
            0.9934571981430054,
            0.9920397400856018,
            0.9936283826828003,
            0.9911497235298157,
            0.9951358437538147,
            0.9956236481666565,
            0.9932795166969299,
            0.9945427775382996,
            0.9957038760185242,
            0.9888114929199219,
            0.9949837923049927
        ]
    },
    "3401": {
        "similarity": 0.9963255524635315,
        "body": "Here is the Python function to solve the problem:\n\nimport sys\nfrom heapq import heappush, heappop\n\n    n, s, t, q = map(int, input().split())\n    hills = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        hills.append((x, y, h))\n\n    springs = list(map(lambda x: hills[x - 1], map(int, input().split())))\n    towns = list(map(lambda x: hills[x - 1], map(int, input().split())))\n\n    graph = [[] for _ in range(n)]\n    distances = [float('inf')] * n\n    distances[0] = 0\n\n    heap = [(0, 0)]\n\n    while heap:\n        dist, u = heappop(heap)\n        if dist > distances[u]:\n            continue\n        for v in range(n):\n            if abs(hills[u][2] - hills[v][2]) <= q and \\\n               (hills[u][0], hills[u][1]) != (hills[v][0], hills[v][1]):\n                new_dist = dist + ((hills[u][0] - hills[v][0]) ** 2 +\n                                   (hills[u][1] - hills[v][1]) ** 2) ** 0.5\n                if new_dist < distances[v]:\n                    distances[v] = new_dist\n                    graph[u].append(v)\n                    heappush(heap, (new_dist, v))\n\n    total_distance = sum(distances[i] for i in range(n) if i in springs or i in towns)\n\n    if total_distance == float('inf'):\n        print(\"IMPOSSIBLE\")\n    else:\n        print(\"{:.6f}\".format(total_distance))\n\nfind_min_distance()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954502582550049,
            0.9950812458992004,
            0.9917094707489014,
            0.9958520531654358,
            0.9860448241233826,
            0.9959170818328857,
            0.9956033825874329,
            0.9962838888168335,
            0.9961475729942322,
            0.9913102984428406,
            0.9957913756370544,
            0.9963255524635315,
            0.9949487447738647,
            0.9951543211936951,
            0.9962026476860046,
            0.9931044578552246,
            0.9955683350563049,
            0.9954512715339661,
            0.9950068593025208,
            0.9956967234611511
        ]
    },
    "3660": {
        "similarity": 0.9970282316207886,
        "body": "    message = input()\n    n = int(input())\n    stickers = []\n    for _ in range(n):\n        word, price = input().split()\n        stickers.append((word, int(price)))\n    dp = [float('inf')] * (len(message) + 1)\n    dp[0] = 0\n    for i in range(1, len(message) + 1):\n        for word, price in stickers:\n            if message.startswith(word, i - len(word)):\n                dp[i] = min(dp[i], dp[i - len(word)] + price)\n    return \"IMPOSSIBLE\" if dp[-1] == float('inf') else dp[-1]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970282316207886,
            0.9963013529777527,
            0.9968354105949402,
            0.9950039386749268,
            0.9931634664535522,
            0.9948151111602783,
            0.9967118501663208,
            0.9966798424720764,
            0.99612957239151,
            0.9926193952560425,
            0.9966410398483276,
            0.9955534934997559,
            0.9964015483856201,
            0.9953567981719971,
            0.9966812133789062,
            0.9953699707984924,
            0.9949971437454224,
            0.9923242330551147,
            0.9952654838562012,
            0.9969657063484192
        ]
    },
    "3721": {
        "similarity": 0.9944010376930237,
        "body": "n, m, q = map(int, input().split())\nhave = {tuple(map(int, input().split())) for _ in range(q)}\nans = n * m - q\nfor r in range(1, n + 1):\n    for c in range(1, m + 1):\n        if (r, c) not in have:\n            ans += have.get((r - 1, c), 0) * have.get((r, c - 1), 0)\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.99020916223526,
            0.9889252185821533,
            0.9911598563194275,
            0.9933467507362366,
            0.992156982421875,
            0.9908983111381531,
            0.9912175536155701,
            0.9944010376930237,
            0.9937713146209717,
            0.9933803081512451,
            0.9913315176963806,
            0.9943861961364746,
            0.9928440451622009,
            0.9907721281051636,
            0.9893915057182312,
            0.9918080568313599,
            0.9864526391029358,
            0.9937909841537476,
            0.9894306063652039,
            0.9913786053657532
        ]
    },
    "3811": {
        "similarity": 0.9952587485313416,
        "body": "from math import gcd\n\n    n = int(input())\n    pairs = [tuple(map(int, input().split())) for _ in range(n)]\n    primes = set()\n    for a, b in pairs:\n        p = 2\n        while True:\n            if a % p == 0 and b % p == 0:\n                primes.add(p)\n                break\n            p += 1\n    return max(primes) if primes else -1\n\nprint(wcd())",
        "result": "failed: testcase 0",
        "similarities": [
            0.993992269039154,
            0.9937039613723755,
            0.9947597980499268,
            0.9916670918464661,
            0.9906080365180969,
            0.9877082705497742,
            0.9919590353965759,
            0.9918114542961121,
            0.9948479533195496,
            0.9897801280021667,
            0.990464448928833,
            0.9926382303237915,
            0.993763267993927,
            0.9952587485313416,
            0.9938618540763855,
            0.9946478009223938,
            0.9899536967277527,
            0.9946175813674927,
            0.9943734407424927,
            0.9936676025390625
        ]
    },
    "3528": {
        "similarity": 0.9956964254379272,
        "body": "    N = int(input())\n    nails = sorted([tuple(map(int, input().split())) for _ in range(N)])\n    directions = input()\n\n        if direction == 'L':\n            x = min(x for x, y in nails)\n        elif direction == 'R':\n            x = max(x for x, y in nails)\n        elif direction == 'U':\n            y = max(y for x, y in nails)\n        else:\n            y = min(y for x, y in nails)\n\n        new_nails = [(x1, y1) for x1, y1 in nails if (direction == 'L' and x1 != x) or (direction == 'R' and x1 != x) or (direction == 'U' and y1 != y) or (direction == 'D' and y1 != y)]\n        return new_nails\n\n        if len(nails) <= 2:\n            return 0.0\n        x1, y1 = nails[0]\n        x2, y2 = nails[-1]\n        area = abs((x2 - x1) * (y2 + y1)) / 2.0\n        return area\n\n    areas = []\n    for direction in directions:\n        nails = remove_nail(nails, direction)\n        area = calculate_area(nails)\n        areas.append(\"{:.1f}\".format(area))\n    print('\\n'.join(areas))\n\ncalculate_areas()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953458905220032,
            0.9950568675994873,
            0.9918367266654968,
            0.9939014911651611,
            0.9953734874725342,
            0.9943284392356873,
            0.9935407042503357,
            0.9947385191917419,
            0.9952245950698853,
            0.9899815917015076,
            0.9948604106903076,
            0.9942721128463745,
            0.9953651428222656,
            0.9938958883285522,
            0.9950807690620422,
            0.9956964254379272,
            0.9918487071990967,
            0.9926425814628601,
            0.9925679564476013,
            0.9933558106422424
        ]
    },
    "3890": {
        "similarity": 0.996724009513855,
        "body": "MOD = 10**9 + 7\nn, k = map(int, input().split())\ndp = [0] * (n + 1)\ndp[1] = 1\nfor i in range(2, n + 1):\n    if i <= k:\n        dp[i] = sum(dp[:i]) % MOD\n    else:\n        dp[i] = dp[k] * dp[i - k] % MOD\nprint(sum(dp) % MOD)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963061809539795,
            0.9939643740653992,
            0.9965042471885681,
            0.9965376853942871,
            0.995712161064148,
            0.9961742758750916,
            0.9933197498321533,
            0.9955067038536072,
            0.9958211779594421,
            0.9954191446304321,
            0.9938763380050659,
            0.996496319770813,
            0.9957210421562195,
            0.9954791069030762,
            0.9960862994194031,
            0.996124267578125,
            0.9950692057609558,
            0.995620846748352,
            0.996724009513855,
            0.9942358732223511
        ]
    },
    "3534": {
        "similarity": 0.9951683878898621,
        "body": "N = int(input())\na = list(map(int, input().split()))\nmax_keys = 0\nK = 0\nfor i in range(1, N):\n    if a[i] > a[i-1]:\n        K += 1\n    elif a[i] < a[i-1]:\n        K -= 1\n    else:\n        continue\n    if abs(K) <= 2*10**9 and max_keys < sum((abs(a[j]-a[i]) == abs(K)) for j in range(i+1, N)):\n        max_keys = sum((abs(a[j]-a[i]) == abs(K)) for j in range(i+1, N))\nprint(max_keys)\nprint(abs(K))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9849950075149536,
            0.9948285818099976,
            0.994633138179779,
            0.9932311177253723,
            0.9926691651344299,
            0.9951683878898621,
            0.9933000206947327,
            0.9947951436042786,
            0.9947280883789062,
            0.9944084882736206,
            0.9922257661819458,
            0.9944130778312683,
            0.9938304424285889,
            0.9942028522491455,
            0.9939959645271301,
            0.9933540225028992,
            0.9923567771911621,
            0.9820399880409241,
            0.9927011132240295,
            0.9951542615890503
        ]
    },
    "3371": {
        "similarity": 0.9965077638626099,
        "body": "n, c = map(int, input().split())\nmeetings = [tuple(map(int, input().split())) for _ in range(c)]\npeople = set(range(1, n+1))\nfor year in reversed(range(1948, 2008)):\n    group1, group2 = [], []\n    for a, b, y in meetings:\n        if y < year: group1.append(a)\n        else: group2.append(a)\n    if len(group1) <= n//3 and len(group2) <= n//3:\n        print(year)\n        break\nelse:\n    print('Impossible')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9945899844169617,
            0.9955853819847107,
            0.9960859417915344,
            0.9955950379371643,
            0.9946600198745728,
            0.995408296585083,
            0.9943560361862183,
            0.9963704347610474,
            0.9942581057548523,
            0.9923274517059326,
            0.9934054017066956,
            0.9934548735618591,
            0.9957709312438965,
            0.994520902633667,
            0.996356189250946,
            0.9965077638626099,
            0.995189368724823,
            0.9950809478759766,
            0.996303141117096,
            0.9952734708786011
        ]
    },
    "3621": {
        "similarity": 0.9972790479660034,
        "body": "    MOD = int(1e9 + 7)\n    n = int(input())\n    adj = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * (1 << n) for _ in range(n)]\n    for mask in range(1, 1 << n):\n        for i in range(n):\n            if ((mask >> i) & 1):\n                for j in range(i + 1, n):\n                    if ((mask >> j) & 1) and adj[i][j]:\n                        dp[j][mask] = (dp[j][mask] + dp[i][mask - (1 << i)] + 1) % MOD\n    print(sum(dp[i][(1 << i) - 1] for i in range(n)) % MOD)\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966168999671936,
            0.9968003034591675,
            0.9968628287315369,
            0.9967048168182373,
            0.9934493899345398,
            0.9962062835693359,
            0.9961807131767273,
            0.9970297813415527,
            0.9967567324638367,
            0.9972790479660034,
            0.9939111471176147,
            0.9962921142578125,
            0.9965682029724121,
            0.9964825510978699,
            0.9961007833480835,
            0.9924421906471252,
            0.9970434308052063,
            0.996744692325592,
            0.9938784241676331,
            0.9966723918914795
        ]
    },
    "3392": {
        "similarity": 0.9975901246070862,
        "body": "    n = int(input())\n    h, v = [], []\n    for _ in range(2 * n):\n        row = list(map(int, input().split()))\n        if len(h) < n:\n            h.append(row)\n        else:\n            v.append(row)\n\n        if i < 0 or j < 0 or i >= n or j >= n:\n            return 0\n        if visited[i][j] or (height != h[i][j]):\n            return 0\n        visited[i][j] = True\n        count = 1 + dfs(i - 1, j, height) + dfs(i + 1, j, height) + dfs(i, j - 1, height) + dfs(i, j + 1, height)\n        return count\n\n    max_trees = 0\n    visited = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if not visited[i][j]:\n                max_trees = max(max_trees, dfs(i, j, h[i][j]))\n\n    print(max_trees)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963987469673157,
            0.9956173300743103,
            0.9968866109848022,
            0.9959009289741516,
            0.9975901246070862,
            0.9969319105148315,
            0.9966477155685425,
            0.9938880801200867,
            0.9952464699745178,
            0.996873140335083,
            0.9963334798812866,
            0.9960514903068542,
            0.996587872505188,
            0.9963670372962952,
            0.997175931930542,
            0.9961937665939331,
            0.9967327117919922,
            0.9967390298843384,
            0.9964340925216675,
            0.9974977374076843
        ]
    },
    "3095": {
        "similarity": 0.9966250061988831,
        "body": "    R, S = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(R)]\n    max_size = 0\n    for r1 in range(2, R+1):\n        for c1 in range(2, S+1):\n            if all(A[i][c1-1] + A[r1][j] <= A[i][j] + A[r1-1][c1-1]\n                   for i in range(1, r1) for j in range(c1, S+1)):\n                max_size = max(max_size, (r1-1)*(S-c1+1))\n    print(max_size)\n\ndetermine_size()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957036375999451,
            0.9951794147491455,
            0.9936582446098328,
            0.9960812926292419,
            0.9954436421394348,
            0.992954671382904,
            0.9960057139396667,
            0.9958298206329346,
            0.9966250061988831,
            0.9960410594940186,
            0.9965836405754089,
            0.9940659403800964,
            0.9957391023635864,
            0.9932902455329895,
            0.9939402341842651,
            0.9965272545814514,
            0.9963290691375732,
            0.9963829517364502,
            0.9954816102981567,
            0.9953438639640808
        ]
    },
    "3769": {
        "similarity": 0.9938819408416748,
        "body": "MOD = 10**9 + 7\n\n    inv = pow(k, p - 2, p)\n    ans = sum((inv * pow(i, k, MOD)) % MOD for i in range(1, p))\n    return ans % MOD\n\np, k = map(int, input().split())\nprint(count_functions(p, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904624819755554,
            0.9905282855033875,
            0.9928088784217834,
            0.9918767213821411,
            0.9857980608940125,
            0.9898584485054016,
            0.9892405271530151,
            0.9921929240226746,
            0.9913434386253357,
            0.986404538154602,
            0.9935069680213928,
            0.9936611652374268,
            0.9926071166992188,
            0.9938819408416748,
            0.9910910725593567,
            0.9909943342208862,
            0.9921987652778625,
            0.9906196594238281,
            0.9903663992881775,
            0.9829306602478027
        ]
    },
    "3563": {
        "similarity": 0.9948859810829163,
        "body": "    points = sorted(zip(*points))\n    upper = [points[0]]\n    for x, y in points[1:]:\n        if not upper or y > upper[-1][1] or (y == upper[-1][1] and x < upper[-1][0]):\n            upper.append((x, y))\n    lower = [upper.pop() for _ in range(len(upper)) if upper]\n    return len(lower + upper) - 2\n\nn = int(input())\npoints = list(map(int, input().split()))[::-1] if n % 2 == 0 else list(map(int, input().split()))\nprint(convex_hull(n, zip(*[iter(points)]*2)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920172691345215,
            0.9927621483802795,
            0.9938873648643494,
            0.9948859810829163,
            0.9917589426040649,
            0.9906529188156128,
            0.9929111003875732,
            0.9930666089057922,
            0.9897920489311218,
            0.9932281374931335,
            0.9947307109832764,
            0.9948363304138184,
            0.9931741952896118,
            0.9936830401420593,
            0.9938368797302246,
            0.9895021319389343,
            0.9940049052238464,
            0.9892721772193909,
            0.9910831451416016,
            0.9946918487548828
        ]
    },
    "3618": {
        "similarity": 0.9949031472206116,
        "body": "    mod = 998244353\n    dp = [0] * (n + 1)\n    dp[1] = 10\n    for i in range(2, n + 1):\n        dp[i] = ((dp[i - 1] * 2) % mod + dp[i - 2]) % mod\n    print(dp[n])\ncount_pairs(int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930001497268677,
            0.9944773316383362,
            0.985532283782959,
            0.9909531474113464,
            0.9943303465843201,
            0.9949031472206116,
            0.9915903806686401,
            0.9916782379150391,
            0.9940842390060425,
            0.9920600056648254,
            0.9934196472167969,
            0.9929230213165283,
            0.9829477071762085,
            0.9920162558555603,
            0.9868127703666687,
            0.9940438866615295,
            0.9870643615722656,
            0.9925180077552795,
            0.9868987202644348,
            0.9907914996147156
        ]
    },
    "3830": {
        "similarity": 0.993771493434906,
        "body": "    n = int(input())\n    s = input()\n    count = 0\n    prev = 'x'\n    for i in range(n):\n        curr = s[i]\n        if curr != '-' and prev != '-' and curr != prev:\n            break\n        elif curr == '-':\n            count += 1\n        prev = curr\n    print(count)\n\nfor _ in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9811894297599792,
            0.984756350517273,
            0.9921113848686218,
            0.9934313893318176,
            0.9892100095748901,
            0.9918056130409241,
            0.993771493434906,
            0.988783597946167,
            0.9937240481376648,
            0.9930713176727295,
            0.9910938143730164,
            0.9918574094772339,
            0.9925519227981567,
            0.9896036386489868,
            0.9923486113548279,
            0.9874190092086792,
            0.9891696572303772,
            0.9907546043395996,
            0.9922310709953308,
            0.9917596578598022
        ]
    },
    "3912": {
        "similarity": 0.9944154620170593,
        "body": "    n = int(input())\n    s = input()\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    odds = sum(v % 2 for v in freq.values())\n    if odds > 1 or (odds == 1 and n % 2 == 0):\n        print(-1)\n        return\n    half = n // 2\n    groups = [[] for _ in range(half)]\n    for c, count in sorted(freq.items()):\n        for i in range(count // 2):\n            groups[i].append(c * 2)\n        if count % 2:\n            groups[-1].append(c)\n    print(len(groups))\n    for group in groups:\n        print(''.join(group))\n\nmin_palindromes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932400584220886,
            0.989205002784729,
            0.9927380084991455,
            0.9834038615226746,
            0.9922387003898621,
            0.993792712688446,
            0.9909045696258545,
            0.9892685413360596,
            0.9932385683059692,
            0.994270920753479,
            0.9944154620170593,
            0.9938443899154663,
            0.9913052320480347,
            0.9900903105735779,
            0.9928735494613647,
            0.9925003051757812,
            0.9893305897712708,
            0.9903303384780884,
            0.9875277280807495,
            0.9920809864997864
        ]
    },
    "3878": {
        "similarity": 0.9979528188705444,
        "body": "    n, m = map(int, input().split())\n    friends = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        friends[u].append(v)\n        friends[v].append(u)\n\n        visited[node] = True\n        for friend in friends[node]:\n            if friend != parent:\n                dfs(friend, node)\n                steps.append(friend)\n\n    steps = []\n    visited = [False] * (n + 1)\n    dfs(1, None)\n\n    print(len(set(steps)))\n    print(*steps)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973664879798889,
            0.9971078634262085,
            0.9978505969047546,
            0.9979528188705444,
            0.996844470500946,
            0.9962571859359741,
            0.9977530241012573,
            0.9973888397216797,
            0.9960640668869019,
            0.9973657727241516,
            0.9971596598625183,
            0.996970534324646,
            0.997653067111969,
            0.9968229532241821,
            0.9964485168457031,
            0.996804416179657,
            0.9970282316207886,
            0.9977962970733643,
            0.9973214864730835,
            0.9945809245109558
        ]
    },
    "3010": {
        "similarity": 0.9962732195854187,
        "body": "    points = set()\n    for _ in range(int(input())):\n        x0, y0, x1, y1 = map(int, input().split())\n        dx, dy = (x1 - x0), (y1 - y0)\n        if dx == 0:\n            points.add((x0, y0))\n        elif dy == 0:\n            pass\n        else:\n            x, y = int(x0 + dy / dx * (-dy)), int(y0 + dy / dx * (-dx))\n            points.add((x, y))\n    print(-1 if len(points) > 1000 else len(points))\n\nif __name__ == '__main__':\n    count_intersections()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934465289115906,
            0.9958357810974121,
            0.9930650591850281,
            0.9916710257530212,
            0.9955775737762451,
            0.9935902953147888,
            0.9957939982414246,
            0.9958987832069397,
            0.9949007630348206,
            0.9929531812667847,
            0.994701087474823,
            0.9914627075195312,
            0.9925651550292969,
            0.9958887696266174,
            0.9931560158729553,
            0.9962732195854187,
            0.9956753253936768,
            0.9922627806663513,
            0.9940811991691589,
            0.9955577850341797
        ]
    },
    "3068": {
        "similarity": 0.9946629405021667,
        "body": "    n = int(input())\n    suspects = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    player1, player2 = set(), set()\n    for _ in range(n):\n        s1, s2, player, reply = input().split()\n        if player == '1':\n            player1.add(s1)\n            player2.add(s2) if reply != '0' else None\n        else:\n            player1.add(s2)\n            player2.add(s1) if reply != '0' else None\n\n    circle = suspects - player1 - player2\n    return len(circle) * (len(circle) - 1) * (len(circle) - 2) // 6\n\nprint(solve_black_vienna())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9897443056106567,
            0.9943458437919617,
            0.9926530122756958,
            0.9938979744911194,
            0.9900962710380554,
            0.9943761229515076,
            0.9909908175468445,
            0.9920406341552734,
            0.9937472939491272,
            0.9932588338851929,
            0.9923232197761536,
            0.990559458732605,
            0.994282603263855,
            0.9897583723068237,
            0.9925459623336792,
            0.9946629405021667,
            0.9926778674125671,
            0.9876927733421326,
            0.9937977194786072,
            0.9906977415084839
        ]
    },
    "3030": {
        "similarity": 0.9957987070083618,
        "body": "n = int(input())\nparents = [-1] * n\nvalues = []\nfor i in range(n):\n    v, p = map(int, input().split())\n    parents[i] = p\n    values.append(v)\n\ndp = [0] * n\nmax_len = 0\nfor i in range(n):\n    if parents[i] == -1:\n        max_len = 1\n        dp[i] = 1\n        continue\n\n    for j in range(i):\n        if parents[j] == i and values[i] > values[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\n    max_len = max(max_len, dp[i])\n\nprint(max_len)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924606680870056,
            0.9926672577857971,
            0.9935415983200073,
            0.9936091899871826,
            0.9884235858917236,
            0.9951919913291931,
            0.9949540495872498,
            0.9904862642288208,
            0.9934913516044617,
            0.9950937032699585,
            0.9910134077072144,
            0.9954071044921875,
            0.9957987070083618,
            0.9919478893280029,
            0.9948500394821167,
            0.9950543642044067,
            0.9876170754432678,
            0.9943292737007141,
            0.9924270510673523,
            0.9953378438949585
        ]
    },
    "3630": {
        "similarity": 0.9950193166732788,
        "body": "s1, s2 = map(str, input().split())\nresult = 0\nfor c1, c2 in zip(s1, s2):\n    diff = ord(c2) - ord(c1)\n    if diff > 0:\n        result += min(diff, 26 - diff)\n    elif diff < 0:\n        result -= min(-diff, 25 + diff)\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924639463424683,
            0.9909038543701172,
            0.9928029775619507,
            0.9931520223617554,
            0.992756187915802,
            0.9870637655258179,
            0.9943779706954956,
            0.9884126782417297,
            0.9948967695236206,
            0.9944089651107788,
            0.9906041026115417,
            0.9899742007255554,
            0.9859651327133179,
            0.9929466247558594,
            0.9946510791778564,
            0.9924389719963074,
            0.9934455752372742,
            0.9930964112281799,
            0.9950193166732788,
            0.9925915598869324
        ]
    },
    "3133": {
        "similarity": 0.9969541430473328,
        "body": "n, a, b = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor i in range(n):\n    l, r, t = map(int, input().split())\n    graph[i].append((l, 0))\n    graph[i].append((r, 1))\n\n    if node == a or node == b:\n        return 0\n    for nei, dir in graph[node]:\n        if nei != prev and (dir ^ tower) % 2:\n            return 1 + dfs(nei, node, tower ^ dir)\n    return float('inf')\n\na_path = dfs(a, -1, 0)\nb_path = dfs(b, -1, 0)\n\nif a_path == float('inf') or b_path == float('inf'):\n    print(\"indistinguishable\")\nelif a_path < b_path:\n    print(a_path)\nelse:\n    print(b_path)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957002401351929,
            0.99481201171875,
            0.996360182762146,
            0.9968721270561218,
            0.9954462647438049,
            0.995426595211029,
            0.9945186972618103,
            0.9940986633300781,
            0.9950058460235596,
            0.9960692524909973,
            0.9946758151054382,
            0.9961126446723938,
            0.9950425028800964,
            0.9962712526321411,
            0.9966068267822266,
            0.9955733418464661,
            0.9968308210372925,
            0.9969541430473328,
            0.995884120464325,
            0.996364176273346
        ]
    },
    "3480": {
        "similarity": 0.9964417815208435,
        "body": "    L, D = map(int, input().split())\n    lyrics = []\n    for _ in range(L):\n        syllables, times = input(), list(map(int, input().split()))\n        lyrics.append((syllables, times))\n    voice1, voice2 = '', ''\n    delay = 0\n    for syllable_time, (syllable, time) in enumerate(zip(*lyrics)):\n        if syllable_time >= D:\n            voice2 += '_' * max(0, syllable_time - delay) + syllable + '_'\n        else:\n            voice2 += ' ' * len(syllable)\n        delay = max(delay, syllable_time + time)\n    print('\\n'.join([voice1, voice2]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936615824699402,
            0.9916905760765076,
            0.9961639046669006,
            0.9946736693382263,
            0.9955642223358154,
            0.9961780905723572,
            0.994960606098175,
            0.9940416216850281,
            0.9964357018470764,
            0.9964417815208435,
            0.9943066835403442,
            0.9958510398864746,
            0.9927574992179871,
            0.9947940707206726,
            0.995217502117157,
            0.9927438497543335,
            0.99545818567276,
            0.9949545860290527,
            0.9937989115715027,
            0.994231104850769
        ]
    },
    "3389": {
        "similarity": 0.9958154559135437,
        "body": "    n, k = map(int, input().split())\n    videos = input()\n    clicks = 0\n    i = 0\n    while i < n:\n        clicks += 1\n        type = videos[i]\n        while i + 1 < n and videos[i+1] == type:\n            i += 1\n    print(clicks)\n\nif __name__ == \"__main__\":\n    min_clicks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937917590141296,
            0.9951339364051819,
            0.9883266091346741,
            0.9949946403503418,
            0.9888729453086853,
            0.9929538369178772,
            0.9944528341293335,
            0.9944218993186951,
            0.9940276145935059,
            0.9952694773674011,
            0.9914952516555786,
            0.9952701926231384,
            0.9950178265571594,
            0.9958154559135437,
            0.9949342012405396,
            0.9949573874473572,
            0.9947416186332703,
            0.9947074055671692,
            0.9894285798072815,
            0.9948455691337585
        ]
    },
    "3925": {
        "similarity": 0.9967749714851379,
        "body": "s = input()\nmax_len = 0\ncur_len = 1\nfor i in range(1, len(s)):\n    if s[i] != s[i-1]:\n        cur_len += 1\n    else:\n        max_len = max(max_len, cur_len)\n        cur_len = 1\nmax_len = max(max_len, cur_len)\nprint(max_len)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941408038139343,
            0.991776704788208,
            0.9922457337379456,
            0.9953711628913879,
            0.9967749714851379,
            0.9946381449699402,
            0.9931568503379822,
            0.9962586164474487,
            0.9958634972572327,
            0.9908612966537476,
            0.9965444803237915,
            0.9964374899864197,
            0.9946673512458801,
            0.9943112730979919,
            0.9966291189193726,
            0.9962282776832581,
            0.9945386648178101,
            0.996734619140625,
            0.9956008791923523,
            0.9967749714851379
        ]
    },
    "3700": {
        "similarity": 0.9946249127388,
        "body": "  n, k = map(int, input().split())\n  count = sum(1 for i in range(1, n+1) if i <= k < n-i+2)\n  print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915350079536438,
            0.9941532611846924,
            0.9912663698196411,
            0.9931712746620178,
            0.9857883453369141,
            0.9907611012458801,
            0.9922398328781128,
            0.9939063191413879,
            0.9933180809020996,
            0.9932686686515808,
            0.9909195303916931,
            0.9946249127388,
            0.9924769997596741,
            0.9921103119850159,
            0.9937243461608887,
            0.9934549927711487,
            0.9934496879577637,
            0.9941007494926453,
            0.9915350079536438,
            0.9938021302223206
        ]
    },
    "3944": {
        "similarity": 0.9908767342567444,
        "body": "MOD = 10**9 + 7\nN, M, K = map(int, input().split())\npow3 = [1] * (N + M + K + 1)\nfor i in range(1, N + M + K + 1):\n    pow3[i] = pow3[i - 1] * 3 % MOD\nres = pow3[N] * (pow3[M] + pow3[K]) % MOD\nprint(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9865671396255493,
            0.988667368888855,
            0.9874094724655151,
            0.9878092408180237,
            0.9784983396530151,
            0.9862439036369324,
            0.9894189238548279,
            0.9908767342567444,
            0.9820833802223206,
            0.9892478585243225,
            0.9778924584388733,
            0.9889960289001465,
            0.986651599407196,
            0.988553524017334,
            0.9889914989471436,
            0.9809855222702026,
            0.988334059715271,
            0.9703653454780579,
            0.9890259504318237,
            0.9905205965042114
        ]
    },
    "3821": {
        "similarity": 0.9955392479896545,
        "body": "n = int(input())\nprobs = list(map(float, input().split()))\nmax_prob = max(probs)\nprint(max_prob * (1 - sum(probs)) + sum(probs) * max_prob)",
        "result": "failed: testcase 1",
        "similarities": [
            0.992716372013092,
            0.9946380257606506,
            0.9934070110321045,
            0.9947587847709656,
            0.9917072653770447,
            0.9951601624488831,
            0.9851118326187134,
            0.9951143860816956,
            0.9934070110321045,
            0.9955392479896545,
            0.9872736930847168,
            0.994685709476471,
            0.9950030446052551,
            0.9945631623268127,
            0.9951894879341125,
            0.9949902892112732,
            0.9936894774436951,
            0.9931159019470215,
            0.994685709476471,
            0.9898210763931274
        ]
    },
    "3667": {
        "similarity": 0.9965882897377014,
        "body": "w, p = map(int, input().split())\nwell_positions = {int(x): list(map(int, input().split())) for x in range(1, w + 1)}\npipes = []\nfor _ in range(p):\n    s, x, y = map(int, input().split())\n    pipes.append(((x, y), well_positions[s], None))\n\nfor pipe in pipes:\n    pipe[2] = [p for p in pipes if p[0][0] == pipe[0][0] and p[0][1] == pipe[0][1]]\n\nintersections = {}\nfor pipe in pipes:\n    for other_pipe in pipe[2]:\n        if (pipe[1], other_pipe[1]) not in intersections:\n            intersections[(pipe[1], other_pipe[1])] = []\n        intersections[(pipe[1], other_pipe[1])].append(pipe)\n\n    visited.add(node)\n    for neighbor in intersections[node]:\n        if neighbor not in visited and dfs(neighbor, node):\n            return False\n    return True\n\nvisited = set()\nfor well, pipes in intersections.items():\n    if len(pipes) > 1:\n        if not dfs(well, None):\n            print(\"impossible\")\n            exit()\n\nprint(\"possible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956845641136169,
            0.9923267364501953,
            0.99359130859375,
            0.9959709644317627,
            0.9953605532646179,
            0.994459867477417,
            0.9947222471237183,
            0.992889404296875,
            0.9900257587432861,
            0.9960943460464478,
            0.9956817626953125,
            0.9965882897377014,
            0.9936726093292236,
            0.9947991967201233,
            0.9945357441902161,
            0.9930437803268433,
            0.994835615158081,
            0.9961408376693726,
            0.9941169619560242,
            0.9948937296867371
        ]
    },
    "3959": {
        "similarity": 0.9969764351844788,
        "body": "from collections import defaultdict\n\n    MOD = 10**9 + 7\n    n, m = map(int, input().split())\n    gyms = [list(map(int, input().split()))[1:] for _ in range(n)]\n    types = defaultdict(set)\n    for i, g in enumerate(gyms):\n        for t in set(g):\n            types[t].add(i+1)\n    plans = 0\n    for t in types.values():\n        if len(t) > 1:\n            plans += (len(t)-1)**(len(t))\n            plans %= MOD\n    return plans\n\nprint(count_plans())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941799640655518,
            0.9958102703094482,
            0.9964809417724609,
            0.9962608218193054,
            0.9928237795829773,
            0.99383944272995,
            0.9968245625495911,
            0.9964722990989685,
            0.9956449270248413,
            0.9969764351844788,
            0.9965090751647949,
            0.9923043847084045,
            0.9943934082984924,
            0.9960212707519531,
            0.9969608783721924,
            0.9950734972953796,
            0.9959379434585571,
            0.9937413930892944,
            0.9966233968734741,
            0.9965766072273254
        ]
    },
    "3692": {
        "similarity": 0.996396541595459,
        "body": "    n = int(input())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n    regions = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            d = ((circles[i][0] - circles[j][0]) ** 2 + (circles[i][1] - circles[j][1]) ** 2) ** 0.5\n            if d <= circles[i][2] + circles[j][2]:\n                regions += 1\n    print(regions)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956108927726746,
            0.9957152009010315,
            0.9946654438972473,
            0.9950981140136719,
            0.9957739114761353,
            0.9953742027282715,
            0.9960302114486694,
            0.9927616119384766,
            0.9948799014091492,
            0.9936146140098572,
            0.9899346232414246,
            0.996396541595459,
            0.9864858388900757,
            0.9919390678405762,
            0.9922774434089661,
            0.9950369000434875,
            0.9945977926254272,
            0.9902337789535522,
            0.9951995015144348,
            0.9938363432884216
        ]
    },
    "3894": {
        "similarity": 0.9953207969665527,
        "body": "    n, k = map(int, input().split())\n    piles = list(map(int, input().split()))\n    moves = 0\n\n        nonlocal moves\n        if all(p % 2 == 1 for p in piles):\n            return True\n        else:\n            moves += 1\n            return False\n\n    while can_win(piles):\n        pass\n\n    print(\"Kevin\" if moves % 2 == 0 else \"Nicky\")\n\ndetermine_winner()",
        "result": "failed: testcase 0",
        "similarities": [
            0.99425208568573,
            0.9947157502174377,
            0.9915128946304321,
            0.9953207969665527,
            0.992164134979248,
            0.9900951385498047,
            0.9886707663536072,
            0.995214581489563,
            0.9942308068275452,
            0.9929712414741516,
            0.9918545484542847,
            0.9927234649658203,
            0.9946491718292236,
            0.9924035668373108,
            0.995172381401062,
            0.994278073310852,
            0.9929488301277161,
            0.99337238073349,
            0.9853326678276062,
            0.99442058801651
        ]
    },
    "3856": {
        "similarity": 0.9954408407211304,
        "body": "    n = int(input())\n    rectangles = [tuple(map(int, input().split())) for _ in range(n)]\n    min_area = float('inf')\n    for i in range(2**n):\n        standing, lying = [], []\n        for j in range(n):\n            if (i & 1<<j) != 0:\n                lying.append(rectangles[j])\n            else:\n                standing.append(rectangles[j])\n        w = sum(max(r) for r in standing)\n        h = max(sum(min(r) for r in [lying, standing]), max(r) for r in standing)\n        min_area = min(min_area, w * h)\n    print(min_area)\n\nif __name__ == \"__main__\":\n    find_min_area()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939050078392029,
            0.9951595664024353,
            0.9945907592773438,
            0.9934654235839844,
            0.9881678223609924,
            0.9920458793640137,
            0.9903350472450256,
            0.9935088753700256,
            0.9954408407211304,
            0.9934229850769043,
            0.9925984740257263,
            0.9940544962882996,
            0.9916215538978577,
            0.9948897361755371,
            0.995087206363678,
            0.9935091733932495,
            0.9950570464134216,
            0.9924511313438416,
            0.9951456785202026,
            0.9945690631866455
        ]
    },
    "3282": {
        "similarity": 0.9968591928482056,
        "body": "P = int(input())\n\n    total = b + m\n    return sorted(str(b)) != sorted(str(m)) and sorted(str(total)) != sorted(str(b)) and sorted(str(total)) != sorted(str(m))\n\ncount = 0\nbills = []\nfor b in range(1, P // 2 + 1):\n    for m in range(b + 1, P - b + 1):\n        if can_order(b, m):\n            count += 1\n            bills.append((b, m))\n\nprint(count)\nif len(bills) > 5000:\n    print('\\n'.join(map(str, bills[:5000])))\nelse:\n    print('\\n'.join(map(str, bills)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945839643478394,
            0.9956321716308594,
            0.9954372048377991,
            0.9968591928482056,
            0.9965822100639343,
            0.9958989024162292,
            0.9958875775337219,
            0.9955669045448303,
            0.9937220215797424,
            0.9966850280761719,
            0.9966102242469788,
            0.995391845703125,
            0.9951226115226746,
            0.9961277842521667,
            0.9922692179679871,
            0.9943246245384216,
            0.9940000772476196,
            0.9953210949897766,
            0.9963480234146118,
            0.9967603087425232
        ]
    },
    "3596": {
        "similarity": 0.9972790479660034,
        "body": "import math\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\nn, k, r, s, l = map(int, input().split())\n\n    return math.gamma(z + 1)\n\n    return math.erf(x / math.sqrt(math.pi))\n\n    return sum([math.cos(k * i - x * math.sin(i)) for i in range(0, math.pi, 0.01)]) / (math.pi * 10)\n\n    return c * sum([\n        t1 * gamma(x),\n        math.pow(math.log(errf(t3 * x)), 1/t2),\n        j_k(x, k)**t4\n    ])\n\n    return sum([f(i) / math.factorial(i) * x**i for i in range(r + 1)])\n\n    if n == 0:\n        return p(x, r)\n    else:\n        return sum([p_n(i, n - 1, r) * x**i for i in range(r + n + 1)])\n\ng = p_n(0, s, r)\ndeg_g = len(str(g)) - str(g).find('.') - 2\nfor _ in range(deg_g):\n    g = g[1:]\nresult = ((g(l) + l)**2 / (math.pi * math.e) + 1/(l + 1))\nprint(round(result, 2))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967185854911804,
            0.9960618615150452,
            0.9951256513595581,
            0.9948941469192505,
            0.9946259260177612,
            0.9967414736747742,
            0.9971225261688232,
            0.9969428181648254,
            0.9952796101570129,
            0.9971226453781128,
            0.9963396787643433,
            0.9959754943847656,
            0.9953575134277344,
            0.996423602104187,
            0.9962393045425415,
            0.9971830248832703,
            0.9959474205970764,
            0.9955806732177734,
            0.9959578514099121,
            0.9972790479660034
        ]
    },
    "3540": {
        "similarity": 0.9957988262176514,
        "body": "grid = [''.join(list(input())) for _ in range(4)]\nfor i in range(2):\n    grid.insert(0, grid[-1])\n    grid.append(grid[1])\ntarget = [\"R\" * 4, \"G\" * 4, \"B\" * 4, \"Y\" * 4]\n    moves = 0\n    while grid != target:\n        for i in range(4):\n            if grid[i] != target[i]:\n                moves += 1\n                break\n        else:\n            break\n        grid.append(grid.pop(0))\n    print(moves)\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995611310005188,
            0.9935107827186584,
            0.9954031109809875,
            0.9936808347702026,
            0.992526113986969,
            0.9942497611045837,
            0.9952663779258728,
            0.9945037364959717,
            0.994290828704834,
            0.9949937462806702,
            0.9937849640846252,
            0.989848792552948,
            0.9957988262176514,
            0.9946892261505127,
            0.9949060082435608,
            0.9945113658905029,
            0.9948557615280151,
            0.9935770630836487,
            0.9932098388671875,
            0.9945271015167236
        ]
    },
    "3354": {
        "similarity": 0.9975690245628357,
        "body": "s, r, n, z = map(float, input().split())\narea_sandwich = math.pi * s ** 2\narea_pickle = math.pi * r ** 2\nmax_area_pickles = area_sandwich * (z / 100)\nnum_pickles = min(n, int(max_area_pickles // area_pickle))\nprint(num_pickles)",
        "result": "passed",
        "similarities": [
            0.9952270984649658,
            0.9972741007804871,
            0.9942082762718201,
            0.9975690245628357,
            0.9962485432624817,
            0.9975126385688782,
            0.9975411295890808,
            0.9972344636917114,
            0.9974912405014038,
            0.9957464337348938,
            0.9939620494842529,
            0.9962461590766907,
            0.9937806725502014,
            0.9969821572303772,
            0.9975205659866333,
            0.9926521182060242,
            0.9975012540817261,
            0.9966505169868469,
            0.9958887696266174,
            0.9964816570281982
        ]
    },
    "3217": {
        "similarity": 0.9925516247749329,
        "body": "    n = int(input())\n    cells = {tuple(map(int, input().split())) for _ in range(n)}\n    x_min, y_min, z_min, x_max, y_max, z_max = float('inf'), float('inf'), float('inf'), float('-inf'), float('-inf'), float('-inf')\n    for cell in cells:\n        x_min, y_min, z_min, x_max, y_max, z_max = min(x_min, cell[0]), min(y_min, cell[1]), min(z_min, cell[2]), max(x_max, cell[0]), max(y_max, cell[1]), max(z_max, cell[2])\n    return (x_max - x_min + 1) * (y_max - y_min + 1) * (z_max - z_min + 1)\n\nif __name__ == \"__main__\":\n    print(min_panels())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903095960617065,
            0.9895470142364502,
            0.9916567802429199,
            0.9905135631561279,
            0.9910591840744019,
            0.9899592995643616,
            0.9886506795883179,
            0.9872021079063416,
            0.9853659272193909,
            0.9832304120063782,
            0.9903855919837952,
            0.9905080199241638,
            0.9861093163490295,
            0.9888625741004944,
            0.9925516247749329,
            0.9837333559989929,
            0.9916074872016907,
            0.9825142621994019,
            0.9915446043014526,
            0.9893290996551514
        ]
    },
    "3520": {
        "similarity": 0.9961197376251221,
        "body": "    n, p, c = map(int, input().split())\n    pills = [list(map(int, input().split())) for _ in range(p)]\n    pills.sort(key=lambda x: x[0])\n    age = 0\n    time = 0\n    i = 0\n    while time < n:\n        if i == p or pills[i][0] > time + c:\n            time += min(n - time, pills[i][1])\n        else:\n            age += max(0, pills[i][2] + pills[i][0] - time)\n            time = pills[i][0]\n            i += 1\n    return max(age + n, age + time)\n\nprint(max_life())",
        "result": "failed: testcase 0",
        "similarities": [
            0.991154134273529,
            0.9960049390792847,
            0.9957442879676819,
            0.9940169453620911,
            0.9958341717720032,
            0.9957709312438965,
            0.9948831796646118,
            0.9959433674812317,
            0.9957122802734375,
            0.9959317445755005,
            0.9889712929725647,
            0.9956933856010437,
            0.9942977428436279,
            0.9951768517494202,
            0.9956396222114563,
            0.99570232629776,
            0.9941127300262451,
            0.9953669309616089,
            0.9961197376251221,
            0.992039144039154
        ]
    },
    "3475": {
        "similarity": 0.9976280927658081,
        "body": "t, n = map(int, input().split())\ntransport = [list(map(int, input().split())) for _ in range(t)]\npoints = [list(map(int, input().split())) for _ in range(n-1)]\n\n    curr_type = -1\n    changes = 0\n    total_dist = 0\n    prev_heading = points[i][1]\n    for j in range(i+1, n):\n        if curr_type == -1 or transport[curr_type][1] < abs(points[j-1][1] - points[j][1]):\n            curr_type += 1\n            changes += 1\n        total_dist += points[j-1][0]\n        if total_dist < transport[curr_type][0]:\n            return False\n        prev_heading = points[j][1]\n    return True\n\nk = float('inf')\nfor i in range(n):\n    for j in range(i+2, n+1):\n        if is_possible(i, -1) and is_possible(j-1, curr_type):\n            k = min(k, changes)\nprint(k if k != float('inf') else 'IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970905780792236,
            0.9976280927658081,
            0.9972004294395447,
            0.9974399209022522,
            0.9940564036369324,
            0.9966374635696411,
            0.9975594282150269,
            0.9959357380867004,
            0.9949073791503906,
            0.9966567158699036,
            0.9969721436500549,
            0.9971020221710205,
            0.9970775246620178,
            0.9959921836853027,
            0.9969075918197632,
            0.9974210858345032,
            0.9966350197792053,
            0.9964643716812134,
            0.9973148703575134,
            0.9961546063423157
        ]
    },
    "3977": {
        "similarity": 0.9962359070777893,
        "body": "    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    visited = [False] * n\n        if visited[node]:\n            return False\n        visited[node] = True\n        for neighbor in adj[node]:\n            if neighbor not in governments:\n                dfs(neighbor)\n            else:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if dfs(i) and i not in governments:\n            count += len([1 for j in adj[i] if j in governments])\n\n    print(count)\n\nn, m, k = map(int, input().split())\ngovernments = list(map(int, input().split()))\nedges = [tuple(map(int, input().split())) for _ in range(m)]\nmax_edges(n, m, k, governments, edges)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951827526092529,
            0.9957185387611389,
            0.9905447959899902,
            0.9929897785186768,
            0.9933115243911743,
            0.9931153655052185,
            0.9945818185806274,
            0.9948083758354187,
            0.9952864646911621,
            0.9962359070777893,
            0.9875978231430054,
            0.9947507977485657,
            0.9905483722686768,
            0.9926446676254272,
            0.9951278567314148,
            0.9956598877906799,
            0.9950200319290161,
            0.9934288859367371,
            0.9942342042922974,
            0.9957211017608643
        ]
    },
    "3626": {
        "similarity": 0.995394766330719,
        "body": "n = int(input())\nrects = [tuple(map(int, input().split())) for _ in range(n)]\nfor i in range(n):\n    for j in range(i+1, n):\n        if rects[i][0] < rects[j][2] and rects[i][2] > rects[j][0] and rects[i][1] < rects[j][3] and rects[i][3] > rects[j][1]:\n            print(1)\n            exit()\nprint(0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926781058311462,
            0.9889183044433594,
            0.9949705004692078,
            0.9941802620887756,
            0.9936725497245789,
            0.9945487976074219,
            0.9932010173797607,
            0.9902793765068054,
            0.995394766330719,
            0.9934720396995544,
            0.9936032891273499,
            0.9934045672416687,
            0.9927251935005188,
            0.9856794476509094,
            0.9928141236305237,
            0.9889470338821411,
            0.9946522116661072,
            0.9944416880607605,
            0.9945487976074219,
            0.9934397339820862
        ]
    },
    "3584": {
        "similarity": 0.9961349964141846,
        "body": "    import sys\n    N, M, K = map(int, sys.stdin.readline().split())\n    onions = [tuple(map(int, sys.stdin.readline().split())) for _ in range(N)]\n    posts = [tuple(map(int, sys.stdin.readline().split())) for _ in range(M)]\n\n        if len(points) <= 2:\n            return points\n        hull = []\n        while len(hull) < 3 or points[-1][0] != hull[0][0]:\n            _, min_index, max_index = min((sum(abs(x - y)) for x in hull, y in points), default=0)\n            hull.append(points.pop(min_index))\n            if len(set(x[0] for x in hull)) == 1:\n                hull.sort(key=lambda x: x[1])\n        return hull\n\n        return sum(1 for onion in onions if all(onion[x][i] < hull[i-1][x][i] and onion[x+1][i] > hull[i][x][i] for i, x in enumerate((0, 1))))\n\n        nonlocal max_protected\n        if posts_index == M:\n            return\n        selected_posts.append(posts[posts_index])\n        if len(selected_posts) <= K and (len(selected_posts) == K or posts[posts_index][0] != selected_posts[-2][0]):\n            hull = convex_hull(selected_posts)\n            protected = count_within_hull(hull)\n            max_protected = max(max_protected, protected)\n        dfs(posts_index + 1, selected_posts)\n        selected_posts.pop()\n\n    max_protected = 0\n    dfs(0, [])\n    print(max_protected)\n\nprotect_onions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935674071311951,
            0.9954721331596375,
            0.9952197670936584,
            0.995887041091919,
            0.9958415627479553,
            0.9935965538024902,
            0.9957769513130188,
            0.9948208332061768,
            0.995558500289917,
            0.9940697550773621,
            0.9953904747962952,
            0.9918320178985596,
            0.9956628680229187,
            0.9802013039588928,
            0.9932491779327393,
            0.9952053427696228,
            0.9961349964141846,
            0.9958174824714661,
            0.9950856566429138,
            0.9960027933120728
        ]
    },
    "3950": {
        "similarity": 0.9969089031219482,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    used = [False] * (n + 1)\n    for i in range(n):\n        if a[i] == 0:\n            ans[i] = 1\n            used[1] = True\n    for i in range(q):\n        l, r = input().split()\n        l, r = int(l) - 1, int(r)\n        if not used[i + 1]:\n            print(\"NO\")\n            return\n        for j in range(l, r + 1):\n            ans[j] = i + 1\n    print(\"YES\")\n    print(*ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9875361919403076,
            0.9965265989303589,
            0.9962580800056458,
            0.9965874552726746,
            0.9962288737297058,
            0.995387852191925,
            0.9935104250907898,
            0.9959810376167297,
            0.9944019317626953,
            0.9964700937271118,
            0.994942307472229,
            0.9953562021255493,
            0.9962388277053833,
            0.9949764609336853,
            0.9964109063148499,
            0.9967787861824036,
            0.9969089031219482,
            0.9944245219230652,
            0.9962466359138489,
            0.9948416352272034
        ]
    },
    "3075": {
        "similarity": 0.9974606037139893,
        "body": "    n, g = map(int, input().split())\n    stations = []\n    for _ in range(n):\n        d, c = map(int, input().split())\n        stations.append((d, c))\n\n    dp = [float('inf')] * (g + 1)\n    dp[0] = 0\n\n    for i in range(g):\n        for j in range(i + 1, g + 1):\n            if dp[i] < float('inf'):\n                d, c = stations[j - i]\n                if j >= d:\n                    cost = max(0, (j - d) * c)\n                    dp[j] = min(dp[j], dp[i] + cost)\n\n    print(\"cancel road trip\") if dp[-1] == float('inf') else print(dp[-1])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962946176528931,
            0.9963144063949585,
            0.9969733357429504,
            0.996279776096344,
            0.9927583336830139,
            0.9970241189002991,
            0.9973056316375732,
            0.99640291929245,
            0.9974606037139893,
            0.9937145709991455,
            0.9950839877128601,
            0.996433675289154,
            0.9971542358398438,
            0.9972875714302063,
            0.9974108338356018,
            0.9972148537635803,
            0.9969026446342468,
            0.9970735311508179,
            0.996253252029419,
            0.9952785968780518
        ]
    },
    "3711": {
        "similarity": 0.9944505095481873,
        "body": "n, m, k = map(int, input().split())\nif k > n + m - 1 or k % 2 == 1:\n    print(-1)\nelse:\n    cuts = k // 2\n    area = min(n * cuts, m * cuts)\n    print(area if area >= max(n, m) else -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917841553688049,
            0.9930312633514404,
            0.990997314453125,
            0.9931353330612183,
            0.9944505095481873,
            0.9932939410209656,
            0.9883236289024353,
            0.9915231466293335,
            0.9906102418899536,
            0.9924551248550415,
            0.9909211993217468,
            0.9917118549346924,
            0.9899525046348572,
            0.9879772067070007,
            0.9939926862716675,
            0.9935389161109924,
            0.9694332480430603,
            0.9921798706054688,
            0.9939316511154175,
            0.9942512512207031
        ]
    }
}