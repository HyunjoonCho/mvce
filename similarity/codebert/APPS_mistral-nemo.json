{
    "4693": {
        "similarity": 0.9957285523414612,
        "body": "    a, b = map(int, input().split())\n    result = a + b\n    if result >= 10:\n        print(\"error\")\n    else:\n        print(result)\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9908681511878967,
            0.9954026937484741,
            0.9954861998558044,
            0.9934405088424683,
            0.9954026937484741,
            0.9954168200492859,
            0.9931973218917847,
            0.9935949444770813,
            0.9951872825622559,
            0.9948611855506897,
            0.992942214012146,
            0.992942214012146,
            0.9957285523414612,
            0.9952611327171326,
            0.9929420948028564,
            0.9946369528770447,
            0.9929515719413757,
            0.9887978434562683,
            0.9951873421669006,
            0.9951873421669006
        ]
    },
    "4077": {
        "similarity": 0.9954979419708252,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    counts = [0] * (2 * 10**5 + 1)\n    for i in range(n):\n        if i > 0 and a[i - 1] < a[i]:\n            counts[a[i]] += 1\n        else:\n            counts[a[i]] -= 1\n            while counts[m] < 0:\n                m -= 1\n    print(counts[m])\n\ncount_pairs()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9884499311447144,
            0.9947775602340698,
            0.9946973919868469,
            0.994038462638855,
            0.9948102235794067,
            0.9936244487762451,
            0.9925665855407715,
            0.9950681924819946,
            0.9937555193901062,
            0.9939344525337219,
            0.9948639273643494,
            0.9954205751419067,
            0.9935072660446167,
            0.9953935742378235,
            0.9905000329017639,
            0.9923639893531799,
            0.9856314659118652,
            0.9952846169471741,
            0.9954979419708252,
            0.992557942867279
        ]
    },
    "4006": {
        "similarity": 0.9958202838897705,
        "body": "    n += 1\n    reachable = set([n])\n    while n % 10 == 0:\n        n //= 10\n        if n not in reachable:\n            reachable.add(n)\n    return len(reachable)\n\nprint(count_reachable(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929121136665344,
            0.9955045580863953,
            0.9789882302284241,
            0.994773268699646,
            0.9951549172401428,
            0.9958202838897705,
            0.995611310005188,
            0.9950098991394043,
            0.9920821189880371,
            0.9929514527320862,
            0.9920198321342468,
            0.9925107359886169,
            0.9955493807792664,
            0.995516836643219,
            0.993618905544281,
            0.9940976500511169,
            0.9922252297401428,
            0.9945147633552551,
            0.9939793944358826,
            0.994236171245575
        ]
    },
    "4556": {
        "similarity": 0.9967259764671326,
        "body": "    s = input()\n    print(s[0] + 'C')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9859936237335205,
            0.9967259764671326,
            0.9950806498527527,
            0.9967259764671326,
            0.9929775595664978,
            0.9950372576713562,
            0.9943239092826843,
            0.9965585470199585,
            0.9963720440864563,
            0.9964594841003418,
            0.9948147535324097,
            0.9959818124771118,
            0.9956369996070862,
            0.9967093467712402,
            0.9936891198158264,
            0.9953320026397705,
            0.9964210391044617,
            0.9967259764671326,
            0.9959818124771118,
            0.9965360760688782
        ]
    },
    "4571": {
        "similarity": 0.9945455193519592,
        "body": "N, M = map(int, input().split())\nX = sum(2**i * 1900 for i in range(M)) + N - M\nprint(X)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936894774436951,
            0.9926946759223938,
            0.9944396018981934,
            0.9919392466545105,
            0.9904927611351013,
            0.9873704314231873,
            0.987149715423584,
            0.9916669726371765,
            0.9936734437942505,
            0.9832699298858643,
            0.9926129579544067,
            0.992155909538269,
            0.99318927526474,
            0.9867975115776062,
            0.9945455193519592,
            0.9922067523002625,
            0.9931234121322632,
            0.9936527609825134,
            0.9928217530250549,
            0.9944819211959839
        ]
    },
    "4019": {
        "similarity": 0.9975839853286743,
        "body": "    adj = [[] for _ in range(n + 1)]\n    for i in range(m):\n        v, u = map(int, input().split())\n        adj[v].append(u)\n        adj[u].append(v)\n\n    visited = [False] * (n + 1)\n        if v == n:\n            return True\n        visited[v] = True\n        for u in adj[v]:\n            if not visited[u]:\n                if dfs(u, degree - 1) and degree >= D:\n                    print(f\"{v} {u}\")\n                    return True\n        return False\n\n    if dfs(1, 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nfind_spanning_tree(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970764517784119,
            0.9955863952636719,
            0.9959210753440857,
            0.9953247904777527,
            0.9955514669418335,
            0.996006429195404,
            0.994257390499115,
            0.9962368011474609,
            0.9975839853286743,
            0.996823251247406,
            0.997096598148346,
            0.9974837303161621,
            0.9971672892570496,
            0.9947630167007446,
            0.9960228800773621,
            0.9968937635421753,
            0.9975391030311584,
            0.994576096534729,
            0.9971303343772888,
            0.9963876008987427
        ]
    },
    "4265": {
        "similarity": 0.9944482445716858,
        "body": "s = input()\nt = input()\nprint(sum(c1 != c2 for c1, c2 in zip(s, t)))",
        "result": "passed",
        "similarities": [
            0.994197428226471,
            0.9826872944831848,
            0.994307279586792,
            0.994197428226471,
            0.994197428226471,
            0.994197428226471,
            0.9855764508247375,
            0.9918827414512634,
            0.994197428226471,
            0.9915080666542053,
            0.9941975474357605,
            0.9924348592758179,
            0.9941349029541016,
            0.9941869974136353,
            0.993402361869812,
            0.9931547045707703,
            0.994197428226471,
            0.994197428226471,
            0.9845296144485474,
            0.9944482445716858
        ]
    },
    "4657": {
        "similarity": 0.996579647064209,
        "body": "    if n % k != 0 or sum(a) % k != 0:\n        return \"NO\"\n    cnt = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cnt[i] = cnt[i - 1]\n        if a[i - 1] % 2 == 1:\n            cnt[i] += 1\n    ans = []\n    for _ in range(k):\n        l = -1\n        while cnt[l + 1] <= cnt[l]:\n            l += 1\n        ans.append(l)\n        while cnt[ans[-1]] > cnt[ans[-2]] if len(ans) > 1 else cnt[ans[-1]] >= cnt[l]:\n            ans[-1] += 1\n    return \"YES\\n\" + ' '.join(map(str, ans))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958187937736511,
            0.996579647064209,
            0.9962862730026245,
            0.9963503479957581,
            0.9945835471153259,
            0.9942331910133362,
            0.9939348101615906,
            0.9960205554962158,
            0.9946328997612,
            0.9950761198997498,
            0.9937519431114197,
            0.9948150515556335,
            0.9942367076873779,
            0.9928091168403625,
            0.99566251039505,
            0.9958113431930542,
            0.9940221905708313,
            0.9955396056175232,
            0.9953107237815857,
            0.9955285787582397
        ]
    },
    "4599": {
        "similarity": 0.9946733117103577,
        "body": "N = int(input())\ncards = list(map(int, input().split()))\nalice_score, bob_score = 0, 0\nfor i in range(N):\n    if i % 2 == 0:\n        alice_score += cards[i]\n    else:\n        bob_score += cards[i]\nprint(alice_score - bob_score)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9910922050476074,
            0.9928162097930908,
            0.9896356463432312,
            0.9919320940971375,
            0.9939152598381042,
            0.9918327331542969,
            0.9930102825164795,
            0.9932101368904114,
            0.9939152598381042,
            0.9946700930595398,
            0.9940909147262573,
            0.9919320940971375,
            0.9887809753417969,
            0.9945622682571411,
            0.9916948080062866,
            0.9922794699668884,
            0.9946733117103577,
            0.9924497008323669,
            0.9944421052932739,
            0.9851238131523132
        ]
    },
    "4774": {
        "similarity": 0.9973816275596619,
        "body": "a, b, c, d = map(int, input().split())\nops = ['+', '-', '*', '/']\nres = []\n\nfor op1 in ops:\n    for op2 in ops:\n        try:\n            if eval(f'{a} {op1} {b}') == eval(f'{c} {op2} {d}'):\n                res.append(f'{a} {op1} {b} = {c} {op2} {d}')\n        except ZeroDivisionError:\n            pass\n\nif not res:\n    print(\"problems ahead\")\nelse:\n    for r in sorted(res):\n        print(r)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958392977714539,
            0.9964424967765808,
            0.9965328574180603,
            0.9969853758811951,
            0.9937012195587158,
            0.9950556755065918,
            0.9964262247085571,
            0.9968998432159424,
            0.9973816275596619,
            0.9960498809814453,
            0.9939239025115967,
            0.9969214200973511,
            0.9966527223587036,
            0.9967965483665466,
            0.9962769746780396,
            0.9946297407150269,
            0.9943190217018127,
            0.9969099164009094,
            0.9967243075370789,
            0.9968757629394531
        ]
    },
    "4851": {
        "similarity": 0.9973224997520447,
        "body": "    while True:\n        if sum(int(digit) for digit in str(n)) % n == 0:\n            return n\n        n += 1\nn = int(input())\nprint(smallest_harshad(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971873760223389,
            0.9971853494644165,
            0.9960439801216125,
            0.9967586398124695,
            0.9965730309486389,
            0.997043788433075,
            0.9947415590286255,
            0.9965852499008179,
            0.9972420930862427,
            0.9938225150108337,
            0.9971853494644165,
            0.9971853494644165,
            0.9972420930862427,
            0.9972420930862427,
            0.9938225150108337,
            0.9946249127388,
            0.9946542978286743,
            0.9938225150108337,
            0.9960764646530151,
            0.9973224997520447
        ]
    },
    "4655": {
        "similarity": 0.996296763420105,
        "body": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    candies = sorted([a, b, c])\n    if candies[2] > candies[1]:\n        print(candies[2]//2)\n    else:\n        print((candies[1]+candies[0])//2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923630952835083,
            0.995194673538208,
            0.994360089302063,
            0.9938482046127319,
            0.9932001829147339,
            0.9948232769966125,
            0.9956759214401245,
            0.996296763420105,
            0.9935413002967834,
            0.9949702024459839,
            0.9944052696228027,
            0.99559485912323,
            0.9907955527305603,
            0.9949595928192139,
            0.9959809184074402,
            0.9930346608161926,
            0.9952480792999268,
            0.9936350584030151,
            0.9938954710960388,
            0.995716392993927
        ]
    },
    "4132": {
        "similarity": 0.9974786639213562,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nwhile len(A) > 1:\n    i = A.index(max(A))\n    A.pop(i)\nprint(min(A))",
        "result": "timed out",
        "similarities": [
            0.996920645236969,
            0.9959365725517273,
            0.9911772012710571,
            0.9974475502967834,
            0.9972045421600342,
            0.9954370260238647,
            0.996592104434967,
            0.9963553547859192,
            0.9952691793441772,
            0.9931129813194275,
            0.9974786639213562,
            0.9947022199630737,
            0.9972044229507446,
            0.9967928528785706,
            0.9963987469673157,
            0.9968994855880737,
            0.9932469129562378,
            0.9972714185714722,
            0.9971235394477844,
            0.9938426613807678
        ]
    },
    "4085": {
        "similarity": 0.9967564940452576,
        "body": "for _ in range(int(input())):\n    n = int(input())\n    divs = sorted(map(int, input().split()))\n    if len(divs) < 2 or divs[-1] * divs[0] != divs[-2]:\n        print(-1)\n        continue\n    x = divs[-2]\n    for d in reversed(divs[:-2]):\n        if x % d == 0:\n            break\n        x *= d\n    print(x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964621663093567,
            0.9966919422149658,
            0.9963344931602478,
            0.9966146349906921,
            0.9957627654075623,
            0.9954649209976196,
            0.9962586164474487,
            0.9931461215019226,
            0.9939519762992859,
            0.9943156838417053,
            0.9958516359329224,
            0.9949743151664734,
            0.9959134459495544,
            0.9967564940452576,
            0.9942299723625183,
            0.9929235577583313,
            0.996221125125885,
            0.9949429035186768,
            0.9926382303237915,
            0.9952818155288696
        ]
    },
    "4399": {
        "similarity": 0.9971254467964172,
        "body": "    s = input()\n    if 'A' in s and 'B' in s:\n        print('Yes')\n    else:\n        print('No')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914155602455139,
            0.9969173073768616,
            0.9969871044158936,
            0.9971254467964172,
            0.987766444683075,
            0.9968889951705933,
            0.9971254467964172,
            0.9968889951705933,
            0.9967548251152039,
            0.996986985206604,
            0.9968889951705933,
            0.9968889951705933,
            0.9887353777885437,
            0.9969871044158936,
            0.9969871044158936,
            0.996695876121521,
            0.9967548251152039,
            0.9969871044158936,
            0.9969173073768616,
            0.9965890645980835
        ]
    },
    "4999": {
        "similarity": 0.9957263469696045,
        "body": "    a, b = map(int, input().split())\n    count = 0\n    while a > b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a -= 1\n        count += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929105043411255,
            0.9952083230018616,
            0.9950246214866638,
            0.9955426454544067,
            0.995151937007904,
            0.9957263469696045,
            0.9949175119400024,
            0.9955417513847351,
            0.9747722148895264,
            0.9951590299606323,
            0.9952938556671143,
            0.9951919913291931,
            0.9941025972366333,
            0.9947333335876465,
            0.9908208250999451,
            0.9952345490455627,
            0.9957263469696045,
            0.9861627817153931,
            0.9953657388687134,
            0.9925873279571533
        ]
    },
    "4727": {
        "similarity": 0.9940430521965027,
        "body": "    grid = [[int(x) for x in input().split()] for _ in range(4)]\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            j = 0\n            while j < 3:\n                if grid[i][j] == 0 and grid[i][j + 1] != 0:\n                    grid[i][j], grid[i][j + 1] = grid[i][j + 1], grid[i][j]\n                    j += 1\n                elif grid[i][j] == grid[i][j + 1]:\n                    grid[i][j], grid[i][j + 1] = grid[i][j] * 2, 0\n                    j += 2\n                else:\n                    j += 1\n    # Similar code for other directions (up: 1, right: 2, down: 3)\n    print('\\n'.join([' '.join(map(str, row)) for row in grid]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9833738207817078,
            0.9906296133995056,
            0.9939619302749634,
            0.9895007610321045,
            0.9905014038085938,
            0.992695689201355,
            0.9918004870414734,
            0.9917666912078857,
            0.9930402040481567,
            0.9779972434043884,
            0.991064190864563,
            0.9919074177742004,
            0.9938191771507263,
            0.9916927218437195,
            0.9940430521965027,
            0.9913004040718079,
            0.9916725158691406,
            0.9927064180374146,
            0.9928056597709656,
            0.9919308423995972
        ]
    },
    "4906": {
        "similarity": 0.9941878318786621,
        "body": "    command, message = input().split()\n    if command == 'E':\n        return encode(message)\n    elif command == 'D':\n        return decode(message)\n\n    encoded = ''\n    i = 0\n    while i < len(message):\n        count = 1\n        while i + 1 < len(message) and message[i] == message[i+1]:\n            count += 1\n            i += 1\n        encoded += message[i] + str(count)\n        i += 1\n    return encoded\n\n    decoded = ''\n    for i in range(0, len(encoded), 2):\n        char = encoded[i]\n        count = int(encoded[i+1])\n        decoded += char * count\n    return decoded",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918831586837769,
            0.9921266436576843,
            0.9865232706069946,
            0.9866684675216675,
            0.9937167763710022,
            0.9941878318786621,
            0.9841386675834656,
            0.9923611879348755,
            0.9858354330062866,
            0.9935272932052612,
            0.9931454062461853,
            0.9929985404014587,
            0.9939787983894348,
            0.9932146668434143,
            0.9924507141113281,
            0.9931437969207764,
            0.9926931262016296,
            0.9865353107452393,
            0.9930239319801331,
            0.9927858114242554
        ]
    },
    "4011": {
        "similarity": 0.9952952861785889,
        "body": "    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    mx = 0\n    for i in range(1, n):\n        if f[int(a[i])] > int(a[i-1]):\n            mx = max(mx, int(f[int(a[i-1])] + a[i:i+1]))\n    print(max(mx, int(a[0]) * (n - 1)))\n\nmax_number()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995010256767273,
            0.9952952861785889,
            0.9929968118667603,
            0.9938318133354187,
            0.9945989847183228,
            0.9932785034179688,
            0.9880551099777222,
            0.9923511147499084,
            0.9932664632797241,
            0.9948624968528748,
            0.9950840473175049,
            0.9931502342224121,
            0.9937981963157654,
            0.9929149150848389,
            0.9941193461418152,
            0.9931505918502808,
            0.9950754046440125,
            0.9952200651168823,
            0.9931743144989014,
            0.9898860454559326
        ]
    },
    "4099": {
        "similarity": 0.9952958822250366,
        "body": "N, K, M = map(int, input().split())\nA = list(map(int, input().split()))\ncurrent_sum = sum(A)\nif current_sum + (N-1)*K >= N*M:\n    print(N*M - current_sum)\nelse:\n    print(-1)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9946326017379761,
            0.9944961071014404,
            0.9940679669380188,
            0.9945134520530701,
            0.9952958822250366,
            0.9946945905685425,
            0.9943903088569641,
            0.9949401021003723,
            0.9922459125518799,
            0.9951639771461487,
            0.9888004660606384,
            0.994516909122467,
            0.9938860535621643,
            0.9929038882255554,
            0.9694815278053284,
            0.9937768578529358,
            0.9952159523963928,
            0.9948429465293884,
            0.9945352673530579,
            0.9941774010658264
        ]
    },
    "4465": {
        "similarity": 0.9971347451210022,
        "body": "    A, B = map(int, input().split())\n    return (A - 2) * (B - 2)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971203207969666,
            0.99567049741745,
            0.9971347451210022,
            0.9971347451210022,
            0.9971203207969666,
            0.9971347451210022,
            0.99538654088974,
            0.9971347451210022,
            0.9964630007743835,
            0.9959197044372559,
            0.9968502521514893,
            0.9967366456985474,
            0.992350161075592,
            0.9959197044372559,
            0.99538654088974,
            0.9967641234397888,
            0.9969181418418884,
            0.9970942139625549,
            0.9930327534675598,
            0.9971203207969666
        ]
    },
    "4315": {
        "similarity": 0.9959861636161804,
        "body": "    R = int(input())\n    circumference = 2 * 3.14159265358979323846 * R\n    print(circumference)\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950517416000366,
            0.9959785342216492,
            0.9959785342216492,
            0.9959785342216492,
            0.9959785342216492,
            0.9948907494544983,
            0.9959785342216492,
            0.9959785342216492,
            0.9958488941192627,
            0.9955045580863953,
            0.9953071475028992,
            0.9945529103279114,
            0.9951266050338745,
            0.9953071475028992,
            0.9959861636161804,
            0.9959785342216492,
            0.9953071475028992,
            0.995169997215271,
            0.9946250915527344,
            0.9919360280036926
        ]
    },
    "4633": {
        "similarity": 0.995324969291687,
        "body": "for _ in range(int(input())):\n    n, s = map(int, input().split())\n    total_sum = sum(map(int, str(n)))\n    moves = 0\n    while total_sum > s:\n        n += 1\n        total_sum = sum(map(int, str(n)))\n        moves += 1\n    print(moves)",
        "result": "timed out",
        "similarities": [
            0.9924649596214294,
            0.9915406107902527,
            0.9948771595954895,
            0.9910693764686584,
            0.9952507019042969,
            0.9919782280921936,
            0.994504451751709,
            0.9946880340576172,
            0.9949656128883362,
            0.9910476207733154,
            0.9945892691612244,
            0.9937449097633362,
            0.9944387674331665,
            0.995324969291687,
            0.9888408184051514,
            0.9836723804473877,
            0.9946880340576172,
            0.9948881268501282,
            0.9946102499961853,
            0.9918323159217834
        ]
    },
    "4734": {
        "similarity": 0.9970506429672241,
        "body": "Y, P = input().split()\nif Y.endswith('e'):\n    print(Y[:-1] + 'x' + P)\nelif Y.endswith(('a', 'i', 'o', 'u')):\n    print(Y[:-1] + 'ex' + P)\nelif Y.endswith('ex'):\n    print(Y + P)\nelse:\n    print(Y + 'ex' + P)",
        "result": "failed: testcase 1",
        "similarities": [
            0.996728777885437,
            0.9969393014907837,
            0.996728777885437,
            0.9967219829559326,
            0.995866060256958,
            0.9948118925094604,
            0.9962403178215027,
            0.9959144592285156,
            0.9970506429672241,
            0.9963839650154114,
            0.9957796335220337,
            0.9964584708213806,
            0.9924780130386353,
            0.9946267008781433,
            0.9967790246009827,
            0.9962626099586487,
            0.9883651733398438,
            0.9962403178215027,
            0.9939175844192505,
            0.9970074892044067
        ]
    },
    "4229": {
        "similarity": 0.9945626854896545,
        "body": "N = int(input())\ntotal = 0\nfor i in range(1, N + 1):\n    if i % 3 == 0 and i % 5 == 0:\n        continue\n    elif i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992044985294342,
            0.9905192852020264,
            0.9879172444343567,
            0.9945421814918518,
            0.9945626854896545,
            0.9945421814918518,
            0.9922589659690857,
            0.9916584491729736,
            0.9823933839797974,
            0.9908118844032288,
            0.9891247153282166,
            0.9926211833953857,
            0.9872047305107117,
            0.9945403933525085,
            0.9929566979408264,
            0.9842981100082397,
            0.9929507374763489,
            0.9877089262008667,
            0.9841898083686829,
            0.9920154213905334
        ]
    },
    "4321": {
        "similarity": 0.9960950613021851,
        "body": "n, k = map(int, input().split())\nwhile k > 0:\n    if n % 10 == 0:\n        n //= 10\n    else:\n        n -= 1\n    k -= 1\nprint(n)",
        "result": "passed",
        "similarities": [
            0.9950693249702454,
            0.9930704236030579,
            0.9931323528289795,
            0.9951456785202026,
            0.9950693249702454,
            0.9950693249702454,
            0.9946111440658569,
            0.9933069944381714,
            0.9944720268249512,
            0.9931323528289795,
            0.9907609820365906,
            0.9941285848617554,
            0.9960950613021851,
            0.9950693249702454,
            0.9953325390815735,
            0.9924763441085815,
            0.9950693249702454,
            0.9949816465377808,
            0.9959273338317871,
            0.9930835366249084
        ]
    },
    "4503": {
        "similarity": 0.9966238737106323,
        "body": "H, N = map(int, input().split())\nA = list(map(int, input().split()))\nused_moves = set()\nfor move in A:\n    if H % move == 0 and len(used_moves) < N:\n        used_moves.add(move)\n        break\nelse:\n    print('No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.995311439037323,
            0.9931785464286804,
            0.996123194694519,
            0.9926219582557678,
            0.9957504272460938,
            0.9966238737106323,
            0.9952637553215027,
            0.995833158493042,
            0.994354248046875,
            0.996100664138794,
            0.9953774213790894,
            0.994748592376709,
            0.9953914284706116,
            0.9953303933143616,
            0.9901742339134216,
            0.9961775541305542,
            0.9956614971160889,
            0.9945515990257263,
            0.9962681531906128,
            0.9952016472816467
        ]
    },
    "4855": {
        "similarity": 0.9945281147956848,
        "body": "a, i = map(int, input().split())\nprint(i * a)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944132566452026,
            0.9922587871551514,
            0.9918761253356934,
            0.9944132566452026,
            0.9928233623504639,
            0.9942981600761414,
            0.9944132566452026,
            0.9944132566452026,
            0.9945281147956848,
            0.9918643832206726,
            0.987403154373169,
            0.9943856596946716,
            0.9921282529830933,
            0.9921438097953796,
            0.9944132566452026,
            0.9943169951438904,
            0.9618821740150452,
            0.9925243258476257,
            0.9941748380661011,
            0.9944132566452026
        ]
    },
    "4704": {
        "similarity": 0.9952709674835205,
        "body": "    n = int(input())\n    arr = list(map(int, input().split()))\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(n-1):\n        if abs(total_sum - 2*left_sum) < abs(total_sum - 2*(left_sum+arr[i+1])):\n            break\n        left_sum += arr[i]\n    return abs(total_sum - 2*left_sum)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912185668945312,
            0.9949155449867249,
            0.9912626147270203,
            0.9947807788848877,
            0.9946706891059875,
            0.9923182129859924,
            0.9945439696311951,
            0.9947431683540344,
            0.9925785064697266,
            0.9926207661628723,
            0.9940584897994995,
            0.9917319416999817,
            0.9948748350143433,
            0.9949439167976379,
            0.9911280274391174,
            0.9929395318031311,
            0.9854821562767029,
            0.9948150515556335,
            0.9925325512886047,
            0.9952709674835205
        ]
    },
    "4829": {
        "similarity": 0.996159017086029,
        "body": "l, r = map(int, input().split())\npoints = max(l, r) * 2 if l != r else l + r\nprint(f\"{'Odd' if l != r else 'Even'} {points}\")",
        "result": "failed: testcase 2",
        "similarities": [
            0.9945017099380493,
            0.9958938956260681,
            0.9956697225570679,
            0.9929407835006714,
            0.9961549043655396,
            0.9953755736351013,
            0.9959851503372192,
            0.991442859172821,
            0.9927552938461304,
            0.9945833086967468,
            0.992843508720398,
            0.9960123300552368,
            0.9960631132125854,
            0.996159017086029,
            0.9952380657196045,
            0.9959373474121094,
            0.9956576824188232,
            0.9959422945976257,
            0.9910820722579956,
            0.9883192181587219
        ]
    },
    "4730": {
        "similarity": 0.996482253074646,
        "body": "    L = input().strip()\n    stack = []\n    for i, c in enumerate(L):\n        if c in '([{':\n            stack.append((c, i))\n        elif not stack or (c == ')' and stack[-1][0] != '(') or (c == ']' and stack[-1][0] != '[') or (c == '}' and stack[-1][0] != '{'):\n            if len(stack) < len(L):\n                print(f'{c} {i}')\n                return\n            else:\n                break\n    else:\n        print('ok so far')\nvalidate_code()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961254596710205,
            0.996482253074646,
            0.9953321218490601,
            0.9938992857933044,
            0.9934787750244141,
            0.9950079917907715,
            0.9948056936264038,
            0.9947917461395264,
            0.9955579042434692,
            0.9956801533699036,
            0.9958795309066772,
            0.9949148297309875,
            0.9961863160133362,
            0.9958895444869995,
            0.9905124306678772,
            0.9931018352508545,
            0.9950674176216125,
            0.995278000831604,
            0.9963241219520569,
            0.985681414604187
        ]
    },
    "4729": {
        "similarity": 0.9950592517852783,
        "body": "    password, message = input().split()\n    for i in range(len(password)):\n        if password[i] not in message[:message.index(password[i])+1]:\n            print('FAIL')\n            return\n        else:\n            message = message[message.index(password[i])+1:]\n    print('PASS')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9903340935707092,
            0.9882256388664246,
            0.991011381149292,
            0.994579017162323,
            0.9882796406745911,
            0.9949128031730652,
            0.9947368502616882,
            0.992344319820404,
            0.9935072064399719,
            0.9948106408119202,
            0.9813911318778992,
            0.9926556944847107,
            0.9935242533683777,
            0.9938687086105347,
            0.9948195219039917,
            0.9918303489685059,
            0.991463840007782,
            0.9950592517852783,
            0.993033766746521,
            0.994482159614563
        ]
    },
    "4582": {
        "similarity": 0.99639892578125,
        "body": "a, b = input().split()\nprint('D' if a == 'H' and b == 'D' else 'H')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9961364269256592,
            0.9962488412857056,
            0.9959515929222107,
            0.9957895874977112,
            0.991662859916687,
            0.9944496154785156,
            0.9944494962692261,
            0.99639892578125,
            0.9929103851318359,
            0.9936250448226929,
            0.9952275156974792,
            0.9944167137145996,
            0.9871253967285156,
            0.9962489604949951,
            0.9957895874977112,
            0.9882650971412659,
            0.9949197173118591,
            0.9954624176025391,
            0.9956110119819641,
            0.9948666095733643
        ]
    },
    "4910": {
        "similarity": 0.996958315372467,
        "body": "from collections import Counter\nimport sys\n\nN = int(input())\ncategories = [sys.stdin.readline().strip() for _ in range(N)]\ncounter = Counter(categories)\nmax_count = max(counter.values())\nfor category, count in counter.items():\n    if count == max_count:\n        print(category)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969273805618286,
            0.9932348132133484,
            0.9954538941383362,
            0.9961214661598206,
            0.9938620328903198,
            0.996958315372467,
            0.9958004355430603,
            0.9942227602005005,
            0.995111346244812,
            0.9969221353530884,
            0.9959514141082764,
            0.9961696267127991,
            0.9954734444618225,
            0.9928528666496277,
            0.9968183636665344,
            0.9911883473396301,
            0.9965463280677795,
            0.9964292645454407,
            0.9955799579620361,
            0.9954881072044373
        ]
    },
    "4323": {
        "similarity": 0.9968183636665344,
        "body": "n, m = map(int, input().split())\nsongs = [tuple(map(int, input().split())) for _ in range(n)]\n\n    songs.sort(key=lambda x: x[1] - x[0])\n    compressed = 0\n    total_size = 0\n    for size, new_size in songs:\n        if total_size + new_size <= m:\n            total_size += new_size\n        else:\n            compressed += 1\n            total_size -= size\n            total_size += new_size\n    return compressed\n\nresult = min(compress(songs[i:] + [songs[0]], m) for i in range(n)) if compress(songs, m) != n else -1\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994907796382904,
            0.9949211478233337,
            0.9966251850128174,
            0.9930493235588074,
            0.9963268637657166,
            0.9963735342025757,
            0.9961144328117371,
            0.9953623414039612,
            0.9944794178009033,
            0.9966005086898804,
            0.9952149987220764,
            0.9927334189414978,
            0.9921050071716309,
            0.9947034120559692,
            0.9961727857589722,
            0.9968183636665344,
            0.9944606423377991,
            0.9961085915565491,
            0.9961235523223877,
            0.9963242411613464
        ]
    },
    "4626": {
        "similarity": 0.9955936074256897,
        "body": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    d1 = abs(a - b)\n    d2 = abs(a - c)\n    d3 = abs(b - c)\n    print(min(d1 + d2 + d3, d1 + d3 + abs(b - c) if a > c else d2 + d3 + abs(a - b)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951806664466858,
            0.9942891001701355,
            0.9861894845962524,
            0.9934341907501221,
            0.9919301271438599,
            0.9950816631317139,
            0.9955936074256897,
            0.9951806664466858,
            0.9942153096199036,
            0.9948114156723022,
            0.9944902062416077,
            0.9932606220245361,
            0.991775631904602,
            0.9929872155189514,
            0.9951146841049194,
            0.9919301271438599,
            0.9935060143470764,
            0.9944149851799011,
            0.9854879975318909,
            0.9951450228691101
        ]
    },
    "4400": {
        "similarity": 0.9909023642539978,
        "body": "  s = input()\n  max_rainy_days = max([s[i:j].count('R') for i in range(3) for j in range(i+1,4)])\n  print(max_rainy_days)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907364249229431,
            0.9906564950942993,
            0.9862104654312134,
            0.9901391863822937,
            0.9895774722099304,
            0.9905206561088562,
            0.9849903583526611,
            0.9894206523895264,
            0.9779863953590393,
            0.9871629476547241,
            0.9909023642539978,
            0.9850174784660339,
            0.9906681776046753,
            0.985827624797821,
            0.9849429726600647,
            0.9826964139938354,
            0.9900056719779968,
            0.9897424578666687,
            0.9788203835487366,
            0.9810383319854736
        ]
    },
    "4794": {
        "similarity": 0.9959474205970764,
        "body": "    R, C = map(int, input().split())\n    grid = [list(input()) for _ in range(R)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    counts = {i: 0 for i in range(5)}\n\n        if x < 0 or x >= R or y < 0 or y >= C:\n            return False\n        elif grid[x][y] == '#':\n            return False\n        else:\n            cars = sum(grid[i][j] == 'X' for i, j in [(x + dx, y + dy) for dx, dy in directions])\n            counts[cars] += 1\n            return True\n\n    for x in range(R - 1):\n        for y in range(C - 1):\n            if check(x, y):\n                check(x + 1, y)\n                check(x, y + 1)\n\n    print(counts[0])\n    print(counts[1])\n    print(counts[2])\n    print(counts[3])\n    print(counts[4])\n\nif __name__ == '__main__':\n    count_parking_spaces()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940842390060425,
            0.9925951957702637,
            0.9923031330108643,
            0.9945387840270996,
            0.9959474205970764,
            0.9933969378471375,
            0.9949861168861389,
            0.9957815408706665,
            0.9914590120315552,
            0.9943695068359375,
            0.9956426024436951,
            0.9941853284835815,
            0.9944828748703003,
            0.9936234354972839,
            0.9921695590019226,
            0.9936655163764954,
            0.9946189522743225,
            0.9950208067893982,
            0.993540346622467,
            0.99510657787323
        ]
    },
    "4096": {
        "similarity": 0.9963830709457397,
        "body": "    a.sort()\n    total = 0\n    days = 0\n    for i in range(n):\n        total += max(0, a[i] - (i + 1))\n        if total >= m:\n            return days\n        if total < i + 1:\n            return -1\n        days += 1\n    return -1\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nprint(min_days(n, m, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963830709457397,
            0.9941147565841675,
            0.995609700679779,
            0.9925660490989685,
            0.9942993521690369,
            0.9951429963111877,
            0.9940066337585449,
            0.9961568117141724,
            0.9952603578567505,
            0.9944814443588257,
            0.9852131605148315,
            0.9934926629066467,
            0.995328426361084,
            0.9953494668006897,
            0.9945353269577026,
            0.9961588978767395,
            0.9931730031967163,
            0.9956799745559692,
            0.9951578378677368,
            0.9962554574012756
        ]
    },
    "4530": {
        "similarity": 0.9969209432601929,
        "body": "    n = int(input())\n    skills = list(map(int, input().split()))\n    skill_count = {}\n    for skill in skills:\n        skill_count[skill] = skill_count.get(skill, 0) + 1\n\n    max_same_skills = max(count for count in skill_count.values() if count > 1)\n    unique_skills = len([skill for skill in skill_count if skill_count[skill] == 1])\n\n    x = min(max_same_skills, unique_skills)\n    print(x)\n\nfor _ in range(int(input())):\n    find_maximum_size()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964332580566406,
            0.9940646290779114,
            0.9961472749710083,
            0.9935195446014404,
            0.9937997460365295,
            0.9952071309089661,
            0.9964085817337036,
            0.9949575662612915,
            0.994269847869873,
            0.9969020485877991,
            0.9926254749298096,
            0.9969030618667603,
            0.9958255290985107,
            0.9929863810539246,
            0.9928008913993835,
            0.996558427810669,
            0.9967980980873108,
            0.9969209432601929,
            0.994329571723938,
            0.9964025616645813
        ]
    },
    "4724": {
        "similarity": 0.997478187084198,
        "body": "R = int(input())\nG = int(input())\n\nprint(2 * G - R)",
        "result": "passed",
        "similarities": [
            0.9969636797904968,
            0.997478187084198,
            0.997478187084198,
            0.9967608451843262,
            0.9967262148857117,
            0.9967262148857117,
            0.9960303902626038,
            0.9970713257789612,
            0.9967262148857117,
            0.9967262148857117,
            0.9969636797904968,
            0.9931848645210266,
            0.9927052855491638,
            0.9942952394485474,
            0.9967262148857117,
            0.9927052855491638,
            0.9965053200721741,
            0.9967262148857117,
            0.9963656067848206,
            0.9970880150794983
        ]
    },
    "4276": {
        "similarity": 0.9967714548110962,
        "body": "N, T = map(int, input().split())\nroutes = [tuple(map(int, input().split())) for _ in range(N)]\nvalid_routes = [(cost, time) for cost, time in routes if time <= T]\nif valid_routes:\n    print(min(route[0] for route in valid_routes))\nelse:\n    print(\"TLE\")",
        "result": "passed",
        "similarities": [
            0.9967714548110962,
            0.9955661296844482,
            0.9957422018051147,
            0.9947734475135803,
            0.9952787160873413,
            0.9951730370521545,
            0.9951069355010986,
            0.9959117770195007,
            0.9952691793441772,
            0.9960501790046692,
            0.989790678024292,
            0.989915132522583,
            0.9967166781425476,
            0.9948626160621643,
            0.9961565732955933,
            0.9946863055229187,
            0.9966612458229065,
            0.9957168102264404,
            0.9960780739784241,
            0.99224454164505
        ]
    },
    "4708": {
        "similarity": 0.9969520568847656,
        "body": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\ntotal_fee = X * min(N, K) + Y * max(0, N - K)\nprint(total_fee)",
        "result": "passed",
        "similarities": [
            0.9949367046356201,
            0.9953721761703491,
            0.9945564270019531,
            0.9961311221122742,
            0.9961311221122742,
            0.9941994547843933,
            0.9968671202659607,
            0.9960138201713562,
            0.991485595703125,
            0.9968658089637756,
            0.9968658089637756,
            0.9947308897972107,
            0.9923606514930725,
            0.9950718283653259,
            0.9936913251876831,
            0.9946885704994202,
            0.9968658089637756,
            0.9969520568847656,
            0.996284008026123,
            0.9957388639450073
        ]
    },
    "4396": {
        "similarity": 0.9980282187461853,
        "body": "    N = int(input())\n    total = 0\n    rate = 380000.0\n    for _ in range(N):\n        x, u = input().split()\n        if u == 'JPY':\n            total += int(x)\n        elif u == 'BTC':\n            total += float(x) * rate\n    print(total)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972469806671143,
            0.9957998394966125,
            0.9980282187461853,
            0.9979438781738281,
            0.9979308247566223,
            0.997908353805542,
            0.9958071708679199,
            0.995837390422821,
            0.9957998394966125,
            0.9958071708679199,
            0.9968619346618652,
            0.9967952370643616,
            0.997954249382019,
            0.9957998394966125,
            0.9953891634941101,
            0.9979181885719299,
            0.996907114982605,
            0.9979605674743652,
            0.9978643655776978,
            0.9969253540039062
        ]
    },
    "4155": {
        "similarity": 0.9959448575973511,
        "body": "    N = int(input())\n    h = list(map(int, input().split()))\n    max_height = max(h)\n    operations = 0\n    current_height = 0\n    for i in range(1, N+1):\n        if h[i-1] > current_height:\n            operations += h[i-1] - current_height\n            current_height = h[i-1]\n    print(operations)\n\nif __name__ == \"__main__\":\n    min_watering_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947863221168518,
            0.99553382396698,
            0.9910112023353577,
            0.9941699504852295,
            0.9959448575973511,
            0.9930934906005859,
            0.9925971031188965,
            0.9922710061073303,
            0.9944413900375366,
            0.990278959274292,
            0.9936344027519226,
            0.9919981956481934,
            0.9957032799720764,
            0.995906412601471,
            0.9929906725883484,
            0.9945585131645203,
            0.9920997619628906,
            0.9958892464637756,
            0.9936951398849487,
            0.992273211479187
        ]
    },
    "4557": {
        "similarity": 0.9967756867408752,
        "body": "A, B, X = map(int, input().split())\nif A <= X <= A + B:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "result": "passed",
        "similarities": [
            0.9963060617446899,
            0.996221661567688,
            0.9955460429191589,
            0.9962993264198303,
            0.99590665102005,
            0.9966738820075989,
            0.9947452545166016,
            0.9950155019760132,
            0.9958905577659607,
            0.9945539236068726,
            0.99590665102005,
            0.9961377382278442,
            0.9939679503440857,
            0.9967756867408752,
            0.9942343831062317,
            0.9961050748825073,
            0.9964686036109924,
            0.9961377382278442,
            0.996017575263977,
            0.9961740374565125
        ]
    },
    "4930": {
        "similarity": 0.9919543862342834,
        "body": "    vowels = 'aeiou'\n    decoded = ''.join(c for c in input() if c not in vowels or c != 'p')\n    print(decoded.replace('p', ''))\n\ndecode_luka_sentence()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9900399446487427,
            0.9848032593727112,
            0.9913071393966675,
            0.9692561626434326,
            0.9901558756828308,
            0.9908021688461304,
            0.9902522563934326,
            0.9780012369155884,
            0.9903338551521301,
            0.9890283346176147,
            0.9894695281982422,
            0.9902989268302917,
            0.986782968044281,
            0.9900399446487427,
            0.9919543862342834,
            0.9910436868667603,
            0.9903376698493958,
            0.9855091571807861,
            0.9893571734428406,
            0.9902512431144714
        ]
    },
    "4715": {
        "similarity": 0.9962535500526428,
        "body": "a, b, c = map(int, input().split())\nprint(len(set([a, b, c])))",
        "result": "passed",
        "similarities": [
            0.9935818910598755,
            0.9954704642295837,
            0.9957570433616638,
            0.9935818910598755,
            0.9954135417938232,
            0.9958425760269165,
            0.9935818910598755,
            0.9944537281990051,
            0.9957570433616638,
            0.9949685335159302,
            0.9957570433616638,
            0.9935818910598755,
            0.9962535500526428,
            0.995591938495636,
            0.9962535500526428,
            0.9941400289535522,
            0.9958425760269165,
            0.9958425760269165,
            0.9935818910598755,
            0.993503749370575
        ]
    },
    "4008": {
        "similarity": 0.9971469044685364,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    colors = [0] * n\n    used = set()\n    for i in range(n):\n        if a[i] not in used:\n            colors[i] = (a[i] % k) + 1\n            used.add(a[i])\n        else:\n            colors[i] = next((c for c in range(1, k+1) if c not in colors[:i]), None)\n            if colors[i] is None:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    print(*colors)\n\nif __name__ == \"__main__\":\n    color_array()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967736005783081,
            0.9947654604911804,
            0.9952813982963562,
            0.9963669180870056,
            0.9966310262680054,
            0.9908715486526489,
            0.9949812889099121,
            0.9970436096191406,
            0.9963659048080444,
            0.9967027306556702,
            0.9967169761657715,
            0.9939783811569214,
            0.996447741985321,
            0.9955257773399353,
            0.9917650818824768,
            0.9970057606697083,
            0.995093822479248,
            0.9960401654243469,
            0.9961308836936951,
            0.9971469044685364
        ]
    },
    "4257": {
        "similarity": 0.9985198974609375,
        "body": "A, B = map(int, input().split())\nprint(A * B)",
        "result": "passed",
        "similarities": [
            0.9985198974609375,
            0.9985198974609375,
            0.9985198974609375,
            0.9965199828147888,
            0.9965199828147888,
            0.9932925701141357,
            0.9985198974609375,
            0.9985198974609375,
            0.9983747601509094,
            0.9985198974609375,
            0.9925693869590759,
            0.9983747601509094,
            0.9985198974609375,
            0.9985198974609375,
            0.9985198974609375,
            0.9985198974609375,
            0.9985198974609375,
            0.994620680809021,
            0.9985198974609375,
            0.9985198974609375
        ]
    },
    "4584": {
        "similarity": 0.997963547706604,
        "body": "n = int(input())\nA = list(map(int, input().split()))\nsubordinates = [0] * n\nfor i in range(2, n + 1):\n    subordinates[A[i - 1]] += 1\nfor s in subordinates:\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997963547706604,
            0.9966841340065002,
            0.9978323578834534,
            0.9979065656661987,
            0.9978545308113098,
            0.9970827698707581,
            0.9979049563407898,
            0.9966273903846741,
            0.9966894388198853,
            0.9979221820831299,
            0.9972564578056335,
            0.9978545308113098,
            0.9968321919441223,
            0.9979171752929688,
            0.9971116781234741,
            0.9978614449501038,
            0.9979385733604431,
            0.9978135824203491,
            0.9966464042663574,
            0.9957658648490906
        ]
    },
    "4195": {
        "similarity": 0.9946145415306091,
        "body": "    D, N = map(int, input().split())\n    if D == 0:\n        return print(N)\n    elif D == 1:\n        return print(100 * (N - 1))\n    else:\n        return print(200 * (N - 1))\n\nfind_happy_number()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937494993209839,
            0.9944532513618469,
            0.9897657036781311,
            0.99345862865448,
            0.9918211102485657,
            0.9937280416488647,
            0.9926086068153381,
            0.9923365712165833,
            0.9944692254066467,
            0.9854429960250854,
            0.9921967387199402,
            0.9945505261421204,
            0.9900256991386414,
            0.9903570413589478,
            0.9908455610275269,
            0.9909078478813171,
            0.9900440573692322,
            0.9909078478813171,
            0.990463137626648,
            0.9946145415306091
        ]
    },
    "4176": {
        "similarity": 0.9955276846885681,
        "body": "A, B = map(int, input().split())\nprint(max(A, B) * min(A, B))",
        "result": "failed: testcase 1",
        "similarities": [
            0.9942839741706848,
            0.994884192943573,
            0.9951069355010986,
            0.9954219460487366,
            0.9953447580337524,
            0.9955276846885681,
            0.9900063872337341,
            0.9902066588401794,
            0.9950398206710815,
            0.9885705709457397,
            0.9953447580337524,
            0.9952826499938965,
            0.9953447580337524,
            0.9932689666748047,
            0.995086669921875,
            0.9949192404747009,
            0.989867091178894,
            0.9953253865242004,
            0.9838607311248779,
            0.9934991598129272
        ]
    },
    "4166": {
        "similarity": 0.9963924884796143,
        "body": "    N, M = map(int, input().split())\n    digits = []\n    for i in range(M):\n        s, c = map(int, input().split())\n        digits.append((s-1, str(c)))\n    for num in range(10**(N-1), 10**N):\n        if all(num // (10**(i+1)) % 10 == int(digit) for i, digit in digits):\n            print(num)\n            return\n    print(-1)\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993882417678833,
            0.9952493906021118,
            0.9953573346138,
            0.9952839612960815,
            0.9962426424026489,
            0.9932159781455994,
            0.9958394765853882,
            0.9956867694854736,
            0.9923761487007141,
            0.995977520942688,
            0.9932087659835815,
            0.9937585592269897,
            0.9940629601478577,
            0.99560546875,
            0.9959902763366699,
            0.9963284730911255,
            0.9963570833206177,
            0.994766116142273,
            0.9942857027053833,
            0.9963924884796143
        ]
    },
    "4827": {
        "similarity": 0.9948674440383911,
        "body": "    N = int(input())\n    words = [input() for _ in range(N)]\n    num_index = words.index('$')\n    number = ''\n    if len(words[num_index-1]) > 2:\n        number += words[num_index-1][0] + 'hundred'\n    elif len(words[num_index-1]) == 2:\n        tens = int(words[num_index-1][:2])\n        ones = int(words[num_index-1][1:])\n        if ones != 0:\n            number += numbers[tens] + words[num_index-1][1:]\n        else:\n            number += numbers[tens]\n    elif len(words[num_index-1]) == 1:\n        number += numbers[int(words[num_index-1])]\n    sentence = ' '.join(words[:num_index] + [number] + words[num_index+1:])\n    print(sentence)\n\nnumbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\nfor i in range(2, 10):\n    numbers.append(numbers[0] + str(i))\nfor i in range(10, 20):\n    numbers.append(numbers[i-9])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9874545931816101,
            0.9859405159950256,
            0.9943486452102661,
            0.9943478107452393,
            0.9939659833908081,
            0.9924976229667664,
            0.9948674440383911,
            0.9946951866149902,
            0.9925398826599121,
            0.9940847158432007,
            0.9941167235374451,
            0.9946908354759216,
            0.9877238273620605,
            0.9937182068824768,
            0.9942456483840942,
            0.9915369749069214,
            0.9925487041473389,
            0.9939510226249695,
            0.9939067363739014,
            0.9944751262664795
        ]
    },
    "4871": {
        "similarity": 0.9954127073287964,
        "body": "n = int(input())\nscores = [int(input()) for _ in range(n)]\ncurrent_score = sum(s * ((4/5)**i) for i, s in enumerate(scores)) / 5\nnew_scores = [(s * ((4/5)**i), g := sum(scores[:i] + scores[i+1:]) * (1/5)) for i, s in enumerate(scores)]\navg_new_score = sum(g for _, g in new_scores) / n\nprint(current_score)\nprint(avg_new_score)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949079751968384,
            0.9930393695831299,
            0.9858963489532471,
            0.9941197633743286,
            0.9938644766807556,
            0.9890449047088623,
            0.9939871430397034,
            0.995151937007904,
            0.9925857186317444,
            0.9949033856391907,
            0.9947021007537842,
            0.9942604899406433,
            0.9949422478675842,
            0.9945364594459534,
            0.9950299859046936,
            0.994852602481842,
            0.9953792095184326,
            0.9950105547904968,
            0.9954127073287964,
            0.9907925128936768
        ]
    },
    "4148": {
        "similarity": 0.9966367483139038,
        "body": "    N = int(input())\n    S = input()\n    return ''.join(chr((ord(c) - ord('A') + N) % 26 + ord('A')) for c in S)\n\nprint(shift_string())",
        "result": "failed: testcase 0",
        "similarities": [
            0.992893636226654,
            0.9952302575111389,
            0.9951127767562866,
            0.9930720925331116,
            0.9939481616020203,
            0.992893636226654,
            0.9961961507797241,
            0.9917243123054504,
            0.9958956837654114,
            0.9960530996322632,
            0.9939481616020203,
            0.9872363209724426,
            0.9961961507797241,
            0.9962289929389954,
            0.9966367483139038,
            0.9941896200180054,
            0.9960530996322632,
            0.9962068796157837,
            0.9960100054740906,
            0.9925850629806519
        ]
    },
    "4316": {
        "similarity": 0.9963881969451904,
        "body": "    s = input().strip()\n    if len(set(s)) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963881969451904,
            0.9912784099578857,
            0.9954952597618103,
            0.9958323240280151,
            0.9952958822250366,
            0.9919466972351074,
            0.9958261251449585,
            0.9954705834388733,
            0.9956775307655334,
            0.9924531579017639,
            0.9959863424301147,
            0.9955243468284607,
            0.9928876161575317,
            0.9933180809020996,
            0.9950551390647888,
            0.9945520162582397,
            0.9945823550224304,
            0.9907486438751221,
            0.9949039816856384,
            0.9959582090377808
        ]
    },
    "4397": {
        "similarity": 0.9964447021484375,
        "body": "    N, i = map(int, input().split())\n    j = N + 1 - i\n    print(j)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963349103927612,
            0.9964194297790527,
            0.9964447021484375,
            0.9963349103927612,
            0.9964194297790527,
            0.9963349103927612,
            0.9940864443778992,
            0.9945295453071594,
            0.9956478476524353,
            0.9963349103927612,
            0.9963349103927612,
            0.9963349103927612,
            0.9956478476524353,
            0.9940864443778992,
            0.9964194297790527,
            0.9940864443778992,
            0.9937193989753723,
            0.9956478476524353,
            0.9963349103927612,
            0.9940864443778992
        ]
    },
    "4180": {
        "similarity": 0.997319757938385,
        "body": "    N = int(input())\n    print(N % 1000)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964558482170105,
            0.9960645437240601,
            0.9961926341056824,
            0.9958835244178772,
            0.9961540699005127,
            0.9961926341056824,
            0.997319757938385,
            0.9963836669921875,
            0.9961766600608826,
            0.9962457418441772,
            0.9960821866989136,
            0.9961926341056824,
            0.9951955676078796,
            0.9962457418441772,
            0.9963836669921875,
            0.9956010580062866,
            0.997319757938385,
            0.9962457418441772,
            0.9964558482170105,
            0.9915183186531067
        ]
    },
    "4907": {
        "similarity": 0.9976455569267273,
        "body": "n = int(input())\nprint(\"Alice\" if n % 2 == 0 else \"Bob\")\nif n % 2 == 0:\n    print(n // 2)",
        "result": "passed",
        "similarities": [
            0.9976455569267273,
            0.9973586201667786,
            0.997343897819519,
            0.9971279501914978,
            0.9957257509231567,
            0.9974686503410339,
            0.9960444569587708,
            0.9970660209655762,
            0.9974884390830994,
            0.9970474243164062,
            0.9938944578170776,
            0.9972377419471741,
            0.9971429705619812,
            0.9969677329063416,
            0.9973741769790649,
            0.9971725344657898,
            0.9928789734840393,
            0.9969677329063416,
            0.9922407269477844,
            0.995715320110321
        ]
    },
    "4839": {
        "similarity": 0.9957046508789062,
        "body": "n = int(input())\ncans = list(map(int, input().split()))\ncans.sort(reverse=True)\ntotal_capacity = n * (n + 1) // 2\ncurrent_capacity = 0\nfor i in range(n):\n    current_capacity += cans[i]\n    if current_capacity > total_capacity:\n        print(\"impossible\")\n        break\nelse:\n    print(f\"{current_capacity / total_capacity:.6f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951978921890259,
            0.9947502017021179,
            0.9939132332801819,
            0.9942644238471985,
            0.9954217672348022,
            0.9956044554710388,
            0.9948983788490295,
            0.9940155744552612,
            0.9921320676803589,
            0.9933428764343262,
            0.9944170713424683,
            0.9911934733390808,
            0.9944429993629456,
            0.9952731132507324,
            0.9943147301673889,
            0.9957046508789062,
            0.9925972819328308,
            0.9933759570121765,
            0.9867821931838989,
            0.9906772971153259
        ]
    },
    "4665": {
        "similarity": 0.9955491423606873,
        "body": "N = int(input())\ncolumns = input().split()\nstudents = []\nfor i in range(N):\n    student = {}\n    for j, col in enumerate(columns):\n        student[col] = input().split()[j]\n    students.append(student)\n\ntotal_marks = sum(int(s['MARKS']) for s in students)\navg_marks = total_marks / N\nprint(f\"{avg_marks:.2f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9900842308998108,
            0.9948274493217468,
            0.9931225180625916,
            0.9951444864273071,
            0.9926751852035522,
            0.9907323718070984,
            0.9942110180854797,
            0.9866611957550049,
            0.9954540729522705,
            0.9952989816665649,
            0.9948620200157166,
            0.9942628741264343,
            0.9907311201095581,
            0.99486243724823,
            0.9955491423606873,
            0.9936459064483643,
            0.9913328886032104,
            0.9937834739685059,
            0.9898036122322083,
            0.9938289523124695
        ]
    },
    "4785": {
        "similarity": 0.9972457885742188,
        "body": "  s = input()\n  print('hiss' if 'ss' in s else 'no hiss')",
        "result": "passed",
        "similarities": [
            0.9960187673568726,
            0.9937110543251038,
            0.9963764548301697,
            0.9963764548301697,
            0.9963764548301697,
            0.9962705373764038,
            0.9937111735343933,
            0.9969002604484558,
            0.9961017966270447,
            0.9952943921089172,
            0.9960696697235107,
            0.9963764548301697,
            0.9963764548301697,
            0.9961351156234741,
            0.9969068765640259,
            0.9962705373764038,
            0.9964509606361389,
            0.9969068765640259,
            0.9972457885742188,
            0.9961017966270447
        ]
    },
    "4272": {
        "similarity": 0.9955841898918152,
        "body": "    N = int(input())\n    S = input()\n    return str(S.count('ABC'))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946328997612,
            0.9951798319816589,
            0.9926317930221558,
            0.9894850850105286,
            0.9955841898918152,
            0.9848044514656067,
            0.9952335357666016,
            0.9944744110107422,
            0.9876092672348022,
            0.9944744110107422,
            0.9944744110107422,
            0.9955841898918152,
            0.9912684559822083,
            0.9949895143508911,
            0.9951798319816589,
            0.9955573678016663,
            0.9911067485809326,
            0.9944744110107422,
            0.9940134286880493,
            0.9904334545135498
        ]
    },
    "4092": {
        "similarity": 0.9965775012969971,
        "body": "n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(1, n):\n    if a[i] + a[i-1] == 0:\n        count += 1\nprint(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995796799659729,
            0.9944808483123779,
            0.9918387532234192,
            0.9955777525901794,
            0.9964489340782166,
            0.9965775012969971,
            0.9924360513687134,
            0.9960722923278809,
            0.9952731728553772,
            0.9951808452606201,
            0.9962020516395569,
            0.9964332580566406,
            0.9952540993690491,
            0.9909313917160034,
            0.9947658181190491,
            0.9910451769828796,
            0.9948958158493042,
            0.9960764050483704,
            0.9930453896522522,
            0.9940880537033081
        ]
    },
    "4023": {
        "similarity": 0.9962150454521179,
        "body": "n = int(input())\na = list(map(int, input().split()))\nif all(x == a[0] for x in a):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.995948314666748,
            0.9903006553649902,
            0.9935304522514343,
            0.9961034655570984,
            0.9955717325210571,
            0.9961839318275452,
            0.9947154521942139,
            0.9951611757278442,
            0.9955159425735474,
            0.9949598908424377,
            0.9957236051559448,
            0.9944256544113159,
            0.9943769574165344,
            0.9950099587440491,
            0.9945656657218933,
            0.9962150454521179,
            0.9938292503356934,
            0.9949867129325867,
            0.9904202818870544,
            0.9955958127975464
        ]
    },
    "4160": {
        "similarity": 0.9982005953788757,
        "body": "    X = int(input())\n    balance = 100\n    year = 0\n    while balance < X:\n        balance += balance * 0.01\n        year += 1\n    print(year)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980716705322266,
            0.9974554181098938,
            0.9982005953788757,
            0.9980716705322266,
            0.99802166223526,
            0.9980716705322266,
            0.996626079082489,
            0.9968386292457581,
            0.9982005953788757,
            0.996860682964325,
            0.9939551949501038,
            0.9967372417449951,
            0.9968386292457581,
            0.996626079082489,
            0.9977824687957764,
            0.9972202181816101,
            0.9982005953788757,
            0.9965161681175232,
            0.9980037212371826,
            0.9978499412536621
        ]
    },
    "4815": {
        "similarity": 0.997740626335144,
        "body": "n, p, m = map(int, input().split())\nplayers = {input(): 0 for _ in range(n)}\nwinners = []\nfor _ in range(m):\n    name, score = input().split()\n    players[name] += int(score)\n    if players[name] >= p and name not in winners:\n        winners.append(name)\n\nif winners:\n    for winner in winners:\n        print(f\"{winner} wins!\")\nelse:\n    print(\"No winner!\")",
        "result": "passed",
        "similarities": [
            0.9963513612747192,
            0.9972867369651794,
            0.9966859221458435,
            0.9966842532157898,
            0.9974232912063599,
            0.996140718460083,
            0.9925183653831482,
            0.9961948394775391,
            0.9961193799972534,
            0.99627286195755,
            0.9948269724845886,
            0.9948636293411255,
            0.9971889853477478,
            0.9970933794975281,
            0.997740626335144,
            0.9969751238822937,
            0.9952766299247742,
            0.9973279237747192,
            0.9974683523178101,
            0.9956597685813904
        ]
    },
    "4514": {
        "similarity": 0.9965720772743225,
        "body": "    graph = [[] for _ in range(n)]\n    parent = [0] * n\n    for i in range(2, n + 1):\n        parent[i - 1] = p[i - 2]\n        graph[parent[i - 1]].append(i)\n\n        res = []\n        if node:\n            res.append(node)\n            k -= 1\n        for child in sorted(graph[node]):\n            res.extend(dfs(child, k))\n            k -= len(res)\n            if k == 0:\n                break\n        return res\n\n    for u, k in queries:\n        result = dfs(u - 1, k) or [-1]\n        print(result[-1] + 1 if result else result[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955534934997559,
            0.9963035583496094,
            0.9918688535690308,
            0.995270311832428,
            0.9944953918457031,
            0.9953885674476624,
            0.9959198832511902,
            0.9965720772743225,
            0.9951537251472473,
            0.9960114359855652,
            0.9951667785644531,
            0.9933708906173706,
            0.9956365823745728,
            0.9937322735786438,
            0.9957074522972107,
            0.9956578612327576,
            0.9950485229492188,
            0.9948663115501404,
            0.9949294924736023,
            0.9943926930427551
        ]
    },
    "4585": {
        "similarity": 0.9957166910171509,
        "body": "X = int(input())\nprint(X + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935601949691772,
            0.9954540729522705,
            0.9908414483070374,
            0.9957166910171509,
            0.9955838918685913,
            0.9949280619621277,
            0.994826078414917,
            0.9953929781913757,
            0.9957166910171509,
            0.9651804566383362,
            0.9935601949691772,
            0.992995023727417,
            0.9957166910171509,
            0.9949712157249451,
            0.9955356121063232,
            0.9955177307128906,
            0.9914621114730835,
            0.9900697469711304,
            0.9953940510749817,
            0.994399905204773
        ]
    },
    "4781": {
        "similarity": 0.9967328310012817,
        "body": "K, N = map(int, input().split())\nplayers = list(range(1, 9))\ncur_player = K - 1\nfor _ in range(N):\n    T, Z = input().strip()\n    if Z == 'P':\n        continue\n    cur_player += 1\n    if cur_player >= len(players):\n        cur_player -= len(players)\nprint(players[cur_player] + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934909343719482,
            0.9966248869895935,
            0.9966750144958496,
            0.996194064617157,
            0.9961580038070679,
            0.9958124756813049,
            0.9940059185028076,
            0.9961559176445007,
            0.9958818554878235,
            0.9960005879402161,
            0.9962946176528931,
            0.9943361878395081,
            0.9956085085868835,
            0.9936906695365906,
            0.9963166117668152,
            0.9967328310012817,
            0.9932255148887634,
            0.9965895414352417,
            0.9959586262702942,
            0.995294451713562
        ]
    },
    "4551": {
        "similarity": 0.9963082075119019,
        "body": "    A, B, C, D = map(int, input().split())\n    L, R = A + B, C + D\n    print('Left' if L > R else 'Balanced' if L == R else 'Right')",
        "result": "passed",
        "similarities": [
            0.9949597120285034,
            0.9941369891166687,
            0.9916455149650574,
            0.9963082075119019,
            0.995527446269989,
            0.9963082075119019,
            0.9943809509277344,
            0.9942243695259094,
            0.9963082075119019,
            0.9954823851585388,
            0.9945561289787292,
            0.9944663047790527,
            0.9924824237823486,
            0.9948570132255554,
            0.9962697625160217,
            0.9963082075119019,
            0.9949257373809814,
            0.9898589253425598,
            0.9942243695259094,
            0.9898369312286377
        ]
    },
    "4345": {
        "similarity": 0.9977611899375916,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    increasing, decreasing = [], []\n    for i in range(n):\n        if not increasing or a[i] > increasing[-1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n    if len(increasing) + len(decreasing) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        res = [0]*n\n        for i in range(n):\n            if a[i] in increasing:\n                res[i] = 0\n            else:\n                res[i] = 1\n        print(*res)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977262616157532,
            0.9973076581954956,
            0.9976121783256531,
            0.9966605305671692,
            0.9964784383773804,
            0.9952083230018616,
            0.9970129728317261,
            0.9975892901420593,
            0.9965897798538208,
            0.994918704032898,
            0.9975613355636597,
            0.9977611899375916,
            0.9961640238761902,
            0.9955949187278748,
            0.9972114562988281,
            0.9970148205757141,
            0.9975591897964478,
            0.9973377585411072,
            0.9969072937965393,
            0.9970130920410156
        ]
    },
    "4075": {
        "similarity": 0.9967257976531982,
        "body": "    N, M = map(int, input().split())\n    bulbs = []\n    for _ in range(M):\n        k, *s = map(int, input().split())\n        p = int(input())\n        bulbs.append((k, s, p))\n\n        if all(bulbs[i][2] == sum(switches[b-1] for b in bulbs[i][1]) % 2 == bulbs[i][2] for i in range(M)):\n            return 1\n        else:\n            count = 0\n            for i, switch in enumerate(switches):\n                switches[i] ^= 1\n                count += dfs(switches)\n                switches[i] ^= 1\n            return count\n\n    switches = [0] * N\n    print(dfs(switches))\n\ncount_bulb_combinations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.99322110414505,
            0.9939727783203125,
            0.9960784912109375,
            0.9961044192314148,
            0.9923669099807739,
            0.9908778667449951,
            0.9962255358695984,
            0.9961968660354614,
            0.9959062337875366,
            0.9961182475090027,
            0.9947319030761719,
            0.9957324862480164,
            0.9949527382850647,
            0.9961556196212769,
            0.9914646148681641,
            0.9959100484848022,
            0.9943853616714478,
            0.99396151304245,
            0.9951676726341248,
            0.9967257976531982
        ]
    },
    "4408": {
        "similarity": 0.9949525594711304,
        "body": "    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    favorites = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n\n    counts = [0] * 100001\n    for card in cards:\n        counts[card] += 1\n\n    total_joy = 0\n    for favorite in favorites:\n        count = counts[favorite]\n        if count >= k:\n            total_joy += joy_levels[k - 1] * n\n            break\n        elif count > 0 and count < k:\n            total_joy += joy_levels[count - 1] * n\n\n    print(total_joy)\n\nmax_joy_levels()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907161593437195,
            0.9948796629905701,
            0.9940845966339111,
            0.9901819825172424,
            0.9948740601539612,
            0.9910191893577576,
            0.9932893514633179,
            0.9894610047340393,
            0.9946745038032532,
            0.9949525594711304,
            0.9936758279800415,
            0.9946111440658569,
            0.9742105603218079,
            0.9926316142082214,
            0.9938331246376038,
            0.9929929971694946,
            0.9920260906219482,
            0.994742751121521,
            0.9927790760993958,
            0.9937616586685181
        ]
    },
    "4282": {
        "similarity": 0.9953294396400452,
        "body": "n = int(input())\na = [list(map(int, input().split())) for _ in range(n)]\np = list(range(1, n + 1))\nfor i in range(n):\n    if a[i][0] == p[(i + 1) % n]:\n        a[i][::-1]\n    else:\n        a[i] = [a[i][1], a[i][0]]\n    for j in range(i):\n        if a[i][j] == p[j]:\n            break\n    else:\n        continue\n    break\nprint(*p)",
        "result": "failed: testcase 6",
        "similarities": [
            0.9943887591362,
            0.9928396344184875,
            0.992915689945221,
            0.9937161803245544,
            0.9942497611045837,
            0.9940282106399536,
            0.994415283203125,
            0.9913352131843567,
            0.9953294396400452,
            0.9949973225593567,
            0.9908983111381531,
            0.9939039349555969,
            0.9932624697685242,
            0.9951999187469482,
            0.9896944761276245,
            0.9917096495628357,
            0.994308590888977,
            0.9906516075134277,
            0.9945668578147888,
            0.9947574138641357
        ]
    },
    "4331": {
        "similarity": 0.9977325797080994,
        "body": "    N = int(input())\n    if '7' in str(N):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9962807893753052,
            0.9977325797080994,
            0.9967687726020813,
            0.9977325797080994,
            0.9975391030311584,
            0.996484637260437,
            0.9962807893753052,
            0.9975391030311584,
            0.9977324604988098,
            0.9977324604988098,
            0.9925208687782288,
            0.9975993633270264,
            0.9975391030311584,
            0.9965639710426331,
            0.9976521730422974,
            0.9977324604988098,
            0.996155321598053,
            0.9976521730422974,
            0.9922083616256714,
            0.9961931109428406
        ]
    },
    "4550": {
        "similarity": 0.9959665536880493,
        "body": "a, b, c = map(int, input().split())\nprint(\"Yes\" if (a + b == 2 * c or a + c == 2 * b or b + c == 2 * a) else \"No\")",
        "result": "failed: testcase 2",
        "similarities": [
            0.9931679964065552,
            0.993971586227417,
            0.9956856966018677,
            0.990817129611969,
            0.9944164752960205,
            0.9913268685340881,
            0.994465708732605,
            0.9954896569252014,
            0.9952679872512817,
            0.9949111938476562,
            0.9959665536880493,
            0.9958451986312866,
            0.9955132007598877,
            0.9957423806190491,
            0.9939611554145813,
            0.9950644969940186,
            0.9956789612770081,
            0.9940915703773499,
            0.994277834892273,
            0.9942823648452759
        ]
    },
    "4271": {
        "similarity": 0.9972434639930725,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\ntotal_points = 0\nfor i in range(N):\n    total_points += B[A[i]-1]\n    if i < N-1:\n        total_points += C[A[i+1]-1]\n\nprint(total_points)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957275390625,
            0.9972434639930725,
            0.9903556704521179,
            0.99627286195755,
            0.9963850975036621,
            0.9919681549072266,
            0.996010422706604,
            0.9944007396697998,
            0.9912527203559875,
            0.9959534406661987,
            0.9962482452392578,
            0.9963327646255493,
            0.9959160685539246,
            0.9938260316848755,
            0.9963694214820862,
            0.9972067475318909,
            0.9963545799255371,
            0.9953739047050476,
            0.9959433674812317,
            0.9964288473129272
        ]
    },
    "4848": {
        "similarity": 0.9921443462371826,
        "body": "m = int(input())\nwhile m * m <= m * n:\n    m += 1\nprint(m)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917822480201721,
            0.9889731407165527,
            0.9900022745132446,
            0.9890975952148438,
            0.9744356870651245,
            0.9915943145751953,
            0.9886201620101929,
            0.9836092591285706,
            0.9909150004386902,
            0.9817106127738953,
            0.9744356870651245,
            0.9904664754867554,
            0.9862747192382812,
            0.9894863963127136,
            0.987637996673584,
            0.9837977886199951,
            0.9921443462371826,
            0.988447904586792,
            0.9888495206832886,
            0.990517795085907
        ]
    },
    "4694": {
        "similarity": 0.9965641498565674,
        "body": "N = int(input())\na = list(map(int, input().split()))\nprint(min(a) - min(a[1:]) if N > 1 else 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958927035331726,
            0.9937101006507874,
            0.9953796863555908,
            0.995768129825592,
            0.9961241483688354,
            0.9965641498565674,
            0.9962426424026489,
            0.9964249134063721,
            0.9951905012130737,
            0.9960042238235474,
            0.9960042238235474,
            0.9959776997566223,
            0.9953796863555908,
            0.9952704906463623,
            0.9953796863555908,
            0.9953796863555908,
            0.9960196614265442,
            0.9910461902618408,
            0.9957106709480286,
            0.9949138164520264
        ]
    },
    "4213": {
        "similarity": 0.9968942403793335,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nprint(max(A) - min(A))",
        "result": "passed",
        "similarities": [
            0.9968942403793335,
            0.9944313764572144,
            0.9968942403793335,
            0.9967513084411621,
            0.9908334612846375,
            0.9953859448432922,
            0.9968942403793335,
            0.9967513084411621,
            0.9953859448432922,
            0.9968942403793335,
            0.9968942403793335,
            0.9953859448432922,
            0.9968942403793335,
            0.994690477848053,
            0.9920916557312012,
            0.9968942403793335,
            0.9968942403793335,
            0.9952866435050964,
            0.9903335571289062,
            0.9827378988265991
        ]
    },
    "4471": {
        "similarity": 0.9970094561576843,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        max_height = max(a)\n        min_height = min(a)\n        if max_height - min_height >= 2:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\ncan_clear_field()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944599866867065,
            0.988939106464386,
            0.9960190653800964,
            0.9954553246498108,
            0.9900032877922058,
            0.9944682717323303,
            0.9958949685096741,
            0.9931259155273438,
            0.99591463804245,
            0.9969490766525269,
            0.9959098696708679,
            0.9970094561576843,
            0.9965080618858337,
            0.9966769814491272,
            0.9964633584022522,
            0.9969793558120728,
            0.9958788156509399,
            0.995387613773346,
            0.9957305788993835,
            0.9956321716308594
        ]
    },
    "4802": {
        "similarity": 0.9941381216049194,
        "body": "    h, m = map(int, input().split())\n    m -= 45\n    if m < 0:\n        m += 60\n        h -= 1\n    print(h % 24, m)\n\nadjust_time()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932212829589844,
            0.9928208589553833,
            0.9745875000953674,
            0.9923447966575623,
            0.9850484132766724,
            0.9928750395774841,
            0.9934332966804504,
            0.9932284355163574,
            0.9941049218177795,
            0.9941381216049194,
            0.9914627075195312,
            0.9937073588371277,
            0.9930833578109741,
            0.9936455488204956,
            0.9924148917198181,
            0.994035005569458,
            0.9765427112579346,
            0.9923575520515442,
            0.9932212829589844,
            0.9938527941703796
        ]
    },
    "4890": {
        "similarity": 0.9964813590049744,
        "body": "n, m, s, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nif sum(c) + n > m * d or n == 0:\n    print(\"impossible\")\nelse:\n    refill = [0] * s\n    for i in range(s):\n        if c[i] < d:\n            refill[i] += min(n, d - c[i])\n            n -= min(n, d - c[i])\n    if n > 0:\n        refill[0] += n\n    print(*refill)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964813590049744,
            0.9935401082038879,
            0.9957337975502014,
            0.994879961013794,
            0.9957395792007446,
            0.9960437417030334,
            0.9952706098556519,
            0.995586097240448,
            0.9958676099777222,
            0.9959375262260437,
            0.9955617189407349,
            0.9962246417999268,
            0.9921053051948547,
            0.9959536194801331,
            0.9955875873565674,
            0.9917831420898438,
            0.9950514435768127,
            0.9952081441879272,
            0.9933698773384094,
            0.9881350994110107
        ]
    },
    "4286": {
        "similarity": 0.9954952597618103,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, input().split())\n        x -= 1\n        y -= 1\n        graph[x].append((y, max(w, a[x] + a[y])))\n        graph[y].append((x, max(w, a[x] + a[y])))\n        special_offers.append((x, y, w))\n    visited = [False] * n\n        visited[v] = True\n        for u, cost in graph[v]:\n            if not visited[u]:\n                dfs(u)\n    dfs(0)\n    ans = sum(a[i] + a[j] for i in range(n) for j in range(i+1, n) if not visited[i] or not visited[j])\n    for x, y, w in special_offers:\n        if not visited[x] or not visited[y]:\n            ans -= max(w, a[x] + a[y])\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920766949653625,
            0.9936093091964722,
            0.9926435351371765,
            0.9933368563652039,
            0.9901442527770996,
            0.9937970042228699,
            0.9936849474906921,
            0.993242084980011,
            0.9942952394485474,
            0.9949462413787842,
            0.9842926859855652,
            0.99480140209198,
            0.994428813457489,
            0.9931307435035706,
            0.9907851219177246,
            0.9892545938491821,
            0.9948742389678955,
            0.9931520223617554,
            0.9954952597618103,
            0.9940032958984375
        ]
    },
    "4713": {
        "similarity": 0.9973469972610474,
        "body": "n = int(input())\ns = input()\nx, max_x = 0, x\nfor c in s:\n    if c == 'I':\n        x += 1\n    else:\n        x -= 1\n    max_x = max(max_x, x)\nprint(max_x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959251880645752,
            0.9973469972610474,
            0.9967434406280518,
            0.9972445964813232,
            0.9953029155731201,
            0.9973469972610474,
            0.9965676069259644,
            0.9967938661575317,
            0.9953029155731201,
            0.9964801669120789,
            0.9953029155731201,
            0.9967434406280518,
            0.9958334565162659,
            0.9954046010971069,
            0.9959622621536255,
            0.9953532218933105,
            0.9967434406280518,
            0.9963858723640442,
            0.9973025321960449,
            0.9924864768981934
        ]
    },
    "4698": {
        "similarity": 0.9978522062301636,
        "body": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\n\nfor _ in range(M):\n    P, X = map(int, input().split())\n    time = sum(T[i-1] if i != P else X for i in range(1, N+1))\n    print(time)",
        "result": "passed",
        "similarities": [
            0.9973870515823364,
            0.9971393942832947,
            0.9969339966773987,
            0.9976245760917664,
            0.9952248334884644,
            0.9960289001464844,
            0.9967799186706543,
            0.9964671730995178,
            0.9963845014572144,
            0.9969470500946045,
            0.9969881772994995,
            0.9978522062301636,
            0.9973832368850708,
            0.9960630536079407,
            0.9918051362037659,
            0.9970656037330627,
            0.9967697858810425,
            0.9973832368850708,
            0.996905505657196,
            0.9969363808631897
        ]
    },
    "4841": {
        "similarity": 0.9971743226051331,
        "body": "n = int(input())\nwords = input().split()\ncount = 0\nfor word in words:\n    if word == 'mumble':\n        continue\n    num = int(word)\n    if num != count + 1:\n        print(\"something is fishy\")\n        break\n    count += 1\nelse:\n    print(\"makes sense\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971743226051331,
            0.9966017007827759,
            0.9969486594200134,
            0.9959312081336975,
            0.9961974620819092,
            0.9958889484405518,
            0.9970475435256958,
            0.996629536151886,
            0.9963129162788391,
            0.9970754384994507,
            0.996836245059967,
            0.9969096183776855,
            0.9893732666969299,
            0.9966123700141907,
            0.9963692426681519,
            0.9966904520988464,
            0.9942619800567627,
            0.9939693808555603,
            0.9961330890655518,
            0.9964760541915894
        ]
    },
    "4865": {
        "similarity": 0.9967824816703796,
        "body": "for _ in range(int(input())):\n    dir, D, H, M = input().split()\n    D, H, M = map(int, [D, H, M])\n    if dir == 'F':\n        H += D // 60\n        M += D % 60\n    else:\n        H -= D // 60\n        M -= D % 60\n    if M < 0:\n        M += 60\n        H -= 1\n    if H < 0:\n        H += 24\n    print(f\"{H} {M}\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9947731494903564,
            0.9959574341773987,
            0.9940842986106873,
            0.9966163635253906,
            0.9946332573890686,
            0.995050311088562,
            0.9926729798316956,
            0.9960909485816956,
            0.9957906007766724,
            0.9947478771209717,
            0.9946268200874329,
            0.9958803057670593,
            0.9960421323776245,
            0.9940676689147949,
            0.9946691393852234,
            0.9952619671821594,
            0.9965835213661194,
            0.9965485334396362,
            0.9967824816703796,
            0.9944760203361511
        ]
    },
    "4957": {
        "similarity": 0.9965980052947998,
        "body": "    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    coffee_shops = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and (i-1>=0 and grid[i-1][j]=='.') and (i+1<n and grid[i+1][j]=='.'):\n                coffee_shops.append((i, j))\n    while len(coffee_shops) > 0:\n        i, j = coffee_shops.pop()\n        grid[i][j] = 'E'\n        if i-1>=0 and grid[i-1][j]=='.':\n            coffee_shops.append((i-1, j))\n        if i+1<n and grid[i+1][j]=='.':\n            coffee_shops.append((i+1, j))\n    print('\\n'.join([''.join(row) for row in grid]))\n\nplace_coffee_shops()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932700991630554,
            0.9963338971138,
            0.9965977072715759,
            0.9942508339881897,
            0.9954769611358643,
            0.9947074055671692,
            0.9959926605224609,
            0.996132493019104,
            0.9959860444068909,
            0.9949736595153809,
            0.9963475465774536,
            0.9951914548873901,
            0.9930579662322998,
            0.995447039604187,
            0.9965980052947998,
            0.9942022562026978,
            0.9915948510169983,
            0.9964317679405212,
            0.9957237243652344,
            0.9959313273429871
        ]
    },
    "4382": {
        "similarity": 0.9971102476119995,
        "body": "N = int(input())\nprint(N**3)",
        "result": "passed",
        "similarities": [
            0.9970211386680603,
            0.9969910383224487,
            0.993558406829834,
            0.9940316081047058,
            0.9969910383224487,
            0.9886448383331299,
            0.9931818246841431,
            0.9957631826400757,
            0.996474027633667,
            0.994425356388092,
            0.9969910383224487,
            0.9934978485107422,
            0.9970211386680603,
            0.9934325814247131,
            0.9957143068313599,
            0.9970211386680603,
            0.9969910383224487,
            0.9958441853523254,
            0.9958092570304871,
            0.9971102476119995
        ]
    },
    "4456": {
        "similarity": 0.9970316886901855,
        "body": "n, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nif len(set(p)) < k or len(set(q)) < k:\n    print(\"NO\")\nelse:\n    s = ['a'] * n\n    for i in range(n):\n        if p[i] == q[i]:\n            s[p[i] - 1] = chr(97 + i % k)\n    print(\"YES\\n\", ''.join(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954851269721985,
            0.9966785907745361,
            0.9957972168922424,
            0.9941419363021851,
            0.9959822297096252,
            0.9920943379402161,
            0.9964617490768433,
            0.9941387176513672,
            0.9959682822227478,
            0.9965673685073853,
            0.9949194192886353,
            0.9927416443824768,
            0.9970316886901855,
            0.9962621927261353,
            0.9880185723304749,
            0.9957848787307739,
            0.9935705065727234,
            0.9967353343963623,
            0.9922709465026855,
            0.995863139629364
        ]
    },
    "4594": {
        "similarity": 0.9942916035652161,
        "body": "n = int(input())\ndiameters = [int(input()) for _ in range(n)]\nmax_layers = len(set(diameters)) if n > 0 else 0\nprint(max_layers)",
        "result": "passed",
        "similarities": [
            0.9935519695281982,
            0.9915060997009277,
            0.992197573184967,
            0.9922203421592712,
            0.9937956929206848,
            0.9874069094657898,
            0.9942916035652161,
            0.9938060641288757,
            0.9929406046867371,
            0.9891834259033203,
            0.9930478930473328,
            0.9930402636528015,
            0.9913699626922607,
            0.9905403852462769,
            0.9915155172348022,
            0.9909217357635498,
            0.9918016195297241,
            0.992197573184967,
            0.9923049807548523,
            0.991279125213623
        ]
    },
    "4560": {
        "similarity": 0.9969948530197144,
        "body": "    N = int(input())\n    A = int(input())\n    if N % 500 <= A:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9952467679977417,
            0.9959204792976379,
            0.9967522025108337,
            0.9897733926773071,
            0.9965773224830627,
            0.9959204792976379,
            0.9967522025108337,
            0.9962385296821594,
            0.9958142638206482,
            0.9962963461875916,
            0.9964414834976196,
            0.9968403577804565,
            0.9969948530197144,
            0.9959152936935425,
            0.9962963461875916,
            0.9962963461875916,
            0.9961958527565002,
            0.9962963461875916,
            0.9961958527565002,
            0.9936376214027405
        ]
    },
    "4320": {
        "similarity": 0.9927657246589661,
        "body": "    n = int(input())\n    x = 1\n    while True:\n        if (x * (1 - pow(2, n)) // (1 - pow(2, 1))) == n:\n            print(x)\n            break\n        x += 1",
        "result": "timed out",
        "similarities": [
            0.9925336241722107,
            0.9888325929641724,
            0.9906444549560547,
            0.9907441735267639,
            0.9721147418022156,
            0.9854175448417664,
            0.9877060651779175,
            0.985925555229187,
            0.9918598532676697,
            0.9913554787635803,
            0.9918208718299866,
            0.9912800192832947,
            0.9795538187026978,
            0.9887402057647705,
            0.9882803559303284,
            0.9927657246589661,
            0.9913029074668884,
            0.9903140664100647,
            0.9907750487327576,
            0.9865704774856567
        ]
    },
    "4500": {
        "similarity": 0.9969329833984375,
        "body": "    A, B, C = map(int, input().split())\n    print(\"Yes\" if A + B >= C else \"No\")",
        "result": "passed",
        "similarities": [
            0.9939908385276794,
            0.9939908385276794,
            0.9968553185462952,
            0.9968553185462952,
            0.9968553185462952,
            0.9959970116615295,
            0.9965590238571167,
            0.9969329833984375,
            0.9968553781509399,
            0.996569812297821,
            0.9968553781509399,
            0.9968553781509399,
            0.9968553781509399,
            0.9939908385276794,
            0.9936797618865967,
            0.9939908385276794,
            0.9924454092979431,
            0.9965590238571167,
            0.9965590238571167,
            0.9969329833984375
        ]
    },
    "4739": {
        "similarity": 0.9975442290306091,
        "body": "M, N = map(int, input().split())\nT = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nspeeds = set()\nfor i in range(M):\n    for j in range(1, M-i):\n        speed = (X[i+j] - X[i]) / (T[i+j] - T[i])\n        speeds.add(speed)\nprint(len(speeds))\nprint(' '.join(map(str, sorted(list(speeds)))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971309304237366,
            0.9943620562553406,
            0.9959367513656616,
            0.9937095642089844,
            0.9957060813903809,
            0.9968407154083252,
            0.9970317482948303,
            0.9934297204017639,
            0.9971680045127869,
            0.9969757795333862,
            0.9973534345626831,
            0.9974073171615601,
            0.9970381855964661,
            0.9969609975814819,
            0.9912665486335754,
            0.9975442290306091,
            0.9969434142112732,
            0.9955216646194458,
            0.993618905544281,
            0.9956216216087341
        ]
    },
    "4410": {
        "similarity": 0.991644024848938,
        "body": "    occupied = [i for i, c in enumerate(s) if c == '1']\n    free = []\n    for i in range(n):\n        if i not in occupied and all(abs(i - j) > k for j in occupied):\n            free.append(i)\n    return len(free)\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913691282272339,
            0.9905521273612976,
            0.9914336800575256,
            0.9875620603561401,
            0.9889727234840393,
            0.9890102744102478,
            0.9914003610610962,
            0.9893931150436401,
            0.9896820783615112,
            0.983315646648407,
            0.9901946187019348,
            0.9891053438186646,
            0.9904642701148987,
            0.987797200679779,
            0.9909963011741638,
            0.9734413027763367,
            0.9882118105888367,
            0.991644024848938,
            0.978401780128479,
            0.9911968111991882
        ]
    },
    "2441": {
        "similarity": 0.9968286156654358,
        "body": "n = int(input())\ncosts = list(map(int, input().split()))\nm = int(input())\n\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u - 1].append(v - 1)\n\ndp = [[float('inf')] * (2 ** n) for _ in range(n + 1)]\ndp[0][0] = 0\n\nfor i in range(1, n + 1):\n    for state in range(2 ** n):\n        if dp[i - 1][state] == float('inf'):\n            continue\n        for j in graph[i - 1]:\n            new_state = state | (1 << j)\n            dp[i][new_state] = min(dp[i][new_state], dp[i - 1][state] + costs[j])\n\nmin_cost = float('inf')\nfor state in range(2 ** n):\n    if dp[n][state] < min_cost:\n        min_cost = dp[n][state]\n        ways = sum((state >> i) & 1 for i in range(n))\n    elif dp[n][state] == min_cost and ((state >> i) & 1 for i in range(n)).count(1) <= ways:\n        ways += 1\n\nprint(min_cost, ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962947368621826,
            0.996418833732605,
            0.994709849357605,
            0.9938833117485046,
            0.9967668652534485,
            0.9945429563522339,
            0.9939278364181519,
            0.993869960308075,
            0.9957578778266907,
            0.9955418109893799,
            0.9963604807853699,
            0.9949098229408264,
            0.9957544207572937,
            0.9949377179145813,
            0.9901012778282166,
            0.9947658181190491,
            0.9960479736328125,
            0.9962975382804871,
            0.9960918426513672,
            0.9968286156654358
        ]
    },
    "276": {
        "similarity": 0.9969114065170288,
        "body": "    gems = ['power', 'time', 'space', 'soul', 'reality', 'mind']\n    n = int(input())\n    present_gems = set([input() for _ in range(n)])\n    absent_gems = [gem for gem in gems if gem not in present_gems]\n    print(len(absent_gems))\n    for gem in absent_gems:\n        print(gem.capitalize())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961708784103394,
            0.9969114065170288,
            0.9946542382240295,
            0.9949647188186646,
            0.9954556822776794,
            0.996555507183075,
            0.995991587638855,
            0.9968267679214478,
            0.9963697195053101,
            0.9956011772155762,
            0.9960077404975891,
            0.9955930113792419,
            0.994387686252594,
            0.9964228272438049,
            0.9958741068840027,
            0.9956530332565308,
            0.9960905313491821,
            0.9948878884315491,
            0.9954186677932739,
            0.9938902854919434
        ]
    },
    "2635": {
        "similarity": 0.9949628710746765,
        "body": "    if not matrix: return []\n    R, C = len(matrix), len(matrix[0])\n    seen = [[False] * C for _ in range(R)]\n    ans = []\n    dr, dc = 0, 1\n    r, c = 0, 0\n    for _ in range(R * C):\n        ans.append(matrix[r][c])\n        seen[r][c] = True\n        cr, cc = r + dr, c + dc\n        if 0 <= cr < R and 0 <= cc < C and not seen[cr][cc]:\n            r, c = cr, cc\n        else:\n            dr, dc = -dc, -dr\n            r, c = r + dr, c + dc\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9805862307548523,
            0.9946882128715515,
            0.9948411583900452,
            0.9947733879089355,
            0.9948163628578186,
            0.9949628710746765,
            0.9940401315689087,
            0.9945824146270752,
            0.994623064994812,
            0.9923285245895386,
            0.9915910363197327,
            0.9926708936691284,
            0.9935120940208435,
            0.991682231426239,
            0.9924529194831848,
            0.9729602336883545,
            0.9947644472122192,
            0.993212878704071,
            0.9925328493118286,
            0.9846982359886169
        ]
    },
    "281": {
        "similarity": 0.9948192238807678,
        "body": "    a, b = map(int, input().split())\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n    result = factorial_b // factorial_a\n    print(result % 10)\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936410784721375,
            0.9944006204605103,
            0.9942876696586609,
            0.994249165058136,
            0.9947108030319214,
            0.9914717674255371,
            0.9947271943092346,
            0.9948192238807678,
            0.9933019876480103,
            0.9941727519035339,
            0.9931889772415161,
            0.991107165813446,
            0.99204021692276,
            0.9863568544387817,
            0.9942387938499451,
            0.9944177269935608,
            0.9906861186027527,
            0.9884225726127625,
            0.9934948682785034,
            0.9898034930229187
        ]
    },
    "2300": {
        "similarity": 0.9981324076652527,
        "body": "    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for _ in range(m):\n        t = int(input())\n        if t == 1:\n            x, v = map(int, input().split())\n            arr[x-1] = v\n        elif t == 2:\n            l, r = map(int, input().split())\n            s = sum(arr[l-1:r])\n            print(s % 1000000000)\n        else:\n            l, r, d = map(int, input().split())\n            arr[l-1:r] = [a+d for a in arr[l-1:r]]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977316856384277,
            0.9973000288009644,
            0.9971972107887268,
            0.9978746175765991,
            0.9981324076652527,
            0.9976834058761597,
            0.9974874258041382,
            0.9977052807807922,
            0.9927605390548706,
            0.9971405863761902,
            0.9980181455612183,
            0.9980838298797607,
            0.9977491497993469,
            0.9967274069786072,
            0.9979249238967896,
            0.9971339702606201,
            0.9949198365211487,
            0.9967661499977112,
            0.9980404376983643,
            0.9969261884689331
        ]
    },
    "2104": {
        "similarity": 0.9968281984329224,
        "body": "    l, r = map(int, input().split())\n    pairs = []\n    for i in range(l, r + 1):\n        if i % 2 == 0:\n            pairs.append((i, i + 1))\n    if len(pairs) != (r - l + 1) // 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for pair in pairs:\n            print(*pair)\n\ngenerate_pairs()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968281984329224,
            0.995478093624115,
            0.9938068389892578,
            0.9962081909179688,
            0.9958668947219849,
            0.9959132671356201,
            0.9962272644042969,
            0.9951652884483337,
            0.9960542321205139,
            0.9959134459495544,
            0.9949964284896851,
            0.9948991537094116,
            0.9962900876998901,
            0.9949601888656616,
            0.9944177865982056,
            0.9954321980476379,
            0.9958755373954773,
            0.9951892495155334,
            0.9952474236488342,
            0.9957554340362549
        ]
    },
    "1995": {
        "similarity": 0.9970628619194031,
        "body": "s = input()\nm = int(input())\nfor _ in range(m):\n    l, r, k = map(int, input().split())\n    s = s[:l-1] + s[l-1:r][::-1]*(k%len(s[l-1:r]))[::-1] + s[r:]\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970628619194031,
            0.9924831390380859,
            0.9962252378463745,
            0.9916710257530212,
            0.9960688352584839,
            0.9968492388725281,
            0.9969472289085388,
            0.9969791769981384,
            0.9963549375534058,
            0.9962705373764038,
            0.9940019845962524,
            0.9967505931854248,
            0.9966979622840881,
            0.9968189597129822,
            0.9948897957801819,
            0.9969398975372314,
            0.9963346719741821,
            0.9953974485397339,
            0.9965693950653076,
            0.9957970380783081
        ]
    },
    "2064": {
        "similarity": 0.9918813109397888,
        "body": "n = int(input())\nif n <= 4:\n    print(n - 1)\nelse:\n    print(9 * (n // 7) + min(n % 7, 6))",
        "result": "failed: testcase 1",
        "similarities": [
            0.9908031821250916,
            0.9918813109397888,
            0.9898508787155151,
            0.9886147379875183,
            0.9892949461936951,
            0.9786847829818726,
            0.987131655216217,
            0.9892507791519165,
            0.9898813962936401,
            0.9881254434585571,
            0.9852142333984375,
            0.9877066612243652,
            0.9901503324508667,
            0.989906907081604,
            0.9868922829627991,
            0.9825119376182556,
            0.9859077334403992,
            0.9824562072753906,
            0.9876836538314819,
            0.9896411895751953
        ]
    },
    "1715": {
        "similarity": 0.9950556755065918,
        "body": "A, B, Q = map(int, input().split())\nshrines = [int(input()) for _ in range(A)]\ntemples = [int(input()) for _ in range(B)]\n\nfor _ in range(Q):\n    x = int(input())\n    min_distance = float('inf')\n    for shrine in shrines:\n        if shrine >= x:\n            break\n        distance_to_shrine = abs(shrine - x)\n        min_temple_distance = min([abs(temple - shrine) + distance_to_shrine for temple in temples])\n        min_distance = min(min_distance, min_temple_distance)\n    print(min_distance)",
        "result": "timed out",
        "similarities": [
            0.9899494647979736,
            0.9934908151626587,
            0.9946462512016296,
            0.9949582815170288,
            0.9948193430900574,
            0.9907733798027039,
            0.994826078414917,
            0.9949698448181152,
            0.9883037209510803,
            0.9945637583732605,
            0.9950556755065918,
            0.9936316609382629,
            0.9924529194831848,
            0.9942716360092163,
            0.9917638897895813,
            0.9941387176513672,
            0.9943940043449402,
            0.9907028079032898,
            0.9920096397399902,
            0.9937352538108826
        ]
    },
    "2074": {
        "similarity": 0.9953755736351013,
        "body": "n, m = map(int, input().split())\ncosts = []\nfor _ in range(n):\n    costs.append(list(map(int, input().split())))\n\nmin_costs = [min(row) for row in costs]\nmax_min_cost = max(min_costs)\nprint(max_min_cost)",
        "result": "passed",
        "similarities": [
            0.993365466594696,
            0.9936455488204956,
            0.9952916502952576,
            0.9937763214111328,
            0.9949473142623901,
            0.9898703694343567,
            0.9951796531677246,
            0.9936019778251648,
            0.9942285418510437,
            0.9930374622344971,
            0.993577241897583,
            0.9943243265151978,
            0.9930374622344971,
            0.9953755736351013,
            0.9939054250717163,
            0.9930374622344971,
            0.9943312406539917,
            0.9942924380302429,
            0.9936035871505737,
            0.9930374622344971
        ]
    },
    "2921": {
        "similarity": 0.9970861673355103,
        "body": "    m, u, d = map(float, input().split())\n    drinks = []\n    for _ in range(int(d)):\n        name, strength, size, price = input().split()\n        strength = float(strength)\n        size = {'1/1': 3, '1/2': 2, '1/3': 1}[size]\n        price = float(price)\n        drinks.append((name, strength * size, price))\n\n    units_bought = {}\n    total_spent = 0\n    while u > 0 and m > 0:\n        for name, units, cost in drinks:\n            if units <= u and cost <= m:\n                u -= units\n                total_spent += cost\n                units_bought[name] = units_bought.get(name, 0) + 1\n                break\n        else:\n            break\n\n    if u > 0 or total_spent != round(m):\n        print('IMPOSSIBLE')\n    else:\n        for name, count in sorted(units_bought.items()):\n            print(f'{name} {count}')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926480650901794,
            0.9966524243354797,
            0.9965395927429199,
            0.9949470162391663,
            0.9969614744186401,
            0.9954982399940491,
            0.9961999654769897,
            0.996528148651123,
            0.9957213401794434,
            0.9953104257583618,
            0.9966838359832764,
            0.996332049369812,
            0.9969859719276428,
            0.9968864321708679,
            0.9961841106414795,
            0.9936206340789795,
            0.995792806148529,
            0.9965336322784424,
            0.996903657913208,
            0.9970861673355103
        ]
    },
    "1642": {
        "similarity": 0.9937294721603394,
        "body": "import sys\n\n    n = int(sys.stdin.readline())\n    points = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    angles = [(points[i][0] - points[i-1][0], points[i][1] - points[i-1][1]) for i in range(n)]\n\n    max_length = 0\n    for i in range(n):\n        j = (i + 1) % n\n        k = (i + 2) % n\n        length = ((points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2)**0.5\n        angle_i = math.atan2(points[i][1] - points[i-1][1], points[i][0] - points[i-1][0])\n        angle_j = math.atan2(points[j][1] - points[i][1], points[j][0] - points[i][0])\n        diff_angle = abs(angle_i - angle_j)\n        if diff_angle > max_length:\n            max_length = diff_angle\n\n    print(max_length * 0.5)\n\nif __name__ == '__main__':\n    max_distance()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902199506759644,
            0.9924928545951843,
            0.990916907787323,
            0.9888914227485657,
            0.9887896180152893,
            0.9929623007774353,
            0.9856230020523071,
            0.9857865571975708,
            0.9919753074645996,
            0.9882330894470215,
            0.9908143877983093,
            0.9897249937057495,
            0.9887476563453674,
            0.9875096678733826,
            0.9928137063980103,
            0.9922075867652893,
            0.9848693013191223,
            0.9881815910339355,
            0.9937294721603394,
            0.9911671876907349
        ]
    },
    "947": {
        "similarity": 0.9955322742462158,
        "body": "    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        print((n + 1) // 2, (n - 1) // 2)\n\nwhile True:\n    try:\n        t = int(input())\n        for _ in range(t):\n            solve()\n    except Exception as e:\n        pass",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952912926673889,
            0.9905585050582886,
            0.9760993123054504,
            0.9955166578292847,
            0.9948943257331848,
            0.9941980242729187,
            0.9951862692832947,
            0.9954603910446167,
            0.9913012981414795,
            0.995092511177063,
            0.9922728538513184,
            0.9949412941932678,
            0.9954603910446167,
            0.9946934580802917,
            0.9941775798797607,
            0.9919230937957764,
            0.9922791719436646,
            0.9947127103805542,
            0.9901753664016724,
            0.9955322742462158
        ]
    },
    "743": {
        "similarity": 0.9945369362831116,
        "body": "    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    return sum(nums[:n//2] + [nums[n//2]] if n % 2 == 0 else nums[:(n+1)//2])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929972290992737,
            0.9850050210952759,
            0.991839587688446,
            0.9938337206840515,
            0.985410213470459,
            0.9898203015327454,
            0.9937541484832764,
            0.9915435314178467,
            0.9911582469940186,
            0.9905487895011902,
            0.9938135743141174,
            0.9945369362831116,
            0.9942772388458252,
            0.9932429790496826,
            0.9934599995613098,
            0.9935587048530579,
            0.9932221174240112,
            0.9905487895011902,
            0.9928000569343567,
            0.987984299659729
        ]
    },
    "1397": {
        "similarity": 0.9956063032150269,
        "body": "n, m = map(int, input().split())\ndisallowed_pairs = set(map(tuple, [map(int, input().split()) for _ in range(m)]))\nroads = []\nfor i in range(1, n + 1):\n    if i == 1:\n        roads.append((i, i + 1))\n    elif i == n:\n        roads.append((i - 1, i))\n    else:\n        prev = i - 1\n        next_ = i + 1\n        while (prev, i) in disallowed_pairs or (i, next_) in disallowed_pairs:\n            prev -= 1\n            next_ += 1\n        roads.append((prev, i))\n        if next_ <= n:\n            roads.append((i, next_))\nprint(len(roads))\nfor a, b in roads:\n    print(a, b)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924922585487366,
            0.9908353090286255,
            0.9885651469230652,
            0.9939683675765991,
            0.9904249310493469,
            0.9947251677513123,
            0.9929066896438599,
            0.9899080395698547,
            0.9940873384475708,
            0.992570698261261,
            0.9946943521499634,
            0.9933651685714722,
            0.9956063032150269,
            0.9948978424072266,
            0.9949939250946045,
            0.9949902892112732,
            0.9919120669364929,
            0.9879260659217834,
            0.9920315146446228,
            0.9949918985366821
        ]
    },
    "1144": {
        "similarity": 0.9955482482910156,
        "body": "n = int(input())\ns = input()\nm = int(input())\n\nt = 'a' * m\n\n    count = 0\n    i = 0\n    while i <= len(s) - m:\n        if s[i:i+m] == t:\n            count += 1\n            i += m\n        else:\n            i += 1\n    return count\n\n    max_beauty = beauty(s.replace('?', 'a'), t)\n    min_replacements = float('inf')\n    for i in range(max_beauty + 1):\n        new_s = s.replace('?', 'a' if i % 2 == 0 else 'b')[:len(t)] + s[len(t):]\n        replacements = sum(1 for c in new_s if c != t)\n        beauty_new_s = beauty(new_s, t)\n        if beauty_new_s >= max_beauty and replacements < min_replacements:\n            min_replacements = replacements\n    return min_replacements\n\nprint(min_replacements(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928679466247559,
            0.9945293068885803,
            0.9951657652854919,
            0.9955482482910156,
            0.994598388671875,
            0.9913017749786377,
            0.9927629232406616,
            0.9887592792510986,
            0.9940926432609558,
            0.994516909122467,
            0.9937290549278259,
            0.9916002154350281,
            0.9953663349151611,
            0.9935747385025024,
            0.9835156798362732,
            0.9929247498512268,
            0.9949552416801453,
            0.9927878379821777,
            0.9922592639923096,
            0.9919825196266174
        ]
    },
    "890": {
        "similarity": 0.9966970682144165,
        "body": "    n, l, r, x = map(int, input().split())\n    problems = list(map(int, input().split()))\n    dp = [[0]*(r+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(l, r+1):\n            if problems[i-1] > j-l:\n                continue\n            dp[i][j] = dp[i-1][j]\n            if i > 0 and j >= l:\n                dp[i][j] += dp[i-1][max(0, j-problems[i-1])]\n    print(sum(dp[n][l:r+1]))\n\ncount_problemsets()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946311116218567,
            0.9944943785667419,
            0.993678867816925,
            0.9959392547607422,
            0.9914848208427429,
            0.9959455132484436,
            0.9950633645057678,
            0.995416522026062,
            0.9957823753356934,
            0.9940233826637268,
            0.995853841304779,
            0.9958676695823669,
            0.9951481223106384,
            0.9933351278305054,
            0.9947096109390259,
            0.9946987628936768,
            0.9961479902267456,
            0.9939857125282288,
            0.9966970682144165,
            0.9959710836410522
        ]
    },
    "2410": {
        "similarity": 0.997083842754364,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        yasser_tastiness = sum(a)\n       adel_max_tastiness = max(sum(a[i:j]) for i in range(1, n) for j in range(i+1, n+1))\n        print(\"YES\" if yasser_tastiness > adel_max_tastiness else \"NO\")\n\ncan_yasser_be_happy()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950045347213745,
            0.9905803203582764,
            0.9964372515678406,
            0.993996798992157,
            0.9959512948989868,
            0.9969903826713562,
            0.997083842754364,
            0.9939965009689331,
            0.9962106347084045,
            0.99518221616745,
            0.9962021708488464,
            0.9955137968063354,
            0.9929311871528625,
            0.9936681389808655,
            0.9924992322921753,
            0.9941300749778748,
            0.9967931509017944,
            0.9968410134315491,
            0.9964263439178467,
            0.9965616464614868
        ]
    },
    "1004": {
        "similarity": 0.9962507486343384,
        "body": "n = int(input())\na = list(map(int, input().split()))\ndays = []\ncurrent_day = []\nfor i in range(n):\n    if a[i] > 0:\n        current_day.append(a[i])\n    elif a[i] < 0:\n        if current_day and abs(current_day[-1]) == a[i]:\n            current_day.pop()\n        else:\n            print(-1)\n            exit()\n    if not current_day or i == n - 1:\n        days.append(len(current_day))\n        current_day = []\nif len(days) > 0:\n    print(len(days))\n    print(*days)\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941994547843933,
            0.994564950466156,
            0.9954672455787659,
            0.9953441619873047,
            0.9912891387939453,
            0.9960171580314636,
            0.9959562420845032,
            0.993951678276062,
            0.9947993755340576,
            0.993810772895813,
            0.9933411478996277,
            0.9945849180221558,
            0.9958475232124329,
            0.9962507486343384,
            0.9946491718292236,
            0.9944343566894531,
            0.9956368207931519,
            0.9957633018493652,
            0.9950055480003357,
            0.9943791627883911
        ]
    },
    "531": {
        "similarity": 0.9958711266517639,
        "body": "    n = int(input())\n    xs = list(map(int, input().split()))\n    min_x = min(xs)\n    max_x = max(xs)\n    y_avg = sum(xs) / n\n\n    ys = []\n    for _ in range(n):\n        if len(ys) == 0 or ys[-1] != y_avg:\n            ys.append(y_avg)\n\n    print(len([y for y in ys if y in xs]))\n    print(' '.join(map(str, ys)))\n\nfind_measurements()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935140013694763,
            0.99444180727005,
            0.9928489327430725,
            0.9917734861373901,
            0.9921393394470215,
            0.9958711266517639,
            0.9950021505355835,
            0.993617594242096,
            0.9946410655975342,
            0.9908259510993958,
            0.9951652884483337,
            0.994788646697998,
            0.994889497756958,
            0.9938823580741882,
            0.9945068359375,
            0.9868754148483276,
            0.9936707019805908,
            0.992820143699646,
            0.9940217733383179,
            0.9915634989738464
        ]
    },
    "510": {
        "similarity": 0.9944364428520203,
        "body": "a, b, c, d = map(int, input().split())\nmax_dist = max(a-b, b-c, a-c)\nif max_dist >= 2*d:\n    print(0)\nelse:\n    print(max_dist + abs(b-a-d//2) + abs(c-b-d//2))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929953217506409,
            0.9944364428520203,
            0.9920840263366699,
            0.9894222617149353,
            0.9929755330085754,
            0.9938454031944275,
            0.9926121234893799,
            0.993399977684021,
            0.9927677512168884,
            0.9942492246627808,
            0.9938454031944275,
            0.9940117597579956,
            0.9918832182884216,
            0.9924976229667664,
            0.9937795400619507,
            0.993564784526825,
            0.9941462278366089,
            0.9851446747779846,
            0.9919582009315491,
            0.9932164549827576
        ]
    },
    "2555": {
        "similarity": 0.9950762391090393,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_strengths = []\n    for _ in range(q + 1):\n        l, r = map(int, input().split())\n        l -= 1\n        r -= 1\n        strengths = [a[i] * (-1) ** i for i in range(n)]\n        if l > r:\n            l, r = r, l\n        max_strength = sum(strengths[l:r+1])\n        while len(max_strengths) <= _:\n            max_strengths.append(max_strength)\n            strengths[l], strengths[r] = strengths[r], strengths[l]\n            max_strength = sum(strengths[:l]) + sum(strengths[l+1:])\n    print(*max_strengths)\n\nt = int(input())\nfor _ in range(t):\n    process_test_case()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921179413795471,
            0.9906999468803406,
            0.9948320984840393,
            0.9907609820365906,
            0.9927161335945129,
            0.9934294819831848,
            0.9932560324668884,
            0.9923613667488098,
            0.9941538572311401,
            0.9945207238197327,
            0.9715735912322998,
            0.9943869709968567,
            0.9928632974624634,
            0.9912164807319641,
            0.9950762391090393,
            0.9941135048866272,
            0.987786054611206,
            0.9942125082015991,
            0.9945133924484253,
            0.9935757517814636
        ]
    },
    "324": {
        "similarity": 0.9923567771911621,
        "body": "    n = int(input())\n    a, b = max(2, n), max(n + 1, n * 2)\n    print(a, b - n)\n\nif __name__ == \"__main__\":\n    find_composites()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9893746972084045,
            0.9911326169967651,
            0.9821646809577942,
            0.9751754403114319,
            0.9869967103004456,
            0.9800552725791931,
            0.9827514290809631,
            0.9843157529830933,
            0.9921888113021851,
            0.9899548888206482,
            0.9860647320747375,
            0.9904211163520813,
            0.9912244081497192,
            0.9811756610870361,
            0.9874593615531921,
            0.9885111451148987,
            0.9923567771911621,
            0.9921502470970154,
            0.9856831431388855,
            0.9901044964790344
        ]
    },
    "2912": {
        "similarity": 0.9982655048370361,
        "body": "N = int(input())\nS = [input() for _ in range(N)]\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    S[a-1] += S[b-1]\n    S[b-1] = ''\nprint(''.join(S))",
        "result": "passed",
        "similarities": [
            0.9967049360275269,
            0.9966025948524475,
            0.9974613189697266,
            0.9974767565727234,
            0.9980466961860657,
            0.9967920184135437,
            0.9960843324661255,
            0.9972453713417053,
            0.998213529586792,
            0.9981383085250854,
            0.9982163310050964,
            0.9964936971664429,
            0.9981101155281067,
            0.9982655048370361,
            0.9981452822685242,
            0.998069167137146,
            0.9981383085250854,
            0.9966136813163757,
            0.9980821013450623,
            0.9969677329063416
        ]
    },
    "9": {
        "similarity": 0.9954428672790527,
        "body": "    d = int(input())\n    n, m = map(int, input().split())\n    sofas = [list(map(int, input().split())) for _ in range(d)]\n    cnts = list(map(int, input().split()))\n\n    for i in range(d):\n        l, r, t, b = 0, 0, 0, 0\n        for j in range(d):\n            if sofas[j][0] < sofas[i][0]:\n                l += 1\n            elif sofas[j][2] > sofas[i][2]:\n                r += 1\n            elif sofas[j][1] < sofas[i][1]:\n                t += 1\n            elif sofas[j][3] > sofas[i][3]:\n                b += 1\n\n        if l == cnts[0] and r == cnts[1] and t == cnts[2] and b == cnts[3]:\n            return i + 1\n\n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9888097047805786,
            0.9937362670898438,
            0.9948861002922058,
            0.9919074177742004,
            0.9948766827583313,
            0.9940912127494812,
            0.9938912987709045,
            0.9925639629364014,
            0.9929153919219971,
            0.9940342307090759,
            0.9940942525863647,
            0.9952675700187683,
            0.9954143166542053,
            0.9935701489448547,
            0.9937860369682312,
            0.9934988617897034,
            0.9952183961868286,
            0.9954428672790527,
            0.9942660331726074,
            0.9931424856185913
        ]
    },
    "249": {
        "similarity": 0.9942598938941956,
        "body": "    n, l, x, y = map(int, input().split())\n    marks = list(map(int, input().split()))\n    diffs = set([marks[i] - marks[j] for i in range(n) for j in range(i+1, n)])\n    needed = sorted(set([x, y]) - diffs)\n    print(len(needed))\n    if needed:\n        print(*needed)\n\nfind_marks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923091530799866,
            0.9921285510063171,
            0.9937099814414978,
            0.9938323497772217,
            0.9887986779212952,
            0.9933769702911377,
            0.9825266003608704,
            0.9942598938941956,
            0.9936081767082214,
            0.9941255450248718,
            0.9939367175102234,
            0.9847956299781799,
            0.9930755496025085,
            0.9938788414001465,
            0.9928120374679565,
            0.9926081299781799,
            0.9919305443763733,
            0.9921678304672241,
            0.9881248474121094,
            0.9913592338562012
        ]
    },
    "2999": {
        "similarity": 0.9952530264854431,
        "body": "n, s = map(int, input().split())\nbets = {}\nfor _ in range(n):\n    name, bet = input().split()\n    bet = int(bet)\n    bets[bet] = bets.get(bet, []) + [name]\nwinners = []\nfor bet, names in sorted(bets.items()):\n    if s - sum(winners) >= bet:\n        winners.extend(names)\n        s -= sum(winners)\nprint(len(winners))\nfor name in winners:\n    print(name)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911887645721436,
            0.9952260255813599,
            0.9921877980232239,
            0.9916871786117554,
            0.9923883080482483,
            0.9899278283119202,
            0.9943775534629822,
            0.9892124533653259,
            0.9859738945960999,
            0.9940904378890991,
            0.9941023588180542,
            0.9935072660446167,
            0.9884966611862183,
            0.9893220663070679,
            0.9911006093025208,
            0.9893389344215393,
            0.9948896169662476,
            0.9952530264854431,
            0.9940615296363831,
            0.9948427081108093
        ]
    },
    "2239": {
        "similarity": 0.995198130607605,
        "body": "t = int(input())\nfor _ in range(t):\n    x = int(input())\n    rolls = 0\n    while rolls < x:\n        rolls += 1\n        if rolls <= 6:\n            print(rolls)\n            break",
        "result": "failed: testcase 0",
        "similarities": [
            0.995198130607605,
            0.9939841032028198,
            0.9945541024208069,
            0.9921892881393433,
            0.9941267967224121,
            0.9937266111373901,
            0.9912267923355103,
            0.9901608824729919,
            0.9946618676185608,
            0.9809221029281616,
            0.9867744445800781,
            0.9935842752456665,
            0.995039701461792,
            0.9792154431343079,
            0.9946450591087341,
            0.9941498637199402,
            0.9922654032707214,
            0.9948727488517761,
            0.9935179352760315,
            0.9947893023490906
        ]
    },
    "2615": {
        "similarity": 0.9957923889160156,
        "body": "from math import gcd\n\n    elegant_count = 0\n    for i in range(2, n + 1):\n        prime_factors = []\n        num = i\n        while num % 2 == 0:\n            prime_factors.append(1)\n            num //= 2\n        if len(set(prime_factors)) > 1 or gcd(*prime_factors) != 1:\n            elegant_count += 1\n    return elegant_count\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(count_elegant_numbers(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952318072319031,
            0.9946333169937134,
            0.9946820139884949,
            0.9953790307044983,
            0.9652561545372009,
            0.9950345754623413,
            0.9950960874557495,
            0.9928082823753357,
            0.9940747022628784,
            0.9922263622283936,
            0.99460369348526,
            0.9952473044395447,
            0.9948393106460571,
            0.9957923889160156,
            0.9949361681938171,
            0.995218813419342,
            0.9952312111854553,
            0.9916965365409851,
            0.9916777610778809,
            0.9924494028091431
        ]
    },
    "2542": {
        "similarity": 0.9944943785667419,
        "body": "    n = len(s)\n    left = s[1:] + s[0]\n    right = s[-1] + s[:-1]\n    return sum(x != y for x, y in zip(left, right))\n\nfor _ in range(int(input())):\n    print(min_erase(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9870125651359558,
            0.9944943785667419,
            0.9941115975379944,
            0.9921644330024719,
            0.9941401481628418,
            0.9914037585258484,
            0.9898364543914795,
            0.9902245402336121,
            0.9903721213340759,
            0.9935142397880554,
            0.9776147603988647,
            0.9909147024154663,
            0.9929008483886719,
            0.9939176440238953,
            0.9922673106193542,
            0.9917085766792297,
            0.9916352033615112,
            0.9924883842468262,
            0.9931519031524658,
            0.9933252930641174
        ]
    },
    "511": {
        "similarity": 0.9972309470176697,
        "body": "    if b == 0:\n        return 0\n    g = math.gcd(a, b)\n    return 1 + f(a, b - g)\n\nx, y = map(int, input().split())\nprint(f(x, y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960353374481201,
            0.9966583251953125,
            0.9959295392036438,
            0.9960033893585205,
            0.996128499507904,
            0.996582567691803,
            0.9954277873039246,
            0.9955171346664429,
            0.9972309470176697,
            0.9972309470176697,
            0.9965758919715881,
            0.996582567691803,
            0.9955171346664429,
            0.9972309470176697,
            0.995905339717865,
            0.995318591594696,
            0.9892139434814453,
            0.996128499507904,
            0.995905339717865,
            0.9966728091239929
        ]
    },
    "1409": {
        "similarity": 0.9960704445838928,
        "body": "n, k = map(int, input().split())\nparticipations = list(map(int, input().split()))\npossible_teams = 0\n\nfor i in range(n):\n    if participations[i] >= k:\n        possible_teams += 1\n\nprint(min(possible_teams, (possible_teams - 1) // 2))",
        "result": "failed: testcase 0",
        "similarities": [
            0.994911789894104,
            0.99474036693573,
            0.9908398389816284,
            0.9942061901092529,
            0.9949612021446228,
            0.9944818615913391,
            0.9903530478477478,
            0.9945194125175476,
            0.9951242208480835,
            0.9885679483413696,
            0.9951047301292419,
            0.9950816631317139,
            0.9949835538864136,
            0.9938890337944031,
            0.9956464171409607,
            0.9929023385047913,
            0.9951472282409668,
            0.9949213266372681,
            0.9873224496841431,
            0.9960704445838928
        ]
    },
    "2274": {
        "similarity": 0.9980555176734924,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input() for _ in range(n)]\n        changes = 0\n        for i in range(n - 1):\n            if grid[i][m - 1] != 'D':\n                changes += 1\n                grid[i][m - 1] = 'D'\n        for j in range(m - 2, 0, -1):\n            if grid[n - 1][j] != 'R':\n                changes += 1\n                grid[n - 1][j] = 'R'\n        print(changes)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997829020023346,
            0.9977385997772217,
            0.9972597360610962,
            0.9973495006561279,
            0.997507631778717,
            0.9980555176734924,
            0.9966750144958496,
            0.997766375541687,
            0.9979644417762756,
            0.9977539777755737,
            0.9977378845214844,
            0.9905097484588623,
            0.9972379803657532,
            0.9978063702583313,
            0.9976030588150024,
            0.9977091550827026,
            0.9900839924812317,
            0.9972600340843201,
            0.9973674416542053,
            0.9964178204536438
        ]
    },
    "2420": {
        "similarity": 0.9963025450706482,
        "body": "    n, r = map(int, input().split())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    balls = set()\n    for x, y in points:\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if abs(dx) + abs(dy) <= r:\n                    balls.add((x + dx, y + dy))\n    print(len(balls))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951475262641907,
            0.9934368133544922,
            0.9962445497512817,
            0.9963001608848572,
            0.9939689636230469,
            0.9946761131286621,
            0.9961909055709839,
            0.9956839680671692,
            0.9946144819259644,
            0.995776355266571,
            0.9960987567901611,
            0.9950559735298157,
            0.9962357878684998,
            0.9943985342979431,
            0.9949042797088623,
            0.9963025450706482,
            0.9959413409233093,
            0.9954106211662292,
            0.9945628643035889,
            0.9924731850624084
        ]
    },
    "1267": {
        "similarity": 0.9964197278022766,
        "body": "n = int(input())\nscores = list(map(int, input().split()))\nnon_zero_scores = set(score for score in scores if score > 0)\nprint(len(non_zero_scores))",
        "result": "passed",
        "similarities": [
            0.9962916374206543,
            0.9937110543251038,
            0.9960867166519165,
            0.9863479137420654,
            0.9952663779258728,
            0.996315598487854,
            0.996315598487854,
            0.996315598487854,
            0.9961816668510437,
            0.9964197278022766,
            0.9960734844207764,
            0.992581844329834,
            0.9960611462593079,
            0.9956361055374146,
            0.9935367107391357,
            0.9934852123260498,
            0.9960049390792847,
            0.9948897361755371,
            0.9960867166519165,
            0.9928832650184631
        ]
    },
    "2356": {
        "similarity": 0.9954890012741089,
        "body": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    while True:\n        if all(a[i] != j - a[j] for j in range(i+1, n)):\n            break\n        else:\n            a.insert(0, a.pop())\n    print(*a)",
        "result": "passed",
        "similarities": [
            0.9882850646972656,
            0.9938656687736511,
            0.9953155517578125,
            0.9929054975509644,
            0.9898505210876465,
            0.9878320097923279,
            0.993076503276825,
            0.991341233253479,
            0.9951073527336121,
            0.9950848817825317,
            0.9950125813484192,
            0.9934205412864685,
            0.9936571717262268,
            0.9951968789100647,
            0.9954890012741089,
            0.99383145570755,
            0.9886832237243652,
            0.9936074018478394,
            0.9911265969276428,
            0.9933546185493469
        ]
    },
    "108": {
        "similarity": 0.9950034618377686,
        "body": "s = input().strip()\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nresult = []\nfor c in s:\n    if c not in result and alphabet.index(c) < len(result):\n        break\n    result.append(alphabet[alphabet.index(c)+1] if alphabet.index(c)<25 else c)\nif all(c in result for c in alphabet):\n    print(''.join(result))\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917669892311096,
            0.9871470928192139,
            0.9938087463378906,
            0.9930319786071777,
            0.9933153390884399,
            0.9950008392333984,
            0.9947581887245178,
            0.9948727488517761,
            0.9862658977508545,
            0.991865873336792,
            0.9925124645233154,
            0.9799218773841858,
            0.9909794330596924,
            0.9947090148925781,
            0.9938565492630005,
            0.9950034618377686,
            0.9921600222587585,
            0.9929383993148804,
            0.9887519478797913,
            0.9948511719703674
        ]
    },
    "1833": {
        "similarity": 0.9978838562965393,
        "body": "    mod = 10**9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if a[i - 1] % i == 0:\n            dp[i] = (dp[i - 1] + dp[i]) % mod\n        else:\n            dp[i] = dp[i - 1]\n    return sum(dp) % mod\n\nprint(count_good_subsequences())",
        "result": "failed: testcase 0",
        "similarities": [
            0.99767005443573,
            0.9960875511169434,
            0.9974238872528076,
            0.9963717460632324,
            0.9969884157180786,
            0.9971902966499329,
            0.9975710511207581,
            0.9978838562965393,
            0.9972372651100159,
            0.9975477457046509,
            0.9963531494140625,
            0.9963295459747314,
            0.9971020221710205,
            0.9976621866226196,
            0.997340977191925,
            0.9957297444343567,
            0.994665265083313,
            0.996160626411438,
            0.995963454246521,
            0.9978154897689819
        ]
    },
    "2324": {
        "similarity": 0.996570885181427,
        "body": "    s = input()\n    n = len(s)\n    ans = [0] * n\n    for i in range(n):\n        if i > 0:\n            ans[i] += ans[i-1]\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                ans[j-1] = max(ans[j-1], ans[i]+1)\n    print(' '.join(map(str, ans)))\n\npalindromic_chars()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958256483078003,
            0.9938409924507141,
            0.9962363243103027,
            0.9957037568092346,
            0.9938791990280151,
            0.9948878884315491,
            0.9953486919403076,
            0.9963575601577759,
            0.9962513446807861,
            0.9920371174812317,
            0.9959068298339844,
            0.9965423941612244,
            0.9953626394271851,
            0.9950932860374451,
            0.9960925579071045,
            0.996570885181427,
            0.9963518381118774,
            0.9926863312721252,
            0.9956211447715759,
            0.9965164065361023
        ]
    },
    "2372": {
        "similarity": 0.9979192018508911,
        "body": "    H, W = map(int, input().split())\n    C_h, C_w = map(int, input().split())\n    D_h, D_w = map(int, input().split())\n    maze = [list(input()) for _ in range(H)]\n\n        return 0 <= x < H and 0 <= y < W and maze[x][y] == '.'\n\n    queue = [(C_h - 1, C_w - 1, 0)]\n    seen = {(C_h - 1, C_w - 1): True}\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n\n    while queue:\n        x, y, magic_uses = queue.pop(0)\n\n        if x == D_h - 1 and y == D_w - 1:\n            print(magic_uses)\n            return\n\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in seen:\n                queue.append((nx, ny, magic_uses))\n                seen[(nx, ny)] = True\n\n        for i in range(-2, 3):\n            for j in range(-2, 3):\n                if abs(i) + abs(j) == 5 and is_valid(x + i, y + j) and (x + i, y + j) not in seen:\n                    queue.append((x + i, y + j, magic_uses + 1))\n                    seen[(x + i, y + j)] = True\n\n    print(-1)\n\nsolve_maze()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972758889198303,
            0.9978150725364685,
            0.9973695874214172,
            0.99767005443573,
            0.9973692893981934,
            0.9974566102027893,
            0.9946328997612,
            0.9972097277641296,
            0.9955422282218933,
            0.9979192018508911,
            0.9976551532745361,
            0.995947003364563,
            0.9975807070732117,
            0.9972162842750549,
            0.9974167346954346,
            0.9976275563240051,
            0.9966628551483154,
            0.9935845136642456,
            0.997565507888794,
            0.99651700258255
        ]
    },
    "1984": {
        "similarity": 0.9971237182617188,
        "body": "    n, m, k, w = map(int, input().split())\n    levels = [input() for _ in range(k)]\n    dp = [[0] * 26 for _ in range(26)]\n    for i in range(n):\n        for j in range(m):\n            if 'A' <= levels[i][j] <= 'Z':\n                levels[i][j] = ord(levels[i][j]) - ord('A')\n            else:\n                levels[i][j] = '.'\n    for i in range(k):\n        for j in range(i + 1, k):\n            diff = sum(1 for a, b in zip(levels[i], levels[j]) if a != b)\n            dp[i][j] = diff * w\n    min_traffic = float('inf')\n    order = []\n    for i in range(k):\n        curr_level = i\n        while curr_level > 0:\n            min_diff = min(dp[curr_level][j] for j in range(curr_level))\n            next_level = dp[curr_level].index(min_diff)\n            curr_level -= 1\n            order.append((next_level + 1, curr_level + 1))\n    print(sum(min(dp[i][j]) for i in range(k) for j in range(i + 1, k)) * w)\n    for level, prev_level in reversed(order):\n        print(level, prev_level)\n\nget_min_traffic()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994637131690979,
            0.9961791038513184,
            0.9967881441116333,
            0.9969526529312134,
            0.9962681531906128,
            0.9947224855422974,
            0.9970028400421143,
            0.9957573413848877,
            0.9968762993812561,
            0.994730532169342,
            0.993799090385437,
            0.9961845278739929,
            0.9963295459747314,
            0.9969432353973389,
            0.9968934655189514,
            0.996486246585846,
            0.9971237182617188,
            0.9968093037605286,
            0.9966093301773071,
            0.9967777729034424
        ]
    },
    "1253": {
        "similarity": 0.9968153238296509,
        "body": "n, k = map(int, input().split())\nnums = list(map(int, input().split()))\nneg_count = sum(1 for num in nums if num < 0)\nif neg_count <= k:\n    print(sum(nums))\nelse:\n    nums.sort(reverse=True)\n    for _ in range(k):\n        nums[0] *= -1\n    print(sum(nums))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965744018554688,
            0.9960337281227112,
            0.9934065937995911,
            0.9967225790023804,
            0.9957687854766846,
            0.9928442239761353,
            0.9968153238296509,
            0.9957320690155029,
            0.9921025633811951,
            0.995395839214325,
            0.9953961968421936,
            0.9922370910644531,
            0.9955357909202576,
            0.9929502606391907,
            0.9964967966079712,
            0.9925962686538696,
            0.9958805441856384,
            0.9944732189178467,
            0.9963387250900269,
            0.9939755797386169
        ]
    },
    "523": {
        "similarity": 0.9964109659194946,
        "body": "    n, m = map(int, input().split())\n    strings = [input() for _ in range(n)]\n    left, right = 0, len(strings[0]) - 1\n    palindrome = ''\n    while left <= right:\n        if strings[left] == strings[right]:\n            palindrome += strings[left]\n            left += 1\n            right -= 1\n        elif n % 2 == 1 and left == right:\n            break\n        else:\n            return '0\\n'\n    print(len(palindrome) * 2)\n    print(palindrome + palindrome[::-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961549639701843,
            0.9933584332466125,
            0.9948049187660217,
            0.9959354400634766,
            0.995407223701477,
            0.9963732361793518,
            0.9926810264587402,
            0.9934541583061218,
            0.9957833886146545,
            0.9902434349060059,
            0.9957062602043152,
            0.9957099556922913,
            0.99493807554245,
            0.9964109659194946,
            0.9955058097839355,
            0.9949000477790833,
            0.9946274161338806,
            0.9960361123085022,
            0.995387613773346,
            0.993717610836029
        ]
    },
    "2934": {
        "similarity": 0.9956967234611511,
        "body": "n = int(input())\nm = int(input())\n\n    mod = 10**9\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= i:\n                dp[i][j] += dp[i][j - i]\n            dp[i][j] %= mod\n    return dp[n][m]\n\nprint(count_tilings(n, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9802228212356567,
            0.9947795867919922,
            0.9947648644447327,
            0.9941664338111877,
            0.9785955548286438,
            0.9949984550476074,
            0.9947921633720398,
            0.9927505850791931,
            0.9956967234611511,
            0.9953290224075317,
            0.9948932528495789,
            0.9954512715339661,
            0.9943768382072449,
            0.9949674010276794,
            0.9955759644508362,
            0.9956189393997192,
            0.9946863055229187,
            0.9917122721672058,
            0.983193576335907,
            0.9947553873062134
        ]
    },
    "1745": {
        "similarity": 0.994960606098175,
        "body": "    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n\n        if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == '#':\n            return\n        if dp[x][y]:\n            return\n        dp[x][y] = 1\n        for dx, dy in directions:\n            dfs(x + dx, y + dy)\n\n    ways = 0\n    for i in range(1, n - 1):\n        dfs(i, 0)\n        dfs(i, m - 1)\n    for j in range(1, m - 1):\n        dfs(0, j)\n        dfs(n - 1, j)\n\n    print(sum(row.count(1) > 0 for row in dp))\n\ncount_pipes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9886894226074219,
            0.994960606098175,
            0.9908294677734375,
            0.9939209818840027,
            0.9939247965812683,
            0.9914731383323669,
            0.9942533373832703,
            0.9932718873023987,
            0.9882718324661255,
            0.9942806959152222,
            0.9927658438682556,
            0.9943445920944214,
            0.9933556318283081,
            0.9912962913513184,
            0.9920090436935425,
            0.9909793734550476,
            0.9851670861244202,
            0.986021876335144,
            0.9942220449447632,
            0.9903594851493835
        ]
    },
    "1422": {
        "similarity": 0.9955843687057495,
        "body": "    weights = [int(x) for x in input().strip()]\n    m = int(input())\n    if sum(weights) < m:\n        print(\"NO\")\n    else:\n        prev_weight = 0\n        weights_on_scale = {1: [], 2: []}\n        print(\"YES\")\n        for i in range(m):\n            current_weight = (i % 2) + 1\n            while weights[prev_weight] == weights[i]:\n                prev_weight += 1\n            weights_on_scale[current_weight].append(weights[prev_weight])\n            prev_weight += 1\n            if sum(weights_on_scale[1]) > sum(weights_on_scale[2]):\n                print(*weights_on_scale[1], sep=\" \")\n            else:\n                print(*weights_on_scale[2], sep=\" \")\n\nxenia_weights()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950609803199768,
            0.9939627647399902,
            0.9955843687057495,
            0.9930707216262817,
            0.9955824017524719,
            0.9923818707466125,
            0.9829211831092834,
            0.9940261840820312,
            0.9954715371131897,
            0.9921953082084656,
            0.995047926902771,
            0.9945213198661804,
            0.9921132922172546,
            0.984048068523407,
            0.9943313598632812,
            0.9954026937484741,
            0.9948713183403015,
            0.9953325986862183,
            0.9953990578651428,
            0.9929568767547607
        ]
    },
    "1763": {
        "similarity": 0.994043231010437,
        "body": "N, A, R, M = map(int, input().split())\nheights = list(map(int, input().split()))\n\ntotal_height = sum(heights)\navg_height = total_height // N\n\ncost = 0\nfor h in heights:\n    if h > avg_height:\n        cost += min(A * (h - avg_height), M * (h - avg_height) + R)\n    elif h < avg_height:\n        cost += min(R, M * (avg_height - h))\nprint(cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939027428627014,
            0.994043231010437,
            0.9936109781265259,
            0.9914880394935608,
            0.9884852170944214,
            0.9752147197723389,
            0.9888699054718018,
            0.9911359548568726,
            0.9927372336387634,
            0.9934889078140259,
            0.9921259880065918,
            0.9937160015106201,
            0.9891114830970764,
            0.9888819456100464,
            0.9920455813407898,
            0.9908472299575806,
            0.9827597737312317,
            0.9806374311447144,
            0.9919470548629761,
            0.9937860369682312
        ]
    },
    "974": {
        "similarity": 0.9968065023422241,
        "body": "    commands = []\n    for _ in range(2*n):\n        cmd, *args = input().split()\n        commands.append((cmd, int(args[0])))\n    stack, ops = [], 0\n    for cmd, x in commands:\n        if cmd == 'add':\n            stack.append(x)\n        else:\n            while stack[-1] != x:\n                stack.pop()\n                ops += 1\n            stack.pop()\n    print(ops)\n\nmin_reorders(int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962704181671143,
            0.9963111877441406,
            0.9950463175773621,
            0.9940823912620544,
            0.9963472485542297,
            0.9946155548095703,
            0.9968065023422241,
            0.994492769241333,
            0.9962388277053833,
            0.9961346387863159,
            0.9966800212860107,
            0.9938802123069763,
            0.9918370842933655,
            0.9952735900878906,
            0.9967020750045776,
            0.9964954853057861,
            0.9954524040222168,
            0.9957436323165894,
            0.9964709281921387,
            0.9966045022010803
        ]
    },
    "2343": {
        "similarity": 0.99530428647995,
        "body": "    if 2 ** n <= k + 1:\n        return 'NO'\n    side = 2 ** n - k - 1\n    return f'YES {side}'\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(solve(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918666481971741,
            0.991455078125,
            0.9928974509239197,
            0.9949808716773987,
            0.9942723512649536,
            0.993391752243042,
            0.9926577210426331,
            0.9917948842048645,
            0.9911240339279175,
            0.9944602847099304,
            0.99083411693573,
            0.9952709674835205,
            0.99530428647995,
            0.994424045085907,
            0.9945222735404968,
            0.9949133992195129,
            0.9941036105155945,
            0.9937256574630737,
            0.9944149851799011,
            0.9941535592079163
        ]
    },
    "627": {
        "similarity": 0.9944368004798889,
        "body": "    n = int(input())\n    s = input()\n    for i in range(n):\n        if i > 0 and s[i] < s[i-1]:\n            break\n    else:\n        return s[:-1]\n    return s[:i]\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9797329306602478,
            0.9926191568374634,
            0.9904608726501465,
            0.9848565459251404,
            0.9866049885749817,
            0.9926003217697144,
            0.9811202883720398,
            0.9938127398490906,
            0.9941208362579346,
            0.9936671853065491,
            0.9934202432632446,
            0.9936200976371765,
            0.9904937744140625,
            0.9913755655288696,
            0.9924141764640808,
            0.9944368004798889,
            0.9939607381820679,
            0.9942966103553772,
            0.9934459328651428,
            0.9930739402770996
        ]
    },
    "1655": {
        "similarity": 0.9967057108879089,
        "body": "    n = int(input())\n    claws = list(map(int, input().split()))\n    alive = [1] * n\n    for i in range(n):\n        for j in range(max(0, i - claws[i]), i):\n            alive[j] = 0\n    print(sum(alive))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957862496376038,
            0.9963597655296326,
            0.9953721761703491,
            0.9960620403289795,
            0.9953429698944092,
            0.9967055916786194,
            0.9960241913795471,
            0.9957862496376038,
            0.9967057108879089,
            0.9954349398612976,
            0.9858593344688416,
            0.9954873919487,
            0.993976891040802,
            0.9952330589294434,
            0.9952019453048706,
            0.9956074953079224,
            0.995627760887146,
            0.9958317279815674,
            0.9950718283653259,
            0.9937015175819397
        ]
    },
    "2124": {
        "similarity": 0.9977447390556335,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        users = set(input().split())\n        m = int(input())\n        prev_user = None\n        for i in range(m):\n            message = input()\n            if message[0] == '?':\n                if len(users) > 1:\n                    next_user = (users - {prev_user}) if prev_user else users.difference({user for user, _ in users})\n                    print(next_user.pop(): message[2:])\n                    prev_user = next_user\n                else:\n                    print(\"Impossible\")\n            else:\n                username, text = message.split(':')\n                if username != prev_user or i == 0:\n                    print(message)\n                    prev_user = username\n                else:\n                    print(f\"?{text}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965220093727112,
            0.9968050718307495,
            0.9974542856216431,
            0.9961273074150085,
            0.9962602257728577,
            0.9974491596221924,
            0.9971281290054321,
            0.9965487122535706,
            0.9977447390556335,
            0.9968169331550598,
            0.9957334399223328,
            0.99712735414505,
            0.9962824583053589,
            0.9973788261413574,
            0.997350811958313,
            0.9965548515319824,
            0.9966883659362793,
            0.9961936473846436,
            0.9966850280761719,
            0.9964109659194946
        ]
    },
    "1093": {
        "similarity": 0.9971857666969299,
        "body": "n, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\n\nmax_ascent = max_descent = 0\n\nfor j in range(m - 1):\n    for i in range(n):\n        if grid[i][j] == '*':\n            k = i + 1\n            while k < n and grid[k][j] != '*':\n                k += 1\n            if k < n:\n                ascent = k - i\n                descent = i - (k - 1)\n                max_ascent = max(max_ascent, ascent)\n                max_descent = max(max_descent, descent)\n\nprint(max_ascent, max_descent)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996650218963623,
            0.9942184090614319,
            0.9968339800834656,
            0.9950058460235596,
            0.9962086081504822,
            0.9962798953056335,
            0.995337963104248,
            0.9959477782249451,
            0.9971857666969299,
            0.9965538382530212,
            0.9954063296318054,
            0.9969803690910339,
            0.9966941475868225,
            0.9971335530281067,
            0.9959595203399658,
            0.995204508304596,
            0.9956007599830627,
            0.9955112338066101,
            0.9964995384216309,
            0.9962700605392456
        ]
    },
    "899": {
        "similarity": 0.9962943196296692,
        "body": "from collections import defaultdict\n\nN, M = map(int, input().split())\ngraph = defaultdict(list)\nfor _ in range(M):\n    a, b, c = map(int, input().split())\n    graph[a].append((b, c))\n    graph[b].append((a, c))\n\n    queue = [(start, set(), 0)]\n    while queue:\n        node, edges, dist = queue.pop(0)\n        if node == end:\n            return len(used_edges) + dist\n        for nei, edge in graph[node]:\n            if nei not in edges and edge != dist:\n                new_edges = edges | {nei}\n                queue.append((nei, new_edges, max(dist, edge)))\n\nmin_dist = float('inf')\nfor i in range(1, N+1):\n    for j in range(i+1, N+1):\n        min_dist = min(min_dist, dfs(i, j, set()))\n\nprint(M - 2 * min_dist)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962552785873413,
            0.9958118796348572,
            0.9954929351806641,
            0.9940198659896851,
            0.9947081208229065,
            0.9929177165031433,
            0.9957747459411621,
            0.9934360384941101,
            0.991408109664917,
            0.9962943196296692,
            0.9962309002876282,
            0.9960192441940308,
            0.9926961660385132,
            0.9962069988250732,
            0.9882009625434875,
            0.9938758015632629,
            0.9956022500991821,
            0.9906880259513855,
            0.9956647753715515,
            0.9954982399940491
        ]
    },
    "551": {
        "similarity": 0.9964914917945862,
        "body": "    n = int(input())\n    points = list(map(int, input().split()))\n    if len(set(points)) < 3 or max(points) - min(points) >= abs(min(points)):\n        return \"No\"\n    return \"Yes\"\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.994073748588562,
            0.9960958361625671,
            0.9955767393112183,
            0.9947165250778198,
            0.995452880859375,
            0.9950488209724426,
            0.9886550903320312,
            0.9863815307617188,
            0.9954632520675659,
            0.9944311380386353,
            0.9953990578651428,
            0.9924521446228027,
            0.9958858489990234,
            0.9955775737762451,
            0.9964914917945862,
            0.9935491681098938,
            0.9938791990280151,
            0.9959567189216614,
            0.996182382106781,
            0.9954826831817627
        ]
    },
    "1772": {
        "similarity": 0.9952200055122375,
        "body": "n = int(input())\na = list(map(int, input().split()))\ncount_even, count_odd = 0, 0\nfor num in a:\n    if num % 2 == 0:\n        count_even += 1\n    else:\n        count_odd += 1\nprint(min(count_even // 2, count_odd))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914934039115906,
            0.9952200055122375,
            0.9932644367218018,
            0.9929497241973877,
            0.9951996207237244,
            0.9859247803688049,
            0.987392246723175,
            0.9931967854499817,
            0.989009439945221,
            0.9948567748069763,
            0.9916532635688782,
            0.9942518472671509,
            0.9922953248023987,
            0.9948477745056152,
            0.9898188710212708,
            0.9868517518043518,
            0.9928826093673706,
            0.9938288331031799,
            0.9950350522994995,
            0.991858959197998
        ]
    },
    "1339": {
        "similarity": 0.9973154664039612,
        "body": "n = int(input())\nsegments = [list(map(int, input().split())) for _ in range(n)]\nfor i in range(n):\n    if all(l <= segments[i][0] and r >= segments[i][1] for l, r in segments[:i]):\n        print(i + 1)\n        break\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970167279243469,
            0.996440589427948,
            0.992946207523346,
            0.9967925548553467,
            0.9968279600143433,
            0.9966508150100708,
            0.996440589427948,
            0.9939398765563965,
            0.9962474703788757,
            0.9962614178657532,
            0.9948702454566956,
            0.9956303834915161,
            0.9973154664039612,
            0.9944574236869812,
            0.996547520160675,
            0.9970149993896484,
            0.9972955584526062,
            0.9971423745155334,
            0.9956374168395996,
            0.996793270111084
        ]
    },
    "440": {
        "similarity": 0.9943559765815735,
        "body": "    s = input()\n    i = 0\n    vowels = 'aeiouy'\n    while i < len(s) - 1:\n        if s[i] in vowels and s[i + 1] in vowels:\n            s = s[:i] + s[i + 2:]\n        else:\n            i += 1\n    print(s)\n\ncorrect_word()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993816077709198,
            0.9935425519943237,
            0.9924201965332031,
            0.9939488768577576,
            0.9943559765815735,
            0.9943317770957947,
            0.9924201965332031,
            0.983578622341156,
            0.9938067197799683,
            0.9904587268829346,
            0.9930440783500671,
            0.9872402548789978,
            0.9938417673110962,
            0.994232177734375,
            0.9843306541442871,
            0.9878694415092468,
            0.9934669137001038,
            0.9866191744804382,
            0.9907826781272888,
            0.9941253662109375
        ]
    },
    "2801": {
        "similarity": 0.9975232481956482,
        "body": "    dp = [0] * n\n    graph = [[] for _ in range(n)]\n    for s, t in connections:\n        graph[s].append(t)\n        dp[node] = c[node]\n        for child in graph[node]:\n            if child != parent:\n                dfs(child, node)\n                dp[node] += dp[child] / 2 ** (len(graph[node]) - 1)\n    dfs(0, None)\n    return max(dp)\n\nn, m = map(int, input().split())\nc = list(map(int, input().split()))\nconnections = [tuple(map(int, input().split())) for _ in range(m)]\nprint(max_satisfaction(n, m, c, connections))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947041869163513,
            0.9967074394226074,
            0.994240403175354,
            0.9970740079879761,
            0.9945787191390991,
            0.9972126483917236,
            0.9974074363708496,
            0.9975232481956482,
            0.9969750642776489,
            0.9963403344154358,
            0.9969973564147949,
            0.9953404664993286,
            0.9974542260169983,
            0.9972450137138367,
            0.9961216449737549,
            0.9960919618606567,
            0.996240496635437,
            0.9970466494560242,
            0.9973096251487732,
            0.9968587756156921
        ]
    },
    "2749": {
        "similarity": 0.9975279569625854,
        "body": "H, W = map(int, input().split())\nN = int(input())\na = list(map(int, input().split()))\n\ngrid = [[0] * W for _ in range(H)]\ncolor_map = {}\n\nfor i in range(1, N + 1):\n    cnt = a[i - 1]\n    for j in range(H * W):\n        if grid[j // W][j % W] == 0 and len(color_map) < N:\n            grid[j // W][j % W] = i\n            color_map[i] = cnt\n            cnt -= 1\n            if cnt == 0:\n                break\n\nfor row in grid:\n    print(' '.join(map(str, row)))",
        "result": "failed: testcase 1",
        "similarities": [
            0.9971250295639038,
            0.9973111748695374,
            0.9965994954109192,
            0.9962077736854553,
            0.9968523979187012,
            0.9967535138130188,
            0.9968276023864746,
            0.9949485659599304,
            0.9966402649879456,
            0.9961388111114502,
            0.9971466064453125,
            0.9949365258216858,
            0.9973031878471375,
            0.9945728778839111,
            0.9975279569625854,
            0.9954440593719482,
            0.9958277344703674,
            0.9973090291023254,
            0.9967155456542969,
            0.9965230226516724
        ]
    },
    "2319": {
        "similarity": 0.9963231682777405,
        "body": "    if len(s) != len(t):\n        return -1\n\n    operations = 0\n    for i in range(len(s)):\n        if s[i] != t[(i + operations) % len(s)]:\n            operations += 1\n\n    return operations // len(s) if operations % len(s) == 0 else -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    t = input()\n    print(min_operations(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963045716285706,
            0.9953339099884033,
            0.9962233304977417,
            0.9958544373512268,
            0.9852359294891357,
            0.9931870698928833,
            0.9960131645202637,
            0.9947104454040527,
            0.996103823184967,
            0.9963231682777405,
            0.9956057667732239,
            0.992576003074646,
            0.9950071573257446,
            0.9954464435577393,
            0.9962064027786255,
            0.9952954649925232,
            0.9955636858940125,
            0.9944837689399719,
            0.992431640625,
            0.9933990836143494
        ]
    },
    "2121": {
        "similarity": 0.99724942445755,
        "body": "from sys import stdin\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n\n        min_a[node] = float('inf')\n        for neighbor in adj[node]:\n            if neighbor != parent:\n                dfs(neighbor, node)\n                min_a[node] = min(min_a[node], min_a[neighbor])\n        if len(adj[node]) > 1:\n            min_a[node] = min(min_a[node], a[node])\n\n    min_a = [0]*n\n    dfs(0, -1)\n    print(min(a) if k == n else min(min_a[:k]))\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961317181587219,
            0.9967814087867737,
            0.9939093589782715,
            0.9963107705116272,
            0.9963653087615967,
            0.9953071475028992,
            0.9957099556922913,
            0.996776282787323,
            0.9964150190353394,
            0.9967243671417236,
            0.9970160126686096,
            0.9954908490180969,
            0.99724942445755,
            0.9940693378448486,
            0.9959355592727661,
            0.9967331290245056,
            0.9940832257270813,
            0.9962470531463623,
            0.9970641732215881,
            0.9960148334503174
        ]
    },
    "2617": {
        "similarity": 0.996865451335907,
        "body": "    n = int(input())\n    d, splits = 0, []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            splits.append(1)\n        else:\n            d += 1\n            n += 1\n            splits.append(2)\n    print(d + 1)\n    print(*splits)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967063069343567,
            0.9961182475090027,
            0.9912796020507812,
            0.9943218231201172,
            0.996346116065979,
            0.9964419007301331,
            0.9913272857666016,
            0.9929856657981873,
            0.9964410662651062,
            0.9961290955543518,
            0.9954222440719604,
            0.9927761554718018,
            0.9955875873565674,
            0.9961541891098022,
            0.9953204989433289,
            0.996865451335907,
            0.9953231811523438,
            0.9962252378463745,
            0.9957574605941772,
            0.9956573843955994
        ]
    },
    "175": {
        "similarity": 0.9966387748718262,
        "body": "    while a != 0 and b != 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n    return a, b\n\nn, m = map(int, input().split())\nprint(*process(n, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965173602104187,
            0.9963393807411194,
            0.9948126077651978,
            0.9958794116973877,
            0.9960517883300781,
            0.9952558279037476,
            0.9942460656166077,
            0.9963393807411194,
            0.9937896728515625,
            0.9966387748718262,
            0.9965513348579407,
            0.9938836693763733,
            0.9938836693763733,
            0.9945903420448303,
            0.9966012835502625,
            0.9960580468177795,
            0.9957826733589172,
            0.9938836693763733,
            0.9951679706573486,
            0.9961307048797607
        ]
    },
    "995": {
        "similarity": 0.9952467083930969,
        "body": "    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix_product = [1] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_product[i] = arr[i - 1] * prefix_product[i - 1]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_product[j] // prefix_product[i] ** 2:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + 1)\n    result = []\n    for i in range(1, n + 1):\n        result.append(sum([dp[j][i] > j for j in range(i)]))\n    print(*result)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933711886405945,
            0.9947534203529358,
            0.9909613728523254,
            0.9944218993186951,
            0.9938684105873108,
            0.9943444132804871,
            0.9915615916252136,
            0.9945423007011414,
            0.9946324229240417,
            0.992724597454071,
            0.9910843372344971,
            0.9918052554130554,
            0.9945384860038757,
            0.9952069520950317,
            0.9937689900398254,
            0.9767235517501831,
            0.9952467083930969,
            0.993644118309021,
            0.9923135638237,
            0.9947496652603149
        ]
    },
    "582": {
        "similarity": 0.9952974915504456,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n\n    counts = [0] * max(a)\n    for ai in a:\n        counts[ai - 1] += 1\n\n    time = 0\n    prev_count = 0\n    for i in range(n):\n        if counts[a[i] - 1] == prev_count:\n            time += t[i]\n            counts[a[i] - 1] -= 1\n            a[i] += 1\n            counts[a[i] - 1] += 1\n        prev_count = counts[a[i] - 1]\n\n    print(time)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907081127166748,
            0.9952974915504456,
            0.993064284324646,
            0.9952138662338257,
            0.9912057518959045,
            0.9942091107368469,
            0.9927187561988831,
            0.9948373436927795,
            0.9936639666557312,
            0.9942189455032349,
            0.9933147430419922,
            0.9921388030052185,
            0.9942619800567627,
            0.9929912090301514,
            0.9943467974662781,
            0.9940911531448364,
            0.9943239092826843,
            0.9950982332229614,
            0.9902952313423157,
            0.990299642086029
        ]
    },
    "1402": {
        "similarity": 0.9956918954849243,
        "body": "mod = int(1e9 + 7)\nn = int(input())\ns1, s2 = input(), input()\ndp = [[0] * n for _ in range(n)]\nfor i in range(n):\n    if s1[i] == '?' or s2[i] == '?':\n        dp[i][i] = pow(10, i + 1)\n    elif s1[i] < s2[i]:\n        dp[i][i] = pow(10, i) - 1\nfor l in range(n):\n    for r in range(l + 1, n):\n        if s1[l:r + 1].replace('?', '9') < s2[l:r + 1].replace('?', '9'):\n            dp[l][r] = pow(10, r) - 1\n        elif s1[l:r + 1].replace('?', '9') > s2[l:r + 1].replace('?', '9'):\n            continue\n        else:\n            for m in range(l, r):\n                dp[l][r] = (dp[l][r] + dp[l][m] * dp[m + 1][r]) % mod\nprint(dp[0][n - 1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949569702148438,
            0.9939231872558594,
            0.9769321084022522,
            0.9923399686813354,
            0.9917157888412476,
            0.9939954876899719,
            0.9930148124694824,
            0.9950253367424011,
            0.9913461804389954,
            0.9933719635009766,
            0.9955328106880188,
            0.9916889667510986,
            0.9952480792999268,
            0.9949224591255188,
            0.9938378930091858,
            0.9912908673286438,
            0.9950794577598572,
            0.9956918954849243,
            0.9929295778274536,
            0.9951034188270569
        ]
    },
    "1141": {
        "similarity": 0.9969519376754761,
        "body": "    n, m = map(int, input().split())\n    s = input()\n    for _ in range(m):\n        l, r, c1, c2 = input().split()\n        l, r = int(l), int(r)\n        s = s[:l-1] + ''.join([c2 if i == l-1 else char for i, char in enumerate(s[l-1:r], start=l-1)]) + s[r:]\n    print(s)\n\nif __name__ == '__main__':\n    process_string()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955413341522217,
            0.9969519376754761,
            0.9954050779342651,
            0.9955278038978577,
            0.9965061545372009,
            0.9945181012153625,
            0.996142566204071,
            0.9950579404830933,
            0.9964475035667419,
            0.9968540668487549,
            0.9969442486763,
            0.9969109296798706,
            0.9953234791755676,
            0.9957608580589294,
            0.9958385825157166,
            0.9965994954109192,
            0.9963840842247009,
            0.9953420758247375,
            0.9956918358802795,
            0.996549129486084
        ]
    },
    "2836": {
        "similarity": 0.9955083727836609,
        "body": "N = int(input())\nboys = list(map(int, input().split()))\nA, B = map(int, input().split())\n\nif N == 0:\n    print(B)\nelse:\n    distances = []\n    for i in range(A, B + 1):\n        if i % 2 != 0:\n            min_distance = min([abs(i - boy) for boy in boys])\n            distances.append(min_distance)\n    max_distance = max(distances)\n    closest_girl_name = A + max_distance\n    print(closest_girl_name)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920507669448853,
            0.9954615235328674,
            0.994259774684906,
            0.9952364563941956,
            0.9917841553688049,
            0.9952614307403564,
            0.9883530139923096,
            0.9933534860610962,
            0.9949569702148438,
            0.9951304197311401,
            0.9946188926696777,
            0.9947516918182373,
            0.9955083727836609,
            0.993597149848938,
            0.9911613464355469,
            0.9924935102462769,
            0.994594395160675,
            0.9914284944534302,
            0.9949346780776978,
            0.9954182505607605
        ]
    },
    "1109": {
        "similarity": 0.9947872161865234,
        "body": "    a = list(map(int, input().split()))[::-1]\n    if len(a) % k != 0:\n        return float('inf')\n    b = a[:k]\n    changes = sum(x != y for x, y in zip(b * (n // k), a))\n    return changes",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946589469909668,
            0.9937227368354797,
            0.9919649362564087,
            0.9913988709449768,
            0.9923493266105652,
            0.9935550689697266,
            0.9925828576087952,
            0.9947872161865234,
            0.9927986860275269,
            0.9938864707946777,
            0.993857741355896,
            0.9936234354972839,
            0.9945286512374878,
            0.9945539236068726,
            0.993683397769928,
            0.9911567568778992,
            0.991590678691864,
            0.9923250079154968,
            0.9938539266586304,
            0.9924432635307312
        ]
    },
    "2125": {
        "similarity": 0.9978569746017456,
        "body": "n, m = map(int, input().split())\ngrid = [list(input()) for _ in range(n)]\n\n    flags = 0\n    for i in range(n-2):\n        for j in range(m-1):\n            if grid[i][j] != grid[i+1][j] and grid[i+1][j] != grid[i+2][j]:\n                flags += (m-j-1)\n    return flags\n\nprint(count_flags())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966400861740112,
            0.9961445331573486,
            0.9963280558586121,
            0.997697651386261,
            0.9962190389633179,
            0.9962425231933594,
            0.9937352538108826,
            0.9978081583976746,
            0.9967303276062012,
            0.9977240562438965,
            0.9972104430198669,
            0.9973236918449402,
            0.9971988201141357,
            0.9964424967765808,
            0.9929006695747375,
            0.9940829873085022,
            0.9975501894950867,
            0.9978569746017456,
            0.9973350167274475,
            0.9971891641616821
        ]
    },
    "1746": {
        "similarity": 0.9967820048332214,
        "body": "    n = int(input())\n    parent = [0] * (n + 1)\n    children = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        p = int(input())\n        parent[i] = p\n        children[p].append(i)\n\n        if len(children[node]) >= 3:\n            return True\n        leaf_count = sum(dfs(child) for child in children[node])\n        return leaf_count >= 3\n\n    result = dfs(1)\n    print('Yes' if result else 'No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923234581947327,
            0.9967108368873596,
            0.9952810406684875,
            0.9955058693885803,
            0.9959560036659241,
            0.9967820048332214,
            0.9903586506843567,
            0.9963732361793518,
            0.9961975812911987,
            0.996239423751831,
            0.9958338737487793,
            0.996140718460083,
            0.9961810111999512,
            0.9923083782196045,
            0.9962033033370972,
            0.995585024356842,
            0.9952656626701355,
            0.9935506582260132,
            0.9964609742164612,
            0.9945281147956848
        ]
    },
    "1294": {
        "similarity": 0.9955916404724121,
        "body": "    s = input()\n    working_chars = set()\n    for c in s:\n        if s.count(c * 2) > s.count(c):\n            working_chars.add(c)\n    return ''.join(sorted(working_chars))\n\nfor _ in range(int(input())):\n    print(find_working_chars())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925248026847839,
            0.9947546124458313,
            0.9948668479919434,
            0.9929287433624268,
            0.9849985837936401,
            0.9955916404724121,
            0.9932407736778259,
            0.9934130311012268,
            0.9949578046798706,
            0.995034396648407,
            0.9883641600608826,
            0.9929673075675964,
            0.9936467409133911,
            0.9936947226524353,
            0.9913821816444397,
            0.9930140972137451,
            0.9948188662528992,
            0.9878884553909302,
            0.9943401217460632,
            0.9939070343971252
        ]
    },
    "1159": {
        "similarity": 0.9962181448936462,
        "body": "    n = int(input())\n    primes = []\n    for i in range(2, n):\n        if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n            primes.append(i)\n    m = primes[-1]\n    edges = [(i, i + 1) for i in range(n - 1)] + [(1, n)]\n    print(m)\n    for edge in edges:\n        print(*edge)\n\ngenerate_graph()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907864928245544,
            0.9932417869567871,
            0.9947755932807922,
            0.9942982196807861,
            0.9937962889671326,
            0.9958720803260803,
            0.9962181448936462,
            0.9949999451637268,
            0.9957079887390137,
            0.9959650635719299,
            0.9951159954071045,
            0.9940025210380554,
            0.9945051074028015,
            0.9942848086357117,
            0.9930940270423889,
            0.9956749677658081,
            0.995867908000946,
            0.9959118366241455,
            0.9951566457748413,
            0.9953349232673645
        ]
    },
    "2025": {
        "similarity": 0.9961583018302917,
        "body": "    for _ in range(int(input())):\n        n = int(input())\n        if n <= 2:\n            print(-1)\n        elif n % 4 == 0:\n            print(n // 4)\n        else:\n            print(-1)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9855406880378723,
            0.9941064715385437,
            0.9950789213180542,
            0.9946016073226929,
            0.993190348148346,
            0.9956673383712769,
            0.9957505464553833,
            0.9936909079551697,
            0.9961583018302917,
            0.9938657879829407,
            0.994785726070404,
            0.9901129007339478,
            0.9961257576942444,
            0.9937113523483276,
            0.9937257170677185,
            0.9951093792915344,
            0.9948664307594299,
            0.9941906332969666,
            0.9958512187004089,
            0.9959913492202759
        ]
    },
    "1429": {
        "similarity": 0.9955975413322449,
        "body": "s = input().strip()\nn = len(s)\ncount = 0\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        t = s[i - 1:j]\n        complement = t[::-1].replace('A', 'T').replace('T', 'A').replace('C', 'G').replace('G', 'C')\n        if sorted(t) == sorted(complement):\n            count += 1\nprint(count)",
        "result": "timed out",
        "similarities": [
            0.9949276447296143,
            0.9953458905220032,
            0.9951187968254089,
            0.9946432709693909,
            0.9924433827400208,
            0.9947856068611145,
            0.9943912029266357,
            0.993518054485321,
            0.9933006167411804,
            0.9883126020431519,
            0.9946419596672058,
            0.9954801201820374,
            0.9927507638931274,
            0.9953497052192688,
            0.9922215342521667,
            0.9955975413322449,
            0.9899387359619141,
            0.9925940632820129,
            0.9906415343284607,
            0.992889404296875
        ]
    },
    "1950": {
        "similarity": 0.9960780739784241,
        "body": "n = int(input())\nballs = list(map(int, input().split()))\ndp = [0] * n\nfor i in range(n):\n    if balls[i] == 1:\n        dp[i] = 0\n    else:\n        dp[i] = min(dp[i-1] + balls[i]*2, dp[i-2] + balls[i])\nprint(sum(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936166405677795,
            0.9943474531173706,
            0.9948331117630005,
            0.9941423535346985,
            0.995877742767334,
            0.9919010996818542,
            0.9957031607627869,
            0.995292067527771,
            0.9960780739784241,
            0.9917235970497131,
            0.9925704002380371,
            0.9941529035568237,
            0.9955319762229919,
            0.9947671294212341,
            0.9956659078598022,
            0.9947994947433472,
            0.9954835772514343,
            0.9942070841789246,
            0.9950063824653625,
            0.9913159608840942
        ]
    },
    "631": {
        "similarity": 0.9956268668174744,
        "body": "    n = len(a)\n    s = 0\n    for i in range(n):\n        for j in range(i, n):\n            s += a[j] / (j + 1)\n    return 'YES' if round(s) == m else 'NO'\n\nwhile True:\n    try:\n        t = int(input())\n        for _ in range(t):\n            n, m = map(int, input().split())\n            a = list(map(int, input().split()))\n            print(can_reorder(a, m))\n    except EOFError:\n        break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924109578132629,
            0.9956268668174744,
            0.9934449791908264,
            0.9950820803642273,
            0.9919678568840027,
            0.9939543008804321,
            0.9951563477516174,
            0.9882477521896362,
            0.9935001730918884,
            0.9875088930130005,
            0.9953722953796387,
            0.9943461418151855,
            0.9955297708511353,
            0.9882073998451233,
            0.9947210550308228,
            0.9932454824447632,
            0.9947534799575806,
            0.9956088662147522,
            0.9953595399856567,
            0.9954708814620972
        ]
    },
    "2480": {
        "similarity": 0.996726393699646,
        "body": "    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = 0\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    dp = [[0] * K for _ in range(N)]\n    for length in range(1, N + 1):\n        for start in range(N - length + 1):\n            current_sum = prefix_sum[start + length] - prefix_sum[start]\n            remainder = current_sum % K\n            if remainder == length:\n                count += 1\n            dp[length][remainder] += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964576363563538,
            0.9966149926185608,
            0.9944008588790894,
            0.9956653118133545,
            0.9964233040809631,
            0.9966874718666077,
            0.9951673150062561,
            0.9962825775146484,
            0.9947152733802795,
            0.9928839802742004,
            0.9948353171348572,
            0.9963797330856323,
            0.9925163984298706,
            0.9952014088630676,
            0.9964784383773804,
            0.9965879321098328,
            0.9962090253829956,
            0.9960178732872009,
            0.996726393699646,
            0.9966098666191101
        ]
    },
    "2363": {
        "similarity": 0.9955968260765076,
        "body": "    n = int(input())\n    operations_sum = 0\n    for _ in range(n):\n        a, b = map(int, input().split())\n        if a > b:\n            operations_sum += a - b\n        else:\n            operations_sum += b - a\n    print(operations_sum)\n\ncount_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927128553390503,
            0.9953587055206299,
            0.9955705404281616,
            0.9953454732894897,
            0.9894810914993286,
            0.9946436882019043,
            0.9905612468719482,
            0.9917926788330078,
            0.9947735667228699,
            0.9942225217819214,
            0.9942788481712341,
            0.9903100728988647,
            0.9903100728988647,
            0.990504801273346,
            0.995585024356842,
            0.9937676191329956,
            0.9948708415031433,
            0.9953460693359375,
            0.9955968260765076,
            0.9849390983581543
        ]
    },
    "909": {
        "similarity": 0.9975698590278625,
        "body": "a, b, c = map(int, input().split())\nprint(max(a*(b+c), a+b*c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.997078537940979,
            0.9957147836685181,
            0.9965394735336304,
            0.9915980100631714,
            0.9966456890106201,
            0.9971535205841064,
            0.996873140335083,
            0.9972629547119141,
            0.9972086548805237,
            0.9974049925804138,
            0.9975698590278625,
            0.9944131970405579,
            0.9961140155792236,
            0.9973666667938232,
            0.9973078370094299,
            0.9966812133789062,
            0.9975698590278625,
            0.9973986744880676,
            0.9928816556930542,
            0.9965205788612366
        ]
    },
    "154": {
        "similarity": 0.9920262694358826,
        "body": "MOD = 998244353\n\n    if n % 2 == 0:\n        return pow(2, n // 2 - 1, MOD)\n    else:\n        return 0\n\nn = int(input())\nprint(count_trees(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9858769178390503,
            0.9876968264579773,
            0.9908249378204346,
            0.9882295727729797,
            0.9904903769493103,
            0.9906425476074219,
            0.962194561958313,
            0.9896249175071716,
            0.9908427000045776,
            0.9913051128387451,
            0.978404700756073,
            0.9920194745063782,
            0.9881804585456848,
            0.9855340719223022,
            0.986781656742096,
            0.985007643699646,
            0.9919528961181641,
            0.9920262694358826,
            0.9906032085418701,
            0.9865882396697998
        ]
    },
    "39": {
        "similarity": 0.9976692199707031,
        "body": "    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1] != s[i:j+1][::-1]:\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\ns = input()\nprint(longest_non_palindrome(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976692199707031,
            0.9968635439872742,
            0.9965900778770447,
            0.9967227578163147,
            0.9972264170646667,
            0.9974722862243652,
            0.996185302734375,
            0.995569109916687,
            0.9957140684127808,
            0.9970221519470215,
            0.9966333508491516,
            0.9962166547775269,
            0.9968692660331726,
            0.9929944276809692,
            0.9972718954086304,
            0.9965605735778809,
            0.9967986941337585,
            0.9960112571716309,
            0.9969039559364319,
            0.9957132935523987
        ]
    },
    "1885": {
        "similarity": 0.9948187470436096,
        "body": "    n = int(input())\n    return sum(binomial(n, i) for i in range(5, 8))\n\nprint(count_variants())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923089742660522,
            0.9932702779769897,
            0.97298663854599,
            0.9926113486289978,
            0.9894461631774902,
            0.9914087057113647,
            0.9926657676696777,
            0.9936074018478394,
            0.9945694804191589,
            0.9930327534675598,
            0.9895021319389343,
            0.9877832531929016,
            0.9940487742424011,
            0.9934077262878418,
            0.9905600547790527,
            0.9948187470436096,
            0.9909422993659973,
            0.9932702779769897,
            0.9942699074745178,
            0.9928916096687317
        ]
    },
    "1180": {
        "similarity": 0.9970546364784241,
        "body": "    MOD = 10**9 + 7\n    s = input()\n    dp = [[0]*(k+2) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+2):\n            if j < k:\n                dp[i][j] += dp[i-1][j]\n            if s[i-1] != '0':\n                if j > 0:\n                    dp[i][j] = (dp[i][j] + dp[i-1][j-1]) % MOD\n    return sum(dp[n]) % MOD\n\nprint(vasya_fun(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959245920181274,
            0.9952458739280701,
            0.9957987070083618,
            0.9970380067825317,
            0.9923240542411804,
            0.995256245136261,
            0.99456787109375,
            0.9960604310035706,
            0.9941790699958801,
            0.9968200325965881,
            0.9944590330123901,
            0.9970546364784241,
            0.9951571226119995,
            0.9957635998725891,
            0.9957461357116699,
            0.9903925061225891,
            0.9963581562042236,
            0.9960078001022339,
            0.9960256218910217,
            0.9956843852996826
        ]
    },
    "1856": {
        "similarity": 0.9958315491676331,
        "body": "    n = int(input())\n    passwords = [set(input()) for _ in range(n)]\n    groups = []\n    seen = set()\n    for i, password in enumerate(passwords):\n        if password not in seen:\n            group = {password}\n            for j in range(i+1, n):\n                if password & passwords[j]:\n                    group.add(passwords[j])\n                    seen.add(passwords[j])\n            groups.append(group)\n    print(min(len(g) for g in groups))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940400719642639,
            0.9954581260681152,
            0.992466390132904,
            0.9952659606933594,
            0.995503306388855,
            0.9934983849525452,
            0.993719220161438,
            0.9896756410598755,
            0.9952479004859924,
            0.9909619688987732,
            0.992376446723938,
            0.9942287802696228,
            0.9958315491676331,
            0.9946390390396118,
            0.9940641522407532,
            0.9948093891143799,
            0.9945989847183228,
            0.993030846118927,
            0.9886420369148254,
            0.9951084852218628
        ]
    },
    "522": {
        "similarity": 0.9964760541915894,
        "body": "    n, f1, f2, f3, c = map(int, input().split())\n    mod = 10**9 + 7\n    f = [f1 % mod, f2 % mod, f3 % mod] + [0] * (n - 3)\n    for x in range(4, n+1):\n        f[x] = (c ** (f[x-1] + f[x-2] + f[x-3]) % mod) * f[x-1] * f[x-2] * f[x-3]\n    print(f[n])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964324831962585,
            0.9964760541915894,
            0.9954820275306702,
            0.9943349957466125,
            0.9951276183128357,
            0.9923418760299683,
            0.996321439743042,
            0.9945339560508728,
            0.9958336353302002,
            0.9941548705101013,
            0.9955214262008667,
            0.9955351948738098,
            0.9904928803443909,
            0.9934176206588745,
            0.9947883486747742,
            0.9959105253219604,
            0.9935430288314819,
            0.9957402944564819,
            0.9936531782150269,
            0.9950929284095764
        ]
    },
    "1719": {
        "similarity": 0.9935990571975708,
        "body": "    mod = 10**9 + 7\n    n = int(input())\n    dp = [[0, 0] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = (dp[i-1][0]*3 + dp[i-1][1]) % mod\n        if i > 2:\n            dp[i][1] = (dp[i-2][0] + dp[i-3][0]) % mod\n        else:\n            dp[i][1] = dp[i-2][0]\n    return (dp[n][0] - dp[n][1]) % mod",
        "result": "failed: testcase 0",
        "similarities": [
            0.9759343862533569,
            0.991402268409729,
            0.9932642579078674,
            0.9925059080123901,
            0.9879503846168518,
            0.9840160012245178,
            0.990963876247406,
            0.9826844930648804,
            0.9908925294876099,
            0.9917610883712769,
            0.9934396147727966,
            0.9934519529342651,
            0.9882832765579224,
            0.9884222149848938,
            0.9912702441215515,
            0.9935990571975708,
            0.9916261434555054,
            0.9892497062683105,
            0.9898800253868103,
            0.9931094646453857
        ]
    },
    "1842": {
        "similarity": 0.998086154460907,
        "body": "import math\na, b, c = map(int, input().split())\ndiscriminant = math.sqrt(b**2 - 4*a*c)\nroot1 = (-b + discriminant) / (2 * a)\nroot2 = (-b - discriminant) / (2 * a)\nprint(max(root1, root2))\nprint(min(root1, root2))",
        "result": "passed",
        "similarities": [
            0.997794508934021,
            0.9979562163352966,
            0.998086154460907,
            0.9947641491889954,
            0.9972074627876282,
            0.9977160096168518,
            0.9976052045822144,
            0.9958001971244812,
            0.998086154460907,
            0.9972676634788513,
            0.9977160096168518,
            0.9977898001670837,
            0.9974343180656433,
            0.9976968169212341,
            0.998086154460907,
            0.9979562163352966,
            0.9979164004325867,
            0.9957611560821533,
            0.9972074627876282,
            0.9941993355751038
        ]
    },
    "806": {
        "similarity": 0.9932618737220764,
        "body": "    mod = int(1e9 + 7)\n    n, l, r = map(int, input().split())\n    if n % 3 != 0 or (r - l + 1) < n:\n        return \"0\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(l, r + 1):\n        for j in range(n, 0, -3):\n            if j >= 3 and dp[j - 3]:\n                dp[j] += dp[j - 3]\n                dp[j] %= mod\n            elif j == 2:\n                dp[2] += dp[i - l + 1]\n                dp[2] %= mod\n    return str(dp[n])",
        "result": "timed out",
        "similarities": [
            0.9920739531517029,
            0.9930583834648132,
            0.9926179647445679,
            0.9920815825462341,
            0.9776526093482971,
            0.9904548525810242,
            0.9928575158119202,
            0.9927510619163513,
            0.9920610189437866,
            0.9927808046340942,
            0.9873639345169067,
            0.9875996112823486,
            0.9900683164596558,
            0.9925001263618469,
            0.9877038598060608,
            0.977165937423706,
            0.9925607442855835,
            0.9932618737220764,
            0.9890142679214478,
            0.9878014326095581
        ]
    },
    "365": {
        "similarity": 0.9960049986839294,
        "body": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the encoding array\na.sort()\n\ntotal_length = sum(a)\nif total_length != x:\n    print(\"NO\")\nelif n == 1 and a[0] == x:\n    print(\"YES\")\nelse:\n    for i in range(n-1):\n        if a[i] + a[i+1] <= x:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9942132234573364,
            0.9941376447677612,
            0.9941733479499817,
            0.9945186972618103,
            0.9929841756820679,
            0.9945935606956482,
            0.9958809614181519,
            0.9960049986839294,
            0.9909177422523499,
            0.9933714866638184,
            0.9944952130317688,
            0.9943040609359741,
            0.9890871644020081,
            0.9898534417152405,
            0.9899489879608154,
            0.9957939982414246,
            0.9942236542701721,
            0.9945471882820129,
            0.9951114654541016,
            0.990657389163971
        ]
    },
    "1158": {
        "similarity": 0.9943982362747192,
        "body": "n, k = map(int, input().split())\nutensils = list(map(int, input().split()))\nused_utensils = set(utensils)\nwhile len(used_utensils) > k:\n    used_utensils.remove(min(used_utensils))\nprint(n - len(used_utensils))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931383728981018,
            0.9929385185241699,
            0.9834839701652527,
            0.9938749074935913,
            0.9928731322288513,
            0.9908166527748108,
            0.9914238452911377,
            0.9904288053512573,
            0.9901919364929199,
            0.9936134219169617,
            0.9925864338874817,
            0.9923651814460754,
            0.9943982362747192,
            0.9809931516647339,
            0.9909083843231201,
            0.993547260761261,
            0.993550181388855,
            0.9897156953811646,
            0.9918334484100342,
            0.9821589589118958
        ]
    },
    "33": {
        "similarity": 0.9948974251747131,
        "body": "a1, b1, a2, b2, L, R = map(int, input().split())\ncount = 0\nfor x in range(L, R + 1):\n    if (x - b1) % a1 == (x - b2) % a2:\n        count += 1\nprint(count)",
        "result": "timed out",
        "similarities": [
            0.9931363463401794,
            0.9915016889572144,
            0.9925136566162109,
            0.9923259615898132,
            0.9910213351249695,
            0.9930883646011353,
            0.9921603798866272,
            0.9905620217323303,
            0.9947214722633362,
            0.9918065667152405,
            0.9912741780281067,
            0.9941207766532898,
            0.9908316731452942,
            0.9919530153274536,
            0.9917101860046387,
            0.9948974251747131,
            0.9925236105918884,
            0.9906608462333679,
            0.9924368858337402,
            0.9850609302520752
        ]
    },
    "2498": {
        "similarity": 0.9972742199897766,
        "body": "    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = 0\n    for X in range(1, M + 1):\n        if all(X == a * (p + 0.5) for a in A for p in range(-int(a / 2), int((X - a / 2) / a))):\n            count += 1\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996292233467102,
            0.9968185424804688,
            0.9961654543876648,
            0.9952545166015625,
            0.994089663028717,
            0.9964790344238281,
            0.9972742199897766,
            0.9970946907997131,
            0.9970908164978027,
            0.9967966675758362,
            0.9965885877609253,
            0.9962724447250366,
            0.9938059449195862,
            0.9966005086898804,
            0.9968627095222473,
            0.9942141175270081,
            0.9966474771499634,
            0.9954423308372498,
            0.9968301653862,
            0.9963161945343018
        ]
    },
    "2309": {
        "similarity": 0.9964156150817871,
        "body": "import sys\n\n    vowels = set('aeiou')\n    return sum(1 for c in word if c in vowels)\n\n    words_by_last_vowel = {}\n    for word in words:\n        last_vowel = next((c for c in reversed(word) if c.lower() in 'aeiou'), None)\n        if last_vowel is not None:\n            words_by_last_vowel.setdefault(last_vowel, []).append(word)\n\n    lyrics = []\n    for last_vowel, words in words_by_last_vowel.items():\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if count_vowels(words[i]) == count_vowels(words[j]):\n                    lyrics.append((words[i], words[j]))\n                    break\n            else:\n                continue\n            break\n\n    return lyrics\n\nn = int(input())\nwords = [input() for _ in range(n)]\nlyrics = find_lyrics(words)\nprint(len(lyrics))\nfor lyric in lyrics:\n    print(*lyric, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943916201591492,
            0.9961238503456116,
            0.9962198138237,
            0.9902504682540894,
            0.9956225156784058,
            0.9962760806083679,
            0.9955306649208069,
            0.9951383471488953,
            0.9955956339836121,
            0.9964156150817871,
            0.9962519407272339,
            0.9911746978759766,
            0.9962469339370728,
            0.9956974387168884,
            0.9931429624557495,
            0.994472324848175,
            0.9952452778816223,
            0.9957040548324585,
            0.9947459697723389,
            0.9955682158470154
        ]
    },
    "1326": {
        "similarity": 0.9952954649925232,
        "body": "    N = int(input())\n    total = 0\n    for K in range(1, N+1):\n        total += K * sum(i == j for i in range(1, int(K**0.5)+1) for j in range(i, K+1, i))\n    print(total)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937852621078491,
            0.9923493266105652,
            0.9937478303909302,
            0.9940000176429749,
            0.9935883283615112,
            0.9905015826225281,
            0.9927697777748108,
            0.9930208921432495,
            0.9938808083534241,
            0.9939412474632263,
            0.9915242791175842,
            0.9945660829544067,
            0.9916031360626221,
            0.9950840473175049,
            0.9928839802742004,
            0.9927721619606018,
            0.9952954649925232,
            0.9940648674964905,
            0.9924485087394714,
            0.9910997152328491
        ]
    },
    "2950": {
        "similarity": 0.9952338337898254,
        "body": "n = int(input())\nheights = list(map(int, input().split()))\nresult = [0] * max(heights)\nfor h in heights:\n    if result[h-1] == 0:\n        result[h-1] += 1\nprint(sum(result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952338337898254,
            0.9940842986106873,
            0.9937288165092468,
            0.9936138987541199,
            0.9897475242614746,
            0.9931454062461853,
            0.9932176470756531,
            0.9932761192321777,
            0.9929552674293518,
            0.9934529662132263,
            0.994621992111206,
            0.9949259757995605,
            0.9934071898460388,
            0.9939079284667969,
            0.9804741740226746,
            0.9907007813453674,
            0.9948190450668335,
            0.9914038777351379,
            0.9951711893081665,
            0.9946603178977966
        ]
    },
    "1983": {
        "similarity": 0.9970530271530151,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp) * 2 - 1)\n\nfor _ in range(int(input())):\n    longest_increasing_subsequence()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959321618080139,
            0.9955199360847473,
            0.9839298725128174,
            0.9946818947792053,
            0.995145320892334,
            0.9958409070968628,
            0.9969884157180786,
            0.9959673881530762,
            0.9962257742881775,
            0.9970530271530151,
            0.9959321618080139,
            0.9929294586181641,
            0.9956520795822144,
            0.9953433871269226,
            0.9950932264328003,
            0.9946149587631226,
            0.9959321618080139,
            0.9966791868209839,
            0.9967982769012451,
            0.9959321618080139
        ]
    },
    "1767": {
        "similarity": 0.9965170621871948,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    pref_xor_a = [0] * (n + 1)\n    pref_xor_b = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        pref_xor_a[i] = pref_xor_a[i - 1] | a[i - 1]\n        pref_xor_b[i] = pref_xor_b[i - 1] | b[i - 1]\n\n    max_sum = 0\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            cur_sum = (pref_xor_a[r] & pref_xor_b[r]) ^ (pref_xor_a[l - 1] & pref_xor_b[l - 1])\n            max_sum = max(max_sum, cur_sum)\n\n    print(max_sum)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9867772459983826,
            0.9949814677238464,
            0.9946632385253906,
            0.9962061047554016,
            0.9950077533721924,
            0.9958542585372925,
            0.9950131177902222,
            0.9948359131813049,
            0.9965170621871948,
            0.9947432279586792,
            0.9945712089538574,
            0.9956107139587402,
            0.9957180023193359,
            0.9943156242370605,
            0.9956905841827393,
            0.9936728477478027,
            0.9945524334907532,
            0.9956745505332947,
            0.9940522909164429,
            0.9947176575660706
        ]
    },
    "2382": {
        "similarity": 0.9964329600334167,
        "body": "N = int(input())\nS = list(map(int, input().split()))\n\n    slime_healths = [0] * (1 << N)\n    slime_healths[0] = S[0]\n\n    for i in range(1, 1 << N):\n        j = i\n        while j > 0 and slime_healths[j - 1] >= S[i]:\n            j -= 1\n        if j < len(S) and slime_healths[j] == S[i]:\n            return \"No\"\n        slime_healths.insert(j, S[i])\n\n    return \"Yes\" if slime_healths == S else \"No\"\n\nprint(possible_slime(N, S))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9870733022689819,
            0.995021641254425,
            0.9950146079063416,
            0.9951941967010498,
            0.9955127239227295,
            0.9954789876937866,
            0.9952651858329773,
            0.9947575926780701,
            0.9951650500297546,
            0.9923666715621948,
            0.9944120049476624,
            0.9923967123031616,
            0.9959834218025208,
            0.9959833025932312,
            0.9948297142982483,
            0.9954121112823486,
            0.9964329600334167,
            0.9955425262451172,
            0.992820143699646,
            0.9963316917419434
        ]
    },
    "3907": {
        "similarity": 0.9937987327575684,
        "body": "n, m = map(int, input().split())\ncoupons = sorted([tuple(map(int, input().split())) for _ in range(m)], key=lambda x: x[1])\nmax_pay = 0\ni = 0\nwhile n > 0 and i < m:\n    q, w = coupons[i]\n    if n >= q:\n        max_pay += w * q\n        n -= q\n    else:\n        max_pay += w * n\n        break\n    i += 1\nprint(max_pay)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937987327575684,
            0.9918268322944641,
            0.9862217307090759,
            0.9933354258537292,
            0.9830888509750366,
            0.9936419129371643,
            0.9803430438041687,
            0.9913212656974792,
            0.9930302500724792,
            0.9884918928146362,
            0.992340087890625,
            0.9925934672355652,
            0.9932131767272949,
            0.992430567741394,
            0.9927045106887817,
            0.9930111765861511,
            0.9882620573043823,
            0.9928935170173645,
            0.9926300048828125,
            0.9932864308357239
        ]
    },
    "3676": {
        "similarity": 0.9933082461357117,
        "body": "    R, C = map(int, input().split())\n    return pow(2, R * C) - 1\n\nprint(count_polygons())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916926026344299,
            0.9897397756576538,
            0.9927777647972107,
            0.992710292339325,
            0.992816150188446,
            0.9917811155319214,
            0.9751408100128174,
            0.9913872480392456,
            0.9921632409095764,
            0.9921852946281433,
            0.9890622496604919,
            0.9927052855491638,
            0.9905511736869812,
            0.9912699460983276,
            0.9905359148979187,
            0.9909334778785706,
            0.9821353554725647,
            0.9903581738471985,
            0.9933082461357117,
            0.9909458160400391
        ]
    },
    "3293": {
        "similarity": 0.9970625042915344,
        "body": "n = int(input())\nsnacks = []\nfor _ in range(n):\n    f, p, m, s = map(int, input().split())\n    snacks.append((f - 1, p, m, s))\n\ndp = [0] * n\nmax_profit = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if snacks[i][0] == snacks[j][0]:\n            profit = snacks[j][2] - snacks[i][1]\n            if profit > 0 and snacks[j][3] > 0:\n                dp[i] += min(profit, snacks[j][3])\n                max_profit = max(max_profit, dp[i])\n\nprint(max_profit)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932984709739685,
            0.9953135251998901,
            0.9952700734138489,
            0.9961723685264587,
            0.9955183267593384,
            0.9959128499031067,
            0.9936572909355164,
            0.99530029296875,
            0.9960027933120728,
            0.9949886798858643,
            0.9961381554603577,
            0.9931592345237732,
            0.9953438639640808,
            0.9959532022476196,
            0.995339572429657,
            0.9962131977081299,
            0.9958702921867371,
            0.9956775307655334,
            0.9970625042915344,
            0.9942851066589355
        ]
    },
    "3587": {
        "similarity": 0.996311366558075,
        "body": "N = int(input())\ntaboo = set(input() for _ in range(N))\nlongest = ''\nfor i in range(2):\n    for j in range(2):\n        clue = longest + str(i) + str(j)\n        if all(clue not in t for t in taboo) and len(clue) > len(longest):\n            longest = clue\nprint(longest if len(longest) < 10**6 else -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945248365402222,
            0.9945339560508728,
            0.99417644739151,
            0.9953553080558777,
            0.996311366558075,
            0.9925714135169983,
            0.9959855675697327,
            0.9954847097396851,
            0.9949303865432739,
            0.9940060973167419,
            0.993030846118927,
            0.9956654906272888,
            0.9959794878959656,
            0.9952404499053955,
            0.9940225481987,
            0.9950593709945679,
            0.9945192933082581,
            0.9943994283676147,
            0.9909381866455078,
            0.9960451722145081
        ]
    },
    "3530": {
        "similarity": 0.9978458285331726,
        "body": "N = int(input())\ncoasters = []\nfor _ in range(N):\n    a, b, t = map(int, input().split())\n    coasters.append((a, b, t))\nQ = int(input())\n\nfor _ in range(Q):\n    T = int(input())\n    fun = 0\n    for a, b, t in coasters:\n        k = min(T // t, 1000)\n        while a - (k-1)**2 * b <= 0 and k > 0:\n            k -= 1\n        fun += max(a - (k-1)**2 * b, 0) * (T // t)\n    print(fun)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997167706489563,
            0.9969518780708313,
            0.9978215098381042,
            0.9965443015098572,
            0.9973889589309692,
            0.9968354105949402,
            0.9970887899398804,
            0.9970757365226746,
            0.997660219669342,
            0.9944307208061218,
            0.9978458285331726,
            0.996730625629425,
            0.9976243376731873,
            0.9960983991622925,
            0.9976626038551331,
            0.996182918548584,
            0.9962001442909241,
            0.9977204203605652,
            0.9968643188476562,
            0.9976692199707031
        ]
    },
    "3900": {
        "similarity": 0.9962658286094666,
        "body": "Here is the required Python function based on the description:\n\n    n, p = map(int, input().split())\n    suspects = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        x, y = map(int, input().split())\n        suspects[x].append(i)\n        suspects[y].append(i)\n\n        if count >= p:\n            return 1\n        if node == n + 1:\n            return 0\n        result = 0\n        for suspect in suspects[node]:\n            if not visited[suspect]:\n                visited[suspect] = True\n                result += dfs(node + 1, visited, count + 1)\n                visited[suspect] = False\n        return result\n\n    print(dfs(1, [False] * (n + 1), 0))\n\ncount_suspects()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955071210861206,
            0.9954653382301331,
            0.9958566427230835,
            0.9952125549316406,
            0.9856948852539062,
            0.9886810183525085,
            0.9951748251914978,
            0.9946973919868469,
            0.9959930777549744,
            0.9962422251701355,
            0.9957586526870728,
            0.9944922924041748,
            0.9959210157394409,
            0.9961211681365967,
            0.9938821196556091,
            0.9954665303230286,
            0.9937199950218201,
            0.9960247874259949,
            0.9962658286094666,
            0.9961176514625549
        ]
    },
    "3996": {
        "similarity": 0.9963323473930359,
        "body": "mod = 10**9 + 7\nk = int(input())\na = list(map(int, input().split()))\nn = 1\nfor x in a:\n    n *= pow(x, mod-2, mod)\np = (pow(3, n, mod) - 1) % mod\nq = pow(2, n, mod) % mod\nprint(f\"{p}/{q}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927394390106201,
            0.9960150718688965,
            0.991855800151825,
            0.9929247498512268,
            0.9958668947219849,
            0.9942657947540283,
            0.9933892488479614,
            0.9956937432289124,
            0.9958623647689819,
            0.9963323473930359,
            0.9953131675720215,
            0.9896467924118042,
            0.9957050681114197,
            0.995823085308075,
            0.9955137372016907,
            0.9960996508598328,
            0.9893859028816223,
            0.9960700869560242,
            0.9957313537597656,
            0.9955922365188599
        ]
    },
    "3276": {
        "similarity": 0.9962286949157715,
        "body": "n, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\n\n    for i in range(n - 2):\n        for j in range(m - 2):\n            if grid[i][j] != 'W':\n                continue\n            paint = grid[i][j + 1]\n            for k in range(i, i + 3):\n                for l in range(j, j + 3):\n                    if grid[k][l] != paint and grid[k][l] != 'W':\n                        return False\n    return True\n\nprint(\"YES\" if can_paint() else \"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956532716751099,
            0.9914930462837219,
            0.9935145378112793,
            0.9952539205551147,
            0.9949209094047546,
            0.991352915763855,
            0.9926728010177612,
            0.9867051839828491,
            0.9959501028060913,
            0.9954304099082947,
            0.9943474531173706,
            0.9961980581283569,
            0.9954376220703125,
            0.9962286949157715,
            0.9960447549819946,
            0.9931307435035706,
            0.995422899723053,
            0.9954158663749695,
            0.9958885908126831,
            0.9942954182624817
        ]
    },
    "3834": {
        "similarity": 0.9955826997756958,
        "body": "    n, m, k = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        if i < 0 or i >= n or j < 0 or j >= m or a[i][j] != val:\n            return\n        a[i][j] = 2\n        for di, dj in directions:\n            dfs(i + di, j + dj, val)\n\n        cnt = 0\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 1:\n                    dfs(i, j, 1)\n                    cnt += 1\n                elif a[i][j] == 2:\n                    break\n            else:\n                continue\n            break\n        return cnt\n\n    changes = sum(sum(row) for row in a) - count_rectangles()\n    print(-1 if changes > k else changes)\n\nif __name__ == \"__main__\":\n    min_changes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9810724854469299,
            0.9945448040962219,
            0.994472086429596,
            0.9955826997756958,
            0.9946485757827759,
            0.9948944449424744,
            0.9939585328102112,
            0.9948865175247192,
            0.9946423768997192,
            0.9953843355178833,
            0.9951710104942322,
            0.9942789673805237,
            0.9947358965873718,
            0.9839063882827759,
            0.9945160746574402,
            0.9939706921577454,
            0.9949848651885986,
            0.9945824146270752,
            0.9953541159629822,
            0.9925950765609741
        ]
    },
    "3012": {
        "similarity": 0.9946212768554688,
        "body": "MOD = int(1e9 + 7)\n    dp = [[0] * 3 for _ in range(n+1)]\n    dp[0][0] = a\n    dp[0][1] = b\n    dp[0][2] = c\n    for i in range(1, n+1):\n        for j in range(3):\n            if j == 0:\n                dp[i][j] = (dp[i-1][j]*a + dp[i-1][(j+1)%3]*c) % MOD\n            elif j == 1:\n                dp[i][j] = (dp[i-1][j]*b + dp[i-1][0]*d) % MOD\n            else:\n                dp[i][j] = dp[i-1][1]\n    return sum(dp[n]) % MOD\n\na, b, c, d, n = map(int, input().split())\nprint(solve(a, b, c, d, n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928457140922546,
            0.9921187162399292,
            0.993903398513794,
            0.9878119230270386,
            0.9898058176040649,
            0.9927484393119812,
            0.9923325777053833,
            0.9851141571998596,
            0.9911490082740784,
            0.9895939230918884,
            0.9924924969673157,
            0.9883336424827576,
            0.9922913908958435,
            0.9859837293624878,
            0.9891660809516907,
            0.9944798350334167,
            0.988844096660614,
            0.9916846752166748,
            0.9918795228004456,
            0.9946212768554688
        ]
    },
    "3745": {
        "similarity": 0.9952559471130371,
        "body": "n, m = map(int, input().split())\nedges = [tuple(map(lambda x: int(x)-1, input().split())) for _ in range(m)]\n\n    G = [[0]*n for _ in range(n)]\n    for u, v in edges:\n        if s[u] != s[v]:\n            G[u][v] = 1\n            G[v][u] = 1\n    return all(G[i][j] == G[j][i] for i in range(n) for j in range(i+1, n))\n\ns = ['a']*n\nfor i in range(26):\n    if is_valid(s):\n        break\n    s[0] = chr(ord('a') + i)\n    for j in range(1, n):\n        if s[j-1] == 'b':\n            s[j] = 'c'\n        elif s[j-1] == 'c':\n            s[j] = 'b'\n        else:\n            s[j] = 'b'\n\nif is_valid(s):\n    print(\"Yes\")\n    print(''.join(s))\nelse:\n    print(\"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.994401216506958,
            0.9762675762176514,
            0.9938554167747498,
            0.99261075258255,
            0.9927560687065125,
            0.9943598508834839,
            0.9886121153831482,
            0.9952559471130371,
            0.9950191378593445,
            0.994065523147583,
            0.9943970441818237,
            0.9950680136680603,
            0.9936433434486389,
            0.994439959526062,
            0.9915369749069214,
            0.9949453473091125,
            0.9950019717216492,
            0.9941412210464478,
            0.995082437992096,
            0.9940577149391174
        ]
    },
    "3028": {
        "similarity": 0.997721254825592,
        "body": "    n, m, p = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    moves = []\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                moves.append((i+1, j+1))\n                for k in range(n):\n                    board[k][j] += 1\n                    if board[k][j] > p:\n                        board[k][j] = 1\n                for l in range(m):\n                    board[i][l] += 1\n                    if board[i][l] > p:\n                        board[i][l] = 1\n    return len(moves), moves\n\nif __name__ == '__main__':\n    num_moves, moves = primonimo()\n    print(num_moves)\n    print(' '.join(map(str, moves)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975694417953491,
            0.9965638518333435,
            0.996809184551239,
            0.9970692992210388,
            0.9966858625411987,
            0.9965256452560425,
            0.9972200989723206,
            0.9960266947746277,
            0.997721254825592,
            0.997462809085846,
            0.9939963817596436,
            0.9970503449440002,
            0.9944905042648315,
            0.9969576597213745,
            0.9969919919967651,
            0.9970004558563232,
            0.9958696961402893,
            0.9962624311447144,
            0.9950834512710571,
            0.9973196983337402
        ]
    },
    "3196": {
        "similarity": 0.9969247579574585,
        "body": "N, M = map(int, input().split())\ngraph = [[] for _ in range(N + 1)]\nfor _ in range(M):\n    A, B = map(int, input().split())\n    graph[A].append(B)\n\n    if len(graph[node]) == 0:\n        return 1\n    count = 0\n    for child in graph[node]:\n        if child != parent:\n            count += dfs(child, node)\n    return count\n\nprint(dfs(1, -1) % 1_000_000_000)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947007894515991,
            0.9942735433578491,
            0.99395751953125,
            0.9937151074409485,
            0.9968245625495911,
            0.9956079125404358,
            0.9958657026290894,
            0.9968498945236206,
            0.995670735836029,
            0.9964870810508728,
            0.9965383410453796,
            0.9960319995880127,
            0.9969247579574585,
            0.996803879737854,
            0.9933628439903259,
            0.9965768456459045,
            0.9953216910362244,
            0.9964953064918518,
            0.9963908195495605,
            0.9953673481941223
        ]
    },
    "3405": {
        "similarity": 0.9961274862289429,
        "body": "    x = float(input())\n    res = []\n    for i in range(1, 10**8):\n        if str(i)[0] == str(int(i*x))[-len(str(i)):]:\n            res.append(i)\n    if not res:\n        print(\"No solution\")\n    else:\n        print('\\n'.join(map(str, res)))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950487017631531,
            0.9937105774879456,
            0.9926308393478394,
            0.9960203766822815,
            0.9952081441879272,
            0.9934203624725342,
            0.9961274862289429,
            0.9949601888656616,
            0.9929926991462708,
            0.9954749941825867,
            0.9955790638923645,
            0.9898222088813782,
            0.9958747029304504,
            0.9946349263191223,
            0.9923851490020752,
            0.9942827820777893,
            0.9903957843780518,
            0.9928933382034302,
            0.993788480758667,
            0.9938021302223206
        ]
    },
    "3126": {
        "similarity": 0.9971169233322144,
        "body": "    n, t = map(int, input().split())\n    ps = list(map(int, input().split()))\n    C = int(input())\n\n    for _ in range(C):\n        op, a = input().split(), int(input().split()[1])\n        if op[0] == '+':\n            ps.append(a)\n        elif op[0] == '-':\n            ps.remove(a)\n        else:\n            t = a\n\n        ps.sort()\n        jumps = sum(abs(ps[i] - i) for i in range(n))\n        print(jumps)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971169233322144,
            0.9957401752471924,
            0.9968187212944031,
            0.9938228130340576,
            0.9962611794471741,
            0.9951894879341125,
            0.9959622621536255,
            0.9951626658439636,
            0.9968424439430237,
            0.9957636594772339,
            0.9967637658119202,
            0.996290922164917,
            0.9960740804672241,
            0.9944425225257874,
            0.9956939220428467,
            0.9954932332038879,
            0.996403157711029,
            0.995491623878479,
            0.9957150816917419,
            0.9950238466262817
        ]
    },
    "3279": {
        "similarity": 0.9965081810951233,
        "body": "    n = int(input())\n    vertical = [list(map(int, input().split())) for _ in range(n)]\n    horizontal = [list(map(int, input().split())) for _ in range(n)]\n\n    # process vertical bars\n    for i in range(n):\n        v = vertical[i]\n        if sum(v) == 0:\n            continue\n        v.append(0)\n        res_v = ['1'] + ['0'] * (n - 1)\n        prev = 0\n        for j in range(len(v)):\n            if v[j] > 0:\n                res_v[prev:j+1] = ['1'] * v[j]\n                prev = j + 1\n        print(''.join(res_v))\n\n    # process horizontal bars\n    for i in range(n):\n        h = horizontal[i]\n        if sum(h) == 0:\n            continue\n        h.append(0)\n        res_h = ['0'] + ['1'] * (n - 1)\n        prev = n\n        for j in range(len(h)):\n            if h[j] > 0:\n                res_h[prev:j+1+n-1] = ['1'] * h[j]\n                prev = j + 1 + n\n        print(''.join(res_h))\n\nbar_code()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9786329865455627,
            0.9955636262893677,
            0.9965081810951233,
            0.9963497519493103,
            0.9958490133285522,
            0.9960192441940308,
            0.9956700205802917,
            0.9956231713294983,
            0.9962865710258484,
            0.9964171051979065,
            0.9963979125022888,
            0.9961403608322144,
            0.9961950182914734,
            0.9963628649711609,
            0.9953675866127014,
            0.993588924407959,
            0.9959098696708679,
            0.9952456951141357,
            0.9950514435768127,
            0.9963057637214661
        ]
    },
    "3599": {
        "similarity": 0.9974106550216675,
        "body": "T, N = map(int, input().split())\nbreaks = list(map(int, input().split()))\nschedule = [0]*N\non_break = 0\n\nfor t in range(T):\n    if on_break < 2:\n        for i in range(N):\n            if breaks[i] > 0 and schedule[i] == t:\n                schedule[i] = -1\n                on_break += 1\n                break\n    else:\n        for i in range(N):\n            if schedule[i] == -1:\n                schedule[i] = t + breaks[i]\n                on_break -= 1\n\nprint(*schedule)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996127188205719,
            0.9973647594451904,
            0.9967290759086609,
            0.9950920939445496,
            0.9974106550216675,
            0.9946900606155396,
            0.9969398975372314,
            0.9952442646026611,
            0.9967746734619141,
            0.9971252083778381,
            0.9958997964859009,
            0.9965535402297974,
            0.996290385723114,
            0.9959067106246948,
            0.9970506429672241,
            0.9961936473846436,
            0.9960993528366089,
            0.996300458908081,
            0.9954831004142761,
            0.9962595105171204
        ]
    },
    "3687": {
        "similarity": 0.9965523481369019,
        "body": "n, q, s = map(int, input().split())\nq_sensors = list(map(int, input().split()))\nc_queues = list(map(int, input().split()))\n\n    queues = [0] * q\n    for _ in range(n):\n        d, *a = map(int, input().split())\n        for i in range(s):\n            if a[i] > 0 and q_sensors[i] - 1 < len(queues) and queues[q_sensors[i] - 1] + a[i] <= c_queues[q_sensors[i] - 1]:\n                queues[q_sensors[i] - 1] += a[i]\n            else:\n                return False\n        if all(q == 0 for q in queues):\n            break\n    return True\n\nprint(\"possible\" if can_transfer() else \"impossible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957599639892578,
            0.9940370321273804,
            0.9964248538017273,
            0.9946739077568054,
            0.9898866415023804,
            0.9952061176300049,
            0.9963308572769165,
            0.9951003193855286,
            0.995031476020813,
            0.9955782890319824,
            0.9947635531425476,
            0.9960581064224243,
            0.9931516051292419,
            0.9963431358337402,
            0.9965523481369019,
            0.9951388835906982,
            0.9958304166793823,
            0.9947660565376282,
            0.9945241212844849,
            0.9958686828613281
        ]
    },
    "3864": {
        "similarity": 0.9928209185600281,
        "body": "MOD = 998244353\nn = int(input())\nfor s in range(1, n + 1):\n    print((s * pow(2, MOD - 2, MOD)) % MOD)",
        "result": "timed out",
        "similarities": [
            0.9885717630386353,
            0.9918056130409241,
            0.9912379384040833,
            0.988630473613739,
            0.9890327453613281,
            0.9915153980255127,
            0.9928209185600281,
            0.9916123747825623,
            0.9863153696060181,
            0.9629163146018982,
            0.9911518096923828,
            0.9927735924720764,
            0.9846428632736206,
            0.9913018941879272,
            0.9891639351844788,
            0.9907098412513733,
            0.9908236265182495,
            0.9912288188934326,
            0.9903779625892639,
            0.9826953411102295
        ]
    },
    "3504": {
        "similarity": 0.9971076846122742,
        "body": "    D, S = map(int, input().split())\n    drops = [tuple(map(int, input().split())) for _ in range(D)]\n    sensors = [tuple(map(int, input().split())) for _ in range(S)]\n\n        for sensor in sensors:\n            if drop[0] >= sensor[0] and drop[0] <= sensor[1] and drop[1] == sensor[2]:\n                return sensor[2]\n        return 0\n\n    for drop in drops:\n        print(find_sensor(drop))\n\nantimatter_rain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949861764907837,
            0.9946082234382629,
            0.9968844056129456,
            0.9951644539833069,
            0.9963365793228149,
            0.9921942353248596,
            0.9961860179901123,
            0.9953357577323914,
            0.9967382550239563,
            0.9960447549819946,
            0.9969668984413147,
            0.9966094493865967,
            0.9953827261924744,
            0.9962792992591858,
            0.9961290955543518,
            0.9961429238319397,
            0.9962900876998901,
            0.9951625466346741,
            0.9949324727058411,
            0.9971076846122742
        ]
    },
    "3451": {
        "similarity": 0.9966669678688049,
        "body": "n, k = map(int, input().split())\ns = input()\nc = [int(input()) for _ in range(n)]\ndp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\nfor i in range(n + 1):\n    dp[i][0] = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '(':\n        for j in range(k):\n            dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j])\n    else:\n        for j in range(k):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j + 1] + c[i - 1])\nprint(min(dp[-1]) if all(d < k for d in dp[-1]) else '?')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961393475532532,
            0.9962003827095032,
            0.9957252144813538,
            0.9953879117965698,
            0.9966357350349426,
            0.9941624999046326,
            0.9966669678688049,
            0.9954468607902527,
            0.9952112436294556,
            0.9958359599113464,
            0.9965460896492004,
            0.9922664165496826,
            0.9965450763702393,
            0.9955602884292603,
            0.9953093528747559,
            0.9958539605140686,
            0.9953650236129761,
            0.992411196231842,
            0.9949899911880493,
            0.9922558665275574
        ]
    },
    "3156": {
        "similarity": 0.9970861673355103,
        "body": "N = int(input())\nK = int(input())\nstores = {}\nfor _ in range(K):\n    i, S = map(str, input().split())\n    i = int(i)\n    if i not in stores:\n        stores[i] = []\n    stores[i].append(S)\n\nM = int(input())\nitems = []\nfor _ in range(M):\n    T = input()\n    items.append(T)\n\ncurrent_store = 0\nfor item in items:\n    found = False\n    for store_id, store_items in stores.items():\n        if current_store < store_id or (current_store == store_id and item not in store_items):\n            continue\n        if item in store_items:\n            current_store = store_id + 1\n            found = True\n            break\n\n    if not found:\n        print(\"impossible\")\n        exit()\n\nif len(set([s for s in stores.keys()][:current_store])) != current_store - 1:\n    print(\"ambiguous\")\nelse:\n    print(\"unique\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970861673355103,
            0.9941755533218384,
            0.9957876801490784,
            0.9946244955062866,
            0.9938661456108093,
            0.9952590465545654,
            0.9927181601524353,
            0.9962206482887268,
            0.9969342947006226,
            0.9961490631103516,
            0.9966087341308594,
            0.9938391447067261,
            0.9965123534202576,
            0.9966669678688049,
            0.9955522418022156,
            0.9953480958938599,
            0.9933251142501831,
            0.994270920753479,
            0.9896787405014038,
            0.9957235455513
        ]
    },
    "3697": {
        "similarity": 0.996590793132782,
        "body": "n, k, m, a = map(int, input().split())\nvotes = list(map(int, input().split()))\ncandidates = [0] * n\nfor i in range(a):\n    candidates[votes[i]-1] += 1\ncandidates.sort(reverse=True)\nfor i in range(n):\n    if i < k:\n        print(1)\n    elif i == k and candidates[i] > 0:\n        print(2)\n    else:\n        print(3)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994495689868927,
            0.9944390058517456,
            0.996590793132782,
            0.9962344169616699,
            0.9953828454017639,
            0.9939881563186646,
            0.9963862895965576,
            0.9947381615638733,
            0.9947465658187866,
            0.9962872266769409,
            0.9959138631820679,
            0.9885624647140503,
            0.9965237975120544,
            0.9960485696792603,
            0.9837297201156616,
            0.9962884783744812,
            0.9946091175079346,
            0.9947096109390259,
            0.9954424500465393,
            0.9961921572685242
        ]
    },
    "3647": {
        "similarity": 0.9973405599594116,
        "body": "C, R = map(int, input().split())\ngrid = [list(input()) for _ in range(R)]\n\ndx, dy = [-1, 0, 1, 0], [0, -1, 0, 1]\ndist = [[-1] * C for _ in range(R)]\nqueue = []\n\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == 'M':\n            dist[i][j] = 0\n            queue.append((i, j))\n\nwhile queue:\n    x, y = queue.pop(0)\n    for k in range(4):\n        nx, ny = x + dx[k], y + dy[k]\n        while 0 <= nx < R and 0 <= ny < C and grid[nx][ny] != '#':\n            if grid[nx][ny] == '.':\n                break\n            elif grid[nx][ny] == '_':\n                nx += dx[k]\n                ny += dy[k]\n        else:\n            continue\n        break\n\n    if dist[nx][ny] == -1 or (dist[x][y] + 1 < dist[nx][ny]):\n        dist[nx][ny] = dist[x][y] + 1\n        queue.append((nx, ny))\n\nfor row in dist:\n    print(*row)",
        "result": "timed out",
        "similarities": [
            0.9948371052742004,
            0.9965611696243286,
            0.9949978590011597,
            0.9952854514122009,
            0.9961649179458618,
            0.9960523843765259,
            0.997117280960083,
            0.9973405599594116,
            0.9972016215324402,
            0.9954702258110046,
            0.9963991045951843,
            0.9970225095748901,
            0.9971489310264587,
            0.9964706897735596,
            0.9970782399177551,
            0.997257649898529,
            0.9969442486763,
            0.9962195158004761,
            0.9965869784355164,
            0.9964809417724609
        ]
    },
    "3699": {
        "similarity": 0.9956384897232056,
        "body": "Here is the required Python function:\n\nfrom math import sqrt\n\n    bottles = [tuple(map(int, input().split())) for _ in range(n)]\n\n        return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    total_dist = 0\n    adil_x, adil_y = a_x, a_y\n    bera_x, bera_y = b_x, b_y\n    recycling_bin_x, recycling_bin_y = t_x, t_y\n\n    while bottles:\n        closest_bottle_to_adil = min(bottles, key=lambda bottle: dist(adil_x, adil_y, *bottle))\n        closest_bottle_to_bera = min(bottles, key=lambda bottle: dist(bera_x, bera_y, *bottle))\n\n        if dist(adil_x, adil_y, recycling_bin_x, recycling_bin_y) <= dist(bera_x, bera_y, recycling_bin_x, recycling_bin_y):\n            total_dist += dist(adil_x, adil_y, closest_bottle_to_adil[0], closest_bottle_to_adil[1])\n            bottles.remove(closest_bottle_to_adil)\n            total_dist += dist(closest_bottle_to_adil[0], closest_bottle_to_adil[1], recycling_bin_x, recycling_bin_y)\n            adil_x, adil_y = recycling_bin_x, recycling_bin_y\n        else:\n            total_dist += dist(bera_x, bera_y, closest_bottle_to_bera[0], closest_bottle_to_bera[1])\n            bottles.remove(closest_bottle_to_bera)\n            total_dist += dist(closest_bottle_to_bera[0], closest_bottle_to_bera[1], recycling_bin_x, recycling_bin_y)\n            bera_x, bera_y = recycling_bin_x, recycling_bin_y\n\n    print(total_dist)\n\na_x, a_y, b_x, b_y, t_x, t_y = map(int, input().split())\nn = int(input())\nmin_distance(a_x, a_y, b_x, b_y, t_x, t_y, n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993068516254425,
            0.9945772886276245,
            0.9954088926315308,
            0.9946677684783936,
            0.9940800070762634,
            0.9953410625457764,
            0.9940311908721924,
            0.9918068647384644,
            0.9941186308860779,
            0.9926213026046753,
            0.995478093624115,
            0.9934683442115784,
            0.9946128726005554,
            0.9940922260284424,
            0.9941197633743286,
            0.9944714903831482,
            0.9949172139167786,
            0.9926083087921143,
            0.9928805828094482,
            0.9956384897232056
        ]
    },
    "3145": {
        "similarity": 0.9964451193809509,
        "body": "X, A, B = map(int, input().split())\nallowed_digits = set(input())\n\n    count = 0\n    for num in range(A, B + 1):\n        if num % X == 0 and all(digit in allowed_digits for digit in str(num)):\n            count += 1\n    return count\n\nprint(count_multiples(X, A, B, allowed_digits))",
        "result": "failed: testcase 0",
        "similarities": [
            0.993277907371521,
            0.9963340759277344,
            0.9955538511276245,
            0.9954879283905029,
            0.9931691884994507,
            0.9925205707550049,
            0.9946532249450684,
            0.9964451193809509,
            0.9959567189216614,
            0.9962077736854553,
            0.9940301179885864,
            0.9961861371994019,
            0.9961944222450256,
            0.994796872138977,
            0.9955989718437195,
            0.9958348870277405,
            0.9946033954620361,
            0.9928056001663208,
            0.9945467710494995,
            0.9955077171325684
        ]
    },
    "3795": {
        "similarity": 0.9913191795349121,
        "body": "n = int(input())\nd = int(input())\ne = int(input())\n\nmin_rubles = min(n // d, n // e)\n\nprint(min_rubles)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9668436646461487,
            0.9892632365226746,
            0.9905165433883667,
            0.9824592471122742,
            0.9912298917770386,
            0.9912484884262085,
            0.9845353960990906,
            0.9910932183265686,
            0.9878786206245422,
            0.9892503619194031,
            0.9871818423271179,
            0.9913191795349121,
            0.9841688871383667,
            0.977760910987854,
            0.9878786206245422,
            0.9880802631378174,
            0.9902445077896118,
            0.9909898638725281,
            0.9857475161552429,
            0.983996570110321
        ]
    },
    "3353": {
        "similarity": 0.99773108959198,
        "body": "from collections import deque\n\n    queue = deque([(start, 0)])\n    visited = {start: None}\n    while queue:\n        node, time = queue.popleft()\n        if node == -1:\n            return time\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited[neighbor] = node\n                queue.append((neighbor, time + 1))\n    return float('inf')\n\n    P, R, L = map(int, input().split())\n    graph = [-2] + list(range(R)) + [-1]\n    for _ in range(L):\n        E1, E2 = map(int, input().split())\n        graph[E1].append(E2)\n        graph[E2].append(E1)\n    time = bfs(graph, -2)\n    if time > P:\n        print(time - P)\n    else:\n        print(time)\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974899291992188,
            0.9973835349082947,
            0.9972018003463745,
            0.9977283477783203,
            0.9964680075645447,
            0.9967156648635864,
            0.9962026476860046,
            0.9974203705787659,
            0.9972230792045593,
            0.9968072772026062,
            0.99773108959198,
            0.9958013296127319,
            0.9973628520965576,
            0.9969724416732788,
            0.9965570569038391,
            0.9976319074630737,
            0.9971002340316772,
            0.9958153963088989,
            0.9970728158950806,
            0.9960024952888489
        ]
    },
    "3065": {
        "similarity": 0.997257649898529,
        "body": "import sys\nfrom collections import deque\n\nN = int(input())\nL = int(input())\nwalk = list(map(int, input().split()))\ngraph = [[] for _ in range(N)]\nfor i in range(N):\n    n_i = int(input())\n    graph[i] = list(map(int, input().split()))\n\n    queue = deque([(0, 0)])\n    visited = [[False]*L for _ in range(N)]\n    while queue:\n        node, time = queue.popleft()\n        if time == L-1:\n            return True\n        if not visited[node][time]:\n            visited[node][time] = True\n            for nei in graph[node]:\n                if time < L-2 or nei != walk[time+1]:\n                    queue.append((nei, time+1))\n    return False\n\nprint(1.0 - bfs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964210391044617,
            0.995805025100708,
            0.9957211017608643,
            0.9965142011642456,
            0.9952508807182312,
            0.9958717226982117,
            0.9950386881828308,
            0.997257649898529,
            0.995846688747406,
            0.9952189922332764,
            0.9956905841827393,
            0.9969573020935059,
            0.9966810941696167,
            0.9966288208961487,
            0.9964096546173096,
            0.9960584044456482,
            0.9959947466850281,
            0.9928117394447327,
            0.996057391166687,
            0.9951589703559875
        ]
    },
    "3250": {
        "similarity": 0.9946393370628357,
        "body": "b, d = map(int, input().split())\nm = 1\nwhile True:\n    if sum((-1)**i * ((b**m - 1)//(d - 1)) for i in range(m)) % d == 0:\n        print(\"yes\")\n        break\n    m += 1\nelse:\n    print(\"no\")",
        "result": "failed: testcase 2",
        "similarities": [
            0.9911897778511047,
            0.9915366172790527,
            0.9942123293876648,
            0.9888898134231567,
            0.9919864535331726,
            0.9839449524879456,
            0.9933311343193054,
            0.9944673180580139,
            0.989982008934021,
            0.9930518269538879,
            0.9931104779243469,
            0.9925384521484375,
            0.9937956929206848,
            0.9924501180648804,
            0.9876290559768677,
            0.9937905073165894,
            0.9856146574020386,
            0.9943560361862183,
            0.9946393370628357,
            0.9914490580558777
        ]
    },
    "3306": {
        "similarity": 0.9958240985870361,
        "body": "    N, M = map(int, input().split())\n    detectors = [list(map(int, input().split())) for _ in range(N)]\n    dp = [0] * (M + 1)\n    max_calls = 0\n    for pos, calls in sorted(detectors):\n        max_calls = max(max_calls, dp[pos - 1])\n        if pos < M:\n            dp[pos + 1] = max(dp[pos + 1], max_calls + calls)\n    print(max(dp[M]))\n\nmin_phone_calls()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947282671928406,
            0.9958057403564453,
            0.9939821362495422,
            0.9958240985870361,
            0.9933391213417053,
            0.9957088828086853,
            0.9950207471847534,
            0.9945532083511353,
            0.9947441816329956,
            0.9924372434616089,
            0.995762288570404,
            0.9951590299606323,
            0.9955813884735107,
            0.9945610761642456,
            0.9952584505081177,
            0.9925389885902405,
            0.99461829662323,
            0.9925041198730469,
            0.9894871115684509,
            0.9942315816879272
        ]
    },
    "3970": {
        "similarity": 0.9961180686950684,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % k != a[j] and a[i] // k > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950557351112366,
            0.993094801902771,
            0.9954549074172974,
            0.9830824136734009,
            0.9945464730262756,
            0.9961180686950684,
            0.995137095451355,
            0.9960983991622925,
            0.9956597685813904,
            0.9957162141799927,
            0.9951205849647522,
            0.9958644509315491,
            0.9953209757804871,
            0.9960778951644897,
            0.9934756755828857,
            0.9937431812286377,
            0.9956434369087219,
            0.995376467704773,
            0.9958692789077759,
            0.995067298412323
        ]
    },
    "3655": {
        "similarity": 0.9978329539299011,
        "body": "W, H = map(int, input().split())\nrobot = [list(map(int, input().split())) for _ in range(H)]\nfloor = [list(map(int, input().split())) for _ in range(H)]\n\n    W_r, H_r = len(robot[0]), len(robot)\n    candidates = []\n    max_match = 0\n\n    for y_floor in range(floor[0][1] - H_r + 1):\n        for x_floor in range(floor[0][0] - W_r + 1):\n            match_count = sum(sum(a == b for a, b in zip(row_r, row_f)) for row_r, row_f in zip(robot, floor[y_floor:y_floor+H_r], floor[x_floor:x_floor+W_r]))\n            if match_count > max_match:\n                candidates = [(x_floor, y_floor)]\n                max_match = match_count\n            elif match_count == max_match:\n                candidates.append((x_floor, y_floor))\n\n    return candidates\n\ncandidates = find_candidates(robot, floor)\nfor x, y in sorted(candidates):\n    print(x, y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976314902305603,
            0.99679034948349,
            0.9972577691078186,
            0.9978123903274536,
            0.9975373148918152,
            0.9966667890548706,
            0.9972032308578491,
            0.997675359249115,
            0.9959180951118469,
            0.9958008527755737,
            0.9970195293426514,
            0.9972589612007141,
            0.9975301027297974,
            0.9971383810043335,
            0.9972288012504578,
            0.9974492788314819,
            0.9959155917167664,
            0.9965173602104187,
            0.9975917339324951,
            0.9978329539299011
        ]
    },
    "3589": {
        "similarity": 0.9979545474052429,
        "body": "    result = [0] * 9\n    for num in range(L, R+1):\n        x = num\n        while x >= 10:\n            x = 1\n            for digit in str(x):\n                if digit != '0':\n                    x *= int(digit)\n        result[x-1] += 1\n    return result\n\nL, R = map(int, input().split())\nprint(*count_digit_products(L, R))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969757795333862,
            0.9976785778999329,
            0.9977233409881592,
            0.9976330995559692,
            0.9977717995643616,
            0.9975547790527344,
            0.9951505064964294,
            0.9962337017059326,
            0.9974146485328674,
            0.9958275556564331,
            0.9979545474052429,
            0.9976214170455933,
            0.9973810911178589,
            0.9975067973136902,
            0.9977687001228333,
            0.9974887371063232,
            0.9968910217285156,
            0.9970547556877136,
            0.9959801435470581,
            0.996940016746521
        ]
    },
    "3257": {
        "similarity": 0.9961251020431519,
        "body": "a, b, c = map(float, input().split())\ns = max(a, b, c)\nif s > 3:\n    print(-1)\nelse:\n    side = s / sqrt(3)\n    area = sqrt(3) * side ** 2 / 4\n    print(round(area, 10))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960172772407532,
            0.9935670495033264,
            0.9911901354789734,
            0.9957911968231201,
            0.9958813190460205,
            0.9951431751251221,
            0.9954915642738342,
            0.9939696788787842,
            0.9961251020431519,
            0.9928604960441589,
            0.9946651458740234,
            0.9956526756286621,
            0.9944349527359009,
            0.9958371520042419,
            0.9956525564193726,
            0.9952175617218018,
            0.9914128184318542,
            0.9960297346115112,
            0.9943448901176453,
            0.9944959878921509
        ]
    },
    "3927": {
        "similarity": 0.9962385296821594,
        "body": "n = int(input())\nweights = list(map(int, input().split()))\nmax_weights = 0\nfor k in range(1, n + 1):\n    if len({w for i in range(k - 1): weights[i] + w < sum(weights)}) >= k:\n        max_weights = k\nprint(max_weights)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958781003952026,
            0.9903367757797241,
            0.9947391152381897,
            0.9913308024406433,
            0.994718074798584,
            0.994799792766571,
            0.9948745369911194,
            0.9954700469970703,
            0.9955751299858093,
            0.993194580078125,
            0.994705080986023,
            0.9957783222198486,
            0.9914355278015137,
            0.9951015114784241,
            0.9942654371261597,
            0.9933404326438904,
            0.9962385296821594,
            0.9950557351112366,
            0.9956125020980835,
            0.9896809458732605
        ]
    },
    "3319": {
        "similarity": 0.9976491332054138,
        "body": "    n, nx, ny, nz = map(int, input().split())\n    planetoids = []\n    for _ in range(n):\n        m, x, y, z, vx, vy, vz = map(int, input().split())\n        planetoids.append((m, (x % nx, y % ny, z % nz), (vx % nx, vy % ny, vz % nz)))\n\n    while True:\n        collisions = []\n        for i, (m1, pos1, vel1) in enumerate(planetoids):\n            for j, (m2, pos2, vel2) in enumerate(planetoids[i+1:], start=i+1):\n                if all(abs(pos1[k] - pos2[k]) == 0 for k in range(3)):\n                    collisions.append((i, j))\n\n        if not collisions:\n            break\n\n        for i, j in collisions:\n            m = planetoids[i][0] + planetoids[j][0]\n            vel = tuple(sum(x) // 2 for x in zip(*planetoids[i][2], *planetoids[j][2]))\n            planetoids[i] = (m, planetoids[i][1], vel)\n            del planetoids[j]\n\n    p = len(planetoids)\n    print(p)\n\n    for i, (m, pos, vel) in enumerate(sorted(planetoids, key=lambda x: (-x[0], x[1]))):\n        print(f\"P{i}: {m} {' '.join(map(str, pos))} {' '.join(map(str, vel))}\")\n\nsimulate_planetoids()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976491332054138,
            0.9969045519828796,
            0.996730625629425,
            0.9951523542404175,
            0.9966155886650085,
            0.9968964457511902,
            0.9958619475364685,
            0.9958696961402893,
            0.995483934879303,
            0.9963750243186951,
            0.9957099556922913,
            0.9954147338867188,
            0.9936174154281616,
            0.9973417520523071,
            0.9966126680374146,
            0.9962155222892761,
            0.9974941611289978,
            0.9972479939460754,
            0.9971978068351746,
            0.9969803690910339
        ]
    },
    "3009": {
        "similarity": 0.9963834881782532,
        "body": "    import sys\n    N = int(input())\n    lamps = []\n    for i in range(N):\n        x, y, e = map(int, input().split())\n        lamps.append((x, y, e))\n\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n\n        pos = [l for l in lams if l[2] > 0]\n        neg = [l for l in lams if l[2] < 0]\n        if not pos or not neg:\n            return float('inf')\n        p1, p2 = min(pos), max(neg)\n        return dist(p1, p2)\n\n    best = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            lams1 = lamps[:i] + lamps[i+1:j] + lamps[j+1:]\n            lams2 = lamps[:j] + lamps[i+1:] + lamps[j:]\n            d1 = bal(lams1)\n            d2 = bal(lams2)\n            best = min(best, max(d1, d2))\n\n    if best == float('inf'):\n        print(\"IMPOSSIBLE\")\n    else:\n        print(best)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962310791015625,
            0.9950989484786987,
            0.9953874349594116,
            0.9947357177734375,
            0.9945142865180969,
            0.9955659508705139,
            0.996243953704834,
            0.9949162006378174,
            0.9911487102508545,
            0.9952551126480103,
            0.9946642518043518,
            0.9932163953781128,
            0.9946532845497131,
            0.9948832988739014,
            0.9951710104942322,
            0.9951705932617188,
            0.9935537576675415,
            0.9925583600997925,
            0.9911211729049683,
            0.9963834881782532
        ]
    },
    "3896": {
        "similarity": 0.9930958151817322,
        "body": "n = len(input())\nx = int(input(), 2)\nprint(sum(i != x ^ i for i in range(2**n)) % 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925755858421326,
            0.9904335737228394,
            0.9897227883338928,
            0.9898050427436829,
            0.9911693930625916,
            0.9910388588905334,
            0.991033673286438,
            0.9921226501464844,
            0.9918217062950134,
            0.9908772706985474,
            0.9752014875411987,
            0.9769094586372375,
            0.9857573509216309,
            0.9913660287857056,
            0.992510974407196,
            0.9930605888366699,
            0.9921659231185913,
            0.9882511496543884,
            0.9903229475021362,
            0.9930958151817322
        ]
    },
    "3509": {
        "similarity": 0.9965716004371643,
        "body": "import heapq\n\n    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, t = map(int, input().split())\n        graph[u].append((v, t))\n\n    dist = [float('inf')] * (n + 1)\n    pq = [(0, n)]  # time, node\n    dist[n] = 0\n\n    while pq:\n        curr_time, curr_node = heapq.heappop(pq)\n\n        if curr_time > dist[curr_node]:\n            continue\n\n        for next_node, travel_time in graph[curr_node]:\n            new_time = curr_time + travel_time\n            if new_time <= b and new_time >= a and new_time < dist[next_node]:\n                dist[next_node] = new_time\n                heapq.heappush(pq, (new_time, next_node))\n\n    print(dist[1])\n\nmin_wait_time()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935246706008911,
            0.9936835765838623,
            0.9935656189918518,
            0.994038462638855,
            0.9965716004371643,
            0.9950040578842163,
            0.9929221272468567,
            0.9957687258720398,
            0.9956347942352295,
            0.9962365031242371,
            0.9959392547607422,
            0.9954267144203186,
            0.9964067339897156,
            0.9964013695716858,
            0.9946919679641724,
            0.9917879700660706,
            0.9959483742713928,
            0.9926311373710632,
            0.994644045829773,
            0.9938391447067261
        ]
    },
    "3547": {
        "similarity": 0.9938571453094482,
        "body": "    n = int(input())\n    xranges, yranges = [], []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, input().split())\n        xranges.append((x1, x2))\n        yranges.append((y1, y2))\n    xsorted, ysorted = sorted(xranges), sorted(yranges)\n    total_area = sum((xsorted[i+1][0] - xsorted[i][1]) * (ysorted[j+1][0] - ysorted[j][1])\n                     for i in range(n-1) for j in range(n-1))\n    print(\"{:.2f}\".format(total_area))\n\ntotal_area()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928362965583801,
            0.9928212761878967,
            0.9901701211929321,
            0.9912173748016357,
            0.9938571453094482,
            0.9901474714279175,
            0.9829269051551819,
            0.9908635020256042,
            0.9913442730903625,
            0.9907113313674927,
            0.9915099740028381,
            0.9899162650108337,
            0.9913398623466492,
            0.9911626577377319,
            0.9893864393234253,
            0.9839215874671936,
            0.9903709888458252,
            0.9903677701950073,
            0.9844362139701843,
            0.9901975393295288
        ]
    },
    "3017": {
        "similarity": 0.9929469227790833,
        "body": "    power_of_two = int(str(2**e))\n    count = 0\n    for k in range(10**(n.bit_length()), n+1):\n        if str(power_of_two) in str(k):\n            count += 1\n    print(count)\n\ncount_numbers_with_power_of_two(int(input().split()[0]), int(input().split()[1]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929242730140686,
            0.9918626546859741,
            0.9929406046867371,
            0.9907094240188599,
            0.991555392742157,
            0.9876509308815002,
            0.9923419952392578,
            0.9828075766563416,
            0.9915835857391357,
            0.9903388023376465,
            0.992389976978302,
            0.9812836050987244,
            0.9822268486022949,
            0.9898360371589661,
            0.9755784273147583,
            0.992356538772583,
            0.991416335105896,
            0.9929469227790833,
            0.9920183420181274,
            0.9927235841751099
        ]
    },
    "3076": {
        "similarity": 0.9966979026794434,
        "body": "    n, k = map(int, input().split())\n    jewels = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * (k+1) for _ in range(301)]\n    for s, v in jewels:\n        for size in range(k, 0, -1):\n            if s <= size and dp[s][size-1] < dp[s-1][size]:\n                dp[s][size] = max(dp[s][size], dp[s-1][size]+v)\n            else:\n                dp[s][size] = max(dp[s][size], dp[s-1][size])\n    return ' '.join(map(str, [max(dp[s][k-s+1]) for s in range(1, k+1)]))\n\nprint(max_values())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955640435218811,
            0.9923876523971558,
            0.9956789612770081,
            0.9954964518547058,
            0.9954850077629089,
            0.9964744448661804,
            0.9962166547775269,
            0.9937751293182373,
            0.996376633644104,
            0.9959838390350342,
            0.9949120283126831,
            0.9958361387252808,
            0.9966979026794434,
            0.9960761070251465,
            0.9949710369110107,
            0.9959291219711304,
            0.9922704100608826,
            0.995457112789154,
            0.9959515333175659,
            0.995572566986084
        ]
    },
    "3923": {
        "similarity": 0.9967422485351562,
        "body": "N, A, B = map(int, input().split())\nif abs(A - B) > 1 or min(A, B) > N // 2:\n    print(-1)\nelse:\n    P = list(range(1, N + 1))\n    if A < B:\n        P[A - 1::A], P[B - 1::B] = P[B - 1::B], P[A - 1::A]\n    print(*P)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964995384216309,
            0.9967422485351562,
            0.9961210489273071,
            0.9966707825660706,
            0.9948216676712036,
            0.9925850629806519,
            0.9953749775886536,
            0.9940066933631897,
            0.9964824318885803,
            0.9954143166542053,
            0.9966054558753967,
            0.996620774269104,
            0.9951240420341492,
            0.9961722493171692,
            0.9934015870094299,
            0.996372640132904,
            0.9963597655296326,
            0.9965692758560181,
            0.9947074055671692,
            0.9949336051940918
        ]
    },
    "3332": {
        "similarity": 0.9962064027786255,
        "body": "    n = int(input())\n    streams = []\n    for _ in range(n):\n        s, d, p = map(int, input().split())\n        streams.append((s, s + d - 1, p))\n    streams.sort()\n    dp = [0] * (n + 1)\n    stack = []\n    max_priority = 0\n    for start, end, priority in streams:\n        while stack and stack[-1][0] < start:\n            stack.pop()\n        if stack and stack[-1][1] >= start:\n            dp[n] = max(dp[n], dp[stack[-1][2]] + priority)\n        elif not stack or stack[-1][1] < start:\n            stack.append((start, end, n))\n            dp[n] = max(dp[n], dp[stack[-1][2]] + priority)\n        max_priority = max(max_priority, dp[n])\n    print(max_priority)\n\nmax_priority()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960333108901978,
            0.9941514730453491,
            0.9957245588302612,
            0.9962064027786255,
            0.9959650635719299,
            0.9949373006820679,
            0.9939745664596558,
            0.9947537779808044,
            0.9922162294387817,
            0.988858163356781,
            0.9901253581047058,
            0.9958397746086121,
            0.9935979247093201,
            0.9946507811546326,
            0.9956018328666687,
            0.996010959148407,
            0.9958173036575317,
            0.9955919981002808,
            0.9944031238555908,
            0.9956478476524353
        ]
    },
    "3240": {
        "similarity": 0.9952210187911987,
        "body": "k, v = map(int, input().split())\nballots = []\nfor _ in range(v - 1):\n    p, b = map(float, input().split())\n    ballots.append((p, int(b)))\ntotal_ballots = sum([b if p >= random.random() else 0 for p, b in ballots])\nmax_yraglac_positions = float('-inf')\nfor i in range(2**k):\n    ballots.append((1.0, i))\n    total_ballots += ballots[-1][1]\n    expected_positions = sum([bin(total_ballots)[-j] == '0' for j in range(k)])\n    if expected_positions > max_yraglac_positions:\n        max_yraglac_positions = expected_positions\n        best_ballot = i\nprint(best_ballot)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924587607383728,
            0.9925607442855835,
            0.978969395160675,
            0.9947320818901062,
            0.9927875995635986,
            0.9915605187416077,
            0.9932148456573486,
            0.9944029450416565,
            0.9943011403083801,
            0.9943588972091675,
            0.9922686219215393,
            0.9896758198738098,
            0.9946837425231934,
            0.9913382530212402,
            0.9932580590248108,
            0.9952210187911987,
            0.994781494140625,
            0.9911943078041077,
            0.9948315024375916,
            0.9946001768112183
        ]
    },
    "3368": {
        "similarity": 0.996232807636261,
        "body": "from collections import defaultdict\n\nn, m = map(int, input().split())\nenclosures = defaultdict(list)\nfor i in range(n):\n    animal_type, num_animals, *animals_in_enclosure = input().split()\n    enclosures[animal_type].extend(animals_in_enclosure[:num_animals])\n\n    visited = set()\n    for animal_type, animals in enclosures.items():\n        if len(animals) == 0:\n            continue\n        current_animal = animals.pop()\n        if current_animal not in visited and current_animal != animal_type:\n            return False\n        visited.add(current_animal)\n    return True\n\nprint(\"POSSIBLE\" if is_possible() else \"IMPOSSIBLE\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950914978981018,
            0.9959336519241333,
            0.9945756793022156,
            0.994057297706604,
            0.9946475625038147,
            0.9956575036048889,
            0.9957187175750732,
            0.9934457540512085,
            0.9951449036598206,
            0.995712161064148,
            0.9942541718482971,
            0.9961047768592834,
            0.9927263855934143,
            0.9946642518043518,
            0.996232807636261,
            0.996109127998352,
            0.9943923950195312,
            0.9927992820739746,
            0.9941145181655884,
            0.9950914978981018
        ]
    },
    "3538": {
        "similarity": 0.9962420463562012,
        "body": "    n, d = map(int, input().split())\n    frogs = sorted([tuple(map(int, input().split())) for _ in range(n)], reverse=True)\n    dp = [0] * (n + 1)\n    for l, w, h in frogs:\n        if h + l > d:\n            dp[w] += 1\n        else:\n            for i in range(w):\n                if dp[i]:\n                    if i + w <= n and frogs[i].l + frogs[i+1].h > d:\n                        dp[i+w] = max(dp[i+w], dp[i] + 1)\n    print(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9905983805656433,
            0.9933540225028992,
            0.9957743287086487,
            0.9953191876411438,
            0.995193362236023,
            0.9957582354545593,
            0.9950913786888123,
            0.9962096214294434,
            0.9924071431159973,
            0.9952282309532166,
            0.9962420463562012,
            0.9957303404808044,
            0.9952535033226013,
            0.9940505027770996,
            0.9946834444999695,
            0.994490385055542,
            0.9960067272186279,
            0.9935483336448669,
            0.9947944283485413,
            0.9942759275436401
        ]
    },
    "3183": {
        "similarity": 0.9980591535568237,
        "body": "    n, m, s, t = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    capacity = [[0] * n for _ in range(n)]\n    cost = [[0] * n for _ in range(n)]\n\n    for i in range(m):\n        u, v, c, w = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n        capacity[u][v] += c\n        cost[u][v] += w\n\n        if source == sink:\n            return flow\n        best_flow = 0\n        for i in range(len(graph[source])):\n            v = graph[source][i]\n            if capacity[source][v] > 0 and parent[v] == -1:\n                new_flow = dfs(v, sink, min(flow, capacity[source][v]), parent)\n                if new_flow > 0:\n                    capacity[source][v] -= new_flow\n                    capacity[v][source] += new_flow\n                    return new_flow\n        return best_flow\n\n    total_cost = 0\n    max_flow = 0\n    parent = [-1] * n\n    while True:\n        flow = dfs(s, t, float('inf'), parent)\n        if flow == 0:\n            break\n        max_flow += flow\n        total_cost += cost[s][t] * flow\n\n    print(max_flow, total_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979614615440369,
            0.9980394244194031,
            0.9980591535568237,
            0.9980355501174927,
            0.9977930784225464,
            0.9979376792907715,
            0.9965482354164124,
            0.9979472160339355,
            0.9980016946792603,
            0.9975482821464539,
            0.9979459047317505,
            0.9950194954872131,
            0.9976023435592651,
            0.9978866577148438,
            0.9978786110877991,
            0.9976903200149536,
            0.9980286359786987,
            0.9980159401893616,
            0.9973689913749695,
            0.9951883554458618
        ]
    },
    "3916": {
        "similarity": 0.9958696961402893,
        "body": "    n = int(input())\n    k = list(map(int, input().split()))\n    fact = [1] * 5002\n    for i in range(2, 5001):\n        if i % 2 == 0:\n            fact[i] = fact[i-1]\n        else:\n            fact[i] = i * fact[i-1]\n    dp = {i: k.count(i) for i in set(k)}\n    ans = sum(dp[i] * (fact[max(k)] // fact[i]) for i in dp)\n    print(ans)\n\nmin_path_sum()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913192391395569,
            0.9951789379119873,
            0.9946837425231934,
            0.995267391204834,
            0.9950494170188904,
            0.993547260761261,
            0.9958696961402893,
            0.9956009387969971,
            0.9913673400878906,
            0.9951064586639404,
            0.9955686330795288,
            0.9899438619613647,
            0.9914632439613342,
            0.9949662089347839,
            0.9938696026802063,
            0.9950336813926697,
            0.9879531860351562,
            0.9877479076385498,
            0.992161214351654,
            0.9953898191452026
        ]
    },
    "3195": {
        "similarity": 0.9953458905220032,
        "body": "T_g, T_y, T_r = map(int, input().split())\nn = int(input())\nobs = []\nfor _ in range(n):\n    t, c = input().split()\n    obs.append((int(t), c))\nt_q, c_q = input().split()\n\ncycle_len = T_g + T_y + T_r\npossible_T = set(range(cycle_len))  # possible start times of the cycle\n\n# Eliminate impossible T based on observations\nfor t, c in obs:\n    if c == 'green':\n        possible_T &= set(range(t, t+T_g))\n    elif c == 'yellow':\n        possible_T &= set(range(t-T_g, t-T_g+T_y))\n    elif c == 'red':\n        possible_T &= set(range(t-T_g-T_y, t-T_g))\n\nprob = sum(1 for T in possible_T if t_q - T >= 0 and (t_q - T) % cycle_len < T_r) / len(possible_T)\nprint(prob)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948295950889587,
            0.990588366985321,
            0.9936115741729736,
            0.9929172396659851,
            0.9918650388717651,
            0.9940444827079773,
            0.9951579570770264,
            0.9919285178184509,
            0.994166910648346,
            0.9932529926300049,
            0.9945591688156128,
            0.9931159019470215,
            0.988612711429596,
            0.9941796064376831,
            0.9937700033187866,
            0.9953458905220032,
            0.9946553111076355,
            0.9953316450119019,
            0.9929680228233337,
            0.991648256778717
        ]
    },
    "3998": {
        "similarity": 0.9962690472602844,
        "body": "n = int(input())\nratings = list(map(int, input().split()))\n\nmax_rating = max(ratings)\nfor i in range(n):\n    ratings[i] -= max_rating - ratings[i]\n\ntarget = sum(ratings) // n\n\nmatches = []\nwhile True:\n    losing_team = [i for i in range(n) if ratings[i] > target]\n    if not losing_team:\n        break\n    matches.append('1' * len(losing_team))\n    for i in losing_team:\n        ratings[i] -= 1\n    ratings.sort(reverse=True)\n\nprint(target)\nprint(len(matches))\nfor match in matches:\n    print(match)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956546425819397,
            0.9916793704032898,
            0.99334317445755,
            0.9956679940223694,
            0.9817185997962952,
            0.9954836964607239,
            0.9957485198974609,
            0.9962690472602844,
            0.9953100085258484,
            0.9961769580841064,
            0.994964599609375,
            0.9951123595237732,
            0.9944660663604736,
            0.9919845461845398,
            0.9948126077651978,
            0.9937878847122192,
            0.9955039024353027,
            0.9961317777633667,
            0.9954481720924377,
            0.9932053089141846
        ]
    },
    "3150": {
        "similarity": 0.9944223165512085,
        "body": "n = int(input())\ntrenches = [list(map(int, input().split())) for _ in range(n)]\n    x1, y1, x2, y2 = trench1\n    a, b, c, d = trench2\n    if (x1 == x2 and a <= x1 <= c) or (y1 == y2 and b <= y1 <= d):\n        return False\n    elif (a <= x1 <= c and b <= y1 <= d) or (b <= x1 <= d and a <= y1 <= c):\n        return True\n    else:\n        return False\n    guards = [0, 0]\n    for trench in trenches:\n        if can_see(guards[0], trench) and can_see(guards[1], trench):\n            guards.append(trench)\n        elif not guards:\n            guards.append(trench)\n    return len(guards) == 3\nprint(sum(can_place_guards([trenches[i:j] for i in range(n) for j in range(i+1, n+1)])))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930956959724426,
            0.9889655709266663,
            0.9903342723846436,
            0.9915283918380737,
            0.9925691485404968,
            0.9931992888450623,
            0.9942812919616699,
            0.9934344291687012,
            0.9938679933547974,
            0.9934020042419434,
            0.9919977784156799,
            0.994064450263977,
            0.9932145476341248,
            0.9839133024215698,
            0.9936662316322327,
            0.9832944273948669,
            0.9865770936012268,
            0.9944223165512085,
            0.9921616315841675,
            0.9881628155708313
        ]
    },
    "3566": {
        "similarity": 0.9961743950843811,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    for _ in range(q):\n        i, x = map(int, input().split())\n        a[i] = x\n        left, right = sum(a[:i]), sum(a[i+1:])\n        if abs(left - right) <= 1:\n            print(i)\n        elif left < right:\n            print(i + (right - left) // 2)\n        else:\n            print(n - i + (left - right) // 2)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961743950843811,
            0.9957578778266907,
            0.9959919452667236,
            0.9948155283927917,
            0.992867112159729,
            0.9961000084877014,
            0.9960927367210388,
            0.993896484375,
            0.9961090087890625,
            0.9954553246498108,
            0.9926422834396362,
            0.9957867860794067,
            0.9951101541519165,
            0.9957546591758728,
            0.9919453859329224,
            0.995042622089386,
            0.9945601224899292,
            0.9958879351615906,
            0.9959532022476196,
            0.9953970909118652
        ]
    },
    "3401": {
        "similarity": 0.9946216940879822,
        "body": "import sys\n\n    n, s, t, q = map(int, sys.stdin.readline().split())\n    hills = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    springs = list(map(lambda x: hills[x-1], map(int, sys.stdin.readline().split())))\n    towns = list(map(lambda x: hills[x-1], map(int, sys.stdin.readline().split())))\n    max_len = q\n    total_dist = 0\n\n    for town in towns:\n        found = False\n        for spring in springs:\n            if town[2] > spring[2]:\n                dist = abs(town[0] - spring[0]) + abs(town[1] - spring[1])\n                if dist <= max_len:\n                    total_dist += dist\n                    found = True\n                    break\n\n    print(total_dist) if found else print(\"IMPOSSIBLE\")\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9901868104934692,
            0.9936283826828003,
            0.9935698509216309,
            0.9918651580810547,
            0.9938051104545593,
            0.9944859743118286,
            0.9943322539329529,
            0.9943630695343018,
            0.9946216940879822,
            0.9839679598808289,
            0.9941232800483704,
            0.9934414625167847,
            0.9936164021492004,
            0.9939236044883728,
            0.9935484528541565,
            0.9924477338790894,
            0.9940732717514038,
            0.9923346638679504,
            0.9942293763160706,
            0.9923276305198669
        ]
    },
    "3660": {
        "similarity": 0.9947531819343567,
        "body": "    message = input().strip()\n    n = int(input())\n    stickers = [tuple(input().split()) for _ in range(n)]\n    dp = [[float('inf')] * (len(message) + 1) for _ in range(3)]\n    dp[0][0] = 0\n    for i in range(len(message)):\n        for j in range(i + 1):\n            for word, price in stickers:\n                if j < len(word) and message[i - j:i - j + len(word)] == word:\n                    dp[j % 3][i + 1] = min(dp[j % 3][i + 1], dp[(j - 1) % 3][i] + price)\n    print(min(dp[0][-1], float('inf')) if dp[0][-1] < float('inf') else 'IMPOSSIBLE')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916980266571045,
            0.9937402606010437,
            0.9808195233345032,
            0.9947531819343567,
            0.9815088510513306,
            0.9925400614738464,
            0.992249071598053,
            0.9943464994430542,
            0.9888399243354797,
            0.9931606650352478,
            0.9945722818374634,
            0.9864968061447144,
            0.9945181608200073,
            0.9932927489280701,
            0.9942290782928467,
            0.9940758943557739,
            0.9931343793869019,
            0.9883037209510803,
            0.9931442737579346,
            0.9906308054924011
        ]
    },
    "3721": {
        "similarity": 0.9940894246101379,
        "body": "n, m, q = map(int, input().split())\nelements = {tuple(map(int, input().split())) for _ in range(q)}\nmin_purchase = 0\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if (i, j) not in elements:\n            min_purchase += 1\n            break\nprint(min_purchase)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930902123451233,
            0.9914403557777405,
            0.9918221235275269,
            0.9922824501991272,
            0.9926239848136902,
            0.9868112206459045,
            0.9918443560600281,
            0.988798975944519,
            0.9869164228439331,
            0.9878953695297241,
            0.9880976676940918,
            0.990737795829773,
            0.9877192974090576,
            0.9914112091064453,
            0.9940894246101379,
            0.9926834106445312,
            0.9906746745109558,
            0.9864305257797241,
            0.9935545921325684,
            0.99017333984375
        ]
    },
    "3811": {
        "similarity": 0.9942202568054199,
        "body": "        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(input())\n    pairs = [list(map(int, input().split())) for _ in range(n)]\n\n    max_gcd = 0\n    factors = set()\n    for a, b in pairs:\n        g = gcd(a, b)\n        max_gcd = max(max_gcd, g)\n        factors |= {x for x in range(2, int(g ** 0.5) + 1) if not g % x}\n\n    for f in factors:\n        if all(f % a == 0 or f % b == 0 for a, b in pairs):\n            print(f)\n            return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    weakened_common_divisor()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993346095085144,
            0.9910938143730164,
            0.9924304485321045,
            0.9857894778251648,
            0.9865837097167969,
            0.9937902688980103,
            0.989663302898407,
            0.9908617734909058,
            0.987136960029602,
            0.9942202568054199,
            0.9847573041915894,
            0.9891068339347839,
            0.9883500337600708,
            0.9932029247283936,
            0.9860468506813049,
            0.9848230481147766,
            0.9940938353538513,
            0.9926769733428955,
            0.994134783744812,
            0.9932344555854797
        ]
    },
    "3528": {
        "similarity": 0.9967074990272522,
        "body": "    n = int(input())\n    nails = [tuple(map(int, input().split())) for _ in range(n)]\n    directions = input()\n    areas = []\n    remaining_nails = set(range(1, n+1))\n    while len(remaining_nails) > 2:\n        picked_nail = nails[remaining_nails.pop()]\n        if directions[-1] == 'L':\n            other_nail = min((n[0], picked_nail[1]) for n in nails if n != picked_nail)\n        elif directions[-1] == 'R':\n            other_nail = max((n[0], picked_nail[1]) for n in nails if n != picked_nail)\n        elif directions[-1] == 'U':\n            other_nail = max((picked_nail[0], n[1]) for n in nails if n != picked_nail)\n        else:\n            other_nail = min((picked_nail[0], n[1]) for n in nails if n != picked_nail)\n        area = abs(picked_nail[0] - other_nail[0]) * abs(picked_nail[1] - other_nail[1])\n        areas.append(area)\n        directions.pop()\n    print('\\n'.join(map(str, areas)))\ncalculate_areas()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963868856430054,
            0.9938949942588806,
            0.9961995482444763,
            0.9948872923851013,
            0.9955022931098938,
            0.9937866926193237,
            0.9956201314926147,
            0.9956507682800293,
            0.9955390095710754,
            0.9950575828552246,
            0.9963377118110657,
            0.9966521263122559,
            0.9961660504341125,
            0.9953529834747314,
            0.9967074990272522,
            0.9942692518234253,
            0.9952502846717834,
            0.9945162534713745,
            0.9931600689888,
            0.9948007464408875
        ]
    },
    "3890": {
        "similarity": 0.9963527321815491,
        "body": "    mod = 10**9 + 7\n    n, k = map(int, input().split())\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(min(i, k)):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963527321815491,
            0.9954654574394226,
            0.9949938058853149,
            0.9890823364257812,
            0.9932705760002136,
            0.9959399700164795,
            0.9959128499031067,
            0.9944964051246643,
            0.996118426322937,
            0.9952834248542786,
            0.9942813515663147,
            0.9936710000038147,
            0.9950957298278809,
            0.9949302673339844,
            0.9946359395980835,
            0.9902209043502808,
            0.9934271574020386,
            0.9953392744064331,
            0.9958536028862,
            0.9921186566352844
        ]
    },
    "3534": {
        "similarity": 0.9945976734161377,
        "body": "N = int(input())\narr = list(map(int, input().split()))\n\nmax_count = 0\nK = 0\n\nfor k in range(N):\n    count = 0\n    prev = arr[0]\n    for i in range(1, N):\n        if arr[i] > prev:\n            diff = arr[i] - prev\n            K = max(K, min(diff, diff // 2))\n            count += (diff % 2 == 0)\n        elif arr[i] < prev:\n            diff = prev - arr[i]\n            K = max(K, min(diff, diff // 2))\n            count += (diff % 2 == 1)\n        else:\n            count += 1\n    max_count = max(max_count, count)\n\nprint(max_count)\nprint(K)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9880037903785706,
            0.992451548576355,
            0.9938966631889343,
            0.992967426776886,
            0.992305338382721,
            0.9945976734161377,
            0.990696370601654,
            0.98759925365448,
            0.9939557313919067,
            0.9862946271896362,
            0.9935515522956848,
            0.9893985390663147,
            0.9885585308074951,
            0.9917204976081848,
            0.9900110960006714,
            0.9937061667442322,
            0.9943711161613464,
            0.9939425587654114,
            0.9922121167182922,
            0.9932300448417664
        ]
    },
    "3371": {
        "similarity": 0.9967530965805054,
        "body": "n, c = map(int, input().split())\nencounters = {tuple(sorted(map(int, input().split()))) for _ in range(c)}\npossible = False\nfor y in range(1948, 2008):\n    group_a, group_b = set(), set()\n    for e in encounters:\n        if encounters[e] <= y:\n            group_a.add(e[0])\n            group_a.add(e[1])\n        else:\n            group_b.add(e[0])\n            group_b.add(e[1])\n    if len(group_a) <= 2 * n // 3 and len(group_b) <= 2 * n // 3:\n        possible = True\n        print(y)\n        break\nif not possible:\n    print('Impossible')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962466359138489,
            0.99474036693573,
            0.996577799320221,
            0.9925848245620728,
            0.9957571625709534,
            0.9967077374458313,
            0.9953720569610596,
            0.9961511492729187,
            0.9947999715805054,
            0.9932451844215393,
            0.9956296682357788,
            0.9967530965805054,
            0.9952682852745056,
            0.996499240398407,
            0.9919053316116333,
            0.9954259991645813,
            0.996376633644104,
            0.9939347505569458,
            0.9944775104522705,
            0.9935823082923889
        ]
    },
    "3621": {
        "similarity": 0.9970225095748901,
        "body": "    mod = 10**9 + 7\n    n = int(input())\n    adj = [list(map(int, input().split())) for _ in range(n)]\n    f = [[0] * (n+1) for _ in range(2 ** n)]\n    for S in range(2 ** n):\n        for node in range(n):\n            if (S >> node) & 1:\n                f[S][node] = max(f[S - (1 << node)][node], f[S][node])\n        for u in range(n):\n            for v in range(u+1, n):\n                if adj[u][v]:\n                    f[S | (1 << u)][v] += f[S][u]\n    return sum(f[i][n-1] for i in range(2 ** n)) % mod\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950295686721802,
            0.996483564376831,
            0.9939828515052795,
            0.9948828816413879,
            0.9967488646507263,
            0.9970225095748901,
            0.99423748254776,
            0.9966223835945129,
            0.9965272545814514,
            0.9965067505836487,
            0.9946961998939514,
            0.9942094683647156,
            0.9942823648452759,
            0.9949834942817688,
            0.9964002370834351,
            0.9955133199691772,
            0.9960036277770996,
            0.9965003132820129,
            0.9944455027580261,
            0.9966562986373901
        ]
    },
    "3392": {
        "similarity": 0.9969637989997864,
        "body": "    heights = [[int(j) for j in input().split()] for _ in range(n)]\n    growths = [[int(j) for j in input().split()] for _ in range(n)]\n\n    visited = [[False] * n for _ in range(n)]\n    max_size = 0\n\n        nonlocal max_size\n        if i < 0 or i >= n or j < 0 or j >= n or visited[i][j] or heights[i][j] != h:\n            return\n        visited[i][j] = True\n        max_size = max(max_size, 1)\n        dfs(i-1, j, h+growths[i][j])\n        dfs(i+1, j, h+growths[i][j])\n        dfs(i, j-1, h+growths[i][j])\n        dfs(i, j+1, h+growths[i][j])\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, heights[i][j])\n\n    print(max_size)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968422651290894,
            0.99652498960495,
            0.99602872133255,
            0.9966304302215576,
            0.9961082935333252,
            0.9964490532875061,
            0.996367335319519,
            0.9954492449760437,
            0.992706298828125,
            0.9967944622039795,
            0.9969580769538879,
            0.9950724244117737,
            0.9967055916786194,
            0.9965795278549194,
            0.9968767762184143,
            0.9969637989997864,
            0.9962777495384216,
            0.9955824613571167,
            0.9951876401901245,
            0.9948025941848755
        ]
    },
    "3095": {
        "similarity": 0.996741533279419,
        "body": "R, S = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(R)]\n\n    return A[0][0] + A[r-1][c-1] <= A[0][c-1] + A[r-1][0]\n\nmax_elements = 0\nfor r in range(2, R+1):\n    for s in range(2, S+1):\n        if all(is_cool(i, j) for i in range(r) for j in range(s)):\n            max_elements = max(max_elements, (r-1)*(s-1))\n\nprint(max_elements)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958716034889221,
            0.9938558340072632,
            0.9953191876411438,
            0.9965934753417969,
            0.9960802793502808,
            0.9957168102264404,
            0.996741533279419,
            0.996500551700592,
            0.9949154257774353,
            0.994380533695221,
            0.9963846802711487,
            0.995975911617279,
            0.9946648478507996,
            0.9965716004371643,
            0.995871901512146,
            0.995631992816925,
            0.9966146349906921,
            0.9967021942138672,
            0.9959762096405029,
            0.9960783123970032
        ]
    },
    "3769": {
        "similarity": 0.9960305094718933,
        "body": "MOD = 10**9 + 7\n\np, k = map(int, input().split())\nif k == 0:\n    print(p % MOD)\nelse:\n    print((pow(k, p - 2, MOD) * pow(2, p - 1, MOD)) % MOD)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9905420541763306,
            0.9948802590370178,
            0.9871014952659607,
            0.9941273927688599,
            0.9935506582260132,
            0.995529294013977,
            0.9953020811080933,
            0.9949211478233337,
            0.9951355457305908,
            0.994581937789917,
            0.9939943552017212,
            0.9958668947219849,
            0.995684802532196,
            0.9948756694793701,
            0.994828462600708,
            0.9948294758796692,
            0.9950900077819824,
            0.995641827583313,
            0.9953516125679016,
            0.9960305094718933
        ]
    },
    "3563": {
        "similarity": 0.9939755797386169,
        "body": "    n = int(input())\n    holes = list(map(int, input().split()))\n    x, y = zip(*[holes[i:i+2] for i in range(0, len(holes), 2)])\n        return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])\n    hull = [holes[:2]]\n    for h in holes[2:]:\n        while len(hull) > 1 and cross(hull[-2], hull[-1], h) <= 0:\n            hull.pop()\n        hull.append(h)\n    print(len(hull))\nconvex_hull(None)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9857849478721619,
            0.9920611381530762,
            0.9939755797386169,
            0.9910621643066406,
            0.9911980032920837,
            0.9937202334403992,
            0.9935451149940491,
            0.9847765564918518,
            0.9933333396911621,
            0.9928112030029297,
            0.9935917258262634,
            0.9926773905754089,
            0.9908527731895447,
            0.9916733503341675,
            0.9894927144050598,
            0.9891889691352844,
            0.9933905601501465,
            0.9926633238792419,
            0.9931513071060181,
            0.9923564791679382
        ]
    },
    "3618": {
        "similarity": 0.990435779094696,
        "body": "    mod = 998244353\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = ((dp[i - 1] << 1) % mod + dp[i - 2]) % mod\n    print(dp[n])\ncount_best_friend_pairs(int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9859340190887451,
            0.9898622632026672,
            0.9850608706474304,
            0.9892708659172058,
            0.9883322715759277,
            0.983375072479248,
            0.9874496459960938,
            0.9751243591308594,
            0.9762641787528992,
            0.9848197102546692,
            0.9774841666221619,
            0.9877917766571045,
            0.9838287830352783,
            0.9784136414527893,
            0.990435779094696,
            0.9868884086608887,
            0.9681249260902405,
            0.9760158061981201,
            0.9884423017501831,
            0.9875245690345764
        ]
    },
    "3830": {
        "similarity": 0.9927818179130554,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        if '-' not in s:\n            print(n)\n            continue\n        cnt, prev, curr = 0, None, ''\n        for i in range(n):\n            curr += s[i]\n            if len(curr) > 1 and curr[-2] != curr[-1]:\n                cnt += 1\n                prev = curr[::-1]\n                curr = ''\n        print(cnt + (curr == prev))\n\ncount_returnable_rooms()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9877731800079346,
            0.9874259829521179,
            0.9899384379386902,
            0.9912952780723572,
            0.9920419454574585,
            0.9911601543426514,
            0.990544855594635,
            0.9901171326637268,
            0.9587610363960266,
            0.9881266355514526,
            0.9927818179130554,
            0.9891048073768616,
            0.9885363578796387,
            0.9908178448677063,
            0.9856737852096558,
            0.9875147938728333,
            0.9873504638671875,
            0.99038165807724,
            0.9871202111244202,
            0.9892796874046326
        ]
    },
    "3912": {
        "similarity": 0.9942052960395813,
        "body": "    n = int(input())\n    s = input()\n    counts = [0] * 26\n    for c in s:\n        counts[ord(c) - ord('a')] += 1\n    mid, odd = divmod(n, 2)\n    if odd:\n        mid += 1\n    res = []\n    for i in range(mid):\n        half = []\n        for j in range(26):\n            while counts[j] > 0 and len(half) < (mid + 1) // 2:\n                half.append(chr(j + ord('a')))\n                counts[j] -= 1\n        res.append(''.join(half[::-1] if i % 2 else half))\n    print(len(res))\n    print(*res)\n\nif __name__ == \"__main__\":\n    min_palindrome_parts()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920947551727295,
            0.9611839652061462,
            0.9913416504859924,
            0.9856874346733093,
            0.9920945763587952,
            0.9924784302711487,
            0.9921541810035706,
            0.9942052960395813,
            0.9936420917510986,
            0.9920715689659119,
            0.992881178855896,
            0.9899492859840393,
            0.9878624677658081,
            0.9939152598381042,
            0.9928333759307861,
            0.9887112975120544,
            0.9929617047309875,
            0.9883553385734558,
            0.9934767484664917,
            0.9934923052787781
        ]
    },
    "3878": {
        "similarity": 0.9978313446044922,
        "body": "    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    steps = []\n    visited = [False] * (n + 1)\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n                steps.append(neighbor)\n\n    dfs(1)\n    print(len(steps))\n    print(*steps)\n\nsolve(int(input()), int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950015544891357,
            0.9972259998321533,
            0.997505784034729,
            0.9942275881767273,
            0.9967107176780701,
            0.9962749481201172,
            0.9971502423286438,
            0.9973848462104797,
            0.994468092918396,
            0.9969503283500671,
            0.9970470070838928,
            0.9974377155303955,
            0.9976388812065125,
            0.9973402619361877,
            0.9976629018783569,
            0.9974698424339294,
            0.995185375213623,
            0.9948691129684448,
            0.9978313446044922,
            0.9948856830596924
        ]
    },
    "3010": {
        "similarity": 0.9970570802688599,
        "body": "    intersections = set()\n    for _ in range(int(input())):\n        x0, y0, x1, y1 = map(int, input().split())\n        dx, dy = x1 - x0, y1 - y0\n        if dx == 0:\n            intersections.update(range(min(y0, y1), max(y0, y1) + 1))\n        elif dy == 0:\n            intersections.update(range(min(x0, x1), max(x0, x1) + 1))\n        else:\n            slope = dy / dx\n            midpoint = (x0 + x1) // 2, (y0 + y1) // 2\n            intersections.add((midpoint[0], midpoint[1] * slope))\n    print(len(intersections))\n\nif __name__ == '__main__':\n    count_intersections()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940237998962402,
            0.9962973594665527,
            0.996082603931427,
            0.9962124228477478,
            0.9894363284111023,
            0.9957693815231323,
            0.9966467022895813,
            0.9963111877441406,
            0.9926763772964478,
            0.9967557191848755,
            0.9953557848930359,
            0.9963613152503967,
            0.9937154054641724,
            0.9949058890342712,
            0.9970570802688599,
            0.9957149028778076,
            0.9964824318885803,
            0.9967100024223328,
            0.9966992735862732,
            0.9953336119651794
        ]
    },
    "3068": {
        "similarity": 0.9944714307785034,
        "body": "from itertools import combinations\n\n    N = int(input())\n    investigations = [input().split() for _ in range(N)]\n    suspects = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    solutions = []\n    for combo in combinations(suspects, 3):\n        valid = True\n        for susp1, susp2, reply, player in investigations:\n            susp1, susp2 = sorted([susp1, susp2])\n            if susp1 in combo and susp2 in combo and int(reply) != 2:\n                valid = False\n                break\n            elif susp1 not in combo and susp2 in combo and int(reply) == 0:\n                valid = False\n                break\n            elif susp1 in combo and susp2 not in combo and int(reply) == 1:\n                valid = False\n                break\n        if valid:\n            solutions.append(combo)\n    print(len(set(map(tuple, solutions))))\n\ncount_admissible_solutions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9804840087890625,
            0.9888426065444946,
            0.9933773875236511,
            0.9915779829025269,
            0.992509126663208,
            0.9930572509765625,
            0.9923444986343384,
            0.9909712076187134,
            0.9922020435333252,
            0.994351863861084,
            0.9937698245048523,
            0.9927209615707397,
            0.9939168691635132,
            0.9938185811042786,
            0.991080641746521,
            0.9922909140586853,
            0.9944714307785034,
            0.9923993349075317,
            0.9916728138923645,
            0.9911425709724426
        ]
    },
    "3030": {
        "similarity": 0.9956985116004944,
        "body": "n = int(input())\nvals = [0] + list(map(int, input().split()) for _ in range(n))\npar = [0] + list(map(int, input().split()) for _ in range(n))\n\n    max_val = vals[node]\n    for child in range(1, node):\n        if par[child] == node:\n            max_val = max(max_val, dfs(child))\n    return max_val\n\nprint(dfs(1))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935034513473511,
            0.9950779676437378,
            0.9941149353981018,
            0.9929219484329224,
            0.9949266314506531,
            0.994951069355011,
            0.9945389628410339,
            0.988835871219635,
            0.9953400492668152,
            0.9948740601539612,
            0.9912298321723938,
            0.9954376220703125,
            0.9955030679702759,
            0.9954034686088562,
            0.9923151731491089,
            0.9936404824256897,
            0.9948237538337708,
            0.9914355278015137,
            0.993793785572052,
            0.9956985116004944
        ]
    },
    "3630": {
        "similarity": 0.9946682453155518,
        "body": "s1, s2 = map(str, input().split())\nmoves = 0\nfor c1, c2 in zip(s1, s2):\n    if c1 != c2:\n        if ord(c1) - ord(c2) > 0:\n            moves += (ord(c1) - ord(c2))\n        else:\n            moves += (ord(c2) - ord(c1))\nprint(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928428530693054,
            0.9944952130317688,
            0.9934638142585754,
            0.9937089681625366,
            0.9735546112060547,
            0.9866161346435547,
            0.9943450093269348,
            0.9904704689979553,
            0.9943912029266357,
            0.9934219717979431,
            0.9872422814369202,
            0.9882892966270447,
            0.9902899861335754,
            0.9772493243217468,
            0.9913438558578491,
            0.994019091129303,
            0.9943307638168335,
            0.992863118648529,
            0.9946682453155518,
            0.9940920472145081
        ]
    },
    "3133": {
        "similarity": 0.9968119263648987,
        "body": "n, A, B = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor i in range(n):\n    l, r, t = map(int, input().split())\n    graph[i].append((l, 0))\n    graph[i].append((r, 1))\n\nseen = set()\n    if node == A or node == B:\n        return turn\n    seen.add(node)\n    for next_node, direction in graph[node]:\n        if direction != turn and next_node not in seen:\n            result = dfs(next_node, 1 - turn)\n            if result is not None:\n                return result\n\nresult = dfs(B, 0) if dfs(A, 0) is None else dfs(A, 0)\nprint(\"indistinguishable\" if result is None else result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968119263648987,
            0.9921082854270935,
            0.9964621663093567,
            0.9960778951644897,
            0.9923689961433411,
            0.9967922568321228,
            0.9967126250267029,
            0.9952153563499451,
            0.9934728741645813,
            0.9952486157417297,
            0.9955434203147888,
            0.9965001940727234,
            0.9962567090988159,
            0.9953411817550659,
            0.9941591024398804,
            0.9953227043151855,
            0.9963220357894897,
            0.9954719543457031,
            0.994190514087677,
            0.9957683086395264
        ]
    },
    "3480": {
        "similarity": 0.9965303540229797,
        "body": "    L, D = map(int, input().split())\n    for _ in range(L):\n        lyrics, durations = input(), list(map(int, input().split()))\n        first_voice = lyrics.replace(' ', '_') + ' '\n        second_voice = []\n        start_time = 0\n        for i, duration in enumerate(durations):\n            if start_time >= D:\n                second_voice.append(lyrics[i] + '_' * max(0, start_time - D))\n            start_time += duration\n        print(first_voice)\n        print('_' * len(first_voice.strip()) if not second_voice else ''.join(second_voice))\n\nround_song()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995906412601471,
            0.9961742758750916,
            0.9945085644721985,
            0.99542635679245,
            0.9949230551719666,
            0.9964231252670288,
            0.9964141845703125,
            0.9954988360404968,
            0.9951918721199036,
            0.9954095482826233,
            0.9955769777297974,
            0.9945012331008911,
            0.9965303540229797,
            0.9954621195793152,
            0.9933379292488098,
            0.9948150515556335,
            0.9949979186058044,
            0.9960068464279175,
            0.9962140321731567,
            0.9962260723114014
        ]
    },
    "3389": {
        "similarity": 0.9958323240280151,
        "body": "n, k = map(int, input().split())\ns = input()\nclicks = 1\ni = 0\nwhile i < n:\n    type = s[i]\n    while i < n and s[i] == type:\n        i += 1\n    clicks += 1 if i < n and s[i] != type else 0\nprint(clicks)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909082651138306,
            0.9956685304641724,
            0.9951830506324768,
            0.995582103729248,
            0.9939965009689331,
            0.9894827008247375,
            0.9952157735824585,
            0.9947763085365295,
            0.9898079633712769,
            0.9919564127922058,
            0.9943028688430786,
            0.9955053925514221,
            0.9904462099075317,
            0.9952841401100159,
            0.9888449311256409,
            0.9935422539710999,
            0.9937983155250549,
            0.9958323240280151,
            0.9916666746139526,
            0.9930341839790344
        ]
    },
    "3925": {
        "similarity": 0.9968852996826172,
        "body": "s = input()\nmax_length = 0\ncurrent_length = 1\nfor i in range(1, len(s)):\n    if s[i] == s[i-1]:\n        current_length += 1\n    else:\n        max_length = max(max_length, current_length)\n        current_length = 1\nmax_length = max(max_length, current_length)\nprint(max_length)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968263506889343,
            0.9887912273406982,
            0.9950183033943176,
            0.9965201020240784,
            0.9950262308120728,
            0.9955853819847107,
            0.9968263506889343,
            0.9949079751968384,
            0.9960260987281799,
            0.9961104393005371,
            0.9952529072761536,
            0.9907041192054749,
            0.9968490600585938,
            0.9962557554244995,
            0.9915488362312317,
            0.9968852996826172,
            0.9960473775863647,
            0.9954436421394348,
            0.9968276023864746,
            0.9950680136680603
        ]
    },
    "3700": {
        "similarity": 0.9938428997993469,
        "body": "    return min(k-1, n) - max(2, k-n)\n\nn, k = map(int, input().split())\nprint(count_pairs(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927785992622375,
            0.9932782053947449,
            0.9929322600364685,
            0.9894196391105652,
            0.98907870054245,
            0.9855814576148987,
            0.9900619983673096,
            0.9868589043617249,
            0.9673343300819397,
            0.9922814965248108,
            0.9876082539558411,
            0.9935188293457031,
            0.993800699710846,
            0.9938428997993469,
            0.9923167824745178,
            0.9924896955490112,
            0.9914635419845581,
            0.993828535079956,
            0.9895981550216675,
            0.9907921552658081
        ]
    },
    "3944": {
        "similarity": 0.9910191893577576,
        "body": "    mod = 10**9 + 7\n    return ((3**(n+m)) * pow(2*m+1+k, mod-2, mod)) % mod\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    print(count_patterns(n, m, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9898508787155151,
            0.9796741008758545,
            0.9894636273384094,
            0.9906359314918518,
            0.9899444580078125,
            0.9781075716018677,
            0.9899112582206726,
            0.9861412048339844,
            0.9894272685050964,
            0.9810531139373779,
            0.9907028079032898,
            0.9845943450927734,
            0.9900884032249451,
            0.982863187789917,
            0.9865762591362,
            0.9906379580497742,
            0.9900673627853394,
            0.9877862334251404,
            0.9887946248054504,
            0.9910191893577576
        ]
    },
    "3821": {
        "similarity": 0.9948338866233826,
        "body": "n = int(input())\nprobs = list(map(float, input().split()))\nmax_prob = max(probs)\nprint(max_prob * (1 - sum(probs[:-1])) + (1 - max_prob) * sum(probs[1:]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917932152748108,
            0.9835283160209656,
            0.9945945739746094,
            0.9947063326835632,
            0.9934598803520203,
            0.9946588277816772,
            0.9936373829841614,
            0.9932938814163208,
            0.9941276907920837,
            0.9933172464370728,
            0.9948338866233826,
            0.9851823449134827,
            0.984771728515625,
            0.9946761131286621,
            0.994425356388092,
            0.9944747090339661,
            0.9940196871757507,
            0.9854397177696228,
            0.9930031299591064,
            0.9943872094154358
        ]
    },
    "3667": {
        "similarity": 0.996945858001709,
        "body": "w, p = map(int, input().split())\nwells = [tuple(map(int, input().split())) for _ in range(w)]\npipes = []\nfor _ in range(p):\n    s, x, y = map(int, input().split())\n    pipes.append((s-1, (x, y)))\n\n    graph = [[] for _ in range(w)]\n    for s, (x, y) in pipes:\n        graph[s].append((x, y))\n\n    visited = [False] * w\n    intersections = set()\n        if visited[node]:\n            return False\n        visited[node] = True\n        for neighbor in graph[node]:\n            if neighbor not in intersections and neighbor != node:\n                intersections.add(neighbor)\n                if not dfs(graph[node].index(neighbor)):\n                    return False\n        return True\n\n    for i in range(w):\n        if not dfs(i):\n            return False\n\n    print(\"possible\")\n    return True\n\nclean_pipes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950910806655884,
            0.996945858001709,
            0.9964865446090698,
            0.9948974251747131,
            0.9932640790939331,
            0.9952484965324402,
            0.996146559715271,
            0.9920191764831543,
            0.9944354891777039,
            0.9952410459518433,
            0.9956175088882446,
            0.9933227896690369,
            0.9954743981361389,
            0.9957243204116821,
            0.9951466917991638,
            0.994655430316925,
            0.9945829510688782,
            0.9963725209236145,
            0.9935437440872192,
            0.9945533275604248
        ]
    },
    "3959": {
        "similarity": 0.9960740804672241,
        "body": "MOD = 10**9 + 7\n\nn, m = map(int, input().split())\ngyms = [list(map(int, input().split()))[1:] for _ in range(n)]\n\ntypes = [[] for _ in range(m)]\nfor gym in gyms:\n    for t in gym:\n        types[t - 1].append(0)\n\nfor i in range(m):\n    types[i] = sorted(set(types[i]))\n\n    if i == m:\n        return 1\n    if used[i]:\n        return dfs(f, i + 1, used)\n    res = 0\n    for t in types[i]:\n        if not used[t]:\n            used[t] = True\n            f[i] = t\n            res += dfs(f, i + 1, used)\n            used[t] = False\n    return res\n\nprint(dfs([None] * m, 0, [False] * m) % MOD)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936426281929016,
            0.9930246472358704,
            0.9909148812294006,
            0.9944276213645935,
            0.9954813718795776,
            0.9927704334259033,
            0.9959596395492554,
            0.9955539703369141,
            0.9915696978569031,
            0.9953118562698364,
            0.9957689046859741,
            0.9927729368209839,
            0.9945553541183472,
            0.9951382875442505,
            0.9949710369110107,
            0.9941596984863281,
            0.9960740804672241,
            0.9938235878944397,
            0.9959942698478699,
            0.9913132190704346
        ]
    },
    "3692": {
        "similarity": 0.9949930906295776,
        "body": "    n = int(input())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n    regions = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if (circles[i][0]-circles[j][0])**2 + (circles[i][1]-circles[j][1])**2 <= (circles[i][2]+circles[j][2])**2:\n                regions += 1\n    print(regions)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940998554229736,
            0.9945363402366638,
            0.9937726855278015,
            0.9945587515830994,
            0.9891219139099121,
            0.9932624697685242,
            0.9935930371284485,
            0.9901068806648254,
            0.9949930906295776,
            0.9909172058105469,
            0.9920922517776489,
            0.9942223429679871,
            0.993999183177948,
            0.9909682273864746,
            0.9883729815483093,
            0.9942177534103394,
            0.9940797686576843,
            0.9800217151641846,
            0.994645357131958,
            0.9939818382263184
        ]
    },
    "3894": {
        "similarity": 0.9953356385231018,
        "body": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nwhile len(a) > 1:\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            break\n    else:\n        print(\"Kevin\")\nprint(\"Nicky\" if sum(a) == k else \"Kevin\")",
        "result": "timed out",
        "similarities": [
            0.9931098818778992,
            0.9927992820739746,
            0.9917241334915161,
            0.9932889342308044,
            0.9916154742240906,
            0.9870902895927429,
            0.99004065990448,
            0.9949022531509399,
            0.9947801232337952,
            0.9953356385231018,
            0.9900211691856384,
            0.9912887215614319,
            0.9942940473556519,
            0.9947541952133179,
            0.9944510459899902,
            0.9918875694274902,
            0.9937296509742737,
            0.9941489696502686,
            0.9945571422576904,
            0.9866116046905518
        ]
    },
    "3856": {
        "similarity": 0.9953494668006897,
        "body": "    n = int(input())\n    friends = [tuple(map(int, input().split())) for _ in range(n)]\n    friends.sort()\n    dp = [[float('inf')] * (n + 1) for _ in range(2)]\n    dp[0][0] = 0\n    max_h = 0\n    for i, (w, h) in enumerate(friends):\n        max_h = max(max_h, h)\n        if i < n // 2:\n            dp[(i + 1) % 2][i + 1] = min(dp[i % 2][i] + w * max_h, dp[(i + 1) % 2][i] + h * (max_h - h))\n        else:\n            dp[(i + 1) % 2][i + 1] = min(dp[i % 2][i] + w * max_h, float('inf'))\n    return min(min(row) for row in dp[n % 2])\n\nprint(min_area())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926573038101196,
            0.9939247965812683,
            0.9944419860839844,
            0.9942895770072937,
            0.9944189190864563,
            0.9939001202583313,
            0.9941290020942688,
            0.9920811057090759,
            0.9922143816947937,
            0.9942299723625183,
            0.9929620027542114,
            0.9953494668006897,
            0.9915099740028381,
            0.991832435131073,
            0.9836361408233643,
            0.9918447732925415,
            0.9909138083457947,
            0.9936541318893433,
            0.9944885969161987,
            0.9852712750434875
        ]
    },
    "3282": {
        "similarity": 0.996547520160675,
        "body": "P = int(input())\ncount, bills = 0, []\nfor i in range(1, P):\n    for j in range(i + 1, P - i):\n        if len(set(str(i) + str(j))) == len(str(P)):\n            count += 1\n            bills.append((i, j))\nprint(count)\nif count <= 5000:\n    print(*[(i, j) for i, j in bills], sep='\\n')\nelse:\n    print(*[(i, j) for i, j in bills[:5000]], sep='\\n')",
        "result": "timed out",
        "similarities": [
            0.996442973613739,
            0.9951927661895752,
            0.996547520160675,
            0.9963895678520203,
            0.9963308572769165,
            0.9949716329574585,
            0.9916004538536072,
            0.9958353638648987,
            0.9937407970428467,
            0.9951814413070679,
            0.9954922199249268,
            0.99382483959198,
            0.9959127306938171,
            0.9945510029792786,
            0.9953460693359375,
            0.9958285093307495,
            0.9949049949645996,
            0.9964507222175598,
            0.9942641854286194,
            0.9960610270500183
        ]
    },
    "3596": {
        "similarity": 0.9966468811035156,
        "body": "from math import gamma, erf, pi, sin, cos, factorial\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\nn, k, r, s, l = map(int, input().split())\n\n    return c * (t1 * gamma(x) + x ** (-t2 / t3) - J_k(k, x) ** t4)\n\n    return sum(f(i) / factorial(i) * x ** i for i in range(r + 1))\n\n    return sum(P_n(x, n - 1)(i) * x ** i for i in range(r + n + 1))\n\n    return diff(P_s(x), deg(P_s(x)) + 1)\n\nP_0 = P\nfor _ in range(n):\n    P_0 = P_n\n\ng_n = g(l)\nresult = ((g_n + l) ** 2 / (pi * e) + 1 / (l + 1))\nprint(f\"{result:.6f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958704710006714,
            0.9956555962562561,
            0.9956537485122681,
            0.9932100176811218,
            0.996163547039032,
            0.994587779045105,
            0.9963587522506714,
            0.9963005781173706,
            0.9825009107589722,
            0.996010422706604,
            0.9883614778518677,
            0.9958946108818054,
            0.9966468811035156,
            0.9944057464599609,
            0.9959154725074768,
            0.9960338473320007,
            0.9943815469741821,
            0.9960702657699585,
            0.996238112449646,
            0.9964169859886169
        ]
    },
    "3540": {
        "similarity": 0.9926599264144897,
        "body": "import sys\n\ngrid = [list(sys.stdin.readline().strip()) for _ in range(4)]\ntarget = ['R', 'G', 'B', 'Y']\ncost = 0\nfor i in range(4):\n    row, col = i, 0\n    while grid[row][col] != target[i]:\n        if col == 3:\n            grid[row].insert(0, grid[row].pop())\n        elif col == 0:\n            grid[row].append(grid[row].pop(0))\n        else:\n            grid[row] = [grid[row].pop(col)] + grid[row]\n        cost += 1\nprint(cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9710884094238281,
            0.9894413352012634,
            0.9883069396018982,
            0.9850425720214844,
            0.9870855212211609,
            0.9863407611846924,
            0.9918426871299744,
            0.9907841086387634,
            0.9913806915283203,
            0.9847061634063721,
            0.9926599264144897,
            0.988572895526886,
            0.988540768623352,
            0.9899048209190369,
            0.990270733833313,
            0.9913554191589355,
            0.9860888123512268,
            0.9920147657394409,
            0.991743266582489,
            0.9867929220199585
        ]
    },
    "3354": {
        "similarity": 0.9980340600013733,
        "body": "s, r, n, z = map(float, input().split())\narea_sandwich = s ** 2 * math.pi\narea_pickle = r ** 2 * math.pi\nmax_area = area_sandwich * (z / 100)\npickles = min(int(max_area / area_pickle), n)\nprint(pickles)",
        "result": "passed",
        "similarities": [
            0.9973163604736328,
            0.9976300001144409,
            0.9980340600013733,
            0.9976496696472168,
            0.9970607757568359,
            0.9976003766059875,
            0.9972981810569763,
            0.9978690147399902,
            0.9973576068878174,
            0.9972438812255859,
            0.9978471994400024,
            0.9972512125968933,
            0.9977453351020813,
            0.9975318908691406,
            0.9973046183586121,
            0.9971758127212524,
            0.9972330331802368,
            0.992716372013092,
            0.9975648522377014,
            0.9978424906730652
        ]
    },
    "3217": {
        "similarity": 0.9928799867630005,
        "body": "n = int(input())\ncoords = [tuple(map(int, input().split())) for _ in range(n)]\nmin_panels = 10 * 10 * 6  # Assume worst case scenario\n\nfor x in range(10):\n    for y in range(10):\n        for z in range(10):\n            if (x, y, z) in coords:\n                min_panels -= 2\n            else:\n                min_panels += 1\n\nprint(min_panels)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916912913322449,
            0.986987292766571,
            0.9873577952384949,
            0.9927926659584045,
            0.9871877431869507,
            0.9913507103919983,
            0.9888786673545837,
            0.992655336856842,
            0.9872739911079407,
            0.9820952415466309,
            0.9928799867630005,
            0.9893686175346375,
            0.9895902872085571,
            0.9850434064865112,
            0.9877835512161255,
            0.9849187731742859,
            0.9904404878616333,
            0.9911038279533386,
            0.9914249777793884,
            0.9883113503456116
        ]
    },
    "3520": {
        "similarity": 0.9968512654304504,
        "body": "    n, p, c = map(int, input().split())\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n\n    dp = [0] * (n + 1)\n    max_time = 0\n    for i in range(1, n + 1):\n        if i >= pills[0][0]:\n            dp[i] = max(dp[i - 1], dp[pills[0][2]] + pills[0][0])\n            max_time = max(max_time, dp[i])\n            pills.pop(0)\n        else:\n            dp[i] = dp[i - 1]\n    print(max_time + c)\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966737627983093,
            0.9957058429718018,
            0.9949387311935425,
            0.9946847558021545,
            0.9951035380363464,
            0.995991587638855,
            0.9935056567192078,
            0.9968512654304504,
            0.9941821694374084,
            0.9952352643013,
            0.9958012104034424,
            0.9955291748046875,
            0.9962941408157349,
            0.9953814148902893,
            0.9898731112480164,
            0.9968098998069763,
            0.9965635538101196,
            0.9936823844909668,
            0.9947683215141296,
            0.9966599345207214
        ]
    },
    "3475": {
        "similarity": 0.9968120455741882,
        "body": "t, n = map(int, input().split())\nmodes = [tuple(map(int, input().split())) for _ in range(t)]\npoints = [tuple(map(int, input().split())) for _ in range(n-1)]\n\n    total_dist = 0\n    prev_heading = points[i][1]\n    while i < n - 1:\n        dist, heading = points[i]\n        if abs(prev_heading - heading) > mode[1]:\n            return False\n        total_dist += dist\n        if total_dist >= mode[0]:\n            prev_heading = heading\n            i += 1\n        else:\n            break\n    return True\n\nmin_travels = float('inf')\nfor i in range(n-1):\n    for mode in modes:\n        if can_travel(mode, i):\n            min_travels = min(min_travels, 1 + (i > 0))\n\nprint(min_travels if min_travels != float('inf') else 'IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963679909706116,
            0.9945024251937866,
            0.996445894241333,
            0.9946159720420837,
            0.9937441945075989,
            0.9967544078826904,
            0.9968120455741882,
            0.9953746795654297,
            0.9960349202156067,
            0.9958014488220215,
            0.996657133102417,
            0.9960020780563354,
            0.9964539408683777,
            0.9958456158638,
            0.996437668800354,
            0.9947696328163147,
            0.9956823587417603,
            0.9950830340385437,
            0.9807008504867554,
            0.9967406392097473
        ]
    },
    "3977": {
        "similarity": 0.995753824710846,
        "body": "n, m, k = map(int, input().split())\nc = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u-1].append(v-1)\n    graph[v-1].append(u-1)\nvisited = [False] * n\nmax_edges = 0\n\n    global max_edges\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dfs(neighbor)\n        elif neighbor != node and c[node]-1 != c[neighbor]-1:\n            max_edges += 1\n\nfor node in range(n):\n    if not visited[node]:\n        dfs(node)\n\nprint(max_edges // 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993841290473938,
            0.9884952902793884,
            0.9938572645187378,
            0.9950258135795593,
            0.9941673278808594,
            0.995029628276825,
            0.995753824710846,
            0.9951844811439514,
            0.9937738180160522,
            0.9951990842819214,
            0.9883182048797607,
            0.9906255006790161,
            0.990888774394989,
            0.9900611042976379,
            0.9950789213180542,
            0.9942693114280701,
            0.9951143860816956,
            0.9951836466789246,
            0.9948107004165649,
            0.993230402469635
        ]
    },
    "3626": {
        "similarity": 0.9954888224601746,
        "body": "n = int(input())\nrects = [tuple(map(int, input().split())) for _ in range(n)]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if not ((rects[i][0] >= rects[j][2]) or (rects[i][2] <= rects[j][0]) or\n                (rects[i][1] >= rects[j][3]) or (rects[i][3] <= rects[j][1])):\n            print(1)\n            exit()\nprint(0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954888224601746,
            0.9951183199882507,
            0.9944460988044739,
            0.9905859231948853,
            0.9954466819763184,
            0.9923744201660156,
            0.9952276349067688,
            0.9934172630310059,
            0.9860041737556458,
            0.9952731728553772,
            0.9951508045196533,
            0.9911526441574097,
            0.9951358437538147,
            0.9888271689414978,
            0.9932038187980652,
            0.9951236248016357,
            0.9946832060813904,
            0.9937276244163513,
            0.9937927722930908,
            0.9934622049331665
        ]
    },
    "3584": {
        "similarity": 0.9955286979675293,
        "body": "    onions = [list(map(int, input().split())) for _ in range(N)]\n    posts = [list(map(int, input().split())) for _ in range(M)]\n\n        points.sort(key=lambda x: (x[0], -x[1]))\n        hull = []\n        for point in points:\n            while len(hull) >= 2 and not ((hull[-1][0] * hull[-2][1] - hull[-1][1] * hull[-2][0]) > 0 or (hull[-1][0] * hull[-2][0] + hull[-1][1] * hull[-2][1] == 0)):\n                hull.pop()\n            hull.append(point)\n        return hull\n\n        cnt = 0\n        for onion in onions:\n            if all((onion[0] - post[0]) * (post[1] - onion[1]) <= (onion[0] - post[0]) * (post_[1] - onion[1]) or (onion[0] - post[0]) * (post[1] - onion[1]) == 0 for post, post_ in zip(hull[:-1], hull[1:])):\n                cnt += 1\n        return cnt\n\n    max_cnt = 0\n    for i in range(M):\n        posts_copy = posts[:]\n        for _ in range(K):\n            hull = convex_hull(posts_copy)\n            cnt = count_onions_in_hull(hull)\n            if cnt > max_cnt:\n                max_cnt = cnt\n            posts_copy.remove(max(posts_copy))\n        posts_copy.insert(i, posts[i])\n    return max_cnt\n\nprint(max_onions(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954481720924377,
            0.9944892525672913,
            0.9676291942596436,
            0.9949690103530884,
            0.9942514300346375,
            0.9935422539710999,
            0.9941239953041077,
            0.9953098297119141,
            0.9947458505630493,
            0.9885702729225159,
            0.9955286979675293,
            0.9948887228965759,
            0.9941709637641907,
            0.9953099489212036,
            0.9951215982437134,
            0.9953793287277222,
            0.995400071144104,
            0.9954737424850464,
            0.9943608641624451,
            0.9949840903282166
        ]
    },
    "3950": {
        "similarity": 0.9946548342704773,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    queries = []\n    for i in range(q):\n        l = i + 1\n        r = max(a.index(i+1) if i+1 in a else n+1)\n        queries.append((l, r))\n\n    restored_a = [0] * n\n    for query in queries:\n        l, r = query\n        for j in range(l-1, r):\n            restored_a[j] = max(restored_a[j], l)\n\n    if all(a[i] == 0 or a[i] == restored_a[i] for i in range(n)):\n        print(\"YES\")\n        print(*restored_a)\n    else:\n        print(\"NO\")\n\nrestore_array()",
        "result": "failed: testcase 0",
        "similarities": [
            0.992155909538269,
            0.9901130199432373,
            0.993012011051178,
            0.9827594757080078,
            0.9937428832054138,
            0.9892761707305908,
            0.9924173951148987,
            0.9920196533203125,
            0.9931768178939819,
            0.9910975098609924,
            0.9946548342704773,
            0.9906387329101562,
            0.9911884665489197,
            0.9945840239524841,
            0.9929948449134827,
            0.9884237051010132,
            0.9942635297775269,
            0.9926435351371765,
            0.9736180901527405,
            0.991190493106842
        ]
    },
    "3075": {
        "similarity": 0.9974474906921387,
        "body": "    n, g = map(int, input().split())\n    stations = sorted([tuple(map(int, input().split())) for _ in range(n)])\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i, (d, c) in enumerate(stations):\n        for j in range(i - 1, -1, -1):\n            if stations[j][0] < d and stations[j][1] <= c:\n                break\n        else:\n            continue\n        dp[i + 1] = min(dp[i], dp[j] + (d - stations[j][0]) * c)\n    print('cancel road trip' if dp[n] == float('inf') else dp[n])\n\nif __name__ == '__main__':\n    min_gas_cost()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951418042182922,
            0.9959869384765625,
            0.9952957630157471,
            0.9969190359115601,
            0.9958702921867371,
            0.9952779412269592,
            0.9974474906921387,
            0.9965354800224304,
            0.9947254657745361,
            0.9969203472137451,
            0.9962888360023499,
            0.9970004558563232,
            0.9960185885429382,
            0.997310221195221,
            0.9974415302276611,
            0.9948874115943909,
            0.9968926310539246,
            0.9961718320846558,
            0.9969611763954163,
            0.9957488179206848
        ]
    },
    "3711": {
        "similarity": 0.9952970147132874,
        "body": "    if min(n, m) * (k + 1) < max(n, m):\n        return -1\n    else:\n        return min(n, m)\n\nn, m, k = map(int, input().split())\nprint(max_chocolate_area(n, m, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941325783729553,
            0.9873761534690857,
            0.995164155960083,
            0.9952970147132874,
            0.9945924878120422,
            0.9933657646179199,
            0.9926273822784424,
            0.9952062368392944,
            0.9940203428268433,
            0.994362473487854,
            0.9933861494064331,
            0.9877960085868835,
            0.9939451813697815,
            0.9919276237487793,
            0.9928590059280396,
            0.9916096925735474,
            0.9900181293487549,
            0.9948803782463074,
            0.9918628334999084,
            0.9912330508232117
        ]
    }
}