{
    "HumanEval/0": {
        "similarity": 0.9995947480201721,
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9985256195068359,
            0.9995947480201721,
            0.9975939393043518,
            0.9995947480201721,
            0.9995947480201721,
            0.9995947480201721,
            0.9985257387161255,
            0.9985257387161255,
            0.9995947480201721
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9989525675773621,
        "body": "    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result",
        "result": "passed",
        "similarities": [
            0.998571515083313,
            0.9989330768585205,
            0.9989330768585205,
            0.9984092712402344,
            0.9982697367668152,
            0.9989330768585205,
            0.9989333152770996,
            0.9989525675773621,
            0.9980680346488953,
            0.9989331960678101,
            0.9980685710906982,
            0.9977954030036926,
            0.9980685710906982,
            0.9988977313041687,
            0.9989061951637268,
            0.9981416463851929,
            0.9981825947761536,
            0.9989191293716431,
            0.9984335899353027,
            0.9989425539970398
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9980446696281433,
        "body": "return number - int(number)",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9980445504188538,
            0.9980445504188538,
            0.998044490814209,
            0.998044490814209,
            0.9980445504188538,
            0.9980445504188538,
            0.998044490814209,
            0.998044490814209,
            0.998044490814209,
            0.9980446696281433,
            0.998044490814209,
            0.9980446696281433,
            0.998044490814209,
            0.9980446696281433,
            0.9980446696281433,
            0.998044490814209,
            0.998044490814209,
            0.9980445504188538,
            0.998044490814209,
            0.9980445504188538
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9994848966598511,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9970812797546387,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9994848966598511,
            0.9970812797546387,
            0.9994848966598511,
            0.9970812797546387,
            0.9994848966598511
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9946109652519226,
        "body": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad",
        "result": "passed",
        "similarities": [
            0.9946109652519226,
            0.9917410016059875,
            0.9917117953300476,
            0.9935075640678406,
            0.9504892230033875,
            0.9890421628952026,
            0.9935075640678406,
            0.9940295815467834,
            0.9940295815467834,
            0.9917117953300476,
            0.9940295815467834,
            0.9895963072776794,
            0.9946109652519226,
            0.9917117953300476,
            0.9935075640678406,
            0.9917117953300476,
            0.9895963072776794,
            0.9946109652519226,
            0.9946109652519226,
            0.9940295815467834
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9975377321243286,
        "body": "    result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "result": "passed",
        "similarities": [
            0.9969670176506042,
            0.9967946410179138,
            0.9972253441810608,
            0.9974421262741089,
            0.9974421262741089,
            0.9967125654220581,
            0.9968031048774719,
            0.9961180686950684,
            0.9954324960708618,
            0.9969670176506042,
            0.9975377321243286,
            0.9969670176506042,
            0.9974421262741089,
            0.9974421262741089,
            0.9967946410179138,
            0.9973815083503723,
            0.9974678754806519,
            0.9967935681343079,
            0.9968942403793335,
            0.9954324960708618
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9992929100990295,
        "body": "    result = []\n    for group in paren_string.split():\n        depth = max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result",
        "result": "passed",
        "similarities": [
            0.9990264773368835,
            0.9985807538032532,
            0.99910968542099,
            0.9989342093467712,
            0.9987269043922424,
            0.9992049336433411,
            0.9992049336433411,
            0.9987269043922424,
            0.9987269043922424,
            0.9989340901374817,
            0.9992929100990295,
            0.9992929100990295,
            0.9992049336433411,
            0.9992929100990295,
            0.9987269043922424,
            0.998640775680542,
            0.9987269043922424,
            0.9984706044197083,
            0.9989340901374817,
            0.9990843534469604
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9990875124931335,
        "body": "return [s for s in strings if substring in s]",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335,
            0.9972619414329529,
            0.9972619414329529,
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335,
            0.9972619414329529,
            0.9990875124931335,
            0.9972619414329529,
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335,
            0.9972619414329529,
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335,
            0.9990875124931335
        ]
    },
    "HumanEval/8": {
        "similarity": 0.998325526714325,
        "body": "    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)",
        "result": "passed",
        "similarities": [
            0.9975670576095581,
            0.9983139038085938,
            0.9983139038085938,
            0.9969840049743652,
            0.9976510405540466,
            0.9983139038085938,
            0.9970883727073669,
            0.9983139038085938,
            0.9983139038085938,
            0.9983139038085938,
            0.9963880777359009,
            0.998325526714325,
            0.9827395081520081,
            0.9976510405540466,
            0.9983139038085938,
            0.9976510405540466,
            0.9976510405540466,
            0.9983139038085938,
            0.9976510405540466,
            0.9983139038085938
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9984163045883179,
        "body": "    if not numbers:\n        return []\n    \n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    \n    return max_list",
        "result": "passed",
        "similarities": [
            0.9981004595756531,
            0.9981880187988281,
            0.9984163045883179,
            0.9982866048812866,
            0.9981648325920105,
            0.9982301592826843,
            0.9981004595756531,
            0.997902512550354,
            0.9959641695022583,
            0.9969058632850647,
            0.9976973533630371,
            0.9971792101860046,
            0.9982864856719971,
            0.9984163045883179,
            0.9982157349586487,
            0.9981880187988281,
            0.9969289898872375,
            0.9971792101860046,
            0.9981004595756531,
            0.9980706572532654
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9978153705596924,
        "body": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            prefix = string[i:]\n            return string + prefix[::-1]\n    return string",
        "result": "failed: ",
        "similarities": [
            0.9969516396522522,
            0.9963937401771545,
            0.987218976020813,
            0.9968724846839905,
            0.9971643686294556,
            0.9974385499954224,
            0.997556209564209,
            0.9974385499954224,
            0.9978153705596924,
            0.9977553486824036,
            0.9966775178909302,
            0.9967450499534607,
            0.9972819089889526,
            0.9971643686294556,
            0.9969197511672974,
            0.997268795967102,
            0.997063398361206,
            0.9973220825195312,
            0.9963937401771545,
            0.9963937401771545
        ]
    },
    "HumanEval/11": {
        "similarity": 0.996615469455719,
        "body": "return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9927761554718018,
            0.9963912963867188,
            0.9963912963867188,
            0.9934724569320679,
            0.9927761554718018,
            0.9965460896492004,
            0.996479868888855,
            0.9963912963867188,
            0.9925812482833862,
            0.9960925579071045,
            0.9960925579071045,
            0.9927761554718018,
            0.9959579110145569,
            0.996615469455719,
            0.9963914155960083,
            0.9928864240646362,
            0.9927761554718018,
            0.9927761554718018,
            0.9963912963867188,
            0.9960925579071045
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9969685077667236,
        "body": "    if not strings:\n        return None\n    return max(strings, key=len)",
        "result": "passed",
        "similarities": [
            0.9961541891098022,
            0.9941704273223877,
            0.9967839121818542,
            0.9967839121818542,
            0.9969685077667236,
            0.9967839121818542,
            0.9961541891098022,
            0.9961541891098022,
            0.9941705465316772,
            0.9969685077667236,
            0.9969685077667236,
            0.9961541891098022,
            0.9967839121818542,
            0.9967839121818542,
            0.9969685077667236,
            0.9969685077667236,
            0.9966948628425598,
            0.9961541891098022,
            0.9969685077667236,
            0.9966948628425598
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9999240040779114,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a",
        "result": "passed",
        "similarities": [
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9997690916061401,
        "body": "    return [string[:i] for i in range(1, len(string) + 1)]",
        "result": "passed",
        "similarities": [
            0.9997690916061401,
            0.9997690916061401,
            0.9979233145713806,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9979233145713806,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401,
            0.9997690916061401
        ]
    },
    "HumanEval/15": {
        "similarity": 0.999830961227417,
        "body": "return ' '.join(str(i) for i in range(n + 1))",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.999830961227417,
            0.9970765709877014,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.999830961227417,
            0.9997044801712036,
            0.999830961227417,
            0.999830961227417,
            0.9997044801712036
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9999998807907104,
        "body": "    return len(set(string.lower()))",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/17": {
        "similarity": 0.995996356010437,
        "body": "    notes = music_string.split()\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in notes]",
        "result": "passed",
        "similarities": [
            0.995996356010437,
            0.9871859550476074,
            0.9943616986274719,
            0.9953109622001648,
            0.9953109622001648,
            0.9953109622001648,
            0.9871859550476074,
            0.9871859550476074,
            0.9953109622001648,
            0.995996356010437,
            0.9953109622001648,
            0.9871859550476074,
            0.9953109622001648,
            0.9954710602760315,
            0.9953109622001648,
            0.9871859550476074,
            0.9953109622001648,
            0.9953109622001648,
            0.9953109622001648,
            0.9953109622001648
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9917582273483276,
        "body": "    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1",
        "result": "passed",
        "similarities": [
            0.966387927532196,
            0.966387927532196,
            0.9910793304443359,
            0.9914647340774536,
            0.9910793304443359,
            0.9910793304443359,
            0.9910793304443359,
            0.9910793304443359,
            0.9910793304443359,
            0.9910793304443359,
            0.9917582273483276,
            0.9910793304443359,
            0.9910793304443359,
            0.966387927532196,
            0.9910793304443359,
            0.966387927532196,
            0.9915902018547058,
            0.9910793304443359,
            0.9910793304443359,
            0.9917582273483276
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9953687787055969,
        "body": "    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    sorted_numbers = sorted(numbers.split(), key=lambda word: number_map[word])\n    return ' '.join(sorted_numbers)",
        "result": "passed",
        "similarities": [
            0.9867562651634216,
            0.992112934589386,
            0.9940022230148315,
            0.9953687787055969,
            0.991786539554596,
            0.9953252077102661,
            0.9938656687736511,
            0.9876264333724976,
            0.9876264333724976,
            0.994515597820282,
            0.9953252077102661,
            0.9935905933380127,
            0.9925808310508728,
            0.9949819445610046,
            0.9867562651634216,
            0.9953252077102661,
            0.9953687787055969,
            0.9949818849563599,
            0.9926085472106934,
            0.988826334476471
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9994458556175232,
        "body": "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair",
        "result": "passed",
        "similarities": [
            0.9994006156921387,
            0.9994458556175232,
            0.9994006156921387,
            0.9991425275802612,
            0.9993742108345032,
            0.9994458556175232,
            0.9994006156921387,
            0.9991425275802612,
            0.9994006156921387,
            0.9991425275802612,
            0.999345600605011,
            0.9957001209259033,
            0.9994458556175232,
            0.9990216493606567,
            0.9994035363197327,
            0.9994035363197327,
            0.999350905418396,
            0.9988516569137573,
            0.9989660382270813,
            0.9991425275802612
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9985722303390503,
        "body": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]",
        "result": "passed",
        "similarities": [
            0.9983994364738464,
            0.9927042722702026,
            0.9976226687431335,
            0.9985722303390503,
            0.9985518455505371,
            0.9976226687431335,
            0.9976226687431335,
            0.9985722303390503,
            0.9985518455505371,
            0.9985722303390503,
            0.9985518455505371,
            0.998432993888855,
            0.9985722303390503,
            0.9985722303390503,
            0.9976226687431335,
            0.9985722303390503,
            0.9976226687431335,
            0.9976226687431335,
            0.9975301027297974,
            0.9983994364738464
        ]
    },
    "HumanEval/22": {
        "similarity": 0.998049795627594,
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "similarities": [
            0.9976163506507874,
            0.9976163506507874,
            0.998049795627594,
            0.998049795627594,
            0.998049795627594,
            0.9976163506507874,
            0.998049795627594,
            0.998049795627594,
            0.9976163506507874,
            0.9980496764183044,
            0.9976163506507874,
            0.9976163506507874,
            0.998049795627594,
            0.998049795627594,
            0.998049795627594,
            0.9976163506507874,
            0.9976163506507874,
            0.9976163506507874,
            0.998049795627594,
            0.998049795627594
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9994456768035889,
        "body": "return len(string)",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9950109720230103,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9994456768035889,
            0.9950109720230103,
            0.9994456768035889
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9991479516029358,
        "body": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "similarities": [
            0.9991244077682495,
            0.9988266825675964,
            0.9991244077682495,
            0.9991479516029358,
            0.9990862607955933,
            0.9989242553710938,
            0.9991244077682495,
            0.9990862607955933,
            0.9987075328826904,
            0.9991244077682495,
            0.9991337656974792,
            0.9965850710868835,
            0.9988266825675964,
            0.9965624809265137,
            0.9991244077682495,
            0.9987437725067139,
            0.9991244077682495,
            0.9991337656974792,
            0.9987075328826904,
            0.9991337656974792
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9989035725593567,
        "body": "    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors",
        "result": "passed",
        "similarities": [
            0.9989035725593567,
            0.998349666595459,
            0.9989035725593567,
            0.9985766410827637,
            0.9986112713813782,
            0.9950674176216125,
            0.9987813234329224,
            0.9982020854949951,
            0.998718798160553,
            0.9986112713813782,
            0.9982020854949951,
            0.9976732134819031,
            0.9989035725593567,
            0.9986112713813782,
            0.9976732134819031,
            0.997983455657959,
            0.9984512329101562,
            0.998349666595459,
            0.9986447691917419,
            0.9985766410827637
        ]
    },
    "HumanEval/26": {
        "similarity": 0.996468186378479,
        "body": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.996468186378479,
            0.9937431216239929,
            0.9958069324493408,
            0.996468186378479,
            0.996468186378479,
            0.9952619671821594,
            0.9895440340042114,
            0.9925509095191956,
            0.9886661171913147,
            0.996468186378479,
            0.9886661171913147,
            0.9936251640319824,
            0.9964392781257629,
            0.9886661171913147,
            0.996468186378479,
            0.996468186378479,
            0.996468186378479,
            0.996468186378479,
            0.996468186378479,
            0.996468186378479
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9953050017356873,
        "body": "return string.swapcase()",
        "result": "failed: 'return' outside function (<string>, line 8)",
        "similarities": [
            0.9897583723068237,
            0.9928590059280396,
            0.9953049421310425,
            0.9953050017356873,
            0.9946659803390503,
            0.9953049421310425,
            0.9953049421310425,
            0.9953049421310425,
            0.9946659803390503,
            0.9897583723068237,
            0.9953050017356873,
            0.9953050017356873,
            0.9946659803390503,
            0.9953049421310425,
            0.9928590059280396,
            0.9937978386878967,
            0.9897583723068237,
            0.9953050017356873,
            0.9953049421310425,
            0.9897583723068237
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9997611045837402,
        "body": "return ''.join(strings)",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9954606890678406,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402,
            0.9997611045837402
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9982390403747559,
        "body": "return [s for s in strings if s.startswith(prefix)]",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9982390403747559,
            0.9982390403747559,
            0.9947171807289124,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9982390403747559,
            0.9947171807289124,
            0.9982390403747559,
            0.9982390403747559,
            0.9947171807289124,
            0.9982390403747559,
            0.9947171807289124,
            0.9982390403747559,
            0.9947171807289124
        ]
    },
    "HumanEval/30": {
        "similarity": 0.998855471611023,
        "body": "return [x for x in l if x > 0]",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9987985491752625,
            0.995941162109375,
            0.998855471611023,
            0.9987985491752625,
            0.9987985491752625,
            0.998855471611023,
            0.998855471611023,
            0.9987985491752625,
            0.998855471611023,
            0.998855471611023,
            0.9957700967788696,
            0.9957700967788696,
            0.998855471611023,
            0.998855471611023,
            0.998855471611023,
            0.9987985491752625,
            0.998855471611023,
            0.998855471611023,
            0.998855471611023,
            0.9957702159881592
        ]
    },
    "HumanEval/31": {
        "similarity": 0.998368501663208,
        "body": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9974164366722107,
            0.9978423118591309,
            0.9974164366722107,
            0.9978423118591309,
            0.9974164366722107,
            0.9974164366722107,
            0.9978423118591309,
            0.9978423118591309,
            0.9978423118591309,
            0.9978423118591309,
            0.9974164366722107,
            0.9978423118591309,
            0.9974164366722107,
            0.9978423118591309,
            0.998368501663208,
            0.998368501663208,
            0.9974164366722107,
            0.9978423118591309,
            0.998368501663208,
            0.9974164366722107
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9859393239021301,
        "body": "    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"List must have an even number of coefficients and a non-zero leading coefficient.\")\n    \n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    low = -1.0\n    high = 1.0\n    while high - low > 1e-7:\n        mid = (low + high) / 2\n        if poly(mid) * poly(low) < 0:\n            high = mid\n        else:\n            low = mid\n    \n    return round((low + high) / 2, 2)",
        "result": "failed: poly() missing 1 required positional argument: 'x'",
        "similarities": [
            0.9707374572753906,
            0.9847774505615234,
            0.9696692228317261,
            0.9747027158737183,
            0.9816909432411194,
            0.984318196773529,
            0.9416320323944092,
            0.9833799600601196,
            0.9849661588668823,
            0.9669898152351379,
            0.9378675222396851,
            0.9814164042472839,
            0.9787445068359375,
            0.9853750467300415,
            0.9751884937286377,
            0.984646737575531,
            0.9859393239021301,
            0.9703292846679688,
            0.9797857403755188,
            0.9697974324226379
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9970820546150208,
        "body": "    indices_to_sort = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in indices_to_sort])\n    l_prime = l[:]\n    for index, value in zip(indices_to_sort, sorted_values):\n        l_prime[index] = value\n    return l_prime",
        "result": "passed",
        "similarities": [
            0.9967599511146545,
            0.9925963878631592,
            0.9969412088394165,
            0.9966143369674683,
            0.9970820546150208,
            0.9960609078407288,
            0.9737432599067688,
            0.9964232444763184,
            0.996619462966919,
            0.9958880543708801,
            0.9956717491149902,
            0.9961124062538147,
            0.9948775768280029,
            0.9958880543708801,
            0.9958634972572327,
            0.9969412088394165,
            0.9970434308052063,
            0.9965287446975708,
            0.9969412088394165,
            0.9968854784965515
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9994683861732483,
        "body": "    return sorted(set(l))",
        "result": "passed",
        "similarities": [
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9984057545661926,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9984057545661926,
            0.9984057545661926,
            0.9994683861732483,
            0.9994683861732483,
            0.9984057545661926,
            0.9984057545661926,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483,
            0.9994683861732483
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9977854490280151,
        "body": "return max(l)",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9948325157165527,
            0.9977854490280151,
            0.9948325157165527,
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9977854490280151,
            0.9948325157165527,
            0.9948325157165527,
            0.9977854490280151,
            0.9948325157165527,
            0.9977854490280151,
            0.9977854490280151,
            0.9948325157165527
        ]
    },
    "HumanEval/36": {
        "similarity": 0.999955415725708,
        "body": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed",
        "similarities": [
            0.999955415725708,
            0.999955415725708,
            0.999955415725708,
            0.999955415725708,
            0.999955415725708,
            0.999955415725708,
            0.999896228313446,
            0.999955415725708,
            0.999955415725708,
            0.999896228313446,
            0.999955415725708,
            0.999955415725708,
            0.999896228313446,
            0.999896228313446,
            0.999955415725708,
            0.999955415725708,
            0.999955415725708,
            0.999896228313446,
            0.999896228313446,
            0.999955415725708
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9977236390113831,
        "body": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for idx, val in zip(even_indices, sorted_values):\n        result[idx] = val\n    return result",
        "result": "passed",
        "similarities": [
            0.9976570010185242,
            0.9975486397743225,
            0.9945763945579529,
            0.9975486397743225,
            0.9948257803916931,
            0.9966982007026672,
            0.9976106286048889,
            0.9973002076148987,
            0.9967097043991089,
            0.9977236390113831,
            0.9971490502357483,
            0.9977236390113831,
            0.9887825846672058,
            0.9949983358383179,
            0.9977210164070129,
            0.9967097043991089,
            0.9971319437026978,
            0.9970494508743286,
            0.9975995421409607,
            0.9975237846374512
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9973534345626831,
        "body": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed",
        "similarities": [
            0.9973534345626831,
            0.9943590760231018,
            0.9973534345626831,
            0.9973534345626831,
            0.995402991771698,
            0.9941391348838806,
            0.9973534345626831,
            0.9943450093269348,
            0.9973534345626831,
            0.9952384829521179,
            0.9973534345626831,
            0.9973534345626831,
            0.9942079782485962,
            0.9973534345626831,
            0.9973534345626831,
            0.9973534345626831,
            0.9943450093269348,
            0.9973534345626831,
            0.9952384829521179,
            0.9941391348838806
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9975927472114563,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        next_fib = fib1 + fib2\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib\n        fib1, fib2 = fib2, next_fib",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9975685477256775,
            0.9966126680374146,
            0.9974859356880188,
            0.9957761168479919,
            0.9957539439201355,
            0.9975927472114563,
            0.9975841045379639,
            0.989041268825531,
            0.9954886436462402,
            0.9966126680374146,
            0.9970648884773254,
            0.9969536662101746,
            0.9974778890609741,
            0.9967057108879089,
            0.996425449848175,
            0.9975329041481018,
            0.9929705262184143,
            0.9929799437522888,
            0.9969584941864014,
            0.9967398643493652
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9991987347602844,
        "body": "    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9991814494132996,
            0.9991814494132996,
            0.9991814494132996,
            0.9967421293258667,
            0.9991987347602844,
            0.9991814494132996,
            0.9991987347602844,
            0.9978363513946533,
            0.9991814494132996,
            0.9991814494132996,
            0.9991814494132996,
            0.9991814494132996,
            0.9991987347602844,
            0.9991987347602844,
            0.9964486360549927,
            0.9977952837944031,
            0.9991987347602844,
            0.9991814494132996,
            0.9986981749534607,
            0.9968709349632263
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9996886253356934,
        "body": "    return n * n",
        "result": "passed",
        "similarities": [
            0.9996886253356934,
            0.9996886253356934,
            0.9992514252662659,
            0.9991577863693237,
            0.9996886253356934,
            0.9996886253356934,
            0.9996886253356934,
            0.9996886253356934,
            0.9996886253356934,
            0.9996886253356934,
            0.9996886253356934,
            0.9992515444755554,
            0.9991577863693237,
            0.9996886253356934,
            0.9996886253356934,
            0.9991577863693237,
            0.9992514252662659,
            0.9996886253356934,
            0.9996886253356934,
            0.9992514252662659
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9994844198226929,
        "body": "return [x + 1 for x in l]",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9994844198226929,
            0.9970778226852417,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9970778226852417,
            0.9994844198226929,
            0.9994844198226929,
            0.9970778226852417,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929,
            0.9994844198226929
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9999998807907104,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9947214722633362,
        "body": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])",
        "result": "passed",
        "similarities": [
            0.9791144132614136,
            0.9945787191390991,
            0.9947214722633362,
            0.9945787191390991,
            0.9945787191390991,
            0.9945787191390991,
            0.9791144132614136,
            0.985867440700531,
            0.9947214722633362,
            0.985867440700531,
            0.9945787191390991,
            0.9947214722633362,
            0.985867440700531,
            0.9947214722633362,
            0.9945787191390991,
            0.9947214722633362,
            0.9945787191390991,
            0.9945787191390991,
            0.9945787191390991,
            0.9945787191390991
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9999057650566101,
        "body": "return 0.5 * a * h",
        "result": "failed: 'return' outside function (<string>, line 8)",
        "similarities": [
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9982103109359741,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101,
            0.9999057650566101
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9994734525680542,
        "body": "    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
        "result": "passed",
        "similarities": [
            0.9993957877159119,
            0.9983319640159607,
            0.9994734525680542,
            0.9994320273399353,
            0.9993957877159119,
            0.9993957877159119,
            0.9993996024131775,
            0.9994734525680542,
            0.9994320273399353,
            0.9993996024131775,
            0.999332845211029,
            0.9993996024131775,
            0.9992938041687012,
            0.9993957877159119,
            0.9994320273399353,
            0.9993957877159119,
            0.9994320273399353,
            0.9993957877159119,
            0.9994320273399353,
            0.9994734525680542
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9981589317321777,
        "body": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0",
        "result": "passed",
        "similarities": [
            0.9981589317321777,
            0.9973660707473755,
            0.9980702996253967,
            0.9957773089408875,
            0.9951927661895752,
            0.9977375864982605,
            0.9981589317321777,
            0.9971213340759277,
            0.9979193806648254,
            0.9951927661895752,
            0.9981589317321777,
            0.9981589317321777,
            0.9980701804161072,
            0.9954085350036621,
            0.9981589317321777,
            0.9981589317321777,
            0.9980701804161072,
            0.9981589317321777,
            0.9980702996253967,
            0.9978995323181152
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9966250061988831,
        "body": "    return text == text[::-1]",
        "result": "passed",
        "similarities": [
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9405595064163208,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9935552477836609,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9966248869895935,
            0.9935551881790161,
            0.9966248869895935,
            0.9966250061988831
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9965054392814636,
        "body": "    return pow(2, n, p)",
        "result": "passed",
        "similarities": [
            0.9957287311553955,
            0.9965054392814636,
            0.9957287311553955,
            0.9965054392814636,
            0.9957287311553955,
            0.9957287311553955,
            0.9957287311553955,
            0.9965054392814636,
            0.9957287311553955,
            0.9957287311553955,
            0.9965053200721741,
            0.9965053200721741,
            0.9957287311553955,
            0.9957287311553955,
            0.9965053200721741,
            0.9965053200721741,
            0.9965054392814636,
            0.9965054392814636,
            0.9965054392814636,
            0.9965054392814636
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9987829327583313,
        "body": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9975741505622864,
            0.9987829327583313,
            0.9987829327583313,
            0.9987829327583313,
            0.9815751910209656,
            0.9987829327583313,
            0.9975741505622864,
            0.9987829327583313,
            0.9987829327583313
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9981290698051453,
        "body": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])",
        "result": "passed",
        "similarities": [
            0.9981290698051453,
            0.9981290698051453,
            0.9981290698051453,
            0.9958114624023438,
            0.9981290698051453,
            0.9981290698051453,
            0.9981290698051453,
            0.9958114624023438,
            0.9970104694366455,
            0.9981290698051453,
            0.9929532408714294,
            0.9981290698051453,
            0.9958114624023438,
            0.9981290698051453,
            0.9949946403503418,
            0.9970104694366455,
            0.9981290698051453,
            0.9981290698051453,
            0.9967466592788696,
            0.9958281517028809
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9939320087432861,
        "body": "    return all(x < t for x in l)",
        "result": "passed",
        "similarities": [
            0.9898502826690674,
            0.9939320087432861,
            0.9808933734893799,
            0.9808933734893799,
            0.9939320087432861,
            0.9808933734893799,
            0.9898502826690674,
            0.9808933734893799,
            0.9898502826690674,
            0.9939320087432861,
            0.9939320087432861,
            0.9808933734893799,
            0.9939320087432861,
            0.9898502826690674,
            0.9898502826690674,
            0.9898502826690674,
            0.9939320087432861,
            0.9939320087432861,
            0.9939320087432861,
            0.9939320087432861
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9995141625404358,
        "body": "return x + y",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9972468018531799,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9972468018531799,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9972468018531799,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358,
            0.9995141625404358
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9987366199493408,
        "body": "    return set(s0) == set(s1)",
        "result": "passed",
        "similarities": [
            0.9987366199493408,
            0.9987366199493408,
            0.9987366199493408,
            0.995389461517334,
            0.9987366199493408,
            0.9987366199493408,
            0.9987366199493408,
            0.9987366199493408,
            0.9950374960899353,
            0.9987366199493408,
            0.9987366199493408,
            0.995389461517334,
            0.995389461517334,
            0.9987366199493408,
            0.9987366199493408,
            0.9987366199493408,
            0.9987366199493408,
            0.995389461517334,
            0.9987366199493408,
            0.9987366199493408
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9998738169670105,
        "body": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
        "result": "passed",
        "similarities": [
            0.9994113445281982,
            0.9998738169670105,
            0.9998738169670105,
            0.9991459250450134,
            0.9998738169670105,
            0.9998738169670105,
            0.9990228414535522,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105,
            0.9998738169670105
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9995745420455933,
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "similarities": [
            0.9995256662368774,
            0.9995745420455933,
            0.9995745420455933,
            0.9995745420455933,
            0.9995745420455933,
            0.9995745420455933,
            0.9995745420455933,
            0.999525785446167,
            0.9995745420455933,
            0.9995745420455933,
            0.9976205229759216,
            0.9976205229759216,
            0.9995256662368774,
            0.9995745420455933,
            0.999325692653656,
            0.9991814494132996,
            0.9995256662368774,
            0.9995745420455933,
            0.9995256662368774,
            0.9995745420455933
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9898646473884583,
        "body": "    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing",
        "result": "passed",
        "similarities": [
            0.9695835113525391,
            0.9894694089889526,
            0.9894694089889526,
            0.9898646473884583,
            0.9898646473884583,
            0.9898646473884583,
            0.9793737530708313,
            0.9898646473884583,
            0.9894694089889526,
            0.9793737530708313,
            0.9898646473884583,
            0.9894694089889526,
            0.9881618022918701,
            0.9793737530708313,
            0.9894821047782898,
            0.9881618022918701,
            0.9695835113525391,
            0.9894694089889526,
            0.9695835113525391,
            0.9884163737297058
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9993197917938232,
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "similarities": [
            0.9984606504440308,
            0.9984606504440308,
            0.9993197917938232,
            0.9993197917938232,
            0.9984606504440308,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9964157938957214,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9993197917938232,
            0.9964157938957214,
            0.9983878135681152,
            0.9993197917938232,
            0.9993197917938232
        ]
    },
    "HumanEval/59": {
        "similarity": 0.996006429195404,
        "body": "    factor = 2\n    while n % factor == 0:\n        n //= factor\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            factor = i\n    \n    if n > factor:\n        factor = n\n    \n    return factor",
        "result": "passed",
        "similarities": [
            0.9874665141105652,
            0.9880507588386536,
            0.9925933480262756,
            0.9948573708534241,
            0.9949241280555725,
            0.9948654174804688,
            0.9959068298339844,
            0.9919129610061646,
            0.9948573708534241,
            0.9957678914070129,
            0.996006429195404,
            0.9959068298339844,
            0.9948573708534241,
            0.9919129610061646,
            0.9955954551696777,
            0.9879594445228577,
            0.9919129610061646,
            0.9919129610061646,
            0.9948573708534241,
            0.9919129610061646
        ]
    },
    "HumanEval/60": {
        "similarity": 0.999407947063446,
        "body": "return n * (n + 1) // 2",
        "result": "failed: 'return' outside function (<string>, line 16)",
        "similarities": [
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.9986186027526855,
            0.999407947063446,
            0.999407947063446,
            0.998618483543396,
            0.999407947063446,
            0.998618483543396,
            0.998618483543396,
            0.998618483543396,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.999407947063446,
            0.998618483543396
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9995793700218201,
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "similarities": [
            0.9993419647216797,
            0.9995793700218201,
            0.9993419647216797,
            0.9993945956230164,
            0.9993945956230164,
            0.9995793700218201,
            0.9995793700218201,
            0.9993419647216797,
            0.9995793700218201,
            0.9995793700218201,
            0.9993419647216797,
            0.9995793700218201,
            0.9995793700218201,
            0.9995793700218201,
            0.9995793700218201,
            0.9971445798873901,
            0.9993419647216797,
            0.9993419647216797,
            0.9995793700218201,
            0.9995793700218201
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9935395121574402,
        "body": "    return [i * xs[i] for i in range(1, len(xs))]",
        "result": "passed",
        "similarities": [
            0.9929881691932678,
            0.9935395121574402,
            0.9929881691932678,
            0.9907460808753967,
            0.99071204662323,
            0.9791904091835022,
            0.9791904091835022,
            0.9929881691932678,
            0.9929881691932678,
            0.9812287092208862,
            0.9929881691932678,
            0.9935395121574402,
            0.9929881691932678,
            0.9929881691932678,
            0.9935393929481506,
            0.9929881691932678,
            0.9935395121574402,
            0.9929881691932678,
            0.9929881691932678,
            0.9907119274139404
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9997514486312866,
        "body": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed",
        "similarities": [
            0.9997496604919434,
            0.9997496604919434,
            0.9997496604919434,
            0.9997496604919434,
            0.9997496604919434,
            0.9997496604919434,
            0.9995681643486023,
            0.9995681643486023,
            0.9997514486312866,
            0.9997496604919434,
            0.9997496604919434,
            0.9995681643486023,
            0.9995681643486023,
            0.9997496604919434,
            0.9995681643486023,
            0.9997514486312866,
            0.9995681643486023,
            0.9995681643486023,
            0.9997496604919434,
            0.9997496604919434
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9913758635520935,
        "body": "    vowels = \"aeiou\"\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9908598065376282,
            0.9908511638641357,
            0.9913758635520935,
            0.9860245585441589,
            0.9908598065376282,
            0.978434145450592,
            0.9887496829032898,
            0.9828959107398987,
            0.9861759543418884,
            0.9886423349380493,
            0.9899412393569946,
            0.9771677255630493,
            0.9794821739196777,
            0.9823082685470581,
            0.9908598065376282,
            0.9909902811050415,
            0.9908511638641357,
            0.9824790954589844,
            0.9908598065376282,
            0.9808284640312195
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9992777109146118,
        "body": "    digits = str(x)\n    n = len(digits)\n    if shift >= n:\n        return digits[::-1]\n    else:\n        shift %= n\n        return digits[-shift:] + digits[:-shift]",
        "result": "failed: ",
        "similarities": [
            0.9988011121749878,
            0.9988608360290527,
            0.9987408518791199,
            0.9992777109146118,
            0.9989985227584839,
            0.9989985227584839,
            0.9989985227584839,
            0.9992777109146118,
            0.9989985227584839,
            0.9988608360290527,
            0.9987408518791199,
            0.9987408518791199,
            0.9987408518791199,
            0.9987408518791199,
            0.9992272257804871,
            0.9988648295402527,
            0.9992272257804871,
            0.9992693662643433,
            0.9992777109146118,
            0.9979583621025085
        ]
    },
    "HumanEval/66": {
        "similarity": 1.0,
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9970088005065918,
        "body": "    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed",
        "similarities": [
            0.9859159588813782,
            0.996987521648407,
            0.9950172305107117,
            0.9970088005065918,
            0.9960232973098755,
            0.996987521648407,
            0.9947858452796936,
            0.9960232973098755,
            0.9970088005065918,
            0.9960232973098755,
            0.9970088005065918,
            0.996987521648407,
            0.9943596720695496,
            0.9960232973098755,
            0.9956932067871094,
            0.9960232973098755,
            0.993148684501648,
            0.9950172305107117,
            0.9958007335662842,
            0.9950172305107117
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9980857372283936,
        "body": "    smallest_value = float('inf')\n    index = -1\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            index = i\n\n    if index == -1:\n        return []\n    else:\n        return [smallest_value, index]",
        "result": "passed",
        "similarities": [
            0.9975886940956116,
            0.9972612261772156,
            0.9976210594177246,
            0.9978960752487183,
            0.9980857372283936,
            0.9957018494606018,
            0.9979777932167053,
            0.9967008829116821,
            0.9976878762245178,
            0.9979777932167053,
            0.9978923797607422,
            0.9958263039588928,
            0.9975886940956116,
            0.992195725440979,
            0.9980826377868652,
            0.9945014119148254,
            0.9978115558624268,
            0.9976860880851746,
            0.9976860880851746,
            0.9979019165039062
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9993304014205933,
        "body": "    from collections import Counter\n    freq = Counter(lst)\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "result": "passed",
        "similarities": [
            0.9990241527557373,
            0.9993043541908264,
            0.9993304014205933,
            0.998898983001709,
            0.9993044137954712,
            0.9992614388465881,
            0.9993304014205933,
            0.9964919686317444,
            0.9990493655204773,
            0.9993304014205933,
            0.9990241527557373,
            0.9993304014205933,
            0.9993043541908264,
            0.9993043541908264,
            0.9993043541908264,
            0.9993043541908264,
            0.9992614388465881,
            0.9980698823928833,
            0.9990493655204773,
            0.9990493655204773
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9992090463638306,
        "body": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
        "result": "passed",
        "similarities": [
            0.9991889595985413,
            0.9991889595985413,
            0.9991889595985413,
            0.9979031085968018,
            0.9991889595985413,
            0.9991889595985413,
            0.9992090463638306,
            0.9991889595985413,
            0.9992089867591858,
            0.9991889595985413,
            0.9992089867591858,
            0.9991889595985413,
            0.9992089867591858,
            0.9992089867591858,
            0.9961162209510803,
            0.9942831993103027,
            0.9992090463638306,
            0.9979031085968018,
            0.9991889595985413,
            0.9992090463638306
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9988173246383667,
        "body": "import math\n\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9988173246383667,
            0.9988173246383667,
            0.9988173246383667,
            0.9988173246383667,
            0.99796062707901,
            0.9988173246383667,
            0.9952555298805237,
            0.9952555298805237,
            0.9988173246383667,
            0.9979607462882996,
            0.9979607462882996,
            0.9988173246383667,
            0.9979607462882996,
            0.9979607462882996,
            0.9952555298805237,
            0.9988173246383667,
            0.9988173246383667,
            0.9988173246383667,
            0.9979607462882996,
            0.9988173246383667
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9999998807907104,
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9995605945587158,
        "body": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes",
        "result": "passed",
        "similarities": [
            0.9995605945587158,
            0.9995542764663696,
            0.9995542764663696,
            0.9995542764663696,
            0.9993243217468262,
            0.9995542764663696,
            0.9995542764663696,
            0.9995542764663696,
            0.9993243217468262,
            0.9995605945587158,
            0.9995542764663696,
            0.9995542764663696,
            0.9995542764663696,
            0.9993243217468262,
            0.9995542764663696,
            0.9993243217468262,
            0.9993205666542053,
            0.9995605945587158,
            0.9993205666542053,
            0.9991854429244995
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9961798787117004,
        "body": "    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "similarities": [
            0.9961798787117004,
            0.9960991740226746,
            0.9959888458251953,
            0.995151937007904,
            0.9901440143585205,
            0.9918339252471924,
            0.9918339252471924,
            0.9961369037628174,
            0.9959888458251953,
            0.9959888458251953,
            0.9896655678749084,
            0.9896655678749084,
            0.995151937007904,
            0.9931036233901978,
            0.9959888458251953,
            0.9959888458251953,
            0.9959888458251953,
            0.9951518177986145,
            0.9959888458251953,
            0.995151937007904
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9988654255867004,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9988654255867004,
            0.9985898733139038,
            0.9988391399383545,
            0.9961869120597839,
            0.998439610004425,
            0.9988654255867004,
            0.998554527759552,
            0.9986885786056519,
            0.9987230896949768,
            0.998439610004425,
            0.9983872771263123,
            0.998439610004425,
            0.998439610004425,
            0.9986885786056519,
            0.998439610004425,
            0.9988654255867004,
            0.9988014698028564,
            0.998554527759552,
            0.9982818961143494,
            0.9988654255867004
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9960640668869019,
        "body": "    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x",
        "result": "passed",
        "similarities": [
            0.995868980884552,
            0.9940478801727295,
            0.9930171966552734,
            0.9925812482833862,
            0.9951501488685608,
            0.9960640668869019,
            0.9917815327644348,
            0.995868980884552,
            0.9910666942596436,
            0.995868980884552,
            0.995619535446167,
            0.9904879331588745,
            0.995868980884552,
            0.9904879331588745,
            0.9957112073898315,
            0.9957112073898315,
            0.9904879331588745,
            0.9955372214317322,
            0.9906821250915527,
            0.9958534240722656
        ]
    },
    "HumanEval/77": {
        "similarity": 0.995866596698761,
        "body": "    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a and (a > 0 or cube_root ** 3 == -abs_a)",
        "result": "failed: Third test error: False",
        "similarities": [
            0.9868897795677185,
            0.9916879534721375,
            0.9950996041297913,
            0.9953466653823853,
            0.9958522319793701,
            0.9950109720230103,
            0.9955182671546936,
            0.9911613464355469,
            0.9958345293998718,
            0.9950194954872131,
            0.9951024651527405,
            0.9955957531929016,
            0.9914388060569763,
            0.9949525594711304,
            0.9955183267593384,
            0.9868897795677185,
            0.9868897795677185,
            0.9958202242851257,
            0.995866596698761,
            0.9950598478317261
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9999949932098389,
        "body": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)",
        "result": "passed",
        "similarities": [
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999058246612549,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389,
            0.9999949932098389
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9985443949699402,
        "body": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"",
        "result": "passed",
        "similarities": [
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9965868592262268,
            0.9829499125480652,
            0.9973377585411072,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402,
            0.9965868592262268,
            0.9985443949699402,
            0.9985443949699402,
            0.9965868592262268,
            0.9985443949699402,
            0.9985443949699402,
            0.9985443949699402
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9999154806137085,
        "body": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9999004006385803,
            0.9999004006385803,
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9999004006385803,
            0.9999154806137085,
            0.9999154806137085,
            0.9999004006385803,
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9999154806137085,
            0.9984921813011169,
            0.9999154806137085
        ]
    },
    "HumanEval/81": {
        "similarity": 1.0,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9986231923103333,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return is_prime(len(string))",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9986192584037781,
            0.9962392449378967,
            0.9986231923103333,
            0.9949660301208496,
            0.9986192584037781,
            0.9986231923103333,
            0.9982194304466248,
            0.9978042244911194,
            0.9986231923103333,
            0.9986231923103333,
            0.9977559447288513,
            0.9977980256080627,
            0.9982195496559143,
            0.9962392449378967,
            0.9986231923103333,
            0.9978043437004089,
            0.9978042244911194,
            0.9978051781654358,
            0.9981924295425415,
            0.9986192584037781
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9991625547409058,
        "body": "    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - 10 ** (n - 2)",
        "result": "failed: ",
        "similarities": [
            0.9988479614257812,
            0.99889075756073,
            0.99889075756073,
            0.9991625547409058,
            0.9987040162086487,
            0.9991625547409058,
            0.9988900423049927,
            0.9991625547409058,
            0.9989629983901978,
            0.9991625547409058,
            0.9991625547409058,
            0.9982795715332031,
            0.9988479614257812,
            0.99889075756073,
            0.9988900423049927,
            0.9971903562545776,
            0.99889075756073,
            0.9991625547409058,
            0.9987040162086487,
            0.9988900423049927
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9985631704330444,
        "body": "    return bin(sum(int(digit) for digit in str(N)))[2:]",
        "result": "passed",
        "similarities": [
            0.9985630512237549,
            0.9983779788017273,
            0.9983779788017273,
            0.9983779788017273,
            0.9985631704330444,
            0.9985631704330444,
            0.9985631704330444,
            0.9985631704330444,
            0.998371958732605,
            0.998371958732605,
            0.9985631704330444,
            0.9983778595924377,
            0.9983718395233154,
            0.9973151683807373,
            0.9985631704330444,
            0.9983779788017273,
            0.9985630512237549,
            0.9983779788017273,
            0.9985631704330444,
            0.9973151683807373
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9989587664604187,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)",
        "result": "passed",
        "similarities": [
            0.9989587664604187,
            0.9989587664604187,
            0.9948909282684326,
            0.9989587664604187,
            0.9984984397888184,
            0.9989587664604187,
            0.9989305734634399,
            0.9989587664604187,
            0.9989305734634399,
            0.9989587664604187,
            0.9948909282684326,
            0.9989587664604187,
            0.9989305734634399,
            0.9989587664604187,
            0.9989587664604187,
            0.9989587664604187,
            0.9989587664604187,
            0.998936116695404,
            0.9989587664604187,
            0.9948909282684326
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9961518049240112,
        "body": "    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "result": "passed",
        "similarities": [
            0.9961518049240112,
            0.9961518049240112,
            0.9908788800239563,
            0.9961518049240112,
            0.9908788800239563,
            0.994828462600708,
            0.9908788800239563,
            0.9908788800239563,
            0.9908788800239563,
            0.994828462600708,
            0.9961518049240112,
            0.9908788800239563,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112,
            0.9961518049240112
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9984516501426697,
        "body": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row[::-1]):\n            if value == x:\n                coordinates.append((i, len(row) - 1 - j))\n    return sorted(coordinates)",
        "result": "failed: ",
        "similarities": [
            0.9981174468994141,
            0.9974931478500366,
            0.9984516501426697,
            0.9970700144767761,
            0.9980210065841675,
            0.9975270628929138,
            0.9974241852760315,
            0.9984319806098938,
            0.9980946779251099,
            0.9980847239494324,
            0.9973835349082947,
            0.9979709982872009,
            0.9981174468994141,
            0.9971500039100647,
            0.9958494305610657,
            0.9984516501426697,
            0.9980946779251099,
            0.9980946779251099,
            0.9975243806838989,
            0.9980210065841675
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9980366230010986,
        "body": "    if not array:\n        return []\n\n    sorted_array = array[:]\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array",
        "result": "passed",
        "similarities": [
            0.9974818229675293,
            0.9979538321495056,
            0.995636522769928,
            0.9979651570320129,
            0.9980366230010986,
            0.9971153140068054,
            0.995636522769928,
            0.9906891584396362,
            0.9977939128875732,
            0.9979538321495056,
            0.9979538321495056,
            0.9979538321495056,
            0.9974818229675293,
            0.9977939128875732,
            0.9971398115158081,
            0.9977939128875732,
            0.9965676069259644,
            0.9977883696556091,
            0.9963804483413696,
            0.997869074344635
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9972012042999268,
        "body": "    result = []\n    for char in s:\n        if char.isalpha():\n            shift = (2 * 2) % 26\n            if char.islower():\n                result.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))\n            else:\n                result.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)",
        "result": "passed",
        "similarities": [
            0.9972012042999268,
            0.996470034122467,
            0.9967542290687561,
            0.9960237145423889,
            0.994487464427948,
            0.9951067566871643,
            0.9966493844985962,
            0.9968257546424866,
            0.9959744811058044,
            0.9972012042999268,
            0.9950425028800964,
            0.9972012042999268,
            0.99517822265625,
            0.9968257546424866,
            0.9972012042999268,
            0.9957700967788696,
            0.9968217611312866,
            0.9958587288856506,
            0.9958337545394897,
            0.9960653185844421
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9966788291931152,
        "body": "    if len(lst) < 2:\n        return None\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]",
        "result": "passed",
        "similarities": [
            0.996566653251648,
            0.9966035485267639,
            0.9923830628395081,
            0.996566653251648,
            0.996566653251648,
            0.996566653251648,
            0.9911494255065918,
            0.996207594871521,
            0.9964206218719482,
            0.9961491823196411,
            0.9960134625434875,
            0.9966788291931152,
            0.9960786700248718,
            0.9964206218719482,
            0.9857910871505737,
            0.9887881875038147,
            0.996207594871521,
            0.9966035485267639,
            0.996566653251648,
            0.9881241321563721
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9973024129867554,
        "body": "    sentences = S.split('.')\n    bored_count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    return bored_count",
        "result": "failed: Test 2",
        "similarities": [
            0.9972873330116272,
            0.9973024129867554,
            0.9972873330116272,
            0.9937990307807922,
            0.9971911907196045,
            0.9949817657470703,
            0.9972873330116272,
            0.9972873330116272,
            0.9948462247848511,
            0.9972246885299683,
            0.9961569905281067,
            0.9948030710220337,
            0.9961569905281067,
            0.9963161945343018,
            0.9972559213638306,
            0.9972246885299683,
            0.9952508211135864,
            0.994378924369812,
            0.9951466917991638,
            0.9949817657470703
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9969360828399658,
        "body": "    if all(isinstance(i, int) for i in [x, y, z]):\n        return (x + y == z) or (x + z == y) or (y + z == x)\n    return False",
        "result": "passed",
        "similarities": [
            0.9913894534111023,
            0.9969360828399658,
            0.9966306090354919,
            0.9966306090354919,
            0.9966306090354919,
            0.9965482354164124,
            0.9969360828399658,
            0.9963845610618591,
            0.9913894534111023,
            0.9966251850128174,
            0.9962903261184692,
            0.9965135455131531,
            0.993844211101532,
            0.9966305494308472,
            0.9966305494308472,
            0.993844211101532,
            0.9966306090354919,
            0.9913894534111023,
            0.993844211101532,
            0.993844211101532
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9955494403839111,
        "body": "    vowels = 'aeiou'\n    shifted_vowels = {v: chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}\n    shifted_vowels.update({v.upper(): shifted_vowels[v].upper() for v in vowels})\n    \n        if c.isalpha():\n            if c.lower() in shifted_vowels:\n                return shifted_vowels[c]\n            else:\n                return c.swapcase()\n        else:\n            return c\n    \n    return ''.join(swap_case_and_replace_vowel(c) for c in message)",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9944058656692505,
            0.9949327707290649,
            0.9931655526161194,
            0.9947750568389893,
            0.9952762126922607,
            0.9942774772644043,
            0.9912475943565369,
            0.9944409132003784,
            0.9955494403839111,
            0.9918634295463562,
            0.9951673746109009,
            0.9932309985160828,
            0.9871635437011719,
            0.9933943748474121,
            0.9906063079833984,
            0.9954771995544434,
            0.9944057464599609,
            0.9911952614784241,
            0.990152895450592,
            0.995147705078125
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9988076090812683,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9987779259681702,
            0.9987779259681702,
            0.9987672567367554,
            0.9978427886962891,
            0.9975431561470032,
            0.997776210308075,
            0.9987423419952393,
            0.9987779259681702,
            0.9955964684486389,
            0.9977792501449585,
            0.9987423419952393,
            0.998565673828125,
            0.9985135793685913,
            0.9988076090812683,
            0.9987423419952393,
            0.9987672567367554,
            0.998565673828125,
            0.9987779259681702,
            0.997776210308075,
            0.9955721497535706
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9975987672805786,
        "body": "    if not d:\n        return False\n    keys = list(d.keys())\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    return all_lower or all_upper",
        "result": "failed: name 'd' is not defined",
        "similarities": [
            0.9962642192840576,
            0.9969987273216248,
            0.9942225217819214,
            0.9962642192840576,
            0.9973527789115906,
            0.9975987672805786,
            0.9968515634536743,
            0.9975872039794922,
            0.9971939921379089,
            0.9944741129875183,
            0.9972899556159973,
            0.9975987672805786,
            0.9957256317138672,
            0.9968603253364563,
            0.9975987672805786,
            0.9968980550765991,
            0.9945107698440552,
            0.9975987672805786,
            0.99643474817276,
            0.9970247149467468
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9952282309532166,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    prime_numbers = []\n    for num in range(2, n):\n        if is_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers",
        "result": "failed: local variable 'num' referenced before assignment",
        "similarities": [
            0.9948161244392395,
            0.9950677752494812,
            0.9859970808029175,
            0.9950011372566223,
            0.9948161244392395,
            0.9951027631759644,
            0.9952282309532166,
            0.9837632775306702,
            0.9951027631759644,
            0.9854993224143982,
            0.9861196279525757,
            0.9921475648880005,
            0.9856393933296204,
            0.9921271800994873,
            0.9951444268226624,
            0.9950039386749268,
            0.9950039386749268,
            0.9950011372566223,
            0.9920806884765625,
            0.9950003623962402
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9989015460014343,
        "body": "    return (a % 10) * (b % 10)",
        "result": "passed",
        "similarities": [
            0.9989015460014343,
            0.9989015460014343,
            0.9989015460014343,
            0.9989015460014343,
            0.9989015460014343,
            0.997437059879303,
            0.997437059879303,
            0.9989015460014343,
            0.9989015460014343,
            0.9989015460014343,
            0.997437059879303,
            0.9989015460014343,
            0.9989015460014343,
            0.997437059879303,
            0.9989015460014343,
            0.9989015460014343,
            0.997437059879303,
            0.9989015460014343,
            0.9989015460014343,
            0.997437059879303
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9940595030784607,
        "body": "    uppercase_vowels = \"AEIOU\"\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in uppercase_vowels)",
        "result": "passed",
        "similarities": [
            0.991316020488739,
            0.989638090133667,
            0.9911790490150452,
            0.989638090133667,
            0.9890758395195007,
            0.9912505745887756,
            0.9915209412574768,
            0.9940595030784607,
            0.9911790490150452,
            0.9937735199928284,
            0.993452250957489,
            0.9940085411071777,
            0.9940085411071777,
            0.991858959197998,
            0.989638090133667,
            0.993452250957489,
            0.992503821849823,
            0.989367663860321,
            0.9909260272979736,
            0.9909260272979736
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9923844933509827,
        "body": "import math\n\n    num = float(value)\n    if abs(num - round(num)) == 0.5:\n        return int(math.ceil(num) if num > 0 else math.floor(num))\n    return round(num)",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9912053346633911,
            0.9910363554954529,
            0.9909647703170776,
            0.9923844933509827,
            0.990100085735321,
            0.9899162650108337,
            0.9910655617713928,
            0.9558205008506775,
            0.9899892210960388,
            0.9865452647209167,
            0.9917418956756592,
            0.9914908409118652,
            0.9908537864685059,
            0.990100085735321,
            0.9899892210960388,
            0.990100085735321,
            0.9912053346633911,
            0.9916138052940369,
            0.9910363554954529,
            0.9547271728515625
        ]
    },
    "HumanEval/100": {
        "similarity": 0.999963641166687,
        "body": "    pile = []\n    current_stones = n\n    for i in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile",
        "result": "passed",
        "similarities": [
            0.9998550415039062,
            0.9999143481254578,
            0.999963641166687,
            0.999963641166687,
            0.9998189210891724,
            0.9999143481254578,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.9999143481254578,
            0.999963641166687,
            0.999963641166687,
            0.999963641166687,
            0.9999143481254578
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9969815611839294,
        "body": "    return s.replace(',', ' ').split()",
        "result": "passed",
        "similarities": [
            0.9950027465820312,
            0.9969815611839294,
            0.9833092093467712,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9969815611839294,
            0.9923814535140991,
            0.9950027465820312,
            0.9969815611839294,
            0.9950027465820312,
            0.9969815611839294,
            0.9923814535140991
        ]
    },
    "HumanEval/102": {
        "similarity": 0.999631404876709,
        "body": "    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "result": "passed",
        "similarities": [
            0.9996292591094971,
            0.998636782169342,
            0.998636782169342,
            0.999631404876709,
            0.9996291995048523,
            0.9996312856674194,
            0.9996291995048523,
            0.9996312856674194,
            0.999631404876709,
            0.999631404876709,
            0.999631404876709,
            0.999631404876709,
            0.9996291995048523,
            0.9979720115661621,
            0.9996291995048523,
            0.999631404876709,
            0.9996292591094971,
            0.9996312856674194,
            0.9996291995048523,
            0.998636782169342
        ]
    },
    "HumanEval/103": {
        "similarity": 0.998805582523346,
        "body": "    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)",
        "result": "passed",
        "similarities": [
            0.9978967308998108,
            0.9981501698493958,
            0.998805582523346,
            0.998789370059967,
            0.9978967308998108,
            0.998789370059967,
            0.998805582523346,
            0.998805582523346,
            0.998805582523346,
            0.9981501698493958,
            0.998789370059967,
            0.9978967308998108,
            0.9978967308998108,
            0.998789370059967,
            0.9978967308998108,
            0.9978967308998108,
            0.998805582523346,
            0.998789370059967,
            0.998789370059967,
            0.9978967308998108
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9930505156517029,
        "body": "        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    result = [num for num in x if has_only_odd_digits(num)]\n    return sorted(result)",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9916399717330933,
            0.9927589297294617,
            0.989878237247467,
            0.989878237247467,
            0.9869033694267273,
            0.9834107160568237,
            0.9922035932540894,
            0.9912614226341248,
            0.989878237247467,
            0.9904757142066956,
            0.9927589297294617,
            0.9926301836967468,
            0.989878237247467,
            0.9916399717330933,
            0.9860784411430359,
            0.9927589297294617,
            0.9924402832984924,
            0.989878237247467,
            0.9930505156517029,
            0.9869033694267273
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9941824078559875,
        "body": "    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_filtered_sorted_arr = filtered_sorted_arr[::-1]\n    result = [digit_names[num - 1] for num in reversed_filtered_sorted_arr]\n    return result",
        "result": "passed",
        "similarities": [
            0.9941824078559875,
            0.9896928071975708,
            0.9883739948272705,
            0.9856948852539062,
            0.9863143563270569,
            0.9901912212371826,
            0.9889823794364929,
            0.9920658469200134,
            0.9938477277755737,
            0.9895117878913879,
            0.9939627647399902,
            0.9923396706581116,
            0.9922605156898499,
            0.9897677898406982,
            0.9892176389694214,
            0.9911903738975525,
            0.9941440224647522,
            0.9902377128601074,
            0.9854334592819214,
            0.993513822555542
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9980292320251465,
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "result": "passed",
        "similarities": [
            0.9975883364677429,
            0.9980292320251465,
            0.9975883364677429,
            0.9961254596710205,
            0.9969640970230103,
            0.9954543709754944,
            0.9975635409355164,
            0.9960048198699951,
            0.9969640970230103,
            0.9975883364677429,
            0.9975635409355164,
            0.9963902235031128,
            0.9975883364677429,
            0.996934175491333,
            0.9975635409355164,
            0.9954543709754944,
            0.9954543709754944,
            0.9975883364677429,
            0.9980292320251465,
            0.9975635409355164
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9990102052688599,
        "body": "    count_even = 0\n    count_odd = 0\n    \n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)",
        "result": "passed",
        "similarities": [
            0.9987861514091492,
            0.9987861514091492,
            0.9989650249481201,
            0.9985864758491516,
            0.9988484978675842,
            0.9989327192306519,
            0.9988104104995728,
            0.9989359974861145,
            0.9988484978675842,
            0.9989457726478577,
            0.9987364411354065,
            0.9986568093299866,
            0.9989650249481201,
            0.9990102052688599,
            0.9989457726478577,
            0.9989650249481201,
            0.9989650249481201,
            0.9990102052688599,
            0.998754620552063,
            0.9989029765129089
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9961546659469604,
        "body": "        if n >= 0:\n            return sum(int(digit) for digit in str(n))\n        else:\n            digits = [int(d) for d in str(-n)]\n            digits[0] *= -1\n            return sum(digits)\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)",
        "result": "failed: unexpected indent (<string>, line 12)",
        "similarities": [
            0.974741518497467,
            0.974741518497467,
            0.9958368539810181,
            0.9950464367866516,
            0.9928414225578308,
            0.9958368539810181,
            0.9958368539810181,
            0.9950463175773621,
            0.9960129261016846,
            0.9958368539810181,
            0.9958368539810181,
            0.995579183101654,
            0.9961546659469604,
            0.9961234927177429,
            0.9955309629440308,
            0.9958368539810181,
            0.995579183101654,
            0.9950464367866516,
            0.995579183101654,
            0.9958129525184631
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9985677003860474,
        "body": "    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        if all(arr[j] <= arr[(j + 1) % n] for j in range(n)):\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9958131909370422,
            0.9948694109916687,
            0.9981934428215027,
            0.9985675811767578,
            0.9984228014945984,
            0.9984228014945984,
            0.9984556436538696,
            0.9985677003860474,
            0.9984556436538696,
            0.9985675811767578,
            0.9980840086936951,
            0.9985675811767578,
            0.9985675811767578,
            0.9984556436538696,
            0.9984228014945984,
            0.9984228014945984,
            0.9984228014945984,
            0.9959849119186401,
            0.9976214170455933,
            0.9984228014945984
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9993497133255005,
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    return \"YES\" if odd_count <= even_count_in_lst2 else \"NO\"",
        "result": "passed",
        "similarities": [
            0.999284029006958,
            0.999314546585083,
            0.999284029006958,
            0.9992465972900391,
            0.9992465972900391,
            0.9992249011993408,
            0.9988459348678589,
            0.9992841482162476,
            0.999122142791748,
            0.9992249011993408,
            0.999128520488739,
            0.9992465972900391,
            0.9991139769554138,
            0.9992249011993408,
            0.999122142791748,
            0.9971765279769897,
            0.9991759061813354,
            0.999122142791748,
            0.9993497133255005,
            0.9971831440925598
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9982560873031616,
        "body": "    if not test:\n        return {}\n    \n    letters = test.split()\n    letter_counts = {}\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    max_count = max(letter_counts.values(), default=0)\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}",
        "result": "passed",
        "similarities": [
            0.9979197978973389,
            0.997605562210083,
            0.9930775165557861,
            0.9979473948478699,
            0.997450590133667,
            0.9953679442405701,
            0.9981099367141724,
            0.9979838132858276,
            0.9981591105461121,
            0.9976646900177002,
            0.9980853199958801,
            0.9979264140129089,
            0.9945579171180725,
            0.9982560873031616,
            0.9948883056640625,
            0.9977455139160156,
            0.9963186383247375,
            0.9980795979499817,
            0.9980795979499817,
            0.9975788593292236
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9992059469223022,
        "body": "    result = ''.join(char for char in s if char not in c)\n    return (result, result == result[::-1])",
        "result": "passed",
        "similarities": [
            0.9992059469223022,
            0.9975791573524475,
            0.9991110563278198,
            0.9992059469223022,
            0.9991110563278198,
            0.9991110563278198,
            0.9992059469223022,
            0.9992059469223022,
            0.9992059469223022,
            0.999110996723175,
            0.9992059469223022,
            0.9992059469223022,
            0.999110996723175,
            0.9992059469223022,
            0.9992059469223022,
            0.999110996723175,
            0.9991110563278198,
            0.9928063154220581,
            0.9991110563278198,
            0.9992059469223022
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9976909160614014,
        "body": "    return [f\"the number of odd elements {sum(1 for char in s if int(char) % 2 != 0)}n the str{s.index(s)+1}ng {s.index(s)+1} of the {s.index(s)+1}nput.\" for s in lst]",
        "result": "failed: Test 1",
        "similarities": [
            0.9976909160614014,
            0.9962602257728577,
            0.9962602257728577,
            0.9947813749313354,
            0.9976909160614014,
            0.9976909160614014,
            0.9976909160614014,
            0.9976909160614014,
            0.9976909160614014,
            0.9949790835380554,
            0.9976909160614014,
            0.9976909160614014,
            0.9976909160614014,
            0.9962602257728577,
            0.9962602257728577,
            0.9946110248565674,
            0.9976909160614014,
            0.9976909160614014,
            0.9923491477966309,
            0.9925837516784668
        ]
    },
    "HumanEval/114": {
        "similarity": 0.996177077293396,
        "body": "    if not nums:\n        return 0\n    \n    current_sum = min_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
        "result": "passed",
        "similarities": [
            0.9927709698677063,
            0.9959225058555603,
            0.996177077293396,
            0.9943856000900269,
            0.9959096312522888,
            0.9959096312522888,
            0.9927709698677063,
            0.994975745677948,
            0.9927709698677063,
            0.9961459636688232,
            0.9898748993873596,
            0.9945134520530701,
            0.9959096312522888,
            0.9945134520530701,
            0.9928462505340576,
            0.9928462505340576,
            0.9928462505340576,
            0.9959225058555603,
            0.9959096312522888,
            0.9810072183609009
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9992073774337769,
        "body": "    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error",
        "similarities": [
            0.9992073774337769,
            0.9981051087379456,
            0.9992073774337769,
            0.9992073774337769,
            0.9992073774337769,
            0.9992073774337769,
            0.9988315105438232,
            0.9992073774337769,
            0.9992073774337769,
            0.9992073774337769,
            0.9988315105438232,
            0.9988315105438232,
            0.9992073774337769,
            0.9932982921600342,
            0.9992073774337769,
            0.9992073774337769,
            0.9992073774337769,
            0.9991933703422546,
            0.9992073774337769,
            0.9962611198425293
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9989726543426514,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9804756045341492,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514,
            0.9989726543426514
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9990178346633911,
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in \"aeiou\" and char.isalpha())\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "similarities": [
            0.9981101155281067,
            0.9978997111320496,
            0.9989748597145081,
            0.998124361038208,
            0.9985741376876831,
            0.9989748597145081,
            0.9990178346633911,
            0.9972671866416931,
            0.9988672137260437,
            0.9990178346633911,
            0.9988126158714294,
            0.9974557757377625,
            0.997536838054657,
            0.9960795044898987,
            0.9984514117240906,
            0.9990178346633911,
            0.9990177154541016,
            0.9990177154541016,
            0.9989748597145081,
            0.9979414939880371
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9998534321784973,
        "body": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed",
        "similarities": [
            0.9998534321784973,
            0.9991704225540161,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9991704225540161,
            0.9998534321784973,
            0.9991704225540161,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973,
            0.9998534321784973
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9997569918632507,
        "body": "        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    first_order = lst[0] + lst[1]\n    second_order = lst[1] + lst[0]\n    return 'Yes' if is_balanced(first_order) or is_balanced(second_order) else 'No'",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.9997569918632507,
            0.9997569918632507,
            0.9987436532974243,
            0.9997569918632507,
            0.9996809959411621,
            0.9996809959411621,
            0.9997569918632507,
            0.9996809959411621,
            0.9997569918632507,
            0.9990910887718201,
            0.9997569918632507,
            0.9996315836906433,
            0.9996016621589661,
            0.9997569918632507,
            0.9996809959411621,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9993688464164734,
            0.9996809959411621
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9988143444061279,
        "body": "    return sorted(arr)[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9988142251968384,
            0.9988142251968384,
            0.9988142251968384,
            0.9988142251968384,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9988143444061279,
            0.9964619874954224,
            0.991474449634552,
            0.9988143444061279,
            0.9988142251968384,
            0.9988142251968384,
            0.9954948425292969,
            0.9954948425292969
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9990144371986389,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.9905390739440918,
            0.9988961815834045,
            0.9945568442344666,
            0.9987276792526245,
            0.9988938570022583,
            0.9990144371986389,
            0.9988961815834045,
            0.9990144371986389,
            0.9987716674804688,
            0.9990144371986389,
            0.9988961815834045,
            0.9990144371986389,
            0.9988961815834045,
            0.9988961815834045,
            0.9988961815834045,
            0.9990144371986389,
            0.9990144371986389,
            0.9987716674804688,
            0.9988961815834045,
            0.9990144371986389
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9999998211860657,
        "body": "    return sum(x for x in arr[:k] if -99 <= x <= 99)",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9977856874465942,
        "body": "    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            collatz_sequence.append(n)\n            n = 3 * n + 1\n    collatz_sequence.extend([1])\n    odd_collatz_sequence = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_collatz_sequence)",
        "result": "passed",
        "similarities": [
            0.9976802468299866,
            0.9972488880157471,
            0.9974339008331299,
            0.9977856874465942,
            0.9951376914978027,
            0.9975798726081848,
            0.9972488880157471,
            0.9963242411613464,
            0.9951376914978027,
            0.9964429140090942,
            0.9976802468299866,
            0.9939306974411011,
            0.9974339008331299,
            0.9974339008331299,
            0.9972758293151855,
            0.9975798726081848,
            0.997332751750946,
            0.9963616728782654,
            0.9975798726081848,
            0.9974339008331299
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9959794878959656,
        "body": "    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    \n    if month == 2 and day > 29:\n        return False\n    \n    return True",
        "result": "passed",
        "similarities": [
            0.9922004342079163,
            0.995219886302948,
            0.9942276477813721,
            0.9955479502677917,
            0.9947508573532104,
            0.9954966306686401,
            0.9941633939743042,
            0.995492160320282,
            0.9896512627601624,
            0.9943088889122009,
            0.9956008791923523,
            0.9948740601539612,
            0.9950926899909973,
            0.9951820373535156,
            0.9942466616630554,
            0.9871896505355835,
            0.9956443309783936,
            0.9959362745285034,
            0.9959362745285034,
            0.9959794878959656
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9995294213294983,
        "body": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)",
        "result": "failed: ",
        "similarities": [
            0.9995294213294983,
            0.9994662404060364,
            0.9993472695350647,
            0.9995294213294983,
            0.9993472695350647,
            0.9993472695350647,
            0.998305082321167,
            0.9989258646965027,
            0.9994662404060364,
            0.9995294213294983,
            0.9995294213294983,
            0.9995042681694031,
            0.9995294213294983,
            0.9995294213294983,
            0.9985247254371643,
            0.9995294213294983,
            0.9995294213294983,
            0.9986211061477661,
            0.9985247254371643,
            0.9995294213294983
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9978979229927063,
        "body": "    if len(lst) <= 1:\n        return True\n    count = 0\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] == lst[i - 1]:\n            count += 1\n            if count > 1:\n                return False\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.9964738488197327,
            0.9969554543495178,
            0.9936113953590393,
            0.9967026114463806,
            0.9963460564613342,
            0.9969762563705444,
            0.9964237213134766,
            0.9977463483810425,
            0.9957094788551331,
            0.9964686036109924,
            0.9961998462677002,
            0.997340738773346,
            0.9961525797843933,
            0.9963460564613342,
            0.9964589476585388,
            0.9978979229927063,
            0.9974887371063232,
            0.9960504174232483,
            0.9972254037857056,
            0.9963460564613342
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9991073608398438,
        "body": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9989138245582581,
            0.9989820718765259,
            0.9989138245582581,
            0.9991073608398438,
            0.9989138245582581,
            0.9989820718765259,
            0.9991073608398438,
            0.9989820718765259,
            0.9989820718765259,
            0.9990306496620178,
            0.9989138245582581,
            0.9975210428237915,
            0.9989138245582581,
            0.9989138245582581,
            0.9989820718765259,
            0.9981764554977417,
            0.9991073608398438,
            0.9991073608398438,
            0.9989820718765259,
            0.9984273314476013
        ]
    },
    "HumanEval/128": {
        "similarity": 0.999503493309021,
        "body": "    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes",
        "result": "passed",
        "similarities": [
            0.9992491006851196,
            0.9994773864746094,
            0.9994135499000549,
            0.9994773864746094,
            0.9994773864746094,
            0.999503493309021,
            0.9994773864746094,
            0.9992378950119019,
            0.9994474649429321,
            0.9991421103477478,
            0.999332845211029,
            0.9994270205497742,
            0.9994773864746094,
            0.9994773864746094,
            0.9993886351585388,
            0.9988129138946533,
            0.9991548657417297,
            0.9993460774421692,
            0.9992378950119019,
            0.9991808533668518
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9984572529792786,
        "body": "from heapq import heappop, heappush\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = []\n    \n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], [grid[i][j]], i, j))\n    \n    while pq:\n        val, path, x, y = heappop(pq)\n        \n        if len(path) == k:\n            return path\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heappush(pq, (max(val, grid[nx][ny]), new_path, nx, ny))",
        "result": "failed: unexpected indent (<string>, line 34)",
        "similarities": [
            0.9976648092269897,
            0.9969044923782349,
            0.9981886148452759,
            0.9968176484107971,
            0.9977523684501648,
            0.9981802105903625,
            0.9970014691352844,
            0.9980322122573853,
            0.9976729154586792,
            0.9974953532218933,
            0.9966027140617371,
            0.998144268989563,
            0.9973235130310059,
            0.9972420930862427,
            0.9982833862304688,
            0.997970461845398,
            0.9984572529792786,
            0.9980412721633911,
            0.9976176023483276,
            0.997772216796875
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9994317293167114,
        "body": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i / 2\n        else:\n            next_value = result[i - 1] + result[i - 2] + result[i + 1]\n        result.append(next_value)\n    \n    return result",
        "result": "failed: list index out of range",
        "similarities": [
            0.9989730715751648,
            0.9991533160209656,
            0.9977308511734009,
            0.9992802143096924,
            0.9993444681167603,
            0.9981394410133362,
            0.9991533160209656,
            0.9977231621742249,
            0.9994118213653564,
            0.9992894530296326,
            0.9993711709976196,
            0.9989722371101379,
            0.9991117715835571,
            0.9993498921394348,
            0.9994118213653564,
            0.9994317293167114,
            0.9992925524711609,
            0.999041736125946,
            0.9993730783462524,
            0.999397873878479
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9997219443321228,
        "body": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed",
        "similarities": [
            0.9997177124023438,
            0.9997197389602661,
            0.9997177124023438,
            0.9997004270553589,
            0.9997002482414246,
            0.9997197389602661,
            0.9997177124023438,
            0.9997177124023438,
            0.9997177124023438,
            0.9997197389602661,
            0.9997177124023438,
            0.9997002482414246,
            0.9997177124023438,
            0.9997219443321228,
            0.9997177124023438,
            0.9997002482414246,
            0.9997219443321228,
            0.9997197389602661,
            0.9997219443321228,
            0.9997219443321228
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9991434812545776,
        "body": "    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    return nested and not stack",
        "result": "failed: ",
        "similarities": [
            0.998957097530365,
            0.9988649487495422,
            0.9990247488021851,
            0.9988546967506409,
            0.998908281326294,
            0.9989597201347351,
            0.998957097530365,
            0.998876690864563,
            0.9986820220947266,
            0.9973008036613464,
            0.9991434812545776,
            0.9988546967506409,
            0.9991434812545776,
            0.9989266991615295,
            0.9963091611862183,
            0.998957097530365,
            0.9988546967506409,
            0.9989343285560608,
            0.9985948801040649,
            0.9988649487495422
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9999169707298279,
        "body": "import math\n\n    return sum(math.ceil(x) ** 2 for x in lst)",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9997515678405762,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9993249773979187,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9993249773979187,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279,
            0.9999169707298279
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9974297881126404,
        "body": "    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9943592548370361,
            0.9959110617637634,
            0.9974297881126404,
            0.9939824342727661,
            0.9971393942832947,
            0.9967246651649475,
            0.9939824342727661,
            0.9967281818389893,
            0.994470477104187,
            0.9974297881126404,
            0.9974297881126404,
            0.9974297881126404,
            0.994404137134552,
            0.9929611682891846,
            0.9974297881126404,
            0.9974297881126404,
            0.9974297285079956,
            0.9944042563438416,
            0.9974297881126404,
            0.9974297881126404
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9999081492424011,
        "body": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9992414116859436,
            0.9999081492424011,
            0.9999081492424011,
            0.9998918175697327,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9992414116859436,
            0.999783992767334,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011,
            0.9999081492424011
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9986415505409241,
        "body": "    negative_ints = [x for x in lst if x < 0]\n    positive_ints = [x for x in lst if x > 0]\n\n    a = max(negative_ints) if negative_ints else None\n    b = min(positive_ints) if positive_ints else None\n\n    return (a, b)",
        "result": "passed",
        "similarities": [
            0.9973728656768799,
            0.998093843460083,
            0.9986415505409241,
            0.9974467754364014,
            0.9981840252876282,
            0.9986415505409241,
            0.9981884360313416,
            0.9983109831809998,
            0.9947026968002319,
            0.9985443949699402,
            0.9981884360313416,
            0.9983109831809998,
            0.9985443949699402,
            0.9981884360313416,
            0.9962152242660522,
            0.9973286986351013,
            0.9962152242660522,
            0.9974279999732971,
            0.9976444244384766,
            0.9981884360313416
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9972423911094666,
        "body": "        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n\n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n\n    if parsed_a == parsed_b:\n        return None\n    elif parsed_a > parsed_b:\n        return a\n    else:\n        return b",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9876123070716858,
            0.9967902302742004,
            0.9968701601028442,
            0.9961529970169067,
            0.9956409931182861,
            0.9953440427780151,
            0.994785487651825,
            0.9967902302742004,
            0.9970091581344604,
            0.9936737418174744,
            0.9969574809074402,
            0.9970170259475708,
            0.9969951510429382,
            0.9876123070716858,
            0.9969951510429382,
            0.9952540993690491,
            0.9969951510429382,
            0.9970186352729797,
            0.9972423911094666,
            0.9961529970169067
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9995633363723755,
        "body": "    return n >= 8 and n % 2 == 0",
        "result": "passed",
        "similarities": [
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9959014058113098,
            0.9995633363723755,
            0.9995633363723755,
            0.9950639009475708,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755,
            0.9995633363723755
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9977883100509644,
        "body": "    result = 1\n    for i in range(1, n + 1):\n        result *= i * factorial(i - 1)\n    return result",
        "result": "failed: name 'factorial' is not defined",
        "similarities": [
            0.997064471244812,
            0.9977883100509644,
            0.997604489326477,
            0.997064471244812,
            0.997064471244812,
            0.9977881908416748,
            0.996968150138855,
            0.9954811930656433,
            0.996968150138855,
            0.9977676272392273,
            0.996968150138855,
            0.996968150138855,
            0.9977676272392273,
            0.9954811930656433,
            0.9954811930656433,
            0.996653139591217,
            0.9976770281791687,
            0.9954811930656433,
            0.9965711832046509,
            0.996968150138855
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9859870076179504,
        "body": "    result = []\n    space_count = 0\n\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            result.append(char)\n            space_count = 0\n\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n\n    return ''.join(result)",
        "result": "passed",
        "similarities": [
            0.9660688042640686,
            0.985940158367157,
            0.9635021686553955,
            0.9854341149330139,
            0.9851559996604919,
            0.9851559996604919,
            0.985940158367157,
            0.9849837422370911,
            0.983569324016571,
            0.9851559996604919,
            0.968275785446167,
            0.9858319163322449,
            0.9791826009750366,
            0.9859611392021179,
            0.9859870076179504,
            0.9667950868606567,
            0.9859870076179504,
            0.9848905801773071,
            0.9854843020439148,
            0.9618771076202393
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9944170117378235,
        "body": "import re\n\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not re.match(r'^[a-zA-Z]', name) or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9905235171318054,
            0.9944170117378235,
            0.9905235171318054,
            0.9902867674827576,
            0.9923945069313049,
            0.9905235171318054,
            0.9905235171318054,
            0.9905235171318054,
            0.9921330809593201,
            0.9935317635536194,
            0.9891368746757507,
            0.9905235171318054,
            0.991163969039917,
            0.9917319416999817,
            0.9920212626457214,
            0.9926148653030396,
            0.9935317635536194,
            0.9926172494888306,
            0.9935317635536194,
            0.9908041954040527
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9955727458000183,
        "body": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n    return total_sum",
        "result": "failed: ",
        "similarities": [
            0.9955159425735474,
            0.9945025444030762,
            0.9946488738059998,
            0.9946290254592896,
            0.9890265464782715,
            0.9946725964546204,
            0.9946861267089844,
            0.9945854544639587,
            0.9879351258277893,
            0.9879351258277893,
            0.9946488738059998,
            0.9890265464782715,
            0.9947962760925293,
            0.9890265464782715,
            0.9890265464782715,
            0.9946725964546204,
            0.9946290254592896,
            0.9946488738059998,
            0.9955727458000183,
            0.9955727458000183
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9991689920425415,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9991689920425415,
            0.9989094138145447,
            0.994670569896698,
            0.9991689920425415,
            0.9991689920425415,
            0.9977770447731018,
            0.9991617798805237,
            0.9991689920425415,
            0.9991617798805237,
            0.9986764192581177,
            0.9991689920425415,
            0.9991617798805237,
            0.9989094138145447,
            0.999043345451355,
            0.9986724853515625,
            0.9988939166069031,
            0.994670569896698,
            0.9986724853515625,
            0.9991617798805237,
            0.9991689920425415
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9982374906539917,
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    result_num = num_x * num_n\n    result_den = den_x * den_n\n    return result_num % result_den == 0",
        "result": "passed",
        "similarities": [
            0.9981809258460999,
            0.9981809258460999,
            0.9936250448226929,
            0.9976035952568054,
            0.9981297850608826,
            0.9969436526298523,
            0.9965795278549194,
            0.9976035952568054,
            0.9976350665092468,
            0.9969586133956909,
            0.9912842512130737,
            0.9976350665092468,
            0.9981809258460999,
            0.9974507689476013,
            0.9975703358650208,
            0.9976035952568054,
            0.9962134957313538,
            0.9982374906539917,
            0.9981809258460999,
            0.9982253909111023
        ]
    },
    "HumanEval/145": {
        "similarity": 1.0,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9985647797584534,
        "body": "    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9979748129844666,
            0.9944944977760315,
            0.9982475638389587,
            0.9975197315216064,
            0.9985647797584534,
            0.9979748129844666,
            0.9985529184341431,
            0.9967230558395386,
            0.9945437908172607,
            0.9985647797584534,
            0.9979285001754761,
            0.9982475638389587,
            0.9985647797584534,
            0.9979997277259827,
            0.9985647797584534,
            0.9949342608451843,
            0.9982475638389587,
            0.9985529184341431,
            0.9979748129844666,
            0.9982475638389587
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9999719262123108,
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9998012185096741,
            0.9999719262123108,
            0.9998847842216492,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108,
            0.9998847842216492,
            0.9999719262123108,
            0.9998847842216492,
            0.9999719262123108,
            0.9999719262123108,
            0.9999719262123108
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9981545209884644,
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])",
        "result": "passed",
        "similarities": [
            0.9960228800773621,
            0.9959022998809814,
            0.9954317212104797,
            0.9973646402359009,
            0.9962368011474609,
            0.9972602725028992,
            0.9974414706230164,
            0.9963263273239136,
            0.9973419904708862,
            0.9981545209884644,
            0.9975992441177368,
            0.9972602725028992,
            0.9978486895561218,
            0.9977300763130188,
            0.9975422620773315,
            0.997259259223938,
            0.9979681968688965,
            0.9973419904708862,
            0.9973644614219666,
            0.9979681968688965
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9967222809791565,
        "body": "    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "similarities": [
            0.9967222809791565,
            0.9967222809791565,
            0.9962469339370728,
            0.9962469339370728,
            0.9887980222702026,
            0.98724365234375,
            0.9967222809791565,
            0.9936310648918152,
            0.9959518909454346,
            0.9967222809791565,
            0.9967222809791565,
            0.996246874332428,
            0.9967222809791565,
            0.9967222809791565,
            0.9967222809791565,
            0.9960306882858276,
            0.9951928853988647,
            0.9967222809791565,
            0.9962469339370728,
            0.988254964351654
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9980878233909607,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    return x if is_prime(n) else y",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9980878233909607,
            0.9980878233909607,
            0.9980878233909607,
            0.9978523254394531,
            0.9980878233909607,
            0.9914906024932861,
            0.9978523254394531,
            0.9978523254394531,
            0.9980878233909607,
            0.9935537576675415,
            0.9980878233909607,
            0.9980878233909607,
            0.9927064180374146,
            0.9980878233909607,
            0.9927064180374146,
            0.9980878233909607,
            0.9980878233909607,
            0.9975550770759583,
            0.9968652129173279,
            0.9971750378608704
        ]
    },
    "HumanEval/151": {
        "similarity": 0.999783992767334,
        "body": "    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.999783992767334,
            0.999783992767334,
            0.999783992767334,
            0.9963374733924866,
            0.9997345805168152,
            0.999783992767334,
            0.9996587038040161,
            0.999783992767334,
            0.999783992767334,
            0.999783992767334,
            0.9997345805168152,
            0.999783992767334,
            0.999783992767334,
            0.999783992767334,
            0.999783992767334,
            0.9997043609619141,
            0.999783992767334,
            0.999783992767334,
            0.999783992767334,
            0.999783992767334
        ]
    },
    "HumanEval/152": {
        "similarity": 0.999582827091217,
        "body": "    return [abs(g - s) for g, s in zip(guess, game)]",
        "result": "passed",
        "similarities": [
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.9984961152076721,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.999582827091217,
            0.9971587657928467,
            0.999582827091217,
            0.9971588850021362,
            0.999582827091217,
            0.999582827091217
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9993268847465515,
        "body": "    strongest_extension = ''\n    highest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > highest_strength or (strength == highest_strength and strongest_extension == ''):\n            strongest_extension = extension\n            highest_strength = strength\n    \n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "similarities": [
            0.9990471601486206,
            0.9992130994796753,
            0.9993098378181458,
            0.9989820718765259,
            0.9992335438728333,
            0.9991310834884644,
            0.9993098378181458,
            0.9992895722389221,
            0.9990681409835815,
            0.9993158578872681,
            0.9993098378181458,
            0.9989500641822815,
            0.9992406964302063,
            0.9979111552238464,
            0.9992001056671143,
            0.9984865784645081,
            0.999172031879425,
            0.9989820718765259,
            0.9993268847465515,
            0.9992485046386719
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9948604106903076,
        "body": "    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9914930462837219,
            0.9914930462837219,
            0.9914930462837219,
            0.9928641319274902,
            0.9942245483398438,
            0.9914930462837219,
            0.9928641319274902,
            0.9925622344017029,
            0.9934992790222168,
            0.9914930462837219,
            0.9928038716316223,
            0.9942245483398438,
            0.9914930462837219,
            0.9942245483398438,
            0.992630124092102,
            0.9895801544189453,
            0.9948604106903076,
            0.9928038716316223,
            0.9928038716316223,
            0.9914930462837219
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9952531456947327,
        "body": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)",
        "result": "passed",
        "similarities": [
            0.9933981895446777,
            0.993698000907898,
            0.9938713908195496,
            0.9934521913528442,
            0.9938713908195496,
            0.9909701943397522,
            0.9948350787162781,
            0.992572009563446,
            0.9951061606407166,
            0.9934991598129272,
            0.9934991598129272,
            0.9938713908195496,
            0.9938713908195496,
            0.9933981895446777,
            0.9934521913528442,
            0.9933981895446777,
            0.9952531456947327,
            0.9952531456947327,
            0.9934991598129272,
            0.9933088421821594
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9983944296836853,
        "body": "    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral",
        "result": "passed",
        "similarities": [
            0.9908837676048279,
            0.9982149004936218,
            0.9982149004936218,
            0.9982149004936218,
            0.9983944296836853,
            0.9982010722160339,
            0.9982149004936218,
            0.9983944296836853,
            0.9982010722160339,
            0.9983944296836853,
            0.9982010722160339,
            0.9983944296836853,
            0.9983944296836853,
            0.9982149004936218,
            0.9908837676048279,
            0.9983944296836853,
            0.9908837676048279,
            0.9982149004936218,
            0.9983944296836853,
            0.9983922243118286
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9996187090873718,
        "body": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "result": "passed",
        "similarities": [
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9927560687065125,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718,
            0.9996187090873718
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9991469383239746,
        "body": "    if not words:\n        return \"\"\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word",
        "result": "passed",
        "similarities": [
            0.9990790486335754,
            0.9978675842285156,
            0.9990979433059692,
            0.9979938864707947,
            0.9990790486335754,
            0.9990790486335754,
            0.9990790486335754,
            0.9991469383239746,
            0.9991469383239746,
            0.9990790486335754,
            0.9990790486335754,
            0.9991058707237244,
            0.9991214275360107,
            0.9990843534469604,
            0.997841477394104,
            0.9991469383239746,
            0.9990790486335754,
            0.9991469383239746,
            0.9991469383239746,
            0.9991469383239746
        ]
    },
    "HumanEval/159": {
        "similarity": 0.999248206615448,
        "body": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed",
        "similarities": [
            0.999248206615448,
            0.999248206615448,
            0.9990530610084534,
            0.999248206615448,
            0.999248206615448,
            0.999248206615448,
            0.999248206615448,
            0.999248206615448,
            0.9959710836410522,
            0.9959710836410522,
            0.999248206615448,
            0.999248206615448,
            0.999248206615448,
            0.9990316033363342,
            0.999248206615448,
            0.999248206615448,
            0.999248206615448,
            0.9959710836410522,
            0.9990316033363342,
            0.999248206615448
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9905738830566406,
        "body": "import operator as op\n\n    ops = {'+': op.add, '-': op.sub, '*': op.mul, '//': op.floordiv, '**': op.pow}\n    result = operand[0]\n    for i, symbol in enumerate(operator):\n        result = ops[symbol](result, operand[i + 1])\n    return result",
        "result": "failed: unexpected indent (<string>, line 29)",
        "similarities": [
            0.9882364869117737,
            0.9905738830566406,
            0.9881504774093628,
            0.9855862855911255,
            0.9893129467964172,
            0.9884955883026123,
            0.9884644746780396,
            0.9841208457946777,
            0.9884955883026123,
            0.98431396484375,
            0.9855862855911255,
            0.9841208457946777,
            0.9882364869117737,
            0.9841208457946777,
            0.9882364869117737,
            0.9882364869117737,
            0.9882364869117737,
            0.9841208457946777,
            0.9884955883026123,
            0.9822739362716675
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9998484253883362,
        "body": "    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]",
        "result": "passed",
        "similarities": [
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9997550845146179,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.997298002243042,
            0.9998484253883362,
            0.9998484253883362,
            0.9998484253883362,
            0.9997550845146179,
            0.9998484253883362,
            0.9998484253883362
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9967262148857117,
        "body": "import hashlib\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9967262148857117,
            0.9967262148857117,
            0.9962236285209656,
            0.9967262148857117,
            0.9839587807655334,
            0.9967262148857117,
            0.9967262148857117,
            0.9964878559112549,
            0.9964878559112549,
            0.9967214465141296,
            0.9967214465141296,
            0.9967262148857117,
            0.9966248273849487,
            0.9967262148857117,
            0.9967262148857117,
            0.9962236285209656,
            0.9839587807655334,
            0.9964878559112549,
            0.9964878559112549,
            0.9839587807655334
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9942984580993652,
        "body": "    if a > b:\n        a, b = b, a\n    return [digit for digit in range(a, b + 1) if digit % 2 == 0]",
        "result": "failed: Test 1",
        "similarities": [
            0.992215633392334,
            0.985181987285614,
            0.9924334287643433,
            0.9937755465507507,
            0.9875615835189819,
            0.9914094805717468,
            0.9924334287643433,
            0.992215633392334,
            0.9938560128211975,
            0.9937755465507507,
            0.9920570254325867,
            0.9942984580993652,
            0.9920570254325867,
            0.99200838804245,
            0.9914094805717468,
            0.9869332909584045,
            0.9942343831062317,
            0.9835130572319031,
            0.9933615326881409,
            0.9941962361335754
        ]
    }
}