{
    "HumanEval/0": {
        "similarity": 0.996099591255188,
        "body": "    numbers.sort()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[j] - numbers[i]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9957088828086853,
            0.992418110370636,
            0.9944431781768799,
            0.9919702410697937,
            0.9843353629112244,
            0.9868554472923279,
            0.995615541934967,
            0.9879311919212341,
            0.9960824847221375,
            0.9957606792449951,
            0.996099591255188,
            0.9955913424491882,
            0.9914185404777527,
            0.9949682950973511,
            0.9957019686698914,
            0.9958986043930054,
            0.9955913424491882,
            0.9955913424491882,
            0.9953119158744812,
            0.9952545166015625
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9983442425727844,
        "body": "    result = []\n    group_count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            group_count += 1\n            current_group += char\n        elif char == ')':\n            group_count -= 1\n            current_group += char\n            if group_count == 0:\n                result.append(current_group)\n                current_group = ''\n        else:\n            pass\n    return result",
        "result": "passed",
        "similarities": [
            0.9981545805931091,
            0.9979392886161804,
            0.9981585144996643,
            0.9954530596733093,
            0.9973860383033752,
            0.9983442425727844,
            0.9979354739189148,
            0.9972614645957947,
            0.998235285282135,
            0.9969275593757629,
            0.9956968426704407,
            0.9961023926734924,
            0.9981672167778015,
            0.9978517293930054,
            0.997933030128479,
            0.997078537940979,
            0.9974463582038879,
            0.9978737235069275,
            0.9974764585494995,
            0.9970930814743042
        ]
    },
    "HumanEval/2": {
        "similarity": 0.996008038520813,
        "body": "    integer_part = 0\n    for i in range(int(number), -1, -1):\n        if number < (i + 1):\n            break\n        integer_part = i\n    return number - integer_part",
        "result": "failed: ",
        "similarities": [
            0.995993971824646,
            0.9921993613243103,
            0.9841515421867371,
            0.9941151142120361,
            0.9919254779815674,
            0.9945498108863831,
            0.9947140216827393,
            0.9862055778503418,
            0.9944269061088562,
            0.9957275390625,
            0.9932674765586853,
            0.9954193830490112,
            0.9955235719680786,
            0.9935624003410339,
            0.9944185018539429,
            0.9958415627479553,
            0.9959156513214111,
            0.996008038520813,
            0.9945948719978333,
            0.9955227375030518
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9995683431625366,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance <= 0:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9995683431625366,
            0.9995242953300476,
            0.9995532631874084,
            0.9995683431625366,
            0.9995242953300476,
            0.9995532631874084,
            0.9984694123268127,
            0.9989547729492188,
            0.9995683431625366,
            0.9993916749954224,
            0.9995242953300476,
            0.9995683431625366,
            0.9995683431625366,
            0.9986122846603394,
            0.9992406964302063,
            0.9995532631874084,
            0.9995683431625366,
            0.9995532631874084,
            0.9973992109298706,
            0.9986122846603394
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9938616752624512,
        "body": "    sorted_numbers = []\n    for num in numbers:\n        sorted_numbers.append(num)\n    sorted_numbers.sort()\n    n = len(sorted_numbers)\n    sum_of_abs_diffs = 0\n    median_index = (n - 1) // 2\n    for i in range(n):\n        if i == median_index:\n            continue\n        abs_diff = abs(sorted_numbers[i] - sorted_numbers[median_index])\n        sum_of_abs_diffs += abs_diff\n    mad = sum_of_abs_diffs / (n - 1)\n    return mad",
        "result": "failed: ",
        "similarities": [
            0.9929739236831665,
            0.9884406924247742,
            0.9704974293708801,
            0.982522189617157,
            0.9883045554161072,
            0.9878172874450684,
            0.9897009134292603,
            0.9936178922653198,
            0.9936937093734741,
            0.9916167259216309,
            0.9882929921150208,
            0.9888755679130554,
            0.992953360080719,
            0.9928219318389893,
            0.9899458885192871,
            0.9782126545906067,
            0.9928164482116699,
            0.9925472140312195,
            0.9922463297843933,
            0.9938616752624512
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9983555674552917,
        "body": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "result": "passed",
        "similarities": [
            0.9972649812698364,
            0.9973122477531433,
            0.9971979856491089,
            0.9964154958724976,
            0.9967414736747742,
            0.9972554445266724,
            0.9980875253677368,
            0.9973530173301697,
            0.9973106384277344,
            0.9977453947067261,
            0.9983555674552917,
            0.9978644847869873,
            0.9969863891601562,
            0.9983555674552917,
            0.9980871081352234,
            0.9952360391616821,
            0.9945803284645081,
            0.9969677329063416,
            0.9983555674552917,
            0.9971235990524292
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9982995390892029,
        "body": "    result = []\n    groups = paren_string.split()\n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "result": "passed",
        "similarities": [
            0.9932971000671387,
            0.9981558918952942,
            0.9980973601341248,
            0.9969648122787476,
            0.9974532127380371,
            0.9970536828041077,
            0.9976248741149902,
            0.9969846606254578,
            0.997507631778717,
            0.9923633933067322,
            0.9980480670928955,
            0.9966294169425964,
            0.9977900981903076,
            0.9974136352539062,
            0.9982995390892029,
            0.9976087212562561,
            0.9974391460418701,
            0.9974668622016907,
            0.9982095956802368,
            0.9975716471672058
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9985219836235046,
        "body": "    result = []\n    for s in strings:\n        if substring <= s:\n            result.append(s)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9981233477592468,
            0.9985219836235046,
            0.9981233477592468,
            0.9972795248031616,
            0.9980404376983643,
            0.9980404376983643,
            0.9976289868354797,
            0.9983546733856201,
            0.9975014925003052,
            0.9985219836235046,
            0.9955952167510986,
            0.9964887499809265,
            0.9985219836235046,
            0.9983564019203186,
            0.9984152913093567,
            0.9981233477592468,
            0.9916825890541077,
            0.9985219836235046,
            0.9982914328575134,
            0.9972501397132874
        ]
    },
    "HumanEval/8": {
        "similarity": 0.997817873954773,
        "body": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product",
        "result": "passed",
        "similarities": [
            0.9976983666419983,
            0.9973523020744324,
            0.9976520538330078,
            0.9971022605895996,
            0.9973319172859192,
            0.9977666735649109,
            0.9895744323730469,
            0.9971252083778381,
            0.9973393678665161,
            0.9972309470176697,
            0.9972013235092163,
            0.997164785861969,
            0.9963810443878174,
            0.9973762035369873,
            0.9977047443389893,
            0.997817873954773,
            0.9969375133514404,
            0.994581937789917,
            0.9970415234565735,
            0.9963369965553284
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9962733387947083,
        "body": "    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num >= max_so_far:\n            max_so_far = num\n        result.append(max_so_far)",
        "result": "failed: list index out of range",
        "similarities": [
            0.9950219988822937,
            0.9956434965133667,
            0.9962733387947083,
            0.9959009885787964,
            0.995795726776123,
            0.9962733387947083,
            0.995097815990448,
            0.9955924153327942,
            0.9843830466270447,
            0.9946264028549194,
            0.9956699013710022,
            0.9945650696754456,
            0.995292067527771,
            0.9928038716316223,
            0.9959059357643127,
            0.9948843717575073,
            0.9927950501441956,
            0.9882639646530151,
            0.9936985373497009,
            0.9948670268058777
        ]
    },
    "HumanEval/10": {
        "similarity": 0.996712327003479,
        "body": "    pal_length = 0\n    string_prefix = ''\n    for i in range(1, len(string)+1):\n        suffix = string[-i:]\n        if is_palindrome(suffix):\n            pal_length = i\n            string_prefix = string[:-i]\n        else:\n            break\n\n    return string + string[:pal_length][::-1]",
        "result": "failed: ",
        "similarities": [
            0.996712327003479,
            0.995578944683075,
            0.9925777912139893,
            0.9964057803153992,
            0.9961736798286438,
            0.9964159727096558,
            0.9938828349113464,
            0.9949625134468079,
            0.9955106377601624,
            0.9942200183868408,
            0.996343731880188,
            0.994633138179779,
            0.9961719512939453,
            0.9960765838623047,
            0.9901629090309143,
            0.9958488941192627,
            0.9960983991622925,
            0.9957396984100342,
            0.9944066405296326,
            0.9957100749015808
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9947120547294617,
        "body": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    for i in range(len(b) - len(a)):\n        result += b[len(a) + i]\n    return result",
        "result": "passed",
        "similarities": [
            0.9929813742637634,
            0.9947120547294617,
            0.9940274953842163,
            0.9942946434020996,
            0.9939081072807312,
            0.9941608309745789,
            0.9945119619369507,
            0.9912763237953186,
            0.9943633675575256,
            0.9840890765190125,
            0.9945119619369507,
            0.9941633939743042,
            0.9917711019515991,
            0.9945119619369507,
            0.9931231141090393,
            0.9905678629875183,
            0.9904218912124634,
            0.9894012808799744,
            0.9928069114685059,
            0.9821550250053406
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9976986646652222,
        "body": "    max_len = 0\n    res = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            res = s\n    return res",
        "result": "passed",
        "similarities": [
            0.9923424124717712,
            0.9976633787155151,
            0.9973900318145752,
            0.9968182444572449,
            0.9939525127410889,
            0.9964461922645569,
            0.9951068758964539,
            0.994219958782196,
            0.9974586367607117,
            0.997654139995575,
            0.9925932884216309,
            0.9976752400398254,
            0.9976335167884827,
            0.9940346479415894,
            0.9976447224617004,
            0.9974840879440308,
            0.9976986646652222,
            0.9957584738731384,
            0.9976843595504761,
            0.9955775737762451
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9948840141296387,
        "body": "    possible_values = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            possible_values.append(i)\n    max_value = 0\n    for value in possible_values:\n        if value > max_value and value <= min(a, b):\n            max_value = value\n    return max_value",
        "result": "passed",
        "similarities": [
            0.9940671324729919,
            0.9894130229949951,
            0.9890955686569214,
            0.9943480491638184,
            0.9904861450195312,
            0.9931777119636536,
            0.9918376803398132,
            0.9919734597206116,
            0.9940414428710938,
            0.9947158694267273,
            0.9881879091262817,
            0.9898690581321716,
            0.9936834573745728,
            0.9948840141296387,
            0.9943639636039734,
            0.9935346245765686,
            0.9916536211967468,
            0.9929015636444092,
            0.9941830039024353,
            0.9858694672584534
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9973307251930237,
        "body": "    result = []\n    for length in range(1, len(string) + 1):\n        prefix = string[:length]\n        if len(prefix) < len(string):\n            result.append(prefix)\n    return sorted(result)",
        "result": "failed: ",
        "similarities": [
            0.9940240979194641,
            0.9942374229431152,
            0.995601236820221,
            0.9973307251930237,
            0.9944258332252502,
            0.9958085417747498,
            0.9960284233093262,
            0.9958910942077637,
            0.9947856068611145,
            0.9971382021903992,
            0.9964346885681152,
            0.9972262978553772,
            0.9970801472663879,
            0.9970801472663879,
            0.9969545006752014,
            0.9964346885681152,
            0.9968417286872864,
            0.9973196983337402,
            0.9934223890304565,
            0.9968418478965759
        ]
    },
    "HumanEval/15": {
        "similarity": 0.997737467288971,
        "body": "    result = ''\n    for i in range(n + 1):\n        if len(result) > 0:\n            result += ' '\n        result += str(i)\n    return result",
        "result": "passed",
        "similarities": [
            0.9972387552261353,
            0.9976164102554321,
            0.9975179433822632,
            0.9956795573234558,
            0.9975624084472656,
            0.9970528483390808,
            0.997737467288971,
            0.9975180625915527,
            0.9972425103187561,
            0.997737467288971,
            0.9974205493927002,
            0.9972733855247498,
            0.9924019575119019,
            0.9975493550300598,
            0.9969601035118103,
            0.9968358278274536,
            0.9975009560585022,
            0.9974444508552551,
            0.9976164102554321,
            0.9953195452690125
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9955669045448303,
        "body": "    distinct_chars = []\n    for char in string:\n        if char.lower() not in distinct_chars:\n            distinct_chars.append(char.lower())\n    return len(distinct_chars)",
        "result": "passed",
        "similarities": [
            0.9955669045448303,
            0.994675874710083,
            0.9946523904800415,
            0.9850327372550964,
            0.994655191898346,
            0.9922240376472473,
            0.9951808452606201,
            0.9898136854171753,
            0.9949060082435608,
            0.9933489561080933,
            0.9845922589302063,
            0.9869593381881714,
            0.9955669045448303,
            0.9910576343536377,
            0.9850515127182007,
            0.9953119158744812,
            0.9939631223678589,
            0.9928552508354187,
            0.9950236082077026,
            0.9926241636276245
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9944797158241272,
        "body": "    music_list = music_string.split()\n    note_duration = []\n    for i in range(0, len(music_list), 2):\n        if music_list[i] == 'o':\n            note_duration.append(4)\n        elif music_list[i] == 'o|':\n            note_duration.append(2)\n        elif music_list[i] == '.|':\n            note_duration.append(1)\n    return note_duration",
        "result": "failed: ",
        "similarities": [
            0.9932467937469482,
            0.9921711683273315,
            0.9926662445068359,
            0.9912734031677246,
            0.9911424517631531,
            0.9905728101730347,
            0.9944797158241272,
            0.9871036410331726,
            0.9924710988998413,
            0.9942976236343384,
            0.9937968850135803,
            0.9908788800239563,
            0.9924609661102295,
            0.9837702512741089,
            0.9921905398368835,
            0.9896512627601624,
            0.993469774723053,
            0.9927249550819397,
            0.9754801392555237,
            0.9887704253196716
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9974796772003174,
        "body": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1",
        "result": "failed: ",
        "similarities": [
            0.9965704083442688,
            0.9974796772003174,
            0.9958524107933044,
            0.9970936179161072,
            0.9968022704124451,
            0.9950014352798462,
            0.9953309893608093,
            0.9972447752952576,
            0.9974796772003174,
            0.9965211749076843,
            0.9954245686531067,
            0.9971433877944946,
            0.9966028928756714,
            0.9949166178703308,
            0.9974796772003174,
            0.9964156746864319,
            0.9948340058326721,
            0.9911813139915466,
            0.9966577291488647,
            0.9965704083442688
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9898927807807922,
        "body": "    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    count = [0] * len(words)\n    for word in numbers.split():\n        if word in words:\n            index = words.index(word)\n            count[index] += 1\n    sorted_count = []\n    for i in range(len(count)):\n        sorted_count.append((count[i], words[i]))\n    sorted_count.sort()\n    result = ''\n    for pair in sorted_count:\n        result += pair[1] + ' '\n    return result.strip()",
        "result": "failed: ",
        "similarities": [
            0.9871099591255188,
            0.9813355803489685,
            0.9849259257316589,
            0.9865074157714844,
            0.9874376058578491,
            0.9782723784446716,
            0.9870808124542236,
            0.9799957275390625,
            0.9866461753845215,
            0.9768443703651428,
            0.9848996996879578,
            0.9667936563491821,
            0.9855859875679016,
            0.9898927807807922,
            0.9781302213668823,
            0.9820327758789062,
            0.9892796874046326,
            0.9889002442359924,
            0.9802699685096741,
            0.9826900362968445
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9973393678665161,
        "body": "    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])",
        "result": "failed: ",
        "similarities": [
            0.995469331741333,
            0.9918088316917419,
            0.9967937469482422,
            0.9958950877189636,
            0.9960268139839172,
            0.9958825707435608,
            0.9960268139839172,
            0.9971653819084167,
            0.9968458414077759,
            0.9973072409629822,
            0.9967064261436462,
            0.9966558218002319,
            0.9964181780815125,
            0.9969412088394165,
            0.9973393678665161,
            0.997267484664917,
            0.9934666156768799,
            0.9905275106430054,
            0.9957149028778076,
            0.9969910383224487
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9954972863197327,
        "body": "    numbers.sort()\n    min_val = numbers[0]\n    max_val = numbers[-1]\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_val) / (max_val - min_val)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers",
        "result": "failed: ",
        "similarities": [
            0.9885255098342896,
            0.990444004535675,
            0.9949907064437866,
            0.9954972863197327,
            0.9918516278266907,
            0.995294988155365,
            0.9846402406692505,
            0.9933921694755554,
            0.9946313500404358,
            0.9927940368652344,
            0.9891335368156433,
            0.994489848613739,
            0.9939019083976746,
            0.9945424795150757,
            0.9930379986763,
            0.9902739524841309,
            0.9932526350021362,
            0.9944789409637451,
            0.9943856000900269,
            0.9914968609809875
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9989534020423889,
        "body": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "result": "passed",
        "similarities": [
            0.9989534020423889,
            0.9989534020423889,
            0.9987810254096985,
            0.9989534020423889,
            0.9989534020423889,
            0.9987844228744507,
            0.9989534020423889,
            0.9987810254096985,
            0.9955150485038757,
            0.9989534020423889,
            0.9983891844749451,
            0.9989534020423889,
            0.9975301623344421,
            0.9989534020423889,
            0.9988495707511902,
            0.9989534020423889,
            0.9989534020423889,
            0.9955150485038757,
            0.9989534020423889,
            0.9910619854927063
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9948749542236328,
        "body": "    count = 0\n    for char in string:\n        count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.992752194404602,
            0.9948749542236328,
            0.9918704628944397,
            0.9924795031547546,
            0.9948749542236328,
            0.9948749542236328,
            0.9945939779281616,
            0.9924795031547546,
            0.9904782176017761,
            0.9903753399848938,
            0.9943476319313049,
            0.9942280650138855,
            0.9678347706794739,
            0.9943476319313049,
            0.9921484589576721,
            0.9942280650138855,
            0.9839931130409241,
            0.9922027587890625,
            0.9947903156280518,
            0.9835570454597473
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9960932731628418,
        "body": "    i = 1\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            biggest_divisor = divisor\n        i += 1\n    return biggest_divisor",
        "result": "failed: local variable 'biggest_divisor' referenced before assignment",
        "similarities": [
            0.9956554770469666,
            0.9960818886756897,
            0.9948840141296387,
            0.9946887493133545,
            0.9919913411140442,
            0.9910227060317993,
            0.9812127947807312,
            0.9921404123306274,
            0.994892954826355,
            0.9943565726280212,
            0.9908045530319214,
            0.9959839582443237,
            0.9917146563529968,
            0.9948363900184631,
            0.9952560067176819,
            0.9960932731628418,
            0.9899184703826904,
            0.994103193283081,
            0.9954087138175964,
            0.9955157041549683
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9975144267082214,
        "body": "    factors = []\n    i = 2\n    while i <= n:\n        count = 0\n        for j in range(i, n + 1):\n            if n % j == 0 and j > 1:\n                count += 1\n        if count > 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1",
        "result": "failed: ",
        "similarities": [
            0.996748685836792,
            0.9949063658714294,
            0.9964050650596619,
            0.9942012429237366,
            0.9969884753227234,
            0.9960423707962036,
            0.9968851208686829,
            0.9975144267082214,
            0.9954947233200073,
            0.9957883954048157,
            0.9961516857147217,
            0.995320200920105,
            0.9957267642021179,
            0.9966561198234558,
            0.9956064820289612,
            0.996337890625,
            0.9965915679931641,
            0.9950765371322632,
            0.9971100687980652,
            0.9948627948760986
        ]
    },
    "HumanEval/26": {
        "similarity": 0.996844470500946,
        "body": "    result = []\n    seen = []\n    for num in numbers:\n        if num not in seen and len(seen) < 10:\n            result.append(num)\n            seen.append(num)\n\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9955026507377625,
            0.9944708943367004,
            0.9966561198234558,
            0.9961584210395813,
            0.9967561364173889,
            0.9958112835884094,
            0.9964511394500732,
            0.9936912059783936,
            0.9960373640060425,
            0.996844470500946,
            0.9954251050949097,
            0.9961584210395813,
            0.9967626333236694,
            0.9950919151306152,
            0.9964511394500732,
            0.9956347942352295,
            0.9956691265106201,
            0.9944955706596375,
            0.9941805601119995,
            0.9961584210395813
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9975523948669434,
        "body": "    flipped_string = \"\"\n    for char in string:\n        if char <= 'z':\n            flipped_string += chr(ord(char) - 32)\n        else:\n            flipped_string += chr(ord(char) + 32)\n    return flipped_string",
        "result": "failed: ",
        "similarities": [
            0.9971337914466858,
            0.9965376853942871,
            0.9965466856956482,
            0.9968355894088745,
            0.9967026114463806,
            0.9884620308876038,
            0.9971644878387451,
            0.996860682964325,
            0.9939281940460205,
            0.9957036375999451,
            0.9971644878387451,
            0.9971644878387451,
            0.9953587055206299,
            0.9919407367706299,
            0.9963706135749817,
            0.9963732361793518,
            0.9964424967765808,
            0.9967429637908936,
            0.996046245098114,
            0.9975523948669434
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9956452250480652,
        "body": "    result = ''\n    for string in sorted(strings):\n        result += string\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9947813749313354,
            0.9951375722885132,
            0.9951570630073547,
            0.9951570630073547,
            0.9954562783241272,
            0.9871008992195129,
            0.9955335259437561,
            0.9933692812919617,
            0.9956452250480652,
            0.9890254139900208,
            0.9954424500465393,
            0.9949252605438232,
            0.9918093681335449,
            0.9954782724380493,
            0.9949167370796204,
            0.9951135516166687,
            0.9939531087875366,
            0.9880416393280029,
            0.9920657277107239,
            0.9911335706710815
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9981420636177063,
        "body": "    filtered_strings = []\n    for string in strings:\n        if prefix <= string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "failed: ",
        "similarities": [
            0.997882068157196,
            0.9978817701339722,
            0.9976513385772705,
            0.9959741830825806,
            0.9981420636177063,
            0.9978817701339722,
            0.9978969097137451,
            0.9978817701339722,
            0.996439516544342,
            0.9976513385772705,
            0.9977237582206726,
            0.9963973164558411,
            0.9971671104431152,
            0.995421290397644,
            0.9978969097137451,
            0.9978969097137451,
            0.9938605427742004,
            0.9968898296356201,
            0.997883677482605,
            0.9979153871536255
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9986361265182495,
        "body": "    positive_numbers = []\n    for num in l:\n        if num >= 0:\n            positive_numbers.append(num)\n    return positive_numbers",
        "result": "failed: ",
        "similarities": [
            0.9985515475273132,
            0.998575747013092,
            0.998420238494873,
            0.995958149433136,
            0.998420238494873,
            0.9986361265182495,
            0.990761935710907,
            0.9986353516578674,
            0.9983053803443909,
            0.9982757568359375,
            0.9980425834655762,
            0.9980425834655762,
            0.9985042214393616,
            0.998420238494873,
            0.9967440366744995,
            0.9982757568359375,
            0.9982757568359375,
            0.9980425834655762,
            0.9980440735816956,
            0.998420238494873
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9974759817123413,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9966960549354553,
            0.9968873262405396,
            0.9963389039039612,
            0.9971140623092651,
            0.9959734082221985,
            0.9969608187675476,
            0.9970411062240601,
            0.9935289621353149,
            0.9942299723625183,
            0.9961449503898621,
            0.99666827917099,
            0.9946491718292236,
            0.9974759817123413,
            0.9961549639701843,
            0.9961995482444763,
            0.987541913986206,
            0.9968307018280029,
            0.9956469535827637,
            0.9973963499069214,
            0.9958930015563965
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9936116933822632,
        "body": "    for i in range(len(xs)):\n        if xs[i] != 0 and (i + 1 == len(xs) or xs[i + 1] == 0):\n            x = -xs[0] / xs[i]\n            result = poly(xs, x)\n            if abs(result) <= 1e-6:\n                return round(x, 2)\n\n\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * math.pow(x, i)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9932851195335388,
            0.9920514822006226,
            0.9844170808792114,
            0.9936116933822632,
            0.9840957522392273,
            0.9935396909713745,
            0.9884307384490967,
            0.9844316244125366,
            0.987223207950592,
            0.9930052757263184,
            0.9921603798866272,
            0.9922253489494324,
            0.9897892475128174,
            0.9896969199180603,
            0.9911504983901978,
            0.9864758253097534,
            0.9919385313987732,
            0.9928333163261414,
            0.9904901385307312,
            0.9850283265113831
        ]
    },
    "HumanEval/33": {
        "similarity": 0.995621919631958,
        "body": "    sorted_l = []\n    for i in range(len(l)):\n        if i % 3 <= 0:\n            sorted_l.append(l[i])\n        else:\n            sorted_index = -1\n            for j in range(i, -1, -1):\n                if j % 3 == 0:\n                    sorted_index = j\n                    break\n            temp = l[sorted_index]\n            l.pop(sorted_index)\n            l.insert(i, temp)\n            sorted_l.append(l[i])\n    return sorted_l",
        "result": "failed: ",
        "similarities": [
            0.9942233562469482,
            0.9939061403274536,
            0.995621919631958,
            0.9937965273857117,
            0.9932795166969299,
            0.9951993227005005,
            0.991951584815979,
            0.9946990013122559,
            0.9923761487007141,
            0.9841148257255554,
            0.9948243498802185,
            0.9937511086463928,
            0.9946215748786926,
            0.9934728741645813,
            0.9909499287605286,
            0.9937192797660828,
            0.9940603971481323,
            0.9955235719680786,
            0.9952173829078674,
            0.993560791015625
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9958591461181641,
        "body": "    seen = []\n    result = []\n    for i in lst:\n        if i <= max(seen) or len(seen) == 0:\n            if i not in seen:\n                seen.append(i)\n                result.append(i)\n    return sorted(result)",
        "result": "failed: name 'lst' is not defined",
        "similarities": [
            0.9921301007270813,
            0.9958591461181641,
            0.9955061078071594,
            0.9953107237815857,
            0.9937418699264526,
            0.9916363954544067,
            0.9954929351806641,
            0.995304524898529,
            0.9955713152885437,
            0.9943625926971436,
            0.9952119588851929,
            0.994881808757782,
            0.9951657056808472,
            0.9944050312042236,
            0.9917451739311218,
            0.9949302673339844,
            0.992445707321167,
            0.9943935871124268,
            0.9955310821533203,
            0.9954110980033875
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9988471865653992,
        "body": "    max_val = l[0]\n    for i in l:\n        if i <= max_val:\n            max_val = i\n    return max_val",
        "result": "failed: ",
        "similarities": [
            0.9985721111297607,
            0.9987341165542603,
            0.9984924793243408,
            0.9983612895011902,
            0.9983463287353516,
            0.9983922839164734,
            0.9966396689414978,
            0.9981123208999634,
            0.9985715746879578,
            0.9988471865653992,
            0.998611330986023,
            0.9983932971954346,
            0.9980630278587341,
            0.9979045391082764,
            0.9983922839164734,
            0.9980630278587341,
            0.998618483543396,
            0.9982284903526306,
            0.9979382753372192,
            0.997757077217102
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9968932271003723,
        "body": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            str_i = str(i)\n            for digit in str_i:\n                if digit == '7':\n                    count += 1",
        "result": "failed: ",
        "similarities": [
            0.9931287169456482,
            0.9960646629333496,
            0.9923281669616699,
            0.9946498870849609,
            0.9964433908462524,
            0.9931287169456482,
            0.9931287169456482,
            0.9963383078575134,
            0.9968932271003723,
            0.9931833148002625,
            0.9968194365501404,
            0.9963330626487732,
            0.9965330362319946,
            0.9968932271003723,
            0.9908891320228577,
            0.9965647459030151,
            0.9965129494667053,
            0.9957234263420105,
            0.9950410723686218,
            0.9931676983833313
        ]
    },
    "HumanEval/37": {
        "similarity": 0.99413001537323,
        "body": "    sorted_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_index = sorted([x for index, x in enumerate(l) if index % 2 == 0])\n            sorted_l.append(sorted_index[i // 2])\n        else:\n            sorted_l.append(l[i])",
        "result": "failed: 'NoneType' object is not iterable",
        "similarities": [
            0.9939219951629639,
            0.9929718375205994,
            0.9935534596443176,
            0.9928058981895447,
            0.9916876554489136,
            0.9911733865737915,
            0.9859364032745361,
            0.9936529397964478,
            0.9932726621627808,
            0.99413001537323,
            0.9920649528503418,
            0.9931265115737915,
            0.9925796389579773,
            0.9905260801315308,
            0.981708824634552,
            0.9910051226615906,
            0.9663118124008179,
            0.9932187795639038,
            0.9894331693649292,
            0.9891759157180786
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9934548139572144,
        "body": "    groups = []\n    for i in range((len(s) + 2) // 3):\n        group = s[(3 * i):min((3 * i + 3), len(s))]\n        if len(group) == 3:\n            groups.append(group[1:] + group[0])\n        else:\n            groups.append(group)\n    decoded_str = \"\"\n    for j, char in enumerate(groups[0]):\n        for k in range(len(groups)):\n            if j < len(groups[k]):\n                decoded_str += groups[k][j]\n    return decoded_str",
        "result": "failed: ",
        "similarities": [
            0.9861745238304138,
            0.9892469644546509,
            0.9896304607391357,
            0.9924603700637817,
            0.9895347952842712,
            0.9923337697982788,
            0.9926124215126038,
            0.9923337697982788,
            0.9765948057174683,
            0.9934548139572144,
            0.9903574585914612,
            0.9831573963165283,
            0.979904055595398,
            0.9927908182144165,
            0.9920360445976257,
            0.9898583292961121,
            0.9872912168502808,
            0.9909762144088745,
            0.9890528321266174,
            0.9868919253349304
        ]
    },
    "HumanEval/39": {
        "similarity": 0.996222734451294,
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    a = b = 2\n    count = 1\n    while count <= n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9953672289848328,
            0.9956209063529968,
            0.9956254363059998,
            0.996141254901886,
            0.9871208071708679,
            0.9932831525802612,
            0.9947716593742371,
            0.9873601198196411,
            0.995896577835083,
            0.9957959055900574,
            0.9961826801300049,
            0.9961041808128357,
            0.9877275228500366,
            0.996222734451294,
            0.9954054951667786,
            0.995969295501709,
            0.995582103729248,
            0.996063232421875,
            0.9901464581489563,
            0.9960373640060425
        ]
    },
    "HumanEval/40": {
        "similarity": 0.99529629945755,
        "body": "    for i in range(len(l)):\n        num1 = l[i]\n        for j in range(i + 1, len(l)):\n            num2 = l[j]\n            for k in range(j + 1, len(l)):\n                num3 = l[k]\n                if (num1 < num2) and (num2 <= num3):\n                    if num1 + num2 + num3 == 0:\n                        return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9944745302200317,
            0.992831289768219,
            0.9934778809547424,
            0.9940412640571594,
            0.9908164143562317,
            0.9921927452087402,
            0.9945423603057861,
            0.99529629945755,
            0.9916415214538574,
            0.9891351461410522,
            0.993660569190979,
            0.9839459657669067,
            0.9836883544921875,
            0.9918609261512756,
            0.9921186566352844,
            0.9950433969497681,
            0.9950898885726929,
            0.9925737977027893,
            0.9900514483451843,
            0.9939193725585938
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9961966276168823,
        "body": "    cars_left_to_right = list(range(1, n + 1))\n    cars_right_to_left = list(range(n, 0, -1))\n\n    collisions = 0\n    for i in range(len(cars_left_to_right)):\n        for j in range(len(cars_right_to_left)):\n            if cars_left_to_right[i] <= cars_right_to_left[j]:\n                collisions += 1\n\n    return collisions",
        "result": "failed: ",
        "similarities": [
            0.9960859417915344,
            0.9933578372001648,
            0.9944164156913757,
            0.9961923360824585,
            0.9956158399581909,
            0.9856837391853333,
            0.9930161237716675,
            0.9954911470413208,
            0.9951485991477966,
            0.994429349899292,
            0.9961966276168823,
            0.9956681132316589,
            0.995954692363739,
            0.9946433901786804,
            0.9930772185325623,
            0.995686411857605,
            0.9953523278236389,
            0.9941423535346985,
            0.9944968223571777,
            0.9960489869117737
        ]
    },
    "HumanEval/42": {
        "similarity": 0.99505215883255,
        "body": "    result = []\n    for num in l:\n        new_num = num + 1\n        result.append(new_num)\n    return result",
        "result": "passed",
        "similarities": [
            0.9913405179977417,
            0.99419766664505,
            0.993804931640625,
            0.9782763123512268,
            0.984308660030365,
            0.994958758354187,
            0.9911415576934814,
            0.9915438294410706,
            0.9829103350639343,
            0.9939563274383545,
            0.9949447512626648,
            0.9912652373313904,
            0.99505215883255,
            0.9899002909660339,
            0.995015025138855,
            0.9939563274383545,
            0.9842291474342346,
            0.9949447512626648,
            0.9889420866966248,
            0.9947537779808044
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9970056414604187,
        "body": "    found = False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0 and l[i] != l[j]:\n                found = True\n                break\n        if found:\n            break\n    return found",
        "result": "passed",
        "similarities": [
            0.9949365258216858,
            0.9946388602256775,
            0.9963675141334534,
            0.9954232573509216,
            0.9952139854431152,
            0.9903779625892639,
            0.9929710030555725,
            0.9963088631629944,
            0.9963887929916382,
            0.9969813823699951,
            0.9961085915565491,
            0.9962397217750549,
            0.9965794086456299,
            0.9957452416419983,
            0.995387613773346,
            0.9968042969703674,
            0.9964138865470886,
            0.9955946207046509,
            0.9970056414604187,
            0.9961276650428772
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9935863018035889,
        "body": "    digits = \"0123456789\"\n    if x == 0:\n        return '0'\n    result = ''\n    for i in range(1, max(base, x)):\n        d = x // i\n        r = x % i\n        x = d\n        result += str(digits[r])\n    result += str(digits[x])\n    return result[::-1]",
        "result": "failed: ",
        "similarities": [
            0.9935657382011414,
            0.9926272034645081,
            0.9897362589836121,
            0.9863621592521667,
            0.9925613403320312,
            0.9916110634803772,
            0.9927805662155151,
            0.991069495677948,
            0.9899312257766724,
            0.9873834252357483,
            0.9894577860832214,
            0.9872583150863647,
            0.9935863018035889,
            0.9904361367225647,
            0.9930996298789978,
            0.98504239320755,
            0.9886568784713745,
            0.9761195778846741,
            0.9851204752922058,
            0.9919582009315491
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9945075511932373,
        "body": "    area = (a * h) / 2 <= 0 and 0 or a * h / 2\n    return area",
        "result": "passed",
        "similarities": [
            0.9941067099571228,
            0.9937149882316589,
            0.9939796328544617,
            0.9929263591766357,
            0.9925374388694763,
            0.9935217499732971,
            0.9941067099571228,
            0.9922471642494202,
            0.9898136854171753,
            0.9930079579353333,
            0.9945075511932373,
            0.9941067099571228,
            0.9810164570808411,
            0.9942542910575867,
            0.9901514649391174,
            0.9935296773910522,
            0.9785953164100647,
            0.9942542910575867,
            0.9937955737113953,
            0.9866859316825867
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9915332794189453,
        "body": "    a = 0\n    b = 2\n    c = 0\n    d = 0\n    for _ in range(n + 1):\n        if n == 0:\n            return a\n        elif n == 1 or n == 3:\n            return 0\n        result = a + b + c + d\n        d = c\n        c = b\n        b = result\n    return None",
        "result": "failed: ",
        "similarities": [
            0.9901944994926453,
            0.9773736596107483,
            0.9915332794189453,
            0.9890325665473938,
            0.990922212600708,
            0.9906859397888184,
            0.9910691976547241,
            0.9900113344192505,
            0.9866554737091064,
            0.9895316958427429,
            0.9912222027778625,
            0.9906993508338928,
            0.9909911155700684,
            0.9862130880355835,
            0.9896479249000549,
            0.989536464214325,
            0.9737070202827454,
            0.9736920595169067,
            0.9907949566841125,
            0.9912096261978149
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9942771792411804,
        "body": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return (l[n // 2])\n    else:\n        m = (n / 2) - 1\n        return (l[m] + l[m + 1]) / 2",
        "result": "failed: list indices must be integers or slices, not float",
        "similarities": [
            0.9937912821769714,
            0.9932072162628174,
            0.9816587567329407,
            0.9934877157211304,
            0.9854251742362976,
            0.9937368631362915,
            0.9924850463867188,
            0.990642249584198,
            0.9936280846595764,
            0.9938403964042664,
            0.9926742911338806,
            0.9887899160385132,
            0.9942771792411804,
            0.9920700788497925,
            0.9923239350318909,
            0.9897434115409851,
            0.9805870056152344,
            0.9929738640785217,
            0.992684006690979,
            0.9919192790985107
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9944918751716614,
        "body": "    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    index = 0\n    while index < len(cleaned_text) // 2:\n        if cleaned_text[index] != cleaned_text[-index - 1]:\n            return False\n        index += 1\n    return True",
        "result": "passed",
        "similarities": [
            0.9931026101112366,
            0.9913892149925232,
            0.9938834309577942,
            0.9928944110870361,
            0.9852485656738281,
            0.9740873575210571,
            0.9933565258979797,
            0.9938302636146545,
            0.9918437004089355,
            0.9924685955047607,
            0.9750480651855469,
            0.993434488773346,
            0.9942997694015503,
            0.9940491914749146,
            0.9944753050804138,
            0.992649257183075,
            0.9911089539527893,
            0.9934956431388855,
            0.9944918751716614,
            0.9917365908622742
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9960700869560242,
        "body": "    result = 1\n    for _ in range(n):\n        result *= 2\n        if result >= p:\n            result %= p",
        "result": "failed: ",
        "similarities": [
            0.9957162737846375,
            0.993922770023346,
            0.9955953359603882,
            0.9960700869560242,
            0.9959060549736023,
            0.9958946108818054,
            0.995257556438446,
            0.9958319664001465,
            0.995257556438446,
            0.9960508942604065,
            0.9956425428390503,
            0.9923444986343384,
            0.9953564405441284,
            0.9937499165534973,
            0.9839897155761719,
            0.9960228800773621,
            0.9927780032157898,
            0.98858243227005,
            0.9946707487106323,
            0.9960289001464844
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9952400922775269,
        "body": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            ascii_offset = ord(\"a\") if ch.islower() else ord(\"A\")\n            char_index = (ord(ch) - ascii_offset - 5) % 26\n            result += chr(char_index + ascii_offset)\n        else:\n            result += ch\n    return result",
        "result": "passed",
        "similarities": [
            0.9938663840293884,
            0.9925617575645447,
            0.9945406913757324,
            0.9934815168380737,
            0.992985188961029,
            0.993190348148346,
            0.9815298318862915,
            0.9945659637451172,
            0.9933786988258362,
            0.9952400922775269,
            0.9942295551300049,
            0.9922940135002136,
            0.9928662180900574,
            0.9912976026535034,
            0.991645097732544,
            0.9945406913757324,
            0.9920727610588074,
            0.9938490986824036,
            0.9950428009033203,
            0.9933291077613831
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9959890246391296,
        "body": "    result = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9958833456039429,
            0.9920011758804321,
            0.9954870939254761,
            0.9954870939254761,
            0.9954870939254761,
            0.9954870939254761,
            0.9958633780479431,
            0.9938920736312866,
            0.9953127503395081,
            0.9691157341003418,
            0.9949823617935181,
            0.9834582805633545,
            0.9948368072509766,
            0.9959890246391296,
            0.9956233501434326,
            0.9849084615707397,
            0.9958833456039429,
            0.9958833456039429,
            0.9958833456039429,
            0.9954870939254761
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9982895255088806,
        "body": "    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9896773099899292,
            0.998044490814209,
            0.9978929162025452,
            0.9974786639213562,
            0.9982204437255859,
            0.9982204437255859,
            0.9974786639213562,
            0.998044490814209,
            0.9982895255088806,
            0.998055100440979,
            0.9982895255088806,
            0.9978806376457214,
            0.99704509973526,
            0.9982894062995911,
            0.9967338442802429,
            0.9972389936447144,
            0.9972832202911377,
            0.9944277405738831,
            0.9944277405738831,
            0.9982204437255859
        ]
    },
    "HumanEval/53": {
        "similarity": 0.992914080619812,
        "body": "    result = 0\n    for i in range(y + 1):\n        for j in range(x + 1):\n            if j == x and i == y:\n                result += j * i",
        "result": "failed: ",
        "similarities": [
            0.9769544005393982,
            0.9920600056648254,
            0.9884511828422546,
            0.9911366701126099,
            0.9901544451713562,
            0.9928120374679565,
            0.9886806011199951,
            0.9917308688163757,
            0.9752104878425598,
            0.9784078001976013,
            0.9915652871131897,
            0.9820491671562195,
            0.9920124411582947,
            0.9907656311988831,
            0.9911322593688965,
            0.9915626049041748,
            0.9911554455757141,
            0.992914080619812,
            0.9871922731399536,
            0.9880573153495789
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9957191348075867,
        "body": "    char_count_s0 = {}\n    for c in s0:\n        if c not in char_count_s0:\n            char_count_s0[c] = 1\n        else:\n            char_count_s0[c] += 1\n    for c in s1:\n        if c not in char_count_s0 or char_count_s0[c] <= 0:\n            return False\n        char_count_s0[c] -= 1\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9952377676963806,
            0.9932051301002502,
            0.9955761432647705,
            0.9952232241630554,
            0.9951469898223877,
            0.9895631670951843,
            0.9885330200195312,
            0.9871890544891357,
            0.994964599609375,
            0.9933270215988159,
            0.9931467175483704,
            0.9937867522239685,
            0.9945119619369507,
            0.9957191348075867,
            0.9952244162559509,
            0.9955036044120789,
            0.9953790307044983,
            0.9887738823890686,
            0.9914404153823853,
            0.9949479699134827
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9956490397453308,
        "body": "    if n == 0 or n == 1:\n        return n\n    a = 0\n    b = 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c",
        "result": "failed: ",
        "similarities": [
            0.9941819906234741,
            0.9778763651847839,
            0.9943013787269592,
            0.9936386942863464,
            0.9946488738059998,
            0.9949029684066772,
            0.9951868653297424,
            0.9892802238464355,
            0.9949758648872375,
            0.9836088418960571,
            0.99484783411026,
            0.9946309328079224,
            0.9945995807647705,
            0.9922548532485962,
            0.9956490397453308,
            0.995266854763031,
            0.9931817650794983,
            0.9955062866210938,
            0.9947513937950134,
            0.9947260618209839
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9984185099601746,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9975666403770447,
            0.9961773753166199,
            0.997698962688446,
            0.9983811974525452,
            0.9983325600624084,
            0.9982926249504089,
            0.9981008768081665,
            0.9972540140151978,
            0.9984029531478882,
            0.9982524514198303,
            0.9972512125968933,
            0.9974881410598755,
            0.9982401132583618,
            0.9962840676307678,
            0.9945301413536072,
            0.9984185099601746,
            0.9983251690864563,
            0.9974271059036255,
            0.9981627464294434,
            0.9977647066116333
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9953224658966064,
        "body": "    is_increasing = True\n    for i in range(len(lst) - 1):\n        if lst[i] <= lst[i + 1]:\n            pass\n        else:\n            is_increasing = False\n            break\n    return is_increasing",
        "result": "failed: name 'lst' is not defined",
        "similarities": [
            0.9949619174003601,
            0.9938448667526245,
            0.9852383136749268,
            0.9942250847816467,
            0.9901353716850281,
            0.9888227581977844,
            0.995193362236023,
            0.9925640821456909,
            0.9933412671089172,
            0.9939290881156921,
            0.9944890737533569,
            0.9933322072029114,
            0.9834819436073303,
            0.9905417561531067,
            0.9950305819511414,
            0.9935696125030518,
            0.9948973655700684,
            0.9953224658966064,
            0.9921746850013733,
            0.9936500191688538
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9903766512870789,
        "body": "    set_l1 = set()\n    for elem in sorted(l1):\n        set_l1.add(elem)\n    set_l2 = set()\n    for elem in sorted(l2):\n        set_l2.add(elem)\n    common_set = set_l1 & set_l2\n    result = []\n    for item in sorted(common_set):\n        if l1.count(item) > 0 and l2.count(item) > 0:\n            result.append(item)\n    return result",
        "result": "passed",
        "similarities": [
            0.9852923154830933,
            0.9903766512870789,
            0.9828328490257263,
            0.9888626933097839,
            0.9894891977310181,
            0.9869595766067505,
            0.9865702390670776,
            0.9896693825721741,
            0.9872902631759644,
            0.9890919923782349,
            0.9850130677223206,
            0.9878906607627869,
            0.9772635102272034,
            0.9889495372772217,
            0.9894172549247742,
            0.9896834492683411,
            0.9888584613800049,
            0.977549135684967,
            0.9796459674835205,
            0.988883376121521
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9943309426307678,
        "body": "    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return max(factors)\n\n    for j in range(2, int(num ** 0.5) + 1):\n        if num % j == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "similarities": [
            0.9940435290336609,
            0.9940078258514404,
            0.9937572479248047,
            0.992995023727417,
            0.9939389824867249,
            0.9936068654060364,
            0.9929882884025574,
            0.9902141094207764,
            0.9932180047035217,
            0.9934501647949219,
            0.9930287599563599,
            0.9925561547279358,
            0.9817770719528198,
            0.9817615151405334,
            0.9929275512695312,
            0.9933322072029114,
            0.9882892966270447,
            0.9910647869110107,
            0.9926621317863464,
            0.9943309426307678
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9968721270561218,
        "body": "    total = 0\n    number = 1\n\n    for i in range(n):\n        if number <= n:\n            total += number\n        number += 1\n\n    return total",
        "result": "passed",
        "similarities": [
            0.9930012226104736,
            0.9961158633232117,
            0.9956957101821899,
            0.9953084588050842,
            0.9952141642570496,
            0.9966612458229065,
            0.9958701133728027,
            0.9911852478981018,
            0.9839656352996826,
            0.9948911070823669,
            0.9967358112335205,
            0.9952141642570496,
            0.9957594871520996,
            0.9968245625495911,
            0.9968245625495911,
            0.9953252077102661,
            0.9963657259941101,
            0.9953252077102661,
            0.9959920644760132,
            0.9968721270561218
        ]
    },
    "HumanEval/61": {
        "similarity": 0.998695969581604,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0",
        "result": "passed",
        "similarities": [
            0.998439610004425,
            0.9984164237976074,
            0.9982839822769165,
            0.9968894124031067,
            0.9984365701675415,
            0.9976015686988831,
            0.998695969581604,
            0.9975104331970215,
            0.9973829388618469,
            0.9981921315193176,
            0.9984833598136902,
            0.9983150959014893,
            0.9986821413040161,
            0.9980059266090393,
            0.9979673624038696,
            0.9977200031280518,
            0.9978268146514893,
            0.9986339211463928,
            0.9986440539360046,
            0.9984223246574402
        ]
    },
    "HumanEval/62": {
        "similarity": 0.995838463306427,
        "body": "    n = len(xs)\n    ys = []\n    for i in range(1, n):\n        coeff = xs[i] * i\n        ys.append(coeff)\n    return ys",
        "result": "passed",
        "similarities": [
            0.9938288331031799,
            0.9929978251457214,
            0.995451807975769,
            0.9950852990150452,
            0.9906232953071594,
            0.9924463033676147,
            0.9929385781288147,
            0.995293378829956,
            0.9945973753929138,
            0.9951714277267456,
            0.995838463306427,
            0.9950856566429138,
            0.9928541779518127,
            0.9950655698776245,
            0.9900287985801697,
            0.9951294660568237,
            0.9853783845901489,
            0.9924830198287964,
            0.9929628968238831,
            0.9952700734138489
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9953107237815857,
        "body": "    if n < 2:\n        return 0\n    a = b = c = 0\n    for i in range(3, n + 1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d",
        "result": "failed: ",
        "similarities": [
            0.9916681051254272,
            0.9895047545433044,
            0.9949367046356201,
            0.9950524568557739,
            0.9909039735794067,
            0.9890767335891724,
            0.9946098327636719,
            0.9950547814369202,
            0.9921740293502808,
            0.993851900100708,
            0.9906777143478394,
            0.9946839213371277,
            0.9951340556144714,
            0.9953107237815857,
            0.9931944012641907,
            0.9902714490890503,
            0.9894328713417053,
            0.9937898516654968,
            0.9911015033721924,
            0.9946718811988831
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9927125573158264,
        "body": "    a_e_i_o_u = 'aeiou'\n    y_vowel = False\n    count = 0\n    for char in s:\n        if char.lower() == 'y' and not y_vowel:\n            y_vowel = True\n        elif char.lower() in a_e_i_o_u or (char.islower() and y_vowel):\n            count += 1",
        "result": "failed: Test 1",
        "similarities": [
            0.9922037720680237,
            0.9927125573158264,
            0.9920052289962769,
            0.9849721789360046,
            0.9881553649902344,
            0.9869094491004944,
            0.9918913841247559,
            0.9870927929878235,
            0.9889625906944275,
            0.9871988892555237,
            0.9867246747016907,
            0.9852266907691956,
            0.992098867893219,
            0.9916887879371643,
            0.9924110770225525,
            0.9841321706771851,
            0.9867687225341797,
            0.9909688234329224,
            0.9823409914970398,
            0.9800282716751099
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9948417544364929,
        "body": "    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        result = ''\n        for i in range(num_digits - 1, max(0, shift-1), -1):\n            result += x_str[i]\n        for i in range(shift, num_digits):\n            result += x_str[i]\n        return result",
        "result": "failed: ",
        "similarities": [
            0.9918743968009949,
            0.9937364459037781,
            0.9948417544364929,
            0.9902280569076538,
            0.9925864338874817,
            0.9928606748580933,
            0.9933547973632812,
            0.9925240874290466,
            0.9928406476974487,
            0.993014395236969,
            0.9793617129325867,
            0.9929184317588806,
            0.9942914247512817,
            0.9917319416999817,
            0.9937453269958496,
            0.9937437772750854,
            0.9924998879432678,
            0.9944829344749451,
            0.9932218790054321,
            0.994056224822998
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9967828392982483,
        "body": "    ascii_sum = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            ascii_sum += ord(char)\n    return ascii_sum",
        "result": "passed",
        "similarities": [
            0.9956713318824768,
            0.9952583312988281,
            0.9961898326873779,
            0.9962121248245239,
            0.9907304644584656,
            0.9967828392982483,
            0.9946984648704529,
            0.9947656393051147,
            0.9964567422866821,
            0.9940257668495178,
            0.9930058717727661,
            0.9947041273117065,
            0.9941080808639526,
            0.9940839409828186,
            0.9967828392982483,
            0.9944429993629456,
            0.992854654788971,
            0.9954123497009277,
            0.9957275390625,
            0.9911380410194397
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9935941100120544,
        "body": "    words = s.split()\n    num_fruits = n\n    total_apples = 0\n    total_oranges = 0\n    for word in words:\n        if word.startswith('apples'):\n            total_apples = int(word.split()[0])\n        elif word.startswith('oranges'):\n            total_oranges = int(word.split()[0])\n    num_mangoes = num_fruits - total_apples - total_oranges\n    return num_mangoes",
        "result": "failed: invalid literal for int() with base 10: 'apples'",
        "similarities": [
            0.9907140135765076,
            0.9905409812927246,
            0.9913099408149719,
            0.9924435019493103,
            0.9930132627487183,
            0.9931589365005493,
            0.9831934571266174,
            0.9928000569343567,
            0.9935785531997681,
            0.992437481880188,
            0.9851298332214355,
            0.9855311512947083,
            0.9907800555229187,
            0.9933615326881409,
            0.9820844531059265,
            0.9783608317375183,
            0.9927095174789429,
            0.9913262128829956,
            0.9925877451896667,
            0.9935941100120544
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9970209002494812,
        "body": "    min_even_value = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and (min_even_value is None or val < min_even_value):\n            min_even_value = val\n            smallest_index = i\n    if min_even_value is not None:\n        return [min_even_value, smallest_index]\n    else:\n        return []",
        "result": "passed",
        "similarities": [
            0.9962687492370605,
            0.9959018230438232,
            0.9963249564170837,
            0.9965671896934509,
            0.9961188435554504,
            0.9961839914321899,
            0.9959094524383545,
            0.9941774010658264,
            0.9959016442298889,
            0.9900476336479187,
            0.9945644736289978,
            0.9951580762863159,
            0.9962453246116638,
            0.9970209002494812,
            0.9946180582046509,
            0.9965469241142273,
            0.9949755668640137,
            0.9963455200195312,
            0.9931061267852783,
            0.995776355266571
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9964433312416077,
        "body": "    max_num = 0\n    for num in lst:\n        count = 0\n        for n in lst:\n            if n == num:\n                count += 1\n        if num > max_num and count >= num:\n            max_num = num\n    return -1 if max_num == 0 else max_num",
        "result": "passed",
        "similarities": [
            0.9929934144020081,
            0.9964433312416077,
            0.9959208965301514,
            0.9952995181083679,
            0.9883280396461487,
            0.9951688051223755,
            0.9942256808280945,
            0.9960080981254578,
            0.995090901851654,
            0.9938910603523254,
            0.9835165143013,
            0.9961128234863281,
            0.9954254627227783,
            0.995430588722229,
            0.9953664541244507,
            0.9955323934555054,
            0.9963222146034241,
            0.9899063110351562,
            0.9953094124794006,
            0.9955191612243652
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9949718117713928,
        "body": "    sorted_lst = lst.copy()\n    result = []\n    i = 0\n    while len(sorted_lst) > 0:\n        min_val = sorted_lst[i]\n        for j in range(i + 1, len(sorted_lst)):\n            if sorted_lst[j] < min_val:\n                min_val = sorted_lst[j]\n        result.append(min_val)\n        sorted_lst.remove(min_val)\n        i += 1\n    return result",
        "result": "failed: list index out of range",
        "similarities": [
            0.9829525351524353,
            0.9935134053230286,
            0.9942603707313538,
            0.9939762949943542,
            0.9884454607963562,
            0.9936156272888184,
            0.9935242533683777,
            0.9918793439865112,
            0.991973876953125,
            0.9933461546897888,
            0.9942660927772522,
            0.9932345151901245,
            0.9944933652877808,
            0.9949718117713928,
            0.9861530661582947,
            0.9935276508331299,
            0.9915755391120911,
            0.994053065776825,
            0.993860125541687,
            0.9805145263671875
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9956136345863342,
        "body": "    valid_triangle = (a + b > c) and (a + c > b) and (b + c > a)\n    if not valid_triangle:\n        return -1\n    s = (a + b + c) / 2\n    area = ((s * (s - a)) * (s - b)) * (s - c))\n    return round(area, 2)",
        "result": "failed: unmatched ')' (<string>, line 17)",
        "similarities": [
            0.9950094819068909,
            0.9917502999305725,
            0.9953635334968567,
            0.9942654967308044,
            0.9940783977508545,
            0.9872912168502808,
            0.9951983094215393,
            0.9936046600341797,
            0.9951509237289429,
            0.9926434755325317,
            0.9912745952606201,
            0.995145320892334,
            0.9943938255310059,
            0.9934020042419434,
            0.9930335879325867,
            0.9952330589294434,
            0.9894543886184692,
            0.9956136345863342,
            0.9924718141555786,
            0.9943442940711975
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9953004121780396,
        "body": "        return lst == lst[::-1]\n    \n    elements_sum = 0\n    for i in q:\n        elements_sum += i\n    \n    if not is_balanced(q) or elements_sum > w:\n        return False\n    else:\n        return True",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9951025247573853,
            0.9930616617202759,
            0.9952272176742554,
            0.9878225922584534,
            0.9901971220970154,
            0.9911268353462219,
            0.9904748201370239,
            0.9941136240959167,
            0.9937597513198853,
            0.9903239011764526,
            0.9916584491729736,
            0.9947832226753235,
            0.9926576018333435,
            0.9936555624008179,
            0.9953004121780396,
            0.9928598999977112,
            0.9933317303657532,
            0.9951927661895752,
            0.9935722351074219,
            0.9950772523880005
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9955840110778809,
        "body": "    if len(arr) <= 1:\n        return 0\n    count = 0\n    freq_dict = {}\n    for num in arr:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    for key in sorted(freq_dict.keys()):\n        if freq_dict[key] % 2 != 0:\n            count += (freq_dict[key] - 1) // 2\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9955601096153259,
            0.9941484332084656,
            0.9922900795936584,
            0.9950941205024719,
            0.9925481677055359,
            0.9906234741210938,
            0.9925822019577026,
            0.9941538572311401,
            0.9939814209938049,
            0.9934101104736328,
            0.9930538535118103,
            0.9912956953048706,
            0.9947285056114197,
            0.9949246644973755,
            0.9919101595878601,
            0.9954023957252502,
            0.9955840110778809,
            0.9946001768112183,
            0.993719220161438,
            0.9951490163803101
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9974921345710754,
        "body": "    len_lst1 = 0\n    for i in lst1:\n        len_lst1 += len(i)\n    len_lst2 = 0\n    for i in lst2:\n        len_lst2 += len(i)\n\n    if len_lst1 <= len_lst2:\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "similarities": [
            0.9970323443412781,
            0.9948796033859253,
            0.9974921345710754,
            0.995032787322998,
            0.9928328990936279,
            0.9943006634712219,
            0.997157871723175,
            0.9971361756324768,
            0.9970895648002625,
            0.9966403841972351,
            0.9970098733901978,
            0.9968050718307495,
            0.997383713722229,
            0.9968050718307495,
            0.994831919670105,
            0.9974335432052612,
            0.996932864189148,
            0.9958515167236328,
            0.9914097189903259,
            0.9971791505813599
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9950658679008484,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, a):\n        if is_prime(num):\n            primes.append(num)\n        elif len(primes) == 3 and num <= a / (primes[0] * primes[1] * primes[2]):\n            return True\n    if len(primes) >= 3 and a % (primes[0] * primes[1] * primes[2]) == 0:\n        return True\n    return False",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9921160340309143,
            0.992547869682312,
            0.9935902953147888,
            0.9914861917495728,
            0.9930946230888367,
            0.9827844500541687,
            0.9921034574508667,
            0.9937898516654968,
            0.9912561178207397,
            0.9938571453094482,
            0.9892821311950684,
            0.9915372133255005,
            0.9947395324707031,
            0.9943360090255737,
            0.991298258304596,
            0.9884700775146484,
            0.9950509667396545,
            0.9939874410629272,
            0.9931190013885498,
            0.9950658679008484
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9947702288627625,
        "body": "    if x <= 0 and n > 2: \n        return False\n    for i in range(1, int(n**0.5) + 1): \n        power = n ** i\n        if power == x:\n            return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9938179850578308,
            0.9946202635765076,
            0.9846708178520203,
            0.9936617016792297,
            0.9912288188934326,
            0.9864897727966309,
            0.9896876811981201,
            0.9947702288627625,
            0.9937555193901062,
            0.9905157685279846,
            0.9928235411643982,
            0.9933616518974304,
            0.9895877838134766,
            0.9886053204536438,
            0.9916101098060608,
            0.9944692850112915,
            0.9935952425003052,
            0.9938631653785706,
            0.992323637008667,
            0.9937450289726257
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9964284300804138,
        "body": "    i = 1\n    while i * i * i <= abs(a):\n        if a == i * i * i:\n            return True\n        i += 1\n    return False",
        "result": "failed: Third test error: False",
        "similarities": [
            0.996414303779602,
            0.9948102235794067,
            0.9963216185569763,
            0.9890756011009216,
            0.9963977336883545,
            0.994703471660614,
            0.9963977336883545,
            0.9957897067070007,
            0.9933961629867554,
            0.9956933856010437,
            0.9963977336883545,
            0.9955045580863953,
            0.9961450695991516,
            0.9843571186065674,
            0.9964284300804138,
            0.9963977336883545,
            0.991330623626709,
            0.9964284300804138,
            0.9960500001907349,
            0.9899340271949768
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9980804920196533,
        "body": "    count = 0\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    for digit in num:\n        if digit in prime_digits and digit <= '9':\n            count += 1\n    return count",
        "result": "failed: First test error: 0",
        "similarities": [
            0.9933003187179565,
            0.9956650137901306,
            0.998029887676239,
            0.9979270100593567,
            0.9967718720436096,
            0.9977084994316101,
            0.9978799223899841,
            0.9977198243141174,
            0.9977836608886719,
            0.9946670532226562,
            0.9980804920196533,
            0.997698962688446,
            0.994260311126709,
            0.9934887290000916,
            0.997913658618927,
            0.9962024688720703,
            0.9977183938026428,
            0.9978799223899841,
            0.9976186156272888,
            0.9980804920196533
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9962558746337891,
        "body": "    binary = ''\n    for i in range(8):\n        bit = (decimal >> i) & 1\n        if bit == 0:\n            binary += '0'\n        else:\n            binary += '1'\n    return 'db' + binary + 'db'",
        "result": "failed: ",
        "similarities": [
            0.9951805472373962,
            0.9958183765411377,
            0.9932335615158081,
            0.9959301352500916,
            0.9932044148445129,
            0.9961174726486206,
            0.9929925203323364,
            0.9948023557662964,
            0.9962558746337891,
            0.9945670962333679,
            0.9960598349571228,
            0.9959302544593811,
            0.9961907267570496,
            0.9916706085205078,
            0.9958303570747375,
            0.9936665296554565,
            0.9830639362335205,
            0.9946827292442322,
            0.9933186769485474,
            0.9944177269935608
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9948515892028809,
        "body": "    len_str = len(s)\n    if len_str < 3:\n        return False\n    for i in range(len_str - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9930717945098877,
            0.9866194725036621,
            0.9944795370101929,
            0.9935886859893799,
            0.9912447929382324,
            0.9940839409828186,
            0.9928969144821167,
            0.982513964176178,
            0.9948515892028809,
            0.994797945022583,
            0.9832637310028076,
            0.9918467998504639,
            0.9937342405319214,
            0.9939936399459839,
            0.9942603707313538,
            0.9930530190467834,
            0.9948049783706665,
            0.9933076500892639,
            0.9856559634208679,
            0.994404673576355
        ]
    },
    "HumanEval/81": {
        "similarity": 0.998090922832489,
        "body": "    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades",
        "result": "failed: ",
        "similarities": [
            0.998058021068573,
            0.9974238872528076,
            0.9974111318588257,
            0.9972048401832581,
            0.9980452656745911,
            0.9971728920936584,
            0.998039960861206,
            0.9918390512466431,
            0.9980689883232117,
            0.9980059266090393,
            0.998058021068573,
            0.9980689883232117,
            0.9955601096153259,
            0.9897636771202087,
            0.998090922832489,
            0.9966248273849487,
            0.9959431886672974,
            0.9966543316841125,
            0.9977567791938782,
            0.9979984164237976
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9972613453865051,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    len_string = len(string)\n    return is_prime(len_string)",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9970526695251465,
            0.9954549074172974,
            0.9972236156463623,
            0.9972613453865051,
            0.9960379600524902,
            0.9970147013664246,
            0.9963594675064087,
            0.9971150755882263,
            0.9947170615196228,
            0.9962030053138733,
            0.9972020983695984,
            0.99700528383255,
            0.9968845248222351,
            0.9968156218528748,
            0.9968697428703308,
            0.9968747496604919,
            0.9963387250900269,
            0.9969881772994995,
            0.9951062798500061,
            0.9972196221351624
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9947879314422607,
        "body": "    count = 0\n    for i in range(10**n - 1, (10**(n + 1)) % 10):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9945166707038879,
            0.9937459230422974,
            0.9935012459754944,
            0.9943325519561768,
            0.9916786551475525,
            0.9945904612541199,
            0.9939020276069641,
            0.9911642670631409,
            0.9939392805099487,
            0.9934766888618469,
            0.9945728182792664,
            0.9933433532714844,
            0.9934297204017639,
            0.9938406944274902,
            0.9933468699455261,
            0.9617961049079895,
            0.9947879314422607,
            0.9895209074020386,
            0.9904670715332031,
            0.977393388748169
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9964292645454407,
        "body": "    str_N = ''\n    for i in range(1, N + 1):\n        if N // i == 0:\n            str_N += '1'\n        else:\n            str_N += '0'\n        N -= (N // i) * i\n    return str_N",
        "result": "failed: Error",
        "similarities": [
            0.9947638511657715,
            0.9938768148422241,
            0.9964292645454407,
            0.9904825091362,
            0.9938679933547974,
            0.9957355856895447,
            0.9935935139656067,
            0.9948875308036804,
            0.9956474304199219,
            0.9817491173744202,
            0.9935829639434814,
            0.9950442910194397,
            0.9952664971351624,
            0.9953504204750061,
            0.9958463907241821,
            0.9961510896682739,
            0.993155837059021,
            0.9959860444068909,
            0.9950260519981384,
            0.9940851926803589
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9989119172096252,
        "body": "    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 != 0:\n            result += lst[i]\n    return result",
        "result": "passed",
        "similarities": [
            0.9925380349159241,
            0.9976659417152405,
            0.9989119172096252,
            0.9985804557800293,
            0.9989119172096252,
            0.9989119172096252,
            0.9988051056861877,
            0.9980744123458862,
            0.9984584450721741,
            0.9953809976577759,
            0.9989041686058044,
            0.9989119172096252,
            0.9989119172096252,
            0.9989041686058044,
            0.9983869194984436,
            0.9985804557800293,
            0.9978327751159668,
            0.9982530474662781,
            0.9986520409584045,
            0.9986833333969116
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9970884919166565,
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        chars = sorted(word)\n        new_word = ''.join(chars)\n        result.append(new_word)\n    return ' '.join(result)",
        "result": "passed",
        "similarities": [
            0.9968757629394531,
            0.9920243620872498,
            0.9964357018470764,
            0.9969303607940674,
            0.9967842102050781,
            0.9968365430831909,
            0.9968756437301636,
            0.9968756437301636,
            0.9968757629394531,
            0.9956327676773071,
            0.9968757629394531,
            0.9967712759971619,
            0.9968757629394531,
            0.9967712759971619,
            0.9969303607940674,
            0.9968757629394531,
            0.9969303607940674,
            0.9910296201705933,
            0.9770576357841492,
            0.9970884919166565
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9951855540275574,
        "body": "    row_coords = []\n    for i, sub_lst in enumerate(lst):\n        if x in sub_lst:\n            col_list = sorted((j for j, val in enumerate(sub_lst) if val == x), reverse=True)\n            for j in col_list:\n                row_coords.append((i, j))\n    return row_coords",
        "result": "passed",
        "similarities": [
            0.9951855540275574,
            0.9940472841262817,
            0.9947700500488281,
            0.9923232197761536,
            0.9924139976501465,
            0.9943197965621948,
            0.992420494556427,
            0.9915668368339539,
            0.9934569001197815,
            0.9937968850135803,
            0.9940647482872009,
            0.9930369853973389,
            0.9948900938034058,
            0.9951224327087402,
            0.9936806559562683,
            0.9943490624427795,
            0.9927546977996826,
            0.9924396872520447,
            0.994101881980896,
            0.9766038656234741
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9957749247550964,
        "body": "    sorted_array = array[:]  \n    for i in range(len(sorted_array)):\n        for j in range(i + 1, len(sorted_array)):\n            if sorted_array[i] <= sorted_array[j]:\n                temp = sorted_array[i]\n                sorted_array[i] = sorted_array[j]\n                sorted_array[j] = temp\n    sum_first_last = sorted_array[0] + sorted_array[-1]\n    for i in range(len(sorted_array) - 1):\n        for j in range(i + 1, len(sorted_array)):\n            if sorted_array[i] >= sorted_array[j]:\n                temp = sorted_array[i]\n                sorted_array[i] = sorted_array[j]\n                sorted_array[j] = temp\n    return sorted_array if sum_first_last % 2 == 0 else sorted(array)",
        "result": "failed: list index out of range",
        "similarities": [
            0.9957749247550964,
            0.9944620728492737,
            0.9949291944503784,
            0.9947986602783203,
            0.9954163432121277,
            0.9927185773849487,
            0.9941926598548889,
            0.9957269430160522,
            0.9929111003875732,
            0.9928792715072632,
            0.9956233501434326,
            0.9950810670852661,
            0.9953612089157104,
            0.9923107624053955,
            0.9930239319801331,
            0.995111882686615,
            0.9908662438392639,
            0.9772878885269165,
            0.9949374794960022,
            0.9954378008842468
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9977292418479919,
        "body": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            index = (alphabet.index(char.lower()) + shift) % 26\n            if char.isupper():\n                result += alphabet[index].upper()\n            else:\n                result += alphabet[index]\n        else:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9976865649223328,
            0.996764063835144,
            0.9976922869682312,
            0.9941151142120361,
            0.9971963763237,
            0.9974771738052368,
            0.9970715045928955,
            0.9952601194381714,
            0.996830403804779,
            0.9923262596130371,
            0.9947746992111206,
            0.9963712096214294,
            0.9975621104240417,
            0.9974977374076843,
            0.9974809288978577,
            0.996100664138794,
            0.9943181872367859,
            0.9977292418479919,
            0.9957033395767212,
            0.9955903887748718
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9956464171409607,
        "body": "    smallest = None\n    second_smallest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num <= smallest and num > second_smallest:\n            second_smallest = num\n    return second_smallest",
        "result": "failed: ",
        "similarities": [
            0.9952077269554138,
            0.9896388649940491,
            0.9944229125976562,
            0.9939966797828674,
            0.9885784983634949,
            0.9955265522003174,
            0.9956298470497131,
            0.9935979247093201,
            0.9956464171409607,
            0.9955810904502869,
            0.990837812423706,
            0.9955810904502869,
            0.9945738911628723,
            0.9929265379905701,
            0.9950058460235596,
            0.9944199919700623,
            0.9930427074432373,
            0.9929265379905701,
            0.9890116453170776,
            0.99254310131073
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9955202341079712,
        "body": "    sentences = S.split('. ')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == 'i':\n            boredoms += 1\n    return boredoms",
        "result": "passed",
        "similarities": [
            0.9953101277351379,
            0.9955202341079712,
            0.9894118309020996,
            0.992946207523346,
            0.9941881895065308,
            0.9944076538085938,
            0.9940032958984375,
            0.9951041340827942,
            0.9923657178878784,
            0.9918996095657349,
            0.9792002439498901,
            0.9950989484786987,
            0.9926819205284119,
            0.9913135170936584,
            0.9913161396980286,
            0.994021475315094,
            0.992387056350708,
            0.9946688413619995,
            0.991178035736084,
            0.9815688133239746
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9931471943855286,
        "body": "    for num in [x, y, z]:\n        if isinstance(num, int):\n            for other_num1, other_num2 in [(x, y), (y, x), (z, x), (x, z), (z, y), (y, z)]:\n                if other_num1 + other_num2 == num and isinstance(other_num1, int) and isinstance(other_num2, int):\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9930749535560608,
            0.9929501414299011,
            0.9920468926429749,
            0.9825114011764526,
            0.9915658831596375,
            0.9893054962158203,
            0.9912822246551514,
            0.99004065990448,
            0.9858357310295105,
            0.9931471943855286,
            0.9917569756507874,
            0.9921197295188904,
            0.9926236867904663,
            0.9906308054924011,
            0.9842352867126465,
            0.9919074177742004,
            0.99184650182724,
            0.9858981966972351,
            0.9917859435081482,
            0.9868557453155518
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9965704083442688,
        "body": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    i = 0\n    for char in message:\n        if char in vowels:\n            next_index = (ord(char) + 2) % 26\n            if char.islower():\n                encoded_message += chr(97 + next_index)\n            else:\n                encoded_message += chr(65 + next_index)\n        elif char.isalpha():\n            if char.islower():\n                encoded_message += chr((ord(char) - 96) * 2)\n            else:\n                encoded_message += chr((ord(char) - 64) * 2)\n        i += 1\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.995651364326477,
            0.9963145852088928,
            0.9904447197914124,
            0.9958987236022949,
            0.9963150024414062,
            0.9949674010276794,
            0.9953829050064087,
            0.9865797162055969,
            0.9928568601608276,
            0.9964113831520081,
            0.9958931803703308,
            0.9965704083442688,
            0.9949279427528381,
            0.9954017996788025,
            0.9955077171325684,
            0.9956501722335815,
            0.9958508014678955,
            0.9954063296318054,
            0.9957401752471924,
            0.9926964640617371
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9976290464401245,
        "body": "    max_prime = None\n    for num in lst:\n        is_prime = True\n        if num < 2:\n            continue\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and (max_prime is None or num > max_prime):\n            max_prime = num\n    sum_of_digits = 0\n    for digit in str(max_prime):\n        sum_of_digits += int(digit)\n    return sum_of_digits",
        "result": "passed",
        "similarities": [
            0.9970887899398804,
            0.9940776824951172,
            0.9956518411636353,
            0.9963912963867188,
            0.9963262677192688,
            0.9970152974128723,
            0.9959743022918701,
            0.9948236346244812,
            0.9961415529251099,
            0.9969014525413513,
            0.9966044425964355,
            0.9970542788505554,
            0.9974483847618103,
            0.9969840049743652,
            0.995249330997467,
            0.9976290464401245,
            0.9973831176757812,
            0.9965736269950867,
            0.9947546124458313,
            0.9973386526107788
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9963306784629822,
        "body": "    all_lower = True\n    all_upper = True\n    for key in dict.keys():\n        if not isinstance(key, str) or (key.islower() == False and key.isupper() == False):\n            return False\n        elif key.islower():\n            all_upper = False\n        else:\n            all_lower = False\n    return (all_lower or all_upper) and len(dict) > 0",
        "result": "passed",
        "similarities": [
            0.9944257140159607,
            0.9940914511680603,
            0.9936732053756714,
            0.9940110445022583,
            0.9943335652351379,
            0.9951057434082031,
            0.9959536194801331,
            0.9954301118850708,
            0.9950364828109741,
            0.9963306784629822,
            0.9948517680168152,
            0.9914762377738953,
            0.9856278300285339,
            0.9962961077690125,
            0.9933815002441406,
            0.9947989583015442,
            0.9959951639175415,
            0.9943379163742065,
            0.9953115582466125,
            0.9937571287155151
        ]
    },
    "HumanEval/96": {
        "similarity": 0.998665988445282,
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    prime_nums = []\n    for possible_prime in range(2, n):\n        if is_prime(possible_prime):\n            prime_nums.append(possible_prime)\n        if len(prime_nums) >= n - 1:\n            break\n    return prime_nums",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9984669089317322,
            0.9982250928878784,
            0.998508632183075,
            0.9981831908226013,
            0.998481035232544,
            0.9986528158187866,
            0.9967058897018433,
            0.9985449910163879,
            0.9985153675079346,
            0.998317301273346,
            0.9982480406761169,
            0.9983956217765808,
            0.9958526492118835,
            0.9983982443809509,
            0.9982277750968933,
            0.9962021708488464,
            0.9979386925697327,
            0.9984831809997559,
            0.9983208179473877,
            0.998665988445282
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9952053427696228,
        "body": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product_unit_digits = unit_digit_a * unit_digit_b\n    return product_unit_digits",
        "result": "passed",
        "similarities": [
            0.9952053427696228,
            0.9952053427696228,
            0.9947887063026428,
            0.9934480786323547,
            0.9920413494110107,
            0.9934499859809875,
            0.9941429495811462,
            0.9938169717788696,
            0.9938169717788696,
            0.9952053427696228,
            0.9938169717788696,
            0.987859845161438,
            0.9821731448173523,
            0.979892909526825,
            0.992628812789917,
            0.9938169717788696,
            0.9947285056114197,
            0.992985188961029,
            0.9952053427696228,
            0.9776613116264343
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9974202513694763,
        "body": "    upper_vowels = 'AEIOU'\n    total_count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in upper_vowels:\n            total_count += 1\n    return total_count",
        "result": "failed: ",
        "similarities": [
            0.9974202513694763,
            0.9926113486289978,
            0.9973623156547546,
            0.9951243996620178,
            0.9962483644485474,
            0.9973455667495728,
            0.9969698190689087,
            0.9962803721427917,
            0.9968974590301514,
            0.9973700642585754,
            0.991037905216217,
            0.9957314729690552,
            0.9937148690223694,
            0.9966203570365906,
            0.9868314862251282,
            0.9969382882118225,
            0.9957149028778076,
            0.9952376484870911,
            0.9955008625984192,
            0.997318685054779
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9944921731948853,
        "body": "    value = float(value)\n    possible_integers = []\n    for i in range(int(value) - 1, int(value) + 2):\n        possible_integers.append(i)\n\n    lowest_diff = abs(possible_integers[0] - value)\n    best_guess = None\n    for integer in possible_integers:\n        diff = abs(integer - value)\n        if diff < lowest_diff or (diff == lowest_diff and integer > 0):\n            lowest_diff = diff\n            best_guess = integer\n\n    return best_guess",
        "result": "failed: Test 3",
        "similarities": [
            0.992075502872467,
            0.9944921731948853,
            0.9929627180099487,
            0.9925958514213562,
            0.9942982196807861,
            0.9932031035423279,
            0.9931082725524902,
            0.9882417321205139,
            0.9829688668251038,
            0.9919178485870361,
            0.990494966506958,
            0.9941774606704712,
            0.9889104962348938,
            0.9922595620155334,
            0.9898501038551331,
            0.9911767244338989,
            0.9863153100013733,
            0.9901221394538879,
            0.9935439229011536,
            0.9897393584251404
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9969751238822937,
        "body": "    result = []\n    i = 0\n    for _ in range(n):\n        if n % 2 == 1:\n            next_odd = (n + i) * 2 - 1\n        else:\n            next_even = n + i\n        result.append(next_even)\n        i += 1\n    return result",
        "result": "failed: local variable 'next_even' referenced before assignment",
        "similarities": [
            0.9957717061042786,
            0.9930017590522766,
            0.9969751238822937,
            0.9943572878837585,
            0.9921609163284302,
            0.9962215423583984,
            0.9962087869644165,
            0.9863244891166687,
            0.9924715757369995,
            0.9945821166038513,
            0.9959987998008728,
            0.9951663017272949,
            0.9966025352478027,
            0.9965636730194092,
            0.9961829781532288,
            0.9950081706047058,
            0.9964306354522705,
            0.996333658695221,
            0.9939918518066406,
            0.9959543347358704
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9924775958061218,
        "body": "    s = s.replace(',', ' ')\n    word_list = []\n    split_words = s.split()\n    for word in split_words:\n        if len(word) > 0:\n            word_list.append(word)\n    return word_list",
        "result": "passed",
        "similarities": [
            0.9920475482940674,
            0.9901379346847534,
            0.9924775958061218,
            0.9886394143104553,
            0.9822052717208862,
            0.989518940448761,
            0.9917470216751099,
            0.9764876365661621,
            0.9899751543998718,
            0.9805396199226379,
            0.9900009036064148,
            0.9911472201347351,
            0.9893614053726196,
            0.9901944398880005,
            0.9891545176506042,
            0.9917589426040649,
            0.9893786907196045,
            0.9744898080825806,
            0.9910747408866882,
            0.9884700775146484
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9929478168487549,
        "body": "    found = False\n    for num in range(y, x-1, -2):\n        if (num >= x) and (num <= y):\n            return num\n    if not found:\n        return -1",
        "result": "failed: ",
        "similarities": [
            0.9927476644515991,
            0.9897647500038147,
            0.9864441752433777,
            0.9929478168487549,
            0.9905928373336792,
            0.9926071166992188,
            0.9905928373336792,
            0.9892277121543884,
            0.9864441752433777,
            0.9898157715797424,
            0.9916510581970215,
            0.982366144657135,
            0.9860257506370544,
            0.9879113435745239,
            0.9867333173751831,
            0.9854152202606201,
            0.9863273501396179,
            0.9916946291923523,
            0.9912187457084656,
            0.9919865131378174
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9972403645515442,
        "body": "if n > m:\n    return -1\nelse:\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    avg = total // count\n    rounded_avg = (avg + 1) // 2 if avg * 2 % 1 >= 1 else (avg - 1) // 2\n    return bin(rounded_avg)[2:]",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9951475858688354,
            0.9971310496330261,
            0.9965071678161621,
            0.9965535402297974,
            0.9967212677001953,
            0.9969775676727295,
            0.9969690442085266,
            0.99449622631073,
            0.9952621459960938,
            0.9940886497497559,
            0.9919938445091248,
            0.994299054145813,
            0.9971571564674377,
            0.9968891143798828,
            0.9972403645515442,
            0.9966238141059875,
            0.9904347658157349,
            0.9955518841743469,
            0.9971646666526794,
            0.9959290027618408
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9978305697441101,
        "body": "    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result",
        "result": "passed",
        "similarities": [
            0.9962834715843201,
            0.9899965524673462,
            0.9978305697441101,
            0.9962834715843201,
            0.992699384689331,
            0.9978305697441101,
            0.9978305697441101,
            0.9962834715843201,
            0.9962834715843201,
            0.9940621256828308,
            0.9958266019821167,
            0.9978305697441101,
            0.9977900981903076,
            0.9966940879821777,
            0.9977900981903076,
            0.997417151927948,
            0.9978305697441101,
            0.997737467288971,
            0.9970880150794983,
            0.9962834715843201
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9926829934120178,
        "body": "    digits = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for num in arr:\n        if 1 <= num <= 9:\n            sorted_arr.append(num)\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    result = []\n    for num in sorted_arr:\n        index = digits.index(digits[num - 1])\n        result.append(digits[index])\n    return result",
        "result": "failed: Error",
        "similarities": [
            0.9811743497848511,
            0.9857844114303589,
            0.9808034300804138,
            0.9908092021942139,
            0.9884912371635437,
            0.9920347332954407,
            0.9851335287094116,
            0.9853220582008362,
            0.9907750487327576,
            0.9878447651863098,
            0.9858210682868958,
            0.991294264793396,
            0.9925047159194946,
            0.9926829934120178,
            0.9917445182800293,
            0.9899263978004456,
            0.9919995069503784,
            0.9825559258460999,
            0.9915174245834351,
            0.9889923930168152
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9984302520751953,
        "body": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            total = 0\n            for k in range(1, i + 1):\n                total += k\n            result.append(total)\n    return result",
        "result": "passed",
        "similarities": [
            0.9969006776809692,
            0.9969912171363831,
            0.9983074069023132,
            0.9976950287818909,
            0.9976991415023804,
            0.9975180625915527,
            0.9965129494667053,
            0.9981827139854431,
            0.9974618554115295,
            0.9965423941612244,
            0.9983484148979187,
            0.9953595995903015,
            0.9981956481933594,
            0.9965481162071228,
            0.9984302520751953,
            0.9979868531227112,
            0.9983865022659302,
            0.9974967837333679,
            0.9977611899375916,
            0.9981827139854431
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9971452355384827,
        "body": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        str_i = str(i)\n        if len(str_i) == len(str_i[::-1]):\n            if int(str_i) % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)",
        "result": "failed: ",
        "similarities": [
            0.9968321919441223,
            0.9958183765411377,
            0.9965671896934509,
            0.9966625571250916,
            0.9970516562461853,
            0.9958239197731018,
            0.9965583682060242,
            0.9955797791481018,
            0.9935541749000549,
            0.9967483878135681,
            0.9797347187995911,
            0.9971452355384827,
            0.996059238910675,
            0.99495929479599,
            0.9953934550285339,
            0.9966515898704529,
            0.9953609108924866,
            0.9967889189720154,
            0.9967889189720154,
            0.9971053600311279
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9971297383308411,
        "body": "    counter = 0\n    for num in arr:\n        signed_digits_sum = 0\n        is_negative = False\n        if num < 0:\n            is_negative = True\n            num = -num\n        for digit in str(num):\n            signed_digits_sum += int(digit) * (1 if not is_negative else -1)\n        if signed_digits_sum > 0:\n            counter += 1\n    return counter",
        "result": "failed: ",
        "similarities": [
            0.99640291929245,
            0.9968383312225342,
            0.9963663220405579,
            0.9927265644073486,
            0.9926761984825134,
            0.9944503307342529,
            0.9971297383308411,
            0.9941118359565735,
            0.9942547678947449,
            0.9966292381286621,
            0.9956024885177612,
            0.9959946870803833,
            0.9965774416923523,
            0.9961480498313904,
            0.9959595203399658,
            0.9956458210945129,
            0.9964385032653809,
            0.996406078338623,
            0.9948724508285522,
            0.9969438314437866
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9930304288864136,
        "body": "    sorted_arr = arr[:]\n    sorted_arr.sort()\n    if len(sorted_arr) == 0 or len(arr) <= len(sorted_arr):\n        return True\n    for i in range(len(sorted_arr)):\n        if sorted_arr[i] != arr[-(i + 1)]:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9893597960472107,
            0.9918152689933777,
            0.9817748665809631,
            0.9864062070846558,
            0.9893597960472107,
            0.9815527200698853,
            0.9919279217720032,
            0.9814710021018982,
            0.990476131439209,
            0.99078768491745,
            0.9915094971656799,
            0.9919333457946777,
            0.992059588432312,
            0.9928552508354187,
            0.9930304288864136,
            0.9872492551803589,
            0.9863747358322144,
            0.9923298358917236,
            0.9878917336463928,
            0.9872884154319763
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9955317974090576,
        "body": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 != 0 and even_count > 0:\n            lst1.remove(num)\n            lst2.append(num)\n            even_count -= 1\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\"",
        "result": "failed: list.remove(x): x not in list",
        "similarities": [
            0.993455708026886,
            0.9953205585479736,
            0.9882755279541016,
            0.9944238066673279,
            0.9944642782211304,
            0.9939049482345581,
            0.9947386384010315,
            0.9889217019081116,
            0.9947391152381897,
            0.9935051798820496,
            0.9921950101852417,
            0.9951099753379822,
            0.9954326152801514,
            0.9901388883590698,
            0.9863046407699585,
            0.9929994344711304,
            0.993369460105896,
            0.9955317974090576,
            0.9944227337837219,
            0.9928399920463562
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9971871972084045,
        "body": "    count_dict = {}\n    max_count = 0\n    for word in test.split():\n        for char in word:\n            if char not in count_dict:\n                count_dict[char] = 1\n            else:\n                count_dict[char] += 1\n            if count_dict[char] > max_count:\n                max_count = count_dict[char]\n    result = {}\n    for key, value in count_dict.items():\n        if value == max_count:\n            result[key] = value\n    return result",
        "result": "passed",
        "similarities": [
            0.9943104982376099,
            0.9942155480384827,
            0.997054934501648,
            0.9965418577194214,
            0.9951707720756531,
            0.9971871972084045,
            0.9956333637237549,
            0.9963356852531433,
            0.9971564412117004,
            0.9966333508491516,
            0.9971131086349487,
            0.9969279766082764,
            0.9963545799255371,
            0.9957876801490784,
            0.9964096546173096,
            0.9966881275177002,
            0.9966816306114197,
            0.996749758720398,
            0.9947214722633362,
            0.996277391910553
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9950065612792969,
        "body": "    chars_to_remove = []\n    for char in c:\n        while char in s:\n            chars_to_remove.append(char)\n            s = s.replace(char, '', 1)\n    result_str = ''.join(sorted(s))\n    is_palindrome = result_str == result_str[::-1]\n    return (result_str, is_palindrome)",
        "result": "failed: ",
        "similarities": [
            0.9938406944274902,
            0.9925042390823364,
            0.9926273822784424,
            0.9913814067840576,
            0.9891754984855652,
            0.9947780966758728,
            0.9946343302726746,
            0.9936315417289734,
            0.9946339130401611,
            0.9946080446243286,
            0.9938424825668335,
            0.9925914406776428,
            0.9941114187240601,
            0.9889459013938904,
            0.9942600131034851,
            0.9929108023643494,
            0.9936347603797913,
            0.9924778342247009,
            0.9920631051063538,
            0.9950065612792969
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9963069558143616,
        "body": "    result = []\n    for i in range(len(lst)):\n        count = 0\n        string = lst[i]\n        for char in string:\n            if int(char) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {len(lst)}put.\")",
        "result": "failed: Test 1",
        "similarities": [
            0.9956287741661072,
            0.9944002032279968,
            0.9955687522888184,
            0.9952308535575867,
            0.9931753277778625,
            0.9920602440834045,
            0.9960246682167053,
            0.9846755862236023,
            0.9954088926315308,
            0.9960739612579346,
            0.9952409863471985,
            0.994411289691925,
            0.9951176047325134,
            0.99542635679245,
            0.9947226643562317,
            0.9876120686531067,
            0.9946662783622742,
            0.9943369030952454,
            0.9955500364303589,
            0.9963069558143616
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9938872456550598,
        "body": "    if not nums:\n        return None\n\n    curr_min = float('inf')\n    total = 0\n\n    for num in nums:\n        total += num\n        curr_min = min(curr_min, total)\n\n    return curr_min",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9912528991699219,
            0.9921883940696716,
            0.9935626983642578,
            0.9904849529266357,
            0.9899777770042419,
            0.992576003074646,
            0.9929466247558594,
            0.992205798625946,
            0.9703624248504639,
            0.9934145212173462,
            0.9933170676231384,
            0.9934146404266357,
            0.9916711449623108,
            0.9866166710853577,
            0.9833396077156067,
            0.9936439990997314,
            0.9938872456550598,
            0.9934146404266357,
            0.9914351105690002,
            0.9935298562049866
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9923133850097656,
        "body": "    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    filled_buckets = 0\n    remaining_water = total_water\n    while remaining_water > 0:\n        for i in range(len(grid)):\n            wells_in_row = len(grid[i])\n            water_to_extract = min(wells_in_row, remaining_water // capacity)\n            remaining_water -= water_to_extract * capacity\n            filled_buckets += 1",
        "result": "failed: Error",
        "similarities": [
            0.9917329549789429,
            0.9886133074760437,
            0.9820871949195862,
            0.9838118553161621,
            0.9897362589836121,
            0.9896770119667053,
            0.9856894612312317,
            0.9674732685089111,
            0.9886605143547058,
            0.9852994680404663,
            0.9906030297279358,
            0.990655779838562,
            0.9904924035072327,
            0.9860143065452576,
            0.9909946918487549,
            0.9792110919952393,
            0.9893084168434143,
            0.9923133850097656,
            0.9805942177772522,
            0.9888786673545837
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9887763857841492,
        "body": "    for num in arr:\n        ones = bin(num).count('1')\n        decimal_val = num\n        yield (ones, decimal_val)\n    sorted_arr = []\n    for item in sorted(yielded):\n        sorted_arr.append(item[1])\n    return sorted_arr",
        "result": "failed: ",
        "similarities": [
            0.9825978875160217,
            0.9850870370864868,
            0.9833050966262817,
            0.9809574484825134,
            0.9825978875160217,
            0.9887763857841492,
            0.9818266034126282,
            0.9833050966262817,
            0.9739347100257874,
            0.9798572063446045,
            0.9833050966262817,
            0.978142499923706,
            0.979154109954834,
            0.9845467805862427,
            0.9867822527885437,
            0.9885139465332031,
            0.9794831871986389,
            0.9833050966262817,
            0.9833050966262817,
            0.9861328601837158
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9973715543746948,
        "body": "    words = s.split()\n    selected_words = []\n    for word in words:\n        consonants = 0\n        vowels = 'aeiou'\n        for char in word.lower():\n            if char not in vowels and char.isalpha():\n                consonants += 1\n        if consonants == n:\n            selected_words.append(word)\n    return selected_words",
        "result": "passed",
        "similarities": [
            0.997340977191925,
            0.996012270450592,
            0.9960429668426514,
            0.9942938089370728,
            0.9942144155502319,
            0.9967302083969116,
            0.997215986251831,
            0.9968970417976379,
            0.9972541332244873,
            0.9973715543746948,
            0.9973258972167969,
            0.9971257448196411,
            0.9958143830299377,
            0.9944604635238647,
            0.9967758059501648,
            0.9954434633255005,
            0.9967119097709656,
            0.9943172931671143,
            0.9960873126983643,
            0.986293613910675
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9968687295913696,
        "body": "    vowels = 'aeiouAEIOU'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] not in vowels and word[i-1] not in vowels:\n            return word[i]\n        elif word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "failed: ",
        "similarities": [
            0.9963657855987549,
            0.9954031705856323,
            0.995233416557312,
            0.9968480467796326,
            0.9966797232627869,
            0.9967637658119202,
            0.9966966509819031,
            0.9968687295913696,
            0.9965844750404358,
            0.993792712688446,
            0.9958919882774353,
            0.9963948130607605,
            0.9963234663009644,
            0.9956207275390625,
            0.9962959289550781,
            0.9959588646888733,
            0.9927255511283875,
            0.9963701963424683,
            0.9968606233596802,
            0.9825261831283569
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9951017498970032,
        "body": "        open_count = 0\n        close_count = 0\n        for s in lst:\n            if s[0] == '(':\n                open_count += 1\n            else:\n                close_count += 1\n        for s in lst:\n            if s[0] == '(' and (close_count > open_count or open_count > 0):\n                return 'No'\n            elif s[0] == ')' and (open_count > close_count or close_count < 1):\n                return 'No'\n            else:\n                pass\n        return 'Yes'",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.9949267506599426,
            0.9942484498023987,
            0.993376612663269,
            0.9946714639663696,
            0.9914066791534424,
            0.9947921633720398,
            0.9899843335151672,
            0.9917188882827759,
            0.9929824471473694,
            0.9945346713066101,
            0.9927598834037781,
            0.9912047386169434,
            0.9947298169136047,
            0.9929956197738647,
            0.9922624230384827,
            0.9899007081985474,
            0.9918801188468933,
            0.9951017498970032,
            0.9950940012931824,
            0.988736093044281
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9960730671882629,
        "body": "    arr.sort()\n    max_numbers = []\n    for i in range(k):\n        max_numbers.append(arr[i])\n    return max_numbers",
        "result": "failed: ",
        "similarities": [
            0.9957423806190491,
            0.9954627156257629,
            0.9945325255393982,
            0.9937657117843628,
            0.9956380724906921,
            0.9959203004837036,
            0.9952248334884644,
            0.9921475648880005,
            0.9895870089530945,
            0.9909257292747498,
            0.9928117990493774,
            0.9947443604469299,
            0.9871698617935181,
            0.9918550252914429,
            0.9960730671882629,
            0.993294358253479,
            0.9959203004837036,
            0.9872621297836304,
            0.9952360391616821,
            0.9954627156257629
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9978368878364563,
        "body": "    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and (i + 1) % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum",
        "result": "failed: ",
        "similarities": [
            0.9977903962135315,
            0.9975641965866089,
            0.9976668357849121,
            0.9978368878364563,
            0.9977682828903198,
            0.9971643090248108,
            0.9978269338607788,
            0.9966098666191101,
            0.9975981712341309,
            0.9969532489776611,
            0.9962573647499084,
            0.9962099194526672,
            0.9978033304214478,
            0.9867864847183228,
            0.9973417520523071,
            0.9973885416984558,
            0.9976341724395752,
            0.9976969361305237,
            0.9864178895950317,
            0.9978320598602295
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9972107410430908,
        "body": "    total_sum = 0\n    for i in range(k):\n        num = arr[i]\n        if num < 100 or num >= 10 and num <= 99:\n            total_sum += num\n    return total_sum",
        "result": "passed",
        "similarities": [
            0.9959415793418884,
            0.9964277148246765,
            0.9969279766082764,
            0.9971863627433777,
            0.9960224628448486,
            0.9953545928001404,
            0.9972027540206909,
            0.9962328672409058,
            0.9866876006126404,
            0.997203528881073,
            0.9972107410430908,
            0.9971970915794373,
            0.9957074522972107,
            0.9970259666442871,
            0.9932550191879272,
            0.9969805479049683,
            0.996758222579956,
            0.9948785901069641,
            0.9922385215759277,
            0.9945917725563049
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9981296062469482,
        "body": "    collatz_sequence = [n]\n    while n != 1: \n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = []\n    for num in collatz_sequence:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return sorted(odd_numbers)",
        "result": "passed",
        "similarities": [
            0.9981296062469482,
            0.9976822733879089,
            0.9981135129928589,
            0.9957226514816284,
            0.9980347156524658,
            0.9958633780479431,
            0.9980600476264954,
            0.9971018433570862,
            0.9942285418510437,
            0.9962831139564514,
            0.99700927734375,
            0.9978781342506409,
            0.997458815574646,
            0.9977625608444214,
            0.9980226755142212,
            0.9974166750907898,
            0.9951297640800476,
            0.9973072409629822,
            0.9975864291191101,
            0.9978380799293518
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9944815635681152,
        "body": "    day_month_year = date.split('-')\n    if len(day_month_year) != 3 or '' in day_month_year:\n        return False\n\n    month, day, year = map(int, day_month_year)\n    if not (1 <= month <= 12):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    elif (month in [1,3,5,7,8,10,12] and (day < 1 or day > 31)) \\\n         or (month in [4,6,9,11] and (day < 1 or day > 30)):\n        return False\n\n    return True",
        "result": "passed",
        "similarities": [
            0.9944815635681152,
            0.987656831741333,
            0.9944787621498108,
            0.9940868020057678,
            0.9902940392494202,
            0.9896419048309326,
            0.9871484041213989,
            0.99350506067276,
            0.9865955710411072,
            0.9894526600837708,
            0.9936973452568054,
            0.9943935871124268,
            0.9936938881874084,
            0.9931254386901855,
            0.9937971234321594,
            0.9922698140144348,
            0.9936220049858093,
            0.9910341501235962,
            0.9922363758087158,
            0.9915753602981567
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9938772916793823,
        "body": "    words = []\n    for char in txt:\n        if char.isalnum():\n            word += char\n        elif char.isspace() or (not words and char == ','):\n            if word:\n                words.append(word)\n            word = ''\n        else:\n            word = ''\n    words = [word.replace(',', '') for word in words]\n    odd_count = 0\n    for i, letter in enumerate(txt.lower()):\n        if ord(letter) % 2 != 0 and letter.isalpha():\n            odd_count += 1\n    return (words if len(set(words)) == len(words) else None) or odd_count",
        "result": "failed: local variable 'word' referenced before assignment",
        "similarities": [
            0.9861205220222473,
            0.9921078085899353,
            0.9907145500183105,
            0.9938772916793823,
            0.9615861177444458,
            0.9933606386184692,
            0.9922369122505188,
            0.9889941811561584,
            0.9933914542198181,
            0.9919759631156921,
            0.9936331510543823,
            0.9847155213356018,
            0.9895393252372742,
            0.9931182861328125,
            0.9882750511169434,
            0.9934438467025757,
            0.9929564595222473,
            0.9932080507278442,
            0.9930126667022705,
            0.9903421998023987
        ]
    },
    "HumanEval/126": {
        "similarity": 0.995331346988678,
        "body": "    i = 0\n    while i < len(lst) - 1:\n        if lst[i] > lst[i + 1]:\n            return False\n        for j in range(i + 2, len(lst)):\n            if lst[j] == lst[i]:\n                return False\n        i += 1\n    return True",
        "result": "passed",
        "similarities": [
            0.9939485788345337,
            0.9947400689125061,
            0.9948605895042419,
            0.9916896820068359,
            0.9858454465866089,
            0.9892240762710571,
            0.9942072033882141,
            0.9939601421356201,
            0.9843045473098755,
            0.9952811002731323,
            0.9947134256362915,
            0.9950783252716064,
            0.9885507225990295,
            0.991356611251831,
            0.9950658679008484,
            0.9941137433052063,
            0.9915944337844849,
            0.9951710104942322,
            0.9944764375686646,
            0.995331346988678
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9973750710487366,
        "body": "    min_start = min(interval1[0], interval2[0])\n    max_end = max(interval1[1], interval2[1])\n\n    overlap_length = max(0, (max_end - min_start))\n\n    is_prime = True\n    if overlap_length > 1:\n        for i in range(2, int(overlap_length ** 0.5) + 1):\n            if overlap_length % i == 0:\n                is_prime = False\n                break\n\n    return \"YES\" if is_prime else \"NO\"",
        "result": "failed: ",
        "similarities": [
            0.9965335726737976,
            0.9964447021484375,
            0.9957957863807678,
            0.9958845376968384,
            0.9955313801765442,
            0.9973267316818237,
            0.9973574280738831,
            0.9908401370048523,
            0.994293212890625,
            0.9945947527885437,
            0.9968735575675964,
            0.9971984028816223,
            0.997180163860321,
            0.9973750710487366,
            0.9968924522399902,
            0.9959655404090881,
            0.9966817498207092,
            0.9962220788002014,
            0.9962100982666016,
            0.997043788433075
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9973562955856323,
        "body": "    if not arr:\n        return None\n    signs = []\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        signs.append(sign)\n    product_of_signs = 1\n    for sign in signs:\n        product_of_signs *= sign\n    total_sum = sum(abs(num) * product_of_signs for num in arr)\n    return total_sum",
        "result": "passed",
        "similarities": [
            0.9949693083763123,
            0.9970399141311646,
            0.9956101775169373,
            0.9959961771965027,
            0.9970867037773132,
            0.9955636858940125,
            0.9970107078552246,
            0.9973220825195312,
            0.9973562955856323,
            0.997314453125,
            0.9948357939720154,
            0.9960008263587952,
            0.9929492473602295,
            0.9963011741638184,
            0.9966575503349304,
            0.9965930581092834,
            0.9962280988693237,
            0.994761049747467,
            0.9971602559089661,
            0.9966065287590027
        ]
    },
    "HumanEval/129": {
        "similarity": 0.997504711151123,
        "body": "    n = len(grid)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    min_path = []\n    visited = [[False for _ in range(n)] for _ in range(n)]\n\n        if len(current_path) == k:\n            return current_path\n        min_path_candidate = None\n\n        for d in directions:\n            new_row, new_col = current_cell[0] + d[0], current_cell[1] + d[1]\n            if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col]:\n                visited[new_row][new_col] = True\n                result = dfs((new_row, new_col), current_path + [grid[new_row][new_col]], steps + 1)\n                visited[new_row][new_col] = False\n                if min_path_candidate is None or result < min_path_candidate:\n                    min_path_candidate = result\n\n        return min_path_candidate\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path = dfs((i, j), [grid[i][j]], 1)\n            if min_path == [] or path < min_path:\n                min_path = path\n            for x in range(n):\n                for y in range(n):\n                    visited[x][y] = False",
        "result": "failed: unexpected indent (<string>, line 37)",
        "similarities": [
            0.9953601360321045,
            0.997146487236023,
            0.997504711151123,
            0.9956484436988831,
            0.9966475963592529,
            0.9967358112335205,
            0.996833324432373,
            0.9975019097328186,
            0.9969027638435364,
            0.9967105388641357,
            0.9972990155220032,
            0.9966147541999817,
            0.9966916441917419,
            0.997148334980011,
            0.9964426159858704,
            0.9967915415763855,
            0.9965152740478516,
            0.9963932037353516,
            0.9974486827850342,
            0.9966979026794434
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9960934519767761,
        "body": "    trib = []\n    for i in range(n + 1):\n        if i == 0:\n            trib.append(1)\n        elif i == 1:\n            trib.append(3)\n        else:\n            even = (i % 2) == 0\n            if even:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib",
        "result": "failed: ",
        "similarities": [
            0.9959423542022705,
            0.9952020049095154,
            0.9949469566345215,
            0.9933282732963562,
            0.9941438436508179,
            0.9960934519767761,
            0.994975745677948,
            0.9950715899467468,
            0.9941897392272949,
            0.9948287010192871,
            0.9960287809371948,
            0.9947851300239563,
            0.9902127981185913,
            0.9954954385757446,
            0.9901350140571594,
            0.9938114881515503,
            0.9956600666046143,
            0.9939860105514526,
            0.9951671957969666,
            0.9921431541442871
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9978728294372559,
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 <= 0:\n            return 0\n        else:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9954697489738464,
            0.9885067343711853,
            0.9977750182151794,
            0.9975641965866089,
            0.9978047609329224,
            0.9896764159202576,
            0.9971351623535156,
            0.9975833892822266,
            0.9974226951599121,
            0.9971351623535156,
            0.9960643649101257,
            0.9975117444992065,
            0.997420072555542,
            0.9969854950904846,
            0.9971144795417786,
            0.9966864585876465,
            0.9971251487731934,
            0.9978728294372559,
            0.9978047609329224,
            0.9968795776367188
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9981002807617188,
        "body": "    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets <= 0:\n                return False\n            open_brackets -= 1\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9972521066665649,
            0.9980737566947937,
            0.9970647096633911,
            0.997572660446167,
            0.9978063702583313,
            0.9959614276885986,
            0.9976306557655334,
            0.997410237789154,
            0.9980227947235107,
            0.9960845112800598,
            0.9966854453086853,
            0.9974023699760437,
            0.9968741536140442,
            0.9959846138954163,
            0.9981002807617188,
            0.9979761838912964,
            0.9956104755401611,
            0.9979173541069031,
            0.9980735778808594,
            0.9945777058601379
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9959958791732788,
        "body": "import math\n\n    result = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        result += squared_num\n    return result",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9959822297096252,
            0.9942331910133362,
            0.9959878325462341,
            0.9957343935966492,
            0.9928520917892456,
            0.9805284142494202,
            0.9953411817550659,
            0.9951058626174927,
            0.9953595399856567,
            0.9931351542472839,
            0.9955495595932007,
            0.9923019409179688,
            0.9957343935966492,
            0.9939742684364319,
            0.9841981530189514,
            0.9959958791732788,
            0.9868935346603394,
            0.9948861002922058,
            0.9933162331581116,
            0.9950349926948547
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9943423867225647,
        "body": "    words = txt.split()\n    last_word = words[-1]\n    last_chars = last_word.split()\n    if len(last_chars) == 0 or not last_chars[0].isalpha():\n        return False\n    if len(words) > 1 and last_word.isspace():\n        return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9935766458511353,
            0.9910203814506531,
            0.9943096041679382,
            0.9878302216529846,
            0.9905919432640076,
            0.9915683269500732,
            0.992167055606842,
            0.9846246838569641,
            0.9883729815483093,
            0.9939796924591064,
            0.9922834634780884,
            0.9934172630310059,
            0.991723895072937,
            0.9941480755805969,
            0.9937456846237183,
            0.9841657280921936,
            0.9924125671386719,
            0.9943423867225647,
            0.9943118691444397,
            0.9873934388160706
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9970558881759644,
        "body": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i\n        else:\n            break\n    return max_index",
        "result": "failed: ",
        "similarities": [
            0.9968622922897339,
            0.9879997968673706,
            0.9963679313659668,
            0.9947731494903564,
            0.9958156943321228,
            0.9970558881759644,
            0.9932729005813599,
            0.9959204792976379,
            0.9965798258781433,
            0.9969639182090759,
            0.9966098666191101,
            0.9964574575424194,
            0.9962954521179199,
            0.995304524898529,
            0.9954072833061218,
            0.9876895546913147,
            0.9948258996009827,
            0.9958308339118958,
            0.9959604144096375,
            0.9961788058280945
        ]
    },
    "HumanEval/136": {
        "similarity": 0.99560546875,
        "body": "    neg_int = []\n    pos_int = []\n    for num in lst:\n        if num < 0:\n            neg_int.append(num)\n        elif num > 0:\n            pos_int.append(num)\n\n    max_neg = None\n    min_pos = None\n    for num in sorted(neg_int, reverse=True):\n        if num >= max_neg:\n            max_neg = num\n\n    for num in sorted(pos_int):\n        if num <= min_pos:\n            min_pos = num\n\n    return (max_neg, min_pos) if max_neg is not None and min_pos is not None else (None, None)",
        "result": "failed: '<=' not supported between instances of 'int' and 'NoneType'",
        "similarities": [
            0.994655191898346,
            0.9931578636169434,
            0.993279218673706,
            0.9922726154327393,
            0.9923694133758545,
            0.9951886534690857,
            0.9894981384277344,
            0.9945633411407471,
            0.9951133728027344,
            0.9869933128356934,
            0.9945000410079956,
            0.9921003580093384,
            0.9943287372589111,
            0.9953253865242004,
            0.9948822855949402,
            0.9919528961181641,
            0.99560546875,
            0.9951131939888,
            0.9909368753433228,
            0.994425356388092
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9922768473625183,
        "body": "        try:\n            return float(value.replace('.', ',').replace(',', '.'))\n        except ValueError:\n            return value\n    \n    a = convert(a)\n    b = convert(b)\n\n    if a <= b:\n        result = b\n    else:\n        result = a\n\n    if result == b:\n        return None\n    elif isinstance(result, str):\n        result = result.replace('.', ',')\n    \n    return result",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9643182158470154,
            0.9911885857582092,
            0.9916685223579407,
            0.9896062612533569,
            0.9901012778282166,
            0.988716721534729,
            0.9903343915939331,
            0.9904099702835083,
            0.9880151152610779,
            0.9838928580284119,
            0.9831793904304504,
            0.989721417427063,
            0.9886857271194458,
            0.9871776103973389,
            0.9912735819816589,
            0.989044189453125,
            0.9920265078544617,
            0.9857683777809143,
            0.9922768473625183,
            0.9877303242683411
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9934495687484741,
        "body": "    even_numbers = 0\n    current_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_numbers += 1\n            current_sum += i\n        if even_numbers >= 4 and current_sum <= n and current_sum % 2 == 0:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9901026487350464,
            0.9932079315185547,
            0.9928261637687683,
            0.9905195832252502,
            0.9890857338905334,
            0.9867469668388367,
            0.9888512492179871,
            0.9931756854057312,
            0.9911733865737915,
            0.9917970895767212,
            0.9911783933639526,
            0.9891698956489563,
            0.983443021774292,
            0.9923000335693359,
            0.9934260845184326,
            0.9914301633834839,
            0.9859843254089355,
            0.9934495687484741,
            0.9911924600601196,
            0.9788410067558289
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9991152882575989,
        "body": "    result = 1\n    for i in range(1, n + 1):\n        temp_result = 1\n        for j in range(1, i + 1):\n            temp_result *= j\n        result *= temp_result\n    return result",
        "result": "passed",
        "similarities": [
            0.9962821006774902,
            0.9976291656494141,
            0.9990241527557373,
            0.9977961182594299,
            0.9990907311439514,
            0.9990878701210022,
            0.9990241527557373,
            0.9975405335426331,
            0.9962246417999268,
            0.9990241527557373,
            0.9990178942680359,
            0.9990742206573486,
            0.9990333914756775,
            0.9990241527557373,
            0.9987820386886597,
            0.99908447265625,
            0.9990241527557373,
            0.9991152882575989,
            0.9989349246025085,
            0.9990907311439514
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9967786073684692,
        "body": "    i = 0\n    new_text = ''\n    while i < len(text):\n        if text[i] == ' ' and (i == 0 or text[i - 1] != ' '):\n            new_text += '_'\n        elif text[i:i + 2] == '--':\n            new_text += '-'\n            i += 1\n        elif text[i:i + 3] == '---':\n            new_text += '-'\n            i += 2\n        else:\n            new_text += text[i]\n        i += 1\n    return new_text",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "similarities": [
            0.9944292306900024,
            0.99290931224823,
            0.9954003691673279,
            0.9957088828086853,
            0.9967786073684692,
            0.9951079487800598,
            0.995360255241394,
            0.9961473345756531,
            0.9945837259292603,
            0.9950271248817444,
            0.9948315024375916,
            0.9956499338150024,
            0.9966211915016174,
            0.9945002198219299,
            0.9950300455093384,
            0.9947066903114319,
            0.9951149821281433,
            0.994533121585846,
            0.9959295988082886,
            0.9964725971221924
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9967683553695679,
        "body": "    digits = 0\n    dot_count = 0\n    for char in file_name:\n        if char == '.':\n            dot_count += 1\n        elif char.isdigit():\n            digits += 1\n    if dot_count != 1 or not file_name[0].isalpha() or len(file_name) - file_name.find('.') < 1 or digits > 3:\n        return 'No'\n    extensions = ['txt', 'exe', 'dll']\n    for ext in extensions:\n        if file_name[file_name.find('.'):].lower().startswith(ext):\n            return 'Yes'\n    return 'No'",
        "result": "failed: ",
        "similarities": [
            0.9884737133979797,
            0.9962250590324402,
            0.9967683553695679,
            0.9948827624320984,
            0.9952996969223022,
            0.9933037161827087,
            0.9955399036407471,
            0.994206964969635,
            0.9935003519058228,
            0.995021641254425,
            0.9919659495353699,
            0.9963789582252502,
            0.9960495829582214,
            0.9954701662063599,
            0.9964591860771179,
            0.9957207441329956,
            0.9959335327148438,
            0.9950436949729919,
            0.996498703956604,
            0.9939199686050415
        ]
    },
    "HumanEval/142": {
        "similarity": 0.998410165309906,
        "body": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += lst[i] ** 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum",
        "result": "failed: ",
        "similarities": [
            0.9982960224151611,
            0.9974098205566406,
            0.9982393980026245,
            0.998260498046875,
            0.9982785582542419,
            0.9976440072059631,
            0.9977501630783081,
            0.9977990984916687,
            0.9981193542480469,
            0.9983066916465759,
            0.9982245564460754,
            0.9966078400611877,
            0.9982978701591492,
            0.9978557229042053,
            0.998410165309906,
            0.9982741475105286,
            0.9947502017021179,
            0.9981023073196411,
            0.9980605244636536,
            0.9975164532661438
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9950575828552246,
        "body": "    import sympy\n    word_list = sentence.split()\n    prime_words = []\n    for word in word_list:\n        if len(word) > 1 and sympy.isprime(len(word)):\n            prime_words.append(word)\n    result = ''\n    for i in range(len(prime_words)):\n        result += prime_words[i] + ' '\n    return result.strip()",
        "result": "failed: No module named 'sympy'",
        "similarities": [
            0.9943580627441406,
            0.9928094744682312,
            0.9940361380577087,
            0.9942647218704224,
            0.9901576638221741,
            0.9888759255409241,
            0.9942532777786255,
            0.994995653629303,
            0.9950575828552246,
            0.9938817620277405,
            0.9938295483589172,
            0.9942566752433777,
            0.9919386506080627,
            0.9933441877365112,
            0.9869145750999451,
            0.9949861764907837,
            0.9933643341064453,
            0.9930509328842163,
            0.9945580363273621,
            0.9947624206542969
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9947411417961121,
        "body": "    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    for i in range(1, min(x_denom, n_denom) + 1):\n        if (x_denom % i == 0 and n_denom % i == 0\n            and x_num * (n_denom // i) <= x_denom\n            and n_num * (x_denom // i) <= n_denom):\n            return True\n\n    return False",
        "result": "failed: test1",
        "similarities": [
            0.9939988851547241,
            0.9930137991905212,
            0.9881718158721924,
            0.9928267598152161,
            0.992649257183075,
            0.9932206869125366,
            0.9925673604011536,
            0.9943787455558777,
            0.9903375506401062,
            0.9901438355445862,
            0.9927766919136047,
            0.9907824993133545,
            0.9946598410606384,
            0.9908972382545471,
            0.9907850027084351,
            0.9923741221427917,
            0.9947411417961121,
            0.9833074808120728,
            0.9906070232391357,
            0.993556559085846
        ]
    },
    "HumanEval/145": {
        "similarity": 0.99505615234375,
        "body": "    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum(int(digit) for digit in str(abs(nums[i]))) < sum(int(digit) for digit in str(abs(nums[j]))):\n                nums[i], nums[j] = nums[j], nums[i]\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), -nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            0.9944688081741333,
            0.9921439290046692,
            0.99505615234375,
            0.9947782158851624,
            0.9859792590141296,
            0.9923095703125,
            0.9917594790458679,
            0.99505615234375,
            0.9904309511184692,
            0.9944686889648438,
            0.9944688081741333,
            0.9944688081741333,
            0.9944688081741333,
            0.9935057759284973,
            0.9926480650901794,
            0.9944688081741333,
            0.98930823802948,
            0.9929646253585815,
            0.99505615234375,
            0.9794192314147949
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9949456453323364,
        "body": "        count = 0\n        for num in nums:\n            if num > 10 and (num % 10) % 2 == 1 and ((num // 10) % 10) % 2 == 1:\n                count += 1\n        return count",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9941800832748413,
            0.993942141532898,
            0.9934200644493103,
            0.9927058815956116,
            0.9949456453323364,
            0.9947329163551331,
            0.993942141532898,
            0.9943578839302063,
            0.9938948750495911,
            0.9945159554481506,
            0.9940832853317261,
            0.9914462566375732,
            0.9936169981956482,
            0.9943534731864929,
            0.9948655962944031,
            0.9929799437522888,
            0.9901496767997742,
            0.9900446534156799,
            0.9939422607421875,
            0.9611503481864929
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9960840940475464,
        "body": "    max_count = 0\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = i ** 2 - i + 1\n    count_map = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            a_value_i = a[i]\n            a_value_j = a[j]\n            sum_3_times = (a_value_i + a_value_j) // 3 * 3\n            if sum_3_times <= 0 or sum_3_times >= a[i] + a[j]:\n                continue\n            for k in range(j + 1, n):\n                a_value_k = a[k]\n                if a_value_i + a_value_j + a_value_k == sum_3_times:\n                    count_map[sum_3_times] = count_map.get(sum_3_times, 0) + 1\n    max_count = max(count_map.values(), default=0)\n    return max_count",
        "result": "failed: ",
        "similarities": [
            0.9936147928237915,
            0.9917576313018799,
            0.9942436218261719,
            0.9954153299331665,
            0.9957159161567688,
            0.995522677898407,
            0.9956352710723877,
            0.9909912943840027,
            0.9945191144943237,
            0.9937148094177246,
            0.9938376545906067,
            0.9952428936958313,
            0.9945564270019531,
            0.993197500705719,
            0.9952679872512817,
            0.9951645731925964,
            0.9953615069389343,
            0.9960840940475464,
            0.9952408671379089,
            0.9900034666061401
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9950043559074402,
        "body": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if not (planet1 in planets and planet2 in planets):\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    between_planets = [p for p in planets if idx1 < planets.index(p) <= idx2]\n    sorted_between_planets = []\n    for i in range(len(planets)):\n        if planets[i] not in between_planets:\n            continue\n        inserted = False\n        for j in range(len(sorted_between_planets)):\n            if planets[i] > sorted_between_planets[j]:\n                sorted_between_planets.insert(j, planets[i])\n                inserted = True\n                break\n        if not inserted:\n            sorted_between_planets.append(planets[i])\n    return tuple(sorted_between_planets)",
        "result": "failed: First test error: 3",
        "similarities": [
            0.9904897809028625,
            0.9854053854942322,
            0.9918816089630127,
            0.993272066116333,
            0.9924138784408569,
            0.9950043559074402,
            0.9857444763183594,
            0.9916905760765076,
            0.990090012550354,
            0.9934287071228027,
            0.9915518760681152,
            0.9942983388900757,
            0.9928396344184875,
            0.9891847372055054,
            0.9920278787612915,
            0.9934704303741455,
            0.9942155480384827,
            0.9948751330375671,
            0.9901962280273438,
            0.9927727580070496
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9952080249786377,
        "body": "    sorted_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_lst.append(word)\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    result = []\n    for word in sorted_lst:\n        if any(len(other_word) != len(word) for other_word in result):\n            result.append(word)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9939592480659485,
            0.9921754598617554,
            0.9941126108169556,
            0.9918855428695679,
            0.9800581932067871,
            0.9927316904067993,
            0.9944475889205933,
            0.9909801483154297,
            0.9948479533195496,
            0.9899107217788696,
            0.9936944246292114,
            0.9941418170928955,
            0.9928957223892212,
            0.9949192404747009,
            0.9952080249786377,
            0.9935682415962219,
            0.9951302409172058,
            0.9949896931648254,
            0.9932676553726196,
            0.9950464963912964
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9979532957077026,
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9938665628433228,
            0.9979532957077026,
            0.9977188110351562,
            0.9972557425498962,
            0.9967667460441589,
            0.9979532957077026,
            0.9973435997962952,
            0.9978435039520264,
            0.9973957538604736,
            0.9961864948272705,
            0.9976832866668701,
            0.9972389936447144,
            0.9963278770446777,
            0.9964360594749451,
            0.9978435039520264,
            0.9937899708747864,
            0.9979312419891357,
            0.9979246258735657,
            0.9969916343688965,
            0.9967625141143799
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9976234436035156,
        "body": "    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            square = num ** 2\n            total_sum += square",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9970625042915344,
            0.9967663288116455,
            0.9972177147865295,
            0.9969265460968018,
            0.9904108643531799,
            0.9895613789558411,
            0.9975348114967346,
            0.9973964691162109,
            0.9976230263710022,
            0.9976234436035156,
            0.9953131675720215,
            0.9975348114967346,
            0.9974472522735596,
            0.9967663288116455,
            0.997484028339386,
            0.9971275329589844,
            0.9956492185592651,
            0.9975348114967346,
            0.9975646138191223,
            0.9975112080574036
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9974936246871948,
        "body": "    result = []\n    for i in range(len(game)):\n        difference = abs(guess[i] - game[i])\n        if difference < 0:\n            difference = -difference\n        result.append(difference)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9974085092544556,
            0.9968339800834656,
            0.9964202046394348,
            0.9970046877861023,
            0.9973861575126648,
            0.9919769167900085,
            0.9966320395469666,
            0.997006893157959,
            0.9956935048103333,
            0.9974310994148254,
            0.9963072538375854,
            0.9956422448158264,
            0.9963794350624084,
            0.9974936246871948,
            0.9967131614685059,
            0.9973847270011902,
            0.9959801435470581,
            0.9947254657745361,
            0.9955438375473022,
            0.9963794350624084
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9977896809577942,
        "body": "    best_extension = ''\n    max_strength = 0\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength or (strength == max_strength and not best_extension):\n            best_extension = extension\n            max_strength = strength\n    return class_name + '.' + best_extension",
        "result": "passed",
        "similarities": [
            0.9976956248283386,
            0.9977604746818542,
            0.9974704384803772,
            0.9969362020492554,
            0.9971588850021362,
            0.9975267052650452,
            0.9962911009788513,
            0.9889199137687683,
            0.9977330565452576,
            0.9965008497238159,
            0.9977896809577942,
            0.9971652626991272,
            0.9958102703094482,
            0.9974862933158875,
            0.9975361227989197,
            0.9945612549781799,
            0.9975610971450806,
            0.9967479705810547,
            0.9975760579109192,
            0.9977139830589294
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9958117604255676,
        "body": "    for i in range(len(b)):\n        if b[(-i):] + b[i:] <= a or b * (len(a) // len(b) + 1) <= a:\n            return True\n    return False",
        "result": "failed: test #0",
        "similarities": [
            0.9903420805931091,
            0.9943315386772156,
            0.99577796459198,
            0.9950772523880005,
            0.9945703148841858,
            0.9957771301269531,
            0.9927085041999817,
            0.9947439432144165,
            0.9945703148841858,
            0.9929361939430237,
            0.9949527382850647,
            0.9958117604255676,
            0.9882408976554871,
            0.9916114807128906,
            0.9957785606384277,
            0.9874835014343262,
            0.9945703148841858,
            0.9957775473594666,
            0.9907216429710388,
            0.9937984943389893
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9982446432113647,
        "body": "    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) <= 4:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "failed: ",
        "similarities": [
            0.9929162859916687,
            0.997385561466217,
            0.9982446432113647,
            0.9976242780685425,
            0.9975286722183228,
            0.9975882172584534,
            0.9976646304130554,
            0.9979221820831299,
            0.9905468821525574,
            0.9976451396942139,
            0.9980776906013489,
            0.9973713755607605,
            0.9982446432113647,
            0.9982446432113647,
            0.9982059001922607,
            0.9980003237724304,
            0.9966398477554321,
            0.9961333274841309,
            0.9974092245101929,
            0.9978469014167786
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9930734038352966,
        "body": "    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    i = next((k for k in sorted(roman_numerals.keys(), reverse=True) if k <= number), None)\n    while i is not None:\n        count = 0\n        while number >= i and (number - i) % 10 == 0:\n            number -= i\n            count += 1\n        result += roman_numerals[i] * count\n        i = next((k for k in sorted(roman_numerals.keys(), reverse=True) if k <= number), None)\n    return result",
        "result": "timed out",
        "similarities": [
            0.9921678304672241,
            0.9921630024909973,
            0.9912693500518799,
            0.9930734038352966,
            0.9922558665275574,
            0.9893081188201904,
            0.9927812218666077,
            0.9917232990264893,
            0.9928470253944397,
            0.9862521290779114,
            0.9902773499488831,
            0.9899526238441467,
            0.9916986227035522,
            0.9923523664474487,
            0.9812043905258179,
            0.9882058501243591,
            0.9928726553916931,
            0.9818305969238281,
            0.9910048246383667,
            0.9924109578132629
        ]
    },
    "HumanEval/157": {
        "similarity": 0.992592453956604,
        "body": "    sides = sorted([a, b, c])\n    for i in range(len(sides)):\n        for j in range(i + 1, len(sides)):\n            if (sides[i]**2 + sides[j]**2) == sides[-1]**2:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9922431111335754,
            0.990587055683136,
            0.9853135943412781,
            0.9909720420837402,
            0.9915458559989929,
            0.990014910697937,
            0.9921729564666748,
            0.9915195107460022,
            0.9888110160827637,
            0.9924589395523071,
            0.9861950278282166,
            0.9889664053916931,
            0.992592453956604,
            0.9740456342697144,
            0.9891584515571594,
            0.9777174592018127,
            0.9887675046920776,
            0.9921278953552246,
            0.9918479919433594,
            0.9906876087188721
        ]
    },
    "HumanEval/158": {
        "similarity": 0.998572826385498,
        "body": "    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word",
        "result": "passed",
        "similarities": [
            0.9985446929931641,
            0.9982735514640808,
            0.997414231300354,
            0.9985281229019165,
            0.9977490305900574,
            0.997414231300354,
            0.9982938170433044,
            0.9984851479530334,
            0.9967358112335205,
            0.9975217580795288,
            0.9973233938217163,
            0.9972771406173706,
            0.9984782338142395,
            0.9983183145523071,
            0.998572826385498,
            0.9983353018760681,
            0.9976210594177246,
            0.9976210594177246,
            0.9984214305877686,
            0.9977216124534607
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9971480369567871,
        "body": "    total_eaten = number\n    for i in range(need - number):\n        if remaining > 0:\n            total_eaten += 1\n            remaining -= 1\n    return [total_eaten, remaining]",
        "result": "failed: Error",
        "similarities": [
            0.9970337748527527,
            0.9963547587394714,
            0.9971480369567871,
            0.9969916343688965,
            0.9970623850822449,
            0.9960688352584839,
            0.9971480369567871,
            0.9889373779296875,
            0.9912428855895996,
            0.9963820576667786,
            0.9963889122009277,
            0.9965783953666687,
            0.991677463054657,
            0.9904516339302063,
            0.9970623850822449,
            0.9965783953666687,
            0.9893686175346375,
            0.9928181171417236,
            0.9970923066139221,
            0.9968698620796204
        ]
    },
    "HumanEval/160": {
        "similarity": 0.997023344039917,
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9688633680343628,
            0.997023344039917,
            0.9965110421180725,
            0.997023344039917,
            0.9879524111747742,
            0.997023344039917,
            0.9954276084899902,
            0.9958177208900452,
            0.997023344039917,
            0.997023344039917,
            0.9967857003211975,
            0.9944091439247131,
            0.997023344039917,
            0.9967645406723022,
            0.9965912699699402,
            0.997023344039917,
            0.997023344039917,
            0.9943153858184814,
            0.9968270063400269,
            0.9957567453384399
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9969533681869507,
        "body": "    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr(96 + ord(char))\n        elif 'A' <= char <= 'Z':\n            result += chr(ord(char) - 32)\n        else:\n            result += char\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9969533681869507,
            0.9950140714645386,
            0.9965082406997681,
            0.9917826652526855,
            0.9948412179946899,
            0.994360089302063,
            0.9961158633232117,
            0.9939691424369812,
            0.9967347979545593,
            0.9962595701217651,
            0.9908334016799927,
            0.9967586994171143,
            0.9968824982643127,
            0.994620680809021,
            0.9955140948295593,
            0.9966233968734741,
            0.9962518811225891,
            0.9910880923271179,
            0.995196521282196,
            0.9957324862480164
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9979559183120728,
        "body": "import hashlib\n\n    if text <= '':\n        return None\n    md5_hash = hashlib.md5()\n    for char in text:\n        md5_hash.update(char)\n    md5_hex = md5_hash.hexdigest()\n    return md5_hex",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9962519407272339,
            0.9964082837104797,
            0.9975078105926514,
            0.9976649284362793,
            0.9966747760772705,
            0.9974600076675415,
            0.9939228892326355,
            0.9979215860366821,
            0.9976842999458313,
            0.9974557161331177,
            0.9973565936088562,
            0.997067391872406,
            0.9967300891876221,
            0.9969554543495178,
            0.995965838432312,
            0.9978135824203491,
            0.9978743195533752,
            0.9979559183120728,
            0.9978649616241455,
            0.996179461479187
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9938142895698547,
        "body": "    even_digits = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits",
        "result": "failed: Test 1",
        "similarities": [
            0.9935390949249268,
            0.9924880862236023,
            0.9911148548126221,
            0.9811944365501404,
            0.9877158999443054,
            0.9853269457817078,
            0.992331862449646,
            0.9911705851554871,
            0.9937321543693542,
            0.9938142895698547,
            0.9902189373970032,
            0.9893885254859924,
            0.9889671206474304,
            0.9916921854019165,
            0.991084635257721,
            0.9914731383323669,
            0.9923589825630188,
            0.9840201139450073,
            0.9885821342468262,
            0.9918424487113953
        ]
    }
}