{
    "4693": {
        "similarity": 0.9949679970741272,
        "body": "A = int(input().split()[0])\nB = int(input().split()[1])\nprint('error' if A + B >= 10 else A + B)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927597045898438,
            0.9892202615737915,
            0.9934782981872559,
            0.9905116558074951,
            0.9924848675727844,
            0.992224931716919,
            0.9948026537895203,
            0.9946085214614868,
            0.9948026537895203,
            0.9941684603691101,
            0.9919427633285522,
            0.9945492148399353,
            0.9895749688148499,
            0.9946431517601013,
            0.9949679970741272,
            0.9901488423347473,
            0.9945687055587769,
            0.9939557313919067,
            0.9925157427787781,
            0.9939557313919067
        ]
    },
    "4077": {
        "similarity": 0.9947419762611389,
        "body": "    b = sorted([(v, i) for i, v in enumerate(a)])\n    c = [-1] * n\n    d = [0] * n\n    e = 0\n    for i, (v, j) in enumerate(b):\n        if v == m:\n            k = i - e + 1\n            l = max(j - k // 2, 0)\n            c[l] += 1\n            d[j] -= k\n            e += 1\n    f = [c[i] * (i + 1) + d[i] for i in range(n)]\n    return sum(f)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934768676757812,
            0.9924617409706116,
            0.9925727844238281,
            0.9820877909660339,
            0.9901372194290161,
            0.9947110414505005,
            0.9916704297065735,
            0.9934049248695374,
            0.9943845868110657,
            0.9930388927459717,
            0.9913177490234375,
            0.991019606590271,
            0.9945420026779175,
            0.9938734769821167,
            0.9924769997596741,
            0.9937456250190735,
            0.9947419762611389,
            0.9946052432060242,
            0.9881346821784973,
            0.9892100095748901
        ]
    },
    "4006": {
        "similarity": 0.9971012473106384,
        "body": "    while x > 9 and x % 10 == 0:\n        x //= 10\n    return x + 1\n\nn = int(input())\ns = set()\nwhile n not in s:\n    s.add(n)\n    n = f(n)\n\nprint(len(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954860210418701,
            0.9964601397514343,
            0.9968782067298889,
            0.9967721700668335,
            0.9930709004402161,
            0.9971012473106384,
            0.9967231750488281,
            0.9949895143508911,
            0.9968295097351074,
            0.9967213869094849,
            0.9968123435974121,
            0.9970012307167053,
            0.9970842003822327,
            0.9905907511711121,
            0.9948190450668335,
            0.990315318107605,
            0.9968929290771484,
            0.9957935214042664,
            0.9969900846481323,
            0.99655681848526
        ]
    },
    "4556": {
        "similarity": 0.9955087304115295,
        "body": "    s = input().split()\n    return s[0][:1] + \"C\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928644895553589,
            0.9949344992637634,
            0.9925946593284607,
            0.9943982362747192,
            0.9930180907249451,
            0.9942659139633179,
            0.9947475790977478,
            0.9937577843666077,
            0.9937577843666077,
            0.9955087304115295,
            0.9949666261672974,
            0.9917095899581909,
            0.9917095899581909,
            0.9931872487068176,
            0.9955033659934998,
            0.9820816516876221,
            0.994223952293396,
            0.985704243183136,
            0.9944173097610474,
            0.9922316670417786
        ]
    },
    "4571": {
        "similarity": 0.9960641264915466,
        "body": "    return sum((2 * i + 1) * 1900 / 2**(i+1) for i in range(M)) + M * 100",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937261343002319,
            0.9952784180641174,
            0.9957960844039917,
            0.9916332960128784,
            0.9960641264915466,
            0.9946853518486023,
            0.9959540367126465,
            0.9912079572677612,
            0.9957218170166016,
            0.9953437447547913,
            0.9956988096237183,
            0.9926024079322815,
            0.993762195110321,
            0.9942165017127991,
            0.9924294352531433,
            0.9953375458717346,
            0.9958614706993103,
            0.9949197173118591,
            0.9958621859550476,
            0.9917426109313965
        ]
    },
    "4019": {
        "similarity": 0.9973070025444031,
        "body": "    n, m, D = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(lambda x: int(x) - 1, input().split())\n        edges.append((u, v))\n    uf = UnionFind(n)\n    result = []\n    for i, (u, v) in enumerate(edges):\n        if not uf.is_connected(u, v):\n            uf.union(u, v)\n            result.append((u, v))\n        elif u == 1:\n            D -= 1\n            if D <= 0: break\n        else:\n            if D > 0 and (uf.parent(1) != u or uf.parent(1) != v):\n                uf.union(1, u)\n                uf.union(1, v)\n                result.append((u, 1))\n                result.append((v, 1))\n    if len(result) < n - 1:\n        print('NO')\n    else:\n        print('YES')\n        for (u, v) in result: print(u + 1, v + 1)\n\nclass UnionFind:\n        self.parent = list(range(n))\n        if self.parent[x] != x: self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n        rootu, rootv = self.find(u), self.find(v)\n        if rootu != rootv: self.parent[rootu] = rootv",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967633485794067,
            0.9967225790023804,
            0.9946987628936768,
            0.9965296387672424,
            0.9972752928733826,
            0.9968572854995728,
            0.9967500567436218,
            0.9970868825912476,
            0.9971294403076172,
            0.9971221089363098,
            0.9965565204620361,
            0.9964609742164612,
            0.9973070025444031,
            0.9966071248054504,
            0.9967629313468933,
            0.9969719648361206,
            0.9967124462127686,
            0.9969558715820312,
            0.9972285032272339,
            0.996781587600708
        ]
    },
    "4265": {
        "similarity": 0.9924936890602112,
        "body": "from collections import Counter\n\n    s_count = Counter(S)\n    t_count = Counter(T)\n\n    diff = 0\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        diff += abs(s_count[char] - t_count[char])\n\n    return diff // 2\n\nS = input()\nT = input()\nprint(min_operations(S, T))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904893636703491,
            0.9782466888427734,
            0.9924936890602112,
            0.9870022535324097,
            0.9875078797340393,
            0.9899879097938538,
            0.9848648905754089,
            0.9902839660644531,
            0.9891957640647888,
            0.986271321773529,
            0.9887118935585022,
            0.9916689991950989,
            0.9899685382843018,
            0.981408953666687,
            0.9879810214042664,
            0.9886701703071594,
            0.980832040309906,
            0.9894968271255493,
            0.9878222942352295,
            0.9875766634941101
        ]
    },
    "4657": {
        "similarity": 0.9971683025360107,
        "body": "    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    s = [0]*(n+1)\n    for i in range(n):\n        s[i+1] = s[i]+a[i]\n    oddcnt = sum(1 for i in range(1,n+1) if (s[i]%2 == 1))\n    if k>oddcnt:\n        print(\"NO\")\n        return\n    evenind = [i-1 for i in range(n+1) if s[i]%2 == 0]\n    oddind = [i-1 for i in range(n+1) if s[i]%2 == 1]\n    r = [-1]*k\n    p1,p2 = 0,0\n    for i in range(k):\n        if not evenind[p1] < oddind[p2]:\n            print(\"NO\")\n            return\n        if (oddcnt-i)%2:\n            r[i] = evenind[p1]+1\n            p1 += 1\n        else: \n            r[i] = oddind[p2]+1\n            p2 += 1\n    print(\"YES\")\n    print(*r)\n\nfor i in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965730309486389,
            0.9962928295135498,
            0.9965286254882812,
            0.9960969686508179,
            0.9951230883598328,
            0.9960911273956299,
            0.9965296387672424,
            0.9965667724609375,
            0.9961107969284058,
            0.9953699707984924,
            0.9968050718307495,
            0.9961569905281067,
            0.9949017763137817,
            0.9958403706550598,
            0.9971683025360107,
            0.9959529042243958,
            0.9971417188644409,
            0.9950053691864014,
            0.9948030114173889,
            0.9953253865242004
        ]
    },
    "4599": {
        "similarity": 0.9959796071052551,
        "body": "n = int(input())\na = sorted(map(int, input().split()))\nprint(sum(a[::2]) - sum(a[1::2]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995589017868042,
            0.9904050230979919,
            0.9959756135940552,
            0.9953104257583618,
            0.9938121438026428,
            0.9929944276809692,
            0.9959796071052551,
            0.9953538179397583,
            0.9958067536354065,
            0.9959796071052551,
            0.9959754943847656,
            0.9897447228431702,
            0.9948748350143433,
            0.9904463887214661,
            0.994087815284729,
            0.9950429201126099,
            0.9953752160072327,
            0.993308424949646,
            0.9923074841499329,
            0.9953647255897522
        ]
    },
    "4774": {
        "similarity": 0.994537889957428,
        "body": "    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    res = []\n    for o1 in ops:\n        for o2 in ops:\n            try:\n                if eval(f'{a} {o1} {b} = {c} {o2} {d}') and f'{a} {o1} {b} = {c} {o2} {d}' < f'{a} {o2} {b} = {c} {o1} {d}':\n                    res.append(f'{a} {o1} {b} = {c} {o2} {d}')\n            except ZeroDivisionError:\n                pass\n    if not res:\n        print('problems ahead')\n    else:\n        print('\\n'.join(sorted(res)))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9883431196212769,
            0.994537889957428,
            0.9908896088600159,
            0.9943979978561401,
            0.988450825214386,
            0.9897271394729614,
            0.9935833811759949,
            0.9933669567108154,
            0.9942426085472107,
            0.9929918050765991,
            0.9924628734588623,
            0.9900075197219849,
            0.9910494089126587,
            0.9897084832191467,
            0.9929395318031311,
            0.9926625490188599,
            0.9935674071311951,
            0.9922754168510437,
            0.9944701790809631,
            0.9863578677177429
        ]
    },
    "4851": {
        "similarity": 0.9976765513420105,
        "body": "    while True:\n        n += 1\n        s = sum(int(digit) for digit in str(n))\n        if n % s == 0:\n            return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976348876953125,
            0.9965633749961853,
            0.9917386770248413,
            0.9976765513420105,
            0.9970396161079407,
            0.9944259524345398,
            0.9967912435531616,
            0.9965724945068359,
            0.9970868825912476,
            0.9975110292434692,
            0.9968788027763367,
            0.9976348876953125,
            0.9976161122322083,
            0.99687659740448,
            0.9975110292434692,
            0.9974190592765808,
            0.9970870018005371,
            0.9943801760673523,
            0.9971190094947815,
            0.9975110292434692
        ]
    },
    "4655": {
        "similarity": 0.9931065440177917,
        "body": "    s = a + b + c\n    t = sorted([a, b, c])\n    return min((t[0] + t[1] + 1) // 2, (s - t[1]) // 2 + max(t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922152161598206,
            0.9921851754188538,
            0.9911727905273438,
            0.9913184642791748,
            0.9870535135269165,
            0.9920859932899475,
            0.9897251129150391,
            0.9876977801322937,
            0.9919996857643127,
            0.9898788332939148,
            0.9925535917282104,
            0.9931065440177917,
            0.9759362936019897,
            0.9887334704399109,
            0.9913598895072937,
            0.9909836649894714,
            0.9916528463363647,
            0.9911720156669617,
            0.9887602925300598,
            0.9882479310035706
        ]
    },
    "4132": {
        "similarity": 0.9931065440177917,
        "body": "    while len(monsters) > 1:\n        monsters.sort()\n        attacker = monsters.pop(0)\n        if attacker >= sum(monsters):\n            return min(monsters)\n        monsters[-1] -= attacker\n    return monsters[0]\n\nN = int(input())\nA = list(map(int, input().split()))\nprint(fight(A))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906969666481018,
            0.9930864572525024,
            0.9871988892555237,
            0.9920467734336853,
            0.9902097582817078,
            0.9925042986869812,
            0.9886085987091064,
            0.9904086589813232,
            0.9920434355735779,
            0.9851401448249817,
            0.9918429851531982,
            0.9931065440177917,
            0.9911818504333496,
            0.9921238422393799,
            0.9917793273925781,
            0.9901592135429382,
            0.9929341673851013,
            0.964216947555542,
            0.9925119280815125,
            0.9882792234420776
        ]
    },
    "4085": {
        "similarity": 0.9970851540565491,
        "body": "    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    if len(d) < 2 or d[-1] != max(d):\n        return -1\n    x = 1\n    for i in range(1, n):\n        if d[i-1] * d[i] == x:\n            x *= d[i]\n    for num in d[:-1]:\n        ok = True\n        for i in range(len(d)):\n            if i != len(d)-1 and d[i] % num != 0:\n                ok = False\n                break\n        if num != 1 and (num * num == x or x % num == 0):\n            return -1\n    return x\n\nfor _ in range(int(input())):\n    print(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969878792762756,
            0.9940614104270935,
            0.9968060851097107,
            0.9947167634963989,
            0.9970851540565491,
            0.9956839680671692,
            0.995677649974823,
            0.9965802431106567,
            0.9938493967056274,
            0.9964668154716492,
            0.9944899678230286,
            0.9967989921569824,
            0.9954697489738464,
            0.9937792420387268,
            0.9966604113578796,
            0.9965324401855469,
            0.9961926341056824,
            0.995494544506073,
            0.9970223307609558,
            0.9961069226264954
        ]
    },
    "4399": {
        "similarity": 0.995997965335846,
        "body": "    return 'Yes' if 'A' in S and 'B' in S else 'No'",
        "result": "failed: testcase 0",
        "similarities": [
            0.995997965335846,
            0.995997965335846,
            0.9868826866149902,
            0.9935481548309326,
            0.995997965335846,
            0.9958130717277527,
            0.995997965335846,
            0.995997965335846,
            0.995997965335846,
            0.9918780326843262,
            0.995997965335846,
            0.995997965335846,
            0.995997965335846,
            0.995997965335846,
            0.9946111440658569,
            0.995997965335846,
            0.9811590313911438,
            0.995997965335846,
            0.9864203929901123,
            0.9906421303749084
        ]
    },
    "4999": {
        "similarity": 0.9969851970672607,
        "body": "    steps = 0\n    while a != b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        steps += 1\n        if a > b:\n            break\n    return steps\n\na, b = map(int, input().split())\nprint(min_operations(a, b))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969851970672607,
            0.994120180606842,
            0.9946489930152893,
            0.9959675669670105,
            0.9964206218719482,
            0.9957301616668701,
            0.9962148070335388,
            0.9946316480636597,
            0.9950675964355469,
            0.9937368631362915,
            0.9961829781532288,
            0.9947561025619507,
            0.9940826296806335,
            0.9963130950927734,
            0.9967913627624512,
            0.9948627948760986,
            0.9964445233345032,
            0.9957036375999451,
            0.9960429668426514,
            0.9950634837150574
        ]
    },
    "4727": {
        "similarity": 0.9963720440864563,
        "body": "grid = [list(map(int, input().split())) for _ in range(4)]\nmove = int(input())\n\nfor _ in range(move):\n    new_grid = [[0]*4 for _ in range(4)]\n\n    for i in range(4):\n        left = 0\n        for j in range(4):\n            if grid[i][j] != 0:\n                left += 1\n                new_grid[i][left-1] = grid[i][j]\n        right = len(grid[0]) - 1\n        for j in range(len(grid[0])-1, -1, -1):\n            if grid[i][j] != 0:\n                right -= 1\n                new_grid[i][right+1] = grid[i][j]\n\n    for i in range(4):\n        top = 0\n        for j in range(4):\n            if new_grid[j][i] != 0:\n                top += 1\n                new_grid[top-1][i] = new_grid[j][i]\n        bottom = len(new_grid) - 1\n        for j in range(len(new_grid)-1, -1, -1):\n            if new_grid[j][i] != 0:\n                bottom -= 1\n                new_grid[bottom+1][i] = new_grid[j][i]\n\n    new_grid = merge_rows(new_grid)\n    new_grid = merge_cols(new_grid)\n\n    grid = new_grid\n\n    for i in range(4):\n        left = 0\n        while left < len(grid[i]):\n            if grid[i][left] == 0:\n                del grid[i][left]\n                grid[i].insert(left, 0)\n            elif left + 1 < len(grid[i]) and grid[i][left] == grid[i][left+1]:\n                grid[i][left] *= 2\n                del grid[i][left+1]\n                grid[i].insert(left+1, 0)\n                left -= 1\n            left += 1\n\n    return grid\n\n    for i in range(4):\n        top = 0\n        while top < len(grid):\n            if grid[top][i] == 0:\n                del grid[top][i]\n                grid.insert(top, [0])\n            elif top + 1 < len(grid) and grid[top][i] == grid[top+1][i]:\n                grid[top][i] *= 2\n                del grid[top+1][i]\n                grid[top].insert(i, 0)\n                top -= 1\n            top += 1\n\n    return grid\n\nfor row in new_grid:\n    print(*row)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906212687492371,
            0.9946535229682922,
            0.9962320923805237,
            0.9961531758308411,
            0.9958673119544983,
            0.9963060021400452,
            0.9960232973098755,
            0.9958961009979248,
            0.9960818886756897,
            0.994411051273346,
            0.996234118938446,
            0.9936986565589905,
            0.9942977428436279,
            0.9963720440864563,
            0.9959982633590698,
            0.9932361245155334,
            0.9959894418716431,
            0.9937105774879456,
            0.9888754487037659,
            0.9950172305107117
        ]
    },
    "4906": {
        "similarity": 0.9976871013641357,
        "body": "    result = ''\n    i = 0\n    while i < len(s):\n        count = 1\n        while i + 1 < len(s) and s[i] == s[i+1]:\n            i += 1\n            count += 1\n        result += s[i] + str(count)\n        i += 1\n    return result\n\n    result = ''\n    i = 0\n    while i < len(s):\n        char = s[i]\n        count = int(s[i+1])\n        result += char * count\n        i += 2\n    return result\n\nm = input()\nif m[0] == 'E':\n    print(encode(m[2:]))\nelse:\n    print(decode(m[2:]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.997630774974823,
            0.9958800077438354,
            0.9950042366981506,
            0.9969322085380554,
            0.9953632354736328,
            0.9973044991493225,
            0.9958406686782837,
            0.9964364767074585,
            0.996330976486206,
            0.9958825707435608,
            0.9967554211616516,
            0.9968793988227844,
            0.9957812428474426,
            0.9970196485519409,
            0.9967153668403625,
            0.9976871013641357,
            0.9964123964309692,
            0.9971330761909485,
            0.9974477887153625,
            0.9971232414245605
        ]
    },
    "4011": {
        "similarity": 0.99466472864151,
        "body": "n = int(input())\na = list(map(int, input()))\nf = list(map(int, input().split()))\n\nmax_val = max(f)\n\n    res = 0\n    num.insert(0, -1)\n    for i in range(len(num)):\n        if num[i] >= f[num[i]]: break\n    mx = f[num[i]]\n    sm = sum(num[:i])\n    j = i-1\n    while j > 0 and num[j] == max_val:\n        mx = max(mx, f[num[j]])\n        sm += f[num[j]]\n        j -= 1\n    res = mx * (n - len(num))\n    for k in range(i+1, n):\n        res += f[a[k]]\n    if i > 0: res += sm\n    return str(res)\n\nprint(max(calc(a), calc(reversed(a))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912397265434265,
            0.9893875122070312,
            0.9944958090782166,
            0.989676833152771,
            0.9906761050224304,
            0.9894808530807495,
            0.9940482974052429,
            0.9933261871337891,
            0.9895726442337036,
            0.9814642667770386,
            0.9939159750938416,
            0.993627667427063,
            0.9891982078552246,
            0.9868190288543701,
            0.9925727844238281,
            0.9892911314964294,
            0.99466472864151,
            0.9927765727043152,
            0.9920180439949036,
            0.9906545877456665
        ]
    },
    "4099": {
        "similarity": 0.9952788352966309,
        "body": "    N, K, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    total = sum(A)\n    avg = (total + M) / (N+1)\n    if avg > K:\n        return -1\n    needed = int(avg * (N+1)) - total\n    return needed",
        "result": "failed: testcase 0",
        "similarities": [
            0.9774264097213745,
            0.9933823347091675,
            0.9952788352966309,
            0.9922102093696594,
            0.9928150177001953,
            0.9936508536338806,
            0.9940564036369324,
            0.9937241077423096,
            0.9910000562667847,
            0.9948561787605286,
            0.9921057820320129,
            0.9949415326118469,
            0.9947339296340942,
            0.9861032366752625,
            0.9928123354911804,
            0.9936793446540833,
            0.994877278804779,
            0.9940195679664612,
            0.9940562844276428,
            0.9938087463378906
        ]
    },
    "4465": {
        "similarity": 0.9961461424827576,
        "body": "    a = int(input())\n    b = int(input())\n    return (a-2)*(b-2)\n\nprint(farm_area())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960485696792603,
            0.9948992729187012,
            0.9954411387443542,
            0.9948423504829407,
            0.9953227043151855,
            0.9951095581054688,
            0.9954411387443542,
            0.9955414533615112,
            0.9961461424827576,
            0.9959354400634766,
            0.9957279562950134,
            0.9954412579536438,
            0.9942924380302429,
            0.995538592338562,
            0.9942070841789246,
            0.995608389377594,
            0.9955353140830994,
            0.9959267377853394,
            0.9945966005325317,
            0.9947835803031921
        ]
    },
    "4315": {
        "similarity": 0.9962740540504456,
        "body": "import math\nR = float(input())\nprint(2 * math.pi * R)",
        "result": "passed",
        "similarities": [
            0.9962740540504456,
            0.9921284914016724,
            0.9962740540504456,
            0.9939990639686584,
            0.9939990639686584,
            0.9945905804634094,
            0.9962740540504456,
            0.9937554597854614,
            0.9930221438407898,
            0.9939990639686584,
            0.9962740540504456,
            0.9922534823417664,
            0.9962208271026611,
            0.9943801760673523,
            0.9958959221839905,
            0.9962740540504456,
            0.9939990639686584,
            0.9962740540504456,
            0.9945176839828491,
            0.9886653423309326
        ]
    },
    "4633": {
        "similarity": 0.9935005903244019,
        "body": "    if sum(int(i) for i in str(n)) <= s: return 0\n    m = n\n    while True:\n        n += 1\n        if sum(int(i) for i in str(n)) <= s: return n - m",
        "result": "failed: testcase 0",
        "similarities": [
            0.9807088971138,
            0.9834286570549011,
            0.9915084838867188,
            0.9914110898971558,
            0.9912165403366089,
            0.987795889377594,
            0.9914110898971558,
            0.9915084838867188,
            0.9914635419845581,
            0.9914110898971558,
            0.9856541156768799,
            0.9935005903244019,
            0.9931787252426147,
            0.9874773621559143,
            0.9879995584487915,
            0.9914110898971558,
            0.9894692301750183,
            0.9914110898971558,
            0.9915084838867188,
            0.9875815510749817
        ]
    },
    "4734": {
        "similarity": 0.9971518516540527,
        "body": "    v = 'aeiou'\n    if y.endswith('ex'):\n        return y + p\n    elif y[-1] in v:\n        return y[:-1] + 'ex' + p\n    elif y[-1] == 'e':\n        return y + 'x' + p\n    else:\n        return y + 'ex' + p",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960801005363464,
            0.9971518516540527,
            0.9970316886901855,
            0.9970239400863647,
            0.9939363598823547,
            0.9970239400863647,
            0.9923384785652161,
            0.9954968690872192,
            0.9967296123504639,
            0.9924224019050598,
            0.9966061115264893,
            0.9969520568847656,
            0.9946509003639221,
            0.992653489112854,
            0.996595561504364,
            0.9952267408370972,
            0.9919180870056152,
            0.9930327534675598,
            0.9957835674285889,
            0.9966970682144165
        ]
    },
    "4229": {
        "similarity": 0.9969819784164429,
        "body": "    s = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            s += 0\n        elif i % 3 == 0:\n            s += i\n        elif i % 5 == 0:\n            s += i\n        else:\n            s += 0\n    return sum(i for i in range(1, n + 1) if i % 3 != 0 and i % 5 != 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966362714767456,
            0.99681556224823,
            0.9965306520462036,
            0.9956570863723755,
            0.9963635206222534,
            0.9962479472160339,
            0.996067225933075,
            0.9943046569824219,
            0.9956064820289612,
            0.9899932742118835,
            0.9969422221183777,
            0.994419515132904,
            0.9966996908187866,
            0.9965119957923889,
            0.996269941329956,
            0.9955356121063232,
            0.9960609078407288,
            0.9947518110275269,
            0.9940794110298157,
            0.9969819784164429
        ]
    },
    "4321": {
        "similarity": 0.9990220665931702,
        "body": "    while k > 0:\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9989780783653259,
            0.9990220665931702,
            0.9987817406654358,
            0.9987817406654358,
            0.9972275495529175,
            0.9990220665931702,
            0.9986945986747742,
            0.9973413348197937,
            0.998491108417511,
            0.9980021119117737,
            0.9990220665931702,
            0.9988847374916077,
            0.9973663687705994,
            0.9986957907676697,
            0.9989780783653259,
            0.9987817406654358,
            0.9990220665931702,
            0.9989780783653259,
            0.9986059069633484,
            0.9989780783653259
        ]
    },
    "4503": {
        "similarity": 0.9940370321273804,
        "body": "    A.sort()\n    if len(A) != len(set(A)):\n        return \"No\"\n    for i in range(N-1, -1, -1):\n        H -= A[i]\n        if H <= 0:\n            break\n    return \"Yes\" if H <= 0 else \"No\"\n\nH, N = map(int, input().split())\nA = list(map(int, input().split()))\nprint(f(H, N, A))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929162859916687,
            0.9940370321273804,
            0.992172360420227,
            0.9924936890602112,
            0.9892874360084534,
            0.9612616300582886,
            0.9935992360115051,
            0.9914582967758179,
            0.9926355481147766,
            0.9935312867164612,
            0.9920570254325867,
            0.9905407428741455,
            0.990143358707428,
            0.9907786846160889,
            0.9934539794921875,
            0.9930789470672607,
            0.9933263063430786,
            0.9887825846672058,
            0.9928550720214844,
            0.9934846758842468
        ]
    },
    "4855": {
        "similarity": 0.9975072741508484,
        "body": "    return -(-a // b)\n\nA, I = map(int, input().split())\nprint(ceil_div(I * A, 1) - A)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997319757938385,
            0.9962943196296692,
            0.9974074363708496,
            0.9975072741508484,
            0.9963459372520447,
            0.9975072741508484,
            0.997117280960083,
            0.9933241605758667,
            0.9933853149414062,
            0.9919200539588928,
            0.9975072741508484,
            0.9975072741508484,
            0.9974061250686646,
            0.9942456483840942,
            0.9952048063278198,
            0.9967650175094604,
            0.9974061250686646,
            0.9913038015365601,
            0.997319757938385,
            0.9963234663009644
        ]
    },
    "4704": {
        "similarity": 0.9933401346206665,
        "body": "N = int(input())\na = list(map(int, input().split()))\nans = float('inf')\nfor i in range(2, N):\n    x = sum(a[:i])\n    y = sum(a[i:])\n    ans = min(ans, abs(x - y))\nprint(ans)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9931215047836304,
            0.9890695214271545,
            0.9931120872497559,
            0.9906629323959351,
            0.992018461227417,
            0.9901540875434875,
            0.9927209615707397,
            0.9908490777015686,
            0.9880319237709045,
            0.9933401346206665,
            0.9891663789749146,
            0.9930076599121094,
            0.9864997863769531,
            0.9870167970657349,
            0.9854282736778259,
            0.989923894405365,
            0.9916552305221558,
            0.9914829730987549,
            0.9900667071342468,
            0.9670566916465759
        ]
    },
    "4829": {
        "similarity": 0.9973462820053101,
        "body": "a, b = map(int, input().split())\nif a == b:\n    if a == 0:\n        print(\"Not a moose\")\n    else:\n        print(f\"Even {2 * a}\")\nelse:\n    if 2 * a > b or 2 * b > a:\n        print(f\"Odd {(max(a, b) * 2)}\")",
        "result": "passed",
        "similarities": [
            0.9965635538101196,
            0.9969605803489685,
            0.9966120719909668,
            0.9932432770729065,
            0.994999349117279,
            0.9950722455978394,
            0.9949304461479187,
            0.9969286918640137,
            0.994963526725769,
            0.9942867755889893,
            0.9950848817825317,
            0.9968301653862,
            0.9967450499534607,
            0.9964957237243652,
            0.9952366352081299,
            0.996193528175354,
            0.9961470365524292,
            0.9968680143356323,
            0.996931791305542,
            0.9973462820053101
        ]
    },
    "4730": {
        "similarity": 0.995980441570282,
        "body": "    n = int(input())\n    s = input()\n    d = {')': '(', ']': '[', '}': '{'}\n    o, c = 0, 0\n    for i in range(n):\n        if s[i] not in ' \\n':\n            if s[i] in d:\n                if d[s[i]] == s[i - 1]:\n                    c -= 1\n                else:\n                    print(s[i], i)\n                    return\n            else:\n                o += 1\n    if o > c or o == c:\n        print('ok so far')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9953740835189819,
            0.9948557615280151,
            0.9943751096725464,
            0.9954807758331299,
            0.9951220154762268,
            0.995361328125,
            0.9940477013587952,
            0.992965579032898,
            0.9908745288848877,
            0.9924464821815491,
            0.9927208423614502,
            0.9951287508010864,
            0.9930815696716309,
            0.9950347542762756,
            0.9950857758522034,
            0.995980441570282,
            0.9948937296867371,
            0.9952254295349121,
            0.9957919716835022,
            0.994035005569458
        ]
    },
    "4729": {
        "similarity": 0.9956353902816772,
        "body": "P = input().strip()\nmessage = input().strip()\n\nfound = [0] * len(P)\nfor i in range(len(message)):\n    if found[len(found) - 1]:\n        for j in range(1, len(found)):\n            if message[i] == P[found[j]]:\n                found[j] = i + 1\n                break\n        else:\n            print('FAIL')\n            exit()\n    elif message[i] == P[0]:\n        found[0] = i + 1\n\nif all(f > 0 for f in found):\n    print('PASS')\nelse:\n    print('FAIL')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956231713294983,
            0.9953939318656921,
            0.9948435425758362,
            0.9953467845916748,
            0.9938308596611023,
            0.9925087690353394,
            0.9956353902816772,
            0.994817316532135,
            0.99261873960495,
            0.9955589175224304,
            0.9945482015609741,
            0.9903984069824219,
            0.9951180815696716,
            0.9955011606216431,
            0.9948545694351196,
            0.9943849444389343,
            0.9948257803916931,
            0.9937453866004944,
            0.9876152873039246,
            0.9945079684257507
        ]
    },
    "4582": {
        "similarity": 0.9939455986022949,
        "body": "a = input()\nb = input()\n\nif a == 'H' and b == 'H':\n    print('H')\nelif a == 'D' and b == 'D':\n    print('H')\nelse:\n    print('D')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9882180094718933,
            0.9939455986022949,
            0.9928476214408875,
            0.9874282479286194,
            0.9908148050308228,
            0.9927667379379272,
            0.9904249310493469,
            0.9933621287345886,
            0.9928814768791199,
            0.9873755574226379,
            0.9873191714286804,
            0.9880794882774353,
            0.9895390868186951,
            0.9934341311454773,
            0.9938125610351562,
            0.992093026638031,
            0.9936990141868591,
            0.9909983277320862,
            0.9910595417022705,
            0.9898553490638733
        ]
    },
    "4910": {
        "similarity": 0.9964804649353027,
        "body": "from collections import defaultdict\nimport sys\n\nn = int(input())\ncostume_counts = defaultdict(int)\nfor _ in range(n):\n    costume = input()\n    for c in sorted(costume):\n        costume_counts[c] += 1\n\nmax_freq = max(costume_counts.values())\npossible_winning_costumes = [c for c, freq in costume_counts.items() if freq == max_freq]\n\nprint(' '.join(sorted(possible_winning_costumes)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957805275917053,
            0.9888432025909424,
            0.9855446219444275,
            0.9952405691146851,
            0.9960426688194275,
            0.9959824085235596,
            0.9957541227340698,
            0.9954622983932495,
            0.9948673248291016,
            0.9930549263954163,
            0.9936161041259766,
            0.9956584572792053,
            0.9953716993331909,
            0.9961526989936829,
            0.9964804649353027,
            0.9951774477958679,
            0.9961732625961304,
            0.9957479238510132,
            0.9941564202308655,
            0.9903436303138733
        ]
    },
    "4323": {
        "similarity": 0.9963423013687134,
        "body": "    pairs = [(a[i], b[i]) for i in range(n)]\n    pairs.sort(key=lambda x: -x[0])\n    sumA = 0\n    cnt = 0\n    ans = n + 1\n    for i in range(n):\n        sumB = sumA + pairs[i][1]\n        if sumB <= m:\n            sumA += pairs[i][0] - pairs[i][1]\n            ans = min(ans, i + 1)\n        else:\n            cnt += 1\n            if sumA > m:\n                return -1\n    if cnt >= ans:\n        return -1\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923851490020752,
            0.9945728778839111,
            0.9960655570030212,
            0.9889485239982605,
            0.9949943423271179,
            0.9963297843933105,
            0.995527982711792,
            0.9944114685058594,
            0.9951741099357605,
            0.9913374185562134,
            0.9948023557662964,
            0.9958337545394897,
            0.9921407103538513,
            0.9961040019989014,
            0.9953882098197937,
            0.9943928122520447,
            0.9963423013687134,
            0.9951654672622681,
            0.9962033629417419,
            0.9952279925346375
        ]
    },
    "4626": {
        "similarity": 0.9919130206108093,
        "body": "    return min((abs(a-b) + abs(a-c) + abs(b-c)), min(min(abs(a-b), a+b+c) * 2, \n            min(abs(a-c), a+c+b) * 2, min(abs(b-c), b+c+a) * 2))\n\nq = int(input())\nfor _ in range(q):\n    print(f(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9867616295814514,
            0.9892573952674866,
            0.9915683269500732,
            0.9827631115913391,
            0.9885830283164978,
            0.9904835224151611,
            0.991843581199646,
            0.9873028993606567,
            0.9885709881782532,
            0.9901061058044434,
            0.9919130206108093,
            0.9549130797386169,
            0.9912060499191284,
            0.9915418028831482,
            0.9899988770484924,
            0.9913918375968933,
            0.9882999062538147,
            0.9902914762496948,
            0.9546319246292114,
            0.9908308982849121
        ]
    },
    "4400": {
        "similarity": 0.9884169697761536,
        "body": "    s = input()\n    return max(0, len(s) - s.count('S'))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9825692772865295,
            0.9785508513450623,
            0.9797068238258362,
            0.9884169697761536,
            0.9853732585906982,
            0.9848841428756714,
            0.9774616956710815,
            0.9871689677238464,
            0.9797069430351257,
            0.979761004447937,
            0.9850416779518127,
            0.9881250262260437,
            0.9801599383354187,
            0.9873090982437134,
            0.9858220815658569,
            0.9875221252441406,
            0.9854148030281067,
            0.9855672717094421,
            0.9650382995605469,
            0.9797068238258362
        ]
    },
    "4794": {
        "similarity": 0.9954452514648438,
        "body": "    R, C = map(int, input().split())\n    grid = [list(input()) for _ in range(R)]\n    counts = [0, 0, 0, 0]\n    \n    for r in range(1, R-1):\n        for c in range(1, C-1):\n            if grid[r][c] == '.':\n                is_free = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if grid[r+dr][c+dc] != '#':\n                            if (abs(dr) + abs(dc)) % 2 == 0 and grid[r+dr][c+dc] != '.':\n                                is_free = False\n                if is_free:\n                    count = sum(1 for dr in [-1, 0, 1] for dc in [-1, 0, 1]\n                                if (abs(dr) + abs(dc)) % 2 == 0 and grid[r+dr][c+dc] == '.')\n                    counts[count-1] += 1\n    return '\\n'.join(map(str, counts))\n\nprint(count_parking_spaces())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928848147392273,
            0.994972825050354,
            0.9923123717308044,
            0.9954452514648438,
            0.9947311282157898,
            0.9932925701141357,
            0.994461178779602,
            0.9952716827392578,
            0.9942110776901245,
            0.993752121925354,
            0.9937794208526611,
            0.9948154091835022,
            0.9946485757827759,
            0.9951561689376831,
            0.9930532574653625,
            0.9950681328773499,
            0.9937739968299866,
            0.9943530559539795,
            0.9935601949691772,
            0.9952512383460999
        ]
    },
    "4096": {
        "similarity": 0.9946173429489136,
        "body": "    s = sum(a)\n    if s < m:\n        return -1\n    b = [0] * n\n    for i in range(1, n + 1):\n        b[i-1] = a[i-1] + (i - 1)\n    b.sort(reverse=True)\n    d = min(n, m // sum(b[:n]))\n    return d",
        "result": "failed: testcase 0",
        "similarities": [
            0.9893893003463745,
            0.9909268617630005,
            0.9932425618171692,
            0.9906469583511353,
            0.9919206500053406,
            0.9945350289344788,
            0.9931793212890625,
            0.9891076683998108,
            0.9926155805587769,
            0.9914860129356384,
            0.9926436543464661,
            0.9887369871139526,
            0.9941217303276062,
            0.9858465790748596,
            0.9946173429489136,
            0.9858895540237427,
            0.994219958782196,
            0.9936432242393494,
            0.9925047159194946,
            0.9822654724121094
        ]
    },
    "4530": {
        "similarity": 0.9956082701683044,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        cnt[x] = cnt.get(x, 0) + 1\n    b = sorted(cnt.values(), reverse=True)\n    ans = 0\n    for k in range(n):\n        if b[k] > 0 and (b[k] == 1 or k < len(b) - 1 and b[k+1] != 0):\n            ans += 1\n            b[k] -= 1\n            if k < len(b) - 1:\n                b[k + 1] = min(0, b[k + 1] - 1)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932587146759033,
            0.9904939532279968,
            0.9950109720230103,
            0.9938952922821045,
            0.9936720132827759,
            0.9956082701683044,
            0.9935029745101929,
            0.9927524924278259,
            0.9911330342292786,
            0.9938719868659973,
            0.9911551475524902,
            0.9912136793136597,
            0.9935117959976196,
            0.994364321231842,
            0.9951339364051819,
            0.9922505617141724,
            0.9898012280464172,
            0.9905078411102295,
            0.9946280121803284,
            0.9914034008979797
        ]
    },
    "4724": {
        "similarity": 0.9952016472816467,
        "body": "    return (G+R)*2/R-G",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935314655303955,
            0.992875337600708,
            0.9937208294868469,
            0.9935314655303955,
            0.9868561625480652,
            0.9902434945106506,
            0.9835878014564514,
            0.9924313426017761,
            0.9949595928192139,
            0.9937208294868469,
            0.9948570728302002,
            0.9952016472816467,
            0.9937208294868469,
            0.9937208294868469,
            0.9939088225364685,
            0.9927475452423096,
            0.9935314655303955,
            0.9937208294868469,
            0.9943054914474487,
            0.9915990233421326
        ]
    },
    "4276": {
        "similarity": 0.997368574142456,
        "body": "n, t = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(n)]\nroutes.sort(key=lambda x: x[1])\n\nfor c, ti in routes:\n    if ti <= t:\n        print(c)\n        break\nelse:\n    print(t)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9972440600395203,
            0.9972690939903259,
            0.9969260692596436,
            0.9961119294166565,
            0.9963222146034241,
            0.9913538098335266,
            0.997215986251831,
            0.9904064536094666,
            0.997368574142456,
            0.9968753457069397,
            0.9956675171852112,
            0.9961075186729431,
            0.997184157371521,
            0.996209979057312,
            0.9959042072296143,
            0.9970590472221375,
            0.9965883493423462,
            0.9962214231491089,
            0.9936056733131409,
            0.9968929290771484
        ]
    },
    "4708": {
        "similarity": 0.995288074016571,
        "body": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\ntotal_fee = k * x + (n - k) * y\nprint(total_fee)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9819908142089844,
            0.9933235049247742,
            0.9948375225067139,
            0.9950423240661621,
            0.9950021505355835,
            0.9834716320037842,
            0.9932202100753784,
            0.9948375225067139,
            0.9943503141403198,
            0.9946513175964355,
            0.9945855736732483,
            0.9836556315422058,
            0.9952864646911621,
            0.995288074016571,
            0.9913334250450134,
            0.9952864646911621,
            0.9950042366981506,
            0.9933596253395081,
            0.9948738813400269,
            0.9935135245323181
        ]
    },
    "4396": {
        "similarity": 0.9979143738746643,
        "body": "N = int(input())\ntotal = 0\nfor _ in range(N):\n    x, u = input().split()\n    if u == 'JPY':\n        total += float(x)\n    else:\n        total += float(x) * 380000.0\nprint(total)",
        "result": "passed",
        "similarities": [
            0.9978691935539246,
            0.9973816275596619,
            0.9966856241226196,
            0.9967149496078491,
            0.9974775910377502,
            0.9979143738746643,
            0.9881595969200134,
            0.9954691529273987,
            0.9973992109298706,
            0.9970764517784119,
            0.9960505962371826,
            0.997055172920227,
            0.9955011010169983,
            0.9978693127632141,
            0.9977129697799683,
            0.9960812926292419,
            0.9978691935539246,
            0.9973152875900269,
            0.9978410601615906,
            0.9968534708023071
        ]
    },
    "4155": {
        "similarity": 0.9945060610771179,
        "body": "n = int(input())\nh = list(map(int, input().split()))\nres = 0\ni = 0\nwhile i < n:\n    max_h = h[i]\n    j = i\n    while j + 1 < n and h[j + 1] == max_h:\n        j += 1\n    if max_h > h[i - 1] if i else True:\n        res += 1\n    i = j + 1\nprint(res)",
        "result": "failed: testcase 1",
        "similarities": [
            0.992236316204071,
            0.9921880960464478,
            0.9811710715293884,
            0.9945060610771179,
            0.9939771890640259,
            0.9931166768074036,
            0.9931696653366089,
            0.9901282787322998,
            0.9943912029266357,
            0.9934514760971069,
            0.993219256401062,
            0.9897707104682922,
            0.9936743378639221,
            0.9943840503692627,
            0.9900647401809692,
            0.993078351020813,
            0.9881817698478699,
            0.9922476410865784,
            0.9923927187919617,
            0.9917294383049011
        ]
    },
    "4557": {
        "similarity": 0.9945056438446045,
        "body": "    return \"YES\" if max(0, A - X) + X <= A + B else \"NO\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924340844154358,
            0.9916355609893799,
            0.994486391544342,
            0.9865465760231018,
            0.9937235116958618,
            0.9920924305915833,
            0.9945056438446045,
            0.9903188943862915,
            0.9895845055580139,
            0.9929847717285156,
            0.9940505623817444,
            0.9899680614471436,
            0.9935151934623718,
            0.9938782453536987,
            0.9895845055580139,
            0.991646409034729,
            0.9932331442832947,
            0.9905399680137634,
            0.9830142855644226,
            0.9926033020019531
        ]
    },
    "4930": {
        "similarity": 0.9989627003669739,
        "body": "    vowels = 'aeiou'\n    words = sentence.split()\n    decoded_words = []\n    for word in words:\n        new_word = ''\n        i = 0\n        while i < len(word):\n            if word[i] in vowels:\n                new_word += word[i] + 'p' + word[i]\n                i += 2\n            else:\n                new_word += word[i]\n                i += 1\n        decoded_words.append(new_word)\n    return ' '.join(decoded_words)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9985593557357788,
            0.9987927675247192,
            0.9971337914466858,
            0.9989627003669739,
            0.9971076846122742,
            0.99754798412323,
            0.9977280497550964,
            0.9989502429962158,
            0.9986521005630493,
            0.9983903765678406,
            0.9971922636032104,
            0.9987461566925049,
            0.9973292946815491,
            0.9973956942558289,
            0.9989487528800964,
            0.9989487528800964,
            0.9987758994102478,
            0.9987297058105469,
            0.9989117383956909,
            0.9973897337913513
        ]
    },
    "4715": {
        "similarity": 0.9960146546363831,
        "body": "    a, b, c = map(int, input().split())\n    return len(set([a, b, c]))\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958781003952026,
            0.9960146546363831,
            0.9960146546363831,
            0.9960146546363831,
            0.9905398488044739,
            0.9908763766288757,
            0.9938547015190125,
            0.9888991117477417,
            0.9892892241477966,
            0.9958781003952026,
            0.9958781003952026,
            0.9945765137672424,
            0.9934921264648438,
            0.9945282340049744,
            0.9930287599563599,
            0.9913422465324402,
            0.9905398488044739,
            0.9958781003952026,
            0.9905398488044739,
            0.9958781003952026
        ]
    },
    "4008": {
        "similarity": 0.9951270222663879,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    u = len(set(a))\n    if u > k:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    c = [0] * (k + 1)\n    i = 0\n    for x in sorted(a):\n        if c[x]:\n            c[c[i]] += 1\n            i += 1\n        else:\n            c[x] = i + 1\n            i += 1\n    print(*c[1:])",
        "result": "failed: testcase 0",
        "similarities": [
            0.993911862373352,
            0.993535578250885,
            0.9930170178413391,
            0.9903474450111389,
            0.9865534901618958,
            0.9943366646766663,
            0.990692138671875,
            0.9951270222663879,
            0.9920891523361206,
            0.9947624206542969,
            0.9924463033676147,
            0.9937322735786438,
            0.9946542382240295,
            0.9936021566390991,
            0.9928078055381775,
            0.9904164671897888,
            0.9929325580596924,
            0.9944670796394348,
            0.9942833781242371,
            0.994637131690979
        ]
    },
    "4257": {
        "similarity": 0.9974074959754944,
        "body": "    A, B = map(int, input().split())\n    return A * B",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974074959754944,
            0.9961109161376953,
            0.9964539408683777,
            0.9964539408683777,
            0.9965527057647705,
            0.9974074959754944,
            0.9974074959754944,
            0.9974074959754944,
            0.9964539408683777,
            0.9974074959754944,
            0.9970647096633911,
            0.9950935244560242,
            0.9961109161376953,
            0.9974074959754944,
            0.9974074959754944,
            0.9950935244560242,
            0.9974074959754944,
            0.9961109161376953,
            0.9950935244560242,
            0.9964539408683777
        ]
    },
    "4584": {
        "similarity": 0.9935013651847839,
        "body": "    N = int(input())\n    A = list(map(int, input().split()))\n    cnt = [0] * (N + 1)\n    for i in range(2, N + 1):\n        cnt[A[i - 2]] += 1\n    ans = []\n    for i in range(1, N + 1):\n        ans.append(str(cnt[i]))\n    print('\\n'.join(ans))",
        "result": "passed",
        "similarities": [
            0.9880819916725159,
            0.9925227761268616,
            0.9924665093421936,
            0.9924198985099792,
            0.9901449084281921,
            0.9864503145217896,
            0.9893695712089539,
            0.9905720949172974,
            0.9923158884048462,
            0.9935013651847839,
            0.9930208921432495,
            0.9899582266807556,
            0.9924344420433044,
            0.9901423454284668,
            0.9910435080528259,
            0.991749107837677,
            0.9923442006111145,
            0.992228090763092,
            0.9925838112831116,
            0.9923058748245239
        ]
    },
    "4195": {
        "similarity": 0.9954823851585388,
        "body": "    D, N = map(int, input().split())\n    if D == 0: return str(N)\n    elif D == 1: return str(100 * N + 5)\n    else: return str(100 ** 2 * (N - 1) + 5)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945933818817139,
            0.9943615794181824,
            0.9930399656295776,
            0.9945696592330933,
            0.9940183758735657,
            0.9949052929878235,
            0.9948266744613647,
            0.9867393374443054,
            0.9948802590370178,
            0.9928679466247559,
            0.9912948608398438,
            0.9938951730728149,
            0.9905122518539429,
            0.9936577677726746,
            0.9886292219161987,
            0.9954823851585388,
            0.9947608113288879,
            0.9933434724807739,
            0.9944005608558655,
            0.994114100933075
        ]
    },
    "4176": {
        "similarity": 0.9936689138412476,
        "body": "    return max((A - 1) // A * A + 1, (B - 1) // B * B + 1)\n\nA = int(input().split()[0])\nB = int(input().split()[1])\n\nprint(f(min(A, B), max(A, B)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910942912101746,
            0.9912160634994507,
            0.9897469282150269,
            0.993371844291687,
            0.990488588809967,
            0.9900235533714294,
            0.9786182045936584,
            0.9862814545631409,
            0.9911544322967529,
            0.98978191614151,
            0.9911341667175293,
            0.992228090763092,
            0.9904391765594482,
            0.9912545084953308,
            0.9936689138412476,
            0.9865821003913879,
            0.9912505745887756,
            0.9878873229026794,
            0.9926053285598755,
            0.9883278608322144
        ]
    },
    "4166": {
        "similarity": 0.9958842396736145,
        "body": "    n, m = map(int, input().split())\n    s_c = [list(map(int, input().split())) for _ in range(m)]\n    digits = [0] * n\n    for si, ci in s_c:\n        if ci > 9 or (si - 1) >= len(digits):\n            return -1\n        digits[si-1] = ci\n    num = int(''.join(map(str, sorted(digits))))\n    return num",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943946003913879,
            0.988075852394104,
            0.99267578125,
            0.9888245463371277,
            0.9946538805961609,
            0.9958842396736145,
            0.9930219054222107,
            0.9896407723426819,
            0.9945517182350159,
            0.9941012859344482,
            0.9952747821807861,
            0.9957668781280518,
            0.9955961108207703,
            0.9941030740737915,
            0.9955731630325317,
            0.9947239756584167,
            0.9943004250526428,
            0.9934118390083313,
            0.9950322508811951,
            0.9938099384307861
        ]
    },
    "4827": {
        "similarity": 0.9954178333282471,
        "body": "    if n < 20:\n        return [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"][n - 1]\n    elif n < 100:\n        return [f\"{num_name(n // 10)}{num_name(n % 10)}\" if n % 10 != 0 else f\"{num_name(n // 10)}\"][-1]\n\n    if n < 20:\n        return [\"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\", \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\", \"ninehundred\"][n - 1]\n    else:\n        return f\"{num_name(n // 100)}hundred\"\n\n    if n < 20:\n        return num_name(n)\n    elif n < 100:\n        return f\"{num_name(n // 10)}{name_num(n % 10)}\"\n    else:\n        return f\"{hundred_num_name(n // 100)}{name_num(n % 100)}\"\n\n    n = int(input())\n    for _ in range(n - 1):\n        words.append(input().strip())\n    word_index = len(words) - 1\n    while True:\n        if words[word_index] == \"$\":\n            num = int(input())\n            words[word_index] = name_num(num)\n            break\n        elif not any(c.isalpha() for c in words[word_index]):\n            word_index -= 1\n        else:\n            print(\" \".join(words))\n            return",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943297505378723,
            0.9908041954040527,
            0.9948500394821167,
            0.9948252439498901,
            0.994106113910675,
            0.9948015809059143,
            0.9937266111373901,
            0.9951190948486328,
            0.9897577166557312,
            0.9929596781730652,
            0.9908557534217834,
            0.9934397339820862,
            0.9876315593719482,
            0.9929713010787964,
            0.9908674955368042,
            0.9954178333282471,
            0.9942744374275208,
            0.9941325783729553,
            0.9934059977531433,
            0.9921969175338745
        ]
    },
    "4871": {
        "similarity": 0.9926280975341797,
        "body": "    g = [0] * n\n    score = sum(s[i] * (4 / 5) ** i for i in range(n)) / 5\n    total_score = sum(s)\n    for i in range(n):\n        g[i] = score * (total_score - s[i]) / (total_score - s[i] if i != n - 1 else 0)\n    return score, sum(g) / n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9850070476531982,
            0.9862542748451233,
            0.9906777143478394,
            0.9908726215362549,
            0.9895406365394592,
            0.9918729662895203,
            0.9926280975341797,
            0.992080807685852,
            0.9852478504180908,
            0.9885316491127014,
            0.9856866598129272,
            0.9925625324249268,
            0.9845246076583862,
            0.9926057457923889,
            0.9877569079399109,
            0.9905185699462891,
            0.9877758026123047,
            0.9852704405784607,
            0.987626850605011,
            0.9905383586883545
        ]
    },
    "4148": {
        "similarity": 0.9939670562744141,
        "body": "    n = int(input())\n    s = input()\n    ans = \"\"\n    for c in s:\n        ans += chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926638603210449,
            0.992473304271698,
            0.9889214038848877,
            0.9934956431388855,
            0.9913318157196045,
            0.9917606711387634,
            0.9897938966751099,
            0.9903601408004761,
            0.9920624494552612,
            0.9904596209526062,
            0.9927938580513,
            0.990700364112854,
            0.9920617341995239,
            0.9861385822296143,
            0.9859752655029297,
            0.9911684989929199,
            0.989115297794342,
            0.9874510765075684,
            0.9939670562744141,
            0.991503894329071
        ]
    },
    "4316": {
        "similarity": 0.9936014413833618,
        "body": "    if len(set(S)) == 2:\n        return 'Yes' if list(set(S)).count(S.count(S[0])) == 2 else 'No'\n    return 'No'\n\nprint(solve(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916606545448303,
            0.990118145942688,
            0.993539035320282,
            0.9925464987754822,
            0.9930371046066284,
            0.9897059202194214,
            0.9897802472114563,
            0.992783784866333,
            0.990527331829071,
            0.9936014413833618,
            0.9922406077384949,
            0.9830661416053772,
            0.9816824197769165,
            0.99053555727005,
            0.9898608326911926,
            0.9890661835670471,
            0.9872552752494812,
            0.9912336468696594,
            0.9916815757751465,
            0.9933130145072937
        ]
    },
    "4397": {
        "similarity": 0.9979578256607056,
        "body": "N, i = map(int, input().split())\nprint(N - i + 1)",
        "result": "passed",
        "similarities": [
            0.9978665709495544,
            0.9978665709495544,
            0.9979578256607056,
            0.9979578256607056,
            0.9979578256607056,
            0.9895600080490112,
            0.9979578256607056,
            0.9934252500534058,
            0.9973803162574768,
            0.9979578256607056,
            0.9979578256607056,
            0.9856288433074951,
            0.9925739765167236,
            0.9979578256607056,
            0.9979578256607056,
            0.9973803162574768,
            0.9978665709495544,
            0.9979578256607056,
            0.9979578256607056,
            0.9979578256607056
        ]
    },
    "4180": {
        "similarity": 0.9972929954528809,
        "body": "    return N % 1000",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972929954528809,
            0.996264636516571,
            0.9963239431381226,
            0.9972929954528809,
            0.9970500469207764,
            0.9970500469207764,
            0.9870935082435608,
            0.9970500469207764,
            0.9972928762435913,
            0.9972928762435913,
            0.9948592782020569,
            0.9905394315719604,
            0.9972928762435913,
            0.9972928762435913,
            0.9963549375534058,
            0.9972928762435913,
            0.9938047528266907,
            0.9969077110290527,
            0.9969077110290527,
            0.9972929954528809
        ]
    },
    "4907": {
        "similarity": 0.9972602725028992,
        "body": "n = int(input())\nif n % 2 == 0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n    print(1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966917634010315,
            0.9972602725028992,
            0.9943872690200806,
            0.9961692690849304,
            0.9972602725028992,
            0.9972602725028992,
            0.9874292612075806,
            0.9960403442382812,
            0.9950258135795593,
            0.99701327085495,
            0.9932029247283936,
            0.9950514435768127,
            0.9972602725028992,
            0.99701327085495,
            0.9941249489784241,
            0.9941486716270447,
            0.9971215128898621,
            0.9966113567352295,
            0.9941249489784241,
            0.9971504211425781
        ]
    },
    "4839": {
        "similarity": 0.9943566918373108,
        "body": "    c.sort(reverse = True)\n    tot = sum(c)\n    if tot < n: return 'impossible'\n    max_frac = 0\n    for i in range(1, n + 1):\n        need = (n - i) * i\n        have = min(tot, need)\n        frac = have / tot\n        max_frac = max(max_frac, min(frac, i / n))\n        tot -= have // i\n    return format(max_frac, '.6f')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941472411155701,
            0.9925322532653809,
            0.9942999482154846,
            0.9943566918373108,
            0.991102397441864,
            0.9935556054115295,
            0.9937993288040161,
            0.9895453453063965,
            0.9921327233314514,
            0.9922376871109009,
            0.992950439453125,
            0.9932405352592468,
            0.9901394248008728,
            0.9670231342315674,
            0.9916582703590393,
            0.9922513365745544,
            0.9899857044219971,
            0.9931247234344482,
            0.9932488203048706,
            0.9931358695030212
        ]
    },
    "4665": {
        "similarity": 0.9956452250480652,
        "body": "from collections import namedtuple\n\n    N = int(input())\n    columns = tuple(map(str, input().split()))\n    Student = namedtuple('Student', columns)\n    total_marks = 0\n    for _ in range(N):\n        line = input()\n        student = Student(*line.split())\n        total_marks += float(student.MARKS)\n    return round(total_marks / N, 2)\n\nprint(calculate_average())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9889498353004456,
            0.9929247498512268,
            0.9940436482429504,
            0.9924135804176331,
            0.9941269755363464,
            0.9940147399902344,
            0.9940376281738281,
            0.9943134188652039,
            0.9944761395454407,
            0.9913783669471741,
            0.991093099117279,
            0.9953001141548157,
            0.9941872358322144,
            0.989256739616394,
            0.9922652244567871,
            0.9941279888153076,
            0.9934500455856323,
            0.9949952960014343,
            0.9954993724822998,
            0.9956452250480652
        ]
    },
    "4785": {
        "similarity": 0.9968143105506897,
        "body": "s = input()\nprint(\"hiss\" if s.endswith('ss') else \"no hiss\")",
        "result": "passed",
        "similarities": [
            0.9967069029808044,
            0.9968143105506897,
            0.9911636710166931,
            0.9956082701683044,
            0.9943317770957947,
            0.992021381855011,
            0.9966895580291748,
            0.9967069029808044,
            0.9967069029808044,
            0.9967425465583801,
            0.995674729347229,
            0.9948282837867737,
            0.9963050484657288,
            0.9967488646507263,
            0.9918931722640991,
            0.9968079328536987,
            0.9903222918510437,
            0.9967069029808044,
            0.9965366721153259,
            0.996734619140625
        ]
    },
    "4272": {
        "similarity": 0.9953163862228394,
        "body": "    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count",
        "result": "failed: testcase 0",
        "similarities": [
            0.9889658689498901,
            0.9890660047531128,
            0.9918289184570312,
            0.9946060180664062,
            0.9919873476028442,
            0.9902826547622681,
            0.9945257306098938,
            0.9927477836608887,
            0.9946060180664062,
            0.9952388405799866,
            0.9924140572547913,
            0.9930500388145447,
            0.9944154620170593,
            0.9943971037864685,
            0.994140625,
            0.9932706952095032,
            0.9946060180664062,
            0.9919093251228333,
            0.9932706952095032,
            0.9953163862228394
        ]
    },
    "4092": {
        "similarity": 0.9951164126396179,
        "body": "    n = len(a)\n    p = [a[0]]\n    for i in range(1, n):\n        p.append(p[-1] + a[i])\n    m = max(p)\n    ans = 0\n    if abs(m) < abs(p[-1]):\n        ans += 1\n    for i in range(n-1):\n        if p[i+1] == 0:\n            ans += 1\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904672503471375,
            0.9944685101509094,
            0.9911183714866638,
            0.9853317141532898,
            0.9951164126396179,
            0.9939597249031067,
            0.9935644865036011,
            0.9927175641059875,
            0.992904782295227,
            0.99383145570755,
            0.9923130869865417,
            0.9936093688011169,
            0.9898700714111328,
            0.9913724660873413,
            0.9883774518966675,
            0.9944553375244141,
            0.9933919310569763,
            0.9915916323661804,
            0.9926851987838745,
            0.9876955151557922
        ]
    },
    "4023": {
        "similarity": 0.9953998923301697,
        "body": "    n = len(a)\n    mn, mx = min(a), max(a)\n    if mn == mx:\n        return \"YES\"\n    for i in range(n - 1):\n        if a[i] < mx and a[i + 1] < mx and a[i] != a[i + 1]:\n            return \"NO\"\n    return \"YES\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924758076667786,
            0.9838740825653076,
            0.9931904673576355,
            0.9939727783203125,
            0.9936946034431458,
            0.9937577843666077,
            0.9875787496566772,
            0.9941073060035706,
            0.9949051737785339,
            0.9938527345657349,
            0.9932726621627808,
            0.9947702288627625,
            0.9915303587913513,
            0.9929554462432861,
            0.9953998923301697,
            0.9944431185722351,
            0.9944124817848206,
            0.9914992451667786,
            0.9921736717224121,
            0.9944996237754822
        ]
    },
    "4160": {
        "similarity": 0.9974459409713745,
        "body": "    x = 100\n    t = 0\n    while x < X:\n        x *= 1 + 0.01\n        t += 1\n    return t",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972513318061829,
            0.9966219067573547,
            0.9969072937965393,
            0.9967831373214722,
            0.9971067309379578,
            0.9961639046669006,
            0.9968522787094116,
            0.9965630769729614,
            0.9969335794448853,
            0.9961304068565369,
            0.9966545104980469,
            0.9918195605278015,
            0.9965224266052246,
            0.9971851706504822,
            0.9973168969154358,
            0.9973474740982056,
            0.9974459409713745,
            0.9958968758583069,
            0.9972253441810608,
            0.9924318194389343
        ]
    },
    "4815": {
        "similarity": 0.9971905946731567,
        "body": "n, p, m = map(int, input().split())\nname_to_points = {}\nfor _ in range(n):\n    name = input()\n    if name not in name_to_points:\n        name_to_points[name] = 0\n\nfor _ in range(m - n):\n    name, points = input().split()\n    if name in name_to_points:\n        name_to_points[name] += int(points)\n\nwinner_names = []\nfor name, points in name_to_points.items():\n    if points >= p and (not winner_names or winner_names[-1][1] < points):\n        print(f\"{name} wins!\")\n        winner_names.append((name, points))\n\nif not winner_names:\n    print(\"No winner!\")\n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937999248504639,
            0.9971905946731567,
            0.9956853985786438,
            0.9944246411323547,
            0.9949214458465576,
            0.9944664835929871,
            0.9955471754074097,
            0.9958409667015076,
            0.9966381788253784,
            0.9925013184547424,
            0.9950369000434875,
            0.9948227405548096,
            0.9965491890907288,
            0.9962199330329895,
            0.9966769814491272,
            0.9965795278549194,
            0.995715320110321,
            0.9960756897926331,
            0.9965774416923523,
            0.9969207644462585
        ]
    },
    "4514": {
        "similarity": 0.9976649880409241,
        "body": "    vist = [0] * n\n    st = [[u, 0]]\n    ans = []\n    while st:\n        u, par = st.pop()\n        if not vist[u]:\n            vist[u] = 1\n            ans.append(u)\n            for x in G[u]:\n                if x != parent and not vist[x]:\n                    st.append([x, u])\n    return ans\n\n    order = dfs(x, -1)\n    q = list(qry[x])\n    if k <= len(order):\n        return order[k-1]\n    else:\n        return -1\n\nn, q = map(int, input().split())\nG = [[] for _ in range(n+1)]\nfor i in range(2, n+1):\n    p = int(input().split()[i-2])\n    G[p].append(i)\nfor _ in range(q):\n    u, k = map(int, input().split())\n    qry[u].append(k)\n\nfrom collections import defaultdict\nqry = defaultdict(list)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972664713859558,
            0.9968531727790833,
            0.9971820712089539,
            0.9967852234840393,
            0.994738757610321,
            0.9976649880409241,
            0.9976483583450317,
            0.9970308542251587,
            0.9960708618164062,
            0.9975411295890808,
            0.9955838918685913,
            0.9972955584526062,
            0.9974655508995056,
            0.9972012042999268,
            0.9969974160194397,
            0.9973497986793518,
            0.9971503019332886,
            0.9953681826591492,
            0.9974717497825623,
            0.9966022968292236
        ]
    },
    "4585": {
        "similarity": 0.9939321279525757,
        "body": "    for i in range(1, x + 1):\n        if (i - 1) * i == x or (i + 1) * i == x:\n            return i\nprint(f(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912256002426147,
            0.9906625151634216,
            0.9937083721160889,
            0.9899526834487915,
            0.9938517212867737,
            0.9851009845733643,
            0.9926207661628723,
            0.9927761554718018,
            0.9889395833015442,
            0.9914553761482239,
            0.9890739321708679,
            0.9905633330345154,
            0.9927595257759094,
            0.9933158755302429,
            0.9922840595245361,
            0.9939321279525757,
            0.9866338968276978,
            0.9892742037773132,
            0.9927761554718018,
            0.993851900100708
        ]
    },
    "4781": {
        "similarity": 0.995894193649292,
        "body": "k = int(input())\nn = int(input())\n\nbox_holder = k - 1\nfor _ in range(n):\n    t, z = input().split()\n    t = int(t)\n    if z == \"N\" or (z == \"P\" and box_holder == 0):\n        box_holder = (box_holder + 1) % 8\n\nprint(box_holder + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943175911903381,
            0.9957872033119202,
            0.9949772357940674,
            0.9915549755096436,
            0.9929444193840027,
            0.9941331148147583,
            0.995721697807312,
            0.995155930519104,
            0.99356609582901,
            0.995894193649292,
            0.9930711388587952,
            0.9920429587364197,
            0.9946942925453186,
            0.9953843951225281,
            0.995205819606781,
            0.9938943982124329,
            0.9946715831756592,
            0.9916778206825256,
            0.9946367144584656,
            0.9941660165786743
        ]
    },
    "4551": {
        "similarity": 0.9906045794487,
        "body": "    A, B, C, D = map(int, input().split())\n    if A + B > C + D:\n        return \"Left\"\n    elif A + B == C + D:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9899818897247314,
            0.9899818897247314,
            0.9896703958511353,
            0.9905219078063965,
            0.9906045794487,
            0.9867995381355286,
            0.9893069863319397,
            0.9904273152351379,
            0.9876753091812134,
            0.9759708046913147,
            0.9875358939170837,
            0.9882141947746277,
            0.9898059368133545,
            0.9846229553222656,
            0.989414632320404,
            0.9902147054672241,
            0.9893654584884644,
            0.9893069863319397,
            0.9894506335258484,
            0.9899818897247314
        ]
    },
    "4345": {
        "similarity": 0.9959339499473572,
        "body": "    n = len(a)\n    if a[0] == a[-1]:\n        return \"YES\\n\" + ' '.join(\"1\" if i in [0, n-1] else \"0\" for i in range(n))\n    d = {}\n    v = 0\n    res = [[], []]\n    for i in range(n):\n        if not a[i] in d:\n            d[a[i]] = len(res[v])\n            res[v].append(a[i])\n            v = 1 - v\n        elif d[a[i]] != len(res[v]) and (i == 0 or a[i-1] > a[i]):\n            return \"NO\"\n        else:\n            v = 1 - v\n            res[v].append(a[i])\n    return \"YES\\n\" + ' '.join(\"1\" if i in res[0] else \"0\" for i in a)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931883811950684,
            0.9951623678207397,
            0.9951298236846924,
            0.9954783916473389,
            0.9956384897232056,
            0.9903537631034851,
            0.9942172169685364,
            0.9955888390541077,
            0.9958152770996094,
            0.9943303465843201,
            0.9959339499473572,
            0.9943522214889526,
            0.9944749474525452,
            0.995405912399292,
            0.9953145384788513,
            0.9946284890174866,
            0.9952442646026611,
            0.9942973256111145,
            0.9922119975090027,
            0.9943231344223022
        ]
    },
    "4075": {
        "similarity": 0.9963341951370239,
        "body": "from collections import defaultdict\n\nn, m = map(int, input().split())\nbulb_switches = defaultdict(list)\nfor i in range(m):\n    k, *switches = map(int, input().split())\n    for s in switches:\n        bulb_switches[i].append(s)\n\np = [int(x) for x in input().split()]\nresult = 0\n\n    for i in range(m):\n        count = sum(1 for s in bulb_switches[i] if combination[s-1])\n        if (count % 2) != p[i]:\n            return False\n    return True\n\nfor mask in range(2**n):\n    combination = [bool(mask >> i & 1) for i in range(n)]\n    result += is_lighted(combination)\n\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949425458908081,
            0.9914342164993286,
            0.9932410717010498,
            0.9946767091751099,
            0.9891957640647888,
            0.9956325888633728,
            0.9943358898162842,
            0.9963341951370239,
            0.9946118593215942,
            0.9946815967559814,
            0.9950850605964661,
            0.992536723613739,
            0.9936926960945129,
            0.9931507110595703,
            0.9955167174339294,
            0.9942745566368103,
            0.9955703616142273,
            0.9940587282180786,
            0.9962112307548523,
            0.9953617453575134
        ]
    },
    "4408": {
        "similarity": 0.9963647127151489,
        "body": "    n = len(c) // k\n    count = [[0] * 100005 for _ in range(n + 1)]\n    for i in range(len(f)):\n        count[f[i]][c[i]] += 1\n    ans = 0\n    for t in range(k + 1):\n        cur = h[t]\n        for i in range(n + 1):\n            if i * k <= t:\n                cur += max(0, count[i][f[0]]) * (h[t - i * k] - h[min(t - i * k, h[t])])\n            else:\n                break\n        ans = max(ans, cur)\n    return ans\n\nn, k = map(int, input().split())\nc = list(map(int, input().split()))[:k*n]\nf = list(map(int, input().split()))\nh = list(map(int, input().split()))\nprint(max(f(k, c, h, f[i]) for i in range(n)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956784844398499,
            0.9946373701095581,
            0.9950777292251587,
            0.9946128726005554,
            0.9947813153266907,
            0.9963616132736206,
            0.9932387471199036,
            0.9950720071792603,
            0.9925777912139893,
            0.99505615234375,
            0.9955930113792419,
            0.9960099458694458,
            0.9955741763114929,
            0.9937906861305237,
            0.996012270450592,
            0.9867704510688782,
            0.9943258166313171,
            0.9955062866210938,
            0.9963647127151489,
            0.9951689839363098
        ]
    },
    "4282": {
        "similarity": 0.99611896276474,
        "body": "    n = int(input())\n    a = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        a.append((x, y))\n    e = [[] for _ in range(n+1)]\n    for x, y in a:\n        if x != y:\n            e[x].append(y)\n            e[y].append(x)\n    v = [-1] * (n + 1)\n    s = []\n        v[u] = len(s)\n        s.append(u)\n        for p in e[u]:\n            if v[p] == -1:\n                dfs(p)\n    dfs(a[0][0])\n    ans = [0] * n\n    for i, (x, y) in enumerate(a):\n        u = v[x]\n        v2 = v[y]\n        if v2 < u:\n            ans[i] = a[u-1][y==a[u-1][0]]\n    return ' '.join(map(str, ans))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936810731887817,
            0.9956052899360657,
            0.9954844117164612,
            0.9942962527275085,
            0.99611896276474,
            0.9945508241653442,
            0.9960508942604065,
            0.9957706332206726,
            0.9952617287635803,
            0.9951629638671875,
            0.9950564503669739,
            0.995675265789032,
            0.996033251285553,
            0.9920276999473572,
            0.995499849319458,
            0.9948376417160034,
            0.9887014031410217,
            0.9936156868934631,
            0.9960904717445374,
            0.9937544465065002
        ]
    },
    "4331": {
        "similarity": 0.9948654174804688,
        "body": "    s = str(n)\n    return \"Yes\" if '7' in s else \"No\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934346079826355,
            0.9928514361381531,
            0.9948654174804688,
            0.9929128885269165,
            0.9923406839370728,
            0.9928429126739502,
            0.9933857321739197,
            0.9923406839370728,
            0.9926245808601379,
            0.9929128885269165,
            0.9926245808601379,
            0.9929128885269165,
            0.9929128885269165,
            0.9929128885269165,
            0.9917534589767456,
            0.9923406839370728,
            0.9941133260726929,
            0.9929128885269165,
            0.994795024394989,
            0.9948397278785706
        ]
    },
    "4550": {
        "similarity": 0.9931644797325134,
        "body": "a, b, c = map(int, input().split())\ntotal_candies = a + b + c\nif total_candies % 2 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9917857646942139,
            0.9909955859184265,
            0.9906523823738098,
            0.9931644797325134,
            0.9906410574913025,
            0.9890833497047424,
            0.992303729057312,
            0.992303729057312,
            0.9921427369117737,
            0.9906365275382996,
            0.9913753867149353,
            0.9882339835166931,
            0.9890833497047424,
            0.9882168173789978,
            0.9922969341278076,
            0.9895054697990417,
            0.9902895092964172,
            0.9919927716255188,
            0.9920192360877991,
            0.9917802214622498
        ]
    },
    "4271": {
        "similarity": 0.9969971179962158,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(N):\n    if i < N - 1:\n        total += B[A[i] - 1] + C[i]\n    else:\n        total += B[A[i] - 1]\n\nprint(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944435954093933,
            0.9965099692344666,
            0.9949679374694824,
            0.9945284128189087,
            0.9959813356399536,
            0.9944871664047241,
            0.9969971179962158,
            0.9959025979042053,
            0.9958829283714294,
            0.9953195452690125,
            0.9940480589866638,
            0.9934929609298706,
            0.9954248666763306,
            0.99517422914505,
            0.9953912496566772,
            0.9912687540054321,
            0.9939614534378052,
            0.9955573678016663,
            0.99517422914505,
            0.9947438836097717
        ]
    },
    "4848": {
        "similarity": 0.9981881976127625,
        "body": "    while b: a, b = b, a % b\n    return a\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % (i * i) == 0:\n            return False\n    return True\n\nn = int(input())\nfor m in range(2, n):\n    if is_square_free(m * n):\n        print(m)\n        break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977463483810425,
            0.9946234822273254,
            0.9974742531776428,
            0.9974763989448547,
            0.9977463483810425,
            0.9978588819503784,
            0.9976059794425964,
            0.9970834851264954,
            0.9959417581558228,
            0.9981881976127625,
            0.9976627230644226,
            0.9970578551292419,
            0.9980851411819458,
            0.9977463483810425,
            0.9974962472915649,
            0.9978635907173157,
            0.9977461099624634,
            0.9975181221961975,
            0.9975688457489014,
            0.9974216818809509
        ]
    },
    "4694": {
        "similarity": 0.9934007525444031,
        "body": "    n = len(arr)\n    arr.sort()\n    dist = float('inf')\n    for i in range(n):\n        dist = min(dist, max(0, 2 * arr[i] - (arr[-1] + arr[0])) + sum(abs(a - b) for a, b in zip(arr[:i], arr[i+1:])))\n    return dist",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930846691131592,
            0.9920275807380676,
            0.9928674101829529,
            0.989154040813446,
            0.9925820231437683,
            0.9934007525444031,
            0.9859820008277893,
            0.9930273294448853,
            0.9905575513839722,
            0.9875210523605347,
            0.9900851845741272,
            0.9813226461410522,
            0.9819784760475159,
            0.9921349287033081,
            0.9919317364692688,
            0.9877966046333313,
            0.9910213947296143,
            0.9919307231903076,
            0.9870395660400391,
            0.9878415465354919
        ]
    },
    "4213": {
        "similarity": 0.9909356832504272,
        "body": "max_diff = -float('inf')\nmin_val = float('inf')\n\nn = int(input())\nfor num in map(int, input().split()):\n    max_diff = max(max_diff, num - min_val)\n    min_val = min(min_val, num)\n\nprint(max_diff)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9898900389671326,
            0.9862174987792969,
            0.9881669878959656,
            0.9889450073242188,
            0.9902632832527161,
            0.9800947904586792,
            0.9850713014602661,
            0.9891437888145447,
            0.985018789768219,
            0.9866654276847839,
            0.9880238771438599,
            0.9876418113708496,
            0.9652580618858337,
            0.9784953594207764,
            0.9826118350028992,
            0.9909356832504272,
            0.9818875193595886,
            0.9860749840736389,
            0.9897950887680054,
            0.9900168180465698
        ]
    },
    "4471": {
        "similarity": 0.9945775866508484,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    max_a = max(a)\n    if sum((max_a - 1 + x) // 2 for x in a) <= max_a:\n        return 'YES'\n    else:\n        return 'NO'\n\nfor _ in range(int(input())):\n    print(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9775217771530151,
            0.9885756969451904,
            0.9914867877960205,
            0.9919773936271667,
            0.994419515132904,
            0.9892017841339111,
            0.9718356132507324,
            0.9941887259483337,
            0.9917941689491272,
            0.9945775866508484,
            0.9907034039497375,
            0.9926470518112183,
            0.9934366941452026,
            0.9908451437950134,
            0.9940288066864014,
            0.994300127029419,
            0.9944016337394714,
            0.9918007254600525,
            0.994563639163971,
            0.9907515645027161
        ]
    },
    "4802": {
        "similarity": 0.9948457479476929,
        "body": "h, m = map(int, input().split())\nnew_m = (m - 45) % 60\nif new_m < 0:\n    new_m += 60\nnew_h = (h - 1) % 24\nprint(new_h, new_m)",
        "result": "passed",
        "similarities": [
            0.9917404651641846,
            0.9850841164588928,
            0.9943060874938965,
            0.9913191795349121,
            0.9934613108634949,
            0.9916208982467651,
            0.9927111268043518,
            0.99151211977005,
            0.9926236867904663,
            0.9900344014167786,
            0.9948457479476929,
            0.9933953881263733,
            0.9911659955978394,
            0.9902123808860779,
            0.9937378764152527,
            0.9920603036880493,
            0.9870383739471436,
            0.9934613108634949,
            0.9879314303398132,
            0.9899473786354065
        ]
    },
    "4890": {
        "similarity": 0.9942223429679871,
        "body": "n, m, s, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ntotal_bottles = n + sum(c)\nmax_free_slots = min(s * d, total_bottles - 1)\n\nif max_free_slots < m:\n    print(\"impossible\")\nelse:\n    new_c = [0] * s\n    remaining_new_bottles = n\n\n    for i in range(m):\n        if c[i % s] == 0 and new_c[i % s] + d <= max_free_slots - i:\n            remaining_new_bottles -= d - new_c[i % s]\n            new_c[i % s] += d\n        elif c[i % s] > 0 and new_c[i % s] < d and remaining_new_bottles >= 1:\n            new_c[i % s] += 1\n            remaining_new_bottles -= 1\n\n    print(*new_c)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919919371604919,
            0.9939077496528625,
            0.9897978901863098,
            0.9920432567596436,
            0.9900139570236206,
            0.9882221221923828,
            0.9937121868133545,
            0.993556797504425,
            0.9833428263664246,
            0.9942223429679871,
            0.9918897747993469,
            0.9939877390861511,
            0.9922516345977783,
            0.9917407035827637,
            0.9760847687721252,
            0.9898499250411987,
            0.9932479858398438,
            0.9932745099067688,
            0.9916855692863464,
            0.9933952689170837
        ]
    },
    "4286": {
        "similarity": 0.9974316358566284,
        "body": "    while x != p[x]:\n        p[x] = p[p[x]]\n        x = p[x]\n    return x\n\nn, m = map(int, input().split())\na = [0] + list(map(int, input().split()))\np = list(range(n+1))\nsz = [1]*(n+1)\ncyc = 0\noff = [(0, 0, 0)]*(m+1)\n\nfor i in range(1, m+1):\n    u, v, w = map(int, input().split())\n    off[i] = (min(a[u], a[v]) + w, max(u, v), i)\n\noff.sort(reverse=True)\nans = 0\nfor x, y, z in off:\n    u, v = find(y), find(y)\n    if u != v:\n        ans += min(x, a[y])\n        p[p[y]] = u\n        sz[u] += sz[v]\n    else:\n        cyc += 1\n\nif n == cyc:\n    print(ans)\n\nelse:\n\n    for i in range(1, n+1):\n        if not find(i) == i:\n            continue\n        ans += a[i]\n\n        st = [u]\n        vis[u] = True\n        while st:\n            u = st.pop()\n            for v in e[u]:\n                if not vis[v]:\n                    st.append(v)\n                    vis[v] = 1\n                    p[find(v)] = find(u)\n                    sz[find(u)] += sz[v]\n\n    vis = [0]*(n+1)\n    e = [[] for i in range(n+1)]\n    for i in range(1, n+1):\n        if not p[i] == i:\n            continue\n        e[i] = []\n        for u, v, w in off[1:]:\n            if find(i) != find(v):\n                e[i].append((u, min(w, a[v]), v))\n\n    for i in range(1, n+1):\n        if sz[i]:\n            dfs(i)\n\n    ans += sum(sz)\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951421022415161,
            0.9955924153327942,
            0.9973725080490112,
            0.9963198304176331,
            0.9970701336860657,
            0.9966775178909302,
            0.9967332482337952,
            0.9970962405204773,
            0.9970759153366089,
            0.996427059173584,
            0.9969528913497925,
            0.9970768690109253,
            0.9960038065910339,
            0.9967029094696045,
            0.9945203065872192,
            0.9964649677276611,
            0.9974316358566284,
            0.9968575239181519,
            0.9963277578353882,
            0.9969552755355835
        ]
    },
    "4713": {
        "similarity": 0.9954899549484253,
        "body": "x = int(input())\nS = list(input())\n\nmax_val = 0\nfor i in S:\n    if i == 'I':\n        x += 1\n    else:\n        x -= 1\n    max_val = max(max_val, x)\nprint(max_val)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914361238479614,
            0.991158664226532,
            0.9935937523841858,
            0.9889677166938782,
            0.994605302810669,
            0.9929566979408264,
            0.9929671287536621,
            0.9913613200187683,
            0.9914520978927612,
            0.9942190051078796,
            0.9934523701667786,
            0.9887180328369141,
            0.9880780577659607,
            0.9954899549484253,
            0.9940559267997742,
            0.9914897084236145,
            0.9930518269538879,
            0.9938329458236694,
            0.9923619031906128,
            0.9949827790260315
        ]
    },
    "4698": {
        "similarity": 0.9952839612960815,
        "body": "    n = int(input())\n    t = list(map(int, input().split()))\n    m = int(input())\n    p = [0] * 101\n    x = []\n    for _ in range(m):\n        pi, xi = map(int, input().split())\n        p[pi] = xi\n        x.append(xi)\n    ans = [(sum(t) + sum(p[i] - t[i-1] for i in range(1, n+1))) for y in x]\n    print(*ans, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937477111816406,
            0.9917423725128174,
            0.9940360188484192,
            0.9925135374069214,
            0.9859315156936646,
            0.9939572215080261,
            0.9847919940948486,
            0.9899677634239197,
            0.9925625324249268,
            0.9927888512611389,
            0.9918962121009827,
            0.9941928386688232,
            0.9952839612960815,
            0.994723379611969,
            0.9934861063957214,
            0.9935957193374634,
            0.9917150735855103,
            0.9919459819793701,
            0.9935452342033386,
            0.9949150085449219
        ]
    },
    "4841": {
        "similarity": 0.9959162473678589,
        "body": "n = int(input())\na = list(map(str, input().split()))\ncnt = 0\nprev = -1\nfor x in a:\n    if x == \"mumble\":\n        cnt += 1\n    elif x.isdigit():\n        y = int(x)\n        if prev != -1 and prev + 1 < y:\n            print(\"something is fishy\")\n            break\n        prev = y\nelse:\n    print(\"makes sense\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.99346923828125,
            0.9942629933357239,
            0.9954749941825867,
            0.9950436949729919,
            0.9958153963088989,
            0.9952251315116882,
            0.9915181994438171,
            0.9948981404304504,
            0.9938270449638367,
            0.9948436617851257,
            0.9945273399353027,
            0.9958376884460449,
            0.9958971738815308,
            0.9956938028335571,
            0.9954712390899658,
            0.9903991222381592,
            0.9933491945266724,
            0.9928515553474426,
            0.9941972494125366,
            0.9959162473678589
        ]
    },
    "4865": {
        "similarity": 0.9965294599533081,
        "body": "import sys\n\nn = int(input())\n\nfor _ in range(n):\n    direction, d, h, m = input().split()\n    d = int(d)\n    h = int(h)\n    m = int(m)\n\n    if direction == 'F':\n        new_m = (m + d) % 60\n        new_h = (h + (m + d) // 60) % 24\n    else:\n        new_m = (m - d + 60) % 60\n        new_h = (h + (m - d) // 60) % 24\n\n    print(f\"{new_h} {new_m}\")",
        "result": "passed",
        "similarities": [
            0.9959372282028198,
            0.9952567219734192,
            0.9957839846611023,
            0.9957398772239685,
            0.9957848787307739,
            0.9963300824165344,
            0.9941120147705078,
            0.994576632976532,
            0.9949210286140442,
            0.9942113757133484,
            0.9948263764381409,
            0.9930092692375183,
            0.9965294599533081,
            0.9941268563270569,
            0.9880598187446594,
            0.9958434700965881,
            0.9964144825935364,
            0.9955480694770813,
            0.9867449402809143,
            0.9949594140052795
        ]
    },
    "4957": {
        "similarity": 0.9977049827575684,
        "body": "n, m = map(int, input().split())\ngrid = [list(input()) for _ in range(n)]\nvisited = [[False]*m for _ in range(n)]\n\n    if 0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]:\n        visited[x][y] = True\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        for dx, dy in directions:\n            nx, ny = x + 2*dx, y + 2*dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                dfs(nx, ny)\n        grid[x][y] = 'E'\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '#':\n            continue\n        elif visited[i][j]:\n            continue\n        dfs(i, j)\n\nfor row in grid:\n    print(''.join(row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972766041755676,
            0.9970470070838928,
            0.997015118598938,
            0.9964897632598877,
            0.9968352317810059,
            0.9973411560058594,
            0.9973403811454773,
            0.9972040057182312,
            0.997086763381958,
            0.9962121844291687,
            0.9970604777336121,
            0.9961776733398438,
            0.9972217082977295,
            0.9946670532226562,
            0.9971042275428772,
            0.9965354800224304,
            0.9949528574943542,
            0.996201753616333,
            0.9977049827575684,
            0.9962949156761169
        ]
    },
    "4382": {
        "similarity": 0.9969359040260315,
        "body": "    N = int(input())\n    return N ** 3",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964057803153992,
            0.9964057803153992,
            0.9961462616920471,
            0.9964057803153992,
            0.9961463809013367,
            0.9964057803153992,
            0.9961463809013367,
            0.9964057803153992,
            0.9969359040260315,
            0.9964057803153992,
            0.9964057803153992,
            0.9963493347167969,
            0.9964057803153992,
            0.996407151222229,
            0.9961462616920471,
            0.9961462616920471,
            0.9961462616920471,
            0.9961462616920471,
            0.9961462616920471,
            0.9892835021018982
        ]
    },
    "4456": {
        "similarity": 0.9954622387886047,
        "body": "    c = [0] * 26\n    s = [''] * n\n    for i in range(n):\n        c[ord(p[i]) - ord('a')] += 1\n        c[ord(q[n-i-1]) - ord('a')] += 1\n    if min(c) < k:\n        return 'NO'\n    for i in range(k, n):\n        j = p[i-k]\n        s[j] = chr((i-k)+97)\n    for i in range(n):\n        x = max(0, p[i]-k)\n        y = q[n-i-1]-x\n        if 0 <= x < k and 0 <= y:\n            s[p[x]] = min(s[p[x]], chr(y+97))\n    return 'YES\\n' + ''.join(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992179274559021,
            0.9949591755867004,
            0.988717257976532,
            0.991074800491333,
            0.9952316284179688,
            0.9929840564727783,
            0.9936975240707397,
            0.992981493473053,
            0.995153546333313,
            0.9909811615943909,
            0.9904729127883911,
            0.9954622387886047,
            0.9938179850578308,
            0.9943469166755676,
            0.9941466450691223,
            0.9914259910583496,
            0.9930330514907837,
            0.9909264445304871,
            0.9946014285087585,
            0.9947108030319214
        ]
    },
    "4594": {
        "similarity": 0.996141254901886,
        "body": "N = int(input())\ndiameters = sorted(map(int, input().split()), reverse=True)\nlayers = 1\nfor i in range(1, N):\n    if diameters[i] < diameters[i - 1]:\n        layers += 1\nprint(layers)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959676861763,
            0.9958588480949402,
            0.9952099323272705,
            0.9927322268486023,
            0.994166910648346,
            0.9948949217796326,
            0.9954870343208313,
            0.9952858686447144,
            0.9943099617958069,
            0.9953126311302185,
            0.9929662942886353,
            0.9930598735809326,
            0.9936250448226929,
            0.9950935244560242,
            0.9948102235794067,
            0.996141254901886,
            0.9934256672859192,
            0.9939908385276794,
            0.9938854575157166,
            0.9916560649871826
        ]
    },
    "4560": {
        "similarity": 0.9943630695343018,
        "body": "    if n < a * 500 + 1 or n % 500 > n - a * 500:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nn = int(input())\na = int(input())\nprint(can_pay(n, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9793168306350708,
            0.9924986958503723,
            0.9922505617141724,
            0.993820309638977,
            0.98623126745224,
            0.9898648858070374,
            0.9943630695343018,
            0.9918601512908936,
            0.989874005317688,
            0.9934702515602112,
            0.9918548464775085,
            0.9923792481422424,
            0.9933937788009644,
            0.9926888346672058,
            0.988334059715271,
            0.9927102327346802,
            0.9938423037528992,
            0.9909013509750366,
            0.9913924336433411,
            0.993174135684967
        ]
    },
    "4320": {
        "similarity": 0.9910820722579956,
        "body": "    k = 1\n    while n % 2 == 0:\n        n //= 2\n        k *= 2\n    return n // (k - 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904205799102783,
            0.9890748858451843,
            0.987908124923706,
            0.9838674664497375,
            0.9838674664497375,
            0.9910820722579956,
            0.9859055280685425,
            0.9890544414520264,
            0.9733369946479797,
            0.984779953956604,
            0.9906278252601624,
            0.9859055280685425,
            0.9893932342529297,
            0.9891988635063171,
            0.984354555606842,
            0.9694446921348572,
            0.9840955138206482,
            0.9840007424354553,
            0.9792764782905579,
            0.9857496023178101
        ]
    },
    "4500": {
        "similarity": 0.996392011642456,
        "body": "    return 'Yes' if A + B >= C else 'No'\n\nA, B, C = map(int, input().split())\nprint(can_buy_toy(A, B, C))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920045137405396,
            0.996392011642456,
            0.9891841411590576,
            0.9962415099143982,
            0.9848117828369141,
            0.9960525035858154,
            0.9961417317390442,
            0.9960154294967651,
            0.9961417317390442,
            0.9890204071998596,
            0.9962415099143982,
            0.9955040812492371,
            0.9935511350631714,
            0.9955040812492371,
            0.9960154294967651,
            0.9946156740188599,
            0.9919421672821045,
            0.9961417317390442,
            0.9961417317390442,
            0.9960154294967651
        ]
    },
    "4739": {
        "similarity": 0.9965375661849976,
        "body": "    while b:\n        a, b = b, a % b\n    return a\n\nM, N = map(int, input().split())\nT = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nans = set()\nfor i in range(M):\n    for j in range(i+1, M):\n        diff_T = T[j] - T[i]\n        if diff_T == 0:\n            continue\n        gcd_val = gcd(X[j] - X[i], diff_T)\n        ans.add((X[j]-X[i]) // gcd_val * (diff_T // gcd_val))\n\nprint(len(ans))\nprint(*sorted(list(ans)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951453804969788,
            0.9952260255813599,
            0.9965171813964844,
            0.9965375661849976,
            0.9924703240394592,
            0.9934736490249634,
            0.9927490949630737,
            0.9958685040473938,
            0.9927123188972473,
            0.9915068745613098,
            0.9948580861091614,
            0.995810866355896,
            0.9959548115730286,
            0.9957004189491272,
            0.9956114888191223,
            0.9932138323783875,
            0.9958332777023315,
            0.9951428771018982,
            0.9952957034111023,
            0.9928460717201233
        ]
    },
    "4410": {
        "similarity": 0.9957568645477295,
        "body": "    n, k = map(int, input().split())\n    s = input()\n    occupied_indices = [i for i in range(n) if s[i] == '1']\n    max_occupiable = 0\n    j = 0\n    for i in range(len(occupied_indices)):\n        while j < len(occupied_indices) and occupied_indices[j] - k <= occupied_indices[i]:\n            j += 1\n        max_occupiable = max(max_occupiable, len(occupied_indices) - (j - i) - 1)\n    return max_occupiable",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953639507293701,
            0.9937836527824402,
            0.995514452457428,
            0.9902309775352478,
            0.9949100017547607,
            0.9957568645477295,
            0.99449622631073,
            0.9957274198532104,
            0.9942139983177185,
            0.9943856596946716,
            0.9957030415534973,
            0.9957330822944641,
            0.9905347228050232,
            0.995283305644989,
            0.9911070466041565,
            0.9943209290504456,
            0.9942358732223511,
            0.9932927489280701,
            0.9944437742233276,
            0.9950606822967529
        ]
    },
    "2441": {
        "similarity": 0.9976938366889954,
        "body": "from collections import deque, defaultdict\n\nn = int(input())\ncosts = list(map(int, input().split()))\nm = int(input())\n\ngraph = [set() for _ in range(n)]\nfor i in range(m):\n    u, v = map(int, input().split())\n    graph[u - 1].add(v - 1)\n\n    visited = set()\n    q = deque([0])\n    for node in q:\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                q.append(neighbor)\n\nvisited = [False] * n\nfor i in range(n):\n    if not visited[i]:\n        bfs()\n\nd = defaultdict(lambda: [])\nfor u in range(n):\n    for v in graph[u]:\n        d[costs[u]].append(costs[v])\n\nmin_cost = float('inf')\nways = 0\nvisited = [False] * n\n\n    global min_cost, ways\n    if node == n - 1:\n        if cost < min_cost:\n            min_cost = cost\n            ways = 1\n        elif cost == min_cost:\n            ways += 1\n        return\n\n    visited[node] = True\n    for c in d[cost]:\n        if not visited[graph[node].pop()]:\n            dfs(graph[node].pop(), c, way + 1)\n            graph[node].add(visited.index(False))\n    visited[node] = False\n\ndfs(0, costs[0], 1)\n\nprint(min_cost, ways % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965428113937378,
            0.9952555298805237,
            0.9971807599067688,
            0.9956412315368652,
            0.9971267580986023,
            0.9973884224891663,
            0.9971628785133362,
            0.9949706196784973,
            0.9976938366889954,
            0.9962887167930603,
            0.9961550831794739,
            0.996017575263977,
            0.9975377321243286,
            0.9970384240150452,
            0.9971408843994141,
            0.9975234866142273,
            0.9974149465560913,
            0.9974761605262756,
            0.9974087476730347,
            0.9962297677993774
        ]
    },
    "276": {
        "similarity": 0.9946171641349792,
        "body": "    n = int(input())\n    colors = []\n    for _ in range(n):\n        colors.append(input())\n\n    absent_names = ['Time', 'Mind', 'Soul', 'Power', 'Reality', 'Space']\n    present_names = [name for name, color in zip(absent_names, ['purple', 'green', 'blue', 'orange', 'red', 'yellow']) if color in colors]\n\n    print(len([name for name in absent_names if name not in present_names]))\n    print(*[name for name in absent_names if name not in present_names], sep='\\n')\n\nfind_absent_gems()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946171641349792,
            0.9926436543464661,
            0.9926490783691406,
            0.9930329918861389,
            0.9919453859329224,
            0.9920632243156433,
            0.9868147969245911,
            0.9931395649909973,
            0.9942657947540283,
            0.9868636727333069,
            0.9936395287513733,
            0.9930374026298523,
            0.9817938804626465,
            0.9935441613197327,
            0.9936854839324951,
            0.9942273497581482,
            0.9912788271903992,
            0.9924526214599609,
            0.9934386014938354,
            0.9922511577606201
        ]
    },
    "2635": {
        "similarity": 0.9973489046096802,
        "body": "m = list(map(int, input().split()))\nn = m[-1]\nmatrix = [list(map(int, input().split())) for _ in range(n)]\ntop, bottom, left, right = 0, n-1, 0, len(m[0])-1\nresult = []\nwhile top <= bottom and left <= right:\n    for i in range(left, right+1):\n        result.append(matrix[top][i])\n    top += 1\n    for i in range(top, bottom+1):\n        result.append(matrix[i][right])\n    right -= 1\n    if top <= bottom:\n        for i in range(right, left-1, -1):\n            result.append(matrix[bottom][i])\n        bottom -= 1\n    if left <= right:\n        for i in range(bottom, top-1, -1):\n            result.append(matrix[i][left])\n        left += 1\nprint(*result)",
        "result": "timed out",
        "similarities": [
            0.9966842532157898,
            0.9965318441390991,
            0.9963293671607971,
            0.9947304129600525,
            0.9967284798622131,
            0.9966309070587158,
            0.9971633553504944,
            0.9967968463897705,
            0.9964118003845215,
            0.9950973987579346,
            0.9947502017021179,
            0.9957044720649719,
            0.9957911968231201,
            0.9949557781219482,
            0.9973489046096802,
            0.9963150024414062,
            0.997026264667511,
            0.9963905811309814,
            0.9969738721847534,
            0.9928804039955139
        ]
    },
    "281": {
        "similarity": 0.9940215945243835,
        "body": "    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return max(a, b)\n\na, b = map(int, input().split())\nprint(pow(10, -gcd(b, a) % 4, 10))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926112294197083,
            0.9910005331039429,
            0.9888129830360413,
            0.9921178221702576,
            0.9933956861495972,
            0.993635356426239,
            0.9913140535354614,
            0.9925097227096558,
            0.9929947257041931,
            0.9918841123580933,
            0.9707786440849304,
            0.9932281374931335,
            0.9807721376419067,
            0.9900655150413513,
            0.993103563785553,
            0.9940215945243835,
            0.989936351776123,
            0.9936973452568054,
            0.9928142428398132,
            0.9922178387641907
        ]
    },
    "2300": {
        "similarity": 0.9973317384719849,
        "body": "    return x-1+max(0,x-2)\n\na = list(map(int, input().split()))\nn,a= a[0], a[1:]\nm = int(input())\nops = []\nfor i in range(m):\n    op = [int(j) for j in input().split()]\n    if op[0] == 1: ops.append([op[1]-1,op[2]])\n    elif op[0] == 2:\n        l,r=op[1],op[2]\n        r-=l\n        ops.append([l,r])\n    else:\n        l,r,d = op[1], op[2], op[3]\n        for j in range(l-1,r):\n            a[j]+=d\n\nsums = [0]*n\nfor i in range(m):\n    if len(ops[i])==2:\n        r,l= ops[i][1], ops[i][0]\n        s = 0\n        for j in range(r):\n            s += f(j)*a[l+j]\n            s %= 10**9\n        sums[l] = s\n\nans = []\nfor i in range(m):\n    if len(ops[i])==2:\n        r,l= ops[i][1], ops[i][0]\n        ans.append(str(sums[l]))\n    else: ans.append('')\n\nprint('\\n'.join(ans))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973158836364746,
            0.9967859387397766,
            0.9968535900115967,
            0.9961602091789246,
            0.9973317384719849,
            0.9948332905769348,
            0.9967262744903564,
            0.9967931509017944,
            0.9933642148971558,
            0.9965829253196716,
            0.996785044670105,
            0.9962903261184692,
            0.9965450763702393,
            0.9963315725326538,
            0.9962294697761536,
            0.9931056499481201,
            0.9959229230880737,
            0.994284987449646,
            0.9967372417449951,
            0.9961768984794617
        ]
    },
    "2104": {
        "similarity": 0.9958240985870361,
        "body": "    while b: a, b = b, a % b\n    return a\n\n    l, r = map(int, input().split())\n    if (r - l + 1) // 2 != ((r - l + 1) & 1): print(\"NO\"); exit()\n    res = []\n    for i in range(l + (r - l) // 2, r + 1, 2):\n        res.append((i - 1, i))\n    if len(res) == (r - l + 1): print(\"NO\")\n    else:\n        for i in range(l, l + (r - l) // 2, 2):\n            res.append((i, i + 1))\n        print(\"YES\")\n        for x, y in sorted(res, key=lambda p: max(p)):\n            print(x, y)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.99310302734375,
            0.9932090640068054,
            0.9870480895042419,
            0.9953472018241882,
            0.995418131351471,
            0.993090808391571,
            0.9951425194740295,
            0.9941033124923706,
            0.9924334287643433,
            0.9944363832473755,
            0.9958240985870361,
            0.9934718608856201,
            0.9955931305885315,
            0.9932674765586853,
            0.9943287372589111,
            0.9952091574668884,
            0.9948183298110962,
            0.9943804740905762,
            0.9957956075668335,
            0.994157075881958
        ]
    },
    "1995": {
        "similarity": 0.9950070977210999,
        "body": "    substring = s[l-1:r]\n    shifted_substring = substring[-k%len(substring):] + substring[:-k%len(substring)]\n    return s[:l-1] + shifted_substring + s[r:]\n\ns = input()\nm = int(input())\nfor _ in range(m):\n    l, r, k = map(int, input().split())\n    s = cyclic_shift(s, l, r+1, k)\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942606687545776,
            0.9950070977210999,
            0.9935295581817627,
            0.9921456575393677,
            0.9866965413093567,
            0.9892901182174683,
            0.9916955232620239,
            0.9927404522895813,
            0.9922550916671753,
            0.988631010055542,
            0.9908437132835388,
            0.9914098978042603,
            0.9930450916290283,
            0.9921782612800598,
            0.9918837547302246,
            0.9915469288825989,
            0.9946008324623108,
            0.9939690828323364,
            0.9918457865715027,
            0.9925782084465027
        ]
    },
    "2064": {
        "similarity": 0.9952955842018127,
        "body": "    ans = ''\n    for i in range(10, 0, -1):\n        if sum(int(digit) for digit in str(i)) <= n:\n            ans = str(i)\n            break\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907670617103577,
            0.993294358253479,
            0.991870105266571,
            0.9938237071037292,
            0.9913622140884399,
            0.9900065064430237,
            0.9923758506774902,
            0.9925150871276855,
            0.9926496744155884,
            0.9908513426780701,
            0.9935634136199951,
            0.9914470314979553,
            0.9923908710479736,
            0.9931458234786987,
            0.9931843280792236,
            0.9944038391113281,
            0.9934102296829224,
            0.9930732250213623,
            0.9952955842018127,
            0.9947543740272522
        ]
    },
    "1715": {
        "similarity": 0.9949406385421753,
        "body": "    A, B, Q = map(int, input().split())\n    S = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n\n    S.sort()\n    T.sort()\n\n    for q in range(Q):\n        x = X[q]\n        ans = float('inf')\n        for i in range(A):\n            a = abs(x - S[i])\n            l, r = 0, B\n            while l < r:\n                mid = (l + r) // 2\n                if T[mid] <= x or T[mid] - S[i] > a:\n                    l = mid + 1\n                else:\n                    r = mid\n            ans = min(ans, min(abs(S[i] - x) + abs(T[r] - S[i]), abs(T[l] - S[i]) + abs(x - T[l])))\n        print(ans)\n\n    return",
        "result": "failed: testcase 0",
        "similarities": [
            0.9908943176269531,
            0.9932082295417786,
            0.9915916323661804,
            0.9932380318641663,
            0.9949406385421753,
            0.9928538799285889,
            0.9933502674102783,
            0.9943336844444275,
            0.98673015832901,
            0.9940721392631531,
            0.9941169619560242,
            0.9927950501441956,
            0.9926905632019043,
            0.9938363432884216,
            0.9929966330528259,
            0.9901046752929688,
            0.9910193085670471,
            0.9917600750923157,
            0.9928659200668335,
            0.9940218925476074
        ]
    },
    "2074": {
        "similarity": 0.9922305941581726,
        "body": "n, m = map(int, input().split())\nmax_street = 0\nmin_avenue = float('inf')\nfor _ in range(n):\n    avenue_costs = list(map(int, input().split()))\n    max_i = avenue_costs.index(max(avenue_costs))\n    if max(avenue_costs) > max_street:\n        max_street = max(avenue_costs)\n    min_j = avenue_costs.index(min(avenue_costs))\n    if avenue_costs[min_j] < min_avenue:\n        min_avenue = avenue_costs[min_j]\nprint(max(0, max_street - min_avenue))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920558929443359,
            0.9834434390068054,
            0.9906061291694641,
            0.9814520478248596,
            0.9858067035675049,
            0.9853227734565735,
            0.9918696880340576,
            0.9866136312484741,
            0.9865409731864929,
            0.9911990761756897,
            0.9903934001922607,
            0.9856890439987183,
            0.987217128276825,
            0.9907511472702026,
            0.9870449900627136,
            0.9887906312942505,
            0.9864108562469482,
            0.9922305941581726,
            0.9898373484611511,
            0.988956868648529
        ]
    },
    "2921": {
        "similarity": 0.9967828989028931,
        "body": "    return input().split()\n\n    m, u, d = map(float, readline())\n    drinks = []\n    for _ in range(d):\n        name, strength, size, cost = readline()\n        cost = float(cost)\n        volume = 1 if size == '1/1' else 0.5 if size == '1/2' else 1/3\n        drinks.append((name, int(strength), size, cost / volume))\n\n    dp = [[] for _ in range(int(u) + 1)]\n    for drink in drinks:\n        name, strength, size, cost_per_unit = drink\n        for i in range(int(u), -1, -1):\n            if i + strength <= u and len(dp[i]) < m / cost_per_unit:\n                dp[i + strength].append((name, int(m / cost_per_unit) - len(dp[i])))\n                dp[i].append((name, -len(dp[i])))\n\n    result = []\n    for i in range(int(u), -1, -1):\n        if any(v > 0 for v in dp[i]):\n            result.append(' '.join([d[0] + ' ' + str(d[1]) for d in dp[i] if d[1] > 0]))\n\n    print('\\n'.join(result) or 'IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958468079566956,
            0.9950717091560364,
            0.9961255788803101,
            0.9956058859825134,
            0.9954314827919006,
            0.9918632507324219,
            0.9956431984901428,
            0.9959827065467834,
            0.9956579804420471,
            0.9935401082038879,
            0.9955109357833862,
            0.9961786866188049,
            0.996320903301239,
            0.9963786602020264,
            0.9955050945281982,
            0.9967828989028931,
            0.9940962791442871,
            0.9959660768508911,
            0.9959030151367188,
            0.99518221616745
        ]
    },
    "1642": {
        "similarity": 0.995509922504425,
        "body": "import math\n\nn = int(input())\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\neps = 1e-9\nans = float('inf')\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\nfor i in range(n):\n    for j in range(i+1, n):\n        l1 = dist(p[i], p[(i+1)%n])\n        l2 = dist(p[j], p[(j+1)%n])\n        h1 = (l1**2 + l2**2 - dist(p[i], p[j])**2) / (2*l1*l2)\n        if abs(h1-1) < eps:\n            continue\n        ans = min(ans, max(abs(l1-l2)/2, 0))\nfor i in range(n):\n    for j in range(i+1, n):\n        d = dist(p[i], p[j])\n        if (d**2 - 4*dist(p[i], p[(i+1)%n])**2) * (d**2 - 4*dist(p[j], p[(j+1)%n])**2) >= 0:\n            ans = min(ans, abs(dist(p[i], p[(i+1)%n]) - dist(p[j], p[(j+1)%n])) / 2)\nprint(min(ans, 1000000000))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947003722190857,
            0.9953659772872925,
            0.9913281798362732,
            0.9951836466789246,
            0.9927719831466675,
            0.9945129752159119,
            0.9944682121276855,
            0.9942628145217896,
            0.9954158663749695,
            0.9953243732452393,
            0.9947150349617004,
            0.9894437193870544,
            0.9954171776771545,
            0.995509922504425,
            0.9946674704551697,
            0.9945181608200073,
            0.9952287077903748,
            0.9951095581054688,
            0.9950815439224243,
            0.9951400756835938
        ]
    },
    "947": {
        "similarity": 0.9989981651306152,
        "body": "        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n//2, n//2)\n    else:\n        print(1, n-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9989981651306152,
            0.997955322265625,
            0.9989575743675232,
            0.9988604187965393,
            0.9977861046791077,
            0.9985344409942627,
            0.991843581199646,
            0.9982260465621948,
            0.998701810836792,
            0.9989976286888123,
            0.9983311891555786,
            0.9989460706710815,
            0.998724102973938,
            0.998575747013092,
            0.9987232685089111,
            0.9988630414009094,
            0.9977277517318726,
            0.9986680746078491,
            0.9989772439002991,
            0.9986066222190857
        ]
    },
    "743": {
        "similarity": 0.9943181276321411,
        "body": "    x = list(map(int, input().split()))\n    x.sort()\n    total = 0\n    for i in range(1, n):\n        x[i] -= x[i-1]\n        total += x[i]\n    return total",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916930794715881,
            0.9895487427711487,
            0.9903594851493835,
            0.9936031699180603,
            0.9888685941696167,
            0.9939137697219849,
            0.9923611879348755,
            0.9895858764648438,
            0.9884818196296692,
            0.9925559163093567,
            0.9891815185546875,
            0.9922011494636536,
            0.992303729057312,
            0.9934771656990051,
            0.991631269454956,
            0.9943181276321411,
            0.9936279654502869,
            0.9914211630821228,
            0.9904955625534058,
            0.9936649799346924
        ]
    },
    "1397": {
        "similarity": 0.9968453645706177,
        "body": "    g = [set() for i in range(n+1)]\n    for i in range(m):\n        a,b = map(int,input().split())\n        g[a].add(b)\n        g[b].add(a)\n\n    s = set()\n    b = []\n    for i in range(1,n+1):\n        for j in g[i]:\n            if len(g[j])>1:\n                b.append((i,j))\n                s.add((i,j))\n\n    res = n-1\n    for (x,y) in b:\n        if not ((y,x) in s) and (len(g[x])<2):\n            res-=1\n            g[y].add(x)\n            print(y,x)\n\n    print(res)\n    for i in range(1,n+1):\n        g[i] = list(g[i])\n        g[i].sort()\n        for j in g[i]:\n            if len(g[j])==1:\n                continue\n\n            res = (i,j)\n            print(i,j)\n            break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965546131134033,
            0.9961615204811096,
            0.9954307079315186,
            0.9954203367233276,
            0.9948687553405762,
            0.9922116994857788,
            0.9967636466026306,
            0.9932096600532532,
            0.9961585998535156,
            0.9960237145423889,
            0.9957295656204224,
            0.995631754398346,
            0.9968453645706177,
            0.9957838654518127,
            0.9959192872047424,
            0.9965983033180237,
            0.9958733320236206,
            0.9946755170822144,
            0.996791660785675,
            0.9954316020011902
        ]
    },
    "1144": {
        "similarity": 0.9956113696098328,
        "body": "    n = int(input())\n    s = input()\n    m = int(input())\n    t = ['a' if i % 2 == 0 else 'b' for i in range(m)]\n    dp = [[float('inf')] * (n + 1) for _ in range(3)]\n    dp[0][0] = 0\n    for c in s:\n        new_dp = [[float('inf')] * (n + 1) for _ in range(3)]\n        for mask in range(3):\n            for pos in range(n + 1):\n                if dp[mask][pos] == float('inf'): continue\n                cur_mask = mask | (int(c != t[pos % m]) << pos)\n                new_dp[cur_mask][pos] = min(new_dp[cur_mask][pos], dp[mask][pos])\n                if pos < n:\n                    new_dp[cur_mask][pos + 1] = min(new_dp[cur_mask][pos + 1],\n                                                    dp[mask][pos] + (int(c == t[pos % m]) << pos))\n        dp = new_dp\n    ans = float('inf')\n    for mask in range(3):\n        ans = min(ans, mask - sum(dp[mask]))\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935240745544434,
            0.9941920042037964,
            0.9880380034446716,
            0.9916962385177612,
            0.9918957948684692,
            0.9934216737747192,
            0.9948475360870361,
            0.9944403767585754,
            0.9945204854011536,
            0.9928221702575684,
            0.9947426319122314,
            0.9906375408172607,
            0.994807779788971,
            0.9934893250465393,
            0.9921786785125732,
            0.9938673973083496,
            0.9939639568328857,
            0.9956113696098328,
            0.9940153360366821,
            0.9943689107894897
        ]
    },
    "890": {
        "similarity": 0.9965196251869202,
        "body": "    ans = [0] * (r + 1)\n    for i in range(2 ** n):\n        t = []\n        cnt = 0\n        for j in range(n):\n            if i >> j & 1:\n                t.append(c[j])\n                cnt += 1\n        s = sum(t) if t else 0\n        if s >= l and s <= r and (len(t) < 2 or max(t) - min(t) >= x):\n            ans[s] += 1\n    return sum(ans[l:r + 1])\n\nn, l, r, x = map(int, input().split())\nc = list(map(int, input().split()))\nprint(f(n, l, r, x, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928710460662842,
            0.9938892722129822,
            0.9958223104476929,
            0.9951438903808594,
            0.9949465394020081,
            0.9929272532463074,
            0.9942646026611328,
            0.9945749044418335,
            0.9945092797279358,
            0.9931439757347107,
            0.9942368268966675,
            0.9951579570770264,
            0.9951469302177429,
            0.9958805441856384,
            0.9938589334487915,
            0.995768129825592,
            0.9951121807098389,
            0.9912455677986145,
            0.9919109344482422,
            0.9965196251869202
        ]
    },
    "2410": {
        "similarity": 0.9937238097190857,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    pref = [0]\n    for x in a: pref.append(pref[-1] + x)\n    if pref[-1] > max(pref[2:]) or all(pref[i] > pref[i-1] for i in range(2, n+1)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nfor _ in range(int(input())):\n    print(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9808843731880188,
            0.9920756816864014,
            0.9921358823776245,
            0.9935988187789917,
            0.9855876564979553,
            0.9896436333656311,
            0.9886988401412964,
            0.9936354756355286,
            0.9912548065185547,
            0.9922893047332764,
            0.9937238097190857,
            0.9911596179008484,
            0.9914022088050842,
            0.9901127219200134,
            0.9896944761276245,
            0.9901130199432373,
            0.9883400797843933,
            0.9933150410652161,
            0.9852730631828308,
            0.9899026155471802
        ]
    },
    "1004": {
        "similarity": 0.995582103729248,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    st = []\n    for x in a:\n        if x > 0:\n            st.append(x)\n        else:\n            y = -x\n            st.append(y)\n            if len(st) >= 2 and abs(st[-1]) == abs(st[-2]):\n                st.pop()\n            elif not st or (len(st) >= 1 and abs(st[-1]) < abs(y)):\n                print(-1)\n                return\n    ans = []\n    cur = [st[0]]\n    for i in range(1, len(st)):\n        if abs(st[i]) == abs(st[i - 1]):\n            cur.append(st[i])\n        else:\n            ans.append(len(cur))\n            cur = [st[i]]\n    ans.append(len(cur))\n    print(len(ans))\n    print(*ans)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945191144943237,
            0.9948087334632874,
            0.9925352334976196,
            0.9949288964271545,
            0.9932010173797607,
            0.9947148561477661,
            0.9945113658905029,
            0.9941318035125732,
            0.9952539205551147,
            0.9946742057800293,
            0.9923959374427795,
            0.9943979978561401,
            0.9943150877952576,
            0.9937416911125183,
            0.9953823089599609,
            0.9940145611763,
            0.995582103729248,
            0.9948568940162659,
            0.9945870637893677,
            0.9946519732475281
        ]
    },
    "531": {
        "similarity": 0.9960594177246094,
        "body": "from collections import Counter\n\nn = int(input())\nx = list(map(int, input().split()))\n\nmaxv = max(x)\nminv = min(x)\n\ncx = sorted(Counter(x).items(), key=lambda x: x[1], reverse=True)\n\ny = []\nequal_count = 0\n\nfor i in range(n):\n    found = False\n    for c, freq in cx:\n        if c not in y and (c + 2) >= minv and (c - 2) <= maxv:\n            y.append(c)\n            equal_count += freq\n            cx.remove((c, freq))\n            found = True\n            break\n\nfor _ in range(len(cx)):\n    for c, freq in cx[:]:\n        if freq > 1:\n            y.extend([c] * (freq - 1))\n            cx.remove((c, freq))\n\nprint(equal_count)\nprint(' '.join(map(str, y)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941762685775757,
            0.9926368594169617,
            0.991817057132721,
            0.9891267418861389,
            0.9944327473640442,
            0.9958122968673706,
            0.9947630167007446,
            0.9948282837867737,
            0.9920614957809448,
            0.994350016117096,
            0.9954261779785156,
            0.9937893748283386,
            0.9955007433891296,
            0.994373619556427,
            0.9937186241149902,
            0.9941443204879761,
            0.9945719838142395,
            0.9943150877952576,
            0.9942860007286072,
            0.9960594177246094
        ]
    },
    "510": {
        "similarity": 0.9902306795120239,
        "body": "    a, b, c = min(a, b, c), max(a, b, c)\n    return max((b-c+d-1)//d,\n               abs(b-a-d+1)//d + 1 if (a<=c and b>c) else 0,\n               abs(c-b-d+1)//d + 1 if (c<=b and a<b) else 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9860771894454956,
            0.9900270104408264,
            0.98766028881073,
            0.9879505634307861,
            0.9699832797050476,
            0.9743034243583679,
            0.9890478253364563,
            0.9885890483856201,
            0.9819396138191223,
            0.9777563810348511,
            0.9884782433509827,
            0.9874681234359741,
            0.9882517457008362,
            0.9852432608604431,
            0.9890468120574951,
            0.9873441457748413,
            0.9899584054946899,
            0.9896143674850464,
            0.9888314008712769,
            0.9902306795120239
        ]
    },
    "2555": {
        "similarity": 0.9961763024330139,
        "body": "    if l == r: return a[l]\n    x = min(l + 1, r - 1)\n    return max(f(a, l, x) - f(a, x + 1, r), f(a, x + 1, r) - f(a, l, x))\n\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    s0, s1 = [0] * (n + 2), [0] * (n + 2)\n    for i in range(1, n + 1):\n        s0[i], s1[i] = max(s0[i - 1] + a[i - 1], a[i - 1]), min(s1[i - 1] - a[i - 1], -a[i - 1])\n    ans = [0]\n    for _ in range(q):\n        l, r = map(int, input().split())\n        if s0[r] > (s1[l - 1] + s0[r]):\n            ans.append(s0[r] - s1[l - 1])\n        elif s1[r] < (s0[l - 1] - s1[r]):\n            ans.append(s0[l - 1] - s1[r])\n        else:\n            ans.append(max(ans[-1], s0[r] - s1[l - 1]))\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956353902816772,
            0.9954448342323303,
            0.992038905620575,
            0.9960818886756897,
            0.9958520531654358,
            0.9958340525627136,
            0.9961763024330139,
            0.9960808157920837,
            0.9948778748512268,
            0.9959480166435242,
            0.9958409667015076,
            0.9956223368644714,
            0.9941859841346741,
            0.9952039122581482,
            0.9944226145744324,
            0.9954976439476013,
            0.9940731525421143,
            0.9926226735115051,
            0.9953814148902893,
            0.9870874285697937
        ]
    },
    "324": {
        "similarity": 0.9950693845748901,
        "body": "    i = 2\n    while True:\n        a = 2 * i + n\n        b = i\n        if a >= 2 and any(a % j != 0 for j in range(2, int(a ** 0.5) + 1)):\n            return a, b\n        i += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937580823898315,
            0.9930751323699951,
            0.9944708943367004,
            0.9950693845748901,
            0.9835052490234375,
            0.9915504455566406,
            0.9936017394065857,
            0.992642343044281,
            0.9877187013626099,
            0.9939924478530884,
            0.9930084943771362,
            0.9938266277313232,
            0.9929721355438232,
            0.9942233562469482,
            0.9948055148124695,
            0.99396151304245,
            0.9941290020942688,
            0.9935957193374634,
            0.9922568798065186,
            0.9936593770980835
        ]
    },
    "2912": {
        "similarity": 0.9946708679199219,
        "body": "    a, b = map(lambda x: int(x) - 1, p.split())\n    s[a] += s[b]\n    return s\n\nn = int(input())\ns = [input() for _ in range(n)]\nfor _ in range(n-1):\n    p = input()\n    s = f(s, p)\nprint(s[-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939636588096619,
            0.9894712567329407,
            0.9927928447723389,
            0.9946708679199219,
            0.9944881796836853,
            0.9938697814941406,
            0.9916921257972717,
            0.9934303164482117,
            0.9925976991653442,
            0.9941756725311279,
            0.9939942955970764,
            0.9917920827865601,
            0.9731113910675049,
            0.9929205179214478,
            0.9931144714355469,
            0.9941996335983276,
            0.9936564564704895,
            0.9935054779052734,
            0.9927573800086975,
            0.9879123568534851
        ]
    },
    "9": {
        "similarity": 0.9957367777824402,
        "body": "    n = int(input())\n    _, h, w = map(int, input().split())\n    sofas = [[] for _ in range(n)]\n    cnt = list(map(int, input().split()))\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        if abs(x1 - x2) + abs(y1 - y2) == 1:\n            sofas[i] = [(x1, y1), (x2, y2)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if set(sofas[i]) & set(sofas[j]):\n                return -1\n    for i in range(n):\n        s = sofas[i]\n        if len(set([c[0] for c in s])) != 2 or len(set([c[1] for c in s])) != 2:\n            continue\n        x, y = s[0][:]\n        if (cnt[0] == -1) ^ (len([c for c in sofas if c and c[0][0] < x]) == cnt[0]):\n            continue\n        if (cnt[1] == -1) ^ (len([c for c in sofas if c and c[0][0] > x and c[0][1] == y]) == cnt[1]):\n            continue\n        if (cnt[2] == -1) ^ (len([c for c in sofas if c and c[0][1] < y]) == cnt[2]):\n            continue\n        if (cnt[3] == -1) ^ (len([c for c in sofas if c and c[0][1] > y and c[0][0] == x]) == cnt[3]):\n            continue\n        return i + 1\n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.994134783744812,
            0.9957367777824402,
            0.9899981617927551,
            0.9944187998771667,
            0.9944616556167603,
            0.9943444132804871,
            0.9941263794898987,
            0.9951058626174927,
            0.9946287274360657,
            0.9927674531936646,
            0.9932199120521545,
            0.995217502117157,
            0.9931871294975281,
            0.9905721545219421,
            0.9928346276283264,
            0.9951830506324768,
            0.9953101277351379,
            0.9939033389091492,
            0.9951601624488831,
            0.9923931956291199
        ]
    },
    "249": {
        "similarity": 0.9918805360794067,
        "body": "    p = []\n    d = [0]\n    for i in range(1, n + 1):\n        d.append(a[i] - a[i - 1])\n    c = [d[i] for i in range(len(d)) if d[i] == x or d[i] == y]\n\n        j = len(c) - 1\n        while j > i and c[j] - c[i] >= y: j -= 1\n        return max(j, 0)\n\n    for i in range(len(d)):\n        if d[i] not in c:\n            p.append(a[i])\n            g(i)\n            break\n\n    q = [a[-1]]\n    while len(q) < 2:\n        r = []\n        for w in p:\n            if a[-1] - w >= x and a[-1] - w <= y: r.append(w)\n        q += sorted(r)[:2]\n    return len(p), *q",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916213154792786,
            0.9914631247520447,
            0.9873695373535156,
            0.973254382610321,
            0.9711657166481018,
            0.9918805360794067,
            0.9912662506103516,
            0.9915540814399719,
            0.9736419320106506,
            0.9907126426696777,
            0.9871645569801331,
            0.9894621968269348,
            0.9918351769447327,
            0.9831961393356323,
            0.9887235760688782,
            0.9910647869110107,
            0.9903199076652527,
            0.9877995848655701,
            0.9885584115982056,
            0.9891219139099121
        ]
    },
    "2999": {
        "similarity": 0.9964200854301453,
        "body": "    n, s = map(int, input().split())\n    participants = []\n    for _ in range(n):\n        name, b = input().split()\n        participants.append((name, int(b)))\n    participants.sort(key=lambda x: x[1])\n    groups = {}\n    current_sum = 0\n    current_bid = -1\n    for name, bid in participants:\n        if bid > current_bid or (bid < current_bid and current_sum != s):\n            current_sum += bid\n            current_bid = bid\n            groups[current_sum] = [name]\n        elif bid == current_bid:\n            current_sum += bid\n            groups[current_sum].append(name)\n    result = 0\n    for sum_val, names in groups.items():\n        if sum_val == s:\n            result += len(names)\n            for name in names:\n                print(name)\n    print(result)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932445883750916,
            0.9959847331047058,
            0.9952287077903748,
            0.9959191083908081,
            0.9949349164962769,
            0.9943910241127014,
            0.9950563311576843,
            0.9964200854301453,
            0.9929419159889221,
            0.99608314037323,
            0.9949838519096375,
            0.9956387877464294,
            0.9952495098114014,
            0.9943508505821228,
            0.9936702251434326,
            0.9947128295898438,
            0.9960640668869019,
            0.9941503405570984,
            0.9962025880813599,
            0.9961373209953308
        ]
    },
    "2239": {
        "similarity": 0.991367518901825,
        "body": "    for n in range(1, x+1):\n        if 2 * n <= x <= 7 * n:\n            return n\n    return None",
        "result": "failed: testcase 0",
        "similarities": [
            0.9872776865959167,
            0.9871061444282532,
            0.9893732666969299,
            0.9894228577613831,
            0.9855502247810364,
            0.9782773852348328,
            0.9810792803764343,
            0.9892939329147339,
            0.9797803163528442,
            0.9888193011283875,
            0.9859848022460938,
            0.9913262724876404,
            0.9880916476249695,
            0.991367518901825,
            0.9903269410133362,
            0.9880916476249695,
            0.9912019968032837,
            0.9892837405204773,
            0.9900047183036804,
            0.9883916974067688
        ]
    },
    "2615": {
        "similarity": 0.9963873624801636,
        "body": "    while b: a, b = b, a % b\n    return a\n\n    res = 0\n    pwr = {2: [], 3: [], 5: []}\n    m = n.bit_length()\n    for i in range(1, m + 1):\n        if (n >> i) & 1:\n            k = 0\n            c = 0\n            e = 6\n            while e <= n:\n                pwr[e].append(k)\n                c += len(pwr[e])\n                k += 1\n                e *= e\n            res += sum([len(lst) for lst in pwr.values()]) - c * (c - 1) // 2\n    return res\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_elegant(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959367513656616,
            0.9955894947052002,
            0.9933969378471375,
            0.9937277436256409,
            0.9950121641159058,
            0.9963873624801636,
            0.9959606528282166,
            0.9952355623245239,
            0.9956966042518616,
            0.994920015335083,
            0.9958294630050659,
            0.9958564639091492,
            0.9958785176277161,
            0.9951501488685608,
            0.9953491687774658,
            0.9928446412086487,
            0.9896830320358276,
            0.9961243867874146,
            0.9953873157501221,
            0.9942503571510315
        ]
    },
    "2542": {
        "similarity": 0.9952302575111389,
        "body": "    n = len(s)\n    cnt = [0] * 10\n    for c in s:\n        cnt[int(c)] += 1\n    res = float('inf')\n    for i in range(10):\n        if cnt[i] > (n + 1) // 2:\n            res = min(res, n - cnt[i] * 2)\n    return res\n\nfor _ in range(int(input())):\n    s = input()\n    print(solve(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9887537956237793,
            0.9933491945266724,
            0.9937936067581177,
            0.9937132000923157,
            0.9918889403343201,
            0.99322909116745,
            0.993086576461792,
            0.9914870858192444,
            0.9919057488441467,
            0.9906930327415466,
            0.9939069151878357,
            0.9942412376403809,
            0.9937532544136047,
            0.9931539297103882,
            0.9944744110107422,
            0.9950907826423645,
            0.9939874410629272,
            0.994807779788971,
            0.9837797284126282,
            0.9952302575111389
        ]
    },
    "511": {
        "similarity": 0.9960318207740784,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n    if y == 0:\n        return 0\n    else:\n        return 1 + f(x, y - gcd(x, y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9872413277626038,
            0.9957810640335083,
            0.9955525994300842,
            0.9960052371025085,
            0.9950246214866638,
            0.9887988567352295,
            0.9954653382301331,
            0.9954203367233276,
            0.9956954121589661,
            0.9947804808616638,
            0.9946964979171753,
            0.9958894848823547,
            0.9931568503379822,
            0.9947196841239929,
            0.9950163960456848,
            0.99343341588974,
            0.9945216774940491,
            0.9956256747245789,
            0.9950957298278809,
            0.9960318207740784
        ]
    },
    "1409": {
        "similarity": 0.9936872720718384,
        "body": "    a = list(map(int, input().split())) \n    a.sort(reverse=True)\n    t = 0\n    for i in range(3):\n        if a[i] >= k:\n            t += (a[i]-k+1)//2\n    return t // 3",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923709034919739,
            0.9919107556343079,
            0.9845998883247375,
            0.9908360838890076,
            0.9891595244407654,
            0.988925039768219,
            0.988936185836792,
            0.9816775918006897,
            0.9918927550315857,
            0.9918034076690674,
            0.9904513955116272,
            0.9914805889129639,
            0.992964506149292,
            0.9936872720718384,
            0.9933116436004639,
            0.984944224357605,
            0.992439866065979,
            0.9899205565452576,
            0.9894092082977295,
            0.9788293242454529
        ]
    },
    "2274": {
        "similarity": 0.9958062767982483,
        "body": "    return [(i - 1, j), (i, j + 1)]\n\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    queue = []\n    counter = 0\n\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 2, -1, -1):\n            if grid[i][j] == 'D' and visited[i + 1][j]:\n                queue.append((i, j))\n\n    while queue:\n        curr_i, curr_j = queue.pop(0)\n        visited[curr_i][curr_j] = True\n\n        for neighbour in get_neighbours(curr_i, curr_j):\n            new_i, new_j = neighbour\n            if (new_i < 0 or new_i >= n or new_j < 0 or new_j >= m or not grid[new_i][new_j] == 'D' or visited[new_i][new_j]):\n                continue\n\n            queue.append((new_i, new_j))\n            counter += 1\n\n    return counter",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951484203338623,
            0.9936738610267639,
            0.9866909384727478,
            0.9957624673843384,
            0.9953137636184692,
            0.994554340839386,
            0.9947066307067871,
            0.9940595030784607,
            0.9942318797111511,
            0.9954460859298706,
            0.9942036867141724,
            0.9954041242599487,
            0.9957695007324219,
            0.994857668876648,
            0.9955958127975464,
            0.9958062767982483,
            0.9947788715362549,
            0.9923657774925232,
            0.994479238986969,
            0.9948716759681702
        ]
    },
    "2420": {
        "similarity": 0.9943100810050964,
        "body": "    points.sort(key=lambda x: (-x[0], -x[1]))\n    ans = 0\n    for i in range(n):\n        x, y = points[i]\n        if i > 0 and abs(x - points[i-1][0]) + abs(y - points[i-1][1]) <= r:\n            continue\n        count = 0\n        for j in range(i, n):\n            a, b = points[j]\n            if abs(a-x) + abs(b-y) > r:\n                break\n            count += 1\n        ans = max(ans, count+1)\n    return ans\n\nn, r = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\nprint(max_points(n, r, points))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940354228019714,
            0.9903582334518433,
            0.992882490158081,
            0.9904415607452393,
            0.9919788241386414,
            0.9844406843185425,
            0.9910769462585449,
            0.9842965006828308,
            0.9837889671325684,
            0.9886976480484009,
            0.9917327761650085,
            0.993871808052063,
            0.9943100810050964,
            0.9930974245071411,
            0.9924629926681519,
            0.9849739074707031,
            0.9932245016098022,
            0.9933997988700867,
            0.9925440549850464,
            0.991330623626709
        ]
    },
    "1267": {
        "similarity": 0.9932541251182556,
        "body": "    ans = 1\n    j = -1\n    for i in range(n)[::-1]:\n        if a[i] > 0:\n            if j == -1 or a[j] < a[i]:\n                ans *= (n - i)\n                j = i\n    return ans\n\nn = int(input())\na = list(map(int, input().split()))\nprint(f(n, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922049641609192,
            0.9929606914520264,
            0.9926711916923523,
            0.9920834898948669,
            0.9932541251182556,
            0.9922870993614197,
            0.9898722767829895,
            0.9913790822029114,
            0.9921764731407166,
            0.9927640557289124,
            0.9848945140838623,
            0.9846622943878174,
            0.9931967854499817,
            0.9932520985603333,
            0.9924970269203186,
            0.9893907308578491,
            0.9911152720451355,
            0.9888089895248413,
            0.9902036786079407,
            0.9914587140083313
        ]
    },
    "2356": {
        "similarity": 0.9957455992698669,
        "body": "    b = sorted((i - x, i) for i, x in enumerate(a))\n    return [x[1] for x in b]\n\nn = int(input())\nfor _ in range(n):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*f(a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952970743179321,
            0.9951019287109375,
            0.9934198260307312,
            0.9931166768074036,
            0.9951921701431274,
            0.991291880607605,
            0.9936323761940002,
            0.9950686097145081,
            0.9920092225074768,
            0.9938957691192627,
            0.9951798319816589,
            0.9895868897438049,
            0.9957455992698669,
            0.9956515431404114,
            0.9955300092697144,
            0.994036853313446,
            0.9947778582572937,
            0.9922152161598206,
            0.994202196598053,
            0.9917887449264526
        ]
    },
    "108": {
        "similarity": 0.9954290986061096,
        "body": "    ans = []\n    c = 97\n    for i in s:\n        while ord(i) > c or chr(c) not in s[:s.index(i)]:\n            c += 1\n        ans.append(chr(c))\n        c += 1\n    print(''.join(ans)) if ''.join(sorted(ans)) == 'abcdefghijklmnopqrstuvwxyz' else print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9870468974113464,
            0.9946160912513733,
            0.9928502440452576,
            0.9917894005775452,
            0.9879288077354431,
            0.9927117228507996,
            0.9954290986061096,
            0.9936649799346924,
            0.9943689107894897,
            0.9924875497817993,
            0.9937591552734375,
            0.9948611259460449,
            0.9937324523925781,
            0.993170976638794,
            0.9931136965751648,
            0.9911500215530396,
            0.9944286346435547,
            0.9935762286186218,
            0.9950401186943054,
            0.9946283102035522
        ]
    },
    "1833": {
        "similarity": 0.9959303140640259,
        "body": "import sys\nfrom functools import lru_cache\nmod = 10**9 + 7\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    @lru_cache(None)\n        if mask == 0: return 1\n        val = 0\n        for i in range(n):\n            if (mask >> i) & 1:\n                if a[i] % (i + 1) != 0: continue\n                val += dp(mask ^ (1 << i))\n                val %= mod\n        return val\n\n    res = 0\n    for i in range(1, n+1):\n        res += dp((1 << i) - 1)\n        res %= mod\n    print(res)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933552145957947,
            0.995408296585083,
            0.9922166466712952,
            0.9959303140640259,
            0.9953027367591858,
            0.99399334192276,
            0.9950641989707947,
            0.9938175678253174,
            0.9908435344696045,
            0.9949420094490051,
            0.9928025603294373,
            0.9941335916519165,
            0.9942759275436401,
            0.9956796765327454,
            0.9954842925071716,
            0.9954354166984558,
            0.9949662089347839,
            0.994687557220459,
            0.9942657947540283,
            0.9949949383735657
        ]
    },
    "2324": {
        "similarity": 0.9964393973350525,
        "body": "    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                if j > i:\n                    dp[i][j] = dp[i + 1][j - 1]\n                dp[i][j] += 1\n    result = [0] * (n + 1)\n    for k in range(1, n + 1):\n        count = 0\n        for i in range(n):\n            j = n - 1 - i\n            if i <= j and s[i] == s[j]:\n                count += dp[i][j]\n        result[k] = count\n    return ' '.join(map(str, result[:-1]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.996036946773529,
            0.995172917842865,
            0.9942443370819092,
            0.9964393973350525,
            0.9958136677742004,
            0.9934083819389343,
            0.9933300018310547,
            0.9957047700881958,
            0.9962285757064819,
            0.9948211312294006,
            0.9961110949516296,
            0.9955924153327942,
            0.9928820729255676,
            0.9949682354927063,
            0.9960407614707947,
            0.9960911273956299,
            0.9939360618591309,
            0.9940888285636902,
            0.994187593460083,
            0.9941413402557373
        ]
    },
    "2372": {
        "similarity": 0.9968452453613281,
        "body": "H, W = map(int, input().split())\nC_h, C_w = map(int, input().split())\nD_h, D_w = map(int, input().split())\n\nS = [list(input()) for _ in range(H)]\n\n    q = [(C_h, C_w)]\n    d = {(C_h, C_w): 0}\n    while q:\n        x, y = q.pop(0)\n        if (x, y) == (D_h, D_w):\n            return d[(x, y)] - 1\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1), (2, 0), (-2, 0), (0, 2), (0, -2),\n                       (3 if abs(x - D_h) <= 2 and abs(y - D_w) <= 2 else -3,\n                        3 if abs(x - D_h) <= 1 and y == D_w or abs(y - D_w) <= 1 and x == D_h else -3)]:\n            nx, ny = x + dx, y + dy\n            if 0 < nx <= H and 0 < ny <= W and S[nx - 1][ny - 1] == '.' and (nx, ny) not in d:\n                q.append((nx, ny))\n                d[(nx, ny)] = d[(x, y)] + 1\n    return -1\n\nprint(bfs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.995951235294342,
            0.9950965046882629,
            0.9943655133247375,
            0.9964083433151245,
            0.9960224628448486,
            0.990310788154602,
            0.9965367913246155,
            0.9964935779571533,
            0.993824303150177,
            0.9957867860794067,
            0.9959925413131714,
            0.9959185719490051,
            0.9965623617172241,
            0.9935492277145386,
            0.995349109172821,
            0.9955596923828125,
            0.9966164827346802,
            0.9968452453613281,
            0.9958035349845886,
            0.9945000410079956
        ]
    },
    "1984": {
        "similarity": 0.9972018003463745,
        "body": "n, m, k, w = map(int, input().split())\nlevels = []\nfor _ in range(k):\n    levels.append(input())\n\ncost = [[0 for _ in range(m)] for _ in range(n)]\nfor i in range(1, k):\n    diff = [[0 for _ in range(m)] for _ in range(n)]\n    for j in range(n):\n        for l in range(m):\n            if levels[i][j * m + l] != levels[0][j * m + l]:\n                diff[j][l] = 1\n    for j in range(1, i):\n        for l in range(n):\n            for o in range(m):\n                if diff[l][o] == 1 and levels[i][n * m + l + o] != levels[j][n * m + l + o]:\n                    diff[l][o] += 1\n    for j in range(n):\n        for l in range(m):\n            cost[i][l] = (diff[j][l] if diff[j][l] > 0 else 1) * w\n\norder = [i for i in range(1, k)]\nwhile len(order) > 1:\n    idx = order.index(min(order))\n    level_idx = order.pop(idx)\n    print(level_idx + 1, int(cost[level_idx].count(1) == n * m), end=' ')\n    if cost[level_idx].count(1) != n * m:\n        order.remove(0)\n\nprint()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969382286071777,
            0.9960488080978394,
            0.9972018003463745,
            0.9968921542167664,
            0.9954662322998047,
            0.9960622191429138,
            0.9949194192886353,
            0.9962078928947449,
            0.9964191913604736,
            0.9965758323669434,
            0.9964249134063721,
            0.9949421286582947,
            0.9953780174255371,
            0.9960771203041077,
            0.9969779849052429,
            0.9942070841789246,
            0.9960365295410156,
            0.9961764812469482,
            0.9922718405723572,
            0.9969159364700317
        ]
    },
    "1253": {
        "similarity": 0.9926232099533081,
        "body": "    s = sum(a)\n    neg = sum(x < 0 for x in a)\n    if k * 2 >= n:\n        return s\n    else:\n        return s - (k % 2) * 2 * min(neg, n - neg)\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904688000679016,
            0.9898050427436829,
            0.980668306350708,
            0.9895306825637817,
            0.9886480569839478,
            0.9898306131362915,
            0.9882557392120361,
            0.9895033836364746,
            0.9805328845977783,
            0.988112211227417,
            0.9876905679702759,
            0.9906262755393982,
            0.9881445169448853,
            0.9898384809494019,
            0.9598290324211121,
            0.9863960146903992,
            0.9908919334411621,
            0.9895714521408081,
            0.9926232099533081,
            0.9868896007537842
        ]
    },
    "523": {
        "similarity": 0.993927538394928,
        "body": "    n,m = map(int,input().split())\n    A = []\n    for _ in range(n):\n        s = input()\n        A.append(s)\n    A.sort(key=len)\n\n    ans1 = 0\n    ans2 = ''\n    for i in range(len(A)):\n        if len(A[i]) <= (n - i) * m:\n            if len(ans2) < len(A[i]):\n                ans1 += 2 * len(A[i])\n                ans2 = A[i] + A[i][::-1]\n        else:\n            break\n\n    print(len(ans2))\n    print(ans2)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9862385988235474,
            0.9878688454627991,
            0.9920551776885986,
            0.9908677339553833,
            0.9921519756317139,
            0.9918835163116455,
            0.9932111501693726,
            0.993489146232605,
            0.9918598532676697,
            0.9930142164230347,
            0.9903932809829712,
            0.9845887422561646,
            0.9927225708961487,
            0.9928179383277893,
            0.9879325032234192,
            0.9896664023399353,
            0.9934805631637573,
            0.993927538394928,
            0.984970211982727,
            0.9928016662597656
        ]
    },
    "2934": {
        "similarity": 0.9948180317878723,
        "body": "    if not b: return a\n    return gcd(b, a % b)\n\nmod = 10**9\n\nN = int(input())\nM = int(input())\n\nif N == 1:\n    print(M)\nelif N >= 3:\n    print(0)\nelse:\n    c1, c2, c3 = [0] * (N+1), [0] * (N+1), [0] * (N+1)\n    c1[0], c1[1], c2[0] = 1, 1, 1\n    for n in range(2, N+1):\n        c3[n-1] = c1[n-1]\n        c1[n] = sum(c2[:n])\n        for m in range(n, 0, -1):\n            c3[m-1] += (c1[m-1] * c2[n-m] + c2[m-1] * c1[n-m]) % mod\n    print(sum(c3) % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937989115715027,
            0.9798619151115417,
            0.9929922819137573,
            0.9919245839118958,
            0.9874751567840576,
            0.9874213337898254,
            0.9873803853988647,
            0.9915494322776794,
            0.9939805865287781,
            0.9934977293014526,
            0.9948112368583679,
            0.9908328652381897,
            0.9939600229263306,
            0.9948180317878723,
            0.9930375814437866,
            0.994347333908081,
            0.9947435259819031,
            0.9911421537399292,
            0.9947308301925659,
            0.9916666150093079
        ]
    },
    "1745": {
        "similarity": 0.9964466094970703,
        "body": "    if n < 5 or m < 5:\n        return 0\n    \n    ways = [[0] * m for _ in range(n)]\n    \n        return 0 <= x < n and 0 <= y < m and field[x][y] == '.'\n    \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and field[nx][ny] == '*':\n                neighbors.append((nx, ny))\n        return neighbors\n    \n        ways[x][y] += 1\n        neighbors = get_neighbors(x, y)\n        for nx, ny in neighbors:\n            if not ways[nx][ny]:\n                dfs(nx, ny)\n    \n        n_pipe, m_pipe = len(pipe), len(pipe[0])\n        for i in range(n_pipe - 1):\n            for j in range(m_pipe):\n                if pipe[i][j] == '*' and (pipe[i + 1][j] != '*' or not is_valid(i + 2, j)):\n                    return False\n                elif pipe[i][j] != '*' and (pipe[i + 1][j] == '*'):\n                    return False\n        \n        for i in range(n_pipe):\n            for j in range(m_pipe - 1):\n                if pipe[i][j] == '*' and (pipe[i][j + 1] != '*' or not is_valid(i, j + 2)):\n                    return False\n                elif pipe[i][j] != '*' and (pipe[i][j + 1] == '*'):\n                    return False\n        \n        # check border squares\n        for i in range(n_pipe):\n            if pipe[i][0] == '*':\n                if not is_valid(i, -1) or not is_valid(i, 1):\n                    return False\n            if pipe[i][-1] == '*':\n                if not is_valid(i, m_pipe - 2) or not is_valid(i, m_pipe):\n                    return False\n        \n        for j in range(m_pipe):\n            if pipe[0][j] == '*':\n                if not is_valid(-1, j) or not is_valid(1, j):\n                    return False\n            if pipe[-1][j] == '*':\n                if not is_valid(n_pipe - 2, j) or not is_valid(n_pipe, j):\n                    return False\n        \n        # check non-border squares\n        for i in range(1, n_pipe - 1):\n            for j in range(1, m_pipe - 1):\n                if pipe[i][j] == '*':\n                    if (not is_valid(i + 1, j) or not is_valid(i - 1, j)) and \\\n                       (not is_valid(i, j + 1) or not is_valid(i, j - 1)):\n                        return False\n        \n        return True\n    \n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and is_valid_pipe([[i], [j]]):\n                dfs(i, j)\n    \n    max_ways = 0\n    for row in ways:\n        max_ways = max(max_ways, max(row))\n    \n    return max_ways\n\n    n, m = map(int, input().split())\n    field = []\n    for _ in range(n):\n        field.append(list(input()))\n    print(count_ways(n, m, field))\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962331056594849,
            0.9962306618690491,
            0.9950175881385803,
            0.9953720569610596,
            0.9960795044898987,
            0.9946878552436829,
            0.9930995106697083,
            0.9955891370773315,
            0.9954882264137268,
            0.9956318736076355,
            0.9964466094970703,
            0.9947165250778198,
            0.9958978295326233,
            0.9959894418716431,
            0.995734691619873,
            0.9935938119888306,
            0.9956798553466797,
            0.9953438639640808,
            0.9961959719657898,
            0.9956454038619995
        ]
    },
    "1422": {
        "similarity": 0.9949393272399902,
        "body": "    a = [int(i) for i in s]\n    if len([i for i in a if i != 0]) < m:\n        return 'NO'\n    ans = []\n    left = right = 0\n    for i in range(m * 2 - 1):\n        if i % 2 == 0:\n            if right + a[i // 2] <= left:\n                return 'NO'\n            ans.append(a[i // 2])\n            left += a[i // 2]\n        else:\n            if left + a[(i - 1) // 2] <= right:\n                return 'NO'\n            ans.append(a[(i - 1) // 2])\n            right += a[(i - 1) // 2]\n    return 'YES\\n' + ' '.join(map(str, ans))\n\ns = input()\nm = int(input())\nprint(solve(s, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938633441925049,
            0.9934423565864563,
            0.993113100528717,
            0.9900516867637634,
            0.9906983971595764,
            0.9934260845184326,
            0.9939250946044922,
            0.9927036166191101,
            0.9842256307601929,
            0.9933634400367737,
            0.9924800395965576,
            0.9912607073783875,
            0.9925280213356018,
            0.9946459531784058,
            0.994612455368042,
            0.9945669770240784,
            0.9934567809104919,
            0.9949393272399902,
            0.9914776682853699,
            0.9945232272148132
        ]
    },
    "1763": {
        "similarity": 0.9931128621101379,
        "body": "    h = sorted(map(int, input().split()))\n    n = len(h)\n    target = min(h)\n    cost = 0\n    for i in range(n):\n        cost += (h[i] - target) * A + max(0, h[i] - target) * R\n        if i < n - 1:\n            cost += abs(h[i] - h[i+1]) * M\n    return cost\n\nprint(f(*map(int, input().split()), f(*map(int, input().split()))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907289147377014,
            0.9919597506523132,
            0.9931128621101379,
            0.9855336546897888,
            0.9896470308303833,
            0.9924076795578003,
            0.9794521331787109,
            0.9814592599868774,
            0.9919313192367554,
            0.9927915334701538,
            0.9916170239448547,
            0.9916096925735474,
            0.9891418814659119,
            0.981781542301178,
            0.9930126070976257,
            0.9919050335884094,
            0.9915030598640442,
            0.9928940534591675,
            0.986974835395813,
            0.991117000579834
        ]
    },
    "974": {
        "similarity": 0.9959260821342468,
        "body": "    n = int(input())\n    A = []\n    rem = [0] * (n + 1)\n    for _ in range(2 * n):\n        s, x = input().split()\n        x = int(x)\n        if s == \"add\":\n            A.append(x)\n            rem[x] += 1\n        else:\n            if not rem[x]:\n                ans = len(A) - sum(rem[1:x])\n                print(ans)\n                return\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959260821342468,
            0.9910493493080139,
            0.9947995543479919,
            0.994931697845459,
            0.9911047220230103,
            0.9945551156997681,
            0.9945275187492371,
            0.9952747821807861,
            0.9956797361373901,
            0.9919165372848511,
            0.9902512431144714,
            0.9950743317604065,
            0.9940165281295776,
            0.9925312399864197,
            0.9921138286590576,
            0.9933357238769531,
            0.9945090413093567,
            0.993808925151825,
            0.9926175475120544,
            0.9873580932617188
        ]
    },
    "2343": {
        "similarity": 0.9931925535202026,
        "body": "    return x.bit_length() - 1\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    if k > (n * n) % 2:\n        print('NO')\n    else:\n        print('YES', min(log2(2**n), k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924023151397705,
            0.9909478425979614,
            0.9901641011238098,
            0.9859157204627991,
            0.9913061261177063,
            0.9856369495391846,
            0.9924015402793884,
            0.9833695292472839,
            0.988185465335846,
            0.9911201000213623,
            0.991102397441864,
            0.9927619099617004,
            0.9882431030273438,
            0.9857963919639587,
            0.9931114912033081,
            0.9931925535202026,
            0.9855563640594482,
            0.9757890105247498,
            0.9927300214767456,
            0.9914798736572266
        ]
    },
    "627": {
        "similarity": 0.9945505857467651,
        "body": "    n = len(s)\n    max_i = 0\n    for i in range(1, n):\n        if s[i] < s[max_i]:\n            max_i = i\n    min_s = ''.join(sorted(s))\n    return ''.join([c for c in s if c == s[max_i]] + [c for c in (s[:max_i] + s[max_i+1:]) if c != ''])\n    n = int(input())\n    s = input()\n    print(f(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9879236817359924,
            0.9939159750938416,
            0.9933157563209534,
            0.993914783000946,
            0.9819989800453186,
            0.9931569695472717,
            0.9945505857467651,
            0.9933324456214905,
            0.9914125204086304,
            0.990207850933075,
            0.9927699565887451,
            0.9914700388908386,
            0.9925777912139893,
            0.9916060566902161,
            0.9925171732902527,
            0.9935573935508728,
            0.9936976432800293,
            0.9937625527381897,
            0.9859269857406616,
            0.991180419921875
        ]
    },
    "1655": {
        "similarity": 0.9955419301986694,
        "body": "    n = len(L)\n    dead = [0] * n\n    for i, l in enumerate(L):\n        for j in range(1, min(i + 1, l + 1)):\n            if not dead[j - 1]:\n                dead[j] = 1\n    return sum(dead)\n\nn = int(input())\nL = list(map(int, input().split()))\nprint(f(L))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948700666427612,
            0.9939746856689453,
            0.9931339621543884,
            0.9948055744171143,
            0.9920802116394043,
            0.9901058673858643,
            0.9943360686302185,
            0.9930349588394165,
            0.9919995665550232,
            0.9921572804450989,
            0.991463840007782,
            0.9953091144561768,
            0.9925145506858826,
            0.9955419301986694,
            0.9951277375221252,
            0.9929445385932922,
            0.995401918888092,
            0.9952191710472107,
            0.9944530129432678,
            0.9944010376930237
        ]
    },
    "2124": {
        "similarity": 0.9969066977500916,
        "body": "    n = int(input())\n    usernames = input().split()\n    m = int(input())\n    messages = [input() for _ in range(m)]\n    senders = []\n    for i, msg in enumerate(messages):\n        if msg.startswith(':'):\n            continue\n        username = msg.split(':')[0]\n        if username in senders or any(username.lower() == u.lower() for u in usernames):\n            return None\n        senders.append(username)\n    if len(senders) < m:\n        return None\n    ans = []\n    for i, msg in enumerate(messages):\n        if msg.startswith(':'):\n            ans.append('?:' + msg[2:])\n        else:\n            username = msg.split(':')[0]\n            ans.append(f'{senders[i]}:{msg[2:]}')\n    return ' '.join(ans)\n\nfor _ in range(int(input())):\n    print(solve() or 'Impossible')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956787824630737,
            0.9948300123214722,
            0.995122492313385,
            0.9922172427177429,
            0.9965208172798157,
            0.9954400658607483,
            0.9969066977500916,
            0.9963257312774658,
            0.9960740804672241,
            0.996475338935852,
            0.9943335652351379,
            0.9964891672134399,
            0.9959590435028076,
            0.9968329071998596,
            0.9943940043449402,
            0.9961961507797241,
            0.99626624584198,
            0.9957492351531982,
            0.9947138428688049,
            0.9963253736495972
        ]
    },
    "1093": {
        "similarity": 0.9962238669395447,
        "body": "n, m = map(int, input().split())\nprofile = [list(input()) for _ in range(n)]\n\nheights = []\nfor j in range(m):\n    max_h = 0\n    min_h = float('inf')\n    for i in range(n-1, -1, -1):\n        h = profile[i][j] == '*'\n        max_h = max(max_h, h)\n        if not i:\n            heights.append(max_h)\n            break\n        min_h = min(min_h, h)\n    else:\n        heights.append(0)\n\nasc_max = 0\ndesc_max = 0\nfor i in range(m-1):\n    asc_max = max(asc_max, heights[i+1] - heights[i])\n    desc_max = max(desc_max, heights[i] - heights[i+1])\n\nprint(max(asc_max, 0), max(desc_max, 0))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912699460983276,
            0.993236243724823,
            0.9960112571716309,
            0.9949719309806824,
            0.9953494668006897,
            0.995837390422821,
            0.9944899678230286,
            0.9948856830596924,
            0.9920207858085632,
            0.9957625865936279,
            0.9949987530708313,
            0.9949761629104614,
            0.9962238669395447,
            0.9918534159660339,
            0.9958196878433228,
            0.9947078227996826,
            0.9957574605941772,
            0.9908473491668701,
            0.9907870888710022,
            0.9943671822547913
        ]
    },
    "899": {
        "similarity": 0.9967839121818542,
        "body": "    N, M = map(int, input().split())\n    G = {}\n    for _ in range(M):\n        a, b, c = map(int, input().split())\n        if (a, b) not in G:\n            G[(a, b)] = c\n        else:\n            G[(a, b)] = min(G[(a, b)], c)\n    distance_matrix = [[float('inf')] * N for _ in range(N)]\n    for i in G:\n        a, b = i\n        distance_matrix[a-1][b-1] = G[i]\n        distance_matrix[b-1][a-1] = G[i]\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                if distance_matrix[i][k] + distance_matrix[k][j] < distance_matrix[i][j]:\n                    distance_matrix[i][j] = distance_matrix[i][k] + distance_matrix[k][j]\n    result = 0\n    for i in G:\n        a, b = i\n        if G[i] == distance_matrix[a-1][b-1]:\n            result += 1\n    print(M - result)",
        "result": "passed",
        "similarities": [
            0.9966273903846741,
            0.9964354634284973,
            0.9953503012657166,
            0.9932578206062317,
            0.9954017996788025,
            0.9962801933288574,
            0.9963852763175964,
            0.9936766624450684,
            0.9934166669845581,
            0.9958532452583313,
            0.9958457946777344,
            0.9957717061042786,
            0.996699869632721,
            0.9967839121818542,
            0.9953875541687012,
            0.9966000914573669,
            0.9960058331489563,
            0.9965535402297974,
            0.9942261576652527,
            0.9951095581054688
        ]
    },
    "551": {
        "similarity": 0.9956804513931274,
        "body": "    y.sort()\n    a = []\n    for i in range(n):\n        if not a or y[i] != a[-1]:\n            a.append(y[i])\n    return \"Yes\" if len(a) > 2 else \"No\"\n\nn = int(input())\ny = list(map(int,input().split()))\nprint(getAns(n,y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945510029792786,
            0.9944905638694763,
            0.9923164248466492,
            0.9926772713661194,
            0.9938627481460571,
            0.9931379556655884,
            0.9942871928215027,
            0.9953153729438782,
            0.9920281767845154,
            0.9956804513931274,
            0.9942269921302795,
            0.9947311878204346,
            0.9923314452171326,
            0.9938734173774719,
            0.9935571551322937,
            0.9937776327133179,
            0.9946243166923523,
            0.9929931163787842,
            0.9955735802650452,
            0.9933066368103027
        ]
    },
    "1772": {
        "similarity": 0.9937711954116821,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0, 0]\n    for i in a:\n        if i % 2 == 1:\n            c[0] += 1\n        else:\n            c[1] += 1\n    return min(c[0] // 2, c[1]) + (c[0] % 2 != 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910035729408264,
            0.9933168292045593,
            0.990891695022583,
            0.9937711954116821,
            0.9932833313941956,
            0.9874494671821594,
            0.9917486310005188,
            0.9788244366645813,
            0.9899132251739502,
            0.9908877015113831,
            0.9928833842277527,
            0.9872060418128967,
            0.9889181852340698,
            0.991686999797821,
            0.9921439290046692,
            0.9926810264587402,
            0.9866573810577393,
            0.9928988218307495,
            0.9800093770027161,
            0.9935709238052368
        ]
    },
    "1339": {
        "similarity": 0.9946333169937134,
        "body": "    n = int(input())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r, i + 1))\n    segments.sort(key=lambda x: (x[0], -x[1]))\n    maxr = -1\n    ans = -1\n    for i, (_, r, idx) in enumerate(segments):\n        if r > maxr:\n            maxr = r\n            ans = idx\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933449625968933,
            0.9938250184059143,
            0.9875568747520447,
            0.9914880990982056,
            0.9924246072769165,
            0.9902803301811218,
            0.9812563061714172,
            0.9924039244651794,
            0.9920573830604553,
            0.9946333169937134,
            0.9939466714859009,
            0.9885022044181824,
            0.9932688474655151,
            0.9943589568138123,
            0.9944218993186951,
            0.9928275942802429,
            0.9936965107917786,
            0.9931104779243469,
            0.9933102130889893,
            0.9941688179969788
        ]
    },
    "440": {
        "similarity": 0.9945153594017029,
        "body": "    vowels = \"aeiouy\"\n    i = 0\n    while i < n - 1:\n        if s[i] in vowels and s[i + 1] in vowels:\n            j = i\n            while j > 0 and s[j] not in vowels:\n                j -= 1\n            if j >= 0 and s[j] in vowels:\n                del s[j]\n                n -= 1\n                i = max(i - 1, 0)\n        i += 1\n    return \"\".join(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941868185997009,
            0.990464985370636,
            0.9892105460166931,
            0.9867274761199951,
            0.9913786053657532,
            0.9823861718177795,
            0.9926127195358276,
            0.9944158792495728,
            0.9942217469215393,
            0.9935902953147888,
            0.9943404197692871,
            0.9940968751907349,
            0.9945153594017029,
            0.9939330220222473,
            0.9940850138664246,
            0.9869633913040161,
            0.9940600991249084,
            0.989516019821167,
            0.9886407256126404,
            0.9944133758544922
        ]
    },
    "2801": {
        "similarity": 0.9969772696495056,
        "body": "from collections import deque\nimport sys\n\nn, m = map(int, input().split())\nc = list(map(float, input().split()))\ngraph = [[] for _ in range(n)]\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n\nmax_satisfaction = 0.0\nvisited = [False] * n\n\n    queue = deque([(0, 1)])\n    max_satisfaction = 0.0\n    satisfaction = [0.0] * n\n    visited = [False] * n\n    while queue:\n        node, cur_power = queue.popleft()\n        if not visited[node]:\n            visited[node] = True\n            max_satisfaction += c[node]\n            satisfaction[node] = cur_power * c[node]\n\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    queue.append((neighbor, min(cur_power + 1, n - 1)))\n    return max_satisfaction\n\nprint(bfs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947181344032288,
            0.9959316253662109,
            0.9962985515594482,
            0.9954434633255005,
            0.9969772696495056,
            0.9951964020729065,
            0.9958752989768982,
            0.9941295981407166,
            0.9922718405723572,
            0.9941809773445129,
            0.9951978921890259,
            0.9947861433029175,
            0.9962244629859924,
            0.9961973428726196,
            0.9951510429382324,
            0.9951079487800598,
            0.995932936668396,
            0.9938234090805054,
            0.9960488080978394,
            0.996496319770813
        ]
    },
    "2749": {
        "similarity": 0.9962329864501953,
        "body": "from collections import deque\n\nh, w = map(int, input().split())\nn = int(input())\na = list(map(int, input().split()))\n\nans = [[0] * w for _ in range(h)]\nfor i in range(n):\n    for j in range(a[i]):\n        ans[0][j] = i + 1\n\nq = deque()\nfor j in range(w - 1, a[0]):\n    q.append((0, j))\n\nwhile q:\n    x, y = q.popleft()\n    dx, dy = [x - 1, x + 1], [y - 1, y + 1]\n    for i, (nx, ny) in enumerate(zip(dx, dy)):\n        if 0 <= nx < h and ans[nx][ny] == 0:\n            q.append((nx, ny))\n            ans[nx][ny] = ans[x][y]\n\nfor r in range(1, h):\n    for c in range(w):\n        i = 0\n        while ans[r][c] == 0:\n            if i >= n or a[i] == 0:\n                break\n            ans[r][c] = i + 1\n            a[i] -= 1\n            i += 1\n\n    for c in range(w - 1, -1, -1):\n        while ans[r][c] == 0 and i >= n:\n            if a[i - 1] == 0:\n                break\n            ans[r][c] = i\n            a[i - 1] -= 1\n            i -= 1\n\nfor row in ans:\n    print(' '.join(map(str, row)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936265349388123,
            0.9954016804695129,
            0.9959597587585449,
            0.9960880279541016,
            0.9949977397918701,
            0.9952155947685242,
            0.9919521808624268,
            0.9951409101486206,
            0.9928171038627625,
            0.9948928356170654,
            0.9895826578140259,
            0.9962329864501953,
            0.9959729909896851,
            0.9934818744659424,
            0.9954060912132263,
            0.9951331615447998,
            0.9960727691650391,
            0.9928919076919556,
            0.9923205971717834,
            0.995227038860321
        ]
    },
    "2319": {
        "similarity": 0.9973787069320679,
        "body": "    if s == t: return 0\n    for i in range(len(s)):\n        if s[i:] + s[:i] == t:\n            return len(s) - i\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    t = input()\n    print(f(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924784302711487,
            0.9955989718437195,
            0.9973787069320679,
            0.9959778189659119,
            0.9952549338340759,
            0.9957275390625,
            0.9943057894706726,
            0.9971717000007629,
            0.9971659779548645,
            0.996769368648529,
            0.9956129193305969,
            0.9968486428260803,
            0.996464192867279,
            0.9962294697761536,
            0.9939731955528259,
            0.986964762210846,
            0.9964279532432556,
            0.997200608253479,
            0.9966257810592651,
            0.9968025088310242
        ]
    },
    "2121": {
        "similarity": 0.9971382021903992,
        "body": "    visited[v] = True\n    if v in memo:\n        return memo[v]\n    child_min = float('inf')\n    for u in graph[v]:\n        if not visited[u]:\n            child_min = min(child_min, dfs(u))\n    memo[v] = min(a[v], child_min)\n    return memo[v]\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nvisited = [False] * n\nmemo = {}\n\nfor i in range(n - 1):\n    u, v = map(int, input().split())\n    graph[u-1].append(v-1)\n    graph[v-1].append(u-1)\n\nans = float('inf')\nfor root in range(n):\n    visited = [False] * n\n    memo = {}\n    ans = min(ans, dfs(root))\n\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967513084411621,
            0.996772289276123,
            0.9962730407714844,
            0.9964023232460022,
            0.9949252605438232,
            0.9959527850151062,
            0.9967514872550964,
            0.9936838746070862,
            0.9966810941696167,
            0.9963366985321045,
            0.9970566630363464,
            0.9965622425079346,
            0.9971382021903992,
            0.9963760375976562,
            0.9970390796661377,
            0.9947721362113953,
            0.9960866570472717,
            0.9961856007575989,
            0.9953400492668152,
            0.9968339800834656
        ]
    },
    "2617": {
        "similarity": 0.9962877035140991,
        "body": "    if n % 2 == 1:\n        return -1\n    a = []\n    i = 0\n    while True:\n        n -= pow(2, i) * (pow(2, i) - 1)\n        if n < 0:\n            return -1\n        if n <= pow(2, i):\n            while n != 0:\n                a.append(pow(2, i) - 1)\n                n -= pow(2, i-1)\n            return len(a), *a[::-1]\n        i += 1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(*f(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942418336868286,
            0.9916630983352661,
            0.994784414768219,
            0.9957132935523987,
            0.9959646463394165,
            0.9944381713867188,
            0.9956514239311218,
            0.9909814596176147,
            0.9955888390541077,
            0.9923739433288574,
            0.992777407169342,
            0.9949632883071899,
            0.9922944903373718,
            0.9948071837425232,
            0.9929128289222717,
            0.9955087304115295,
            0.9960101246833801,
            0.9962877035140991,
            0.9945855736732483,
            0.9921367168426514
        ]
    },
    "175": {
        "similarity": 0.9956751465797424,
        "body": "a, b = map(int, input().split())\nwhile a > 0 and b > 0:\n    if a >= 2 * b:\n        a -= 2 * b\n    elif b >= 2 * a:\n        b -= 2 * a\n    else:\n        break\nprint(a, b)",
        "result": "timed out",
        "similarities": [
            0.9950419068336487,
            0.9955884218215942,
            0.9945698976516724,
            0.9933375120162964,
            0.9942336678504944,
            0.9949708580970764,
            0.9947851300239563,
            0.9955118894577026,
            0.9938081502914429,
            0.9955340027809143,
            0.9942336678504944,
            0.9956751465797424,
            0.9902022480964661,
            0.9952980875968933,
            0.9937886595726013,
            0.9949991106987,
            0.994964599609375,
            0.9948148131370544,
            0.9952881336212158,
            0.9935778379440308
        ]
    },
    "995": {
        "similarity": 0.9964865446090698,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    primes = []\n    isprime = [0] * 500001\n    for i in range(2, 500001):\n        if not isprime[i]:\n            for j in range(i*i, 500001, i):\n                isprime[j] = i\n    pset = set()\n    ans = [[0]*(n+1) for _ in range(n)]\n    curp = [[] for _ in range(n)]\n    for i in range(n):\n        cur = a[i]\n        j = i\n        while j < n and cur != 1:\n            if isprime[cur]:\n                pset.add(isprime[cur])\n                cur //= isprime[cur]\n            else:\n                curp[j].append(a[i])\n                break\n            j += 1\n        if cur == 1:\n            for k in range(j, i+1):\n                for c in curp[k]:\n                    pset.add(c)\n    pset = sorted(list(pset))\n    pind = {x:i for i,x in enumerate(pset)}\n    dp = [0]*(n+1)\n    ans[0][0] = 1\n    for i in range(n):\n        for c in curp[i]:\n            j = pind[c]\n            k = 1\n            while j < n:\n                if a[j] % (c*c) == 0:\n                    dp[k] += ans[i][j-1]\n                    k += 1\n                j += 1\n        for j in range(n):\n            ans[i+1][j] = dp[j]\n    print(*[ans[n][k] for k in range(1,n+1)])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963555932044983,
            0.9960941672325134,
            0.996337890625,
            0.9959945678710938,
            0.9931405782699585,
            0.9960901141166687,
            0.9962436556816101,
            0.9958263039588928,
            0.9920254945755005,
            0.9962941408157349,
            0.9963328838348389,
            0.9956589937210083,
            0.9906525015830994,
            0.9958322644233704,
            0.9928393959999084,
            0.9962204694747925,
            0.9961628317832947,
            0.9955580830574036,
            0.9964865446090698,
            0.9953651428222656
        ]
    },
    "582": {
        "similarity": 0.9957382082939148,
        "body": "import heapq\nfrom collections import defaultdict\n\nn = int(input())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nd = defaultdict(list)\nfor i in range(n):\n    d[a[i]].append((t[i], a[i]))\n\nh = []\nans = 0\nfor v in sorted(d.keys()):\n    for _, k in heapq.nsmallest(len(h), d[v]):\n        h.append(k)\n        ans += max(0, h[-1] - sum(a)) * (v - len(h) + 1)\n\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904211759567261,
            0.9954209923744202,
            0.9953780174255371,
            0.9905996918678284,
            0.9940615296363831,
            0.9930007457733154,
            0.9918838143348694,
            0.9949784874916077,
            0.9911167621612549,
            0.9944484233856201,
            0.992634654045105,
            0.9957382082939148,
            0.9935601949691772,
            0.9939661622047424,
            0.9950138926506042,
            0.9917279481887817,
            0.995296061038971,
            0.9953125715255737,
            0.9944631457328796,
            0.9952577352523804
        ]
    },
    "1402": {
        "similarity": 0.9970414042472839,
        "body": "M = 10**9 + 7\nn = int(input())\ns1 = input()\ns2 = input()\n\n    c1 = s1.count('?')\n    c2 = s2.count('?')\n    \n    for i in range(n):\n        if s1[i] == '?' and (i < n-1 and s2[i+1] != '?'):\n            return 0\n        if s2[i] == '?' and (i > 0 and s1[i-1] != '?'):\n            return 0\n    \n    for i in range(n):\n        v1, v2 = [0]*c1, [0]*c2\n        c1v, c2v = -1, -1\n        \n        for j in range(n):\n            if s1[j] == '?' and s2[j] != '?':\n                v1[v1.index(c2v)] += 1\n                c2v = (ord(s2[j]) - ord('0')) * 10**i + c2v\n            elif s2[j] == '?' and s1[j] != '?':\n                v2[v2.index(c1v)] += 1\n                c1v = (ord(s1[j]) - ord('0')) * 10**i + c1v\n            elif s1[j] != '?' and s2[j] != '?':\n                if (ord(s1[j]) - ord('0')) * 10**i < (ord(s2[j]) - ord('0')) * 10**i:\n                    return 0\n                if v1[v1.index(c2v)] > 0 or v2[v2.index(c1v)] > 0: \n                    return 1\n        \n        p = 0\n        for i in range(1, c1+1):\n            p = (p + v1[i-1] * (10**i - 1)) % M\n        if c1v != -1:\n            p = (p + (c1v+1) * (10**c1) - 1) % M\n\n        q = 0\n        for i in range(1, c2+1):\n            q = (q + v2[i-1] * (10**i - 1)) % M\n        if c1v != -1:\n            q = (q + (c1v+1) * (10**c2) - 1) % M\n        \n        p *= q\n        return p % M\n\nprint(count())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958669543266296,
            0.9970414042472839,
            0.9944425225257874,
            0.9966506958007812,
            0.9965729117393494,
            0.9961565732955933,
            0.9969411492347717,
            0.9966728687286377,
            0.996848464012146,
            0.9955166578292847,
            0.9960702657699585,
            0.9954591989517212,
            0.9962589144706726,
            0.9942243695259094,
            0.9970338940620422,
            0.9964828491210938,
            0.9963041543960571,
            0.996568500995636,
            0.9955438375473022,
            0.9967069029808044
        ]
    },
    "1141": {
        "similarity": 0.9969482421875,
        "body": "    n, m = map(int, input().split())\n    s = list(input())\n\n    for _ in range(m):\n        l, r, c1, c2 = input().split()\n        l, r = int(l) - 1, int(r) - 1\n        for i in range(l, r + 1):\n            if s[i] == c1:\n                s[i] = c2\n\n    print(''.join(s))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962668418884277,
            0.9963001608848572,
            0.9930421113967896,
            0.9961146116256714,
            0.9964526295661926,
            0.996555745601654,
            0.996429443359375,
            0.9967739582061768,
            0.9964655637741089,
            0.995505690574646,
            0.9963467121124268,
            0.9922003746032715,
            0.9961423277854919,
            0.991398274898529,
            0.9963549375534058,
            0.9969482421875,
            0.9958925843238831,
            0.9954378008842468,
            0.996555745601654,
            0.9963641166687012
        ]
    },
    "2836": {
        "similarity": 0.9942241311073303,
        "body": "    n = int(input())\n    boys = list(map(int, input().split()))\n    a, b = map(int, input().split())\n    l = 0\n    while (a + l) % 2 == 0:\n        l += 1\n    r = 0\n    while (b - r) % 2 != 0:\n        r += 1\n    ans = -1\n    for x in range(a + l, b - r + 1, 2):\n        d = min(abs(x - y) for y in boys)\n        if d > abs(ans - boys[0]):\n            ans = x\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.99162757396698,
            0.9921588897705078,
            0.9942241311073303,
            0.992209792137146,
            0.9927101135253906,
            0.9903219938278198,
            0.9925017356872559,
            0.9881425499916077,
            0.99054354429245,
            0.9937959313392639,
            0.9925596117973328,
            0.9907636046409607,
            0.9932757019996643,
            0.991582989692688,
            0.9918239116668701,
            0.9933706521987915,
            0.9920526146888733,
            0.9866073131561279,
            0.993430495262146,
            0.992741048336029
        ]
    },
    "1109": {
        "similarity": 0.9920439720153809,
        "body": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [0] * 2\nfor x in a:\n    b[x-1] += n // k\nc = 0\nfor i in range(2):\n    c += max(b[i] % (n//k) - len(a)% (n//k), 0)\nprint(c)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911981821060181,
            0.9861195087432861,
            0.9901398420333862,
            0.9920439720153809,
            0.9807156920433044,
            0.9916602969169617,
            0.9870468974113464,
            0.9902548789978027,
            0.971638560295105,
            0.9887231588363647,
            0.9813358187675476,
            0.9865867495536804,
            0.9907941222190857,
            0.9853773713111877,
            0.9900194406509399,
            0.9911755323410034,
            0.9912750124931335,
            0.9895029664039612,
            0.9904841184616089,
            0.9903978109359741
        ]
    },
    "2125": {
        "similarity": 0.9955492615699768,
        "body": "import sys\n\nn, m = map(int, input().split())\ngrid = [list(input()) for _ in range(n)]\n\n    if not (0 <= i < n and 0 <= j < m) or not (0 <= k1 < i+1 and 0 <= k2 < j+1):\n        return False\n    for x in range(k1, k2+1):\n        if grid[x][j] != col1:\n            return False\n    for y in range(k1, k2+1):\n        if grid[i-y][y] != col2:\n            return False\n    if col1 == col2:\n        return False\n    return True\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        seen = set()\n        for k1 in range(1, n-i+2):\n            for k2 in range(k1-1, min(j+1, m-k1+2)):\n                col1 = grid[i][j]\n                if (col1, k1, k2) not in seen:\n                    count += 1\n                    seen.add((col1, k1, k2))\nprint(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945040345191956,
            0.9935445189476013,
            0.9922541379928589,
            0.9940211772918701,
            0.9944851398468018,
            0.9942594766616821,
            0.9919204711914062,
            0.9934903383255005,
            0.9940148591995239,
            0.9917279481887817,
            0.9938517212867737,
            0.9955492615699768,
            0.9942613244056702,
            0.9935625791549683,
            0.9950417280197144,
            0.9941532611846924,
            0.9949819445610046,
            0.9952404499053955,
            0.9946419596672058,
            0.9911926984786987
        ]
    },
    "1746": {
        "similarity": 0.9962455630302429,
        "body": "    if len(tree[parent]) < 3:\n        return False\n    for child in tree[parent]:\n        if not (child != 1 or all(child2 != 1 for child2 in tree[child])):\n            continue\n        if not count_children(child, parent, tree):\n            return False\n    return True\n\n    tree = [[] for _ in range(n + 1)]\n    for p, c in edges:\n        tree[p].append(c)\n    if count_children(1, -1, tree):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nn = int(input())\nedges = []\nfor i in range(n - 1):\n    p = int(input()) - 1\n    edges.append((p, i + 2))\nprint(is_spruce(n, edges))",
        "result": "failed: testcase 0",
        "similarities": [
            0.988569974899292,
            0.9927376508712769,
            0.9920166730880737,
            0.9962366819381714,
            0.9947813749313354,
            0.9956480264663696,
            0.9951959252357483,
            0.9946395754814148,
            0.9939071536064148,
            0.9962157011032104,
            0.9929265379905701,
            0.9956293702125549,
            0.9962455630302429,
            0.9961196780204773,
            0.9958056211471558,
            0.9936974048614502,
            0.9960821866989136,
            0.9905896782875061,
            0.9959738850593567,
            0.9919089078903198
        ]
    },
    "1294": {
        "similarity": 0.9951770305633545,
        "body": "    d = {}\n    for i, c in enumerate(s):\n        if s[i + 1] == c and c not in d:\n            return ''.join(sorted([x for x in d.keys()] + [c]))\n        elif s[i + 1] != c or (s[i + 2] == c and c not in d):\n            d[c] = None\n    return ''.join(sorted(d.keys()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935216307640076,
            0.9932682514190674,
            0.9910690188407898,
            0.9930760264396667,
            0.9944074749946594,
            0.9923449158668518,
            0.9920017719268799,
            0.9945544004440308,
            0.9913825988769531,
            0.9895327687263489,
            0.9945772886276245,
            0.9939145445823669,
            0.9927428364753723,
            0.9937905073165894,
            0.9945287108421326,
            0.9951770305633545,
            0.9943559765815735,
            0.993665874004364,
            0.9918939471244812,
            0.9921107888221741
        ]
    },
    "1159": {
        "similarity": 0.997735857963562,
        "body": "    if x <= 1: return False\n    for i in range(2, int(x**0.5) + 1):\n        if not x % i: return False\n    return True\n\nn = int(input())\nm = n*(n-1)//2\nfor M in range(m, 1, -1):\n    if is_prime(M): break\n\nedges = []\ndegrees = [0] * (n+1)\nfor i in range(1, n+1):\n    prime_degree = False\n    while not prime_degree:\n        u = min(i, n-i+1)\n        for j in range(1, n+1):\n            if i != j and degrees[j] < M - 1:\n                v = min(j, n-j+1)\n                edges.append((u,v))\n                degrees[i] += 1\n                degrees[j] += 1\n                prime_degree = (is_prime(degrees[i]) or is_prime(degrees[j]))\n                if prime_degree: break\n\n    if not prime_degree:\n        continue\n    if M == sum(degrees) and all(is_prime(x) for x in degrees):\n        print(M)\n        for u, v in edges: print(u, v)\n        exit()\n\nprint(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971373677253723,
            0.9958140850067139,
            0.9975486397743225,
            0.9970559477806091,
            0.9963467121124268,
            0.9971897602081299,
            0.9972331523895264,
            0.9974254965782166,
            0.9975019693374634,
            0.9966030120849609,
            0.996952474117279,
            0.9949541687965393,
            0.9972507357597351,
            0.9972078204154968,
            0.997441828250885,
            0.997735857963562,
            0.9966630339622498,
            0.9973864555358887,
            0.9976219534873962,
            0.9975257515907288
        ]
    },
    "2025": {
        "similarity": 0.9944480061531067,
        "body": "    if n < 4: return -1\n    res = 0\n    while n % 2 == 0:\n        n //= 2; res += 1\n    c, m = divmod(n, 3)\n    if m > 0 or (c <= 0 and c != 1): res += max(c, m) + 1\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944480061531067,
            0.9932467937469482,
            0.9903609752655029,
            0.990477442741394,
            0.9914067983627319,
            0.992931067943573,
            0.9926986694335938,
            0.9926490783691406,
            0.9910794496536255,
            0.9911940693855286,
            0.9905609488487244,
            0.9917357563972473,
            0.992992103099823,
            0.9940163493156433,
            0.9932475686073303,
            0.9845129251480103,
            0.9919137358665466,
            0.9870864748954773,
            0.9893384575843811,
            0.9855912923812866
        ]
    },
    "1429": {
        "similarity": 0.9954409599304199,
        "body": "    N = len(S)\n    counter = [[0 for _ in range(4)] for _ in range(N + 1)]\n    dp = [0] * (N + 1)\n    ans = 0\n    for i in range(1, N + 1):\n        for c in \"ATCG\":\n            if S[i - 1] == c:\n                counter[i][ord(c) - ord('A')] += 1\n        cur = 0\n        for j in range(4):\n            cur += min(counter[i][j], dp[i - 1])\n        ans += max(dp[i - 1], cur)\n        dp[i] = max(cur, dp[i - 1])\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939607381820679,
            0.9912205934524536,
            0.9925770163536072,
            0.994269847869873,
            0.9925295114517212,
            0.9926500916481018,
            0.99428790807724,
            0.9934130311012268,
            0.9938348531723022,
            0.9897341728210449,
            0.9942576885223389,
            0.9954409599304199,
            0.9922041893005371,
            0.9939926862716675,
            0.9900203347206116,
            0.9953959584236145,
            0.9944546222686768,
            0.9949473142623901,
            0.995133638381958,
            0.9921700358390808
        ]
    },
    "1950": {
        "similarity": 0.993961751461029,
        "body": "    if n == 1: return a[0]\n    ans = f(n-1, sorted(a))\n    for s in range(2, min(4, n)+1):\n        t = [0]*n\n        i = 0\n        while sum(t) < sum(a):\n            x = (a[i] + t[i]) // s\n            t[i] += x * s\n            a[i] -= x * s\n            i = (i + 1) % n\n        ans = min(ans, a[0] + f(n, t))\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930101037025452,
            0.9928972125053406,
            0.9932991862297058,
            0.9899988770484924,
            0.9923425912857056,
            0.9932957887649536,
            0.989743173122406,
            0.9907426238059998,
            0.9862590432167053,
            0.9884851574897766,
            0.9872461557388306,
            0.9801647663116455,
            0.9902089834213257,
            0.993961751461029,
            0.9909799695014954,
            0.9934769868850708,
            0.990253746509552,
            0.993921160697937,
            0.9931522011756897,
            0.9877954125404358
        ]
    },
    "631": {
        "similarity": 0.9947913289070129,
        "body": "    a.sort(reverse=True)\n    s = 0\n    for i in range(len(a)):\n        s += sum([a[j] / (j + 1) for j in range(i, len(a))])\n    return \"YES\" if s == m else \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(f(a, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937761425971985,
            0.9946369528770447,
            0.9909082055091858,
            0.9764901399612427,
            0.9927452802658081,
            0.9929895997047424,
            0.9942905902862549,
            0.9926500916481018,
            0.9846124053001404,
            0.9936487078666687,
            0.994042158126831,
            0.9916485548019409,
            0.9937777519226074,
            0.9925647377967834,
            0.9906435608863831,
            0.9938172698020935,
            0.9932500123977661,
            0.9947913289070129,
            0.9906255006790161,
            0.9924103617668152
        ]
    },
    "2480": {
        "similarity": 0.997262179851532,
        "body": "    N = len(A)\n    ans = 0\n    for i in range(N):\n        seen = dict()\n        s = 0\n        for j in range(i, N):\n            s += A[j]\n            r = s % K\n            if (r == 0 and j - i + 1 > 0) or (j - i + 1 == r):\n                ans += 1\n            seen[r] = seen.get(r, 0) + 1\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.996150553226471,
            0.9962086081504822,
            0.9961965680122375,
            0.9972248077392578,
            0.9930764436721802,
            0.9949389100074768,
            0.997262179851532,
            0.9968154430389404,
            0.9956487417221069,
            0.9970037341117859,
            0.9932576417922974,
            0.995387613773346,
            0.9970540404319763,
            0.9966229200363159,
            0.995554506778717,
            0.996488094329834,
            0.9965609312057495,
            0.9947132468223572,
            0.9934482574462891,
            0.9957047700881958
        ]
    },
    "2363": {
        "similarity": 0.9970588684082031,
        "body": "    if a == b: return 0\n    ans = 0\n    while b > a:\n        b -= max(b - a, 1)\n        ans += 1\n    return ans\n\nn = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split())\n    print(f(x, y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952031373977661,
            0.9961082339286804,
            0.9959006309509277,
            0.9913085103034973,
            0.9965608716011047,
            0.9970588684082031,
            0.9930645823478699,
            0.9943728446960449,
            0.9962172508239746,
            0.996415376663208,
            0.9949977397918701,
            0.994951069355011,
            0.9967803955078125,
            0.9965001344680786,
            0.9959961771965027,
            0.9848113656044006,
            0.9965086579322815,
            0.9966612458229065,
            0.9964821338653564,
            0.9958218932151794
        ]
    },
    "909": {
        "similarity": 0.9941321015357971,
        "body": "    return max(max(a + b * c, a * (b + c)), max(b * (a + c), a * b * c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.992753267288208,
            0.9890189170837402,
            0.9937886595726013,
            0.9879832863807678,
            0.9941321015357971,
            0.988794207572937,
            0.9941096901893616,
            0.9940241575241089,
            0.99359130859375,
            0.9928255677223206,
            0.9923235177993774,
            0.9940081238746643,
            0.9938041567802429,
            0.9904777407646179,
            0.9923782348632812,
            0.9941189289093018,
            0.9938621520996094,
            0.988734781742096,
            0.9885343313217163,
            0.9877285361289978
        ]
    },
    "154": {
        "similarity": 0.9949202537536621,
        "body": "    if n == 0:\n        return 1\n    if n < 0 or m <= 0:\n        return 0\n    c = [1]\n    for i in range(1, m + 1):\n        s = 0\n        for j in range(i, m + 1):\n            s += c[j - i] * c[j - 1]\n            s %= mod\n        c.append(s)\n    return c[m]\n\nmod = 998244353\nn = int(input())\nprint(f(n // 2 + 1, (n + 3) // 2) if n % 2 == 0 else f((n + 1) // 2, (n + 4) // 2))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947676658630371,
            0.9901881217956543,
            0.9936088919639587,
            0.9946516752243042,
            0.9943861961364746,
            0.994541585445404,
            0.9944056272506714,
            0.9939157366752625,
            0.9945864677429199,
            0.9940800070762634,
            0.9931646585464478,
            0.9949202537536621,
            0.9870191216468811,
            0.9936637878417969,
            0.9940974712371826,
            0.9947923421859741,
            0.9854477643966675,
            0.9922270774841309,
            0.9948469400405884,
            0.9905120730400085
        ]
    },
    "39": {
        "similarity": 0.9969170093536377,
        "body": "    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                continue\n            max_len = max(max_len, len(substring))\n    return max_len",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967572093009949,
            0.9936630129814148,
            0.9956042766571045,
            0.9969087243080139,
            0.9946176409721375,
            0.9956358075141907,
            0.9969170093536377,
            0.9924071431159973,
            0.9959244132041931,
            0.9962626099586487,
            0.996562659740448,
            0.9947829246520996,
            0.9952690005302429,
            0.996562659740448,
            0.9947160482406616,
            0.995721697807312,
            0.9933368563652039,
            0.9953166842460632,
            0.9962301850318909,
            0.992770254611969
        ]
    },
    "1885": {
        "similarity": 0.9919682741165161,
        "body": "    return 1 if r == 0 or n == r else nCr(n-1, r-1) + nCr(n-1, r)\n\nn = int(input())\nresult = 0\nfor i in range(5, min(n+1,8)):\n    result += nCr(n, i)\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9853955507278442,
            0.9867756366729736,
            0.987544596195221,
            0.9870737195014954,
            0.9899458885192871,
            0.9919682741165161,
            0.9905913472175598,
            0.989072322845459,
            0.9874908924102783,
            0.9864491820335388,
            0.9900744557380676,
            0.9880432486534119,
            0.9897508025169373,
            0.981320321559906,
            0.9876453876495361,
            0.9744935631752014,
            0.9868822693824768,
            0.9872905611991882,
            0.991194486618042,
            0.9912393689155579
        ]
    },
    "1180": {
        "similarity": 0.9950442910194397,
        "body": "    MOD = 10**9 + 7\n    if n == 0 or k > n: return 0\n    cnt = [0] * (n+1)\n    for i in range(1, n): \n        if s[i] != '0': \n            cnt[i] = int(s[i])\n        else:\n            cnt[i] = cnt[i-1]\n    ans = sum(cnt[n-i] if i <= k else 0 for i in range(n+1))\n    return (ans % MOD)\n\nn, k = map(int, input().split())\ns = input()\nprint(calc(n, k, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9874554872512817,
            0.9945120811462402,
            0.9943498373031616,
            0.9908106923103333,
            0.9911585450172424,
            0.9946998953819275,
            0.9909048676490784,
            0.9936687350273132,
            0.9924017190933228,
            0.9930679202079773,
            0.994651198387146,
            0.9903228282928467,
            0.9914628863334656,
            0.9950442910194397,
            0.9904853701591492,
            0.990985095500946,
            0.9904073476791382,
            0.9947807192802429,
            0.9928972125053406,
            0.9928714632987976
        ]
    },
    "1856": {
        "similarity": 0.9946459531784058,
        "body": "    n = int(input())\n    s = []\n    for _ in range(n):\n        s.append(set(input()))\n    s.sort(key=len, reverse=True)\n    ans = 0\n    for i in range(len(s)):\n        flag = False\n        for j in range(i):\n            if not s[i].isdisjoint(s[j]):\n                flag = True\n                break\n        if flag:\n            continue\n        ans += 1\n        for k in range(n):\n            s[k] &= s[i]\n    return ans\n\nprint(count_passwords())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9895411133766174,
            0.9946369528770447,
            0.9941350817680359,
            0.9816103577613831,
            0.989296555519104,
            0.9915633201599121,
            0.9928637146949768,
            0.9939068555831909,
            0.993121325969696,
            0.9860508441925049,
            0.9933484792709351,
            0.9940727949142456,
            0.9866830110549927,
            0.9946459531784058,
            0.9926823377609253,
            0.9938861727714539,
            0.9903171062469482,
            0.9906622171401978,
            0.9900516867637634,
            0.9887771606445312
        ]
    },
    "522": {
        "similarity": 0.9957900047302246,
        "body": "    m = pow(c, mod, mod)\n    s = 1\n    for i in range(4, n + 1):\n        s = (s * fprev3[i - 4] % mod) * m % mod\n    return s\n\nmod = 10 ** 9 + 7\nn, c, f1, f2, f3 = map(int, input().split())\nprint(f(n, c, {i: val for i in range(1, n + 1)} if n <= 3 else {1: f1, 2: f2, 3: f3}))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930227398872375,
            0.9929708242416382,
            0.991163969039917,
            0.9950290322303772,
            0.9902185201644897,
            0.9909602999687195,
            0.9931401014328003,
            0.9945507049560547,
            0.9954928159713745,
            0.9934049248695374,
            0.9948499798774719,
            0.9933770895004272,
            0.9940361380577087,
            0.9916755557060242,
            0.9939252138137817,
            0.9927904009819031,
            0.9928135275840759,
            0.9926904439926147,
            0.9957900047302246,
            0.9927085041999817
        ]
    },
    "1719": {
        "similarity": 0.9937585592269897,
        "body": "    MOD = 10**9 + 7\n    M = [[0]*(N+1) for _ in range(4)]\n    M[0][0] = 1\n    for n in range(1, N+1):\n        for i in range(4):\n            if i == 2: continue\n            M[i][n] += M[i][n-1]*3 % MOD\n            M[i][n] %= MOD\n            M[(i+1)%4][n] += M[i][n-1]\n            M[(i+1)%4][n] %= MOD\n    return sum(M[0][N:i+1] for i in range(4)) % MOD",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937585592269897,
            0.9903279542922974,
            0.992119550704956,
            0.9914271831512451,
            0.987955629825592,
            0.9930970072746277,
            0.9900447726249695,
            0.9895963072776794,
            0.9920475482940674,
            0.9906325340270996,
            0.9894372820854187,
            0.9902339577674866,
            0.9926550984382629,
            0.9930148124694824,
            0.9896435141563416,
            0.9913787841796875,
            0.993583083152771,
            0.9777651429176331,
            0.9885233640670776,
            0.9909007549285889
        ]
    },
    "1842": {
        "similarity": 0.9970399141311646,
        "body": "import math\n\na, b, c = map(float, input().split())\nx1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\nx2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\nprint(max(x1, x2))\nprint(min(x1, x2))",
        "result": "passed",
        "similarities": [
            0.9968464374542236,
            0.9946483969688416,
            0.9966254234313965,
            0.9942941069602966,
            0.9960200786590576,
            0.9965079426765442,
            0.9967291951179504,
            0.9969728589057922,
            0.9966464638710022,
            0.9944116473197937,
            0.9963161945343018,
            0.9970399141311646,
            0.9942761659622192,
            0.9966834187507629,
            0.9969255328178406,
            0.9925296306610107,
            0.9969223737716675,
            0.9969775676727295,
            0.9950156807899475,
            0.9960200786590576
        ]
    },
    "806": {
        "similarity": 0.993628978729248,
        "body": "mod = 10**9 + 7\nn, l, r = map(int, input().split())\nif (r - l) % 3 == 0:\n    if (r - l) // 3 < n:\n        print(0)\n        exit()\n        if i >= j:\n            return 1\n        if i * 3 + 2 > r or i * 3 <= l:\n            return 0\n        return (dp(i + 1, j) + dp(i - 1, j) + dp(i, j - 1)) % mod\n    print(dp(l, r))\nelse:\n        if i < 0 or i * 3 > r or i * 3 + 2 <= l:\n            return 0\n        return (dp0(i - 1) + dp1(i - 1)) % mod\n\n        if i < 0 or i * 3 + 1 > r or i * 3 <= l:\n            return 0\n        return (dp0(i - 1) + dp1(i - 1) + dp2(i - 1)) % mod\n\n        if i < 0 or i * 3 >= r or i * 3 + 2 <= l:\n            return 0\n        return dp2(i - 1)\n\n    print((dp1(n - 1) + dp2(n - 1)) % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9871106743812561,
            0.9861460328102112,
            0.9912461042404175,
            0.991866946220398,
            0.9936119914054871,
            0.9909029603004456,
            0.9936152100563049,
            0.9917196035385132,
            0.987888514995575,
            0.9930097460746765,
            0.9917680621147156,
            0.9925848245620728,
            0.993628978729248,
            0.9932516813278198,
            0.9871017336845398,
            0.993554949760437,
            0.9906365275382996,
            0.992895245552063,
            0.9923525452613831,
            0.9837194681167603
        ]
    },
    "365": {
        "similarity": 0.9948068261146545,
        "body": "    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        return 'YES' if a[0] == x else 'NO'\n    prev_len = 0\n    for seg in a:\n        if prev_len + seg > x:\n            return 'NO'\n        prev_len += seg\n    return 'NO' if (x - prev_len) % 2 != 0 else 'YES'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913202524185181,
            0.9904159903526306,
            0.9947428703308105,
            0.9925186038017273,
            0.9948068261146545,
            0.9897685050964355,
            0.9894469380378723,
            0.9906211495399475,
            0.992476224899292,
            0.992547869682312,
            0.9931678771972656,
            0.9938589334487915,
            0.9872639179229736,
            0.9921066761016846,
            0.9933853149414062,
            0.9905843138694763,
            0.9911772012710571,
            0.9922214150428772,
            0.992827296257019,
            0.9941027760505676
        ]
    },
    "1158": {
        "similarity": 0.995339572429657,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_count = 0\n    for i in set(a):\n        count = a.count(i)\n        max_count = max(max_count, count)\n    return (n - max_count * k) // k",
        "result": "failed: testcase 0",
        "similarities": [
            0.9863413572311401,
            0.9937348961830139,
            0.995265781879425,
            0.9926782846450806,
            0.9948636889457703,
            0.9938260316848755,
            0.9934399127960205,
            0.9793574810028076,
            0.9944707155227661,
            0.9946184754371643,
            0.9935635924339294,
            0.9950326681137085,
            0.9947735667228699,
            0.9941020607948303,
            0.9881125092506409,
            0.9945703148841858,
            0.9923017621040344,
            0.9894850850105286,
            0.9942414164543152,
            0.995339572429657
        ]
    },
    "33": {
        "similarity": 0.9936954379081726,
        "body": "    a1, b1, a2, b2, L, R = map(int, input().split())\n    count = 0\n    for d in range((R - L) // (a1 - a2) + 1):\n        k = d * (a1 - a2) + a2\n        if k > R:\n            break\n        l = (L - b1 + k - b2) // (a1 - a2)\n        u = (R - b1 + k - b2) // (a1 - a2)\n        for i in range(l, u+1):\n            count += 1 if i*(a1-a2)+a2+b2 == L and i*(a1-a2)+a2+b2 <= R else 0\n    print(count)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993628978729248,
            0.9928207397460938,
            0.9929106831550598,
            0.9936954379081726,
            0.9903379678726196,
            0.9916620850563049,
            0.9918208122253418,
            0.9904457926750183,
            0.9879414439201355,
            0.9873422384262085,
            0.9908721446990967,
            0.9887514710426331,
            0.9918497800827026,
            0.9922158122062683,
            0.9934128522872925,
            0.9934713244438171,
            0.9936363697052002,
            0.9839628338813782,
            0.9911109805107117,
            0.9927309155464172
        ]
    },
    "2498": {
        "similarity": 0.9962573051452637,
        "body": "        while b: a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nm = 1\nfor i in A:\n    m = lcm(m, i)\ncnt = 0\nfor i in range(1, M + 1):\n    for j in A:\n        if not (i % j == 0 and 2 * i // j <= M):\n            break\n    else: cnt += 1\nprint(cnt)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954307079315186,
            0.9916294813156128,
            0.9960949420928955,
            0.9953401684761047,
            0.993599534034729,
            0.9955810904502869,
            0.9944902062416077,
            0.9933012127876282,
            0.9938625693321228,
            0.9958446025848389,
            0.990409255027771,
            0.9956076741218567,
            0.9858003854751587,
            0.9962573051452637,
            0.991968035697937,
            0.9946618676185608,
            0.9921007752418518,
            0.9939085245132446,
            0.9946853518486023,
            0.9957715272903442
        ]
    },
    "2309": {
        "similarity": 0.9956601858139038,
        "body": "    return sum(1 for char in word if char in 'aeiou')\n\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            return word[i]\n\n    pairs = {}\n    for word in words:\n        vcount = count_vowels(word)\n        l vowel = last_vowel(word)\n        if (vcount, l vowel) not in pairs:\n            pairs[(vcount, l vowel)] = []\n        pairs[(vcount, l vowel)].append(word)\n    return pairs\n\n    pair_counts = {}\n    for pair, words in find_pairs(words).items():\n        pair_counts[pair] = len(words)\n\n    max_count = 0\n    lyric_words = []\n\n        nonlocal max_count, lyric_words\n        if count_vowels(pair[0]) == count_vowels(pair[1]):\n            if last_vowel(used_words[0]) == pair[1] and last_vowel(used_words[1]) == pair[1]:\n                lyric_words.append((used_words[0], used_words[1]))\n                max_count += 1\n        for word in find_pairs([word for word in words if word not in used_words])[pair][::-1]:\n            new_used_words = tuple(sorted(word + used_words, key=count_vowels))\n            dfs(pair, new_used_words)\n\n    for pair in pair_counts:\n        dfs(pair, ())\n\n    return max_count, lyric_words",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939303994178772,
            0.9954202771186829,
            0.9949921369552612,
            0.9946090579032898,
            0.9942395091056824,
            0.9944118857383728,
            0.9956601858139038,
            0.9949750304222107,
            0.9954221844673157,
            0.993238627910614,
            0.9952648878097534,
            0.974179744720459,
            0.9944100975990295,
            0.9949427247047424,
            0.9947413206100464,
            0.9952635765075684,
            0.9937215447425842,
            0.9953688383102417,
            0.994770348072052,
            0.995064377784729
        ]
    },
    "1326": {
        "similarity": 0.9982092976570129,
        "body": "    count = 0\n    for i in range(1, int(x**0.5) + 1):\n        if x % i == 0:\n            count += 2\n        if i * i == x:\n            count -= 1\n    return count\n\nN = int(input())\nans = 0\nfor k in range(1, N+1):\n    ans += k * f(k)\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973775744438171,
            0.9946017265319824,
            0.9979116320610046,
            0.9968254566192627,
            0.9973480105400085,
            0.9979282021522522,
            0.9980815052986145,
            0.9982092976570129,
            0.9976289868354797,
            0.9978430867195129,
            0.9965063333511353,
            0.9968867897987366,
            0.9978355765342712,
            0.9968672394752502,
            0.9939695596694946,
            0.9979625344276428,
            0.9968366026878357,
            0.9979077577590942,
            0.9979581236839294,
            0.9965724945068359
        ]
    },
    "2950": {
        "similarity": 0.9928860068321228,
        "body": "    n = int(input())\n    h = list(map(int, input().split()))\n    x = sum(h)\n    y = 0\n    z = []\n    for i in range(n):\n        if h[i] < y:\n            y += h[i]\n        else:\n            z.append(y + (h[i] - y) // 2)\n            y = max(y, h[i])\n    return min(x // y + int(x % y != 0), len(z) + (x > max(z)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.990627110004425,
            0.991931140422821,
            0.9926550984382629,
            0.9862970113754272,
            0.9696449637413025,
            0.9908523559570312,
            0.9912816882133484,
            0.9907710552215576,
            0.9911758303642273,
            0.9921128153800964,
            0.9896408915519714,
            0.9748868346214294,
            0.9928860068321228,
            0.9923800230026245,
            0.987729549407959,
            0.992331862449646,
            0.9877225756645203,
            0.9910888671875,
            0.9908881187438965,
            0.9897148013114929
        ]
    },
    "1983": {
        "similarity": 0.9943873882293701,
        "body": "    dp=[a[0]]\n    for i in range(1,n):\n        x=a[i]\n        l=len(dp)\n        j=0\n        while j<l and dp[j]<x:\n            j+=1\n        if j==l:dp.append(x)\n        else:dp[j]=x\n    return len(dp)\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    print(LIS(n,a+n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9848817586898804,
            0.9943873882293701,
            0.9904478192329407,
            0.9926859140396118,
            0.9900940656661987,
            0.9926854968070984,
            0.9894777536392212,
            0.9917604327201843,
            0.9785682559013367,
            0.9906007647514343,
            0.9923044443130493,
            0.9934115409851074,
            0.9932408928871155,
            0.9887177348136902,
            0.9936467409133911,
            0.9898768067359924,
            0.9908342957496643,
            0.9943762421607971,
            0.9902717471122742,
            0.9919537305831909
        ]
    },
    "1767": {
        "similarity": 0.997536301612854,
        "body": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(l - 1, r):\n        ans |= x[i]\n    return ans\n\npref_a = [0] * (n + 1)\nfor i in range(n):\n    pref_a[i + 1] = pref_a[i] | a[i]\n\npref_b = [0] * (n + 1)\nfor i in range(n):\n    pref_b[i + 1] = pref_b[i] | b[i]\n\nans = float('-inf')\nfor l in range(1, n + 1):\n    for r in range(l, n + 1):\n        ans = max(ans, f(pref_a, l, r) + f(pref_b, l, r))\n\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968065023422241,
            0.9961164593696594,
            0.9933505654335022,
            0.9952420592308044,
            0.9964993000030518,
            0.9964240193367004,
            0.9935216307640076,
            0.9960348010063171,
            0.997458815574646,
            0.9969329833984375,
            0.9926386475563049,
            0.9972478747367859,
            0.9959629774093628,
            0.9957181215286255,
            0.9967432618141174,
            0.996903657913208,
            0.997536301612854,
            0.9968122243881226,
            0.9968873858451843,
            0.9932644367218018
        ]
    },
    "2382": {
        "similarity": 0.9956414103507996,
        "body": "    m = max(S)\n    if sum(S) != 2 ** N * m:\n        return \"No\"\n    dp = [0] * (m + 1)\n    for s in S:\n        dp[s] += 1\n    for _ in range(1, N):\n        ndp = [0] * (m + 1)\n        for i in range(m - 1, 0, -1):\n            ndp[i] += dp[i]\n            if i > 0:\n                ndp[i - 1] += dp[i]\n        dp = ndp\n    return \"Yes\" if any(v == 2 ** N for v in dp) else \"No\"\n\nN = int(input())\nS = list(map(int, input().split()))\nprint(f(N, S))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956414103507996,
            0.9947383403778076,
            0.9904081225395203,
            0.9938187003135681,
            0.9953177571296692,
            0.9947267770767212,
            0.9939454793930054,
            0.9861640930175781,
            0.9954085350036621,
            0.9955605268478394,
            0.994683027267456,
            0.9951793551445007,
            0.9927592277526855,
            0.9902450442314148,
            0.995358407497406,
            0.9895232319831848,
            0.994870662689209,
            0.9954766035079956,
            0.9942819476127625,
            0.9931624531745911
        ]
    },
    "3907": {
        "similarity": 0.9939802289009094,
        "body": "    n, m = map(int, input().split())\n    v = []\n    for _ in range(m):\n        q, w = map(int, input().split())\n        v.append((q, w))\n    v.sort(key=lambda x: x[1], reverse=True)\n    c = [0] * 100000\n    cnt = [0] * 100000\n    for q, _ in v:\n        cnt[q-1] += 1\n    for i in range(99999):\n        if not cnt[i]:\n            continue\n        if not c[i]:\n            for j in range(i+1, 100001):\n                c[j] = max(c[j], c[i] + cnt[j-i])\n        else:\n            for j in range(i+1, 100001):\n                c[j] = max(c[j], c[i] + cnt[j-i-1])\n    print(c[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9800934195518494,
            0.9873730540275574,
            0.9913297891616821,
            0.9922045469284058,
            0.9933756589889526,
            0.9853572845458984,
            0.9861134886741638,
            0.9903536438941956,
            0.9935440421104431,
            0.9898382425308228,
            0.9911810159683228,
            0.9933347105979919,
            0.9939334392547607,
            0.9900467395782471,
            0.9906211495399475,
            0.9890211224555969,
            0.9939802289009094,
            0.989746630191803,
            0.993526041507721,
            0.989417552947998
        ]
    },
    "3676": {
        "similarity": 0.995613694190979,
        "body": "    if R == 1 or C == 1:\n        return 1 + C * R - 1\n    elif R == 2 and C == 2:\n        return 13\n    else:\n        return (C + 1) * (R + 1) ** 2 - 4 * ((R - 2) * (C - 2) + max(R, C) + 1)\n\n    R, C = map(int, input().split())\n    print(f(R, C))\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938852190971375,
            0.9942695498466492,
            0.9944919943809509,
            0.9920321106910706,
            0.9854841828346252,
            0.9930466413497925,
            0.995613694190979,
            0.9931461811065674,
            0.9943614602088928,
            0.9946401715278625,
            0.9910684823989868,
            0.9950900077819824,
            0.9896047711372375,
            0.9931690692901611,
            0.9943497180938721,
            0.9930287599563599,
            0.9918810129165649,
            0.9901376366615295,
            0.9941454529762268,
            0.994361400604248
        ]
    },
    "3293": {
        "similarity": 0.9956390261650085,
        "body": "n = int(input())\nprofits = []\nfor _ in range(n):\n    f, p, m, s = map(int, input().split())\n    profits.append([m - p, f - 1])\n\nmax_profit = 0\ndp = [0] * n\nfor i in range(n):\n    dp[i] = max(dp[i], profits[i][0])\n    for j, (v, k) in enumerate(profits):\n        if k == i:\n            dp[i] += max(0, v - dp[j])\n\nmax_profit = 0\nfor p in dp:\n    max_profit = max(max_profit, p)\n\nprint(max_profit)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947944283485413,
            0.9955700635910034,
            0.9950588941574097,
            0.9940025210380554,
            0.9948984384536743,
            0.9902153015136719,
            0.9948671460151672,
            0.9935959577560425,
            0.9920112490653992,
            0.9941463470458984,
            0.9946324229240417,
            0.9956390261650085,
            0.9951047301292419,
            0.9950219392776489,
            0.9937360882759094,
            0.9951317310333252,
            0.9895445108413696,
            0.9912629723548889,
            0.9912125468254089,
            0.9942402243614197
        ]
    },
    "3587": {
        "similarity": 0.9966835379600525,
        "body": "    N = int(input())\n    taboo = [input() for _ in range(N)]\n    max_len = 0\n    res = \"\"\n    for i in range(2**18):\n        bin_i = bin(i)[2:].zfill(18)\n        valid = True\n        for s in taboo:\n            if s in bin_i:\n                valid = False\n                break\n        if valid and len(bin_i) > max_len:\n            max_len = len(bin_i)\n            res = bin_i\n    print(res if max_len != 0 else -1)\n\nlongest_clue()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958894848823547,
            0.9934617280960083,
            0.9960711598396301,
            0.9965086579322815,
            0.995827317237854,
            0.9936837553977966,
            0.9941936135292053,
            0.9960345029830933,
            0.9936720132827759,
            0.9961878061294556,
            0.9905716776847839,
            0.9922789335250854,
            0.9940578937530518,
            0.9961814880371094,
            0.9966835379600525,
            0.9952646493911743,
            0.9957152009010315,
            0.9949609637260437,
            0.9965082406997681,
            0.994136393070221
        ]
    },
    "3530": {
        "similarity": 0.9971556663513184,
        "body": "n = int(input())\ncoasters = []\nfor _ in range(n):\n    a, b, t = map(int, input().split())\n    coasters.append((a - b**2 * (t-1)**2, a, b, t))\nq = int(input())\nresults = [0] * q\ntimes = list(map(int, input().split()))\nfor i in range(q):\n    for j in range(n):\n        f, a, b, t = coasters[j]\n        if f <= 0:\n            continue\n        k = min(times[i] // t, int((a - 1) / (b**2)) + 1)\n        results[i] += max(0, a - (k-1)**2 * b)\nprint('\\n'.join(map(str, results)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968476891517639,
            0.9960349202156067,
            0.996970534324646,
            0.9961409568786621,
            0.9971556663513184,
            0.9971339702606201,
            0.9969683289527893,
            0.9970781207084656,
            0.9960545897483826,
            0.9970663785934448,
            0.9955737590789795,
            0.9955703616142273,
            0.9939195513725281,
            0.9932425618171692,
            0.9970751404762268,
            0.9951073527336121,
            0.9968273043632507,
            0.9970261454582214,
            0.9968475699424744,
            0.996923565864563
        ]
    },
    "3900": {
        "similarity": 0.9956849813461304,
        "body": "    s = set()\n    for i in range(1, n + 1):\n        x, y = map(int, input().split())\n        s.add((x, i))\n        s.add((y, i))\n    m = max(n - p + 1, 0)\n    ans = 0\n    for i in range(m, min(n, p) + 1):\n        v = [0] * (n + 1)\n        for j in s:\n            if v[j[0]] < i:\n                v[j[0]] += 1\n        c = 0\n        for j in s:\n            if v[j[0]] > 0 and v[j[1]] > 0:\n                c += 1\n        ans += (c + 2) * c // 2 - i\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938424825668335,
            0.9912298321723938,
            0.9873570203781128,
            0.9943411946296692,
            0.9932821393013,
            0.9929128885269165,
            0.9911407828330994,
            0.9956849813461304,
            0.990597665309906,
            0.993344783782959,
            0.9947951436042786,
            0.9939727783203125,
            0.9939367175102234,
            0.9927908182144165,
            0.9944450855255127,
            0.9945292472839355,
            0.9936057925224304,
            0.9901042580604553,
            0.9929468035697937,
            0.994817316532135
        ]
    },
    "3996": {
        "similarity": 0.9971717000007629,
        "body": "    return pow(a, m - 2, m)\n\n    k = int(input())\n    a = list(map(int, input().split()))\n    n = 1\n    for x in a:\n        n *= x\n    p = 1\n    q = 1\n    for x in a:\n        p = (p * modinv(x, 10**9 + 7)) % (10**9 + 7)\n        q = (q * ((x - 1) * modinv(x, 10**9 + 7) % (10**9 + 7))) % (10**9 + 7)\n    print(f\"{p // gcd(p, q)} / {q}\")\n\nimport math\n\n    return math.gcd(a, b)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996060311794281,
            0.9969699382781982,
            0.9966063499450684,
            0.9943040609359741,
            0.9969498515129089,
            0.9954695701599121,
            0.9968801736831665,
            0.9956283569335938,
            0.9967065453529358,
            0.9964102506637573,
            0.9949963092803955,
            0.9968045949935913,
            0.9960664510726929,
            0.9960281252861023,
            0.9966055154800415,
            0.99422687292099,
            0.9971717000007629,
            0.994670569896698,
            0.9964333772659302,
            0.9960915446281433
        ]
    },
    "3276": {
        "similarity": 0.9964932799339294,
        "body": "    n, m = len(grid), len(grid[0])\n    visited = [[False]*m for _ in range(n)]\n    for i in range(n-2):\n        for j in range(m-2):\n            if grid[i][j] != 'W' and not visited[i][j]:\n                colors = set()\n                for x in range(3):\n                    for y in range(3):\n                        if grid[i+x][j+y] != 'W':\n                            colors.add(grid[i+x][j+y])\n                if len(colors) > 1:\n                    return \"NO\"\n                color = list(colors)[0]\n                for x in range(3):\n                    for y in range(3):\n                        grid[i+x][j+y] = color\n                visited[i][j] = True\n    return \"YES\"\n\nn, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\nprint(paint(grid))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961597323417664,
            0.9940043091773987,
            0.9963046908378601,
            0.9961298108100891,
            0.9961043000221252,
            0.9960837960243225,
            0.9945603609085083,
            0.9942169189453125,
            0.9948973655700684,
            0.9956964254379272,
            0.9945504069328308,
            0.9961748719215393,
            0.9953137636184692,
            0.9898461699485779,
            0.9954289793968201,
            0.9964932799339294,
            0.9931710958480835,
            0.9963058829307556,
            0.9959564208984375,
            0.9950781464576721
        ]
    },
    "3834": {
        "similarity": 0.9971421957015991,
        "body": "    b = [[a[i][j] for j in range(m)] for i in range(n)]\n    c = [[0]*m for _ in range(n)]\n\n        if 0 <= i < n and 0 <= j < m and b[i][j] == -1:\n            b[i][j] = len(d)\n            c[i][j] = 1\n            d.add((i, j))\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                dfs(x, y)\n\n    d = set()\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if b[i][j] == -1 and len(d) <= k:\n                d.clear()\n                dfs(i, j)\n                w = len(d)\n                h = max((i+1-j) for i, j in d) + 1\n                if w * h != sum(c[x][y] for x, y in d):\n                    continue\n                cnt += w * h - len(d)\n\n    return -1 if cnt > k else cnt",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969480633735657,
            0.9960281252861023,
            0.996892511844635,
            0.9964637756347656,
            0.9965485334396362,
            0.9958789348602295,
            0.9935638308525085,
            0.9964649677276611,
            0.995792806148529,
            0.9953497052192688,
            0.9965713024139404,
            0.9960256814956665,
            0.9963793754577637,
            0.9964028596878052,
            0.996794581413269,
            0.9952822327613831,
            0.9966113567352295,
            0.9956851601600647,
            0.9960237145423889,
            0.9971421957015991
        ]
    },
    "3012": {
        "similarity": 0.9947971701622009,
        "body": "    a %= MOD\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = (res * a) % MOD\n        a = (a * a) % MOD\n        b >>= 1\n    return res\n\nMOD = 1000000007\np, q, r, s, N = map(int, input().split())\nif p + q == 0 or r + s == 0:\n    print(0)\nelse:\n    f = [[[[0 for _ in range(max(p, r) + 1)] for _ in range(max(q, s) + 1)] for _ in range(s + 1)] for _ in range(p + 1)]\n    f[0][0][0][0] = 1\n    for i in range(1, N + 1):\n        u = [0] * (p + 1)\n        v = [0] * (q + 1)\n        w = [0] * (r + 1)\n        x = [0] * (s + 1)\n        for j in range(p + 1):\n            for k in range(q + 1):\n                for l in range(r + 1):\n                    for m in range(s + 1):\n                        if f[j][k][l][m] > 0:\n                            x[m] += f[j][k][l][m]\n                            x[m] %= MOD\n                            if j < p:\n                                w[l] += modpow(q, k, MOD) * f[j][k][l][m] % MOD\n                                w[l] %= MOD\n                            elif l < r:\n                                v[k] += modpow(p, j, MOD) * f[j][k][l][m] % MOD\n                                v[k] %= MOD\n        for j in range(p + 1):\n            for k in range(q + 1):\n                for m in range(s + 1):\n                    u[j] += x[m]\n                    u[j] %= MOD\n                    if j < p:\n                        w[l] += modpow(q, k, MOD) * x[m] % MOD\n                        w[l] %= MOD\n        for l in range(r + 1):\n            for m in range(s + 1):\n                v[k] += x[m]\n                v[k] %= MOD\n                if l < r:\n                    u[j] += modpow(p, j, MOD) * x[m] % MOD\n                    u[j] %= MOD\n        for j in range(p + 1):\n            for k in range(q + 1):\n                for l in range(r + 1):\n                    for m in range(s + 1):\n                        f[j][k][l][m] = u[j]\n                        if j < p:\n                            f[j][k][l][m] += modpow(q, k, MOD) * w[l] % MOD\n                        elif l < r:\n                            f[j][k][l][m] += modpow(p, j, MOD) * v[k] % MOD\n        for j in range(1, min(p, r) + 1):\n            if u[j] > 0 and (i - 2) // 3 >= 0:\n                for k in range(q + 1):\n                    f[0][k][j - 1][(s + i - 1) % s] += u[j]\n        for k in range(1, min(q, s) + 1):\n            if v[k] > 0 and (i - 2) // 3 >= 0:\n                for j in range(p + 1):\n                    f[j][0][r - 1][(s + i - 1) % s] += v[k]\n    print(f[0][0][0][N % s])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944970011711121,
            0.9936845898628235,
            0.9947971701622009,
            0.9922043681144714,
            0.9944714903831482,
            0.9933475852012634,
            0.9947153329849243,
            0.9923224449157715,
            0.9937961101531982,
            0.9904123544692993,
            0.993627667427063,
            0.9907728433609009,
            0.9885412454605103,
            0.993182361125946,
            0.991840660572052,
            0.991587221622467,
            0.9946646690368652,
            0.9926801323890686,
            0.992885410785675,
            0.9941360354423523
        ]
    },
    "3745": {
        "similarity": 0.9968314170837402,
        "body": "    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n    color = [-1]*n\n    stack = [(0, -1)]\n\n    while stack:\n        u, p = stack.pop()\n        if color[u] != -1: continue\n\n        c = 0 if p == -1 else ('a' if chr(ord('a') + (ord(graph[p][0]) < u)) == graph[p][0] else 'b')\n        for v in graph[u]:\n            if v != p:\n                stack.append((v, u))\n                color[v] = 3 - c\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (graph[i][j] == j or\n                not ((color[i] == -1 and color[j] == -1) or \n                     (color[i] != -1 and color[i] != color[j]))):\n                return \"No\"\n\n    s = \"\"\n    for c in color:\n        if c < 0: s += 'a'\n        elif c == 2: s += 'c'\n        else: s += 'b'\n\n    return \"Yes\\n\" + s",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955310821533203,
            0.9955938458442688,
            0.9967247843742371,
            0.9949973225593567,
            0.9967858195304871,
            0.9967318177223206,
            0.9933191537857056,
            0.995308518409729,
            0.9954800009727478,
            0.9965860247612,
            0.9962708353996277,
            0.9956968426704407,
            0.9958435893058777,
            0.9950300455093384,
            0.9964106678962708,
            0.995517909526825,
            0.996191143989563,
            0.9968314170837402,
            0.996211588382721,
            0.9957275390625
        ]
    },
    "3028": {
        "similarity": 0.9972167015075684,
        "body": "    board = [list(map(int, input().split())) for _ in range(n)]\n    moves = []\n\n        if board[row][col] == p:\n            return 1\n        return (p - board[row][col]) % p + 1\n\n        v = board[row][col]\n        for i in range(n):\n            board[i][col] += 1\n            if board[i][col] > p:\n                board[i][col] %= p\n        for j in range(m):\n            board[row][j] += 1\n            if board[row][j] > p:\n                board[row][j] %= p\n\n        return all(board[i][j] == p for i in range(n) for j in range(m))\n\n    q = []\n    visited = set()\n    moves = []\n\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in visited:\n                q.append((i, j))\n                visited.add((i, j))\n\n    while q:\n        row, col = q.pop(0)\n        move = get_moves(row, col)\n\n        if check_win():\n            return len(moves) + 1\n\n        for i in range(n):\n            if (i, col) not in visited:\n                make_move(i, col)\n                moves.append((i * m + col))\n                visited.add((i, col))\n                q.append((i, col))\n\n        for j in range(m):\n            if (row, j) not in visited:\n                make_move(row, j)\n                moves.append((row * m + j))\n                visited.add((row, j))\n                q.append((row, j))\n\n    return -1\n\nn, m, p = map(int, input().split())\nprint(solve(n, m, p))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959402680397034,
            0.9952201843261719,
            0.9967235922813416,
            0.9970523715019226,
            0.9962916374206543,
            0.9958692789077759,
            0.9969014525413513,
            0.9972167015075684,
            0.9946457743644714,
            0.9969655871391296,
            0.9965447187423706,
            0.9966856241226196,
            0.9967830181121826,
            0.9940518140792847,
            0.9968410134315491,
            0.9966019988059998,
            0.9968059062957764,
            0.9964856505393982,
            0.9971132874488831,
            0.9954371452331543
        ]
    },
    "3196": {
        "similarity": 0.9966628551483154,
        "body": "from collections import defaultdict, deque\n\nN, M = map(int, input().split())\nadj = [[] for _ in range(N)]\nfor _ in range(M):\n    u, v = map(lambda x: int(x) - 1, input().split())\n    adj[u].append(v)\n\n    dist = [-1] * N\n    q = deque([0])\n    dist[0] = 0\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n\n    return dist\n\ndist = f(adj)\nif min(dist) == float('inf'):\n    print(\"inf\")\nelse:\n    dp = [0] * N\n    for i in range(1, N):\n        if dist[i] != -1:\n            dp[2] += 10 ** (min(dist[i], 9))\n    print(dp[2])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961274862289429,
            0.9966628551483154,
            0.9914962649345398,
            0.9959845542907715,
            0.9959973096847534,
            0.9963748455047607,
            0.9964135885238647,
            0.9957520365715027,
            0.9960333108901978,
            0.9957472085952759,
            0.9945181012153625,
            0.9953739047050476,
            0.9962106347084045,
            0.9952153563499451,
            0.9945710897445679,
            0.9965965151786804,
            0.9914348125457764,
            0.9925165772438049,
            0.9961015582084656,
            0.995562732219696
        ]
    },
    "3405": {
        "similarity": 0.9950947165489197,
        "body": "        d = n // 10 ** int(math.log10(n))\n        return str(d) + str(n).zfill(8)[-int(math.log10(n)):]\n    \n    ans = []\n    for n in range(1, 10 ** 8):\n        if trick(n) == str(int(n * X)):\n            ans.append(n)\n    \n    if not ans:\n        print(\"No solution\")\n    else:\n        print(*sorted(ans), sep='\\n')\n\nimport math\nX = float(input())\nsolve(X)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946865439414978,
            0.9950947165489197,
            0.9950188398361206,
            0.9940788149833679,
            0.9927881956100464,
            0.9915528893470764,
            0.9940730929374695,
            0.9936285614967346,
            0.993320882320404,
            0.9947203397750854,
            0.9885866045951843,
            0.994026780128479,
            0.9945853352546692,
            0.9861474633216858,
            0.9912095665931702,
            0.9950369000434875,
            0.9909422993659973,
            0.9919503927230835,
            0.9932965040206909,
            0.9950935244560242
        ]
    },
    "3126": {
        "similarity": 0.9973104596138,
        "body": "n, t = map(int, input().split())\np = list(map(int, input().split()))\nc = int(input())\n\nwhile c > 0:\n    line = input()\n    if '+' in line:\n        a = int(line.split()[1])\n        p.append(a)\n        p.sort()\n    elif '-' in line:\n        a = int(line.split()[1])\n        p.remove(a)\n    else:\n        t = int(line.split()[1])\n\n    jumps = [0] * (max(p) + 2)\n    for i, pos in enumerate(p):\n        jumps[pos + 1] += i + 1\n\n    print(sum(i - 1 for i in jumps))\n\n    c -= 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972333312034607,
            0.9933016896247864,
            0.9972074627876282,
            0.9969558715820312,
            0.996850848197937,
            0.9967305064201355,
            0.9966717958450317,
            0.9956316947937012,
            0.9969474673271179,
            0.9971857666969299,
            0.996613085269928,
            0.9970329999923706,
            0.9946011304855347,
            0.9967360496520996,
            0.9960899353027344,
            0.9966757893562317,
            0.9954054951667786,
            0.996447741985321,
            0.9969847798347473,
            0.9973104596138
        ]
    },
    "3279": {
        "similarity": 0.9965497851371765,
        "body": "import sys\n    ans = [['0'] * (n + 1) for _ in range(n)]\n    pos = [[False] * n for _ in range(n)]\n    for i in range(n):\n        cur = -1\n        for v in arr[i]:\n            cur += 1\n            tmp = ['0'] * (v - 1)\n            if cur < len(arr[i]):\n                tmp.append('1')\n            ans[i][cur + 1] = '1'\n            for k in range(cur, min(n, cur + v)):\n                pos[i][k] = True\n                pos[k][i] = True\n    for i in range(0, n):\n        for j in range(i, n):\n            if pos[i][j]:\n                ans[j][i] = '1'\n    return '\\n'.join([''.join(x) for x in ans])\n\n    n = int(input())\n    arr = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        arr.append(row)\n    brr = [x[:] for x in arr]\n    for i in range(n):\n        for j in range(n):\n            row = list(map(int, input().split()))\n            for k in range(len(row)):\n                brr[j][k] = row[k]\n    print(solve(n, arr))\n    print(solve(n, brr))\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956048727035522,
            0.9958958029747009,
            0.9957558512687683,
            0.9933254718780518,
            0.9961450695991516,
            0.993821382522583,
            0.9964370727539062,
            0.9940135478973389,
            0.9954327940940857,
            0.9940675497055054,
            0.9952985048294067,
            0.995957612991333,
            0.9932875633239746,
            0.9965497851371765,
            0.9951603412628174,
            0.9965027570724487,
            0.9959487915039062,
            0.9958267211914062,
            0.9948223829269409,
            0.9960641264915466
        ]
    },
    "3599": {
        "similarity": 0.9962520599365234,
        "body": "import heapq\nT, N = map(int, input().split())\nbreaks = list(map(int, input().split()))\nheap = []\nans = [0] * N\nfor i in range(N):\n    heapq.heappush(heap, (breaks[i], i))\ntime = 0\nwhile heap:\n    a, j = heapq.heappop(heap)\n    if time + a <= T:\n        ans[j] = time\n        time += a\n        if len(heap) > 2:\n            continue\n        while heap and time + heapq.heappop(heap)[0] <= T:\n            pass\n    else:\n        break_time = T - time\n        heapq.heappush(heap, (break_time, j))\n        ans[j] = time\n        time += break_time\nprint(*ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923164248466492,
            0.9956914782524109,
            0.9962520599365234,
            0.9956725239753723,
            0.9947421550750732,
            0.9946422576904297,
            0.9942993521690369,
            0.9946909546852112,
            0.9935094118118286,
            0.9946523904800415,
            0.9938843250274658,
            0.9951820373535156,
            0.9951582551002502,
            0.9936589598655701,
            0.9948971271514893,
            0.9941670298576355,
            0.9956932067871094,
            0.9953968524932861,
            0.995652437210083,
            0.9960046410560608
        ]
    },
    "3687": {
        "similarity": 0.9960756897926331,
        "body": "import sys\n\nn, q, s = map(int, input().split())\nq_ids = list(map(lambda x: int(x) - 1, input().split()))\nc = [0] + list(map(int, input().split()))\n\ndata_transferred = [0] * (s + 1)\nwindow_data_transferred = [[] for _ in range(n)]\n\nfor i in range(n):\n    d, *a = map(int, input().split())\n    data_transferred[0] += d\n    window_data_transferred[i].append(d)\n    for j in range(s):\n        a[j] -= data_transferred[q_ids[j]]\n        if a[j] > 0:\n            continue\n        window_data_transferred[i].append(a[j])\n        q_idx = q_ids[j]\n        c[q_idx] += abs(a[j])\n\nall_possible = True\nfor i, w in enumerate(window_data_transferred):\n    for j, d in enumerate(w):\n        if data_transferred[0] - sum(data_transferred[:s]) < d:\n            all_possible = False\n            break\n        for k in range(s):\n            q_idx = q_ids[k]\n            c[q_idx] -= abs(d)\n            if not c[q_idx]:\n                q_ids[k] = q_ids.pop(q).id\n\nprint(\"possible\" if all_possible else \"impossible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955366253852844,
            0.995745837688446,
            0.9884483218193054,
            0.9944377541542053,
            0.9950686097145081,
            0.9925159811973572,
            0.9886228442192078,
            0.9951338768005371,
            0.995726466178894,
            0.9955804944038391,
            0.9950425028800964,
            0.987382173538208,
            0.9960756897926331,
            0.9956508278846741,
            0.9953719973564148,
            0.9953675866127014,
            0.9938583374023438,
            0.9948602318763733,
            0.995222806930542,
            0.9933373332023621
        ]
    },
    "3864": {
        "similarity": 0.992853045463562,
        "body": "    MOD = 998244353\n    dp = [0] * (n + 1)\n    for s in range(2, n + 1):\n        if s > 2:\n            dp[s] = ((s - 2) * dp[s - 2] % MOD +\n                     3 * dp[s - 1] % MOD +\n                     (dp[s - 2] + dp[s - 1]) * (n - 2) % MOD)\n        else:\n            dp[s] = s\n    return pow(2, n, MOD) * sum(dp[2:]) % MOD\n\nn = int(input())\nprint(*[solve(i) for i in range(1, n + 1)])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910200238227844,
            0.9868124127388,
            0.9908314943313599,
            0.9868341684341431,
            0.9779044985771179,
            0.9920507669448853,
            0.9912585020065308,
            0.9736952781677246,
            0.9910951256752014,
            0.9764307141304016,
            0.9821208119392395,
            0.9877026081085205,
            0.9914019703865051,
            0.9918447136878967,
            0.992853045463562,
            0.9870838522911072,
            0.9904428124427795,
            0.9907467365264893,
            0.987148106098175,
            0.9911453127861023
        ]
    },
    "3504": {
        "similarity": 0.9955275654792786,
        "body": "import sys\n\nD, S = map(int, input().split())\ndrops = []\nfor _ in range(D):\n    x, y = map(int, input().split())\n    drops.append((x, y))\n\nsensors = []\nfor _ in range(S):\n    x1, x2, y = map(int, input().split())\n    sensors.append((y, (x1, x2)))\n\ndrops.sort()\nsensors.sort()\n\n    result = [0] * len(drops)\n    for i, drop in enumerate(drops):\n        min_x, max_x = drop\n        for j, (sensor_y, (sensor_min_x, sensor_max_x)) in enumerate(sensors):\n            if sensor_min_x <= min_x <= sensor_max_x:\n                result[i] = sensor_y\n                sensors[j] = (sensor_y, (-float('inf'), -float('inf')))\n    return result\n\nresult = check_collision(drops, sensors)\nfor y in result:\n    print(y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944711327552795,
            0.9952681660652161,
            0.9939415454864502,
            0.9929890036582947,
            0.9955275654792786,
            0.9932580590248108,
            0.9950870871543884,
            0.9933854937553406,
            0.9932736754417419,
            0.9940266013145447,
            0.9911127686500549,
            0.9931763410568237,
            0.993895411491394,
            0.9941513538360596,
            0.992641031742096,
            0.9916825890541077,
            0.9924923777580261,
            0.9901677370071411,
            0.9946244955062866,
            0.9947577118873596
        ]
    },
    "3451": {
        "similarity": 0.9964199066162109,
        "body": "    stack = []\n    cost = 0\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(c[i])\n        else:\n            if stack: cost += -stack.pop()\n            else: stack.append(-c[i])\n    open_diff = (len(stack) + len(s) - n) // 2\n    if k < open_diff or open_diff == 0:\n        return '?'\n    elif len(stack) <= k:\n        return cost\n    stack.sort()\n    for i in range(k):\n        cost += stack.pop()\n    return cost\n\nn, k = map(int, input().split())\ns = input()\nc = [int(input()) for _ in range(n)]\nprint(min_operations(n, k, s, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956880211830139,
            0.9951257109642029,
            0.9956504702568054,
            0.9944578409194946,
            0.99349445104599,
            0.9943472146987915,
            0.993721604347229,
            0.995593249797821,
            0.9962497353553772,
            0.9956799745559692,
            0.9953127503395081,
            0.9943680167198181,
            0.9948650002479553,
            0.9947630167007446,
            0.9954025149345398,
            0.9951949119567871,
            0.9964199066162109,
            0.9955319762229919,
            0.9940257668495178,
            0.9963535666465759
        ]
    },
    "3156": {
        "similarity": 0.9969907999038696,
        "body": "from collections import defaultdict, deque\nimport sys\n\nN = int(input())\nK = int(input())\n\nstores = [[] for _ in range(N)]\nfor i in range(K):\n    store, item = input().split()\n    stores[int(store)].append(item)\n\nM = int(input())\nitems = [input() for _ in range(M)]\n\ngraph = defaultdict(list)\nin_degree = {item: 0 for item in set(items)}\nfor item in items:\n    graph[item].append(item)\n    for store, i in enumerate(stores):\n        if item in i:\n            graph[item].append(store)\n\nfor key in graph:\n    for node in graph[key]:\n        in_degree[node] += 1\n\nqueue = deque([item for item in graph if in_degree[item] == 0])\n\nans = 'ambiguous'\nwhile queue:\n    item = queue.popleft()\n    deg = in_degree[item]\n    del in_degree[item]\n\n    if len(graph[item]) != 1 or graph[item][0] not in stores:\n        ans = 'impossible'\n        break\n\n    for node in graph[item]:\n        if node in graph and in_degree[node] > 1:\n            in_degree[node] -= 1\n            if in_degree[node] == 0:\n                queue.append(node)\n\nif ans != 'ambiguous' or not all(degree == 0 for degree in in_degree.values()):\n    print(ans)\nelse:\n    print('unique')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958246946334839,
            0.9958975911140442,
            0.9963356852531433,
            0.996150553226471,
            0.9959775805473328,
            0.9928956627845764,
            0.9962945580482483,
            0.9969907999038696,
            0.9965721964836121,
            0.9957813620567322,
            0.995762288570404,
            0.996213436126709,
            0.9947487711906433,
            0.9953659772872925,
            0.9940952658653259,
            0.9936537742614746,
            0.9964419007301331,
            0.9955460429191589,
            0.9958634972572327,
            0.9952911734580994
        ]
    },
    "3697": {
        "similarity": 0.9968231916427612,
        "body": "    n, k, m, a = map(int, input().split())\n    g = list(map(int, input().split()))\n    votes_counted = [[] for _ in range(n)]\n    for i, v in enumerate(g):\n        votes_counted[v-1].append((i+1, len(votes_counted[v-1])))\n    for i in range(n):\n        votes_counted[i].sort(key=lambda x: (-x[0], -x[1]))\n    result = [3]*n\n    for i in range(k):\n        if len(votes_counted[g[i]-1]) >= k:\n            result[g[i]-1] = 1\n        else:\n            break\n    for i, (votes, last_voted) in enumerate(votes_counted):\n        if votes < k and votes != 0 and last_voted <= a:\n            result[i] = 2\n    return ' '.join(map(str, result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936492443084717,
            0.9966478943824768,
            0.992633044719696,
            0.9949712157249451,
            0.9967061877250671,
            0.9940173625946045,
            0.9942046999931335,
            0.9949954152107239,
            0.9958745837211609,
            0.9968231916427612,
            0.9959846138954163,
            0.9919766783714294,
            0.996772050857544,
            0.9962053894996643,
            0.9957932233810425,
            0.9961983561515808,
            0.9965638518333435,
            0.995608389377594,
            0.995644211769104,
            0.9964372515678406
        ]
    },
    "3647": {
        "similarity": 0.9973298907279968,
        "body": "from collections import deque\nR, C = map(int, input().split())\ngrid = [list(input()) for _ in range(R)]\ngoal_row, goal_col = None, None\nfor r in range(R):\n    for c in range(C):\n        if grid[r][c] == 'M':\n            goal_row, goal_col = r, c\n\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    for dr, dc in directions:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < R and 0 <= nc < C:\n            yield nr, nc\n\n    visited = [[False]*C for _ in range(R)]\n    dist = [[float('inf')]*C for _ in range(R)]\n    queue = deque([(r, c)])\n    visited[r][c] = True\n    while queue:\n        r, c = queue.popleft()\n        if (r, c) == (goal_row, goal_col):\n            return True\n        dist[r][c] = 1\n        for nr, nc in get_neighbors(r, c):\n            if grid[nr][nc] != '#' and not visited[nr][nc]:\n                char = grid[nr][nc]\n                if char == '.':\n                    queue.append((nr, nc))\n                    visited[nr][nc] = True\n                elif char == '_':\n                    if (nr, nc) in get_neighbors(r, c):\n                        queue.append((nr, nc))\n                        visited[nr][nc] = True\n                else:\n                    queue.append((nr, nc))\n                    visited[nr][nc] = True\n    return False\n\nfor r in range(R):\n    row = []\n    for c in range(C):\n        if grid[r][c] == 'M':\n            row.append(0)\n        elif bfs(r, c):\n            row.append(1 + max(dist[goal_row][goal_col], [dist[nr][nc] for nr, nc in get_neighbors(goal_row, goal_col)]))\n        else:\n            row.append(-1)\n    print(*row)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972285032272339,
            0.9967940449714661,
            0.9966098666191101,
            0.9973298907279968,
            0.9971360564231873,
            0.9969687461853027,
            0.9960233569145203,
            0.9971166849136353,
            0.9964926838874817,
            0.9963558912277222,
            0.9963986277580261,
            0.9968515038490295,
            0.9943150877952576,
            0.9970343708992004,
            0.9919254183769226,
            0.9964419007301331,
            0.995879054069519,
            0.996282160282135,
            0.9960455894470215,
            0.9968641996383667
        ]
    },
    "3699": {
        "similarity": 0.9960391521453857,
        "body": "import math\nimport sys\n\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n    line = input().split()\n    ax, ay, bx, by, tx, ty = map(int, line)\n    n = int(input())\n    points = []\n    for _ in range(n):\n        line = input().split()\n        xi, yi = map(int, line)\n        points.append((xi, yi))\n    return ax, ay, bx, by, tx, ty, points\n\n    ax, ay, bx, by, tx, ty, points = get_points()\n    inf = 10 ** 18\n    n = len(points)\n    dp = [[inf] * (n + 1) for _ in range(n + 1)]\n    dx = [[0] * (n + 1) for _ in range(n + 1)]\n    dy = [[0] * (n + 1) for _ in range(n + 1)]\n\n        if dp[adil_ind][bera_ind] < inf:\n            return\n        x1, y1 = points[adil_ind]\n        x2, y2 = points[bera_ind]\n        dist_ab = dist(x1, y1, x2, y2)\n        dist_at = dist(x1, y1, tx, ty)\n        dp[adil_ind][bera_ind] = min(dp[adil_ind][bera_ind], dist_ab + dist_at)\n        if adil_ind < n - 1:\n            new_adil = adil_ind + 1\n            rec(new_adil, bera_ind)\n            dist_new_ab = dist(points[new_adil][0], points[new_adil][1],\n                               x2, y2)\n            dp[adil_ind][bera_ind] = min(dp[adil_ind][bera_ind],\n                                        dp[new_adil][bera_ind] + dist_new_ab)\n        if bera_ind < n - 1:\n            new_bera = bera_ind + 1\n            rec(adil_ind, new_bera)\n            dist_new_ab = dist(x1, y1,\n                               points[new_bera][0], points[new_bera][1])\n            dp[adil_ind][bera_ind] = min(dp[adil_ind][bera_ind],\n                                        dp[adil_ind][new_bera] + dist_new_ab)\n\n    rec(0, 0)\n    ans = dp[0][0]\n    print(ans)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952699542045593,
            0.9954369068145752,
            0.9956316947937012,
            0.995031476020813,
            0.9947418570518494,
            0.9947792887687683,
            0.9946626424789429,
            0.9958063364028931,
            0.9939109683036804,
            0.9946290254592896,
            0.9954986572265625,
            0.9938838481903076,
            0.9885338544845581,
            0.9947449564933777,
            0.9953952431678772,
            0.9947786927223206,
            0.9960391521453857,
            0.995111882686615,
            0.9933989644050598,
            0.9940967559814453
        ]
    },
    "3145": {
        "similarity": 0.9945418834686279,
        "body": "x, a, b = map(int, input().split())\ndigits = set(input())\n\n    cnt = 0\n    i = a\n    while i <= b:\n        if all(d in str(i) for d in digits):\n            if i % x == 0:\n                cnt += 1\n        i += 1\n    return cnt\n\nprint(count_multiples(x, a, b))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939557313919067,
            0.9925169944763184,
            0.9942968487739563,
            0.9936732053756714,
            0.9923494458198547,
            0.986408531665802,
            0.9920862317085266,
            0.9921132922172546,
            0.9884324669837952,
            0.994473934173584,
            0.993293285369873,
            0.9924976825714111,
            0.9930405020713806,
            0.9866679310798645,
            0.9905670881271362,
            0.9932353496551514,
            0.9922710061073303,
            0.9903721213340759,
            0.9934467673301697,
            0.9945418834686279
        ]
    },
    "3795": {
        "similarity": 0.9927281737327576,
        "body": "    for i in range(1, 1000000):\n        if i*d <= n:\n            n -= i*d\n        elif n % d == 0:\n            break\n    for i in [200, 100, 50, 20, 10, 5]:\n        while n >= e * i and (n - e*i) % d == 0:\n            n = (n // e*i + (n % e*i)//d)*e\n    return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.990625262260437,
            0.9883877635002136,
            0.9907261729240417,
            0.9925981163978577,
            0.9868159294128418,
            0.9898664355278015,
            0.9821357727050781,
            0.9901992678642273,
            0.9876113533973694,
            0.9898573160171509,
            0.9891682863235474,
            0.9898378252983093,
            0.9917700886726379,
            0.9927281737327576,
            0.988172709941864,
            0.9902278780937195,
            0.9870268106460571,
            0.9910264611244202,
            0.9858578443527222,
            0.9854819774627686
        ]
    },
    "3353": {
        "similarity": 0.9975168108940125,
        "body": "    P, R, L = map(int, input().split())\n    b = [-2]\n    planks = []\n    for _ in range(L):\n        e1, e2 = map(int, input().split())\n        if e1 not in b:\n            b.append(e1)\n        if e2 not in b:\n            b.append(e2)\n        planks.append((e1, e2))\n    if 1 in b and -1 not in b:\n        return str(P)\n    visited = set()\n    max_bfs_dist = [0] * len(b)\n    for i in range(len(planks)):\n        u, v = planks[i]\n        if u not in visited or v not in visited:\n            q = [(u, 1) if u == -2 else (v, 0)]\n            visited.update([u, v])\n            while q:\n                u, dist = q.pop(0)\n                max_bfs_dist[b.index(u)] = max(max_bfs_dist[b.index(u)], dist)\n                for p in planks:\n                    if p[0] == u and p[1] not in visited:\n                        q.append((p[1], dist + 2))\n                    elif p[1] == u and p[0] not in visited:\n                        q.append((p[0], dist + 2))\n    max_dist = 0\n    for x in max_bfs_dist:\n        if x > max_dist:\n            max_dist = x\n    return str(max_dist * P)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969507455825806,
            0.9972885847091675,
            0.996759295463562,
            0.9972752928733826,
            0.9964238405227661,
            0.9969077110290527,
            0.9975168108940125,
            0.9969953298568726,
            0.9970799684524536,
            0.9970798492431641,
            0.9971548318862915,
            0.9951057434082031,
            0.9974849224090576,
            0.9974805116653442,
            0.99725741147995,
            0.9931897521018982,
            0.9965199828147888,
            0.9965591430664062,
            0.9973487854003906,
            0.9971843361854553
        ]
    },
    "3065": {
        "similarity": 0.9951702952384949,
        "body": "import sys\n\nN = int(input())\nL = int(input())\n\nadj = [[] for _ in range(N)]\ncapwalk = list(map(int, input().split()))\n\nfor i in range(N):\n    nei = list(map(int, input().split()))\n    adj[i] = [n - 1 for n in nei[1:]]\n\n    global N, L, capwalk, adj\n\n    q = [L - 2]\n    dist = [float('inf')] * N\n    dist[q[-1]] = 0\n\n    while len(q) > 0:\n        i = q.pop(0)\n        for j in adj[i]:\n            if dist[j] == float('inf'):\n                dist[j] = dist[i] + 1\n                q.append(j)\n\n    ans = 1\n    prob = 1 / (2 ** L)\n    curprob = prob\n\n    for i in range(L - 2, -1, -1):\n        if capwalk[(i+1) % L] == capwalk[i]:\n            curprob /= 2\n        else:\n            curprob *= (dist[capwalk[i]] + dist[capwalk[(i + 1) % L]]) / (2 * N - 2)\n        ans += curprob\n\n    return ans\n\nprint(format(solve(), '.10g'))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929633736610413,
            0.9937595725059509,
            0.9950809478759766,
            0.9919638633728027,
            0.9951702952384949,
            0.9766229391098022,
            0.9950097799301147,
            0.9910375475883484,
            0.9938440918922424,
            0.9897070527076721,
            0.9950047731399536,
            0.9936204552650452,
            0.9943586587905884,
            0.9931194186210632,
            0.9903533458709717,
            0.9944048523902893,
            0.9946712851524353,
            0.9940550923347473,
            0.9945138692855835,
            0.9950184226036072
        ]
    },
    "3250": {
        "similarity": 0.9941124320030212,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n    for m in range(1, b + 2):\n        c = 0\n        for i in range(m):\n            c += pow(b, i) * (pow(b, -i) % d)\n        if c % d == 0:\n            return True\n    return False\n\nb, d = map(int, input().split())\nif is_valid_hack(b, d):\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914936423301697,
            0.9941124320030212,
            0.9934270977973938,
            0.9926409721374512,
            0.9923981428146362,
            0.9925720691680908,
            0.9898408651351929,
            0.9920398592948914,
            0.9935031533241272,
            0.9931656718254089,
            0.9907816648483276,
            0.9903343915939331,
            0.9931482076644897,
            0.9930780529975891,
            0.9634446501731873,
            0.9845777153968811,
            0.9926031231880188,
            0.9920492768287659,
            0.9921459555625916,
            0.9923238158226013
        ]
    },
    "3306": {
        "similarity": 0.9945090413093567,
        "body": "n, m = map(int, input().split())\ncalls = []\nfor _ in range(n):\n    p, c = map(int, input().split())\n    calls.append((p, c))\ncalls.sort()\nans = 0\ni = 1\nwhile i < m:\n    if not calls or i > calls[0][0]:\n        ans += (calls[0][0] - i + 1) * i // 2\n        i = calls[0][0]\n        del calls[0]\n    else:\n        j, c = calls.pop(0)\n        ans += max(0, i - j) * min(i, m - 1) - c\n        i = j + 1\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912910461425781,
            0.9945090413093567,
            0.9939243793487549,
            0.9944815635681152,
            0.992773175239563,
            0.9886777997016907,
            0.9887007474899292,
            0.983913004398346,
            0.9935219287872314,
            0.9850001335144043,
            0.9922170042991638,
            0.9937123656272888,
            0.9915897250175476,
            0.9914179444313049,
            0.9892937541007996,
            0.9935609102249146,
            0.9844489097595215,
            0.9913278222084045,
            0.9922133088111877,
            0.9908818602561951
        ]
    },
    "3970": {
        "similarity": 0.9954637289047241,
        "body": "n,k = map(int,input().split())\na = list(map(int,input().split()))\nb,c = [],[]\nfor i in a:\n    if i%k: b.append(i)\n    else: c.append(i)\nans = min(len(b),len(c))\nfor i in b:\n    for j in c:\n        if j == i*k: ans-=1\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927819967269897,
            0.9932064414024353,
            0.9936903119087219,
            0.9947383403778076,
            0.9941098093986511,
            0.9948451519012451,
            0.9929161071777344,
            0.9929749369621277,
            0.9954637289047241,
            0.9916098713874817,
            0.9945303201675415,
            0.9935826659202576,
            0.994530439376831,
            0.995294988155365,
            0.9931432008743286,
            0.9943879842758179,
            0.9897380471229553,
            0.9940285086631775,
            0.9953153729438782,
            0.9889262318611145
        ]
    },
    "3655": {
        "similarity": 0.9962354302406311,
        "body": "import sys\nfrom collections import defaultdict\n\n    m = defaultdict(int)\n    for y in range(h - len(robot[0]) + 1):\n        for x in range(w - len(robot).next().split()):\n            score = 0\n            for i in range(len(robot)):\n                for j in range(len(robot[i].split())):\n                    if int(img[y+i][x+j]) == int(robot[i].split()[j]):\n                        score += 1\n            m[(x, y)] = score\n    max_score = max(m.values())\n    candidates = [k for k, v in m.items() if v == max_score]\n    return sorted(candidates)\n\nw1, h1 = map(int, input().split())\nimg = []\nfor _ in range(h1):\n    row = input().split()\n    img.append(row)\nw2, h2 = map(int, input().split())\nrobot = []\nfor _ in range(w2 - w1 + 1):\n    for _ in range(h2 - h1 + 1):\n        location = match_image(' '.join(img[_:h1+_]), ' '.join([' '.join(row) for row in img[:w1]]), h2, w2)\n        for x, y in location:\n            print(f'{x} {y}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955682158470154,
            0.9960293173789978,
            0.9930993914604187,
            0.9935905337333679,
            0.9955149292945862,
            0.992853045463562,
            0.9933562278747559,
            0.9947879314422607,
            0.9947401285171509,
            0.9952856302261353,
            0.9949657917022705,
            0.9942751526832581,
            0.9962354302406311,
            0.9961718320846558,
            0.9948196411132812,
            0.9952831268310547,
            0.9956827759742737,
            0.9962096214294434,
            0.9959405660629272,
            0.9961462616920471
        ]
    },
    "3589": {
        "similarity": 0.9971059560775757,
        "body": "    while x >= 10:\n        d = 0\n        for c in str(x):\n            if int(c) != 0: \n                d *= int(c)\n        x = d\n    return x\n\nL, R = map(int, input().split())\ncnt = [0] * 10\nfor i in range(L, R+1):\n    cnt[f(i)] += 1\nprint(*cnt[1:])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964175820350647,
            0.9963089823722839,
            0.9966996908187866,
            0.9971059560775757,
            0.9952757954597473,
            0.9962170124053955,
            0.9969840049743652,
            0.9966539144515991,
            0.9941847920417786,
            0.9942606687545776,
            0.9920483827590942,
            0.9964307546615601,
            0.996840238571167,
            0.9948869347572327,
            0.9948415160179138,
            0.9957213997840881,
            0.9963676929473877,
            0.9962930083274841,
            0.9961453676223755,
            0.9965028166770935
        ]
    },
    "3257": {
        "similarity": 0.9952699542045593,
        "body": "import math\n\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    if abs(area - round(area, 3)) < 1e-6:\n        return round(area, 10)\n    else:\n        return -1\n\na, b, c = map(float, input().split())\nprint(carpet_area(a, b, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948136210441589,
            0.9932218194007874,
            0.9938734173774719,
            0.9946958422660828,
            0.9952699542045593,
            0.99435955286026,
            0.9940850138664246,
            0.9888409376144409,
            0.993692934513092,
            0.9897301197052002,
            0.9951266050338745,
            0.9905821084976196,
            0.991295576095581,
            0.9891020059585571,
            0.9940434694290161,
            0.9935356974601746,
            0.9951854348182678,
            0.9945977926254272,
            0.9939814209938049,
            0.9935874938964844
        ]
    },
    "3927": {
        "similarity": 0.9930485486984253,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    for k in range(n + 1):\n        for m in range(101):\n            dp = [False] * (k + 1)\n            dp[0] = True\n            for i in a:\n                for j in range(k - 1, -1, -1):\n                    if dp[j]:\n                        dp[j + 1] |= i == m and not dp[j + 1]\n                        m -= i\n            if dp[k]:\n                ans = k\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916970133781433,
            0.9930485486984253,
            0.9823567271232605,
            0.9923818707466125,
            0.984863817691803,
            0.9924747347831726,
            0.9675021171569824,
            0.9928460717201233,
            0.9913914203643799,
            0.9926742911338806,
            0.9872327446937561,
            0.9904149770736694,
            0.9900273680686951,
            0.9913414716720581,
            0.9929875731468201,
            0.9874624013900757,
            0.9928731322288513,
            0.9904834628105164,
            0.9816980957984924,
            0.9923442006111145
        ]
    },
    "3319": {
        "similarity": 0.9963136911392212,
        "body": "import sys\nfrom collections import deque\nimport math\n\n    while a > 0 and b > 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a | b\n\nn = int(input().split()[0])\nnx, ny, nz = map(int, input().split()[1:])\nplanetoids = []\nfor i in range(n):\n    mass, x, y, z, vx, vy, vz = map(int, input().split())\n    planetoids.append((mass, (x, y, z), (vx, vy, vz)))\n\n    return ((loc[0] + vel[0]) % nx,\n            (loc[1] + vel[1]) % ny,\n            (loc[2] + vel[2]) % nz)\n\n    mass1, loc1, vel1 = planetoid1\n    mass2, loc2, vel2 = planetoid2\n    new_mass = mass1 + mass2\n    new_vel = ((mass1 * vel1[0] + mass2 * vel2[0]) // (new_mass),\n               (mass1 * vel1[1] + mass2 * vel2[1]) // (new_mass),\n               (mass1 * vel1[2] + mass2 * vel2[2]) // (new_mass))\n    return ((new_mass, update_location(loc1, new_vel), new_vel), None)\n\n    collisions = deque()\n    for i in range(len(planetoids)):\n        for j in range(i + 1, len(planetoids)):\n            if planetoids[i][2] == planetoids[j][2]:\n                collisions.append((i, j))\n    while collisions:\n        index1, index2 = collisions.popleft()\n        if index1 > index2:\n            index1, index2 = index2, index1\n        new_planetoid, _ = collide(planetoids[index1], planetoids[index2])\n        del planetoids[index1]\n        del planetoids[index2 - 1]\n        planetoids.insert(index2 - 1, new_planetoid)\n        for i in range(len(planetoids)):\n            for j in range(i + 1, len(planetoids)):\n                if planetoids[i][2] == planetoids[j][2]:\n                    collisions.append((i, j))\n    return planetoids\n\n    planetoids.sort(key=lambda x: (-x[0], -x[1][0], -x[1][1], -x[1][2]))\n    result = []\n    for i in range(len(planetoids)):\n        result.append((f\"P{i}\", *planetoids[i]))\n    return result\n\nfinal_planets = resolve_collisions(planetoids)\noutput = [f\"{len(final_planets)}\\n\"] + [\n    f\"{mass} {x+1} {y+1} {z+1} {vx} {vy} {vz}\\n\"\n    for mass, (x, y, z), vx in final_planets\n]\nprint(\"\".join(output))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963136911392212,
            0.9947556257247925,
            0.9956719279289246,
            0.9920996427536011,
            0.9957481026649475,
            0.9936661124229431,
            0.994941234588623,
            0.9953643679618835,
            0.9955183267593384,
            0.9958124756813049,
            0.9909220337867737,
            0.9954237937927246,
            0.9960459470748901,
            0.9959336519241333,
            0.9955006837844849,
            0.995651364326477,
            0.9947835803031921,
            0.9961240887641907,
            0.9954838156700134,
            0.9875165820121765
        ]
    },
    "3009": {
        "similarity": 0.9970460534095764,
        "body": "import sys\nfrom math import sqrt, hypot\n\n    return hypot(p1[0] - p2[0], p1[1] - p2[1])\n\nN = int(input())\nlamps = []\nenergy = 0\nfor i in range(N):\n    x, y, e = map(int, input().split())\n    energy += e\n    lamps.append((x, y, e))\nif energy == 0:\n    print(0)\nelif energy < 0:\n    print(\"IMPOSSIBLE\")\nelse:\n    points = []\n    for x, y, _ in lamps:\n        if x - 1 <= 100 and y - 1 <= 100:\n            points.append((x - 1, y - 1))\n    segments = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            x1, y1, _ = lamps[i]\n            x2, y2, _ = lamps[j]\n            d = dist((x1, y1), (x2, y2))\n            if d <= 10:\n                segments.append(((x1 - 1, y1 - 1), (x2 + 1, y2 + 1)))\n    for p in points:\n        cnt = 0\n        s = set()\n        stack = [(p, 0)]\n        while stack:\n            cur = stack.pop()\n            if cur[1] > 0:\n                break\n            x, y = cur[0]\n            for seg in segments:\n                if (x, y) not in s and ((x < seg[0][0] or x > seg[1][0]) or \n                                        (y < seg[0][1] or y > seg[1][1])):\n                    stack.append(cur)\n                    continue\n                s.add((x, y))\n                if seg[0][0] <= x <= seg[1][0]:\n                    if seg[0][1] < y and y < seg[1][1]:\n                        cnt += 2 * (seg[0][1] + y) / min(seg[0][1], seg[1][1])\n                    elif y == seg[0][1]:\n                        cnt += seg[1][0] - x\n                    else:\n                        cnt -= x - seg[0][0]\n                elif y < seg[0][1]:\n                    if y <= 100 and x <= 100:\n                        cnt -= 2 * (y + seg[0][1]) / min(y, seg[0][1])\n            stack.append(cur)\n            cnt += 1\n        if energy - cnt * abs(lamps[i][2] + lamps[j][2]) == 0:\n            ans = 0\n            for i in range(N):\n                x, y, e = lamps[i]\n                ans += (x - p[0])**2 / (e + lamps[i][2])**2 + (y - p[1])**2 / (e + lamps[i][2])**2\n            print(sqrt(ans))\n            sys.exit(0)\n    print(\"IMPOSSIBLE\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969112873077393,
            0.9949226379394531,
            0.9954904317855835,
            0.9943008422851562,
            0.9954025745391846,
            0.9964150786399841,
            0.9968016743659973,
            0.9969809651374817,
            0.9956528544425964,
            0.9959822297096252,
            0.9959768056869507,
            0.996841549873352,
            0.9951493144035339,
            0.9966772198677063,
            0.9965619444847107,
            0.9965656995773315,
            0.9966769218444824,
            0.9970460534095764,
            0.9951229095458984,
            0.9963484406471252
        ]
    },
    "3896": {
        "similarity": 0.9967324137687683,
        "body": "    x = int(input(), 2)\n    MOD = 10**9 + 7\n    ret = 0\n    for i in range(30):\n        if (x >> i) & 1:\n            ret += (1 << i)\n            ret %= MOD\n    return sum((ret - n*(n-1)//2)*n//2 for n in range(ret+1))[::-1] % MOD",
        "result": "timed out",
        "similarities": [
            0.9953535199165344,
            0.9950063824653625,
            0.9962633848190308,
            0.9945582151412964,
            0.9918297529220581,
            0.9947758913040161,
            0.9950670003890991,
            0.9967324137687683,
            0.9959078431129456,
            0.9955906271934509,
            0.9960529208183289,
            0.9959455728530884,
            0.9953373670578003,
            0.9963768720626831,
            0.9953041076660156,
            0.9949138164520264,
            0.9940404295921326,
            0.9963767528533936,
            0.9965705871582031,
            0.9961612224578857
        ]
    },
    "3509": {
        "similarity": 0.9971221089363098,
        "body": "from collections import deque, defaultdict\nimport sys\nimport heapq\n\n    dist = defaultdict(lambda: float('inf'))\n    dist[start] = 0\n    queue = [(0, start)]\n    while queue:\n        curr_dist, v = heapq.heappop(queue)\n        if curr_dist > dist[v]:\n            continue\n        for u, w in adj_list[v]:\n            if curr_dist + w < dist[u]:\n                dist[u] = curr_dist + w\n                heapq.heappush(queue, (dist[u], u))\n    return dist\n\n    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n    adj_list = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        adj_list[u].append((v, w))\n    dist = dijkstra(adj_list, n)\n    time_to_janet_house = min(dist[i] - adj_list[1][0][1] for i in range(2, n))\n    waiting_time_lower_bound = a + max(time_to_janet_house, 0)\n    waiting_time_upper_bound = b\n    ans = max(waiting_time_lower_bound, waiting_time_upper_bound - time_to_janet_house + 1) if time_to_janet_house <= b else b - (a - 1)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967861175537109,
            0.9968701601028442,
            0.996255099773407,
            0.9971221089363098,
            0.9958283305168152,
            0.9965097308158875,
            0.9965453147888184,
            0.9964587688446045,
            0.9963239431381226,
            0.9967125654220581,
            0.9967024922370911,
            0.9970965385437012,
            0.991737961769104,
            0.996326744556427,
            0.9965752959251404,
            0.9958311319351196,
            0.9965692162513733,
            0.9850741028785706,
            0.9967190623283386,
            0.9952667951583862
        ]
    },
    "3547": {
        "similarity": 0.9946666359901428,
        "body": "n = int(input())\nplots = []\nfor _ in range(n):\n    x1, y1, x2, y2 = map(float, input().split())\n    plots.append(((x1, y1), (x2, y2)))\ntotal_area = 0.0\nfor plot in plots:\n    (x1, y1), (x2, y2) = plot\n    total_area += (x2 - x1) * (y2 - y1)\n    for other_plot in plots:\n        if other_plot is not plot:\n            ((ox1, oy1), (ox2, oy2)) = other_plot\n            intersection_x1 = max(x1, ox1)\n            intersection_y1 = max(y1, oy1)\n            intersection_x2 = min(x2, ox2)\n            intersection_y2 = min(y2, oy2)\n            if intersection_x1 < intersection_x2 and intersection_y1 < intersection_y2:\n                total_area -= (intersection_x2 - intersection_x1) * (intersection_y2 - intersection_y1)\ntotal_area = round(total_area / 100.0 + 0.005) * 100.0\nprint(total_area)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993935763835907,
            0.9936789274215698,
            0.9928723573684692,
            0.9926390647888184,
            0.9784698486328125,
            0.9940112233161926,
            0.9935712218284607,
            0.9946666359901428,
            0.9943524599075317,
            0.9921544790267944,
            0.9805023670196533,
            0.9907358884811401,
            0.9912580251693726,
            0.9941608905792236,
            0.989158034324646,
            0.9938245415687561,
            0.991431713104248,
            0.9939153790473938,
            0.9914945363998413,
            0.9940345287322998
        ]
    },
    "3017": {
        "similarity": 0.9928970336914062,
        "body": "    two_power_e = str(2 ** e)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for d in range(len(two_power_e)):\n        for k in range(n, -1, -1):\n            if k >= int(two_power_e[d]):\n                dp[k] += dp[k - int(two_power_e[d])]\n    return sum(dp[:n + 1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9865628480911255,
            0.9906387329101562,
            0.9927535057067871,
            0.9748803973197937,
            0.9928970336914062,
            0.9847117066383362,
            0.9925077557563782,
            0.9923166036605835,
            0.9881646037101746,
            0.9911337494850159,
            0.9896106719970703,
            0.9863237142562866,
            0.9907335042953491,
            0.9908238649368286,
            0.992026686668396,
            0.992384672164917,
            0.9920176267623901,
            0.9868547320365906,
            0.9887997508049011,
            0.9917387962341309
        ]
    },
    "3076": {
        "similarity": 0.9975826740264893,
        "body": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\njewels = [[] for _ in range(301)]\nfor _ in range(n):\n    s, v = map(int, input().split())\n    jewels[s].append(v)\n\ndp = [[0] * (k + 1) for _ in range(301)]\nfor i in range(300, -1, -1):\n    for j in range(k + 1):\n        dp[i][j] = max(dp[i][j], dp[i+1][j])\n        if j >= i and i <= 300:\n            dp[i][j] = max(dp[i][j], jewels[i][len(jewels[i]) - 1] + dp[i+1][j-i])\n\nprint(*[dp[i][-1] for i in range(1, k + 1)])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926177859306335,
            0.9968554973602295,
            0.9964156746864319,
            0.9968770742416382,
            0.9970145225524902,
            0.9968873858451843,
            0.9968635439872742,
            0.9960434436798096,
            0.9971901774406433,
            0.9967797994613647,
            0.997203528881073,
            0.9886759519577026,
            0.996565580368042,
            0.9956417083740234,
            0.9964926838874817,
            0.9975826740264893,
            0.9967039227485657,
            0.9965400695800781,
            0.9965450167655945,
            0.997111976146698
        ]
    },
    "3923": {
        "similarity": 0.996730387210846,
        "body": "N, A, B = map(int, input().split())\nif max(A, B) > N - max(A, B) + 1:\n    print(-1)\nelse:\n    res = [0] * (N+1)\n    l, r = min(A, B), max(A, B)\n    i, j = N, l\n    while i >= l and j <= r:\n        res[i] = j\n        i -= 1\n        res[j] = i + 1 if i > l else i\n        j += 1\n    for k in range(l, max(A, B)+1):\n        if not res[k]:\n            res[k] = k\n    for k in range(1, N+1):\n        if not res[k]:\n            res[k] = min(i, r)\n            while res[k] == 0 or res[res[k]]:\n                i -= 1\n                res[k] = i\n    print(*[x-1 for x in res[1:]])",
        "result": "timed out",
        "similarities": [
            0.9937906861305237,
            0.9961163401603699,
            0.996730387210846,
            0.9958218932151794,
            0.9958696961402893,
            0.9954902529716492,
            0.995742917060852,
            0.9956135153770447,
            0.9917276501655579,
            0.9962946176528931,
            0.9946862459182739,
            0.9950815439224243,
            0.9960395693778992,
            0.9956312775611877,
            0.9951033592224121,
            0.9958686828613281,
            0.9949551820755005,
            0.99603670835495,
            0.9937961101531982,
            0.9950987100601196
        ]
    },
    "3332": {
        "similarity": 0.996479868888855,
        "body": "    streams.sort(key=lambda x: (x[0], -x[2]))\n    res = 0\n    stack = []\n    ends = [10**9] * len(streams)\n    for i, s in enumerate(streams):\n        while stack and stack[-1][0] <= s[0]:\n            e = ends.pop()\n            res += streams[e][1]\n            stack.pop()\n        if not stack or (stack and stack[-1][0] < s[0] + s[1]):\n            ends[i] = len(streams) - 1\n            stack.append((s[0] + s[1], i))\n    while stack:\n        e = ends.pop()\n        res += streams[e][1]\n        stack.pop()\n    return res\n\nn = int(input())\nstreams = []\nfor _ in range(n):\n    streams.append(list(map(int, input().split())))\nprint(maxPriority(streams))",
        "result": "failed: testcase 0",
        "similarities": [
            0.996479868888855,
            0.9958048462867737,
            0.9961358308792114,
            0.9946553111076355,
            0.9949877858161926,
            0.9940640330314636,
            0.9939124584197998,
            0.9955928325653076,
            0.9925030469894409,
            0.9947296977043152,
            0.9955841898918152,
            0.9962121844291687,
            0.9956289529800415,
            0.994464099407196,
            0.9959003925323486,
            0.9959599375724792,
            0.9958714842796326,
            0.9954113364219666,
            0.9944170117378235,
            0.9952914714813232
        ]
    },
    "3240": {
        "similarity": 0.9952191710472107,
        "body": "    max_prob = sum(p[i] * (b[v-1] >> i & 1) for i in range(k))\n    best_b = b[v-1]\n    for j in range(2**k):\n        prob = sum(p[i] * (j >> i & 1) for i in range(k))\n        if prob > max_prob:\n            max_prob = prob\n            best_b = j\n    return best_b\n\nk, v = map(int, input().split())\np = []\nb = [0] + [tuple(map(float, input().split())) for _ in range(v-1)]\nprint(f(k, v, *zip(*b), f))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952191710472107,
            0.9945363402366638,
            0.9898924827575684,
            0.99456387758255,
            0.9920355081558228,
            0.993733286857605,
            0.9946346282958984,
            0.9928669333457947,
            0.9940703511238098,
            0.987433671951294,
            0.9909123182296753,
            0.9939031004905701,
            0.9937475323677063,
            0.9943729043006897,
            0.9932124614715576,
            0.9919018149375916,
            0.9892371296882629,
            0.9860193133354187,
            0.9932347536087036,
            0.9921168088912964
        ]
    },
    "3368": {
        "similarity": 0.9965812563896179,
        "body": "from collections import defaultdict, deque\n\n    q = deque()\n    for u in adj['monkey']:\n        if u == 'monkey':\n            return \"POSSIBLE\"\n    seen = [False] * len(adj)\n    for i in range(len(adj)):\n        if not seen[i]:\n            q.append(i)\n            while q:\n                v = q.popleft()\n                seen[v] = True\n                for u, e in adj[v].items():\n                    if not seen[adj[u][v]]:\n                        q.append(adj[u][v])\n    return \"IMPOSSIBLE\" if any(e > 1 for e in adj.values()) else \"FALSE ALARM\"\n\nn, m = map(int, input().split())\nadj = defaultdict(lambda: defaultdict(int))\nanimal_count = {}\nfor i in range(n):\n    animals = list(map(str, input().split()))[1:]\n    animal_count[list(map(str, input().split()))[0]] += len(animals)\n    for j, v in enumerate(animals):\n        adj[v][animals[j]] += 1\nprint(bfs(adj))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936848878860474,
            0.9957599639892578,
            0.995216965675354,
            0.9915634989738464,
            0.9950529336929321,
            0.9957383871078491,
            0.9959191083908081,
            0.9944020509719849,
            0.9962735772132874,
            0.9956254363059998,
            0.9960809350013733,
            0.9965012073516846,
            0.9936989545822144,
            0.9956853985786438,
            0.9946807026863098,
            0.9957354664802551,
            0.9941856861114502,
            0.9951947927474976,
            0.9931928515434265,
            0.9965812563896179
        ]
    },
    "3538": {
        "similarity": 0.9956464171409607,
        "body": "import sys\nfrom collections import defaultdict\n\n    n, d = map(int, input().split())\n    frogs = []\n    for _ in range(n):\n        l, w, h = map(int, input().split())\n        frogs.append((l, w, h))\n    frogs.sort(key=lambda x: (x[0], x[2]), reverse=True)\n    res = 0\n    used_weight = defaultdict(lambda : 0)\n    for l, w, h in frogs:\n        can_escape = d <= l or any(h_b + l >= d and h_b + h + l > d for h_b in (h, max(used_weight[k] for k in used_weight if used_weight[k] != w)))\n        if can_escape:\n            res += 1\n            used_weight[w] = float('inf')\n    return res\n\nprint(max_escape_frogs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.994970440864563,
            0.9940785765647888,
            0.9935641884803772,
            0.9927349090576172,
            0.9956464171409607,
            0.9940848350524902,
            0.9934350848197937,
            0.9924049377441406,
            0.9934149384498596,
            0.9951631426811218,
            0.9941490888595581,
            0.9952529072761536,
            0.9931232929229736,
            0.9941111207008362,
            0.9926797151565552,
            0.9858595132827759,
            0.9951884746551514,
            0.9953474998474121,
            0.994351327419281,
            0.9938546419143677
        ]
    },
    "3183": {
        "similarity": 0.99742591381073,
        "body": "from collections import defaultdict\nimport sys\n\nclass Edge:\n        self.u = u\n        self.v = v\n        self.c = c\n        self.w = w\n\nN = 256\nINF = 10**9\n\n    n, m, s, t = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v, c, w = map(int, input().split())\n        edges.append(Edge(u, v, c, w))\n    return n, m, s, t, edges\n\n    for e in edges:\n        adj[e.u].append((e.v, cap(e.c), cost(e.w)))\n        adj[e.v].append((e.u, 0, -cost(e.w)))\n\n    dist = [INF] * N\n    dist[s] = 0\n    for _ in range(N-1):\n        for u in range(N):\n            for v, capv, costv in adj[u]:\n                if dist[u] + costv < dist[v]:\n                    dist[v] = dist[u] + costv\n    return dist\n\n    augmenting_path = []\n    dist = bellman_ford(adj, s, t)\n    while True:\n        min_cap = INF\n        for u in range(N):\n            for v, capv, _ in adj[u]:\n                if dist[v] == dist[u] + 1 and capv > 0:\n                    augmenting_path.append((u, v))\n                    min_cap = min(min_cap, capv)\n        if not augmenting_path:\n            break\n        v = augmenting_path[-1][1]\n        for u in reversed(augmenting_path):\n            flow[u] += 1\n            cost[u] -= 1\n            adj[u[0]][adj[u[0]].index((u[1], 0, -cost[u]))][2] += 1\n            adj[v[0]][adj[v[0]].index((v[1], 0, -cost[v]))][2] -= 1\n        flow[t] += min_cap\n        cost[t] += min_cap * dist[t]\n    return flow[s], cost[s]\n\n    n, m, s, t, edges = read_input()\n    adj = defaultdict(list)\n    add_edge(adj, edges, lambda x: x, lambda x: x)\n    flow = [0] * N\n    cost = [0] * N\n    ans_flow, ans_cost = edmonds_karp(adj, s, t, flow, cost)\n    print(ans_flow, ans_cost)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968249797821045,
            0.9957583546638489,
            0.9971982836723328,
            0.9966127276420593,
            0.9940898418426514,
            0.9962760806083679,
            0.9969033002853394,
            0.9959896802902222,
            0.9974082112312317,
            0.9952992796897888,
            0.9966728687286377,
            0.9966421723365784,
            0.9963372945785522,
            0.9962050914764404,
            0.9964796304702759,
            0.99742591381073,
            0.9968947172164917,
            0.9938744902610779,
            0.9957981109619141,
            0.9971022605895996
        ]
    },
    "3916": {
        "similarity": 0.9969759583473206,
        "body": "    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    f = []\n    k = 2\n    while k * k <= n:\n        while n % k == 0:\n            f.append(k)\n            n //= k\n        k += 1\n    if n > 1:\n        f.append(n)\n    return f\n\nn = int(input())\na = list(map(int, input().split()))\nb = [a[i] for i in range(n) if a[i] not in b]\np = {1: 0}\n\nfor x in b[::-1]:\n    f = factor(x)\n    p[x * x] = min(p.get(x * y, float('inf')) + (x // y - y) for y in f)\n\nprint(sum(p[k] * (a.count(k) or 1) for k in a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959436058998108,
            0.9946032166481018,
            0.9967615008354187,
            0.9961743950843811,
            0.993427574634552,
            0.9960824251174927,
            0.9964659810066223,
            0.9946878552436829,
            0.9940817952156067,
            0.9950703978538513,
            0.9933680295944214,
            0.9929378032684326,
            0.9965906739234924,
            0.9969759583473206,
            0.9966356158256531,
            0.994157075881958,
            0.9960695505142212,
            0.9967818260192871,
            0.9954171776771545,
            0.9959287047386169
        ]
    },
    "3195": {
        "similarity": 0.9969464540481567,
        "body": "import sys\nfrom math import gcd\nfrom collections import defaultdict\n\nTg, Ty, Tr = map(int, input().split())\nn = int(input())\np = [list(map(str, input().split())) for _ in range(n)]\ntq, cq = map(str, input().split())\n\n    r = (t % (Tg + Ty + Tr)) // (Ty + 1)\n    g = (t % (Tg + Ty + Tr)) // (Tr + 1) % Tg\n    y = (t % (Tg + Ty + Tr)) // (Tg + 1) % Ty\n    if r == 0:\n        return 'green'\n    elif r == 1:\n        return 'yellow'\n    else:\n        return 'red'\n\n    d = defaultdict(list)\n    for t, c in p:\n        k = color(int(t))\n        d[k].append(int(t))\n\n    T = []\n    for k, v in d.items():\n        v.sort()\n        if len(v) < 2 or v[1] - v[0] != Ty + 1:\n            return 0\n        elif v[-1] - v[-2] == Tr:\n            for i in range(1, len(v)):\n                T.append(v[i] - v[i-1])\n    else:\n        g = gcd(T[0], T[1])\n        for t in T:\n            if t % g != 0 or (t // g) % (Tg + Ty + Tr) > Tg:\n                return 0\n\n    c = []\n    t0 = int(tq)\n    for i, t in enumerate(d[cq]):\n        k = color(t - min(T))\n        d[k].sort()\n        c.append((d[k][i] + min(T), d[k][i]))\n        if cq == 'green' and k != 'green':\n            t0 -= Tg\n        elif cq == 'yellow' and k != 'yellow':\n            t0 -= Ty\n\n    c.sort()\n\n    ans = 1 / len(c) * sum(t0 >= i[0] and t0 < i[1] for i in c)\n\n    return round(ans, 3)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960857033729553,
            0.9939071536064148,
            0.996113657951355,
            0.9950350522994995,
            0.9965248107910156,
            0.9959233999252319,
            0.9923238158226013,
            0.9934677481651306,
            0.995530366897583,
            0.9962859153747559,
            0.9957124590873718,
            0.9956540465354919,
            0.9969464540481567,
            0.9962859153747559,
            0.9953504800796509,
            0.994981586933136,
            0.9962344765663147,
            0.9884388446807861,
            0.9959468841552734,
            0.9963511228561401
        ]
    },
    "3998": {
        "similarity": 0.9958062767982483,
        "body": "    n = int(input())\n    r = list(map(int, input().split()))\n    max_r = max(r)\n    ans = 0\n    t = []\n    while True:\n        flag = False\n        for i in range(1 << n):\n            if bin(i).count('1') < 2 or bin(i).count('1') > 5: continue\n            tmp = [x - 1 for x in r]\n            cur_t = [[] for _ in range(len(t) + 1)]\n            for j in range(n):\n                if i >> j & 1:\n                    cur_t[-1].append(j)\n            for l in range(2, len(cur_t[-1]) + 1):\n                if all(x >= y for x, y in zip(tmp[cur_t[-1][l-1]], tmp[cur_t[-1][:l-1]])):\n                    cur_r = max(max(tmp), 0)\n                    if cur_r > ans:\n                        flag = True\n                        ans = cur_r\n                        t.extend(cur_t[:-1])\n                        r = [max(x, 0) for x in tmp]\n        if not flag: break\n    print(ans)\n    print(len(t))\n    for s in t:\n        print(''.join(['1' if i in s else '0' for i in range(n)]))\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944472312927246,
            0.9944381713867188,
            0.9872822165489197,
            0.9926905632019043,
            0.9958062767982483,
            0.9943398237228394,
            0.9923135638237,
            0.9945229291915894,
            0.9946134686470032,
            0.9913017153739929,
            0.995440661907196,
            0.9928972125053406,
            0.9943285584449768,
            0.9942564964294434,
            0.9940000176429749,
            0.9932387471199036,
            0.9957650899887085,
            0.9935696125030518,
            0.9955388307571411,
            0.994999349117279
        ]
    },
    "3150": {
        "similarity": 0.9964070916175842,
        "body": "from collections import defaultdict, deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\n\n    n = int(input())\n    graph = [[] for _ in range(1001)]\n    seen = [[False] * 1001 for _ in range(1001)]\n    dist = [[float('inf')] * 1001 for _ in range(1001)]\n\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        x1, y1, x2, y2 = min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2)\n        if x1 == x2:\n            continue\n        for i in range(x1 + 1, x2):\n            graph[i].append((x1, y1))\n            graph[i].append((x2, y2))\n\n    q = deque()\n    for node in range(1001):\n        if len(graph[node]) == 0:\n            continue\n        dist[0][node] = 0\n        q.append(node)\n\n    while q:\n        u = q.popleft()\n        for v in graph[u]:\n            x, y = v\n            if seen[x][y]:\n                continue\n            seen[x][y] = True\n            if dist[x][y] == float('inf'):\n                q.append((x, y))\n            dist[x][y] = 1 + min(dist[u][0], dist[0][v])\n\n    cnt = [0] * 1002\n    for i in range(1, 1002):\n        if seen[i][i]:\n            continue\n        for j in range(i + 1, 1002):\n            if not seen[j][j]:\n                continue\n            cnt[dist[i][j]] += 1\n\n    ans = 0\n    for i in range(3, len(cnt)):\n        if i >= 4 and cnt[i] == 0:\n            continue\n        x, y = divmod(i - 2, 2)\n        z = max(x + 1, y)\n        c = (cnt[x] * cnt[y]) % (1_000_000_007)\n        ans += (c * cnt[z])\n    print(ans)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958701133728027,
            0.9947202801704407,
            0.9964070916175842,
            0.9953821301460266,
            0.993351399898529,
            0.9948244690895081,
            0.9931385517120361,
            0.9955442547798157,
            0.995123028755188,
            0.9957749247550964,
            0.9962517619132996,
            0.9928407073020935,
            0.994820773601532,
            0.9952846169471741,
            0.9946656823158264,
            0.9962919354438782,
            0.9952424764633179,
            0.9961101412773132,
            0.9959951639175415,
            0.995509684085846
        ]
    },
    "3566": {
        "similarity": 0.9962865114212036,
        "body": "    s = sum(a)\n    return [i for i in range(n) if 2 * (s - a[i]) <= s]\n\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = f(n, a)\n    for _ in range(q):\n        i, x = map(int, input().split())\n        if a[i] != x:\n            a[i] = x\n            p = [i - 1, i, i + 1]\n            p.sort()\n            j = min(p)\n            for k in p:\n                if abs(2 * (s - a[k]) - s) < abs(2 * (s - a[j]) - s):\n                    j = k\n        print(min(p) + 1)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936347007751465,
            0.995705246925354,
            0.9962865114212036,
            0.9946660399436951,
            0.9953631162643433,
            0.9943044781684875,
            0.9960736632347107,
            0.9957817792892456,
            0.9960513710975647,
            0.994848370552063,
            0.9952957034111023,
            0.9946256279945374,
            0.9949120283126831,
            0.9954657554626465,
            0.9908937215805054,
            0.9961084127426147,
            0.9941268563270569,
            0.9945141673088074,
            0.9948695302009583,
            0.9934504628181458
        ]
    },
    "3401": {
        "similarity": 0.9977356791496277,
        "body": "import sys\nimport math\n\nn, s, t, q = map(int, input().split())\nhills = [tuple(map(int, input().split())) for _ in range(n)]\nsprings = list(map(int, input().split()))\ntowns = list(map(int, input().split()))\n\nedges = [[] for _ in range(n + 1)]\n\nfor i in range(n):\n    x0, y0, h0 = hills[i]\n    for j in range(i + 1, n):\n        x1, y1, h1 = hills[j]\n        dx = x1 - x0\n        dy = y1 - y0\n        dh = h1 - h0\n        if 2 * abs(dh) <= min(dx, dy):\n            weight = math.sqrt((dx ** 2 + dy ** 2) / (dh ** 2))\n            edges[i].append((j, weight))\n            edges[j].append((i, weight))\n\n    dist = [float('inf')] * (n + 1)\n    prev = [-1] * (n + 1)\n\n    dist[start] = 0\n    queue = [(start, 0)]\n\n    while queue:\n        u, d = queue.pop(0)\n\n        for v, w in edges[u]:\n            if dist[v] > d + w:\n                dist[v] = d + w\n                prev[v] = u\n\n                queue.append((v, dist[v]))\n\n    return dist, prev\n\ntotal_dist = 0\nfor i in range(t):\n    s_i = springs[i - 1]\n    t_j = towns[i - 1]\n\n    dist_spring_town = [float('inf')] * (n + 1)\n    prev_spring_town = [-1] * (n + 1)\n\n    for h in range(n):\n        if hills[h][2] == springs[i - 1]:\n            spring_dist, _ = dijkstra(h)\n            break\n    else:\n        print('IMPOSSIBLE')\n        sys.exit(0)\n\n    for h in range(n):\n        if hills[h][2] == towns[i - 1]:\n            town_dist, prev = dijkstra(h)\n            break\n\n    for k in range(s + n):\n        dist_spring_town[k] = min(dist_spring_town[k], spring_dist[k] + town_dist[k])\n\n    for h in range(n):\n        if hills[h][2] == springs[i - 1]:\n            prev_h = prev_spring_town[h]\n            break\n    else:\n        continue\n\n    total_dist += dist_spring_town[t_j]\n\n    while t_j != -1 and dist_spring_town[t_j] < float('inf'):\n        total_dist -= edges[prev_spring_town[t_j]][0][1]\n        t_j = prev_spring_town[t_j]\n\nif total_dist <= q:\n    print(format(total_dist, '.6f'))\nelse:\n    print('IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958347678184509,
            0.9969068765640259,
            0.9975780844688416,
            0.9976882934570312,
            0.9976881146430969,
            0.9972650408744812,
            0.9972963929176331,
            0.9977356791496277,
            0.9965661764144897,
            0.9963673949241638,
            0.9960522055625916,
            0.9971399903297424,
            0.9970152974128723,
            0.9954926371574402,
            0.9963855743408203,
            0.9975218772888184,
            0.9975666403770447,
            0.9964371919631958,
            0.9962255358695984,
            0.9976910948753357
        ]
    },
    "3660": {
        "similarity": 0.9959831237792969,
        "body": "    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in range(1, len(s) + 1):\n        for j in range(i - 1, max(-1, i - 20), -1):\n            if s[j:j + 20] in stickers:\n                dp[i] = min(dp[i], dp[j] + stickers[s[j:j + 20]] * (i - j))\n    for i in range(len(s) - 19, -1, -1):\n        for j in range(i, max(-1, i + 2)):\n            if s[j:j + 20] in stickers and s[i:i + 20] == s[j:j + 20]:\n                dp[i] = min(dp[i], dp[j + 20] + stickers[s[j:j + 20]] * (i - j))\n    return 'IMPOSSIBLE' if dp[0] == float('inf') else dp[0]\n\ns = input()\nn = int(input())\nstickers = {}\nfor _ in range(n):\n    word, price = input().split()\n    stickers[word] = int(price)\nprint(f(s, n, stickers))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937762022018433,
            0.9948316812515259,
            0.9955347776412964,
            0.9957904815673828,
            0.9924437999725342,
            0.992893636226654,
            0.9926912188529968,
            0.9945815205574036,
            0.9926472902297974,
            0.9944546222686768,
            0.9927864074707031,
            0.9951986074447632,
            0.994493305683136,
            0.9959831237792969,
            0.9950073957443237,
            0.994791567325592,
            0.9942707419395447,
            0.9941834211349487,
            0.9952589273452759,
            0.9941463470458984
        ]
    },
    "3721": {
        "similarity": 0.9951108694076538,
        "body": "n, m, q = map(int, input().split())\nhave = set()\nfor _ in range(q):\n    r, c = map(int, input().split())\n    have.add((r-1, c-1))\n\nto_buy = set()\nused = {}\nfor i in range(n):\n    for j in range(m):\n        if (i, j) not in have:\n            good = True\n            for a in used.get((i, j), []):\n                for b in used[(a[0], a[1])]:\n                    if (b[0] == j and i != b[1]) or (b[1] == j and a[1] != i) or (b[0] == i and a[1] != j) or (b[1] == i and a[0] != j):\n                        good = False\n            if not good:\n                to_buy.add((i, j))\n        else:\n            used.setdefault((i, j), []).append((i, j))\n\nprint(len(to_buy))",
        "result": "timed out",
        "similarities": [
            0.9942524433135986,
            0.9941460490226746,
            0.9914667010307312,
            0.9941502809524536,
            0.993007242679596,
            0.9895015358924866,
            0.9940897226333618,
            0.9941750764846802,
            0.9944319725036621,
            0.994486391544342,
            0.993937075138092,
            0.9947794675827026,
            0.9930539727210999,
            0.9932529330253601,
            0.9942839741706848,
            0.9948226809501648,
            0.990262508392334,
            0.9928637146949768,
            0.9951108694076538,
            0.9843710660934448
        ]
    },
    "3811": {
        "similarity": 0.9975321888923645,
        "body": "    while b:\n        a, b = b, a % b\n    return a\n\nn = int(input())\npairs = []\nfor _ in range(n):\n    ai, bi = map(int, input().split())\n    pairs.append((ai, bi))\n    pairs.append((bi, ai))\n\ndivisors = set()\nfor pair in pairs:\n    a, b = pair\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 or b % i == 0:\n            divisors.add(i)\n\nwcd = -1\nfor divisor in sorted(divisors):\n    check = True\n    for pair in pairs[:n]:\n        a, b = pair\n        if (a % divisor != 0 and b % divisor != 0) or (a % divisor == 0 and b % divisor == 0):\n            check = False\n            break\n    if check:\n        wcd = divisor\n        break\n\nprint(wcd)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951143860816956,
            0.9961012601852417,
            0.9943549633026123,
            0.9966418743133545,
            0.9970387816429138,
            0.9975321888923645,
            0.9966439008712769,
            0.9972623586654663,
            0.9956861138343811,
            0.9969061613082886,
            0.9972431659698486,
            0.9968017935752869,
            0.9973626732826233,
            0.9962354302406311,
            0.9957717061042786,
            0.9964316487312317,
            0.9967039823532104,
            0.9957476258277893,
            0.9962875247001648,
            0.9965744018554688
        ]
    },
    "3528": {
        "similarity": 0.994179368019104,
        "body": "import sys\nfrom collections import deque\n\nn = int(input())\na = []\nfor _ in range(n):\n    a.append(tuple(map(int, input().split())))\np = list(map(str, input()))\nstack = [deque([(0, 0), (1e9 + 2, 0), (1e9 + 2, 1e9 + 1)])]\nans = []\nfor s in p:\n    ans.append(0.5 * abs(stack[-1][3] - stack[-1][1]) * (stack[-1][0][0] if s == 'L' else stack[-1][2][0] if s == 'R'\n                                                            else stack[-1][1][1] if s == 'U' else stack[-1][0][1]))\n    c = 0\n    while len(stack) > 1 and ((s == 'L' and stack[-1][0][0] < stack[-2][0][0]) or (s == 'R' and stack[-1][2][0] > stack[-2][2][0])\n                              or (s == 'U' and stack[-1][1][1] > stack[-2][1][1]) or (s == 'D' and stack[-1][0][1] < stack[-2][0][1])):\n        c += 1\n        stack.pop()\n    if len(stack) > 1:\n        p = [stack[-2], stack[-1]]\n    else:\n        p = stack[0]\n    x, y = sorted(p)[c]\n    z = [[x, y] for t in p for x, y in t].pop()\n    a.append((z, s))\na.sort(key=lambda o: (o[0][0], o[0][1]))\nfor i in range(1, n):\n    if a[i-1][1] == 'L':\n        stack[-1][2] = a[i][0]\n    elif a[i-1][1] == 'R':\n        stack[-1][0] = a[i][0]\n    elif a[i-1][1] == 'U':\n        stack[-1][1] = a[i][0]\n    else:\n        stack[-1][3] = a[i][0]\nfor s in ans[:-1]:\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919579029083252,
            0.9932859539985657,
            0.9897350668907166,
            0.9878047108650208,
            0.9933375120162964,
            0.9941719770431519,
            0.9892349243164062,
            0.9931963682174683,
            0.9916592836380005,
            0.994179368019104,
            0.9922710061073303,
            0.9915234446525574,
            0.9922341108322144,
            0.9935943484306335,
            0.9934503436088562,
            0.9923848509788513,
            0.9926648736000061,
            0.9920357465744019,
            0.9921934008598328,
            0.9933603405952454
        ]
    },
    "3890": {
        "similarity": 0.9951383471488953,
        "body": "    res = 1\n    while b > 0:\n        if b % 2 == 1: res = (res * a) % mod\n        a = (a * a) % mod; b >>= 1\n    return res\n\nn, k = map(int, input().split())\nif n <= 8 and k >= n - 3:\n    print(1)\nelse:\n    ans = powmod(n, k-1, 1000000007) * (powmod(k-2, k-1, 1000000007)-1) % 1000000007\n    for i in range(1, min(n-2, k)):\n        ans *= ((k-1-i)*i)%1000000007\n    print(ans%(1000000007))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950539469718933,
            0.9951383471488953,
            0.9927107095718384,
            0.9896671175956726,
            0.9927598834037781,
            0.9944984316825867,
            0.9796949625015259,
            0.9935025572776794,
            0.9900776743888855,
            0.9915250539779663,
            0.9920068383216858,
            0.9933599233627319,
            0.9936839938163757,
            0.9940617084503174,
            0.9945937991142273,
            0.9940583109855652,
            0.9939736723899841,
            0.9935916066169739,
            0.9942261576652527,
            0.9894419312477112
        ]
    },
    "3534": {
        "similarity": 0.9960510730743408,
        "body": "    bestK = ans = 0\n    for K in range(1, 2 * 10**9 + 5):\n        d = [a[0]]\n        cur = 0\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                d.append(d[-1] + K)\n            elif a[i] < a[i - 1]:\n                d.append(d[-1] - K)\n            else:\n                d.append(d[-1])\n            cur += (d[-1] == a[i])\n        if cur > ans:\n            ans = cur\n            bestK = K\n    return ans, bestK",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902843832969666,
            0.9941635131835938,
            0.9941548705101013,
            0.9927394390106201,
            0.9942970275878906,
            0.9938415884971619,
            0.9952709674835205,
            0.9955470561981201,
            0.9939225912094116,
            0.9943363666534424,
            0.9942480325698853,
            0.9946578145027161,
            0.9860126972198486,
            0.9945296049118042,
            0.9941310882568359,
            0.9940773844718933,
            0.9944428205490112,
            0.9934369325637817,
            0.9960510730743408,
            0.9945693016052246
        ]
    },
    "3371": {
        "similarity": 0.9972315430641174,
        "body": "    n, c = map(int, input().split())\n    e = [[] for _ in range(n+1)]\n    for _ in range(c):\n        a, b, y = map(int, input().split())\n        e[a].append(y)\n        e[b].append(y)\n    e = [[y[0] for y in sorted(e[i])] for i in range(1, n+1)]\n        v = [False] * (n + 1)\n        s = set()\n        ans = 0\n        for i in range(1, n+1):\n            if e[i]:\n                mi = min(y for y in e[i] if y >= Y)\n                v[i] = True\n                ans += 1\n                for j in range(i + 1, n + 1):\n                    if e[j]:\n                        mx = max(y for y in e[j] if y < Y)\n                        if not v[j]:\n                            s.add((mi, mx))\n        return len(s) <= (n * 2 // 3 - ans), ans\n    lo, hi = 1948, 2007\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        p1, _ = go(mid)\n        if not p1: lo = mid + 1\n        else:\n            p2, s2 = go(mid + 1)\n            if p2 and s2 <= (n * 2 // 3):\n                print(mid + 1)\n                return\n            hi = mid - 1\n    if lo == 2007: print('Impossible')\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995705783367157,
            0.9972315430641174,
            0.994077205657959,
            0.9967426657676697,
            0.9918946623802185,
            0.99669349193573,
            0.9956962466239929,
            0.9960620403289795,
            0.9966533184051514,
            0.9941513538360596,
            0.9965522289276123,
            0.9962270855903625,
            0.9963892698287964,
            0.9969599843025208,
            0.996177077293396,
            0.9968338012695312,
            0.9960601329803467,
            0.9956604838371277,
            0.9962828755378723,
            0.9970248341560364
        ]
    },
    "3621": {
        "similarity": 0.9966124296188354,
        "body": "import sys\nfrom functools import lru_cache\nmod = 10**9 + 7\n@lru_cache(maxsize=None)\n    if mask == 0: return 1\n    ans = 0\n    for i in range(n):\n        if not (mask & (1 << i)): continue\n        subset_mask = mask - (1 << i)\n        all_same_color = True\n        for j in range(n):\n            if not (subset_mask & (1 << j)) and c[i][j] != c[i][i]:\n                all_same_color = False\n                break\n        if all_same_color:\n            ans += dp(subset_mask) * pow(2, n - bin(mask).count('1'), mod)\n            ans %= mod\n    return ans\n\nn = int(input())\nc = [[int(x) for x in input().split()] for _ in range(n)]\nans = 0\nfor i in range(1 << n):\n    ans += dp(i) * pow(2, bin(i).count('1'), mod)\nprint(ans % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956163167953491,
            0.9963535666465759,
            0.9956038594245911,
            0.9954668283462524,
            0.9966124296188354,
            0.9953711628913879,
            0.9961267113685608,
            0.9955312013626099,
            0.9918974041938782,
            0.9952747225761414,
            0.9950336813926697,
            0.994958758354187,
            0.99334716796875,
            0.9897710084915161,
            0.9954296946525574,
            0.995925784111023,
            0.9944297671318054,
            0.9949210286140442,
            0.9961720705032349,
            0.9933440685272217
        ]
    },
    "3392": {
        "similarity": 0.9966555237770081,
        "body": "    global n, visited, group_id, heights, grow_speeds\n    if 0 <= i < n and 0 <= j < n and not visited[i][j]:\n        visited[i][j] = True\n        group_id[i][j] = -1\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < n and heights[x][y] == heights[i][j]:\n                group_id[i][j] = max(group_id[i][j], dfs(x, y))\n        return group_id[i][j] + 1\n    else:\n        return group_id[i][j]\n\n    global n, visited, group_id, heights, grow_speeds\n    n = int(input())\n    heights = [list(map(int, input().split())) for _ in range(n)]\n    grow_speeds = [list(map(int, input().split())) for _ in range(2 * n)]\n\n    max_heights = {}\n    for i in range(n):\n        for j in range(n):\n            h = heights[i][j]\n            if (h, grow_speeds[i][j]) not in max_heights or max_heights[(h, grow_speeds[i][j])] < h:\n                max_heights[(h, grow_speeds[i][j])] = h\n\n    for i in range(n):\n        for j in range(n):\n            heights[i][j] = max_heights.get((heights[i][j], grow_speeds[i][j]), 0)\n\n    visited = [[False]*n for _ in range(n)]\n    group_id = [[-1]*n for _ in range(n)]\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if heights[i][j] > 0 and not visited[i][j]:\n                res = max(res, dfs(i, j))\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961695671081543,
            0.9962437152862549,
            0.9948042631149292,
            0.9957025647163391,
            0.9960627555847168,
            0.9961642026901245,
            0.9933286905288696,
            0.9943733215332031,
            0.9966123700141907,
            0.9966555237770081,
            0.9951316714286804,
            0.9952775835990906,
            0.9958322644233704,
            0.9922034740447998,
            0.9954556226730347,
            0.9955233335494995,
            0.9952515363693237,
            0.9917474389076233,
            0.9943024516105652,
            0.9959138631820679
        ]
    },
    "3095": {
        "similarity": 0.9955265522003174,
        "body": "    return A[0][0] + A[r-1][s-1] <= A[0][s-1] + A[r-1][0]\n\n    R = len(A)\n    S = len(A[0])\n    \n    max_size = 0\n    for r in range(2, R+1):\n        for s in range(2, min(r, S)+1):\n            if is_cool(A, r, s):\n                size = r * s\n                max_size = max(max_size, size)\n                \n    return max_size\n\nR, S = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(R)]\nprint(largest_submatrix(A))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929915070533752,
            0.9941284656524658,
            0.9949195384979248,
            0.9941677451133728,
            0.9923625588417053,
            0.9947905540466309,
            0.9950348734855652,
            0.9927576780319214,
            0.9928873777389526,
            0.9945480227470398,
            0.9926372170448303,
            0.9948049783706665,
            0.9951050281524658,
            0.9954918622970581,
            0.9931849241256714,
            0.9946871399879456,
            0.9947383403778076,
            0.9928267598152161,
            0.9942635893821716,
            0.9955265522003174
        ]
    },
    "3769": {
        "similarity": 0.9930104613304138,
        "body": "    res = 1\n    while y > 0:\n        if y % 2 == 1:\n            res = (res * x) % p\n        y //= 2\n        x = (x * x) % p\n    return res\n\n    p, k = map(int, input().split())\n    mod = pow_mod(k, p - 1, 10**9 + 7)\n    if k == 0:\n        return pow_mod(p, 2, 10**9 + 7)\n    else:\n        return pow_mod(p, 2, 10**9 + 7) * (mod + 1) % (10**9 + 7)\n\nprint(num_distinct_functions())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920570254325867,
            0.991936445236206,
            0.9900344014167786,
            0.990249752998352,
            0.9856045246124268,
            0.991141676902771,
            0.9905633330345154,
            0.9922246336936951,
            0.9921801686286926,
            0.992771327495575,
            0.9920373558998108,
            0.9926734566688538,
            0.9903398156166077,
            0.9881470203399658,
            0.9346876740455627,
            0.9903010129928589,
            0.9912534952163696,
            0.9903182983398438,
            0.9930104613304138,
            0.9912148714065552
        ]
    },
    "3563": {
        "similarity": 0.9950644969940186,
        "body": "    return (q[1] - p[1]) * (r[0] - q[0]) > (r[1] - q[1]) * (q[0] - p[0])\n\n    n = len(points)\n    if n < 3:\n        raise ValueError('Convex hull not possible with less than 3 points')\n    \n    l = sorted((x for x in points), key=lambda x: (x[1], x[0]))\n    hull = [l[0]]\n    p = l[0]\n    \n    for q in l[1:]:\n        while len(hull) > 1 and orientation(p, hull[-2], q) != 1:\n            hull.pop()\n        hull.append(q)\n        p = q\n    \n    return hull\n\n    convex_hull_points = convex_hull(points)\n    segments = 0\n    for i in range(len(convex_hull_points)):\n        j = (i + 1) % len(convex_hull_points)\n        if (convex_hull_points[i][1] <= points[j][1]) or ((convex_hull_points[i][1] == points[j][1] and convex_hull_points[i][0] < points[j][0])):\n            segments += 1\n    return len(convex_hull_points) - segments\n\nn = int(input().split()[0])\npoints = list(map(int, input().split()))[1:]\nprint(count_segments(points))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949776530265808,
            0.9947643280029297,
            0.9901543855667114,
            0.9905393719673157,
            0.9933547973632812,
            0.9949526786804199,
            0.9927018880844116,
            0.994186520576477,
            0.9899884462356567,
            0.9938673973083496,
            0.9915339946746826,
            0.9942882061004639,
            0.9947384595870972,
            0.9942842721939087,
            0.9946905374526978,
            0.9950644969940186,
            0.990494966506958,
            0.9853674173355103,
            0.9941249489784241,
            0.9930652976036072
        ]
    },
    "3618": {
        "similarity": 0.9951961040496826,
        "body": "MOD = 998244353\nMAX_N = 100000\n\n    return (x + y) % MOD\n\n    return x * y % MOD\n\n    if v in memo:\n        return memo[v]\n    if v == 0:\n        ans = 1\n    else:\n        ans = mul(dfs(v - 1, memo), 2)\n        for i in range(9, 0, -1):\n            u = v - (10 ** (v.bit_length() - 1)) + 1 + i\n            if u >= 0 and u != v:\n                ans = add(ans, mul(dfs(u, memo), 9))\n    memo[v] = ans\n    return ans\n\nn = int(input())\nmemo = {}\nprint(dfs(n, memo))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938328266143799,
            0.9905377626419067,
            0.9923823475837708,
            0.9943363666534424,
            0.9943655729293823,
            0.9933130145072937,
            0.9934941530227661,
            0.9874540567398071,
            0.9935947060585022,
            0.9827107787132263,
            0.9918070435523987,
            0.989812970161438,
            0.9936527609825134,
            0.99490886926651,
            0.9949700236320496,
            0.9951961040496826,
            0.994319498538971,
            0.9938073754310608,
            0.9944217205047607,
            0.993455708026886
        ]
    },
    "3830": {
        "similarity": 0.9949424266815186,
        "body": "    i = 0\n    while i < n and s[i] != '-':\n        i += 1\n    j = i - 1\n    while j >= 0 and s[j] != '-':\n        j -= 1\n    k = n + i - 1\n    while k < n and s[k] != '-':\n        k += 1\n    l = k + 1\n    while l < n and s[l] != '-':\n        l += 1\n    m = [False] * (n + 1)\n    for x in range(i, j + 1):\n        m[x] = True\n    if i <= j:\n        return sum(m)\n    else:\n        c = 0\n        for x in range(k + 1, n + 1):\n            if s[(x - k) % n] == '>':\n                c += not m[x]\n        return (n - c)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920920133590698,
            0.9941110014915466,
            0.9943315386772156,
            0.9944318532943726,
            0.9947087168693542,
            0.9922677278518677,
            0.9890407919883728,
            0.990104079246521,
            0.9928500652313232,
            0.9901974201202393,
            0.9922574758529663,
            0.9949424266815186,
            0.9918299317359924,
            0.9936639666557312,
            0.9914249777793884,
            0.9928064942359924,
            0.9942046999931335,
            0.9941733479499817,
            0.9926129579544067,
            0.993187665939331
        ]
    },
    "3912": {
        "similarity": 0.9951873421669006,
        "body": "    n = int(input())\n    s = input()\n    c = [0] * 140\n    for i in range(n):\n        if 'a' <= s[i] <= 'z':\n            c[ord(s[i]) - ord('a') + 1] += 1\n        elif 'A' <= s[i] <= 'Z':\n            c[ord(s[i]) - ord('A') + 27] += 1\n        else:\n            c[38 + int(s[i])] += 1\n    t = sum((v + 1) // 2 for v in c)\n    if n % t != 0:\n        return f()\n    p = [chr(96 + i) * ((v + 1) // 2) for i, v in enumerate(c)]\n    p.sort(key=lambda s: (s[0], len(s)))\n    ans = [''.join(p[i:i + n // t]) for i in range(n % t)]\n    return str(t), ' '.join(ans)\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949517846107483,
            0.9915037751197815,
            0.992419421672821,
            0.9927406311035156,
            0.9946478009223938,
            0.9943246245384216,
            0.9941954612731934,
            0.9935562014579773,
            0.9930498003959656,
            0.9932369589805603,
            0.9914502501487732,
            0.9881901144981384,
            0.9951873421669006,
            0.9932923913002014,
            0.9937864542007446,
            0.9939934611320496,
            0.9910948872566223,
            0.9930679798126221,
            0.9943859577178955,
            0.9938556551933289
        ]
    },
    "3878": {
        "similarity": 0.9965001344680786,
        "body": "    g = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        g[u][v] = g[v][u] = 1\n    p = [i for i in range(n) if all(g[i][j] for j in range(n))]\n    k = n - len(p)\n    print(k)\n    if k == 0:\n        print(1)\n        return\n    q = [[] for _ in range(n)]\n    for u in range(n):\n        for v in range(u + 1, n):\n            if g[u][v]:\n                q[u].append(v)\n                q[v].append(u)\n    res = []\n    while len(p) < n:\n        i = p[0]\n        q[i].sort(key=lambda j: -len(q[j]))\n        for j in q[i]:\n            if all(g[x][j] and g[x][i] for x in range(n)):\n                res.append(i + 1)\n                p.append(j)\n                break\n    print(' '.join(map(str, res)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963710308074951,
            0.9965001344680786,
            0.9959716796875,
            0.9955273866653442,
            0.9940681457519531,
            0.9952746033668518,
            0.9963280558586121,
            0.9963942170143127,
            0.996235728263855,
            0.9914093017578125,
            0.9961423277854919,
            0.9954763054847717,
            0.9951237440109253,
            0.9964649677276611,
            0.9943573474884033,
            0.9960985779762268,
            0.9955227375030518,
            0.9924522042274475,
            0.9865415692329407,
            0.9951524138450623
        ]
    },
    "3010": {
        "similarity": 0.9965832233428955,
        "body": "import sys\n\nclass Point:\n        self.x = x\n        self.y = y\n\n    xdiff = (line1[0].x - line1[1].x), (line2[0].x - line2[1].x)\n    ydiff = (line1[0].y - line1[1].y), (line2[0].y - line2[1].y)\n\n        return a * b[1] - b * a[1]\n\n    div = det(xdiff, ydiff)\n    if div == 0:\n        return None\n\n    d = (det(*xdiff), -det(*ydiff))\n    x = det(line1[0], d) / div\n    y = det(line2[0], d) / div\n    return Point(x, y)\n\n    n = int(input())\n    points = []\n    for _ in range(n):\n        line = [Point(*map(int, input().split())) for _ in range(2)]\n        points.append(line)\n    set_points = set()\n\n        intersection = line_intersection(line1, line2)\n        if intersection:\n            set_points.add(intersection)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            add_intersection(points[i], points[j])\n\n    if len(set_points) == n * (n - 1) // 2:\n        return -1\n    else:\n        return len(set_points)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956980347633362,
            0.9947234988212585,
            0.9965832233428955,
            0.994239091873169,
            0.9951187968254089,
            0.9963531494140625,
            0.9954918622970581,
            0.9963205456733704,
            0.9948090314865112,
            0.9947707653045654,
            0.9960624575614929,
            0.9957056641578674,
            0.9958164691925049,
            0.9961527585983276,
            0.9958723783493042,
            0.9948989748954773,
            0.9942741394042969,
            0.9954807758331299,
            0.9962943196296692,
            0.9960397481918335
        ]
    },
    "3068": {
        "similarity": 0.9947279691696167,
        "body": "    return map(int, input().split())\n\nfrom itertools import combinations\nN = int(input())\nsuspects = [chr(i) for i in range(65, 91)]\ncards = list(suspects)\nplayer1 = []\nplayer2 = []\n\nfor _ in range(N):\n    q, p, r = get_input()\n    c1, c2 = chr(q), chr(ord(q) ^ ord(c))\n    if p == 1:\n        player1.append((c1, r))\n    else:\n        player2.append((c2, r))\n\npossible_circle = set()\nfor combination in combinations(suspects, 3):\n    valid = True\n    for pair, reply in (player1 + player2):\n        c1, c2 = combination\n        if (c1 == pair[0] or c2 == pair[0]) and reply != pair[1]:\n            valid = False\n            break\n        elif (c1 == pair[0] and pair[1] < 2) or \\\n             (c2 == pair[0] and pair[1] > 0):\n            valid = False\n            break\n    if valid:\n        possible_circle.add(tuple(combination))\n\nprint(len(possible_circle))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938946962356567,
            0.9931564331054688,
            0.9929783344268799,
            0.9943490624427795,
            0.9912898540496826,
            0.9947279691696167,
            0.9895553588867188,
            0.9873456358909607,
            0.9919785261154175,
            0.9910585284233093,
            0.988980233669281,
            0.9938561320304871,
            0.9914679527282715,
            0.9877355694770813,
            0.993405818939209,
            0.9911516904830933,
            0.9916088581085205,
            0.9916765093803406,
            0.9922081828117371,
            0.9931156635284424
        ]
    },
    "3030": {
        "similarity": 0.9962696433067322,
        "body": "from collections import deque\nn = int(input())\ngraph = [[] for _ in range(n)]\nvalues = [0] * n\nfor i in range(n):\n    v, p = map(int, input().split())\n    values[i] = v\n    if p != 0:\n        graph[p - 1].append(i)\nmax_count = 0\n    global max_count\n    stack = deque([(node, node)])\n    while len(stack) > 0:\n        current_node, parent_node = stack.pop()\n        is_current_max = True\n        for child in graph[current_node]:\n            if values[child] >= values[parent_node]:\n                is_current_max = False\n                dfs(child)\n                stack.append((child, current_node))\n        if is_current_max:\n            max_count += 1\n    return max_count\ndfs(0)\nprint(max_count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949628114700317,
            0.9957005381584167,
            0.9900494813919067,
            0.9948824644088745,
            0.9957300424575806,
            0.9873474836349487,
            0.9927976727485657,
            0.9931852221488953,
            0.9950015544891357,
            0.9915490746498108,
            0.9957343935966492,
            0.9957723021507263,
            0.9952318072319031,
            0.9960299134254456,
            0.9941073060035706,
            0.9913824200630188,
            0.9962696433067322,
            0.9912974834442139,
            0.9955167174339294,
            0.9949359893798828
        ]
    },
    "3630": {
        "similarity": 0.992964506149292,
        "body": "    n = len(s)\n    a1 = [ord(c) - ord('a') for c in s[0]]\n    a2 = [ord(c) - ord('a') for c in s[1]]\n    dp = [[float('inf')] * (n + 1) for _ in range(3)]\n    dp[0][0] = 0\n    for i in range(n):\n        cur_shift = 26 * a2[i]\n        for j in range(3):\n            if j == 0 and 'z' not in s[0][i]:\n                dp[j][i + 1] = min(dp[j][i + 1], dp[j][i] + abs(a1[i] - cur_shift))\n            if j == 1 and 'a' not in s[0][i]:\n                dp[j][i + 1] = min(dp[j][i + 1], dp[j][i] + abs(cur_shift - a1[i]))\n            if j < 2:\n                dp[j + 1][i + 1] = min(dp[j + 1][i + 1], dp[j][i])\n    return min(dp[2])\n\ns = input().split()\nprint(f(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9559972882270813,
            0.9902541637420654,
            0.9787179827690125,
            0.9913140535354614,
            0.99103182554245,
            0.9912793040275574,
            0.9906389117240906,
            0.9913162589073181,
            0.9897679686546326,
            0.9901670217514038,
            0.9907571077346802,
            0.9886744618415833,
            0.992964506149292,
            0.9926902651786804,
            0.9894919395446777,
            0.98785799741745,
            0.9913211464881897,
            0.9910690188407898,
            0.9884657859802246,
            0.9911974668502808
        ]
    },
    "3133": {
        "similarity": 0.9954140186309814,
        "body": "    n, a, b = map(int, input().split())\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        l, r, t = map(int, input().split())\n        adj[i].append(l)\n        adj[l].append(i)\n        adj[i].append(r)\n        adj[r].append(i)\n        adj[i].append(t)\n\n        if v == a or v == b:\n            return (v == a) - 1\n        for u in adj[v]:\n            if u != p and not u & 1:\n                x = dfs(u, v, a, b, turns + 1)\n                if x != 0:\n                    return x\n        return 0\n\n    return dfs(a, -1, a, b, 0)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946427941322327,
            0.9938241839408875,
            0.9915674328804016,
            0.9936875104904175,
            0.9946553111076355,
            0.9950948357582092,
            0.9932092428207397,
            0.9926010966300964,
            0.9939903616905212,
            0.994551420211792,
            0.9913428425788879,
            0.9934616088867188,
            0.9931222796440125,
            0.9947801828384399,
            0.9954140186309814,
            0.99364173412323,
            0.9911515116691589,
            0.9819377064704895,
            0.9946616291999817,
            0.9940505027770996
        ]
    },
    "3480": {
        "similarity": 0.9978005290031433,
        "body": "L, D = map(int, input().split())\nsyllables = []\ntimes = []\n\nfor _ in range(L):\n    line = input()\n    syls = line.split()\n    time = list(map(int, input().split()))\n    syllables.append(syls)\n    times.append(time)\n\noffset = 0\noutput1 = []\noutput2 = []\n\nfor i in range(L):\n    line = ''\n    for j in range(len(syllables[i])):\n        if j == 0:\n            line += syllables[i][j]\n        else:\n            line += '_' + syllables[i][j]\n\n        time = times[i][j] + offset\n        output1.append((line, time))\n\n    new_offset = D\n    for j in range(len(syllables[i])):\n        if i == 0 or j > 0:\n            time = times[i][j]\n        else:\n            time = times[i][j] + new_offset\n\n        for k in range(j):\n            line2 = output1[k][0].split('_')\n            if len(line2) > 1 and int(time) >= int(output1[k][1]):\n                line2[-1] += '_' * (int(time) - int(output1[k][1]) + 1)\n                new_output = '_'.join(line2)\n                output2.append((new_output, output1[k][1]))\n\n        for k in range(len(output2)):\n            if output2[k][1] <= time:\n                line = ''\n                while len(output2) > k and output2[k][1] == output2[k+1][1]:\n                    syl = output2[k+1][0].split('_')\n                    line += syl[0] + '_' * (len(syl) - 1)\n                    k += 1\n                if len(line) > len(output2[k][0]):\n                    line = output2[k][0]\n                else:\n                    line += '_'.join(['_'] * (len(output2[k][0]) - len(line)))\n\n                output2[k] = (line, time)\n\n        for k in range(len(syllables[i])):\n            if i == 0 or j > k:\n                time = times[i][k]\n            else:\n                time = times[i][k] + new_offset\n\n            found = False\n            for x in range(len(output2)):\n                if output2[x][1] <= time and output2[x][0] != '/':\n                    syl = syllables[i][j].split('_')\n                    line2 = output2[x][0].split('_')\n                    if len(line2) > 1:\n                        diff = int(time) - int(output2[x][1])\n                        if diff >= 0 and diff < (len(syl[0]) + len(line2[-1])):\n                            syl[0] += ' ' * (diff - (len(syl[0]) - 1))\n                            line2[-1] = '_' * diff\n                            new_output = '_'.join(syl) + '.' + '_'.join(line2)\n                            output2[x] = (new_output, time)\n\n                    found = True\n\n            if not found:\n                line2 = output2[-1][0].split('_')\n                syl = syllables[i][j]\n                diff = int(time) - int(output2[-1][1])\n                if diff >= 0 and diff < len(syl):\n                    syl = ' ' * (diff - (len(syl) - 1)) + syl\n                    line2.append('_' * diff)\n                    new_output = '_'.join([syl] + line2)\n                    output2.append((new_output, time))\n\n    if len(output2) == 0:\n        output2.append(('/', D))\n        output1.append((''.join(['_' * (i + 1) for i in range(D)]), -1))\n\nfor out in output1:\n    print(out[0])\nfor out in output2:\n    print(out[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973976612091064,
            0.9970439076423645,
            0.9978005290031433,
            0.9973002076148987,
            0.9970126748085022,
            0.9971044659614563,
            0.9970526695251465,
            0.997206449508667,
            0.9976242780685425,
            0.9964339733123779,
            0.9968421459197998,
            0.9970377683639526,
            0.9976108074188232,
            0.9975314736366272,
            0.9973450899124146,
            0.9970445036888123,
            0.9970180988311768,
            0.9974284768104553,
            0.9957836866378784,
            0.9966358542442322
        ]
    },
    "3389": {
        "similarity": 0.9953615069389343,
        "body": "from collections import Counter, defaultdict\n\nn, k = map(int, input().split())\ns = input()\n\ncnt = Counter(s)\ngrps = defaultdict(list)\n\nfor i in range(n):\n    grps[s[i]].append(i)\n\nans = 0\ni = 0\nwhile len(grps) > 0:\n    c = list(grps.keys())[0]\n    idx = -1\n\n    for j in grps[c]:\n        if s[j] == c and (idx == -1 or i < j <= idx):\n            idx = j\n\n    ans += 1\n    cnt[c] -= 1\n    if cnt[c] > 0:\n        i = max(i, idx + 1)\n        if i < len(s) and s[i] != c:\n            del grps[c]\n        else:\n            i += 1\n            while i in grps and grps[i]:\n                i = grps[i].pop()\n\nprint(ans)",
        "result": "timed out",
        "similarities": [
            0.9947457909584045,
            0.9931458234786987,
            0.9935528635978699,
            0.9951186180114746,
            0.9918912649154663,
            0.995145320892334,
            0.9935625791549683,
            0.9953615069389343,
            0.9940295815467834,
            0.9893781542778015,
            0.9947811961174011,
            0.992692232131958,
            0.9931760430335999,
            0.9925836324691772,
            0.9818195700645447,
            0.9939566254615784,
            0.9927859306335449,
            0.9924828410148621,
            0.9940643310546875,
            0.9952360391616821
        ]
    },
    "3925": {
        "similarity": 0.9954914450645447,
        "body": "    s = '0' + s + '1'\n    n = len(s) - 2\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i] == '1':\n            dp[i] = max(dp[i], dp[i-1])\n        if s[i] != s[i-1]:\n            dp[i] = max(dp[i], dp[i-2] + 1)\n    return max(dp)\n\ns = input()\nprint(solve(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954914450645447,
            0.9946818351745605,
            0.9950107932090759,
            0.9933876395225525,
            0.9945092797279358,
            0.9906333088874817,
            0.9821251630783081,
            0.9941496849060059,
            0.9932680726051331,
            0.9944732189178467,
            0.9944053292274475,
            0.9934808611869812,
            0.9949926137924194,
            0.994651198387146,
            0.9948325157165527,
            0.9954279661178589,
            0.9945289492607117,
            0.9932371377944946,
            0.9903643727302551,
            0.9914113283157349
        ]
    },
    "3700": {
        "similarity": 0.9945072531700134,
        "body": "    if k <= 1 + n // 2 or k > n: return 0\n    left = k - n\n    right = n - k\n    for i in range(1, n+1):\n        if i + (left or right) > n or i + (left or right) < 1: continue\n        ans += max(left, right)\n        break\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912862181663513,
            0.9942295551300049,
            0.9941410422325134,
            0.9925434589385986,
            0.9928833842277527,
            0.9814885854721069,
            0.9938603639602661,
            0.9944271445274353,
            0.9815950989723206,
            0.9929934144020081,
            0.9918146729469299,
            0.9945072531700134,
            0.9899147748947144,
            0.988479495048523,
            0.9926277995109558,
            0.9925880432128906,
            0.9877086281776428,
            0.9939303994178772,
            0.9884551167488098,
            0.9921440482139587
        ]
    },
    "3944": {
        "similarity": 0.9939813017845154,
        "body": "    res = 1\n    while b > 0:\n        if b & 1:\n            res = (res * a) % mod\n        a = (a * a) % mod\n        b >>= 1\n    return res\n\n    N, M, K = map(int, input().split())\n    ans = powmod(3, N + M + K)\n    for i in range(N):\n        if powmod(powmod(2, M), i) * powmod(powmod(3, K), N - 1 - i) % mod == 0:\n            ans -= powmod(powmod(3, i), M + K)\n    print(ans)\n\nmod = 10**9 + 7\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903281331062317,
            0.9930930137634277,
            0.9894959330558777,
            0.9676015973091125,
            0.9930905699729919,
            0.9933072328567505,
            0.9924407601356506,
            0.9935568571090698,
            0.9835445880889893,
            0.9926822185516357,
            0.9939813017845154,
            0.9878005981445312,
            0.9922963380813599,
            0.993513286113739,
            0.9931044578552246,
            0.9925881624221802,
            0.9903042316436768,
            0.9927763938903809,
            0.9928889870643616,
            0.9932642579078674
        ]
    },
    "3821": {
        "similarity": 0.992767870426178,
        "body": "import sys\n\nn = int(input())\nprobabilities = [float(x) for x in input().split()]\n\nmax_probability = 0\nfor r in range(1, n + 1):\n    total_probability = sum(p ** r * (1 - p)**(n - r) * math.comb(n, r)\n                           for i, p in enumerate(probabilities))\n    max_probability = max(max_probability, total_probability)\n\nprint(max_probability)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904211759567261,
            0.9876993894577026,
            0.987637460231781,
            0.9917967915534973,
            0.9913541078567505,
            0.9875339865684509,
            0.9903401136398315,
            0.9868479371070862,
            0.9806872010231018,
            0.9927335381507874,
            0.9914308786392212,
            0.9922401905059814,
            0.9893037676811218,
            0.9919254779815674,
            0.9881129860877991,
            0.9896931052207947,
            0.992767870426178,
            0.9867681264877319,
            0.9769765138626099,
            0.9902144074440002
        ]
    },
    "3667": {
        "similarity": 0.9974315166473389,
        "body": "    w, p = map(int, input().split())\n    wells = {}\n    pipes = []\n    for i in range(w):\n        x, y = map(int, input().split())\n        wells[i] = (x, y)\n    for i in range(p):\n        s, x, y = map(int, input().split())\n        pipes.append((s-1, x-y, i))\n    pipes.sort()\n    graph = {}\n    for pipe in pipes:\n        x, y, i = pipe\n        if x not in graph: graph[x] = []\n        graph[x].append(i)\n    used_pipes = [False]*p\n    intersections = 0\n    for node, edges in graph.items():\n        if len(edges) > 2:\n            print(\"impossible\")\n            return\n        for edge in edges:\n            used_pipes[edge] = True\n            intersections += 1\n    for i in range(p):\n        if used_pipes[i]: continue\n        s, x, y = pipes[i]\n        count = sum(1 for j in graph[x] if pipes[j][0] == s)\n        if count % 2 != 0:\n            print(\"impossible\")\n            return\n    print(\"possible\" if intersections == len(graph) else \"impossible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962999224662781,
            0.9955173134803772,
            0.9974315166473389,
            0.99675452709198,
            0.9973451495170593,
            0.9972190856933594,
            0.9965723752975464,
            0.9957072734832764,
            0.9970118999481201,
            0.9969480633735657,
            0.996173083782196,
            0.9968125224113464,
            0.9971932768821716,
            0.996315598487854,
            0.9949575066566467,
            0.9967681765556335,
            0.9974265098571777,
            0.9969072937965393,
            0.9971515536308289,
            0.996801495552063
        ]
    },
    "3959": {
        "similarity": 0.9971792101860046,
        "body": "    n,m = map(int,input().split())\n    cnt = [0]*(m+1)\n    g_cnt = [[] for _ in range(m+1)]\n    for i in range(n):\n        a = list(map(int,input().split()))\n        g_cnt[i%a[0]].append(a[1:])\n    for g in g_cnt:\n        d = {}\n        for t in g:\n            if t not in d: d[t] = 0\n            d[t] += 1\n        g.clear()\n        for k,v in d.items():\n            g.append([k,v])\n    mod = int(1e9)+7\n    dp = [0]*(m+1)\n    used = [[False]*(m+1) for _ in range(m+1)]\n    for i in range(m):\n        s = sum(g[0][1] for g in g_cnt if g[0][0]==i%len(g_cnt))\n        for j in range(i,m):\n            dp[i]+=(mod-1)*dp[j]%mod\n        dp[i] += 1\n    return (sum(dp)%mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967088103294373,
            0.996535062789917,
            0.9968041777610779,
            0.9956263303756714,
            0.9956594705581665,
            0.9959987998008728,
            0.9961757659912109,
            0.9965236186981201,
            0.9958530068397522,
            0.9960345029830933,
            0.9964372515678406,
            0.9968845248222351,
            0.9971792101860046,
            0.9970093965530396,
            0.9970899224281311,
            0.992233157157898,
            0.9971080422401428,
            0.9965748190879822,
            0.996867835521698,
            0.9942976236343384
        ]
    },
    "3692": {
        "similarity": 0.9966722130775452,
        "body": "    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n    if a[0] == b[0]:\n        min_x = min(a[0], b[0])\n        max_x = max(a[0], b[0])\n        for i in range(min_x, max_x + 1):\n            if dist(i, a[1], a[0], a[2]) <= a[2] ** 2 and dist(i, b[1], b[0], b[2]) <= b[2] ** 2:\n                return True\n    else:\n        x = a[0]\n        y = (a[2] ** 2 - dist(x, a[1], a[0], a[2])) ** 0.5 + a[1]\n        if intersect((x, y), b):\n            return True\n        y = ((a[2] ** 2) - dist(x, a[1], a[0], a[2])) ** 0.5 - a[1]\n        if intersect((x, y), b):\n            return True\n    return False\n\nn = int(input())\ncircles = []\nfor _ in range(n):\n    x, y, r = map(int, input().split())\n    circles.append((x, y, r))\ncircles.sort(key=lambda a: a[2])\nvisited = set()\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if intersect(circles[i], circles[j]):\n            visited.add(circles[i] + (j,))\n    cnt += len([a for a in visited if not intersect((circles[i][0], circles[i][1], circles[i][2]), a)]) + 1\nprint(cnt)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937723875045776,
            0.99425208568573,
            0.9964908957481384,
            0.9966722130775452,
            0.9945628643035889,
            0.9955498576164246,
            0.9961208701133728,
            0.9938432574272156,
            0.9954643249511719,
            0.9946475625038147,
            0.9957486987113953,
            0.9957742094993591,
            0.9956179261207581,
            0.9957749247550964,
            0.9953199625015259,
            0.9960447549819946,
            0.9920933246612549,
            0.9955675005912781,
            0.9953652620315552,
            0.9941428303718567
        ]
    },
    "3894": {
        "similarity": 0.9939309358596802,
        "body": "    even = []\n    odd = []\n    for x in a: \n        if x%2 == 0: even.append(x)\n        else: odd.append(x)\n    if len(odd) % 2 != 0:\n        return \"Kevin\"\n    even.sort()\n    while max(even)>=1 and min(even)%k==0:\n        even.remove(max(even))\n        for _ in range(k-1): \n            even.append(min(even)//k)\n    return \"Nicky\" if min(odd)>0 or (max(even)==0 and len(even)>0) else \"Kevin\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(f(n, k, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922187328338623,
            0.9874470233917236,
            0.9890187978744507,
            0.9908860921859741,
            0.9925561547279358,
            0.9918088316917419,
            0.9917712211608887,
            0.9834839701652527,
            0.9925111532211304,
            0.9930532574653625,
            0.9911471009254456,
            0.9788997173309326,
            0.9931124448776245,
            0.9903451204299927,
            0.9834458231925964,
            0.992674708366394,
            0.9927567839622498,
            0.9939309358596802,
            0.9878824353218079,
            0.9929366707801819
        ]
    },
    "3856": {
        "similarity": 0.9936946034431458,
        "body": "import sys\n\nn = int(input())\nw, h = [], []\nfor _ in range(n):\n    w_i, h_i = map(int, input().split())\n    w.append(w_i)\n    h.append(h_i)\n\nh.sort(reverse=True)\narea = 0\nfor i, h_i in enumerate(h[:n // 2 + n % 2]):\n    w_area = sum(1 for j, w_j in enumerate(w) if i == (j - i) % (n // 2 + n % 2))\n    area += max(w_area * h_i, min(max(w_area, n // 2), len(h)) * w_i)\nprint(area)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902574419975281,
            0.9907826781272888,
            0.9905493855476379,
            0.9936946034431458,
            0.9930903911590576,
            0.992997407913208,
            0.9905219078063965,
            0.9801160097122192,
            0.987359881401062,
            0.9934402108192444,
            0.9887993335723877,
            0.9879102110862732,
            0.990421712398529,
            0.9927313923835754,
            0.9921332001686096,
            0.9915589094161987,
            0.9913347363471985,
            0.9927552938461304,
            0.9893732666969299,
            0.9935591816902161
        ]
    },
    "3282": {
        "similarity": 0.9961270093917847,
        "body": "import sys\n    P = int(input())\n        return len(set(str(a)) & set(str(b))) == 0\n    res = []\n    for i in range(1, P+1):\n        for j in range(i+1, P+1):\n            total = i + j\n            if not (is_same_digit(i, j) or is_same_digit(i, total) or is_same_digit(j, total)):\n                if len(res) < 5000 and [i, j] not in res:\n                    res.append([i, j])\n    print(len(res))\n    for x in sorted(res):\n        print(*x)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943903684616089,
            0.9920589923858643,
            0.9934014678001404,
            0.9950436949729919,
            0.9928141236305237,
            0.995533287525177,
            0.9949302673339844,
            0.9953706860542297,
            0.9950733184814453,
            0.9933408498764038,
            0.9912952780723572,
            0.9958245158195496,
            0.9956569671630859,
            0.995405375957489,
            0.9948728680610657,
            0.9946547150611877,
            0.9947502613067627,
            0.991896390914917,
            0.9943835735321045,
            0.9961270093917847
        ]
    },
    "3596": {
        "similarity": 0.9970688223838806,
        "body": "import math\nfrom scipy import special as sps\n\n        return sps.gamma(z)\n    return c * (t1 * gamma(x) + (log(sps.erf(t3*x)))**(1/t2) - (gamma(k*x)**t4))\n\n    ans = 0\n    for i in range(r+1):\n        ans += f(i, t1, t2, t3, t4) / math.factorial(i) * x**i\n    return ans\n\n    r = r + n\n    ans = 0\n    for i in range(r+1):\n        ans += Pn(n-1, i)*x**i\n    return ans\n\n    ans = 0\n    for i in range(deg(Ps)+1):\n        ans = (Pn(s, x)**(i+1)).diff(x)\n    return ans\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\nn, k, r, s, l = map(int, input().split())\n\n    return math.log(x)\n\nPs = Pn(s, n)\ng_value = g(n) + l\nprint(((g_value**2)/math.pi/math.e) + (1/(l+1))): 0.01f)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961826801300049,
            0.9960030317306519,
            0.9958685040473938,
            0.9954593181610107,
            0.994045078754425,
            0.9960027933120728,
            0.9969052672386169,
            0.9969338774681091,
            0.9967894554138184,
            0.9945875406265259,
            0.9965093731880188,
            0.9967745542526245,
            0.9968157410621643,
            0.9970688223838806,
            0.9941344857215881,
            0.9955677390098572,
            0.9954851269721985,
            0.9951390624046326,
            0.9958593249320984,
            0.997029185295105
        ]
    },
    "3540": {
        "similarity": 0.9920554757118225,
        "body": "    goal = [\"RRRR\", \"GGGG\", \"BBBB\", \"YYYY\"]\n    moves = 0\n    for i in range(4):\n        row_moves = 0\n        if input_str[i] != goal[i]:\n            # find the position of the first mismatched character\n            pos = next((j for j, c in enumerate(input_str[i]) if c != goal[i][j]), -1)\n            # calculate the moves needed to move it to its correct position\n            row_moves = max(pos - 0, 3 - pos) + \\\n                        max(i - (goal[i].index(goal[i][pos])) % 4, 3 - i + (goal[i].index(goal[i][pos])) % 4)\n        moves += min(row_moves, 6 - min(row_moves, 1))\n    return moves\n\ninput_str = input()\nprint(min_moves(input_str))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920554757118225,
            0.9865750074386597,
            0.9841552376747131,
            0.9899256825447083,
            0.9872140288352966,
            0.9833604097366333,
            0.9865869283676147,
            0.9817252159118652,
            0.9863315224647522,
            0.9896872639656067,
            0.9894267916679382,
            0.9911165833473206,
            0.9862247109413147,
            0.9867530465126038,
            0.9867408275604248,
            0.9919660687446594,
            0.9918195605278015,
            0.9832406640052795,
            0.9904917478561401,
            0.9817296862602234
        ]
    },
    "3354": {
        "similarity": 0.9951566457748413,
        "body": "import math\nfrom sys import stdin, stdout\n\ns, r = map(float, stdin.readline().split())\nn, z = map(int, stdin.readline().split())\n\ncovered_area = (math.pi * s ** 2) / 100 * z\npickle_area = math.pi * r ** 2\n\nmax_pickles = 0\nfor i in range(n + 1):\n    pickle_radius = r if i == n else r * (1 + (n - i) ** 0.5 / n) ** 0.5\n    area_per_pickle = math.pi * pickle_radius ** 2\n    total_area = i * area_per_pickle\n    if total_area <= covered_area:\n        max_pickles = i\n\nstdout.write(str(max_pickles))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9900336861610413,
            0.9948511719703674,
            0.9951566457748413,
            0.992653489112854,
            0.9950039386749268,
            0.9942285418510437,
            0.9921993613243103,
            0.9950513243675232,
            0.9941515922546387,
            0.9943815469741821,
            0.9920130372047424,
            0.9893760681152344,
            0.9945385456085205,
            0.994145929813385,
            0.9951085448265076,
            0.9936012625694275,
            0.9946879148483276,
            0.9901856780052185,
            0.9945545196533203,
            0.9943124651908875
        ]
    },
    "3217": {
        "similarity": 0.9922212362289429,
        "body": "    if x == 9:\n        return (x-1, 0, y, z)\n    elif y == 9:\n        return (x, y-1, z, 0)\n    else:\n        return (x, y, z, 0)\n\n    n = int(input())\n    cells = []\n    for _ in range(n):\n        x, y, z = map(int, input().split())\n        cells.append((x, y, z))\n    cells.sort(key=lambda cell: get_bounds(*cell)[3])\n    min_panels = 0\n    i = 0\n    while i < n:\n        x, y, z, _ = get_bounds(*cells[i])\n        j = i + 1\n        while j < n and get_bounds(*cells[j])[3] == get_bounds(*cells[i])[3]:\n            j += 1\n        min_panels += max(x+1, y+1, z+1)\n        i = j\n    print(min_panels)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915755391120911,
            0.9908992648124695,
            0.9880185723304749,
            0.9919305443763733,
            0.9922212362289429,
            0.9801362752914429,
            0.9912141561508179,
            0.9883359670639038,
            0.9834429025650024,
            0.9898058176040649,
            0.9886384606361389,
            0.9913719892501831,
            0.9856668710708618,
            0.9889312386512756,
            0.9899554252624512,
            0.9767811298370361,
            0.9852758646011353,
            0.9899020791053772,
            0.9906598925590515,
            0.9899213910102844
        ]
    },
    "3520": {
        "similarity": 0.9959018230438232,
        "body": "    pills.sort(key=lambda x: x[0])\n    dp = [[float('-inf')] * len(pills) for _ in range(n + 1)]\n    for i in range(len(pills)):\n        t, x, y = pills[i]\n        dp[t][i] = max(dp[t][i], min(x - c, n))\n        for j in range(t, n):\n            if j >= t:\n                dp[j + 1][i] = max(dp[j + 1][i], (j - t) * y / (x - c) + dp[t][i])\n            dp[j + 1][i] = max(dp[j + 1][i], n - (j - x + c))\n    ans = float('-inf')\n    for i in range(len(pills)):\n        ans = max(ans, min(x - c, n) if t == 0 else dp[t][i])\n    return round(ans, 6)\n\nn, p, c = map(int, input().split())\npills = []\nfor _ in range(p):\n    pills.append(list(map(int, input().split())))\nprint(f(n, p, c, pills))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942755699157715,
            0.9923338890075684,
            0.991763174533844,
            0.994133710861206,
            0.9949350953102112,
            0.9956436157226562,
            0.9938697814941406,
            0.9959018230438232,
            0.9912508726119995,
            0.9938852190971375,
            0.9953924417495728,
            0.9952992796897888,
            0.9952398538589478,
            0.9957724213600159,
            0.9957450032234192,
            0.9900140166282654,
            0.9941402077674866,
            0.9953532814979553,
            0.9882059693336487,
            0.993179440498352
        ]
    },
    "3475": {
        "similarity": 0.9966756105422974,
        "body": "t, n = map(int, input().split())\ntransportation_types = []\nfor _ in range(t):\n    min_distance, max_heading_range = map(int, input().split())\n    transportation_types.append((min_distance, max_heading_range))\npoints = []\nprev_point = (0, 0)\nfor _ in range(n - 1):\n    distance, heading = map(int, input().split())\n    points.append((distance + prev_point[0], (heading + prev_point[1]) % 360))\n    prev_point = (distance, heading)\n\ndp = [float('inf')] * n\ndp[0] = 0\nfor i in range(n):\n    for j, transportation_type in enumerate(transportation_types):\n        min_distance, max_heading_range = transportation_type\n        if i == 0:\n            continue\n        prev_point = points[i - 1]\n        point = points[i]\n        distance_diff = abs(point[0] - prev_point[0])\n        heading_diff = abs(point[1] - prev_point[1]) % 360\n        if (distance_diff < min_distance or\n            heading_diff > max_heading_range):\n            continue\n        for k in range(i + 1, n):\n            if dp[k] != float('inf'):\n                new_val = dp[i] + 1\n                if new_val < dp[k]:\n                    dp[k] = new_val\n\nans = 'IMPOSSIBLE' if max(dp) == float('inf') else max(dp)\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994921863079071,
            0.9966756105422974,
            0.9946063160896301,
            0.9964731931686401,
            0.9936295747756958,
            0.9961525797843933,
            0.9965240359306335,
            0.9947711825370789,
            0.9958119988441467,
            0.9959291219711304,
            0.9957038760185242,
            0.9960032105445862,
            0.9958412051200867,
            0.9958078265190125,
            0.9960602521896362,
            0.9945448040962219,
            0.9962782859802246,
            0.996290922164917,
            0.9938019514083862,
            0.9962941408157349
        ]
    },
    "3977": {
        "similarity": 0.9926454424858093,
        "body": "    n, m, k = map(int, input().split())\n    home_nodes = set(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n    ans = 0\n    for i in home_nodes:\n        node_count = sum(1 for j in home_nodes if i != j and not any(k in graph[j] for k in graph[i]))\n        ans += max(0, node_count - 1)\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916049838066101,
            0.9893978834152222,
            0.9761780500411987,
            0.9926454424858093,
            0.9901039004325867,
            0.9894418120384216,
            0.9900374412536621,
            0.9840288758277893,
            0.9866953492164612,
            0.9866774678230286,
            0.985917329788208,
            0.9917221069335938,
            0.9903922080993652,
            0.9886308908462524,
            0.992273211479187,
            0.9864205121994019,
            0.990975022315979,
            0.9876307249069214,
            0.9877749085426331,
            0.9869236350059509
        ]
    },
    "3626": {
        "similarity": 0.9950715899467468,
        "body": "    for x3, y3, x4, y4 in rectangles:\n        if max(x1, x3) < min(x2, x4) and max(y1, y3) < min(y2, y4):\n            return True\n    return False\n\nn = int(input())\nrectangles = []\nfor _ in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    rectangles.append((x1, y1, x2, y2))\n\nprint(1 if intersect(*rectangles[0]) else 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946233034133911,
            0.9950715899467468,
            0.9942319989204407,
            0.9931407570838928,
            0.9928754568099976,
            0.9887523651123047,
            0.9929420948028564,
            0.9877592325210571,
            0.9948442578315735,
            0.991388201713562,
            0.9877794981002808,
            0.9948384165763855,
            0.9942378997802734,
            0.9926024079322815,
            0.9945397973060608,
            0.989599347114563,
            0.9939219951629639,
            0.9950169920921326,
            0.989569902420044,
            0.9926916360855103
        ]
    },
    "3584": {
        "similarity": 0.9974379539489746,
        "body": "import sys\nfrom functools import reduce\nfrom operator import add\n\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\n    n = len(points)\n    if n < 3:\n        return points\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    q = 0\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) > 0 or points[i] == points[p]:\n                q = i\n        p = q\n        if p == l:\n            break\n\n    return hull\n\n    return (p[0] - q[0])**2 + (p[1] - q[1])**2\n\n    n = len(onions)\n    m = len(fence_posts)\n\n    dp = [[-1]*(k+1) for _ in range(m)]\n    dp[0][0] = 0\n    hull = convex_hull([(x, y) for x, y in fence_posts])\n\n    for i in range(1, k + 1):\n        for j in range(len(hull)):\n            covered = sum(dist(onion, hull[j]) <= dist(onion, fence_posts[hull[(j+1)%m][0]]) for onion in onions)\n            if dp[j][i-1] < covered:\n                dp[j][i] = covered\n\n    return max(max(dp[i][k] for i in range(m)) for k in range(k + 1))\n\nn, m, k = map(int, sys.stdin.readline().split())\nonions = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\nfence_posts = [tuple(map(int, sys.stdin.readline().split())) for _ in range(m)]\n\nprint(max_cover(fence_posts, onions, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959973692893982,
            0.9965146780014038,
            0.9961971640586853,
            0.9972083568572998,
            0.9966753721237183,
            0.9974379539489746,
            0.9955265522003174,
            0.996587872505188,
            0.9961013793945312,
            0.9968295693397522,
            0.9954351186752319,
            0.9966518878936768,
            0.9971306324005127,
            0.9968695640563965,
            0.9970684051513672,
            0.9968145489692688,
            0.9960271120071411,
            0.997223436832428,
            0.9958307147026062,
            0.9971640706062317
        ]
    },
    "3950": {
        "similarity": 0.9972937703132629,
        "body": "    n, q = map(int, input().split())\n    a = [0] + list(map(int, input().split()))\n    cnt = [0] * (q + 1)\n    id = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        if not a[i]:\n            continue\n        id[i] = a[i]\n        cnt[a[i]] += 1\n\n    ok = True\n    p = 1\n    ans = []\n    for i in range(1, q + 1):\n        if cnt[i] != id[p]:\n            ok = False\n            break\n        while not id[p]:\n            p += 1\n        ans.append((id[p], p))\n        cnt[id[p]] -= 1\n        p += 1\n\n    for i in range(1, n + 1):\n        if not a[i] and id[i]:\n            ok = False\n            break\n\n    if ok:\n        used = [0] * (n + 1)\n        pos = [[0, 0] for _ in range(q + 1)]\n        for i in range(n, 0, -1):\n            if not a[i] and id[i]:\n                continue\n            p = ans[a[i] - 1][0]\n            l, r = ans[p - 1]\n            if not used[l]:\n                pos[p][0] += 1\n                used[l] = 1\n            else:\n                pos[p][1] += 1\n\n        for i in range(q, 0, -1):\n            ok &= pos[i][0] <= ans[i - 1][1] and ans[i - 1][0] == i\n            if not ok:\n                break\n            ans[ans[i - 1][0] - 1] = (i, ans[i - 1][1] - pos[i][0])\n\n        for i in range(1, n + 1):\n            if id[i]:\n                a[i] = ans[id[i] - 1][0]\n    print('YES' if ok else 'NO')\n    if ok:\n        print(*a[1:])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996992826461792,
            0.9969812035560608,
            0.9957079887390137,
            0.9967215657234192,
            0.9969821572303772,
            0.9969120025634766,
            0.9966374635696411,
            0.9969121217727661,
            0.9951410889625549,
            0.9972937703132629,
            0.997290849685669,
            0.9971121549606323,
            0.9943121671676636,
            0.9954622387886047,
            0.9971550703048706,
            0.9950991272926331,
            0.9948737621307373,
            0.9972469806671143,
            0.9966723918914795,
            0.9969706535339355
        ]
    },
    "3075": {
        "similarity": 0.9971714019775391,
        "body": "n, g = map(int, input().split())\nstations = []\nfor _ in range(n):\n    d, c = map(int, input().split())\n    stations.append((d, c))\ninf = float('inf')\ndp = [[inf] * (g + 1) for _ in range(n)]\ndp[0][0] = 0\nfor i in range(1, n):\n    prev_min_cost = inf\n    fuel_remaining = g\n    for j in range(i - 1, -1, -1):\n        cost_per_gal = stations[i][1]\n        fuel_consumed = min(stations[i][0] - stations[j][0], fuel_remaining)\n        curr_cost = dp[j][fuel_remaining - fuel_consumed] + fuel_consumed * cost_per_gal\n        if curr_cost < prev_min_cost:\n            prev_min_cost, fuel_remaining = curr_cost, fuel_consumed\n    dp[i][g] = prev_min_cost\n\nlast_station_idx = n - 1\nwhile stations[last_station_idx][0] <= stations[-1][0]:\n    last_station_idx -= 1\nif dp[last_station_idx][g] == inf:\n    print(\"cancel road trip\")\nelse:\n    print(dp[-1][g])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963651895523071,
            0.9966842532157898,
            0.9954418540000916,
            0.9971714019775391,
            0.9952035546302795,
            0.9951898455619812,
            0.9968693256378174,
            0.9967976808547974,
            0.9969636797904968,
            0.9953774213790894,
            0.9962231516838074,
            0.9946461915969849,
            0.9966699481010437,
            0.995857834815979,
            0.9964228272438049,
            0.9966119527816772,
            0.9963101148605347,
            0.9955246448516846,
            0.9954715371131897,
            0.9970576763153076
        ]
    },
    "3711": {
        "similarity": 0.9948554635047913,
        "body": "n, m, k = map(int, input().split())\nif min(n, m) < k:\n    print(-1)\nelif max(n, m) > k + 2 or n == m == 1 and k >= 2:\n    print(1)\nelse:\n    print(min(n * m // (k + 1), min(n, m)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916619062423706,
            0.9921700358390808,
            0.9813113808631897,
            0.9943121075630188,
            0.9898810386657715,
            0.992087721824646,
            0.9943297505378723,
            0.9909236431121826,
            0.9931668639183044,
            0.990668773651123,
            0.9936016798019409,
            0.9929215312004089,
            0.994028627872467,
            0.9921956658363342,
            0.993768572807312,
            0.9893468618392944,
            0.9945668578147888,
            0.9933186769485474,
            0.9948554635047913,
            0.9835197925567627
        ]
    }
}