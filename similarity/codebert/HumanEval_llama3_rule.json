{
    "HumanEval/0": {
        "similarity": 0.9998040795326233,
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9965224266052246,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9998040795326233,
            0.9995927214622498,
            0.9998040795326233
        ]
    },
    "HumanEval/1": {
        "similarity": 0.996695876121521,
        "body": "    result = []\n    count = 0\n    temp_str = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            temp_str += char\n        elif char == ')':\n            count -= 1\n            temp_str += char\n        else:\n            if count > 0:\n                temp_str += char\n        if count == 0 and temp_str != '':\n            result.append(temp_str)\n            temp_str = ''",
        "result": "failed: ",
        "similarities": [
            0.9959713816642761,
            0.9947104454040527,
            0.9965507388114929,
            0.9955940246582031,
            0.9948780536651611,
            0.9954026937484741,
            0.9938479065895081,
            0.9964407086372375,
            0.994903564453125,
            0.9959704875946045,
            0.9966264367103577,
            0.995667040348053,
            0.9960240125656128,
            0.9896048307418823,
            0.9929743409156799,
            0.994929850101471,
            0.9955711364746094,
            0.996695876121521,
            0.9951536059379578,
            0.9953909516334534
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9946889281272888,
        "body": "        result = number\n        for _ in range(int(result)):\n            result -= int(result) + 1\n        return result",
        "result": "failed: unexpected indent (<string>, line 12)",
        "similarities": [
            0.9943018555641174,
            0.9894140958786011,
            0.9920080304145813,
            0.9944577813148499,
            0.9940001964569092,
            0.9843990802764893,
            0.9921883940696716,
            0.9939185976982117,
            0.99315345287323,
            0.992950439453125,
            0.9932264089584351,
            0.9946889281272888,
            0.9934045672416687,
            0.9939447045326233,
            0.9935851693153381,
            0.9915451407432556,
            0.9854811429977417,
            0.9923356771469116,
            0.9923805594444275,
            0.9940590262413025
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9975045919418335,
        "body": "    for operation in operations:\n        my_balance = 0\n        for _ in range(operation):\n            my_balance += 1\n        if my_balance <= 0:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9973606467247009,
            0.9968963265419006,
            0.9973911643028259,
            0.9973911643028259,
            0.9973606467247009,
            0.9973606467247009,
            0.9973606467247009,
            0.9932077527046204,
            0.992445170879364,
            0.9975045919418335,
            0.9973606467247009,
            0.9954496622085571,
            0.9973604083061218,
            0.9963782429695129,
            0.9853253960609436,
            0.9973606467247009,
            0.9973606467247009,
            0.995977520942688,
            0.9968494772911072,
            0.9962154030799866
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9962158203125,
        "body": "    total_diff = 0\n    mean_total = 0\n    for num in numbers:\n        diff = abs(num - (mean_total + total_diff) / (len(numbers) + 1))\n        total_diff += diff\n        mean_total += num\n    return total_diff / len(numbers)",
        "result": "failed: ",
        "similarities": [
            0.9959844350814819,
            0.9945332407951355,
            0.9945326447486877,
            0.9945608377456665,
            0.9943414330482483,
            0.9957369565963745,
            0.993377685546875,
            0.9931994080543518,
            0.9946367144584656,
            0.9962158203125,
            0.9931394457817078,
            0.9926286339759827,
            0.9901273846626282,
            0.9958532452583313,
            0.9940475821495056,
            0.9935926198959351,
            0.9925064444541931,
            0.9936824440956116,
            0.994146466255188,
            0.9919894337654114
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9966003894805908,
        "body": "    result = []\n    for i in range(0, len(numbers) * 2 - 1, 2):\n        if i < len(numbers):\n            result.append(numbers[i])\n        result.append(delimeter)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9939215779304504,
            0.9959330558776855,
            0.9960544109344482,
            0.9965540170669556,
            0.9939215779304504,
            0.9960387349128723,
            0.9916669130325317,
            0.9957187175750732,
            0.9957187175750732,
            0.9961926341056824,
            0.9959696531295776,
            0.9937927722930908,
            0.9939215779304504,
            0.9946795105934143,
            0.9960544109344482,
            0.9966003894805908,
            0.9944669008255005,
            0.9962987303733826,
            0.9916120767593384,
            0.9916120767593384
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9970066547393799,
        "body": "    result = []\n    for string in paren_string.split():\n        nesting_level = 0\n        for char in string:\n            if char == '(':\n                nesting_level += 1\n            elif char == ')':\n                nesting_level -= 1\n            if nesting_level < 0:\n                break\n        result.append(nesting_level)",
        "result": "failed: ",
        "similarities": [
            0.9960010051727295,
            0.9965977072715759,
            0.9968044757843018,
            0.994820237159729,
            0.9970066547393799,
            0.9955998659133911,
            0.9953581094741821,
            0.9966257810592651,
            0.9796186089515686,
            0.9961814880371094,
            0.9968044757843018,
            0.9958018064498901,
            0.9886508584022522,
            0.996898353099823,
            0.9968044757843018,
            0.9961653351783752,
            0.9958343505859375,
            0.9953338503837585,
            0.9969941973686218,
            0.9966028332710266
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9961063265800476,
        "body": "    filtered_strings = []\n    for s in strings:\n        if substring <= s:\n            filtered_strings.append(s)\n    return filtered_strings",
        "result": "failed: ",
        "similarities": [
            0.9931439757347107,
            0.995235025882721,
            0.9948112368583679,
            0.9950769543647766,
            0.9941943287849426,
            0.9954655170440674,
            0.9951947927474976,
            0.9928895831108093,
            0.9961063265800476,
            0.9838481545448303,
            0.9956753253936768,
            0.9947311878204346,
            0.9948805570602417,
            0.9950791597366333,
            0.9954317808151245,
            0.9950188994407654,
            0.9953334331512451,
            0.9936001300811768,
            0.9936001300811768,
            0.9936001300811768
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9985219836235046,
        "body": "    product = 1\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n        if num != 0:\n            product *= num\n    return (total_sum, product)",
        "result": "failed: ",
        "similarities": [
            0.997565507888794,
            0.9981948733329773,
            0.9976208209991455,
            0.9974923729896545,
            0.9983001351356506,
            0.9982157349586487,
            0.99821937084198,
            0.998380184173584,
            0.9976801872253418,
            0.998441219329834,
            0.9983285665512085,
            0.9980663657188416,
            0.99821937084198,
            0.9971109628677368,
            0.9901560544967651,
            0.9983674883842468,
            0.9967858195304871,
            0.9975492358207703,
            0.9985219836235046,
            0.9977883100509644
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9977088570594788,
        "body": "    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)",
        "result": "failed: list index out of range",
        "similarities": [
            0.9975899457931519,
            0.9952574372291565,
            0.9944807291030884,
            0.9967892169952393,
            0.9976385235786438,
            0.9973219633102417,
            0.9975899457931519,
            0.9977088570594788,
            0.9951695203781128,
            0.9966572523117065,
            0.9965913891792297,
            0.9918847680091858,
            0.9959913492202759,
            0.991786539554596,
            0.9975507855415344,
            0.9977088570594788,
            0.9972431063652039,
            0.9977088570594788,
            0.9968113303184509,
            0.9952661395072937
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9956978559494019,
        "body": "        for i in range(len(string)):\n            suffix = string[i:]\n            if suffix <= string[::-1]:\n                return string + string[:i][::-1]\n        return string",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9833654165267944,
            0.9949873685836792,
            0.9950563311576843,
            0.9916660785675049,
            0.9912272095680237,
            0.986883282661438,
            0.994134783744812,
            0.9943056702613831,
            0.9943056702613831,
            0.9932851195335388,
            0.9949496388435364,
            0.9860224723815918,
            0.9952387809753418,
            0.9939591288566589,
            0.9950471520423889,
            0.9944245219230652,
            0.9931191802024841,
            0.9956978559494019,
            0.994464099407196,
            0.9923704862594604
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9972528219223022,
        "body": "    result = ''\n    for i in range(len(a)):\n        if int(a[i]) != int(b[i]):\n            result += '1' if a[i] == '1' else '0'\n        else:\n            result += a[i]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9940703511238098,
            0.9923934936523438,
            0.9969205260276794,
            0.9972356557846069,
            0.9958913922309875,
            0.9884524941444397,
            0.996945858001709,
            0.997175395488739,
            0.9939952492713928,
            0.993911862373352,
            0.9969459176063538,
            0.9946036338806152,
            0.9972528219223022,
            0.9964185357093811,
            0.9964123964309692,
            0.996559739112854,
            0.997017502784729,
            0.9946036338806152,
            0.9953931570053101,
            0.9970861673355103
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9984309673309326,
        "body": "    max_length = 0\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result",
        "result": "passed",
        "similarities": [
            0.9981414675712585,
            0.9951761364936829,
            0.998199462890625,
            0.9984309673309326,
            0.9984309673309326,
            0.9960116147994995,
            0.9984224438667297,
            0.9984309673309326,
            0.9969372153282166,
            0.9984224438667297,
            0.994674563407898,
            0.9974453449249268,
            0.9983291625976562,
            0.995000958442688,
            0.9983411431312561,
            0.9945530295372009,
            0.9984309673309326,
            0.9978398680686951,
            0.9978929162025452,
            0.9983411431312561
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9962144494056702,
        "body": "    result = a\n    for i in range(a, 0, -1):\n        if b % i == 0 and a % i == 0:\n            result = i\n            break",
        "result": "failed: ",
        "similarities": [
            0.9962144494056702,
            0.9962144494056702,
            0.9951174855232239,
            0.9904267191886902,
            0.9959753751754761,
            0.9959753751754761,
            0.9958720803260803,
            0.9951174855232239,
            0.9951174855232239,
            0.9959087371826172,
            0.9899137616157532,
            0.9958720803260803,
            0.9956173300743103,
            0.9956949949264526,
            0.996047854423523,
            0.9932557940483093,
            0.9889058470726013,
            0.9884356260299683,
            0.9951174855232239,
            0.9962144494056702
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9972218871116638,
        "body": "    result = []\n    for length in range(1, len(string) + 1):\n        for i in range(len(string) - length + 1):\n            prefix = string[i:i+length]\n            result.append(prefix)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9970268607139587,
            0.9969275593757629,
            0.9972218871116638,
            0.9962762594223022,
            0.9969465136528015,
            0.997221827507019,
            0.9927074313163757,
            0.9970460534095764,
            0.9927759766578674,
            0.9965011477470398,
            0.9962385296821594,
            0.9957204461097717,
            0.9960798025131226,
            0.9964094758033752,
            0.9970459342002869,
            0.9904527068138123,
            0.9935812950134277,
            0.9934144616127014,
            0.9948137998580933,
            0.9972218871116638
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9986186623573303,
        "body": "    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result.strip()",
        "result": "passed",
        "similarities": [
            0.9986186623573303,
            0.9986186623573303,
            0.9985787272453308,
            0.9972478151321411,
            0.9985787272453308,
            0.9974923729896545,
            0.9982323050498962,
            0.9986186623573303,
            0.9985787272453308,
            0.9986186623573303,
            0.9986186623573303,
            0.9974237084388733,
            0.9965919852256775,
            0.9950322508811951,
            0.9986186623573303,
            0.9961446523666382,
            0.9982256889343262,
            0.9986186623573303,
            0.996592104434967,
            0.9986186623573303
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9918824434280396,
        "body": "    characters = {}\n    for char in string.lower():\n        if char not <= characters:\n            characters += [char]\n    return len(characters)",
        "result": "failed: invalid syntax (<string>, line 12)",
        "similarities": [
            0.9812502861022949,
            0.9891122579574585,
            0.987218976020813,
            0.9843011498451233,
            0.9884423613548279,
            0.9899041056632996,
            0.9862297773361206,
            0.98590087890625,
            0.9918824434280396,
            0.9890823364257812,
            0.9896109700202942,
            0.9875499606132507,
            0.9616832733154297,
            0.9860004782676697,
            0.989226222038269,
            0.988315999507904,
            0.9895000457763672,
            0.9904145002365112,
            0.9848499298095703,
            0.9896842837333679
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9952631592750549,
        "body": "    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for char in music_string:\n        if char == '|':\n            continue\n        note = char + '|'\n        while note != '':\n            if note in beats_per_note:\n                result.append(beats_per_note[note])\n                break\n            note = note[:-1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9942751526832581,
            0.9951705932617188,
            0.9936823844909668,
            0.9942376017570496,
            0.9927237629890442,
            0.9946290850639343,
            0.9913360476493835,
            0.9926816821098328,
            0.9927598834037781,
            0.9952631592750549,
            0.9937808513641357,
            0.9926116466522217,
            0.9918365478515625,
            0.9943498373031616,
            0.9911482930183411,
            0.9884763956069946,
            0.9917122721672058,
            0.9934931397438049,
            0.9941111207008362,
            0.9932022094726562
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9964224100112915,
        "body": "    count = 0\n    index = 0\n    for _ in range(len(string) + 1):\n        if string[index:index + len(substring)] <= substring:\n            count += 1\n            index += len(substring)\n        else:\n            index += 1",
        "result": "failed: ",
        "similarities": [
            0.9952300190925598,
            0.9946501851081848,
            0.9949337840080261,
            0.9920947551727295,
            0.9961914420127869,
            0.9955806732177734,
            0.9939167499542236,
            0.9948335289955139,
            0.9939167499542236,
            0.9964224100112915,
            0.9945314526557922,
            0.9960187673568726,
            0.9939167499542236,
            0.9959018230438232,
            0.9950535297393799,
            0.9892072081565857,
            0.9957988262176514,
            0.9926413297653198,
            0.9954845309257507,
            0.9942163228988647
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9900358319282532,
        "body": "    for i in range(len(numbers.split()) - 1):\n        min_idx = i\n        for j in range(i + 1, len(numbers.split())):\n            if int(get_value(numbers.split()[j])) <= int(get_value(numbers.split()[min_idx])):\n                min_idx = j\n        numbers_list = list(numbers.split())\n        numbers_list[i], numbers_list[min_idx] = numbers_list[min_idx], numbers_list[i]\n    return ' '.join(map(str, numbers_list))\n\n\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return num_dict[num]",
        "result": "failed: local variable 'numbers_list' referenced before assignment",
        "similarities": [
            0.9888781309127808,
            0.9873057007789612,
            0.975408673286438,
            0.9750776886940002,
            0.9884579181671143,
            0.9896479249000549,
            0.9834606647491455,
            0.9892176389694214,
            0.9863747954368591,
            0.9874813556671143,
            0.9892195463180542,
            0.9866074323654175,
            0.9871034026145935,
            0.9656617045402527,
            0.9734783172607422,
            0.9884732961654663,
            0.9868541359901428,
            0.9875718355178833,
            0.9900358319282532,
            0.9895734190940857
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9978429079055786,
        "body": "    closest_pair = None\n    min_diff = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])",
        "result": "failed: ",
        "similarities": [
            0.9976734519004822,
            0.9916510581970215,
            0.997249186038971,
            0.997538149356842,
            0.9969257712364197,
            0.9975057244300842,
            0.9971204400062561,
            0.9963405132293701,
            0.9830163717269897,
            0.9978429079055786,
            0.9977002739906311,
            0.9967854022979736,
            0.9972096681594849,
            0.9968434572219849,
            0.9977927803993225,
            0.9969006776809692,
            0.9973154664039612,
            0.9970352053642273,
            0.9972856640815735,
            0.997124433517456
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9942647218704224,
        "body": "    result = []\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    for num in numbers:\n        new_num = (num - min_value) / (max_value - min_value)\n        result.append(new_num)",
        "result": "failed: ",
        "similarities": [
            0.9884920716285706,
            0.9921441674232483,
            0.9932813048362732,
            0.9915773272514343,
            0.9845751523971558,
            0.9934658408164978,
            0.9898715019226074,
            0.9917454123497009,
            0.9879279136657715,
            0.9934657216072083,
            0.9936283826828003,
            0.9921490550041199,
            0.9942647218704224,
            0.9930345416069031,
            0.9940761923789978,
            0.9931368827819824,
            0.9833928942680359,
            0.9911847710609436,
            0.9862933158874512,
            0.9880461692810059
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9994527697563171,
        "body": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)",
        "result": "failed: ",
        "similarities": [
            0.9994527101516724,
            0.9994527101516724,
            0.9994527101516724,
            0.9994527101516724,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9994527697563171,
            0.9899042248725891,
            0.9994527101516724,
            0.9992907643318176,
            0.9994527101516724,
            0.9994527101516724
        ]
    },
    "HumanEval/23": {
        "similarity": 0.996179461479187,
        "body": "    my_length = 0\n    for char in string:\n        my_length += 1",
        "result": "failed: ",
        "similarities": [
            0.9961302876472473,
            0.9954402446746826,
            0.9961270689964294,
            0.9949079751968384,
            0.9956914782524109,
            0.9908061623573303,
            0.9934473633766174,
            0.9961132407188416,
            0.9943715333938599,
            0.9961132407188416,
            0.9950533509254456,
            0.9961132407188416,
            0.9896671772003174,
            0.9910436272621155,
            0.9955175518989563,
            0.9961302876472473,
            0.996179461479187,
            0.9961132407188416,
            0.9961302876472473,
            0.9961302876472473
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9955888986587524,
        "body": "    i = 1\n    largest = 0\n    for i in range(1, n):\n        if n <= i and n % i == 0:\n            largest = i\n    return largest",
        "result": "failed: ",
        "similarities": [
            0.9862512350082397,
            0.995445966720581,
            0.9848456978797913,
            0.9942640066146851,
            0.9945411682128906,
            0.993347704410553,
            0.9940700531005859,
            0.9931353330612183,
            0.9925491213798523,
            0.9953880310058594,
            0.9858239889144897,
            0.993998110294342,
            0.9890895485877991,
            0.9942632913589478,
            0.9925089478492737,
            0.9941717386245728,
            0.9946547150611877,
            0.9938451647758484,
            0.9954757690429688,
            0.9955888986587524
        ]
    },
    "HumanEval/25": {
        "similarity": 0.995029866695404,
        "body": "    factors = []\n    i = 2\n    while True:\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.extend([i] * count)\n        if i * i > n:\n            break\n        i += 1",
        "result": "failed: ",
        "similarities": [
            0.9935780763626099,
            0.9936990141868591,
            0.9942325949668884,
            0.9929633140563965,
            0.9942131042480469,
            0.995029866695404,
            0.9945842623710632,
            0.9925148487091064,
            0.9911720156669617,
            0.9808660745620728,
            0.99443519115448,
            0.9945243000984192,
            0.9946025013923645,
            0.993003249168396,
            0.9947401285171509,
            0.9742501974105835,
            0.9925743937492371,
            0.9933706521987915,
            0.9932011961936951,
            0.9942063093185425
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9980936646461487,
        "body": "    result = []\n    seen = []\n    for num in numbers:\n        if num not in seen:\n            seen.append(num)\n            result.append(num)",
        "result": "failed: ",
        "similarities": [
            0.9980555176734924,
            0.9968807101249695,
            0.9980555176734924,
            0.9980555176734924,
            0.9978417158126831,
            0.9923698306083679,
            0.996439516544342,
            0.997599184513092,
            0.9980936646461487,
            0.9978042244911194,
            0.9980326294898987,
            0.9941942095756531,
            0.9973927736282349,
            0.9980326294898987,
            0.9980553984642029,
            0.9980326294898987,
            0.9980555176734924,
            0.9980326294898987,
            0.9980555176734924,
            0.9920017719268799
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9987044334411621,
        "body": "    result = \"\"\n    for char in string:\n        if char <= 'z':\n            result += char.upper()\n        else:\n            result += char.lower()",
        "result": "failed: ",
        "similarities": [
            0.9986183643341064,
            0.9954513907432556,
            0.9982287883758545,
            0.9974908232688904,
            0.9986183643341064,
            0.9986183643341064,
            0.9986183643341064,
            0.9987044334411621,
            0.9975710511207581,
            0.9956899881362915,
            0.9986183643341064,
            0.9987044334411621,
            0.9986092448234558,
            0.9987044334411621,
            0.9941896200180054,
            0.9944159984588623,
            0.9986092448234558,
            0.9981165528297424,
            0.9975710511207581,
            0.9986183643341064
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9961848855018616,
        "body": "    result = ''\n    for s in strings:\n        if len(result) <= 0:\n            result = s\n        else:\n            result += s",
        "result": "failed: ",
        "similarities": [
            0.9883104562759399,
            0.9955570697784424,
            0.9955435395240784,
            0.9892903566360474,
            0.9943028688430786,
            0.9928493499755859,
            0.995681643486023,
            0.9871625304222107,
            0.9956642985343933,
            0.9961848855018616,
            0.9909364581108093,
            0.9961848855018616,
            0.9961848258972168,
            0.9948972463607788,
            0.9956642985343933,
            0.9913272857666016,
            0.9910328388214111,
            0.995673656463623,
            0.9956642985343933,
            0.995673656463623
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9958602786064148,
        "body": "    result = []\n    for s in strings:\n        if s <= prefix:\n            result.append(s)",
        "result": "failed: ",
        "similarities": [
            0.9934315085411072,
            0.9931640625,
            0.9784234762191772,
            0.9953720569610596,
            0.9958602786064148,
            0.9950310587882996,
            0.9958602786064148,
            0.9958602786064148,
            0.992660403251648,
            0.9784234762191772,
            0.9907110333442688,
            0.9930305480957031,
            0.9944596886634827,
            0.9945203065872192,
            0.9950501322746277,
            0.9917581677436829,
            0.9955530762672424,
            0.9914393424987793,
            0.9958040118217468,
            0.9958602786064148
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9959564208984375,
        "body": "my_list = []\n\nfor num in l:\n    if num <= 0:\n        pass\n    else:\n        my_list.append(num)",
        "result": "failed: name 'l' is not defined",
        "similarities": [
            0.9906702637672424,
            0.9943759441375732,
            0.9954597353935242,
            0.9959564208984375,
            0.9937955737113953,
            0.9956380128860474,
            0.9945229291915894,
            0.9832850098609924,
            0.9954625368118286,
            0.9917222857475281,
            0.9951705932617188,
            0.9943759441375732,
            0.9953494668006897,
            0.9943759441375732,
            0.9951705932617188,
            0.9954625368118286,
            0.9943759441375732,
            0.9957399964332581,
            0.9908666014671326,
            0.9925070405006409
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9966276288032532,
        "body": "    for i in range(2, int(n ** 0.5) + 1):\n        if n <= i:\n            return False\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9966191649436951,
            0.9961047768592834,
            0.9966079592704773,
            0.9950567483901978,
            0.9959622621536255,
            0.9964046478271484,
            0.9894315600395203,
            0.9894315600395203,
            0.996142566204071,
            0.9954632520675659,
            0.9942498803138733,
            0.9959772229194641,
            0.995478093624115,
            0.9966276288032532,
            0.9854857921600342,
            0.9960925579071045,
            0.9958779215812683,
            0.9935409426689148,
            0.9964659810066223,
            0.9916315674781799
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9936261773109436,
        "body": "    for i in range(1, len(xs), 2):\n        result = xs[i]\n        for j in range(i-1, -1, -1):\n            result = (x * result) + xs[j]\n        return -result / result",
        "result": "failed: name 'x' is not defined",
        "similarities": [
            0.9910322427749634,
            0.9888060688972473,
            0.9909594655036926,
            0.993401288986206,
            0.9922501444816589,
            0.9924715161323547,
            0.9875836968421936,
            0.989349365234375,
            0.9936261773109436,
            0.9910842776298523,
            0.9927071332931519,
            0.9911018013954163,
            0.9907581806182861,
            0.9918610453605652,
            0.989935040473938,
            0.9904348254203796,
            0.9880736470222473,
            0.9815399050712585,
            0.9870874285697937,
            0.9912175536155701
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9947076439857483,
        "body": "    my_result = []\n    for i, my_val in enumerate(l):\n        if i % 3 <= 0:\n            my_result.append(my_val)\n        else:\n            temp_list = [x for x in l[i::] if (i % 3) <= 0]\n            my_result.extend(sorted(temp_list))",
        "result": "failed: 'NoneType' object is not iterable",
        "similarities": [
            0.9932658672332764,
            0.9943891763687134,
            0.9947076439857483,
            0.9938057661056519,
            0.9910480380058289,
            0.9887096881866455,
            0.9930575489997864,
            0.9910340905189514,
            0.9903639554977417,
            0.9918277263641357,
            0.990341067314148,
            0.9826014637947083,
            0.9915753602981567,
            0.9940358996391296,
            0.9943745136260986,
            0.9930837750434875,
            0.9939978718757629,
            0.9939639568328857,
            0.9884740114212036,
            0.9932026267051697
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9945520162582397,
        "body": "    my_set = set()\n    for element in l:\n        if element <= 0:\n            continue\n        my_set.add(element)\n    return sorted(list(my_set))",
        "result": "failed: ",
        "similarities": [
            0.9923924803733826,
            0.9930305480957031,
            0.9922004342079163,
            0.9914169311523438,
            0.9945520162582397,
            0.9914751648902893,
            0.9926864504814148,
            0.9912546873092651,
            0.9918528199195862,
            0.9934451580047607,
            0.9933887124061584,
            0.9920064806938171,
            0.991713285446167,
            0.9920690655708313,
            0.9914271831512451,
            0.9905360341072083,
            0.9910407066345215,
            0.9933581948280334,
            0.9944875836372375,
            0.9872561097145081
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9948239922523499,
        "body": "    max_found = l[0]\n    for my_element in l:\n        if my_element > max_found:\n            max_found = my_element",
        "result": "failed: ",
        "similarities": [
            0.9918139576911926,
            0.9941040873527527,
            0.967626690864563,
            0.9947736859321594,
            0.9769006371498108,
            0.9923493266105652,
            0.9947257041931152,
            0.9943372011184692,
            0.9944303631782532,
            0.991603434085846,
            0.9945822358131409,
            0.9948239922523499,
            0.9918139576911926,
            0.9948086142539978,
            0.9943313598632812,
            0.9893285036087036,
            0.9943052530288696,
            0.991603434085846,
            0.9943270683288574,
            0.9908062815666199
        ]
    },
    "HumanEval/36": {
        "similarity": 0.998264729976654,
        "body": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            for digit in str_i:\n                if digit == '7':\n                    count += 1",
        "result": "failed: ",
        "similarities": [
            0.998264729976654,
            0.9972401857376099,
            0.9924696087837219,
            0.998264729976654,
            0.9945425987243652,
            0.9977563619613647,
            0.998264729976654,
            0.9975903034210205,
            0.998264729976654,
            0.998169481754303,
            0.9933724999427795,
            0.9968693256378174,
            0.997726321220398,
            0.998264729976654,
            0.9973829388618469,
            0.998169481754303,
            0.9981303811073303,
            0.998264729976654,
            0.9975205659866333,
            0.9933086037635803
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9920764565467834,
        "body": "    even_values = l[1::2]\n    sorted_even = [x for x in even_values if x <= even_values[-1]]\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted_even.pop(0) if sorted_even else v)\n        else:\n            result.append(v)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9580463767051697,
            0.9917046427726746,
            0.9876466393470764,
            0.9910589456558228,
            0.9881728291511536,
            0.9620204567909241,
            0.9853190183639526,
            0.9906185865402222,
            0.9912079572677612,
            0.9917209148406982,
            0.9911858439445496,
            0.9896010160446167,
            0.9920764565467834,
            0.9908786416053772,
            0.9908469319343567,
            0.9904589653015137,
            0.9918362498283386,
            0.991145670413971,
            0.9845450520515442,
            0.9917146563529968
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9961402416229248,
        "body": "    result = \"\"\n    for i in range((len(s) + 2) // 3):\n        group = s[(3 * i):min((3 * i + 3), len(s))]\n        if len(group) == 3:\n            result += group[1] + group[0]\n        else:\n            result += group",
        "result": "failed: ",
        "similarities": [
            0.9929426312446594,
            0.9915284514427185,
            0.9960132241249084,
            0.9956437349319458,
            0.995235025882721,
            0.9949442148208618,
            0.9961402416229248,
            0.9901037812232971,
            0.9959629774093628,
            0.9961402416229248,
            0.995837390422821,
            0.9957583546638489,
            0.9939761161804199,
            0.9960843324661255,
            0.9958622455596924,
            0.9948668479919434,
            0.9897207021713257,
            0.9776301980018616,
            0.9948175549507141,
            0.9958089590072632
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9964631795883179,
        "body": "    a = 0\n    b = 1\n    result = None\n    for _ in range(n):\n        a, b = b, a + b\n        if a <= 1:\n            continue\n        is_prime = True\n        for i in range(2, int(a ** 0.5) + 1):\n            if a % i == 0:\n                is_prime = False\n                break\n        if is_prime and result is None:\n            result = a\n    return result",
        "result": "failed: ",
        "similarities": [
            0.994667649269104,
            0.9842082858085632,
            0.9950496554374695,
            0.9961851835250854,
            0.9922941327095032,
            0.9963088631629944,
            0.9903199076652527,
            0.9950670003890991,
            0.9956129193305969,
            0.995813250541687,
            0.994903564453125,
            0.9911242127418518,
            0.9954513907432556,
            0.9956499338150024,
            0.9949160218238831,
            0.9964631795883179,
            0.9940071105957031,
            0.9959990978240967,
            0.9963425397872925,
            0.9956594705581665
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9969198107719421,
        "body": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] <= 0:\n                    return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9969198107719421,
            0.9917666912078857,
            0.9955834150314331,
            0.9969198107719421,
            0.9969198107719421,
            0.9969198107719421,
            0.9857927560806274,
            0.9969198107719421,
            0.9965955018997192,
            0.9969198107719421,
            0.9969198107719421,
            0.9969198107719421,
            0.9860033988952637,
            0.9935741424560547,
            0.9860033988952637,
            0.9956178069114685,
            0.995726466178894,
            0.9969198107719421,
            0.9969198107719421,
            0.9969198107719421
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9955018758773804,
        "body": "    collision_count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i + j) <= n:\n                collision_count += 1\n    return collision_count",
        "result": "failed: ",
        "similarities": [
            0.9938178062438965,
            0.9895414113998413,
            0.9922270774841309,
            0.995204508304596,
            0.9936549663543701,
            0.9941033124923706,
            0.9811273217201233,
            0.995254635810852,
            0.9955018758773804,
            0.9946194887161255,
            0.9949935078620911,
            0.9933685660362244,
            0.9951145648956299,
            0.9913311004638672,
            0.9943010210990906,
            0.9945297241210938,
            0.9916371703147888,
            0.990249514579773,
            0.9944279193878174,
            0.993423581123352
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9950342774391174,
        "body": "    result = []\n    for i, x in enumerate(l):\n        result.append(x + 1)",
        "result": "failed: ",
        "similarities": [
            0.9923989176750183,
            0.9853729605674744,
            0.9950262308120728,
            0.9924477934837341,
            0.9936361908912659,
            0.9908687472343445,
            0.9931176900863647,
            0.9931526184082031,
            0.992111325263977,
            0.9946742653846741,
            0.9880661368370056,
            0.992997407913208,
            0.992350161075592,
            0.9942556619644165,
            0.9936361908912659,
            0.9899598956108093,
            0.9950342774391174,
            0.9891265034675598,
            0.9950262308120728,
            0.989245593547821
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9968010783195496,
        "body": "    for i in range(len(l)):\n        my_var = l[i]\n        for j in range(i + 1, len(l)):\n            my_second_var = l[j]\n            if my_var + my_second_var <= 0:\n                return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9961664080619812,
            0.9906945824623108,
            0.995945394039154,
            0.9832484722137451,
            0.995945394039154,
            0.9945656657218933,
            0.9965589642524719,
            0.99663245677948,
            0.9966161847114563,
            0.9966170787811279,
            0.9967225790023804,
            0.9957633018493652,
            0.9968010783195496,
            0.986976146697998,
            0.9957085847854614,
            0.9951780438423157,
            0.9931002259254456,
            0.9961740374565125,
            0.9968010783195496,
            0.9962527751922607
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9953871369361877,
        "body": "    digits = \"012345678\"\n    result = \"\"\n    for i in range(len(str(x))):\n        remainder = x % base\n        if remainder < 10:\n            result = digits[remainder] + result\n        else:\n            result = str(remainder) + result\n        x //= base\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9926464557647705,
            0.9916138052940369,
            0.994114339351654,
            0.9864524006843567,
            0.9931437969207764,
            0.9953871369361877,
            0.9907810091972351,
            0.9944258332252502,
            0.9947152733802795,
            0.9931804537773132,
            0.9925384521484375,
            0.9945828318595886,
            0.9953747987747192,
            0.9937009215354919,
            0.9898973107337952,
            0.9947584271430969,
            0.9895256757736206,
            0.9945014119148254,
            0.9890437722206116,
            0.9938544034957886
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9943839907646179,
        "body": "    for _ in range(2):\n        area = (a * h) / 2",
        "result": "failed: ",
        "similarities": [
            0.9889528155326843,
            0.9892351031303406,
            0.9939029216766357,
            0.9920800924301147,
            0.990139901638031,
            0.9939032196998596,
            0.9939032196998596,
            0.9921772480010986,
            0.9943839907646179,
            0.9928725361824036,
            0.9928725361824036,
            0.9837484955787659,
            0.9927068948745728,
            0.9936805367469788,
            0.9899500608444214,
            0.9928725361824036,
            0.991910457611084,
            0.9939271807670593,
            0.9854835867881775,
            0.9909073710441589
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9957578778266907,
        "body": "    my_result = [0, 0, 2]\n    for i in range(3, n):\n        temp_sum = 0\n        for j in range(i-3, i):\n            temp_sum += my_result[j]\n        my_result.append(temp_sum)\n    return my_result[n-1]",
        "result": "failed: ",
        "similarities": [
            0.9934325814247131,
            0.9955338835716248,
            0.9910316467285156,
            0.9923738241195679,
            0.9934399127960205,
            0.994960367679596,
            0.9938410520553589,
            0.9944647550582886,
            0.9947349429130554,
            0.9957578778266907,
            0.9940834045410156,
            0.9922609925270081,
            0.9949401021003723,
            0.99431973695755,
            0.9939171671867371,
            0.9950781464576721,
            0.994199275970459,
            0.9922916293144226,
            0.9942724108695984,
            0.9908819794654846
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9940345287322998,
        "body": "        n = len(l)\n        if n == 0:\n            return None\n        sorted_l = []\n        for i in l:\n            sorted_l.append(i)\n        sorted_l.sort()\n        if n % 2 == 1:\n            return sorted_l[n // 2]\n        else:\n            mid1 = sorted_l[n // 2 - 1]\n            mid2 = sorted_l[n // 2]\n            return (mid1 + mid2) / 2",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9939665794372559,
            0.9925221800804138,
            0.9940229058265686,
            0.9938172698020935,
            0.9940345287322998,
            0.9932259917259216,
            0.9887815117835999,
            0.9924501180648804,
            0.992713451385498,
            0.9940242767333984,
            0.9937211871147156,
            0.9890683889389038,
            0.9918730854988098,
            0.991154134273529,
            0.9837226867675781,
            0.9801549315452576,
            0.9868748188018799,
            0.9915284514427185,
            0.9868054986000061,
            0.9924559593200684
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9959136843681335,
        "body": "    my_text = text.lower()\n    for i in range(len(my_text)):\n        if i >= len(my_text) - i - 1:\n            return True\n        if my_text[i] != my_text[len(my_text) - i - 1]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9957548379898071,
            0.986738920211792,
            0.9956365823745728,
            0.9950194358825684,
            0.9948744773864746,
            0.9945459961891174,
            0.9923886656761169,
            0.9943486452102661,
            0.9955896139144897,
            0.9919750094413757,
            0.9915683269500732,
            0.9957401156425476,
            0.9953014254570007,
            0.9947678446769714,
            0.9823070168495178,
            0.9948098063468933,
            0.992913007736206,
            0.9959051012992859,
            0.9957515597343445,
            0.9959136843681335
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9954156279563904,
        "body": "    result = n\n    for _ in range(abs(n)):\n        result = (result * result) % p",
        "result": "failed: ",
        "similarities": [
            0.9933845400810242,
            0.9951454997062683,
            0.9953916668891907,
            0.9942649006843567,
            0.9951453804969788,
            0.9954156279563904,
            0.9924210906028748,
            0.9953352212905884,
            0.9904941916465759,
            0.9922756552696228,
            0.9939810037612915,
            0.9924212098121643,
            0.9893524050712585,
            0.9950410723686218,
            0.9923380613327026,
            0.993823230266571,
            0.9930909872055054,
            0.9936850666999817,
            0.9931060671806335,
            0.9909349679946899
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9935744404792786,
        "body": "    result = \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.lower() >= \"a\" and ch.lower() <= \"z\" else ch for ch in s])",
        "result": "failed: ",
        "similarities": [
            0.9916867017745972,
            0.9895139932632446,
            0.9906647205352783,
            0.9884820580482483,
            0.9919722676277161,
            0.9931451678276062,
            0.9935744404792786,
            0.9934976696968079,
            0.9928832054138184,
            0.9911636710166931,
            0.9931451678276062,
            0.9935393929481506,
            0.9900894165039062,
            0.9919469952583313,
            0.992664635181427,
            0.9916630983352661,
            0.9931451678276062,
            0.9923111796379089,
            0.9869366884231567,
            0.9914867877960205
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9937409162521362,
        "body": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9937409162521362,
            0.9924254417419434,
            0.9795385599136353,
            0.9921625852584839,
            0.9932217001914978,
            0.9817253947257996,
            0.9814140200614929,
            0.9909243583679199,
            0.9933324456214905,
            0.9925669431686401,
            0.9887214303016663,
            0.9906508922576904,
            0.991478681564331,
            0.9928914308547974,
            0.9929640889167786,
            0.9899265766143799,
            0.9935609102249146,
            0.9931944608688354,
            0.9913978576660156,
            0.9885980486869812
        ]
    },
    "HumanEval/52": {
        "similarity": 0.998529314994812,
        "body": "    for num in l:\n        if num > t:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.998529314994812,
            0.9943784475326538,
            0.998529314994812,
            0.9977787733078003,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.9977787733078003,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.998529314994812,
            0.9970920085906982,
            0.9909332990646362,
            0.9895997643470764
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9940719604492188,
        "body": "    for _ in range(1):\n        my_sum = x\n        my_sum += y",
        "result": "failed: ",
        "similarities": [
            0.9909559488296509,
            0.9940524697303772,
            0.9900753498077393,
            0.9931644797325134,
            0.9749180674552917,
            0.9837327599525452,
            0.9882109761238098,
            0.9940397143363953,
            0.9940719604492188,
            0.9937160015106201,
            0.9934337139129639,
            0.9885284304618835,
            0.9837326407432556,
            0.9901843667030334,
            0.9853364825248718,
            0.9909559488296509,
            0.9940211772918701,
            0.9927229881286621,
            0.9939155578613281,
            0.9940397143363953
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9929873943328857,
        "body": "    for char in set(s0):\n        my_count = 0\n        for s in (s0, s1):\n            my_count += s.count(char)\n        if my_count != 2:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9899642467498779,
            0.992270827293396,
            0.9929873943328857,
            0.9926934838294983,
            0.9926091432571411,
            0.9891728758811951,
            0.9907213449478149,
            0.9902235269546509,
            0.9890227317810059,
            0.9814759492874146,
            0.9908208250999451,
            0.9849746227264404,
            0.9840874075889587,
            0.9890074729919434,
            0.9837310314178467,
            0.9841609597206116,
            0.990229070186615,
            0.9926791787147522,
            0.9901506304740906,
            0.9847350120544434
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9940625429153442,
        "body": "my_result = 0\nmy_temp = 1\nfor my_index in range(n):\n    if my_index <= 1:\n        my_result = my_index\n    else:\n        my_temp, my_result = my_result, my_temp + my_result",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9920473694801331,
            0.9832876324653625,
            0.9938104748725891,
            0.9910379648208618,
            0.9907167553901672,
            0.9897481203079224,
            0.9911943674087524,
            0.9884348511695862,
            0.9804009199142456,
            0.9907798767089844,
            0.9933863282203674,
            0.9929764270782471,
            0.9879242777824402,
            0.9905901551246643,
            0.978232741355896,
            0.9923481345176697,
            0.9940625429153442,
            0.9935891032218933,
            0.9893240928649902,
            0.9931938052177429
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9983687400817871,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            if open_count <= 0:\n                return False\n            open_count -= 1\n    return open_count == 0",
        "result": "passed",
        "similarities": [
            0.9982308745384216,
            0.9980188012123108,
            0.9982308745384216,
            0.9982308745384216,
            0.998243510723114,
            0.9965326189994812,
            0.9982028603553772,
            0.995937168598175,
            0.9982308745384216,
            0.9974994659423828,
            0.9982308745384216,
            0.9981240034103394,
            0.99737149477005,
            0.998164713382721,
            0.9983687400817871,
            0.998243510723114,
            0.9983475208282471,
            0.9951921105384827,
            0.9857203960418701,
            0.9980047345161438
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9967867136001587,
        "body": "    for i in range(len(l) - 1):\n        if l[i] <= l[i + 1]:\n            pass\n        else:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9961759448051453,
            0.9961759448051453,
            0.9906851053237915,
            0.9961759448051453,
            0.9961759448051453,
            0.9941440224647522,
            0.994929850101471,
            0.9961759448051453,
            0.9929406046867371,
            0.9949747323989868,
            0.9957605004310608,
            0.9961759448051453,
            0.9961759448051453,
            0.9961759448051453,
            0.9954243898391724,
            0.9967867136001587,
            0.9923738241195679,
            0.9957655668258667,
            0.9961759448051453,
            0.9944526553153992
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9911797046661377,
        "body": "    for var1 in set(l1):\n        if var1 <= len(l2) and l2[var1 - 1] == var1:\n            my_var = True\n        else:\n            my_var = False\n    common_elements = []\n    for var2 in l1[:]:\n        if var2 == var1 and my_var:\n            common_elements.append(var2)\n    common_elements.sort()\n    return [var3 for var3 in set(common_elements)]",
        "result": "failed: ",
        "similarities": [
            0.9883794188499451,
            0.9834486246109009,
            0.976662278175354,
            0.9870244264602661,
            0.9816117882728577,
            0.9862321615219116,
            0.9906567335128784,
            0.981237530708313,
            0.9906622171401978,
            0.986673891544342,
            0.9878418445587158,
            0.9869537353515625,
            0.9902625679969788,
            0.9880752563476562,
            0.9891407489776611,
            0.9906688332557678,
            0.9891844391822815,
            0.9911797046661377,
            0.987281084060669,
            0.98446124792099
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9955884218215942,
        "body": "    i = 2\n    while i <= n // i:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            i = 2\n    return i",
        "result": "failed: ",
        "similarities": [
            0.9955884218215942,
            0.9917820692062378,
            0.9954926371574402,
            0.9942930340766907,
            0.9952352643013,
            0.9940356016159058,
            0.9941185712814331,
            0.9954177737236023,
            0.9949826598167419,
            0.9937073588371277,
            0.9945089221000671,
            0.9941605925559998,
            0.9922770261764526,
            0.9832057952880859,
            0.9947688579559326,
            0.993916392326355,
            0.9925643801689148,
            0.9954177737236023,
            0.9953181743621826,
            0.9950982332229614
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9978218078613281,
        "body": "    my_sum = 0\n    for i in range(1, n + 1):\n        my_sum += i",
        "result": "failed: ",
        "similarities": [
            0.995951235294342,
            0.9978218078613281,
            0.9976956248283386,
            0.993446946144104,
            0.9960532188415527,
            0.9976956248283386,
            0.9976956248283386,
            0.9905825257301331,
            0.9978218078613281,
            0.9967523217201233,
            0.9947842955589294,
            0.9976956248283386,
            0.9975104331970215,
            0.9978218078613281,
            0.9959022402763367,
            0.9972262978553772,
            0.995951235294342,
            0.9960458874702454,
            0.9972262978553772,
            0.9954829812049866
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9981819987297058,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count <= 0:\n                return False\n            open_count -= 1\n    return open_count == 0",
        "result": "passed",
        "similarities": [
            0.9969156980514526,
            0.9970318675041199,
            0.998012363910675,
            0.9953520894050598,
            0.997733473777771,
            0.9946036338806152,
            0.9979965686798096,
            0.9885230660438538,
            0.9978091716766357,
            0.9963549375534058,
            0.9981189370155334,
            0.9979657530784607,
            0.9979965686798096,
            0.998174786567688,
            0.9979657530784607,
            0.9981819987297058,
            0.9981819987297058,
            0.9981819987297058,
            0.9975342154502869,
            0.998174786567688
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9954139590263367,
        "body": "    for i in range(1, len(xs)):\n        my_var = xs[i] * i\n        for j in range(i):\n            my_var += xs[j + 1] * (i - j)",
        "result": "failed: ",
        "similarities": [
            0.9915705323219299,
            0.9942886829376221,
            0.9934630990028381,
            0.9912434816360474,
            0.9929100871086121,
            0.9927554130554199,
            0.9941623210906982,
            0.9927444458007812,
            0.9939125776290894,
            0.99237060546875,
            0.9954139590263367,
            0.988122820854187,
            0.9901552796363831,
            0.9948307871818542,
            0.9943296313285828,
            0.992160975933075,
            0.9945132732391357,
            0.9935346841812134,
            0.9904131889343262,
            0.9934210777282715
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9950867891311646,
        "body": "    my_result = 0\n    for _ in range(n):\n        if _ < 2:\n            my_result = 0\n        elif _ == 2:\n            my_result = 1\n        else:\n            temp_result = my_result + my_result + fibfib(_ - 3)\n            my_result = temp_result",
        "result": "failed: ",
        "similarities": [
            0.9946203827857971,
            0.9931483268737793,
            0.9811399579048157,
            0.9940863251686096,
            0.9942536950111389,
            0.994625985622406,
            0.9931592345237732,
            0.9930349588394165,
            0.9890026450157166,
            0.9924486875534058,
            0.9919565320014954,
            0.9932571053504944,
            0.9949628114700317,
            0.9950867891311646,
            0.9882822632789612,
            0.9909075498580933,
            0.9882252216339111,
            0.9950433373451233,
            0.9933353066444397,
            0.9937076568603516
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9972082376480103,
        "body": "    vowel_count = 0\n    for char in s.lower():\n        if char in 'aeiou':\n            vowel_count += 1\n        elif char == 'y' and not any(char != c for c in s[:-1]):\n            vowel_count += 1\n    return vowel_count",
        "result": "failed: Test 3",
        "similarities": [
            0.9966881275177002,
            0.9949996471405029,
            0.9963698983192444,
            0.9963433146476746,
            0.9972082376480103,
            0.9959165453910828,
            0.9970319867134094,
            0.9967454671859741,
            0.9934762716293335,
            0.996963381767273,
            0.9971251487731934,
            0.9959627389907837,
            0.9967470765113831,
            0.9963026642799377,
            0.9962226748466492,
            0.9970243573188782,
            0.9964316487312317,
            0.9880260825157166,
            0.9949554800987244,
            0.9944698214530945
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9953127503395081,
        "body": "    result = str(x)\n    for _ in range(len(str(x)) - shift):\n        if shift <= len(str(x)):\n            result = str(int(result[-1])) + result[:-1]\n        else:\n            result = result[::-1]",
        "result": "failed: ",
        "similarities": [
            0.9887210726737976,
            0.9953127503395081,
            0.9912625551223755,
            0.9936262369155884,
            0.9917760491371155,
            0.991280198097229,
            0.9944259524345398,
            0.9914194345474243,
            0.9933726787567139,
            0.9899198412895203,
            0.9912625551223755,
            0.9950633645057678,
            0.9935063123703003,
            0.9927783608436584,
            0.9934005737304688,
            0.9924185872077942,
            0.9933052062988281,
            0.9874336123466492,
            0.9925164580345154,
            0.9939364194869995
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9978244304656982,
        "body": "    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)",
        "result": "failed: Error",
        "similarities": [
            0.9974098205566406,
            0.9970349669456482,
            0.9978244304656982,
            0.9864911437034607,
            0.9974098205566406,
            0.9965732097625732,
            0.9965326189994812,
            0.9971401691436768,
            0.9974098205566406,
            0.9934601187705994,
            0.9968633055686951,
            0.9970895648002625,
            0.9974098205566406,
            0.9974802732467651,
            0.9957368969917297,
            0.995958149433136,
            0.997063398361206,
            0.9970895648002625,
            0.997063398361206,
            0.9965669512748718
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9939656853675842,
        "body": "        words = s.split()\n        count_apples = 0\n        for word in words:\n            if word.lower() == 'apples' or word.lower() == 'apple':\n                count_apples += int(''.join(filter(str.isdigit, [w for w in words if w.isdigit()])))\n\n        return n - count_apples",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9913316369056702,
            0.9937354922294617,
            0.993297278881073,
            0.9894942045211792,
            0.9812541007995605,
            0.9916026592254639,
            0.990617573261261,
            0.9874386191368103,
            0.9869993925094604,
            0.9919712543487549,
            0.9935025572776794,
            0.9929862022399902,
            0.989743173122406,
            0.9918882250785828,
            0.988682210445404,
            0.9891787171363831,
            0.9905084371566772,
            0.9939656853675842,
            0.9933320879936218,
            0.9939362406730652
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9968582987785339,
        "body": "    smallest_value = None\n    smallest_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and (smallest_value is None or value < smallest_value):\n            smallest_value = value\n            smallest_index = i\n    \n    return [smallest_value, smallest_index] if smallest_value is not None else []",
        "result": "passed",
        "similarities": [
            0.9953523874282837,
            0.9948304891586304,
            0.9967729449272156,
            0.9961990714073181,
            0.9954361319541931,
            0.9945634603500366,
            0.9959447979927063,
            0.9947851300239563,
            0.9964941740036011,
            0.9949167966842651,
            0.9959477186203003,
            0.9942711591720581,
            0.9929639101028442,
            0.9966188073158264,
            0.9967564940452576,
            0.9964747428894043,
            0.9954966306686401,
            0.9949911236763,
            0.9898721575737,
            0.9968582987785339
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9986190795898438,
        "body": "    max_value = 0\n    for num in lst:\n        count = 0\n        for x in lst:\n            if x == num:\n                count += 1\n        if count >= num and num > max_value:\n            max_value = num\n    return -1 if max_value == 0 else max_value",
        "result": "passed",
        "similarities": [
            0.9982336163520813,
            0.9986190795898438,
            0.9974937438964844,
            0.9978888630867004,
            0.9921367168426514,
            0.998207688331604,
            0.9979428648948669,
            0.9982351064682007,
            0.998077392578125,
            0.9975971579551697,
            0.9984500408172607,
            0.9974116086959839,
            0.998496413230896,
            0.9972767233848572,
            0.9984911680221558,
            0.9975186586380005,
            0.9984470009803772,
            0.9984299540519714,
            0.9983705282211304,
            0.9971838593482971
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9953805208206177,
        "body": "    sorted_lst = lst[:]\n    min_val = min(sorted_lst)\n    for _ in range(len(sorted_lst)):\n        if len(sorted_lst) > 1:\n            max_val = max([x for x in sorted_lst if x != min_val])\n            sorted_lst.remove(min_val)\n            sorted_lst.remove(max_val)\n            min_val = min(sorted_lst)\n        else:\n            break\n    return sorted_lst",
        "result": "failed: min() arg is an empty sequence",
        "similarities": [
            0.9929901957511902,
            0.9940317869186401,
            0.9924989938735962,
            0.9953805208206177,
            0.9930286407470703,
            0.9932080507278442,
            0.9947074055671692,
            0.9947319030761719,
            0.9939165711402893,
            0.9917309284210205,
            0.9873973727226257,
            0.9904167652130127,
            0.9949061870574951,
            0.9855275750160217,
            0.9871107339859009,
            0.991159975528717,
            0.9933903217315674,
            0.9938945770263672,
            0.9938188195228577,
            0.9938946962356567
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9962994456291199,
        "body": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    for side in (a, b, c):\n        if sum(set([a, b, c])) <= side:\n            return -1\n    s = (a + b + c) / 2\n    area = ((s * (s - a)) * (s - b)) * (s - c)\n    return round(area, 2)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9927247762680054,
            0.9938580393791199,
            0.9884746074676514,
            0.9932319521903992,
            0.9938704967498779,
            0.9949016571044922,
            0.9950266480445862,
            0.9945851564407349,
            0.9956619143486023,
            0.9962994456291199,
            0.9934388399124146,
            0.9952398538589478,
            0.9943174123764038,
            0.9952251315116882,
            0.9955728650093079,
            0.9949226379394531,
            0.9948636293411255,
            0.9950966238975525,
            0.9949851632118225,
            0.995361864566803
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9975439310073853,
        "body": "    for i in range(len(q)):\n        if q[i] != q[-i - 1]:\n            return False\n    sum_elements = sum(q)\n    return sum_elements <= w",
        "result": "passed",
        "similarities": [
            0.9974232912063599,
            0.9960528016090393,
            0.9906389117240906,
            0.997432291507721,
            0.9963387250900269,
            0.99747234582901,
            0.9975208640098572,
            0.994537889957428,
            0.9970695376396179,
            0.9966796040534973,
            0.9960885643959045,
            0.9975439310073853,
            0.9964272379875183,
            0.9975367188453674,
            0.9974294304847717,
            0.9975118041038513,
            0.9975035786628723,
            0.9914955496788025,
            0.9929278492927551,
            0.997432291507721
        ]
    },
    "HumanEval/73": {
        "similarity": 0.996213436126709,
        "body": "    num_changes = 0\n    for i in range(len(arr)):\n        is_palindromic = True\n        for j in range(len(arr) - 1, i, -1):\n            if arr[i] != arr[j]:\n                is_palindromic = False\n                break\n        if not is_palindromic:\n            num_changes += (len(arr) - i - 1)\n    return num_changes",
        "result": "failed: ",
        "similarities": [
            0.9912251234054565,
            0.9950534701347351,
            0.99547278881073,
            0.9954037070274353,
            0.9952133893966675,
            0.9931181073188782,
            0.9939649701118469,
            0.995682954788208,
            0.9934005737304688,
            0.9930548667907715,
            0.9956552386283875,
            0.9916102886199951,
            0.9960328340530396,
            0.9942826628684998,
            0.9932359457015991,
            0.99602872133255,
            0.996213436126709,
            0.9934517741203308,
            0.9940429329872131,
            0.995650053024292
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9954314827919006,
        "body": "    char_count = 0\n    result = []\n    for s in lst1 + lst2:\n        char_count += len(s)\n    if char_count <= sum(len(x) for x in lst2):\n        result = lst1\n    else:\n        result = lst2",
        "result": "failed: ",
        "similarities": [
            0.995307445526123,
            0.9934877157211304,
            0.9947555065155029,
            0.9948561787605286,
            0.9939380288124084,
            0.9934896230697632,
            0.9908983111381531,
            0.9942783713340759,
            0.9895552396774292,
            0.9930554628372192,
            0.9923129081726074,
            0.9925745129585266,
            0.9918604493141174,
            0.9943231344223022,
            0.994724452495575,
            0.9936169981956482,
            0.9932129383087158,
            0.9925312399864197,
            0.9951145052909851,
            0.9954314827919006
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9949314594268799,
        "body": "        for i in range(2, a + 1):\n            prime = True\n            for j in range(2, i + 1):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime and a <= i * i:\n                for k in range(2, (a // i) + 1):\n                    if a % (i * k) != 0:\n                        prime = False\n                        break\n                if prime:\n                    return True\n        return False",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9919845461845398,
            0.9929277300834656,
            0.9919626116752625,
            0.9933621287345886,
            0.9947243928909302,
            0.9933695793151855,
            0.9902672171592712,
            0.9914685487747192,
            0.9848515391349792,
            0.9942907094955444,
            0.9949314594268799,
            0.9941611289978027,
            0.993111252784729,
            0.9941614866256714,
            0.981866717338562,
            0.9891479015350342,
            0.9940125346183777,
            0.9913651347160339,
            0.9934573769569397,
            0.9927210807800293
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9976330995559692,
        "body": "    for i in range(int(x ** (1 / n)) + 1):\n        if i ** n != x:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9975760579109192,
            0.9965969920158386,
            0.997389018535614,
            0.9973717927932739,
            0.9976330995559692,
            0.9934822916984558,
            0.9970602989196777,
            0.9970733523368835,
            0.9974747896194458,
            0.9972542524337769,
            0.9952884316444397,
            0.9918582439422607,
            0.9956828951835632,
            0.9973013997077942,
            0.9897870421409607,
            0.9976330995559692,
            0.9960039854049683,
            0.9975553750991821,
            0.9967492818832397,
            0.997275710105896
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9982594847679138,
        "body": "    for i in range(int(a ** (1./3.)) + 1):\n        if i ** 3 == a:\n            return True\n    return False",
        "result": "failed: can't convert complex to int",
        "similarities": [
            0.9982087016105652,
            0.9959315061569214,
            0.9978464841842651,
            0.9982087016105652,
            0.9981759786605835,
            0.9905503988265991,
            0.9980970025062561,
            0.9976704120635986,
            0.9976556897163391,
            0.997430682182312,
            0.992293119430542,
            0.9982594847679138,
            0.9981937408447266,
            0.9960507154464722,
            0.9981472492218018,
            0.9982087016105652,
            0.9963465332984924,
            0.9982087016105652,
            0.9981189370155334,
            0.9949801564216614
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9951633810997009,
        "body": "    primes = {'B': True, 'D': True}\n    count = 0\n    for char in num.upper():\n        if char.isdigit() and (int(char) < 2 or int(char) > 7 or int(char) % 2 == 0):\n            continue\n        elif char in primes:\n            count += 1",
        "result": "failed: First test error: None",
        "similarities": [
            0.9850984811782837,
            0.9939478039741516,
            0.985308825969696,
            0.9904550313949585,
            0.9941470623016357,
            0.9951633810997009,
            0.9937739372253418,
            0.9942412376403809,
            0.9854192137718201,
            0.9948237538337708,
            0.9944560527801514,
            0.9936375021934509,
            0.9948969483375549,
            0.9938401579856873,
            0.9948017597198486,
            0.9891397356987,
            0.9910372495651245,
            0.9943294525146484,
            0.9936296343803406,
            0.993387758731842
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9965786337852478,
        "body": "        binary = \"\"\n        for i in range(0, 8):\n            my_digit = (decimal >> (7 - i)) & 1\n            if my_digit == 1:\n                binary += \"1\"\n            else:\n                binary += \"0\"\n        return \"db\" + binary + \"db\"",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9958368539810181,
            0.9961142539978027,
            0.9958588480949402,
            0.9965786337852478,
            0.9953964948654175,
            0.9951330423355103,
            0.9952276349067688,
            0.9944629669189453,
            0.9926813840866089,
            0.9960359334945679,
            0.9951754212379456,
            0.9916965961456299,
            0.9871172904968262,
            0.9951650500297546,
            0.9938392639160156,
            0.9915444254875183,
            0.9959861636161804,
            0.9952826499938965,
            0.9956211447715759,
            0.9936242699623108
        ]
    },
    "HumanEval/80": {
        "similarity": 0.996820330619812,
        "body": "    for i in range(len(s)):\n        distinct = True\n        for j in range(i + 1, min(i + 4, len(s))):\n            if s[i] == s[j]:\n                distinct = False\n                break\n        if not distinct:\n            return False\n    return len(s) >= 3",
        "result": "failed: iopaxpoi",
        "similarities": [
            0.9964675903320312,
            0.9957813620567322,
            0.9953067302703857,
            0.9943161010742188,
            0.9917846322059631,
            0.9904676079750061,
            0.9959295392036438,
            0.9967213869094849,
            0.9948495626449585,
            0.9938434958457947,
            0.9952471852302551,
            0.9958221912384033,
            0.9793124794960022,
            0.9960410594940186,
            0.9957477450370789,
            0.9957941174507141,
            0.9951109886169434,
            0.9962106943130493,
            0.996820330619812,
            0.9965359568595886
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9901398420333862,
        "body": "    for i, gpa in enumerate(grades):\n        if gpa > 4.0:\n            grades[i] = 'E'\n        elif gpa >= 3.7:\n            grades[i] = 'A+'\n        elif gpa >= 3.3:\n            grades[i] = 'A'\n        elif gpa >= 3.0:\n            grades[i] = 'A-'\n        elif gpa >= 2.7:\n            grades[i] = 'B+'\n        elif gpa >= 2.3:\n            grades[i] = 'B'\n        elif gpa >= 2.0:\n            grades[i] = 'C+'\n        elif gpa >= 1.7:\n            grades[i] = 'C'\n        elif gpa >= 1.3:\n            grades[i] = 'C-'\n        elif gpa >= 1.0:\n            grades[i] = 'D+'\n        elif gpa > 0.7:\n            grades[i] = 'D'\n        else:\n            grades[i] = 'E'",
        "result": "failed: ",
        "similarities": [
            0.9658831357955933,
            0.9840202331542969,
            0.9882001280784607,
            0.989862322807312,
            0.9821721315383911,
            0.9818983674049377,
            0.9894968271255493,
            0.9896799325942993,
            0.9901244640350342,
            0.9887210726737976,
            0.9893405437469482,
            0.9898860454559326,
            0.989272952079773,
            0.9895840883255005,
            0.9820742607116699,
            0.990018367767334,
            0.989459216594696,
            0.9562885761260986,
            0.9901398420333862,
            0.9890850782394409
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9970915913581848,
        "body": "    for num in range(len(string) + 1):\n        is_prime = True\n        for p in range(2, num // 2 + 1):\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime and num > 1:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9867864847183228,
            0.996295154094696,
            0.996393084526062,
            0.9961128234863281,
            0.9955911040306091,
            0.9952442049980164,
            0.9967532157897949,
            0.996189534664154,
            0.9963251352310181,
            0.9882296323776245,
            0.9954382181167603,
            0.9944302439689636,
            0.9970380067825317,
            0.9961870908737183,
            0.9959436058998108,
            0.9959766864776611,
            0.9970915913581848,
            0.9965437054634094,
            0.9962146282196045,
            0.9953987002372742
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9985651969909668,
        "body": "    result = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            result += 1",
        "result": "failed: ",
        "similarities": [
            0.9984272718429565,
            0.998313307762146,
            0.9980702996253967,
            0.9956809878349304,
            0.9966327548027039,
            0.9985496401786804,
            0.9980702996253967,
            0.9985651969909668,
            0.9980703592300415,
            0.9980930685997009,
            0.9985651969909668,
            0.9945937991142273,
            0.9969040751457214,
            0.9985651969909668,
            0.9980612397193909,
            0.9979408979415894,
            0.9979215860366821,
            0.9977145791053772,
            0.9984560608863831,
            0.9985651969909668
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9944683909416199,
        "body": "    binary_sum = \"\"\n    total_sum = 0\n    for digit in str(N):\n        if int(digit) < 5:\n            binary_sum += \"1\"\n        else:\n            binary_sum += \"0\"\n        total_sum += int(digit)\n    return bin(total_sum)[2:]",
        "result": "passed",
        "similarities": [
            0.9861671328544617,
            0.9897693991661072,
            0.9935282468795776,
            0.9925632476806641,
            0.9860767722129822,
            0.9870913624763489,
            0.9907090067863464,
            0.9944683909416199,
            0.9921918511390686,
            0.9930814504623413,
            0.9908663034439087,
            0.9933920502662659,
            0.9915737509727478,
            0.9938308596611023,
            0.9935431480407715,
            0.9929783344268799,
            0.9895845055580139,
            0.9934475421905518,
            0.9938541054725647,
            0.9902580976486206
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9981989860534668,
        "body": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
        "result": "passed",
        "similarities": [
            0.997900128364563,
            0.9961088299751282,
            0.9981223940849304,
            0.9981989860534668,
            0.9977896809577942,
            0.9978395104408264,
            0.9981984496116638,
            0.9981223940849304,
            0.9978371858596802,
            0.998157799243927,
            0.9981984496116638,
            0.9978200197219849,
            0.9977651238441467,
            0.9981223940849304,
            0.9921829104423523,
            0.9946649670600891,
            0.9971021413803101,
            0.9971022605895996,
            0.9974654316902161,
            0.9890491962432861
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9931638836860657,
        "body": "        words = s.split()\n        result = ''\n        for word in words:\n            new_word = ''.join(sorted(word))\n            result += new_word + ' '\n        return result.strip()",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9918512105941772,
            0.9871585369110107,
            0.9926503896713257,
            0.9931638836860657,
            0.9902676939964294,
            0.9890806078910828,
            0.9876574277877808,
            0.989180326461792,
            0.9905409812927246,
            0.9874790906906128,
            0.9888226389884949,
            0.989615797996521,
            0.9911739826202393,
            0.9868080019950867,
            0.9845614433288574,
            0.9880949258804321,
            0.9904349446296692,
            0.9906686544418335,
            0.9931638836860657,
            0.9883198142051697
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9959667921066284,
        "body": "    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(reversed(row)):\n            if value == x:\n                result.append((i, len(row) - 1 - j))",
        "result": "failed: ",
        "similarities": [
            0.9940428733825684,
            0.995486319065094,
            0.9958034157752991,
            0.9934850931167603,
            0.9937348961830139,
            0.9943075776100159,
            0.9941998720169067,
            0.993690013885498,
            0.9959667921066284,
            0.987303614616394,
            0.9952294230461121,
            0.9935547709465027,
            0.9934278726577759,
            0.9908633232116699,
            0.9940901398658752,
            0.9958592653274536,
            0.9885680675506592,
            0.9949941039085388,
            0.9942795634269714,
            0.9941410422325134
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9955580830574036,
        "body": "    sorted_array = array[:]\n    if sum(array[0], array[-1]) % 2 <= 0:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n    else:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] < array[j]:\n                    array[i], array[j] = array[j], array[i]\n    return sorted_array",
        "result": "failed: list index out of range",
        "similarities": [
            0.9923772215843201,
            0.9951912760734558,
            0.9955580830574036,
            0.9933785200119019,
            0.9954326152801514,
            0.9953492879867554,
            0.9941554069519043,
            0.9943612813949585,
            0.995015025138855,
            0.9918680787086487,
            0.9933455586433411,
            0.9925573468208313,
            0.9949208498001099,
            0.9944117665290833,
            0.9789195656776428,
            0.9909754395484924,
            0.9926486611366272,
            0.9928882122039795,
            0.9941476583480835,
            0.993291974067688
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9969251751899719,
        "body": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            index = (alphabet.index(char.lower()) + 8 * 2) % 26\n            if char.isupper():\n                result += alphabet[index].upper()\n            else:\n                result += alphabet[index]\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9958090782165527,
            0.9957252144813538,
            0.9952292442321777,
            0.995491623878479,
            0.9959875345230103,
            0.9919766783714294,
            0.9967516660690308,
            0.996791660785675,
            0.9964565634727478,
            0.996772289276123,
            0.9863979816436768,
            0.9965651631355286,
            0.9963810443878174,
            0.9960300922393799,
            0.992201566696167,
            0.9952211976051331,
            0.9969251751899719,
            0.9964118003845215,
            0.9945342540740967,
            0.9964213371276855
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9953169822692871,
        "body": "    smallest = None\n    second_smallest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is not None and num <= second_smallest:\n            return None\n    return second_smallest if second_smallest is not None else None",
        "result": "failed: ",
        "similarities": [
            0.9953105449676514,
            0.9953169822692871,
            0.9687058329582214,
            0.9953105449676514,
            0.9949660897254944,
            0.994468092918396,
            0.9948825836181641,
            0.9951720833778381,
            0.9932845234870911,
            0.9944224953651428,
            0.9687058329582214,
            0.9953105449676514,
            0.9942107796669006,
            0.9933411478996277,
            0.9949425458908081,
            0.9935205578804016,
            0.9925025105476379,
            0.9952579140663147,
            0.9934941530227661,
            0.9873917102813721
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9961957335472107,
        "body": "        boredom_count = 0\n        sentences = S.split('.')\n        for sentence in sentences:\n            if sentence and sentence[0].lower() == 'i':\n                boredom_count += 1\n        return boredom_count",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9953099489212036,
            0.9954931139945984,
            0.9867271780967712,
            0.9956508278846741,
            0.9961957335472107,
            0.9937612414360046,
            0.9863234162330627,
            0.9953548312187195,
            0.9959818124771118,
            0.9956294894218445,
            0.9958028197288513,
            0.995918869972229,
            0.9938037395477295,
            0.9956398010253906,
            0.9893954396247864,
            0.9902795553207397,
            0.9956508278846741,
            0.9958630800247192,
            0.9944223165512085,
            0.9887936115264893
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9957036375999451,
        "body": "    for i in range(len([x, y, z])):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if ((x <= y + z) and (y <= x + z) and (z <= x + y)):\n                return True\n        else:\n            return False",
        "result": "failed: This prints if this assert fails 4 (good for debugging!)",
        "similarities": [
            0.9935418963432312,
            0.9934545755386353,
            0.9905944466590881,
            0.9948300123214722,
            0.9947705864906311,
            0.9929111003875732,
            0.9956275820732117,
            0.9895579814910889,
            0.9957036375999451,
            0.9935264587402344,
            0.9922081828117371,
            0.9931550621986389,
            0.9953093528747559,
            0.9941148161888123,
            0.9953076243400574,
            0.9939466118812561,
            0.9917474389076233,
            0.9892118573188782,
            0.9928730726242065,
            0.9933871030807495
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9950563311576843,
        "body": "    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() == 'a' or char.lower() == 'e' or char.lower() == 'i' or char.lower() == 'o' or char.lower() == 'u':\n                if char.islower():\n                    result += chr((ord(char) - 97 + 2) % 26 + 97)\n                else:\n                    result += chr((ord(char) - 65 + 2) % 26 + 65)\n            elif char.islower():\n                result += char.swapcase()\n            else:\n                result += char\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9924922585487366,
            0.9912442564964294,
            0.9938949942588806,
            0.9927930235862732,
            0.9921713471412659,
            0.9932484030723572,
            0.9950563311576843,
            0.9853665232658386,
            0.9936366677284241,
            0.9931721091270447,
            0.9899834990501404,
            0.9943386912345886,
            0.9918338656425476,
            0.9827993512153625,
            0.994609534740448,
            0.9916530251502991,
            0.9907023906707764,
            0.9915724396705627,
            0.9905475974082947,
            0.9935849905014038
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9958666563034058,
        "body": "    largest_prime = None\n    sum_of_digits = 0\n    for num in lst:\n        is_prime = True\n        if num < 2:\n            continue\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    if largest_prime is not None:\n        sum_of_digits = sum(int(digit) for digit in str(largest_prime))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9942708611488342,
            0.9946299195289612,
            0.9877598285675049,
            0.9954430460929871,
            0.9956955313682556,
            0.9944325685501099,
            0.9928420186042786,
            0.9946959614753723,
            0.9958666563034058,
            0.9867956042289734,
            0.9951892495155334,
            0.9871936440467834,
            0.9957112669944763,
            0.9954873919487,
            0.9957177042961121,
            0.9932973980903625,
            0.9832850098609924,
            0.9953848123550415,
            0.9944251179695129,
            0.9942845702171326
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9963006377220154,
        "body": "    for key in dict:\n        if not isinstance(key, str):\n            return False\n        case = all(isinstance(char.lower(), int) for char in key)\n        if not case and any(not char.islower() for char in key):\n            return False\n    return len(dict) > 0",
        "result": "failed: Fifth test error: False",
        "similarities": [
            0.9954025745391846,
            0.9943385720252991,
            0.9920222759246826,
            0.991916835308075,
            0.9959672689437866,
            0.9928914308547974,
            0.9939368367195129,
            0.99454265832901,
            0.9928279519081116,
            0.9942126870155334,
            0.9914897084236145,
            0.9960055947303772,
            0.9926677346229553,
            0.9963006377220154,
            0.9937431812286377,
            0.9959672689437866,
            0.9958285093307495,
            0.995164155960083,
            0.9956709146499634,
            0.9929990172386169
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9973803162574768,
        "body": "        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n        primes = []\n        for possible_prime in range(2, n):\n            if is_prime(possible_prime):\n                primes.append(possible_prime)\n        return primes",
        "result": "failed: unexpected indent (<string>, line 13)",
        "similarities": [
            0.9969539642333984,
            0.9969769716262817,
            0.9845331907272339,
            0.9972440600395203,
            0.9972299337387085,
            0.9940031170845032,
            0.997053861618042,
            0.9961805939674377,
            0.9971510171890259,
            0.9914060831069946,
            0.9971798658370972,
            0.997065007686615,
            0.9972532391548157,
            0.9972100853919983,
            0.9972050189971924,
            0.9972535967826843,
            0.9973803162574768,
            0.9963220357894897,
            0.9971922039985657,
            0.9959976673126221
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9893056154251099,
        "body": "    product_unit_digits = (a % 10) * (b % 10)",
        "result": "failed: First test error: None",
        "similarities": [
            0.9885202050209045,
            0.9875981211662292,
            0.9655881524085999,
            0.9657909870147705,
            0.9893056154251099,
            0.986782968044281,
            0.9887182116508484,
            0.9709601402282715,
            0.9887182116508484,
            0.9875981211662292,
            0.9795052409172058,
            0.9889400005340576,
            0.9861080646514893,
            0.9889400005340576,
            0.9885202050209045,
            0.9887182116508484,
            0.9885202050209045,
            0.9885202050209045,
            0.9885202050209045,
            0.9682744741439819
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9976959228515625,
        "body": "    upper_count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIO':\n            upper_count += 1\n    return upper_count",
        "result": "failed: ",
        "similarities": [
            0.9919984936714172,
            0.997205913066864,
            0.9971515536308289,
            0.9973223805427551,
            0.996992826461792,
            0.9976959228515625,
            0.9909164309501648,
            0.996927797794342,
            0.9973957538604736,
            0.9969448447227478,
            0.9975744485855103,
            0.9974172711372375,
            0.9970210194587708,
            0.9973188638687134,
            0.9913973808288574,
            0.996464192867279,
            0.9967247843742371,
            0.995762288570404,
            0.9976271390914917,
            0.9976224303245544
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9935950040817261,
        "body": "        integer_part = int(float(value))\n        decimal_part = abs(float(value) - integer_part)\n        \n        if decimal_part < 0.5:\n            return integer_part\n        elif decimal_part >= 0.5:\n            return integer_part + (1 if value > '0' else -1)",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9911545515060425,
            0.9885475039482117,
            0.9919480681419373,
            0.9931527972221375,
            0.9914418458938599,
            0.9931935667991638,
            0.9846587181091309,
            0.9901419281959534,
            0.9935950040817261,
            0.9781925678253174,
            0.9892389178276062,
            0.9922109842300415,
            0.9906865358352661,
            0.9904654622077942,
            0.9852214455604553,
            0.987833559513092,
            0.9911637902259827,
            0.9931172132492065,
            0.9916375875473022,
            0.9929275512695312
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9965853691101074,
        "body": "    my_stones = []\n    for i in range(n):\n        if n % 2 == 0:\n            my_stones.append(i * 2 + 2)\n        else:\n            my_stones.append(i * 2 + 1)",
        "result": "failed: Test 3",
        "similarities": [
            0.9958397746086121,
            0.9895968437194824,
            0.9959431886672974,
            0.9965853691101074,
            0.9940537214279175,
            0.9959873557090759,
            0.9952902793884277,
            0.9939770102500916,
            0.9963323473930359,
            0.9940187335014343,
            0.9935957193374634,
            0.9882127642631531,
            0.9923467040061951,
            0.9958475232124329,
            0.9962102770805359,
            0.9880179166793823,
            0.993739902973175,
            0.9954817891120911,
            0.9962278604507446,
            0.9956775307655334
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9939208626747131,
        "body": "        result = []\n        words = s.replace(\",\", \" \").split()\n        for word in words:\n            result.append(word)\n        return result",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9927988648414612,
            0.9926846027374268,
            0.9932805895805359,
            0.9913541674613953,
            0.9910345673561096,
            0.9938462972640991,
            0.9919355511665344,
            0.9913132190704346,
            0.9927988648414612,
            0.9873510599136353,
            0.9902769327163696,
            0.9926846027374268,
            0.9919820427894592,
            0.9906994700431824,
            0.9903871417045593,
            0.9933971762657166,
            0.9924583435058594,
            0.9927988648414612,
            0.9939208626747131,
            0.987139880657196
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9976668953895569,
        "body": "    biggest_even = x\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num >= biggest_even:\n            biggest_even = num\n    return -1 if biggest_even < x else biggest_even",
        "result": "failed: ",
        "similarities": [
            0.9973595142364502,
            0.9976668953895569,
            0.9967940449714661,
            0.997314453125,
            0.9929535388946533,
            0.9971480369567871,
            0.9971480369567871,
            0.9877490997314453,
            0.9963849782943726,
            0.9975221753120422,
            0.9961098432540894,
            0.9964545369148254,
            0.9976019859313965,
            0.9974794983863831,
            0.9975163340568542,
            0.9970777630805969,
            0.9952720999717712,
            0.9976335167884827,
            0.997031569480896,
            0.9966933727264404
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9967781901359558,
        "body": "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    avg = total / (m - n + 1)\n    rounded_avg = int(round(avg))\n    return bin(rounded_avg)[2:]",
        "result": "failed: ",
        "similarities": [
            0.9967781901359558,
            0.9960947632789612,
            0.9959259033203125,
            0.9939403533935547,
            0.9958385825157166,
            0.9967244863510132,
            0.9967504739761353,
            0.9961368441581726,
            0.9950045347213745,
            0.9930619597434998,
            0.995238184928894,
            0.9964327812194824,
            0.995823085308075,
            0.9902629852294922,
            0.9915030598640442,
            0.9882025718688965,
            0.9959327578544617,
            0.9957321882247925,
            0.9955912232398987,
            0.9963014721870422
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9983791708946228,
        "body": "    result = []\n    for num in x:\n        is_odd = True\n        for digit in str(num):\n            if int(digit) <= 2:\n                is_odd = False\n                break\n        if is_odd:\n            result.append(num)\n    return sorted(result)",
        "result": "failed: ",
        "similarities": [
            0.9982833862304688,
            0.9981579184532166,
            0.9943464398384094,
            0.9974990487098694,
            0.9982426166534424,
            0.9977927803993225,
            0.9978123903274536,
            0.9980154633522034,
            0.9982833862304688,
            0.9971613883972168,
            0.9983791708946228,
            0.9969843626022339,
            0.998156726360321,
            0.9982833862304688,
            0.9978728890419006,
            0.9979313611984253,
            0.9965248107910156,
            0.9944930076599121,
            0.9977343678474426,
            0.9981774091720581
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9938876628875732,
        "body": "    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num - 1])\n    else:\n        for _ in range(len(result)):\n            result.pop()\n        result.reverse()\n    return result",
        "result": "failed: Error",
        "similarities": [
            0.9891598224639893,
            0.990748941898346,
            0.992264986038208,
            0.9927378296852112,
            0.9927024841308594,
            0.9938876628875732,
            0.9914429187774658,
            0.9934030771255493,
            0.9897298216819763,
            0.9824683666229248,
            0.9925400614738464,
            0.9868335723876953,
            0.981723964214325,
            0.991947591304779,
            0.9897833466529846,
            0.9921202659606934,
            0.9926238059997559,
            0.9888980388641357,
            0.979286789894104,
            0.9928593039512634
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9980683922767639,
        "body": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))",
        "result": "failed: ",
        "similarities": [
            0.9972042441368103,
            0.9969976544380188,
            0.9980461597442627,
            0.9978429079055786,
            0.9976756572723389,
            0.9977872967720032,
            0.9960111379623413,
            0.9961022138595581,
            0.996873140335083,
            0.996565580368042,
            0.9962466359138489,
            0.9980461597442627,
            0.9980683922767639,
            0.9971923828125,
            0.9973521828651428,
            0.9950875639915466,
            0.9958803057670593,
            0.9958817362785339,
            0.9980461597442627,
            0.9979167580604553
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9975204467773438,
        "body": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1]:\n            if int(s) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1",
        "result": "failed: ",
        "similarities": [
            0.9969995617866516,
            0.9950349926948547,
            0.9961162209510803,
            0.9972610473632812,
            0.9974104166030884,
            0.9970337748527527,
            0.9974491000175476,
            0.9970205426216125,
            0.9969456195831299,
            0.9975204467773438,
            0.9960572123527527,
            0.9974491000175476,
            0.9972370862960815,
            0.9972542524337769,
            0.9973177909851074,
            0.9975085258483887,
            0.996801495552063,
            0.997236967086792,
            0.9947112202644348,
            0.9950583577156067
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9926005005836487,
        "body": "    total = 0\n    for num in arr:\n        sign = -1 if num < 0 else 1\n        num *= sign\n        digit_sum = 0\n        for d in str(abs(num)):\n            digit_sum += int(d)\n        if digit_sum > 0:\n            total += 1",
        "result": "failed: ",
        "similarities": [
            0.9919313192367554,
            0.9871111512184143,
            0.9912278056144714,
            0.967443585395813,
            0.989113450050354,
            0.9907025098800659,
            0.9909459352493286,
            0.9896200299263,
            0.9926005005836487,
            0.9775747060775757,
            0.9876154065132141,
            0.9922218322753906,
            0.9715069532394409,
            0.9900263547897339,
            0.9888375997543335,
            0.9912959933280945,
            0.9923489093780518,
            0.9922347664833069,
            0.9859519004821777,
            0.9917184710502625
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9954069256782532,
        "body": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[i] > arr[j]:\n                return False\n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9945657849311829,
            0.993921160697937,
            0.9954069256782532,
            0.9953694939613342,
            0.984490156173706,
            0.9944580793380737,
            0.9947351217269897,
            0.9911587238311768,
            0.9861071705818176,
            0.9947421550750732,
            0.9922171235084534,
            0.9942963123321533,
            0.9874793887138367,
            0.9943562746047974,
            0.9853775501251221,
            0.9917522072792053,
            0.992838442325592,
            0.9915841817855835,
            0.9949091672897339,
            0.9940661191940308
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9972883462905884,
        "body": "    result = \"YES\"\n    for num1 in lst1:\n        if num1 % 2 != 0:\n            for num2 in lst2:\n                if num2 % 2 == 0 and num1 > num2:\n                    result = \"NO\"\n                    break\n            if result == \"NO\":\n                break\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9960068464279175,
            0.996543288230896,
            0.996540904045105,
            0.9963706135749817,
            0.9956184029579163,
            0.9942795634269714,
            0.9966211915016174,
            0.9960823059082031,
            0.9971268177032471,
            0.9964884519577026,
            0.9927115440368652,
            0.9968627095222473,
            0.9955906271934509,
            0.9972670674324036,
            0.9966601133346558,
            0.9967723488807678,
            0.997100830078125,
            0.9971604943275452,
            0.9972883462905884,
            0.9970709085464478
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9960448741912842,
        "body": "    my_dict = {}\n    max_count = 0\n    for letter in test.split():\n        if letter not in my_dict:\n            my_dict[letter] = 1\n        else:\n            my_dict[letter] += 1\n        if my_dict[letter] > max_count:\n            max_count = my_dict[letter]\n    most_common = [k for k, v in my_dict.items() if v == max_count]\n    return {k: max_count for k in most_common}",
        "result": "passed",
        "similarities": [
            0.9861799478530884,
            0.9956343770027161,
            0.9956179261207581,
            0.993436336517334,
            0.9884123802185059,
            0.9947960376739502,
            0.9933913350105286,
            0.9947373270988464,
            0.9944996237754822,
            0.9935816526412964,
            0.9952038526535034,
            0.9941199421882629,
            0.9932871460914612,
            0.9945989847183228,
            0.9795049428939819,
            0.9957144856452942,
            0.9953511953353882,
            0.9950664043426514,
            0.9960448741912842,
            0.9948432445526123
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9969749450683594,
        "body": "    result = \"\"\n    for char in s:\n        found = False\n        for c_char in c:\n            if char == c_char:\n                found = True\n                break\n        if not found:\n            result += char\n    palindrome = result <= result[::-1]\n    return (result, palindrome)",
        "result": "failed: ",
        "similarities": [
            0.9958303570747375,
            0.9965265989303589,
            0.9966024160385132,
            0.9965736269950867,
            0.9943299889564514,
            0.9945928454399109,
            0.9964429140090942,
            0.9957520365715027,
            0.9969749450683594,
            0.994662344455719,
            0.9947000741958618,
            0.9917863607406616,
            0.9965412616729736,
            0.9956695437431335,
            0.9951302409172058,
            0.9941998720169067,
            0.9968321919441223,
            0.9966896772384644,
            0.9958351850509644,
            0.9967831969261169
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9965792298316956,
        "body": "    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}put.\".format(count, i+1, i+1, 'n' if i == len(lst)-1 else ''))",
        "result": "failed: Test 1",
        "similarities": [
            0.9926000833511353,
            0.9963145852088928,
            0.9963531494140625,
            0.9940911531448364,
            0.9960035085678101,
            0.9960222840309143,
            0.9891186952590942,
            0.994744062423706,
            0.9909651875495911,
            0.9960903525352478,
            0.9961552023887634,
            0.9958211779594421,
            0.9961178302764893,
            0.9927422404289246,
            0.9963756203651428,
            0.996565043926239,
            0.9952816367149353,
            0.9937278628349304,
            0.9946434497833252,
            0.9965792298316956
        ]
    },
    "HumanEval/114": {
        "similarity": 0.997483491897583,
        "body": "    total_sum = float('inf')\n    for left in range(len(nums)):\n        current_sum = 0\n        for right in range(left, len(nums)):\n            current_sum += nums[right]\n            if current_sum < total_sum:\n                total_sum = current_sum\n    return total_sum",
        "result": "passed",
        "similarities": [
            0.997483491897583,
            0.9938527345657349,
            0.9962194561958313,
            0.9973753094673157,
            0.9966832399368286,
            0.9932029247283936,
            0.9962708353996277,
            0.9960768818855286,
            0.997483491897583,
            0.9970169067382812,
            0.9942002892494202,
            0.9967615008354187,
            0.996965229511261,
            0.9973979592323303,
            0.9974396228790283,
            0.997483491897583,
            0.9958674907684326,
            0.9964783191680908,
            0.9968933463096619,
            0.99223792552948
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9949696063995361,
        "body": "    total_water = 0\n    for _ in range(len(grid)):\n        row_water = sum(1 for cell in grid[_] if cell == 1)\n        while row_water > 0:\n            total_water += min(row_water, capacity)\n            row_water -= capacity\n        row_water = 0",
        "result": "failed: Error",
        "similarities": [
            0.9915952086448669,
            0.9920912384986877,
            0.985101580619812,
            0.9911303520202637,
            0.9886527061462402,
            0.9928496479988098,
            0.9879581332206726,
            0.9900494813919067,
            0.9868149161338806,
            0.9923126101493835,
            0.9907324910163879,
            0.9939011931419373,
            0.9918972849845886,
            0.9941082000732422,
            0.9924087524414062,
            0.9949696063995361,
            0.9923840761184692,
            0.9934567213058472,
            0.9925436973571777,
            0.9891256093978882
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9952085614204407,
        "body": "    ones_count = []\n    for num in arr:\n        binary = bin(num)[2:]\n        count = sum(1 for bit in binary if bit == '1')\n        ones_count.append((count, num)) \n\n    sorted_arr = [] \n    for _ in range(len(arr)):\n        min_val = None\n        min_index = -1\n        for i in range(len(ones_count)):\n            if min_val is None or ones_count[i][0] < min_val[0]:\n                min_val = ones_count[i][0]\n                min_index = i\n        sorted_arr.append(ones_count[min_index][1])\n        del ones_count[min_index]",
        "result": "failed: 'int' object is not subscriptable",
        "similarities": [
            0.9952085614204407,
            0.9919354319572449,
            0.9945225119590759,
            0.9914391040802002,
            0.9938153624534607,
            0.9895792603492737,
            0.9941969513893127,
            0.9769066572189331,
            0.9949840903282166,
            0.9924390912055969,
            0.9949516654014587,
            0.9945175051689148,
            0.9931120872497559,
            0.9951368570327759,
            0.9946023225784302,
            0.9949164390563965,
            0.9939842224121094,
            0.9891738891601562,
            0.9924005270004272,
            0.9944952130317688
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9965704083442688,
        "body": "        result = []\n        words = s.split()\n        for word in words:\n            consonants = 0\n            for char in word:\n                if char.lower() not in 'aeiou':\n                    consonants += 1\n            if consonants == n:\n                result.append(word)\n        return result",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9961729645729065,
            0.9962523579597473,
            0.9965704083442688,
            0.9948168396949768,
            0.993019700050354,
            0.9931440949440002,
            0.9939218163490295,
            0.9951673150062561,
            0.9932586550712585,
            0.9960600137710571,
            0.9964693784713745,
            0.9937808513641357,
            0.9956331849098206,
            0.9953095316886902,
            0.9961660504341125,
            0.9938298463821411,
            0.9888082146644592,
            0.9923574328422546,
            0.9932017922401428,
            0.9947126507759094
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9953689575195312,
        "body": "    my_vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    for i in range(len(word) - 1, 0, -1):\n        if word[i].lower() not in my_vowels:\n            for j in range(i - 1, -1, -1):\n                if word[j].lower() not in my_vowels:\n                    if word[j].lower() in my_vowels <= i - j:\n                        closest_vowel = word[j]\n                        break\n                    else:\n                        break\n            if closest_vowel:\n                break",
        "result": "failed: ",
        "similarities": [
            0.9829511046409607,
            0.9953020215034485,
            0.9934747815132141,
            0.9933266043663025,
            0.9949049949645996,
            0.9935299754142761,
            0.9941897988319397,
            0.9941273927688599,
            0.9933186769485474,
            0.9947046041488647,
            0.99432373046875,
            0.9953358173370361,
            0.9937165975570679,
            0.9857437610626221,
            0.9931451678276062,
            0.9936376810073853,
            0.98773592710495,
            0.9952200651168823,
            0.9953689575195312,
            0.9953374266624451
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9962752461433411,
        "body": "    open_count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                if open_count <= 0:\n                    return 'No'\n                open_count -= 1\n    return 'Yes' if open_count == 0 else 'No'",
        "result": "failed: ",
        "similarities": [
            0.9955193400382996,
            0.9959166646003723,
            0.9915239214897156,
            0.9954521059989929,
            0.9899141192436218,
            0.9856120944023132,
            0.9960843324661255,
            0.9940324425697327,
            0.9960255026817322,
            0.9960949420928955,
            0.9857862591743469,
            0.9951017498970032,
            0.9962752461433411,
            0.9958736896514893,
            0.9960161447525024,
            0.9961581826210022,
            0.9914360046386719,
            0.9947119355201721,
            0.9943788647651672,
            0.9938894510269165
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9919486045837402,
        "body": "    arr.sort()\n    max_list = []\n    for i in range(len(arr) - len(arr) + k):\n        max_list.append(arr[i])\n    return max_list",
        "result": "failed: ",
        "similarities": [
            0.9898867607116699,
            0.9919486045837402,
            0.9907258749008179,
            0.9913994669914246,
            0.9837660789489746,
            0.9910035729408264,
            0.9911710023880005,
            0.9864791035652161,
            0.9896357655525208,
            0.990502119064331,
            0.9891586303710938,
            0.9864412546157837,
            0.9913589954376221,
            0.9850752949714661,
            0.9894338846206665,
            0.9913278222084045,
            0.9889383912086487,
            0.9850996732711792,
            0.9884898662567139,
            0.9853541851043701
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9989432096481323,
        "body": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum",
        "result": "passed",
        "similarities": [
            0.9987156391143799,
            0.9981635212898254,
            0.9981195330619812,
            0.9989142417907715,
            0.9977505207061768,
            0.9989001750946045,
            0.9981976747512817,
            0.9989432096481323,
            0.9988676309585571,
            0.9981518983840942,
            0.9974939227104187,
            0.9977878928184509,
            0.9987156391143799,
            0.9985939860343933,
            0.9986183643341064,
            0.998738169670105,
            0.9989431500434875,
            0.9949651956558228,
            0.9988870024681091,
            0.9987218976020813
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9972444176673889,
        "body": "    my_sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] <= 99:\n            my_sum += arr[i]\n    return my_sum",
        "result": "passed",
        "similarities": [
            0.9960121512413025,
            0.9965108633041382,
            0.9964649677276611,
            0.9966641664505005,
            0.9964413046836853,
            0.9943884611129761,
            0.996568500995636,
            0.9940084218978882,
            0.9970532655715942,
            0.9963088631629944,
            0.9965227842330933,
            0.9966807961463928,
            0.9972444176673889,
            0.9892136454582214,
            0.9957240223884583,
            0.9958711266517639,
            0.9957240223884583,
            0.996090829372406,
            0.996427059173584,
            0.996222734451294
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9974015951156616,
        "body": "    result = []\n    for i in range(n):\n        num = n\n        while num > 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n        for j in range(num, -1, -1):\n            if j % 2 != 0 and j != 1:\n                result.append(j)",
        "result": "failed: ",
        "similarities": [
            0.9963082075119019,
            0.9961041808128357,
            0.9965894818305969,
            0.996552050113678,
            0.9962853193283081,
            0.9954732656478882,
            0.9906140565872192,
            0.9956098198890686,
            0.9974015951156616,
            0.9971793293952942,
            0.996354877948761,
            0.9968683123588562,
            0.9958088397979736,
            0.9963995218276978,
            0.9958106875419617,
            0.9969331622123718,
            0.9954140186309814,
            0.9957751035690308,
            0.9963828921318054,
            0.9954071044921875
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9964796304702759,
        "body": "        day_parts = date.split('-')\n        month = int(day_parts[0])\n        day = int(day_parts[1])\n        year = int(day_parts[2])\n\n        if len(date) != 9:\n            return False\n        if not (1 <= month <= 12):\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and (day > 29 or not is_leap_year(year)):\n            return False\n\n            for _ in range(year):\n                if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n                    return False\n                return True",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.995242178440094,
            0.9955794811248779,
            0.9963145852088928,
            0.9958263039588928,
            0.9920272827148438,
            0.9938613772392273,
            0.9952496886253357,
            0.9960240721702576,
            0.9936226606369019,
            0.9925940632820129,
            0.9941237568855286,
            0.9944469928741455,
            0.9957162141799927,
            0.996295154094696,
            0.9964796304702759,
            0.9961750507354736,
            0.994906485080719,
            0.9955204725265503,
            0.9957373738288879,
            0.9961324334144592
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9959399700164795,
        "body": "    words = txt.split()\n    result = []\n    for word in words:\n        if ',' in word:\n            word = word.replace(',', ' ')\n            result.extend(word.split())\n        else:\n            odd_letters = 0\n            for letter in word:\n                if ord(letter) % 2 != 0:\n                    odd_letters += 1\n            return odd_letters",
        "result": "failed: ",
        "similarities": [
            0.9939141869544983,
            0.9933679699897766,
            0.9956135153770447,
            0.9959399700164795,
            0.9931207299232483,
            0.9910234212875366,
            0.9819032549858093,
            0.9955681562423706,
            0.9946048259735107,
            0.9903656840324402,
            0.9941652417182922,
            0.9955652356147766,
            0.9959094524383545,
            0.9946056008338928,
            0.993983805179596,
            0.9941530823707581,
            0.9954505562782288,
            0.9940324425697327,
            0.9938579201698303,
            0.9931207895278931
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9947881102561951,
        "body": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.9925645589828491,
            0.9925249218940735,
            0.9835215210914612,
            0.9931597709655762,
            0.9879374504089355,
            0.9942308068275452,
            0.9844772219657898,
            0.9940125346183777,
            0.9946969747543335,
            0.9936772584915161,
            0.9940748810768127,
            0.9933325052261353,
            0.9913547039031982,
            0.9940851926803589,
            0.993414044380188,
            0.9924854636192322,
            0.9947881102561951,
            0.9920055866241455,
            0.9937885999679565,
            0.9944108724594116
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9974993467330933,
        "body": "        start_intersection = max(interval1[0], interval2[0])\n        end_intersection = min(interval1[1], interval2[1])\n        \n        if start_intersection > end_intersection:\n            return \"NO\"\n        \n        length_intersection = end_intersection - start_intersection + 1\n        \n        for i in range(2, int(length_intersection ** 0.5) + 1):\n            if length_intersection % i == 0:\n                return \"NO\"\n        \n        return \"YES\"",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9955880045890808,
            0.9945465922355652,
            0.9960805773735046,
            0.9960805773735046,
            0.9949219226837158,
            0.9970414042472839,
            0.9955103993415833,
            0.9974993467330933,
            0.9960033297538757,
            0.9963868856430054,
            0.9971058368682861,
            0.9971200823783875,
            0.9966766238212585,
            0.9932652711868286,
            0.9938914775848389,
            0.9960594177246094,
            0.9968070983886719,
            0.996073305606842,
            0.9969916939735413,
            0.9961574077606201
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9976341724395752,
        "body": "    sign_product = 1\n    total_sum = 0\n    for num in arr:\n        if num != 0:\n            sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n            total_sum += abs(num)\n    return None if not arr else total_sum * sign_product",
        "result": "failed: ",
        "similarities": [
            0.9972190856933594,
            0.9969890117645264,
            0.9967758059501648,
            0.9973596334457397,
            0.9971359968185425,
            0.9973157644271851,
            0.9972869753837585,
            0.9972043633460999,
            0.9963497519493103,
            0.9969133138656616,
            0.9973157644271851,
            0.9965552091598511,
            0.9971516132354736,
            0.9966852068901062,
            0.9976341724395752,
            0.9965047240257263,
            0.9756945371627808,
            0.9974371194839478,
            0.9971821308135986,
            0.9962039589881897
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9949321746826172,
        "body": "        n = len(grid)\n        res = []\n        for i in range(n):\n            for j in range(n):\n                path = [grid[i][j]]\n                for _ in range(k-1):\n                    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n                    min_val = float('inf')\n                    next_cell = None\n                    for direction in directions:\n                        ni, nj = i + direction[0], j + direction[1]\n                        if 0 <= ni < n and 0 <= nj < n:\n                            val = grid[ni][nj]\n                            if val < min_val:\n                                min_val = val\n                                next_cell = (ni, nj)\n                    i, j = next_cell\n                    path.append(grid[i][j])\n        return path",
        "result": "failed: unexpected indent (<string>, line 32)",
        "similarities": [
            0.9924429655075073,
            0.9943554401397705,
            0.9942713379859924,
            0.9740864634513855,
            0.993820309638977,
            0.9917683005332947,
            0.9942170977592468,
            0.9937778115272522,
            0.9903275370597839,
            0.9949321746826172,
            0.9943860769271851,
            0.992716372013092,
            0.9945582151412964,
            0.9935322999954224,
            0.9940731525421143,
            0.9935754537582397,
            0.9930262565612793,
            0.9944833517074585,
            0.9941793084144592,
            0.9936715960502625
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9956728219985962,
        "body": "    result = [my_first] \n    my_second = 3\n    for my_index in range(1, n + 1):\n        if my_index == 0 or my_index == 1:\n            my_third = 3\n        elif my_index % 2 != 0:\n            my_third = result[my_index - 1] + result[my_index - 2]\n        else:\n            my_third = 1 + my_index // 2\n        result.append(my_third)\n    return result",
        "result": "failed: name 'my_first' is not defined",
        "similarities": [
            0.9933872222900391,
            0.9929289817810059,
            0.9945279359817505,
            0.9875679016113281,
            0.9935460686683655,
            0.9936649799346924,
            0.9945427775382996,
            0.9905298948287964,
            0.9920015931129456,
            0.9938654899597168,
            0.9936286807060242,
            0.9950094819068909,
            0.9946693778038025,
            0.9949983358383179,
            0.9935940504074097,
            0.9932805299758911,
            0.9956728219985962,
            0.9935812950134277,
            0.9938033223152161,
            0.994718074798584
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9969398379325867,
        "body": "    result = 1\n    for char in str(n):\n        digit = int(char)\n        if digit % 2 != 0:\n            result *= digit\n    return result",
        "result": "failed: ",
        "similarities": [
            0.994392991065979,
            0.9968763589859009,
            0.9966856241226196,
            0.9950146079063416,
            0.9966483116149902,
            0.9966380596160889,
            0.9969398379325867,
            0.9968763589859009,
            0.9926543235778809,
            0.9960393309593201,
            0.9954296946525574,
            0.9959949851036072,
            0.995652973651886,
            0.9967339038848877,
            0.9829609394073486,
            0.9967339038848877,
            0.9966772198677063,
            0.9883424639701843,
            0.9968763589859009,
            0.9967113137245178
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9975895285606384,
        "body": "    count_open = 0\n    for char in string:\n        if char == '[':\n            count_open += 1\n        elif char == ']':\n            if count_open > 0:\n                count_open -= 1\n            else:\n                return False\n    return count_open != 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9963870644569397,
            0.9971580505371094,
            0.9965300559997559,
            0.9962764382362366,
            0.9957157969474792,
            0.9973176717758179,
            0.9972127676010132,
            0.9971580505371094,
            0.9958215355873108,
            0.994226336479187,
            0.9975895285606384,
            0.9972814321517944,
            0.9975534081459045,
            0.9968521595001221,
            0.9959006905555725,
            0.9959450960159302,
            0.9970840811729431,
            0.9970098733901978,
            0.9972040057182312,
            0.9964162707328796
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9963145852088928,
        "body": "    result = 0\n    for num in lst:\n        num_ceiled = int(num) if num >= 0 else int(-num)\n        result += num_ceiled ** 2",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9950913190841675,
            0.9948166608810425,
            0.9958980083465576,
            0.9900292158126831,
            0.9955118894577026,
            0.9935009479522705,
            0.9947658181190491,
            0.9921989440917969,
            0.9914995431900024,
            0.9960138201713562,
            0.9963145852088928,
            0.996118426322937,
            0.9959166646003723,
            0.9956258535385132,
            0.9958891868591309,
            0.9929414391517639,
            0.9880864024162292,
            0.9956205487251282,
            0.9949727654457092,
            0.9959140419960022
        ]
    },
    "HumanEval/134": {
        "similarity": 0.99608314037323,
        "body": "    last_char = txt[-1].lower()\n    is_space = False\n    for char in reversed(txt[:-1]):\n        if char != ' ':\n            is_space = True\n            break\n    return (is_space and not last_char.isalpha()) or not is_space",
        "result": "failed: ",
        "similarities": [
            0.9937892556190491,
            0.9926403760910034,
            0.9953992962837219,
            0.9952107667922974,
            0.99608314037323,
            0.9944157004356384,
            0.9951390624046326,
            0.9909424185752869,
            0.994944155216217,
            0.99528968334198,
            0.9876710176467896,
            0.9954766035079956,
            0.9953736066818237,
            0.9882375001907349,
            0.9933893084526062,
            0.9949567914009094,
            0.9954365491867065,
            0.9957833886146545,
            0.995601236820221,
            0.9954317212104797
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9951551556587219,
        "body": "    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index",
        "result": "passed",
        "similarities": [
            0.9950482249259949,
            0.9931092858314514,
            0.9882257580757141,
            0.9946783185005188,
            0.9901871085166931,
            0.9930106997489929,
            0.9945762157440186,
            0.9863125681877136,
            0.9916281700134277,
            0.9893625974655151,
            0.9939242005348206,
            0.9939649701118469,
            0.9928984642028809,
            0.9951551556587219,
            0.9918751120567322,
            0.991767168045044,
            0.9947347044944763,
            0.9951139688491821,
            0.9945287108421326,
            0.9935591816902161
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9971866607666016,
        "body": "    max_negative = None\n    min_positive = None\n    for num in lst:\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n        elif num >= 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n    return max_negative, min_positive if min_positive is not None else None",
        "result": "failed: ",
        "similarities": [
            0.9958815574645996,
            0.9964135885238647,
            0.9960893392562866,
            0.9971866607666016,
            0.9931124448776245,
            0.9971210956573486,
            0.9849709272384644,
            0.9962143301963806,
            0.9926169514656067,
            0.9969415068626404,
            0.9968587160110474,
            0.9968990683555603,
            0.9962642192840576,
            0.9970420002937317,
            0.9961820244789124,
            0.992824137210846,
            0.9970420002937317,
            0.994545578956604,
            0.9970032572746277,
            0.9970420002937317
        ]
    },
    "HumanEval/137": {
        "similarity": 0.990919828414917,
        "body": "    if a < b:\n        return b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a <= b:\n            return None\n    else:\n        for var in [a, b]:\n            if isinstance(var, str):\n                if ',' in var:\n                    var = var.replace(',', '.')\n        if a < b or a == b:\n            return a\n    return b",
        "result": "failed: '<' not supported between instances of 'int' and 'str'",
        "similarities": [
            0.9899742007255554,
            0.9808028340339661,
            0.9872351288795471,
            0.9907298684120178,
            0.9903960824012756,
            0.9884348511695862,
            0.9905002117156982,
            0.9826509356498718,
            0.9856336712837219,
            0.9501057863235474,
            0.9899751543998718,
            0.9885965585708618,
            0.9895443320274353,
            0.9851963520050049,
            0.9906315207481384,
            0.9893527626991272,
            0.990919828414917,
            0.9839479327201843,
            0.9865424633026123,
            0.9840160012245178
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9937672019004822,
        "body": "        for i in range(2, n+1, 2):\n            sum_even = 0\n            for j in range(i, n+1, 2):\n                if n == sum_even + j:\n                    return True\n                sum_even += j\n        return False",
        "result": "failed: unexpected indent (<string>, line 9)",
        "similarities": [
            0.9931835532188416,
            0.9922257661819458,
            0.9910085797309875,
            0.9876753091812134,
            0.9832075238227844,
            0.9929150938987732,
            0.9926581978797913,
            0.9911872744560242,
            0.9932488203048706,
            0.9909093976020813,
            0.9935358762741089,
            0.9930080771446228,
            0.9887470602989197,
            0.9833048582077026,
            0.9937672019004822,
            0.9907100200653076,
            0.9907663464546204,
            0.9870774149894714,
            0.9921427369117737,
            0.9926559329032898
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9955174326896667,
        "body": "    my_result = 1\n    for my_i in range(n, 0, -1):\n        my_result *= my_i\n    return my_result",
        "result": "failed: Test 4",
        "similarities": [
            0.9912197589874268,
            0.9952232241630554,
            0.991047739982605,
            0.9954075217247009,
            0.9946675896644592,
            0.9946675896644592,
            0.9955174326896667,
            0.9946088194847107,
            0.9913952350616455,
            0.9856782555580139,
            0.9894142150878906,
            0.993585467338562,
            0.995121419429779,
            0.9946675896644592,
            0.9946675896644592,
            0.990691065788269,
            0.9946675896644592,
            0.9921072125434875,
            0.9938348531723022,
            0.9853423237800598
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9940019845962524,
        "body": "    my_result = \"\"\n    for char in text:\n        if char.isspace():\n            if len(my_result) >= 2 and my_result[-1].isspace() and my_result[-2].isspace():\n                my_result += \"-\"\n            else:\n                my_result += \"_\"\n        else:\n            my_result += char\n    return my_result",
        "result": "failed: This prints if this assert fails 4 (good for debugging!)",
        "similarities": [
            0.9939852356910706,
            0.9932742118835449,
            0.990607738494873,
            0.9871343374252319,
            0.9932199120521545,
            0.9936288595199585,
            0.9895208477973938,
            0.9936386942863464,
            0.987975001335144,
            0.9933016896247864,
            0.9934862852096558,
            0.9940019845962524,
            0.9855738282203674,
            0.992022693157196,
            0.9906896352767944,
            0.9927456378936768,
            0.9870627522468567,
            0.9863321185112,
            0.9934074878692627,
            0.9914010763168335
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9963035583496094,
        "body": "        count_digits = 0\n        dot_count = 0\n        for char in file_name:\n            if char.isdigit():\n                count_digits += 1\n            elif char == '.':\n                dot_count += 1\n        if dot_count != 1 or count_digits > 3:\n            return 'No'\n        pre_dot = ''\n        post_dot = ''\n        for i, char in enumerate(file_name):\n            if char == '.':\n                break\n            if not (char.isalpha() and char.lower() <= 'z' and char.lower() >= 'a'):\n                return 'No'\n            pre_dot += char\n        for i, char in enumerate(file_name[pre_dot.index('.') + 1:]):\n            post_dot += char\n            if post_dot.lower() not in ['txt', 'exe', 'dll']:\n                return 'No'\n        return 'Yes'",
        "result": "failed: unexpected indent (<string>, line 16)",
        "similarities": [
            0.9865421652793884,
            0.9950776696205139,
            0.9950535297393799,
            0.9945480823516846,
            0.9941881895065308,
            0.9945662617683411,
            0.9953391551971436,
            0.9939354658126831,
            0.9952390789985657,
            0.9943078756332397,
            0.9876227974891663,
            0.9955929517745972,
            0.9954305291175842,
            0.9952465891838074,
            0.9947248697280884,
            0.9953281879425049,
            0.9951570630073547,
            0.9951164126396179,
            0.9960516095161438,
            0.9963035583496094
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9990018606185913,
        "body": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n    return sum",
        "result": "failed: ",
        "similarities": [
            0.9990018606185913,
            0.9989797472953796,
            0.9988824129104614,
            0.9989786744117737,
            0.9986733198165894,
            0.9989553093910217,
            0.998907208442688,
            0.9989390969276428,
            0.9989796876907349,
            0.9986177086830139,
            0.9982869029045105,
            0.998907208442688,
            0.9989390969276428,
            0.9989796876907349,
            0.9985134601593018,
            0.9983956217765808,
            0.9983090162277222,
            0.9967602491378784,
            0.9985468983650208,
            0.996141254901886
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9945213198661804,
        "body": "    prime_words = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\n\n    for i in range(2, n):\n        if n <= i:\n            return True\n        if n % i == 0:\n            return False",
        "result": "failed: name 'is_prime' is not defined",
        "similarities": [
            0.9934467673301697,
            0.9903934001922607,
            0.9924206137657166,
            0.9855393171310425,
            0.9903934001922607,
            0.9869109988212585,
            0.9923946857452393,
            0.9922278523445129,
            0.9937682151794434,
            0.9933947324752808,
            0.9933194518089294,
            0.992601215839386,
            0.993166983127594,
            0.9945213198661804,
            0.9926310181617737,
            0.9918606281280518,
            0.9929806590080261,
            0.9933255910873413,
            0.9928946495056152,
            0.9940951466560364
        ]
    },
    "HumanEval/144": {
        "similarity": 0.995631992816925,
        "body": "    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    \n    total_numerator = numerator_x * numerator_n\n    total_denominator = denominator_x * denominator_n\n    \n    for i in range(2, min(total_numerator, total_denominator) + 1):\n        if total_numerator % i == 0 and total_denominator % i == 0:\n            return False\n    return True",
        "result": "failed: test1",
        "similarities": [
            0.9930397868156433,
            0.9904685020446777,
            0.9947920441627502,
            0.9932062029838562,
            0.9950320720672607,
            0.995631992816925,
            0.9936185479164124,
            0.9927513003349304,
            0.9932574033737183,
            0.9936978220939636,
            0.9949946999549866,
            0.9945048093795776,
            0.9951453804969788,
            0.9897665977478027,
            0.9940909147262573,
            0.9947826862335205,
            0.9913182854652405,
            0.9942474365234375,
            0.9950549602508545,
            0.9936979413032532
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9949194192886353,
        "body": "    for i in range(len(nums)):\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if sum(int(digit) for digit in str(nums[j]).replace('-', '')) <= sum(int(digit) for digit in str(nums[min_index]).replace('-', '')):\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums",
        "result": "failed: ",
        "similarities": [
            0.9922932386398315,
            0.9874257445335388,
            0.9916090965270996,
            0.9906980395317078,
            0.9922269582748413,
            0.992875337600708,
            0.9868723154067993,
            0.9933308959007263,
            0.98798006772995,
            0.9938789010047913,
            0.9871843457221985,
            0.9937864542007446,
            0.9938558340072632,
            0.9915592670440674,
            0.9943187236785889,
            0.9794206023216248,
            0.9938267469406128,
            0.9922888875007629,
            0.9949194192886353,
            0.9929247498512268
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9956685900688171,
        "body": "    odd_digits = [str(i) for i in range(1, 10)]\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and any(digit in odd_digits for digit in str(abs(num))):\n            count += 1",
        "result": "failed: ",
        "similarities": [
            0.987999677658081,
            0.9922367930412292,
            0.9955134987831116,
            0.9939733743667603,
            0.9952195882797241,
            0.995378315448761,
            0.9952930808067322,
            0.9952195882797241,
            0.989040195941925,
            0.9956101179122925,
            0.9938631653785706,
            0.9956685900688171,
            0.9931463003158569,
            0.994773268699646,
            0.994289219379425,
            0.9952049255371094,
            0.9919506907463074,
            0.994024395942688,
            0.993270754814148,
            0.9936255216598511
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9984309673309326,
        "body": "    max_count = 0\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    max_count += 1",
        "result": "failed: ",
        "similarities": [
            0.9982950091362,
            0.9963710308074951,
            0.9946212768554688,
            0.9983319044113159,
            0.9982783794403076,
            0.9977663159370422,
            0.9984146952629089,
            0.9976818561553955,
            0.9946886301040649,
            0.9982462525367737,
            0.9984309673309326,
            0.9982457756996155,
            0.9966077208518982,
            0.9978973269462585,
            0.9955967664718628,
            0.9957677125930786,
            0.9983237385749817,
            0.9963396787643433,
            0.9971597790718079,
            0.9982261657714844
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9948199391365051,
        "body": "    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] or \\\n       planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = -1\n    planet2_index = -1\n    for i, planet in enumerate(planets):\n        if planet == planet1:\n            planet1_index = i\n        elif planet == planet2:\n            planet2_index = i\n    result = []\n    for planet in planets[planet1_index+1:planet2_index]:\n        result.append(planet)\n    return tuple(sorted(result))",
        "result": "failed: Second test error: ()",
        "similarities": [
            0.9896581768989563,
            0.9918985962867737,
            0.991845965385437,
            0.9896055459976196,
            0.9948199391365051,
            0.9943471550941467,
            0.9942371845245361,
            0.9868027567863464,
            0.9935749769210815,
            0.9932814240455627,
            0.9929229617118835,
            0.9939523339271545,
            0.9922922253608704,
            0.990874171257019,
            0.9926907420158386,
            0.9931567311286926,
            0.9939985871315002,
            0.9945045113563538,
            0.9883849620819092,
            0.9942484498023987
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9956279397010803,
        "body": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    sorted_list.sort(key=lambda x: (len(x), x))\n    return sorted_list",
        "result": "passed",
        "similarities": [
            0.9950843453407288,
            0.9935470223426819,
            0.9938340783119202,
            0.9941558837890625,
            0.9897279143333435,
            0.9918968081474304,
            0.9935789704322815,
            0.995222806930542,
            0.9948623180389404,
            0.9920991659164429,
            0.9945241212844849,
            0.9947816133499146,
            0.9951629638671875,
            0.9956279397010803,
            0.9898706078529358,
            0.994232177734375,
            0.9900063872337341,
            0.9955763816833496,
            0.9946648478507996,
            0.9869615435600281
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9971905946731567,
        "body": "    prime = True\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i < 1:\n            prime = False\n            break\n    if prime:\n        return x",
        "result": "failed: ",
        "similarities": [
            0.985527753829956,
            0.9963718056678772,
            0.9971122741699219,
            0.9947832822799683,
            0.989984393119812,
            0.9969093203544617,
            0.997048020362854,
            0.9959871172904968,
            0.9971905946731567,
            0.9965903759002686,
            0.9971526265144348,
            0.9967233538627625,
            0.997003436088562,
            0.9964267611503601,
            0.9943690896034241,
            0.9964267611503601,
            0.9959871172904968,
            0.9953667521476746,
            0.9965008497238159,
            0.9940308332443237
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9989908933639526,
        "body": "    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                total_sum += num ** 2",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9972389936447144,
            0.998704195022583,
            0.9982766509056091,
            0.9966964721679688,
            0.9989272952079773,
            0.9986149668693542,
            0.9987756609916687,
            0.9974742531776428,
            0.9986220002174377,
            0.9987662434577942,
            0.9980593323707581,
            0.9985448718070984,
            0.9979830384254456,
            0.998818039894104,
            0.9989908933639526,
            0.9989272952079773,
            0.9989908933639526,
            0.998715877532959,
            0.9986149668693542,
            0.9989272952079773
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9965830445289612,
        "body": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9958010315895081,
            0.9965830445289612,
            0.9954847097396851,
            0.9951195120811462,
            0.9947343468666077,
            0.9951576590538025,
            0.9964194297790527,
            0.9932733178138733,
            0.9888836741447449,
            0.9852218627929688,
            0.9957494139671326,
            0.9942895174026489,
            0.9956484436988831,
            0.9955974221229553,
            0.9942971467971802,
            0.9954847097396851,
            0.9964202046394348,
            0.9957494139671326,
            0.9946851134300232,
            0.9952854514122009
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9978715777397156,
        "body": "    strongest_extension = \"\"\n    max_strength = -1\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = len(extension) - cap\n        strength = cap - sm\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            strongest_extension = class_name + \".\" + extension\n    return strongest_extension",
        "result": "failed: '' is not in list",
        "similarities": [
            0.9972015023231506,
            0.99785315990448,
            0.997719407081604,
            0.9977226257324219,
            0.9978340864181519,
            0.9977027773857117,
            0.9977622628211975,
            0.9976182579994202,
            0.9975379109382629,
            0.9975693225860596,
            0.9904813170433044,
            0.9959474205970764,
            0.9901439547538757,
            0.9978477358818054,
            0.9978715777397156,
            0.9978318810462952,
            0.9963725209236145,
            0.9975635409355164,
            0.9970173239707947,
            0.9977828860282898
        ]
    },
    "HumanEval/154": {
        "similarity": 0.996712327003479,
        "body": "    for _ in range(len(b) + 1):\n        for i in range(len(a)):\n            for j in range(len(b), 0, -1):\n                if a[i:i+j] == b:\n                    return True\n    return False",
        "result": "failed: test #3",
        "similarities": [
            0.9939899444580078,
            0.9964410662651062,
            0.9939899444580078,
            0.9958246946334839,
            0.9927589297294617,
            0.9966477751731873,
            0.9942396283149719,
            0.9959600567817688,
            0.9953262805938721,
            0.9961909055709839,
            0.996712327003479,
            0.9958415627479553,
            0.9955493807792664,
            0.9959399700164795,
            0.995764970779419,
            0.9960036277770996,
            0.9890971779823303,
            0.9941638112068176,
            0.99615478515625,
            0.9925957918167114
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9983090758323669,
        "body": "    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) <= 5:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "failed: ",
        "similarities": [
            0.9983090758323669,
            0.9909117817878723,
            0.9983090758323669,
            0.997115969657898,
            0.9981225728988647,
            0.9945857524871826,
            0.9983090758323669,
            0.9982833862304688,
            0.9983090758323669,
            0.9958533048629761,
            0.9983090758323669,
            0.9942943453788757,
            0.9983090758323669,
            0.9980310201644897,
            0.9919865131378174,
            0.9983090758323669,
            0.9979376792907715,
            0.9957128167152405,
            0.9983090758323669,
            0.9983090758323669
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9915728569030762,
        "body": "    mini_roman_map = {\n        1: 'i', 4: 'iv', 5: 'v',\n        9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    roman_string = ''\n    for num in range(1, number + 1):\n        for value, mini_roman in mini_roman_map.items():\n            if num >= value:\n                count = (num - 1) // value\n                roman_string += mini_roman * count\n                num -= count * value\n        if num > 0:\n            roman_string += 'i' * num",
        "result": "failed: ",
        "similarities": [
            0.989435613155365,
            0.9894859194755554,
            0.9858130216598511,
            0.9845890402793884,
            0.9833856225013733,
            0.9857794046401978,
            0.9915728569030762,
            0.9858461022377014,
            0.9880176186561584,
            0.9905772805213928,
            0.9906249046325684,
            0.984369158744812,
            0.9898586273193359,
            0.9868642091751099,
            0.98648601770401,
            0.9898712038993835,
            0.9891707897186279,
            0.9896372556686401,
            0.9856382012367249,
            0.9892098307609558
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9936049580574036,
        "body": "    for side_a, side_b, side_c in [(a, b, c)]:\n        for _ in range(len(side_a)):\n            if (side_a ** 2 + side_b ** 2) <= side_c ** 2 and (side_a ** 2 + side_c ** 2) <= side_b ** 2 and (side_b ** 2 + side_c ** 2) <= side_a ** 2:\n                return True\n    return False",
        "result": "failed: object of type 'int' has no len()",
        "similarities": [
            0.9922472238540649,
            0.9893608093261719,
            0.9926027059555054,
            0.9865386486053467,
            0.988815426826477,
            0.992661714553833,
            0.9933527708053589,
            0.9932206869125366,
            0.9933744668960571,
            0.9929010272026062,
            0.9935088753700256,
            0.9909477233886719,
            0.9891728162765503,
            0.9936049580574036,
            0.9928590059280396,
            0.9907889366149902,
            0.9794974327087402,
            0.9921044111251831,
            0.977136492729187,
            0.9921867847442627
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9971615672111511,
        "body": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word <= max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n    return max_word",
        "result": "passed",
        "similarities": [
            0.9949985146522522,
            0.9957700967788696,
            0.996499240398407,
            0.9963760375976562,
            0.9961141347885132,
            0.9970094561576843,
            0.9968565702438354,
            0.9954773783683777,
            0.9969301819801331,
            0.9970094561576843,
            0.9971615672111511,
            0.9964268207550049,
            0.9962093234062195,
            0.9953117370605469,
            0.9969918131828308,
            0.9857739210128784,
            0.9953972697257996,
            0.9970094561576843,
            0.9954057335853577,
            0.9960532188415527
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9954627156257629,
        "body": "    total = number\n    for i in range(need - number):\n        if remaining > 0:\n            total += 1\n            remaining -= 1\n        else:\n            break\n    return [total, remaining]",
        "result": "failed: Error",
        "similarities": [
            0.9885610342025757,
            0.9954586029052734,
            0.9950306415557861,
            0.9936726093292236,
            0.994918942451477,
            0.9954077005386353,
            0.9943273663520813,
            0.9933289289474487,
            0.9949638247489929,
            0.9926521182060242,
            0.9868439435958862,
            0.9831789135932922,
            0.9954627156257629,
            0.9939725995063782,
            0.9937270283699036,
            0.9837270379066467,
            0.9936364889144897,
            0.9944733381271362,
            0.9941247701644897,
            0.9914947152137756
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9982928037643433,
        "body": "    result = 0\n    for i in range(len(operand) - 1):\n        if i == 0:\n            result = operand[0]\n        else:\n            if operator[i] == '+':\n                result += operand[i + 1]\n            elif operator[i] == '-':\n                result -= operand[i + 1]\n            elif operator[i] == '*':\n                result *= operand[i + 1]\n            elif operator[i] == '//':\n                result //= operand[i + 1]\n            else:\n                result **= operand[i + 1]",
        "result": "failed: ",
        "similarities": [
            0.9973317384719849,
            0.9979503154754639,
            0.9970641732215881,
            0.9967027306556702,
            0.9964278340339661,
            0.9947080016136169,
            0.99615478515625,
            0.9981217980384827,
            0.9976442456245422,
            0.9975724816322327,
            0.9980289936065674,
            0.9975104331970215,
            0.9976710081100464,
            0.9965057373046875,
            0.9970170259475708,
            0.9982928037643433,
            0.99737149477005,
            0.9976654052734375,
            0.997532308101654,
            0.9980182647705078
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9965552091598511,
        "body": "    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += char.upper()\n        elif 'A' <= char <= 'Z':\n            result += char.lower()\n        else:\n            result += char\n    for i in range(len(s) - 1, -1, -1):\n        result = \"\".join([char for char in result])",
        "result": "failed: ",
        "similarities": [
            0.9961905479431152,
            0.9950316548347473,
            0.9965552091598511,
            0.9941626191139221,
            0.9948170185089111,
            0.9959760904312134,
            0.995415449142456,
            0.9946837425231934,
            0.9961736798286438,
            0.9928484559059143,
            0.9954572916030884,
            0.9927709698677063,
            0.9947540163993835,
            0.9957436323165894,
            0.9923951029777527,
            0.9913837909698486,
            0.9948170185089111,
            0.9949007630348206,
            0.9961905479431152,
            0.9953386187553406
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9975271821022034,
        "body": "    import hashlib\n    md5_hash = hashlib.md5()\n    for char in text:\n        if char == '':\n            return None\n        md5_hash.update(char.encode())",
        "result": "failed: ",
        "similarities": [
            0.9971265196800232,
            0.9968956708908081,
            0.9971110820770264,
            0.997137188911438,
            0.9968807101249695,
            0.9974575042724609,
            0.9970309734344482,
            0.9968690276145935,
            0.9974990487098694,
            0.9969984292984009,
            0.9975271821022034,
            0.9958361387252808,
            0.9957483410835266,
            0.9971110820770264,
            0.9971005320549011,
            0.9949848651885986,
            0.996465802192688,
            0.9972761273384094,
            0.9970197081565857,
            0.9974416494369507
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9958048462867737,
        "body": "    result = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if str(i).count('e') >= (len(str(i)) // 2) and i <= b:\n            result.append(i)\n    return result",
        "result": "failed: Test 1",
        "similarities": [
            0.9919378161430359,
            0.9911268353462219,
            0.9958048462867737,
            0.9948112964630127,
            0.9914115071296692,
            0.9917586445808411,
            0.9935720562934875,
            0.9926406741142273,
            0.9939897656440735,
            0.9938040375709534,
            0.992388904094696,
            0.9885314106941223,
            0.9919929504394531,
            0.9954063296318054,
            0.9936563372612,
            0.9949210286140442,
            0.9956565499305725,
            0.9957411885261536,
            0.9943140745162964,
            0.9939442873001099
        ]
    }
}