{
    "HumanEval/0": {
        "similarity": 0.9969096779823303,
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9959551095962524,
            0.9968958497047424,
            0.9893427491188049,
            0.9969096779823303,
            0.9944496154785156,
            0.9968958497047424,
            0.9968958497047424,
            0.9969096779823303,
            0.9964533448219299,
            0.9966529011726379,
            0.9968958497047424,
            0.9968958497047424,
            0.9852680563926697,
            0.9968958497047424,
            0.9968958497047424,
            0.9968958497047424,
            0.9893427491188049,
            0.9929291605949402,
            0.9960481524467468,
            0.9947068095207214
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9980436563491821,
        "body": "    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = ''\n    return result",
        "result": "passed",
        "similarities": [
            0.9975437521934509,
            0.9953954815864563,
            0.997765302658081,
            0.9959760904312134,
            0.9977644085884094,
            0.9933653473854065,
            0.9977627992630005,
            0.9969909191131592,
            0.9956998229026794,
            0.9976661205291748,
            0.9979846477508545,
            0.9977057576179504,
            0.9978639483451843,
            0.9980436563491821,
            0.9961449503898621,
            0.9977467060089111,
            0.9972893595695496,
            0.9974740743637085,
            0.9977083802223206,
            0.997137188911438
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9973901510238647,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            0.9959846138954163,
            0.9959846138954163,
            0.9926487803459167,
            0.9890449047088623,
            0.9932944774627686,
            0.9973901510238647,
            0.9973901510238647,
            0.9959846138954163,
            0.9959846138954163,
            0.9973901510238647,
            0.9959846138954163,
            0.9973901510238647,
            0.9968866109848022,
            0.9926515221595764,
            0.9973901510238647,
            0.9973901510238647,
            0.9973901510238647,
            0.9973901510238647,
            0.9973901510238647,
            0.9973901510238647
        ]
    },
    "HumanEval/3": {
        "similarity": 1.0,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9986444711685181,
        "body": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)",
        "result": "passed",
        "similarities": [
            0.9955673217773438,
            0.997353196144104,
            0.9986444115638733,
            0.9982035756111145,
            0.9983465075492859,
            0.9977707266807556,
            0.9986444711685181,
            0.9978442788124084,
            0.9986444711685181,
            0.9978336691856384,
            0.9986444711685181,
            0.9983662366867065,
            0.9982988238334656,
            0.9983521699905396,
            0.9947433471679688,
            0.9974214434623718,
            0.9973286986351013,
            0.9985036253929138,
            0.9982035756111145,
            0.9986444115638733
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9975279569625854,
        "body": "    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result",
        "result": "passed",
        "similarities": [
            0.995967447757721,
            0.9972872734069824,
            0.9973329305648804,
            0.9966799020767212,
            0.9971938133239746,
            0.9970592856407166,
            0.9933028817176819,
            0.9896363615989685,
            0.9959925413131714,
            0.9973329305648804,
            0.9967203736305237,
            0.997142493724823,
            0.9940747022628784,
            0.9944118857383728,
            0.9975279569625854,
            0.9961185455322266,
            0.9973329305648804,
            0.9933593273162842,
            0.9973329305648804,
            0.9968221783638
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9958747029304504,
        "body": "    result = []\n    for group in paren_string.split():\n        stack = [0] * len(group)\n        max_depth = 0\n        for i, char in enumerate(group):\n            if char == '(':\n                stack[i] += 1\n                max_depth = max(max_depth, stack[i])\n            elif char == ')':\n                stack[i] -= 1\n        result.append(max_depth)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.995496928691864,
            0.9949154257774353,
            0.9914261698722839,
            0.9946128726005554,
            0.9864991903305054,
            0.9930380582809448,
            0.9952918887138367,
            0.9943646192550659,
            0.9955891966819763,
            0.973175585269928,
            0.9958747029304504,
            0.9950802326202393,
            0.9949600696563721,
            0.9950864911079407,
            0.9953330159187317,
            0.9955723285675049,
            0.9947218894958496,
            0.9946436882019043,
            0.9943297505378723,
            0.9945228099822998
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9997099041938782,
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed",
        "similarities": [
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9944865703582764,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782,
            0.9997099041938782
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9979296326637268,
        "body": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product",
        "result": "passed",
        "similarities": [
            0.9958780407905579,
            0.9978951215744019,
            0.9978916645050049,
            0.9979296326637268,
            0.9978798627853394,
            0.9977396130561829,
            0.9978545308113098,
            0.9978916645050049,
            0.9747348427772522,
            0.9979189038276672,
            0.9954179525375366,
            0.9978916645050049,
            0.9951494932174683,
            0.9978951811790466,
            0.9979189038276672,
            0.9978951215744019,
            0.9978916645050049,
            0.9978916645050049,
            0.9976310729980469,
            0.997517466545105
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9970269799232483,
        "body": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result",
        "result": "passed",
        "similarities": [
            0.994051992893219,
            0.9969612956047058,
            0.9968955516815186,
            0.9959233999252319,
            0.9956966042518616,
            0.9968955516815186,
            0.9962834119796753,
            0.9964292645454407,
            0.9794335961341858,
            0.9899957776069641,
            0.997019350528717,
            0.9969648122787476,
            0.9970269799232483,
            0.9968823194503784,
            0.9969228506088257,
            0.9960817098617554,
            0.996834397315979,
            0.996834397315979,
            0.9969648122787476,
            0.9959121346473694
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9944040179252625,
        "body": "    while string != string[::-1]:\n        prefix = string[:-len(string[::-1]) + 1]\n        suffix = string[-len(string[::-1]):]\n        string += suffix[::-1] + prefix\n    return string",
        "result": "timed out",
        "similarities": [
            0.9943456053733826,
            0.9940614104270935,
            0.9932377338409424,
            0.9929322004318237,
            0.9939717650413513,
            0.9923641681671143,
            0.9907466769218445,
            0.9927496910095215,
            0.9937587380409241,
            0.9935959577560425,
            0.9916484355926514,
            0.9827973246574402,
            0.9934899210929871,
            0.9835771322250366,
            0.9941835999488831,
            0.9943102598190308,
            0.9938976168632507,
            0.9923856854438782,
            0.9944040179252625,
            0.9874622225761414
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9924924969673157,
        "body": "    result = ''.join(str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b))\n    return result",
        "result": "passed",
        "similarities": [
            0.9903552532196045,
            0.9902063012123108,
            0.9751002788543701,
            0.9818106293678284,
            0.9911705851554871,
            0.9896081686019897,
            0.9902063012123108,
            0.9924924969673157,
            0.9838048815727234,
            0.9812971353530884,
            0.9913105368614197,
            0.9902063012123108,
            0.9899001121520996,
            0.9903551340103149,
            0.9894994497299194,
            0.9902063012123108,
            0.9902063012123108,
            0.982430100440979,
            0.9867653250694275,
            0.9843320250511169
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9901446104049683,
        "body": "    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)",
        "result": "passed",
        "similarities": [
            0.9893513917922974,
            0.9812372922897339,
            0.9835033416748047,
            0.9883319735527039,
            0.9881865978240967,
            0.9869989156723022,
            0.9883319735527039,
            0.9841167330741882,
            0.9901446104049683,
            0.9760923981666565,
            0.9856483340263367,
            0.9881865978240967,
            0.9886241555213928,
            0.9725793600082397,
            0.9883319735527039,
            0.9895334839820862,
            0.9895917177200317,
            0.9893710613250732,
            0.9881865978240967,
            0.9883319735527039
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9982265830039978,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)",
        "result": "passed",
        "similarities": [
            0.9981103539466858,
            0.9981103539466858,
            0.9982265830039978,
            0.9982265830039978,
            0.9902923107147217,
            0.9902923107147217,
            0.9982265830039978,
            0.9982265830039978,
            0.9970431923866272,
            0.9978776574134827,
            0.9912766218185425,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978,
            0.9982265830039978
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9933188557624817,
        "body": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return sorted(result)",
        "result": "passed",
        "similarities": [
            0.9824618101119995,
            0.9929707050323486,
            0.9831908345222473,
            0.9928986430168152,
            0.9917269349098206,
            0.9906795024871826,
            0.9913572072982788,
            0.9933188557624817,
            0.993033766746521,
            0.9927621483802795,
            0.9933188557624817,
            0.9904946088790894,
            0.9933188557624817,
            0.9915485382080078,
            0.9904122948646545,
            0.9831908345222473,
            0.9917784333229065,
            0.9831908345222473,
            0.983180820941925,
            0.9928990602493286
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9980097413063049,
        "body": "    return ' '.join(str(i) for i in range(n + 1))",
        "result": "passed",
        "similarities": [
            0.9978591799736023,
            0.9978591799736023,
            0.9978591799736023,
            0.9961804151535034,
            0.9980097413063049,
            0.9978590607643127,
            0.9976825714111328,
            0.9980097413063049,
            0.9976825714111328,
            0.9980097413063049,
            0.9978591799736023,
            0.9978591799736023,
            0.9961122274398804,
            0.9980097413063049,
            0.9976825714111328,
            0.9980097413063049,
            0.9976825714111328,
            0.9976825714111328,
            0.9960384368896484,
            0.9978591799736023
        ]
    },
    "HumanEval/16": {
        "similarity": 0.998814046382904,
        "body": "    return len(set(string.casefold()))",
        "result": "passed",
        "similarities": [
            0.998814046382904,
            0.998814046382904,
            0.9985546469688416,
            0.9985546469688416,
            0.998814046382904,
            0.998814046382904,
            0.998814046382904,
            0.989865779876709,
            0.9979732036590576,
            0.9972834587097168,
            0.998814046382904,
            0.998814046382904,
            0.9979732036590576,
            0.998814046382904,
            0.998814046382904,
            0.998814046382904,
            0.9977434873580933,
            0.998814046382904,
            0.998814046382904,
            0.9954671263694763
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9928309917449951,
        "body": "    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]",
        "result": "passed",
        "similarities": [
            0.9897434711456299,
            0.9827615022659302,
            0.9835127592086792,
            0.9913892149925232,
            0.990772545337677,
            0.9928309917449951,
            0.9853511452674866,
            0.9873579144477844,
            0.9928309917449951,
            0.9896609783172607,
            0.9894585013389587,
            0.979630708694458,
            0.9913018941879272,
            0.9856671094894409,
            0.9847925901412964,
            0.9928309917449951,
            0.9897000193595886,
            0.9882039427757263,
            0.9890343546867371,
            0.9910103678703308
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9901461601257324,
        "body": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9855684041976929,
            0.9868413805961609,
            0.9865276217460632,
            0.9758636355400085,
            0.9887741804122925,
            0.9806459546089172,
            0.9868294596672058,
            0.9788775444030762,
            0.9887741804122925,
            0.9857804179191589,
            0.9878857135772705,
            0.9901461601257324,
            0.9758636355400085,
            0.9867028594017029,
            0.9806459546089172,
            0.9833412170410156,
            0.9896356463432312,
            0.9885507225990295,
            0.9831743836402893,
            0.9887741804122925
        ]
    },
    "HumanEval/19": {
        "similarity": 0.992212176322937,
        "body": "    words = numbers.split()\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(words, key=lambda x: num_dict[x]))",
        "result": "passed",
        "similarities": [
            0.9816142916679382,
            0.9847255349159241,
            0.9840589761734009,
            0.992212176322937,
            0.985232412815094,
            0.9874200224876404,
            0.9880543947219849,
            0.9900769591331482,
            0.9882082939147949,
            0.9842466115951538,
            0.9899998903274536,
            0.990188717842102,
            0.9892759919166565,
            0.9731568098068237,
            0.9918070435523987,
            0.9885639548301697,
            0.9780534505844116,
            0.9917658567428589,
            0.9854253530502319,
            0.9855718016624451
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9979915618896484,
        "body": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n            \n    return closest_pair",
        "result": "passed",
        "similarities": [
            0.9976576566696167,
            0.9978501200675964,
            0.9968820810317993,
            0.9960761666297913,
            0.9926185607910156,
            0.9963342547416687,
            0.9958512187004089,
            0.995055079460144,
            0.9978627562522888,
            0.9970164895057678,
            0.9970974326133728,
            0.9979915618896484,
            0.9978190064430237,
            0.9978805184364319,
            0.9962900876998901,
            0.9977396726608276,
            0.9973909258842468,
            0.9977485537528992,
            0.995410144329071,
            0.997847318649292
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9944542646408081,
        "body": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]",
        "result": "passed",
        "similarities": [
            0.9925298094749451,
            0.9941557049751282,
            0.9925298094749451,
            0.9886704683303833,
            0.9896944761276245,
            0.9928289651870728,
            0.9940687417984009,
            0.9941557049751282,
            0.9941557049751282,
            0.9811285734176636,
            0.9909069538116455,
            0.9928289651870728,
            0.9911372661590576,
            0.9912867546081543,
            0.9942731261253357,
            0.9942041635513306,
            0.9925298094749451,
            0.9944542646408081,
            0.9937902688980103,
            0.9905389547348022
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9973270297050476,
        "body": "    return [x for x in values if isinstance(x, int)]",
        "result": "passed",
        "similarities": [
            0.9973170757293701,
            0.9973170757293701,
            0.9928956627845764,
            0.9973170757293701,
            0.9973270297050476,
            0.9973270297050476,
            0.9973170757293701,
            0.9885033369064331,
            0.9973270297050476,
            0.9973170757293701,
            0.9973170757293701,
            0.9973170757293701,
            0.9973170757293701,
            0.9972975850105286,
            0.9973170757293701,
            0.9881473183631897,
            0.9885033369064331,
            0.9973170757293701,
            0.9973270297050476,
            0.9892359375953674
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9978260397911072,
        "body": "    return len(string)",
        "result": "passed",
        "similarities": [
            0.9966202974319458,
            0.9966202974319458,
            0.9978259205818176,
            0.9978259205818176,
            0.9966202974319458,
            0.9978260397911072,
            0.9966202974319458,
            0.9978260397911072,
            0.9966202974319458,
            0.9968191385269165,
            0.9978259205818176,
            0.9978259205818176,
            0.9978259205818176,
            0.9978259205818176,
            0.9978259205818176,
            0.9966202974319458,
            0.9978259205818176,
            0.9978259205818176,
            0.9966202974319458,
            0.9978259205818176
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9990352988243103,
        "body": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "similarities": [
            0.9985188245773315,
            0.9989014863967896,
            0.9989014863967896,
            0.998818576335907,
            0.9985188245773315,
            0.9972279071807861,
            0.9984012246131897,
            0.995172381401062,
            0.9985188245773315,
            0.9984028339385986,
            0.9985188245773315,
            0.9990150332450867,
            0.9990352988243103,
            0.9990150332450867,
            0.9951063394546509,
            0.9990150332450867,
            0.9985188245773315,
            0.9990150332450867,
            0.9988682270050049,
            0.9990150332450867
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9978268146514893,
        "body": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "similarities": [
            0.9978268146514893,
            0.9978268146514893,
            0.9968016743659973,
            0.9959267973899841,
            0.9978268146514893,
            0.9961959719657898,
            0.9945544004440308,
            0.9978268146514893,
            0.9955297112464905,
            0.9955331683158875,
            0.9968016743659973,
            0.9972577691078186,
            0.9978268146514893,
            0.9961959719657898,
            0.9978268146514893,
            0.9968016743659973,
            0.9959534406661987,
            0.9941425323486328,
            0.99530029296875,
            0.9978268146514893
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9988425374031067,
        "body": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9986571073532104,
            0.9988425374031067,
            0.9988425374031067,
            0.9988425374031067,
            0.9974527955055237,
            0.9988425374031067,
            0.9988425374031067,
            0.9988425374031067,
            0.9987597465515137,
            0.9988425374031067,
            0.997428297996521,
            0.997428297996521,
            0.997428297996521,
            0.9987597465515137,
            0.9988425374031067,
            0.9922484159469604,
            0.9988425374031067,
            0.9988425374031067,
            0.997428297996521,
            0.9987597465515137
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9937962293624878,
        "body": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "result": "passed",
        "similarities": [
            0.9883953928947449,
            0.9937962293624878,
            0.993588924407959,
            0.9756940603256226,
            0.9879669547080994,
            0.9928632974624634,
            0.993588924407959,
            0.993588924407959,
            0.9930447936058044,
            0.9867873191833496,
            0.9632614850997925,
            0.9930447936058044,
            0.975581705570221,
            0.993588924407959,
            0.9937962293624878,
            0.993588924407959,
            0.9937962293624878,
            0.993588924407959,
            0.9928932189941406,
            0.9937962293624878
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9937155842781067,
        "body": "    return ''.join(strings)",
        "result": "passed",
        "similarities": [
            0.9890758991241455,
            0.9937155842781067,
            0.9890758991241455,
            0.9881587028503418,
            0.9881587028503418,
            0.9937155842781067,
            0.9576804637908936,
            0.9567341208457947,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9890758991241455,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9937155842781067,
            0.9890758991241455
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9997458457946777,
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "similarities": [
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777,
            0.9955731630325317,
            0.9997458457946777,
            0.9996858835220337,
            0.9996858835220337,
            0.9997458457946777,
            0.9996858835220337,
            0.9996858835220337,
            0.9997458457946777,
            0.9997458457946777,
            0.9996858835220337,
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777,
            0.9997458457946777
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9985687136650085,
        "body": "    return [i for i in l if i > 0]",
        "result": "passed",
        "similarities": [
            0.994320809841156,
            0.9985687136650085,
            0.9985268115997314,
            0.9854579567909241,
            0.9985687136650085,
            0.9985687136650085,
            0.9950989484786987,
            0.9985268115997314,
            0.9985687136650085,
            0.9985687136650085,
            0.9985268115997314,
            0.9985687136650085,
            0.9980589151382446,
            0.9982967376708984,
            0.9985687136650085,
            0.9985268115997314,
            0.9985687136650085,
            0.9985687136650085,
            0.9985687136650085,
            0.9985687136650085
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9993979930877686,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9993841052055359,
            0.9982261657714844,
            0.9993624687194824,
            0.9993841052055359,
            0.9993979930877686,
            0.9993625283241272,
            0.9993841052055359,
            0.9993979930877686,
            0.9987895488739014,
            0.9971913695335388,
            0.9993841052055359,
            0.9989762902259827,
            0.9949509501457214,
            0.9993979930877686,
            0.9993458986282349,
            0.9993841052055359,
            0.9993979930877686,
            0.9993979930877686,
            0.9993458986282349,
            0.9988716840744019
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9869814515113831,
        "body": "    n = len(xs) // 2\n    a, b = -xs[n] / xs[0], 1 / xs[0]\n    return (-b + math.sqrt(b ** 2 - 4 * a)) / (2 * a)",
        "result": "failed: ",
        "similarities": [
            0.9818081259727478,
            0.9821508526802063,
            0.9763622283935547,
            0.9842536449432373,
            0.9669347405433655,
            0.9826639294624329,
            0.9770056009292603,
            0.9854271411895752,
            0.984578013420105,
            0.9807333946228027,
            0.9861555695533752,
            0.9784303307533264,
            0.9863482117652893,
            0.9786752462387085,
            0.9770047068595886,
            0.9700931906700134,
            0.9788792133331299,
            0.9869814515113831,
            0.9710489511489868,
            0.947903573513031
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9946592450141907,
        "body": "    return [x if i % 3 != 0 else sorted([y for j, y in enumerate(l) if (j+1) % 3 == 0])[k] \n            for k, x in enumerate(l)]",
        "result": "failed: name 'i' is not defined",
        "similarities": [
            0.986617922782898,
            0.9830169677734375,
            0.9942358136177063,
            0.9942689538002014,
            0.9942358136177063,
            0.9928757548332214,
            0.9931721091270447,
            0.9933236837387085,
            0.9764571785926819,
            0.9913730621337891,
            0.9928109049797058,
            0.9946592450141907,
            0.9933236837387085,
            0.9926676750183105,
            0.9866288900375366,
            0.9926447868347168,
            0.9946592450141907,
            0.9939963817596436,
            0.9943986535072327,
            0.9788601398468018
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9989839196205139,
        "body": "    return sorted(set(l))",
        "result": "passed",
        "similarities": [
            0.9975530505180359,
            0.9989839196205139,
            0.9989839196205139,
            0.9887792468070984,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9975530505180359,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9989839196205139,
            0.9975530505180359,
            0.9975530505180359
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9942797422409058,
        "body": "    return max(l)",
        "result": "passed",
        "similarities": [
            0.9942797422409058,
            0.9929505586624146,
            0.9925014972686768,
            0.9751768708229065,
            0.9913373589515686,
            0.9942797422409058,
            0.9942797422409058,
            0.9925014972686768,
            0.993513822555542,
            0.9942797422409058,
            0.9925014972686768,
            0.9866827130317688,
            0.9791942238807678,
            0.9913373589515686,
            0.9942797422409058,
            0.9925014972686768,
            0.9942797422409058,
            0.9942797422409058,
            0.9925014972686768,
            0.991337239742279
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9961804151535034,
        "body": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9851863384246826,
            0.9951248168945312,
            0.9871622323989868,
            0.9961804151535034,
            0.9961804151535034,
            0.9943737387657166,
            0.9918899536132812,
            0.9951248168945312,
            0.9949886798858643,
            0.9961804151535034,
            0.9953146576881409,
            0.9951248168945312,
            0.9961804151535034,
            0.9931387901306152,
            0.9949886798858643,
            0.99474036693573,
            0.9951248168945312,
            0.9961804151535034,
            0.9946551322937012,
            0.9960931539535522
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9924219846725464,
        "body": "    even = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 != 0 else even[i // 2] for i, x in enumerate(l)]",
        "result": "passed",
        "similarities": [
            0.9913479685783386,
            0.9917548298835754,
            0.9903990030288696,
            0.9913934469223022,
            0.9857894778251648,
            0.9913934469223022,
            0.9924219846725464,
            0.990617036819458,
            0.9917775392532349,
            0.9893531799316406,
            0.9917006492614746,
            0.9903990030288696,
            0.9914741516113281,
            0.9913479685783386,
            0.9463658928871155,
            0.98711097240448,
            0.98711097240448,
            0.990617036819458,
            0.9872850179672241,
            0.9848536252975464
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9962319135665894,
        "body": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed",
        "similarities": [
            0.9955758452415466,
            0.990770161151886,
            0.9911214113235474,
            0.9911214113235474,
            0.996067464351654,
            0.9962319135665894,
            0.9953764081001282,
            0.9962319135665894,
            0.9931187033653259,
            0.994810938835144,
            0.9962319135665894,
            0.9955758452415466,
            0.9899693727493286,
            0.9962319135665894,
            0.9954129457473755,
            0.9953745603561401,
            0.9962319135665894,
            0.9955758452415466,
            0.9899689555168152,
            0.9962319135665894
        ]
    },
    "HumanEval/39": {
        "similarity": 0.995798647403717,
        "body": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b) and count == n:\n            return b\n        a, b = b, a + b\n        count += 1\n\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "similarities": [
            0.9921913146972656,
            0.9939958453178406,
            0.9951569437980652,
            0.9956265687942505,
            0.9935314655303955,
            0.9940464496612549,
            0.9907885193824768,
            0.9951440691947937,
            0.9927685260772705,
            0.993457019329071,
            0.9955827593803406,
            0.993891179561615,
            0.995615541934967,
            0.9867947101593018,
            0.9951173067092896,
            0.9944661855697632,
            0.9952304363250732,
            0.995599627494812,
            0.9948394298553467,
            0.995798647403717
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9968234896659851,
        "body": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1",
        "result": "failed: ",
        "similarities": [
            0.993574857711792,
            0.996665358543396,
            0.9927646517753601,
            0.991011381149292,
            0.9938346743583679,
            0.9968234896659851,
            0.9968234896659851,
            0.9956527352333069,
            0.9965946674346924,
            0.996665358543396,
            0.9944066405296326,
            0.9968233704566956,
            0.9963542819023132,
            0.996665358543396,
            0.996418297290802,
            0.996762216091156,
            0.993574857711792,
            0.9936947226524353,
            0.996418297290802,
            0.9962583780288696
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9887275695800781,
        "body": "    collisions = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i + j) % 2 == 0 and i != j:\n                collisions += 1",
        "result": "failed: ",
        "similarities": [
            0.9869455099105835,
            0.9831582903862,
            0.9813148379325867,
            0.9880341291427612,
            0.9813148379325867,
            0.9840668439865112,
            0.9778115153312683,
            0.9720659852027893,
            0.9862623810768127,
            0.9887275695800781,
            0.9837983846664429,
            0.9720659852027893,
            0.9832282066345215,
            0.972560465335846,
            0.9772393107414246,
            0.987074077129364,
            0.984508216381073,
            0.9884178638458252,
            0.977451741695404,
            0.9864999651908875
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9991945028305054,
        "body": "    return [x + 1 for x in l]",
        "result": "passed",
        "similarities": [
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9991945028305054,
            0.9966768026351929,
            0.9991945028305054,
            0.9991945028305054,
            0.996584951877594,
            0.9991945028305054,
            0.9991042613983154,
            0.9969169497489929,
            0.9991945028305054,
            0.9973242878913879,
            0.9991042613983154,
            0.9964522123336792
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9957275390625,
        "body": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.995615541934967,
            0.995615541934967,
            0.9957118630409241,
            0.9942737221717834,
            0.9885808825492859,
            0.9897692799568176,
            0.995615541934967,
            0.995615541934967,
            0.9888688921928406,
            0.995615541934967,
            0.9944943189620972,
            0.9957275390625,
            0.9956740140914917,
            0.990109384059906,
            0.9953945875167847,
            0.9866055846214294,
            0.995615541934967,
            0.9869621992111206,
            0.9956739544868469,
            0.995615541934967
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9958378672599792,
        "body": "    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result",
        "result": "passed",
        "similarities": [
            0.9946964979171753,
            0.9935051798820496,
            0.992919921875,
            0.9949619770050049,
            0.9868776202201843,
            0.9952461123466492,
            0.9942750334739685,
            0.9882322549819946,
            0.9950053691864014,
            0.9954373240470886,
            0.9954246878623962,
            0.9931278228759766,
            0.9950910806655884,
            0.9950717091560364,
            0.9949619770050049,
            0.9882322549819946,
            0.9958378672599792,
            0.995462954044342,
            0.9954246878623962,
            0.9955418109893799
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9985321760177612,
        "body": "    return (a * h) / 2",
        "result": "passed",
        "similarities": [
            0.9972626566886902,
            0.9985321760177612,
            0.9985321760177612,
            0.9979497194290161,
            0.9969215393066406,
            0.997381329536438,
            0.9972626566886902,
            0.9978875517845154,
            0.9972626566886902,
            0.9970558881759644,
            0.9985321760177612,
            0.9978875517845154,
            0.9985321760177612,
            0.9985321760177612,
            0.9970558881759644,
            0.9985321760177612,
            0.9980119466781616,
            0.9953075051307678,
            0.9985321760177612,
            0.9978875517845154
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9981840252876282,
        "body": "    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
        "result": "failed: ",
        "similarities": [
            0.9949022531509399,
            0.9974717497825623,
            0.9981771111488342,
            0.9955988526344299,
            0.9981840252876282,
            0.9978652000427246,
            0.9981771111488342,
            0.9957504272460938,
            0.9956371784210205,
            0.9958299398422241,
            0.9957147240638733,
            0.9981771111488342,
            0.9976952075958252,
            0.9954320192337036,
            0.9970641732215881,
            0.9970219135284424,
            0.9971858859062195,
            0.9981840252876282,
            0.9978764057159424,
            0.9979052543640137
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9969640374183655,
        "body": "sorted_l = sorted(l)\nn = len(sorted_l)\n\nif n % 2 == 1:\n    return sorted_l[n // 2]\nelse:\n    i = n // 2 - 1\n    return (sorted_l[i] + sorted_l[i+1]) / 2",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9949967265129089,
            0.9968317747116089,
            0.9961771965026855,
            0.99649578332901,
            0.996590256690979,
            0.9959863424301147,
            0.9968223571777344,
            0.9967884421348572,
            0.994331955909729,
            0.9968317747116089,
            0.9969637989997864,
            0.9946092367172241,
            0.9969640374183655,
            0.9962331652641296,
            0.9949995279312134,
            0.9967884421348572,
            0.996242105960846,
            0.9949995279312134,
            0.9931536316871643,
            0.996356189250946
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9989023804664612,
        "body": "    return text == text[::-1]",
        "result": "passed",
        "similarities": [
            0.9989023804664612,
            0.9989023804664612,
            0.9989022612571716,
            0.9989022612571716,
            0.9989023804664612,
            0.9989023804664612,
            0.9989023804664612,
            0.9989023804664612,
            0.9989022612571716,
            0.9989022612571716,
            0.9989022612571716,
            0.9989022612571716,
            0.990281343460083,
            0.9989022612571716,
            0.9989022612571716,
            0.9989022612571716,
            0.9989023804664612,
            0.9989023804664612,
            0.9985263347625732,
            0.990281343460083
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9947746992111206,
        "body": "    return pow(n, p-2, p)",
        "result": "failed: ",
        "similarities": [
            0.9942715167999268,
            0.9931194186210632,
            0.9942715167999268,
            0.9919875264167786,
            0.9942725300788879,
            0.992939293384552,
            0.9942725300788879,
            0.9942715167999268,
            0.9929731488227844,
            0.9919875264167786,
            0.9667336344718933,
            0.9929731488227844,
            0.9945580363273621,
            0.9914618134498596,
            0.9947746992111206,
            0.9942725300788879,
            0.9919875264167786,
            0.9942715167999268,
            0.9942715167999268,
            0.9947746992111206
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9995641112327576,
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed",
        "similarities": [
            0.9993566274642944,
            0.9995641112327576,
            0.9995426535606384,
            0.9975938200950623,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995641112327576,
            0.9995085000991821,
            0.9993566274642944,
            0.9995641112327576,
            0.9995641112327576,
            0.9993566274642944,
            0.9979504346847534,
            0.9995641112327576,
            0.9974636435508728
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9981125593185425,
        "body": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
        "result": "passed",
        "similarities": [
            0.9970764517784119,
            0.9981125593185425,
            0.9970764517784119,
            0.9975351095199585,
            0.9972331523895264,
            0.9951918721199036,
            0.9980200529098511,
            0.9981125593185425,
            0.9972331523895264,
            0.9981125593185425,
            0.9970764517784119,
            0.9981125593185425,
            0.9970764517784119,
            0.9981125593185425,
            0.9981125593185425,
            0.9970764517784119,
            0.9951918721199036,
            0.9981125593185425,
            0.9975351095199585,
            0.9877206087112427
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9992796182632446,
        "body": "    return all(i < t for i in l)",
        "result": "passed",
        "similarities": [
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9926192760467529,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9992796182632446,
            0.9948941469192505,
            0.9992246031761169,
            0.9992796182632446,
            0.9992796182632446,
            0.9991377592086792
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9980678558349609,
        "body": "return x + y",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9980678558349609,
            0.9980678558349609,
            0.9954319000244141,
            0.9980068206787109,
            0.9980678558349609,
            0.9980068206787109,
            0.9980068206787109,
            0.9980678558349609,
            0.9980678558349609,
            0.9980678558349609,
            0.9954319000244141,
            0.9980068206787109,
            0.9980068206787109,
            0.9980678558349609,
            0.9978457093238831,
            0.9980068206787109,
            0.9980068206787109,
            0.9980068206787109,
            0.9980068206787109,
            0.9980068206787109
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9983870983123779,
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "similarities": [
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9932068586349487,
            0.9983870983123779,
            0.9932754039764404,
            0.9983870983123779,
            0.9983870983123779,
            0.9983870983123779,
            0.9932754039764404,
            0.9983870983123779,
            0.9983870983123779,
            0.9912379384040833,
            0.9983870983123779,
            0.9932754039764404,
            0.9983870983123779
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9973329305648804,
        "body": "    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b",
        "result": "failed: ",
        "similarities": [
            0.9968482851982117,
            0.9958259463310242,
            0.9972633719444275,
            0.9950300455093384,
            0.9947803020477295,
            0.996854305267334,
            0.9970842599868774,
            0.9946607351303101,
            0.9948215484619141,
            0.9941346049308777,
            0.9973329305648804,
            0.9943104982376099,
            0.9965389966964722,
            0.9959788918495178,
            0.9972620606422424,
            0.9971967935562134,
            0.9908152222633362,
            0.9960689544677734,
            0.9972289204597473,
            0.9969514608383179
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9982129335403442,
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "similarities": [
            0.9975283741950989,
            0.9960928559303284,
            0.9956499338150024,
            0.9980804324150085,
            0.9967516660690308,
            0.9978309273719788,
            0.9980804324150085,
            0.9975515007972717,
            0.9975283741950989,
            0.9980804324150085,
            0.9912521839141846,
            0.9969595074653625,
            0.9982129335403442,
            0.9982129335403442,
            0.9973395466804504,
            0.9980804324150085,
            0.9980829358100891,
            0.9973459839820862,
            0.9980804324150085,
            0.99774569272995
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9938847422599792,
        "body": "    return all(i <= j for i, j in zip(l, l[1:])) or all(i >= j for i, j in zip(l, l[1:]))",
        "result": "passed",
        "similarities": [
            0.9936453104019165,
            0.9936453104019165,
            0.9846609234809875,
            0.9816651940345764,
            0.9857651591300964,
            0.9938847422599792,
            0.9857651591300964,
            0.9936453104019165,
            0.9909154176712036,
            0.9877399802207947,
            0.9909154176712036,
            0.9857651591300964,
            0.9873504638671875,
            0.9889881610870361,
            0.9938847422599792,
            0.9845904111862183,
            0.9936453104019165,
            0.9936453104019165,
            0.9936453104019165,
            0.9923655986785889
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9971420168876648,
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "similarities": [
            0.9971420168876648,
            0.9945473074913025,
            0.9971420168876648,
            0.9971420168876648,
            0.9955928325653076,
            0.994215190410614,
            0.9967953562736511,
            0.9971420168876648,
            0.9942147135734558,
            0.9918636679649353,
            0.9971420168876648,
            0.9971420168876648,
            0.9971420168876648,
            0.9971420168876648,
            0.9971420168876648,
            0.9942147135734558,
            0.9921967387199402,
            0.9971420168876648,
            0.9955928325653076,
            0.9955928325653076
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9984853863716125,
        "body": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "result": "passed",
        "similarities": [
            0.9984853863716125,
            0.9984853863716125,
            0.9914159178733826,
            0.998485267162323,
            0.998485267162323,
            0.998485267162323,
            0.9914159178733826,
            0.998485267162323,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9984853863716125,
            0.9914159178733826,
            0.998485267162323
        ]
    },
    "HumanEval/60": {
        "similarity": 0.997161865234375,
        "body": "    result = 0\n    for i in range(1, n + 1):\n        result += i",
        "result": "failed: ",
        "similarities": [
            0.9950543642044067,
            0.9962278008460999,
            0.9943205118179321,
            0.9950543642044067,
            0.997161865234375,
            0.997161865234375,
            0.997161865234375,
            0.997161865234375,
            0.9921578764915466,
            0.9971518516540527,
            0.9962278008460999,
            0.9959813952445984,
            0.9935711622238159,
            0.997161865234375,
            0.9942472577095032,
            0.9949211478233337,
            0.9950543642044067,
            0.997161865234375,
            0.9950543642044067,
            0.9960188865661621
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9970603585243225,
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "result": "passed",
        "similarities": [
            0.9871715903282166,
            0.9962987303733826,
            0.9960829019546509,
            0.9956972002983093,
            0.9962388873100281,
            0.9970603585243225,
            0.976654052734375,
            0.9970104694366455,
            0.9965409636497498,
            0.9970104694366455,
            0.9970104694366455,
            0.9957612752914429,
            0.9970104694366455,
            0.9943118691444397,
            0.9949526786804199,
            0.9944786429405212,
            0.9952507019042969,
            0.9967941641807556,
            0.9970104694366455,
            0.9970603585243225
        ]
    },
    "HumanEval/62": {
        "similarity": 0.995344877243042,
        "body": "    return [i * x for i, x in enumerate(xs[1:], start=1)]",
        "result": "passed",
        "similarities": [
            0.9945722818374634,
            0.9943045377731323,
            0.9888777732849121,
            0.9894853234291077,
            0.995344877243042,
            0.9902899861335754,
            0.994272768497467,
            0.9926400780677795,
            0.9939906597137451,
            0.9934742450714111,
            0.9953030347824097,
            0.9942957162857056,
            0.9939545392990112,
            0.9939545392990112,
            0.9947399497032166,
            0.9868578910827637,
            0.995344877243042,
            0.9913780093193054,
            0.9952293038368225,
            0.9948227405548096
        ]
    },
    "HumanEval/63": {
        "similarity": 0.998450517654419,
        "body": "    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c",
        "result": "failed: ",
        "similarities": [
            0.9976525902748108,
            0.9979475140571594,
            0.9980603456497192,
            0.9980878233909607,
            0.9975997805595398,
            0.998117983341217,
            0.9979475140571594,
            0.9984223246574402,
            0.9964113831520081,
            0.9983504414558411,
            0.9887511730194092,
            0.9973970055580139,
            0.9979475140571594,
            0.9980878233909607,
            0.996955156326294,
            0.9979482889175415,
            0.9984458088874817,
            0.9974545240402222,
            0.998450517654419,
            0.9983817934989929
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9956079721450806,
        "body": "    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy' and (len(s) - s.index(char) == 1 or char not in 'y'):\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9925878643989563,
            0.9956079721450806,
            0.9955556988716125,
            0.9905470013618469,
            0.990441083908081,
            0.9879149198532104,
            0.9932389855384827,
            0.9918540120124817,
            0.9931128621101379,
            0.9933531880378723,
            0.9926886558532715,
            0.9932889342308044,
            0.9926886558532715,
            0.9940087199211121,
            0.9915328025817871,
            0.9953768849372864,
            0.9935212731361389,
            0.9937805533409119,
            0.9937374591827393,
            0.9927229881286621
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9962931275367737,
        "body": "    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits\n    return x_str[-shift:] + x_str[:-shift]",
        "result": "failed: ",
        "similarities": [
            0.9956125020980835,
            0.9932510852813721,
            0.9949553608894348,
            0.9945623278617859,
            0.9952284097671509,
            0.9947200417518616,
            0.9945354461669922,
            0.9918993711471558,
            0.9952284097671509,
            0.9943568706512451,
            0.9949553608894348,
            0.9962931275367737,
            0.9956588745117188,
            0.9878771901130676,
            0.9946098327636719,
            0.9962044954299927,
            0.9954540729522705,
            0.9947505593299866,
            0.9949561953544617,
            0.9913492798805237
        ]
    },
    "HumanEval/66": {
        "similarity": 0.999015212059021,
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed",
        "similarities": [
            0.999015212059021,
            0.998858630657196,
            0.9981803894042969,
            0.998858630657196,
            0.999015212059021,
            0.998858630657196,
            0.9987423419952393,
            0.999015212059021,
            0.998858630657196,
            0.999015212059021,
            0.9964313507080078,
            0.998858630657196,
            0.999015212059021,
            0.998858630657196,
            0.999015212059021,
            0.998858630657196,
            0.9981625080108643,
            0.999015212059021,
            0.999015212059021,
            0.999015212059021
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9943497180938721,
        "body": "    words = s.split()\n    count = {'apples': 0, 'oranges': 0}\n    for i in range(len(words)):\n        if words[i] == 'apples' or words[i] == 'oranges':\n            count[words[i]] = int(words[i-1])\n    return n - count['apples'] - count['oranges']",
        "result": "passed",
        "similarities": [
            0.9937364459037781,
            0.993680477142334,
            0.9895732402801514,
            0.9943497180938721,
            0.9878079295158386,
            0.9908441305160522,
            0.9911996722221375,
            0.9929378032684326,
            0.9884863495826721,
            0.9927018880844116,
            0.9919357299804688,
            0.98857581615448,
            0.9888927340507507,
            0.9910708069801331,
            0.9940349459648132,
            0.992584764957428,
            0.9931085705757141,
            0.9834883809089661,
            0.9934388995170593,
            0.9924784302711487
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9947742819786072,
        "body": "    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[0], x[1])) if even_nodes else []",
        "result": "failed: Error",
        "similarities": [
            0.9944582581520081,
            0.9911419749259949,
            0.9935212731361389,
            0.9924812316894531,
            0.9937734007835388,
            0.9926464557647705,
            0.9947742819786072,
            0.9932212829589844,
            0.990706205368042,
            0.9940722584724426,
            0.9788004159927368,
            0.9935424327850342,
            0.9934718608856201,
            0.9947423338890076,
            0.9939829111099243,
            0.9942944049835205,
            0.9934538006782532,
            0.9852570295333862,
            0.9926660656929016,
            0.9870204925537109
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9973642230033875,
        "body": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    return max_num",
        "result": "passed",
        "similarities": [
            0.9865911602973938,
            0.9973219037055969,
            0.9970484375953674,
            0.9969144463539124,
            0.9972664713859558,
            0.9971476197242737,
            0.9972996115684509,
            0.9973272085189819,
            0.9970288872718811,
            0.9970484375953674,
            0.9969418048858643,
            0.996714174747467,
            0.9965965151786804,
            0.9973254203796387,
            0.9929141998291016,
            0.9973642230033875,
            0.9964421987533569,
            0.997251033782959,
            0.996679425239563,
            0.9797288775444031
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9946990609169006,
        "body": "    if not lst:\n        return []\n    result = [min(lst)]\n    while len(result) < len(lst):\n        max_val = max(x for x in lst if x not in result)\n        result.append(max_val)\n        min_val = min(x for x in lst if x not in result)\n        result.append(min_val)\n    return result",
        "result": "failed: min() arg is an empty sequence",
        "similarities": [
            0.9922192096710205,
            0.9929366707801819,
            0.9922232627868652,
            0.9912444949150085,
            0.9936334490776062,
            0.9889801740646362,
            0.9922682046890259,
            0.9910998940467834,
            0.9939706921577454,
            0.992908775806427,
            0.9909693002700806,
            0.9946990609169006,
            0.994197428226471,
            0.9881237745285034,
            0.9936702251434326,
            0.9930700063705444,
            0.9911471009254456,
            0.9912358522415161,
            0.9937958121299744,
            0.9921406507492065
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9976904988288879,
        "body": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1",
        "result": "passed",
        "similarities": [
            0.9973781108856201,
            0.9974431395530701,
            0.9952079653739929,
            0.9972522258758545,
            0.9974431395530701,
            0.9976904988288879,
            0.9976904988288879,
            0.9937282204627991,
            0.9976904988288879,
            0.9976904988288879,
            0.9976904988288879,
            0.9950644969940186,
            0.995884358882904,
            0.996773362159729,
            0.9960925579071045,
            0.9974886178970337,
            0.9964770078659058,
            0.996773362159729,
            0.996860921382904,
            0.9964166283607483
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9994076490402222,
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9994076490402222,
            0.9994076490402222,
            0.9994076490402222,
            0.9984112977981567,
            0.9994076490402222,
            0.9994076490402222,
            0.9985658526420593,
            0.9981291890144348,
            0.9994076490402222,
            0.9985066652297974,
            0.9994076490402222,
            0.9994076490402222,
            0.9994076490402222,
            0.9994076490402222,
            0.9984112977981567,
            0.9994076490402222,
            0.9994076490402222,
            0.9985066652297974,
            0.9994076490402222,
            0.9976260662078857
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9967164397239685,
        "body": "    n = len(arr)\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    odd_count = sum(val % 2 == 1 for val in freq.values())\n    return (n - max(freq.values())) // 2 + odd_count",
        "result": "failed: ",
        "similarities": [
            0.9967164397239685,
            0.9962629079818726,
            0.9961690306663513,
            0.9966840147972107,
            0.9940087199211121,
            0.9955880045890808,
            0.9911280274391174,
            0.9963701367378235,
            0.9852843284606934,
            0.9945839643478394,
            0.9944673180580139,
            0.9953068494796753,
            0.9964181780815125,
            0.9934686422348022,
            0.99664705991745,
            0.9959384799003601,
            0.9953302145004272,
            0.995419979095459,
            0.9912611246109009,
            0.994190514087677
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9949296712875366,
        "body": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 <= sum2 else lst2",
        "result": "passed",
        "similarities": [
            0.992854654788971,
            0.9910762310028076,
            0.9916818737983704,
            0.994147777557373,
            0.9891238808631897,
            0.9893136620521545,
            0.9928547739982605,
            0.9928547739982605,
            0.992854654788971,
            0.9894670248031616,
            0.9949296712875366,
            0.988883376121521,
            0.9928547739982605,
            0.9949296712875366,
            0.990147054195404,
            0.992854654788971,
            0.992854654788971,
            0.9949296712875366,
            0.9901978373527527,
            0.9876277446746826
        ]
    },
    "HumanEval/75": {
        "similarity": 0.996443510055542,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    i = 2\n    while a > 1 and i <= a:\n        while a % i == 0:\n            if is_prime(i):\n                count += 1\n            a //= i\n        i += 1\n    return count >= 3",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9958274364471436,
            0.9960778951644897,
            0.9963859915733337,
            0.9940298199653625,
            0.9963259696960449,
            0.9964112043380737,
            0.9903112053871155,
            0.9917004108428955,
            0.9952800273895264,
            0.9960564374923706,
            0.9943616986274719,
            0.9962078928947449,
            0.9962476491928101,
            0.9945954084396362,
            0.9955163598060608,
            0.996443510055542,
            0.9946272969245911,
            0.9960297346115112,
            0.9962493777275085,
            0.9941511750221252
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9959636330604553,
        "body": "    return (n ** round(x ** (1/n))) == x",
        "result": "failed: This prints if this assert fails 2 (also good for debugging!)",
        "similarities": [
            0.9947788715362549,
            0.9933987855911255,
            0.9925410747528076,
            0.9927089214324951,
            0.9943923950195312,
            0.991087794303894,
            0.9926072359085083,
            0.9928656220436096,
            0.9933987855911255,
            0.9927783608436584,
            0.9939706921577454,
            0.995602548122406,
            0.995436429977417,
            0.9888517260551453,
            0.988517165184021,
            0.9942442178726196,
            0.9935901165008545,
            0.9959636330604553,
            0.9932403564453125,
            0.9933696389198303
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9961216449737549,
        "body": "    return round(a ** (1. / 3)) ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "similarities": [
            0.9960055947303772,
            0.9882985353469849,
            0.9958741068840027,
            0.9956240653991699,
            0.9941223859786987,
            0.9863578677177429,
            0.9917393922805786,
            0.9949996471405029,
            0.9879041910171509,
            0.9929846525192261,
            0.9959397912025452,
            0.9961216449737549,
            0.9961059093475342,
            0.9961059093475342,
            0.9961059093475342,
            0.9961059093475342,
            0.9959205985069275,
            0.9925355315208435,
            0.9953371286392212,
            0.9957174062728882
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9948739409446716,
        "body": "    prime_hex_digits = '23B7D'\n    return sum(1 for digit in num if digit.upper() in prime_hex_digits)",
        "result": "failed: Fifth test error: 5",
        "similarities": [
            0.9939801096916199,
            0.9882045388221741,
            0.9945467710494995,
            0.9927225708961487,
            0.9932010173797607,
            0.9913681745529175,
            0.9875191450119019,
            0.9940150380134583,
            0.987076997756958,
            0.9948739409446716,
            0.9935186505317688,
            0.9930369853973389,
            0.9936202168464661,
            0.9945467710494995,
            0.9932783246040344,
            0.9942848086357117,
            0.9932760000228882,
            0.9941001534461975,
            0.9874446392059326,
            0.9913129210472107
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9990979433059692,
        "body": "    return 'db' + bin(decimal)[2:] + 'db'",
        "result": "passed",
        "similarities": [
            0.9987616539001465,
            0.9983931183815002,
            0.9990979433059692,
            0.9987616539001465,
            0.9990979433059692,
            0.9978818297386169,
            0.9990979433059692,
            0.9990979433059692,
            0.9990979433059692,
            0.9974205493927002,
            0.9983570575714111,
            0.9990979433059692,
            0.9990979433059692,
            0.9990979433059692,
            0.996781587600708,
            0.9986200928688049,
            0.9983570575714111,
            0.9990979433059692,
            0.9990979433059692,
            0.9990979433059692
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9957889914512634,
        "body": "    return len(s) >= 3 and len(set([s[i:i+3] for i in range(len(s)-2)])) == len(s)//3",
        "result": "failed: abcd",
        "similarities": [
            0.99460369348526,
            0.9900587797164917,
            0.9955213665962219,
            0.9954737424850464,
            0.9914838075637817,
            0.9955903887748718,
            0.9916126728057861,
            0.9880011677742004,
            0.9920241832733154,
            0.9926549196243286,
            0.9957889914512634,
            0.9927914142608643,
            0.9957889914512634,
            0.9954737424850464,
            0.9919463992118835,
            0.9918172955513,
            0.9955905079841614,
            0.9890491366386414,
            0.9952922463417053,
            0.9955213665962219
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9883772134780884,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades",
        "result": "failed: ",
        "similarities": [
            0.984183669090271,
            0.9823837280273438,
            0.9759643077850342,
            0.9809190630912781,
            0.9844120740890503,
            0.9853177666664124,
            0.9853881001472473,
            0.9854792356491089,
            0.9851737022399902,
            0.9839127063751221,
            0.9848698973655701,
            0.9853881001472473,
            0.9793707132339478,
            0.979846179485321,
            0.9802855253219604,
            0.9850792288780212,
            0.9883772134780884,
            0.9703075885772705,
            0.9777532815933228,
            0.9853881001472473
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9991165995597839,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9984121918678284,
            0.9984121918678284,
            0.9991165995597839,
            0.9990785717964172,
            0.999109148979187,
            0.9984233379364014,
            0.9974817037582397,
            0.999109148979187,
            0.9990785717964172,
            0.9980623126029968,
            0.9984121918678284,
            0.9975635409355164,
            0.999109148979187,
            0.9990785717964172,
            0.9983746409416199,
            0.9976293444633484,
            0.9990837574005127,
            0.9970532655715942,
            0.9990785717964172,
            0.999109148979187
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9941781759262085,
        "body": "if n == 1:\n    return 10\nelse:\n    total = 9 * (10 ** (n - 2)) + 9 * (10 ** (n - 2))\n    return total",
        "result": "failed: 'return' outside function (<string>, line 8)",
        "similarities": [
            0.9939082264900208,
            0.9907410144805908,
            0.9927297234535217,
            0.9923117756843567,
            0.9907439351081848,
            0.9914653301239014,
            0.989838182926178,
            0.9916741251945496,
            0.9867342710494995,
            0.9865682721138,
            0.9797397255897522,
            0.9866219758987427,
            0.9912016987800598,
            0.9931603670120239,
            0.9921415448188782,
            0.9941781759262085,
            0.9914067983627319,
            0.9865816831588745,
            0.9919631481170654,
            0.9941208362579346
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9948598742485046,
        "body": "    return bin(sum(int(digit) for digit in format(N, 'b')))[2:]",
        "result": "failed: Error",
        "similarities": [
            0.9928405284881592,
            0.993367075920105,
            0.9928405284881592,
            0.993367075920105,
            0.9944993853569031,
            0.993367075920105,
            0.9832624197006226,
            0.9941695332527161,
            0.9948598742485046,
            0.9930863976478577,
            0.9946202635765076,
            0.9941919445991516,
            0.9922118186950684,
            0.9818472862243652,
            0.9882341623306274,
            0.9928405284881592,
            0.9944993853569031,
            0.9829051494598389,
            0.993914783000946,
            0.9944993853569031
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9920067191123962,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)",
        "result": "passed",
        "similarities": [
            0.9848278760910034,
            0.9887237548828125,
            0.9887892007827759,
            0.9838900566101074,
            0.9914153218269348,
            0.9839166402816772,
            0.9916332960128784,
            0.9826684594154358,
            0.9878160357475281,
            0.9881042838096619,
            0.9920067191123962,
            0.9916332960128784,
            0.9858502745628357,
            0.9782833456993103,
            0.9916332960128784,
            0.9878255128860474,
            0.9920067191123962,
            0.9869043231010437,
            0.9848278760910034,
            0.9907521605491638
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9960681796073914,
        "body": "    return ''.join(sorted(word) for word in s.split())",
        "result": "failed: sequence item 0: expected str instance, list found",
        "similarities": [
            0.9913554191589355,
            0.9960532784461975,
            0.9952563047409058,
            0.9901517629623413,
            0.9956849813461304,
            0.9947477579116821,
            0.9931955933570862,
            0.9872267842292786,
            0.9850757122039795,
            0.9937170147895813,
            0.9960532784461975,
            0.9960681796073914,
            0.9952476024627686,
            0.9947200417518616,
            0.9951608777046204,
            0.9947200417518616,
            0.9947200417518616,
            0.9947477579116821,
            0.9955131411552429,
            0.9956303834915161
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9924031496047974,
        "body": "    return sorted(((i, j) for i, row in enumerate(lst)\n                   for j, val in enumerate(row) if val == x),\n                  key=lambda t: (t[0], -t[1]))",
        "result": "passed",
        "similarities": [
            0.990561842918396,
            0.9920183420181274,
            0.9919804930686951,
            0.9869233965873718,
            0.9922913312911987,
            0.9902982115745544,
            0.990589439868927,
            0.9892910718917847,
            0.9908573031425476,
            0.9924031496047974,
            0.9909541606903076,
            0.990550696849823,
            0.9886938333511353,
            0.9890730977058411,
            0.9861239194869995,
            0.9822207093238831,
            0.9858540296554565,
            0.9858888387680054,
            0.9754160642623901,
            0.9886399507522583
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9957291483879089,
        "body": "    if len(array) < 2: return array\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array)\n    if sum_first_last % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array",
        "result": "passed",
        "similarities": [
            0.9950001239776611,
            0.9944042563438416,
            0.9956842064857483,
            0.9945852160453796,
            0.9883305430412292,
            0.9930921792984009,
            0.9954131245613098,
            0.9883305430412292,
            0.992773175239563,
            0.9957291483879089,
            0.9912041425704956,
            0.9951501488685608,
            0.9928041100502014,
            0.9923465251922607,
            0.9947317242622375,
            0.9954131245613098,
            0.9905929565429688,
            0.9908769726753235,
            0.9922868609428406,
            0.9901982545852661
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9954041242599487,
        "body": "    a = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s.lower():\n        if char.isalpha():\n            shift = 2 * 2\n            index = (a.index(char) + shift) % len(a)\n            result += a[index]\n        else:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9954041242599487,
            0.9939709901809692,
            0.9828771352767944,
            0.9896119832992554,
            0.9945821166038513,
            0.9945755004882812,
            0.9942956566810608,
            0.9931970834732056,
            0.9942711591720581,
            0.9939250946044922,
            0.9876505136489868,
            0.9949591755867004,
            0.9942898154258728,
            0.9944068789482117,
            0.9889969229698181,
            0.9940393567085266,
            0.9911974668502808,
            0.9925243854522705,
            0.9898750185966492,
            0.9937692880630493
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9979041218757629,
        "body": "    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    lst = sorted(set(lst))\n    return lst[1]",
        "result": "passed",
        "similarities": [
            0.9969344139099121,
            0.9969344139099121,
            0.9931784272193909,
            0.9966979026794434,
            0.9971566796302795,
            0.9956031441688538,
            0.9978126883506775,
            0.9979041218757629,
            0.995588481426239,
            0.9978126883506775,
            0.9978300333023071,
            0.9964959025382996,
            0.9966979026794434,
            0.9976297616958618,
            0.9973337054252625,
            0.9975546598434448,
            0.9961825013160706,
            0.9976041913032532,
            0.9889087677001953,
            0.9974987506866455
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9910767078399658,
        "body": "    sentences = S.split('[?.!] ')\n    return sum(1 for s in sentences if s.startswith('I'))",
        "result": "failed: Test 2",
        "similarities": [
            0.9910767078399658,
            0.9907101988792419,
            0.9892915487289429,
            0.9867212176322937,
            0.98650723695755,
            0.98650723695755,
            0.9878824353218079,
            0.9897292256355286,
            0.986378014087677,
            0.9858326315879822,
            0.98650723695755,
            0.98650723695755,
            0.9820797443389893,
            0.9767124056816101,
            0.98650723695755,
            0.98650723695755,
            0.98650723695755,
            0.986378014087677,
            0.9787799715995789,
            0.9886974692344666
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9957162737846375,
        "body": "    return (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))",
        "result": "passed",
        "similarities": [
            0.9945379495620728,
            0.9893100261688232,
            0.995619535446167,
            0.9955958127975464,
            0.9935091137886047,
            0.994850754737854,
            0.9952951669692993,
            0.9947419762611389,
            0.9892780780792236,
            0.9952951669692993,
            0.9952033162117004,
            0.9867861866950989,
            0.9945510029792786,
            0.9952951669692993,
            0.995619535446167,
            0.9945725202560425,
            0.9952951073646545,
            0.9957162737846375,
            0.9952951073646545,
            0.9953828454017639
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9980571269989014,
        "body": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            idx = ord(char) - 97\n            result += chr(97 + (idx + 2) % 26)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9939990043640137,
            0.9980571269989014,
            0.9921556115150452,
            0.9979701638221741,
            0.9975179433822632,
            0.996018648147583,
            0.9973598122596741,
            0.9967608451843262,
            0.9969061017036438,
            0.9972012042999268,
            0.9965968728065491,
            0.9975701570510864,
            0.9978886842727661,
            0.9957394003868103,
            0.9961995482444763,
            0.9975977540016174,
            0.997249186038971,
            0.9972506165504456,
            0.9973901510238647,
            0.9973179697990417
        ]
    },
    "HumanEval/94": {
        "similarity": 0.997553288936615,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.997553288936615,
            0.997467041015625,
            0.9970588684082031,
            0.9963951110839844,
            0.9973706603050232,
            0.9973176717758179,
            0.9974686503410339,
            0.9973810911178589,
            0.9966367483139038,
            0.9975001811981201,
            0.9949210286140442,
            0.9955887198448181,
            0.9974404573440552,
            0.9954884052276611,
            0.9974033832550049,
            0.9974730610847473,
            0.9964226484298706,
            0.9940224885940552,
            0.9869835376739502,
            0.9930192232131958
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9956876635551453,
        "body": "        all_lower = all(key.islower() for key in dict.keys())\n        all_upper = all(key.isupper() for key in dict.keys())\n        return (all_lower or all_upper) and len(dict) > 0",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9950212240219116,
            0.9953414797782898,
            0.9956876635551453,
            0.9953414797782898,
            0.9949513673782349,
            0.9948903322219849,
            0.993299663066864,
            0.9949331879615784,
            0.9945307374000549,
            0.9946208000183105,
            0.9885926842689514,
            0.9952374696731567,
            0.9939850568771362,
            0.9956170320510864,
            0.9948092103004456,
            0.9870539307594299,
            0.9915249347686768,
            0.9954178333282471,
            0.9932623505592346,
            0.9946208000183105
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9991148114204407,
        "body": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "result": "passed",
        "similarities": [
            0.9972751140594482,
            0.998691737651825,
            0.9987455606460571,
            0.9989939332008362,
            0.9989447593688965,
            0.9991148114204407,
            0.9987660646438599,
            0.9989864826202393,
            0.9989864826202393,
            0.9981877207756042,
            0.9989720582962036,
            0.9962877035140991,
            0.998691737651825,
            0.9989447593688965,
            0.9989732503890991,
            0.9991148114204407,
            0.9991148114204407,
            0.9989864826202393,
            0.9991148114204407,
            0.9986590147018433
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9970739483833313,
        "body": "    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    result = (a_unit_digit * b_unit_digit) % 10\n    return result",
        "result": "failed: First test error: 6",
        "similarities": [
            0.9944472312927246,
            0.9969414472579956,
            0.9961205720901489,
            0.9967215657234192,
            0.9960084557533264,
            0.9937280416488647,
            0.9968215823173523,
            0.9966338276863098,
            0.9944472312927246,
            0.9935760498046875,
            0.9944472312927246,
            0.9966338276863098,
            0.9881019592285156,
            0.9969066977500916,
            0.9966338276863098,
            0.9937280416488647,
            0.9944472312927246,
            0.9970739483833313,
            0.9965745806694031,
            0.987046480178833
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9967280030250549,
        "body": "    return sum(1 for i, c in enumerate(s) if 'AEIOU'.count(c.upper()) and i % 2 == 0)",
        "result": "failed: ",
        "similarities": [
            0.9942066669464111,
            0.9956355690956116,
            0.9951537251472473,
            0.9964824318885803,
            0.9960585236549377,
            0.9962198138237,
            0.9956355690956116,
            0.9956355690956116,
            0.9960602521896362,
            0.9942066669464111,
            0.9967280030250549,
            0.9877568483352661,
            0.9940267205238342,
            0.9966104626655579,
            0.9966104626655579,
            0.9960048198699951,
            0.996146559715271,
            0.9875817894935608,
            0.99644935131073,
            0.9942066669464111
        ]
    },
    "HumanEval/99": {
        "similarity": 0.992436945438385,
        "body": "    value = float(value)\n    if abs(value - round(value + 0.5)) < abs(value - round(value)):\n        return int(round(value + 0.5))\n    else:\n        return int(round(value))",
        "result": "failed: Test 2",
        "similarities": [
            0.989894449710846,
            0.9906904101371765,
            0.9877395629882812,
            0.9911595582962036,
            0.9920045733451843,
            0.9880620837211609,
            0.9912352561950684,
            0.9886619448661804,
            0.9829422831535339,
            0.9849516153335571,
            0.9757075905799866,
            0.9875051379203796,
            0.9873836040496826,
            0.9897949695587158,
            0.9760056734085083,
            0.987845778465271,
            0.9826588034629822,
            0.9882872700691223,
            0.992436945438385,
            0.9910376667976379
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9963085055351257,
        "body": "    result = []\n    current_odd = n\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            current_odd += 2\n        else:\n            current_odd += 2\n        result.append(current_odd)\n    return result",
        "result": "failed: Test 3",
        "similarities": [
            0.9928399324417114,
            0.9949756264686584,
            0.995752215385437,
            0.9956375956535339,
            0.9945704936981201,
            0.9952741861343384,
            0.9945775270462036,
            0.9963085055351257,
            0.9955574870109558,
            0.9945493936538696,
            0.9948649406433105,
            0.9959067106246948,
            0.9814592599868774,
            0.995985209941864,
            0.9958624839782715,
            0.9956142902374268,
            0.9951592683792114,
            0.9818663597106934,
            0.99260413646698,
            0.9961574077606201
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9975048899650574,
        "body": "    return s.replace(\",\", \" \").split()",
        "result": "passed",
        "similarities": [
            0.997321367263794,
            0.9975048899650574,
            0.9975048899650574,
            0.9888227581977844,
            0.9952796101570129,
            0.9975048899650574,
            0.9975048899650574,
            0.9974262118339539,
            0.9975048899650574,
            0.9956266283988953,
            0.9975048899650574,
            0.9942782521247864,
            0.9975048899650574,
            0.9975048899650574,
            0.9975048899650574,
            0.9975048899650574,
            0.997321367263794,
            0.9975048899650574,
            0.9865813851356506,
            0.997261643409729
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9929038882255554,
        "body": "if y % 2 == 0 and x <= y:\n    return y\nelif x % 2 == 0 and x >= y:\n    return x\nelse:\n    result = [i for i in range(x, y+1) if i % 2 == 0]\n    if len(result) > 0:\n        return max(result)\n    else:\n        return -1",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9929038882255554,
            0.9877775311470032,
            0.991348147392273,
            0.9888317584991455,
            0.9913297891616821,
            0.9902476072311401,
            0.9913939237594604,
            0.9918723106384277,
            0.9729800224304199,
            0.9890413880348206,
            0.9872429370880127,
            0.9896312355995178,
            0.9879449605941772,
            0.9915546774864197,
            0.9832181334495544,
            0.9900305867195129,
            0.9914503693580627,
            0.9921081066131592,
            0.9928508400917053,
            0.9925997853279114
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9977259635925293,
        "body": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "similarities": [
            0.9949647188186646,
            0.995837390422821,
            0.9972801208496094,
            0.994956374168396,
            0.9952940940856934,
            0.9977259635925293,
            0.9962660074234009,
            0.9977259635925293,
            0.9977259635925293,
            0.9960658550262451,
            0.9949647188186646,
            0.9977259635925293,
            0.9977259635925293,
            0.9949647188186646,
            0.9955685138702393,
            0.995103120803833,
            0.9972801208496094,
            0.9972801208496094,
            0.9962262511253357,
            0.9977259635925293
        ]
    },
    "HumanEval/104": {
        "similarity": 0.999517560005188,
        "body": "    return sorted([i for i in x if all(d % 2 != 0 for d in str(i))])",
        "result": "failed: not all arguments converted during string formatting",
        "similarities": [
            0.9994012117385864,
            0.9994785785675049,
            0.9993268251419067,
            0.999517560005188,
            0.9993594288825989,
            0.9986142516136169,
            0.9989756345748901,
            0.9992387890815735,
            0.9994785785675049,
            0.9992387890815735,
            0.9994044899940491,
            0.9986142516136169,
            0.999517560005188,
            0.9993267059326172,
            0.9994785785675049,
            0.9994052052497864,
            0.999517560005188,
            0.9991427063941956,
            0.9994785785675049,
            0.9994248151779175
        ]
    },
    "HumanEval/105": {
        "similarity": 0.992094874382019,
        "body": "sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\nreturn [{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}[num - 1] for num in reversed(sorted_arr)]",
        "result": "failed: 'return' outside function (<string>, line 25)",
        "similarities": [
            0.9896255135536194,
            0.9890006184577942,
            0.9846917986869812,
            0.9877630472183228,
            0.9848833680152893,
            0.9876243472099304,
            0.9909059405326843,
            0.9864134788513184,
            0.9908319711685181,
            0.9790119528770447,
            0.9836981892585754,
            0.992094874382019,
            0.9828447103500366,
            0.9902462363243103,
            0.9849438071250916,
            0.9889119863510132,
            0.9876725077629089,
            0.9865490794181824,
            0.9904534220695496,
            0.9903126955032349
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9958180785179138,
        "body": "    return [i*(i-1) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]",
        "result": "failed: ",
        "similarities": [
            0.9957060813903809,
            0.9931493997573853,
            0.9950770139694214,
            0.9955291748046875,
            0.9890838265419006,
            0.9910637736320496,
            0.9950379133224487,
            0.9934132099151611,
            0.9958180785179138,
            0.9928836822509766,
            0.9905473589897156,
            0.9953625202178955,
            0.9957060813903809,
            0.9940610527992249,
            0.9940606355667114,
            0.9901701211929321,
            0.9868935942649841,
            0.9957060813903809,
            0.9807915091514587,
            0.995419979095459
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9943673014640808,
        "body": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and int(str(i)[0]) % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1]:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "similarities": [
            0.9935733675956726,
            0.9938028454780579,
            0.9940708875656128,
            0.993068516254425,
            0.9939491152763367,
            0.9940674304962158,
            0.9916208982467651,
            0.9917586445808411,
            0.993800699710846,
            0.9937892556190491,
            0.9915372133255005,
            0.9928315877914429,
            0.9940661191940308,
            0.9903825521469116,
            0.9935423135757446,
            0.9927915334701538,
            0.9930245280265808,
            0.9943673014640808,
            0.9935023784637451,
            0.9916208982467651
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9953440427780151,
        "body": "    return sum(1 for x in arr if any(int(c) > 0 for c in str(abs(x))))",
        "result": "failed: ",
        "similarities": [
            0.9874841570854187,
            0.9940380454063416,
            0.9938808083534241,
            0.9933204650878906,
            0.9938807487487793,
            0.9938807487487793,
            0.9944167137145996,
            0.9938807487487793,
            0.9942415952682495,
            0.9942415952682495,
            0.9943047761917114,
            0.9953440427780151,
            0.9942320585250854,
            0.9864702820777893,
            0.9943047761917114,
            0.9864702820777893,
            0.991278886795044,
            0.994060218334198,
            0.9943047761917114,
            0.9901111125946045
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9934665560722351,
        "body": "    return len(set(arr)) == len(arr) and all(x <= y for x, y in zip(arr, arr[-1:] + arr[:-1]))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9834321737289429,
            0.9919907450675964,
            0.9917319416999817,
            0.989216685295105,
            0.9852080345153809,
            0.9934665560722351,
            0.9882798790931702,
            0.992763102054596,
            0.9917319416999817,
            0.984225332736969,
            0.9924866557121277,
            0.9927955269813538,
            0.9926624298095703,
            0.9919975996017456,
            0.9933624267578125,
            0.9929796457290649,
            0.9932484030723572,
            0.9901175498962402,
            0.9921361804008484,
            0.9878660440444946
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9933584332466125,
        "body": "    even = [num for num in lst1 if num % 2 == 0]\n    odd = set(num for num in lst1 if num % 2 != 0)\n    return \"YES\" if not odd - set(lst2) else \"NO\"",
        "result": "failed: ",
        "similarities": [
            0.9899908304214478,
            0.9885145425796509,
            0.986153244972229,
            0.9927165508270264,
            0.9881153106689453,
            0.9925378561019897,
            0.9830163717269897,
            0.9933584332466125,
            0.9932923913002014,
            0.9912967681884766,
            0.9932447671890259,
            0.9830163717269897,
            0.9931889772415161,
            0.9931345582008362,
            0.9783025979995728,
            0.992568850517273,
            0.9764901399612427,
            0.9931914806365967,
            0.982144832611084,
            0.9929550886154175
        ]
    },
    "HumanEval/111": {
        "similarity": 0.996638834476471,
        "body": "    words = test.split()\n    count_dict = {}\n    max_count = 0\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n        max_count = max(max_count, count_dict[word])\n    result = {word: count for word, count in count_dict.items() if count == max_count}\n    return result",
        "result": "passed",
        "similarities": [
            0.9717181324958801,
            0.9944673180580139,
            0.9963151216506958,
            0.9927681684494019,
            0.9961724877357483,
            0.9955350756645203,
            0.9965639710426331,
            0.9963587522506714,
            0.9904417991638184,
            0.9935446381568909,
            0.9961724877357483,
            0.9963361024856567,
            0.9965620636940002,
            0.994568407535553,
            0.9964015483856201,
            0.996638834476471,
            0.996343731880188,
            0.9963099956512451,
            0.9889600872993469,
            0.9962531924247742
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9953416585922241,
        "body": "    filtered_s = ''.join([x for x in s if x not in c])\n    return (filtered_s, filtered_s == filtered_s[::-1])",
        "result": "passed",
        "similarities": [
            0.995021641254425,
            0.9933006167411804,
            0.9951211810112,
            0.9946548342704773,
            0.990838885307312,
            0.995021641254425,
            0.9949764609336853,
            0.9888411164283752,
            0.9946677684783936,
            0.9855828881263733,
            0.9883406758308411,
            0.9951832294464111,
            0.995021641254425,
            0.9923908114433289,
            0.9928417205810547,
            0.9953416585922241,
            0.9940487742424011,
            0.994631826877594,
            0.995021641254425,
            0.9880937337875366
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9971147775650024,
        "body": "    return [f\"the number of odd elements {len(s)%2}n the str{sum(1 for d in s if int(d) % 2 != 0)}ng {s.count('1')} of the {len(lst)}nput.\" for s in lst]",
        "result": "failed: Test 1",
        "similarities": [
            0.9970951080322266,
            0.9961388111114502,
            0.9903013110160828,
            0.9967409372329712,
            0.9967045187950134,
            0.9960654377937317,
            0.9955837726593018,
            0.9922183156013489,
            0.9969211220741272,
            0.9956759214401245,
            0.995639979839325,
            0.9957007169723511,
            0.9961705803871155,
            0.9967633485794067,
            0.9971147775650024,
            0.9967761635780334,
            0.9929366111755371,
            0.9945656657218933,
            0.9961549639701843,
            0.9946457743644714
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9948228597640991,
        "body": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "result": "passed",
        "similarities": [
            0.9935846924781799,
            0.9947995543479919,
            0.992549479007721,
            0.9918918609619141,
            0.9936105608940125,
            0.9948228597640991,
            0.9884898662567139,
            0.9935846924781799,
            0.9947147369384766,
            0.9930469989776611,
            0.9912368655204773,
            0.9814571738243103,
            0.9906033873558044,
            0.9777734875679016,
            0.9933719635009766,
            0.9946255087852478,
            0.9948228597640991,
            0.9932752847671509,
            0.9932859539985657,
            0.9942323565483093
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9898465871810913,
        "body": "    n = len(grid)\n    m = len(grid[0])\n    total_water = sum(row.count(1) for row in grid)\n    times_needed = -(-total_water // (capacity * n))  # ceiling division\n    return times_needed",
        "result": "failed: Error",
        "similarities": [
            0.988913893699646,
            0.9893737435340881,
            0.9785338044166565,
            0.9849550127983093,
            0.9852045774459839,
            0.974299967288971,
            0.974299967288971,
            0.988199770450592,
            0.9851843118667603,
            0.9898465871810913,
            0.9848466515541077,
            0.9891781210899353,
            0.9827253222465515,
            0.9888578057289124,
            0.9802154898643494,
            0.9515527486801147,
            0.9879619479179382,
            0.9872116446495056,
            0.9595866799354553,
            0.9745725393295288
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9997569918632507,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            0.9997568726539612,
            0.9990144371986389,
            0.9990144371986389,
            0.9984309673309326,
            0.9997568726539612,
            0.9997568726539612,
            0.9990144371986389,
            0.9997568726539612,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997569918632507,
            0.9997568726539612,
            0.9997568726539612,
            0.9997568726539612,
            0.9997568726539612
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9959067106246948,
        "body": "    vowels = set('aeiou')\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "similarities": [
            0.9955445528030396,
            0.9882250428199768,
            0.994562566280365,
            0.9928352236747742,
            0.9903502464294434,
            0.9781969785690308,
            0.9945894479751587,
            0.9957413077354431,
            0.9957040548324585,
            0.9926695823669434,
            0.9954930543899536,
            0.9957259297370911,
            0.9954634308815002,
            0.9959067106246948,
            0.9956956505775452,
            0.9957727193832397,
            0.9951573610305786,
            0.994086503982544,
            0.9848951101303101,
            0.9953974485397339
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9973570108413696,
        "body": "    vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i + 1, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return ''",
        "result": "failed: ",
        "similarities": [
            0.9929866790771484,
            0.9951450228691101,
            0.9931927919387817,
            0.9948660135269165,
            0.995755672454834,
            0.9969800710678101,
            0.9969394207000732,
            0.9949411153793335,
            0.9971030354499817,
            0.9971509575843811,
            0.9967169761657715,
            0.9966962933540344,
            0.9968615174293518,
            0.9970767498016357,
            0.9968137145042419,
            0.9956855773925781,
            0.9971502423286438,
            0.9973570108413696,
            0.9969668388366699,
            0.9932726621627808
        ]
    },
    "HumanEval/119": {
        "similarity": 0.989223062992096,
        "body": "    a = lst[0]\n    b = lst[1]\n\n    a_open = a.count('(')\n    a_close = a.count(')')\n\n    b_open = b.count('(')\n    b_close = b.count(')')\n\n    if (a_open == a_close and b_open == b_close and\n        abs(a_open - a_close) + abs(b_open - b_close) <= 1):\n        return 'Yes'\n    else:\n        return 'No'",
        "result": "failed: ",
        "similarities": [
            0.9857070446014404,
            0.978539228439331,
            0.9872861504554749,
            0.9848795533180237,
            0.9821175932884216,
            0.9857070446014404,
            0.9871952533721924,
            0.9874516725540161,
            0.9721368551254272,
            0.9875372052192688,
            0.9721368551254272,
            0.9882965087890625,
            0.9856696128845215,
            0.9865341186523438,
            0.9861738085746765,
            0.986474871635437,
            0.9721367359161377,
            0.982812762260437,
            0.989223062992096,
            0.985956072807312
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9967695474624634,
        "body": "    return sorted(arr)[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9942644834518433,
            0.9911487102508545,
            0.9967695474624634,
            0.9967695474624634,
            0.9967695474624634,
            0.9942644834518433,
            0.9941781759262085,
            0.9948026537895203,
            0.9959536194801331,
            0.9942644834518433,
            0.9941781759262085,
            0.9967695474624634,
            0.9941781759262085,
            0.9951300621032715,
            0.9949814677238464,
            0.9941781759262085,
            0.9942644834518433,
            0.9941781759262085,
            0.9942644834518433,
            0.9967695474624634
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9937262535095215,
        "body": "    result = sum(x for i, x in enumerate(lst) if (i + 1) % 2 == 0 and x % 2 != 0)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9894400238990784,
            0.9895082116127014,
            0.989975094795227,
            0.9890224933624268,
            0.991123616695404,
            0.989975094795227,
            0.9937262535095215,
            0.9896561503410339,
            0.9914179444313049,
            0.987147867679596,
            0.9855117797851562,
            0.989975094795227,
            0.988653302192688,
            0.9893467426300049,
            0.9918392896652222,
            0.9889343976974487,
            0.9889343976974487,
            0.9865025281906128,
            0.9889343976974487,
            0.9919819235801697
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9920343160629272,
        "body": "    return sum(i for i in arr[:k] if i < 100 or (i >= 10 and i < 1000))",
        "result": "failed: ",
        "similarities": [
            0.9909499287605286,
            0.9855563640594482,
            0.9909472465515137,
            0.9909499287605286,
            0.9920343160629272,
            0.9823642373085022,
            0.9892804026603699,
            0.9906723499298096,
            0.9919470548629761,
            0.9847203493118286,
            0.9811216592788696,
            0.9904623627662659,
            0.9824930429458618,
            0.9818721413612366,
            0.99103182554245,
            0.9909499287605286,
            0.9909499287605286,
            0.9839342832565308,
            0.9907380938529968,
            0.9909499287605286
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9987056255340576,
        "body": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([i for i in sequence if i % 2 != 0])",
        "result": "passed",
        "similarities": [
            0.9978671073913574,
            0.9986805319786072,
            0.998065173625946,
            0.9987056255340576,
            0.9985339641571045,
            0.99869304895401,
            0.9980689883232117,
            0.9986535906791687,
            0.9985778331756592,
            0.9984875917434692,
            0.998065173625946,
            0.9983838796615601,
            0.998141348361969,
            0.998065173625946,
            0.9977666735649109,
            0.9977022409439087,
            0.994613528251648,
            0.9982047080993652,
            0.9978671073913574,
            0.9975106120109558
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9949133992195129,
        "body": "    parts = date.split('-')\n    if len(parts) != 3 or '' in parts:\n        return False\n    month, day, year = map(int, parts)\n    if not (1 <= month <= 12):\n        return False\n    if (month in [1, 3, 5, 7, 8, 10, 12] and not 1 <= day <= 31) or \\\n       (month == 2 and not (1 <= day <= 29)) or \\\n       (month in [4, 6, 9, 11] and not 1 <= day <= 30):\n        return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9871793389320374,
            0.9915515780448914,
            0.9937940239906311,
            0.9938758015632629,
            0.9859934449195862,
            0.9945744872093201,
            0.990071177482605,
            0.9918704628944397,
            0.9905511140823364,
            0.9921090006828308,
            0.9909512400627136,
            0.9949133992195129,
            0.9893405437469482,
            0.9923822283744812,
            0.9933098554611206,
            0.9948427081108093,
            0.9887104034423828,
            0.9913669228553772,
            0.9871793389320374,
            0.994696855545044
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9977522492408752,
        "body": "    words = txt.split()\n    if not any(char.isalpha() for char in txt):\n        return len([i for i in range(ord('a'), ord('z')+1) if (i % 2 == 1)])\n    elif ',' in txt:\n        return [w.strip(',') for w in words]\n    else:\n        return words",
        "result": "failed: ",
        "similarities": [
            0.9976503252983093,
            0.9969191551208496,
            0.9976103901863098,
            0.9970148801803589,
            0.9970186948776245,
            0.9957342743873596,
            0.9968332052230835,
            0.9972969889640808,
            0.9961277842521667,
            0.9938434958457947,
            0.9959810376167297,
            0.9956230521202087,
            0.9973857402801514,
            0.9974126219749451,
            0.9952807426452637,
            0.9974387288093567,
            0.9974870085716248,
            0.9944604635238647,
            0.9969229698181152,
            0.9977522492408752
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9975357055664062,
        "body": "    return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.9975357055664062,
            0.9975357055664062,
            0.9960016012191772,
            0.9813218712806702,
            0.9950159788131714,
            0.9975357055664062,
            0.9975357055664062,
            0.9972206950187683,
            0.9918807148933411,
            0.9972911477088928,
            0.9931594729423523,
            0.9975357055664062,
            0.9939466714859009,
            0.9975357055664062,
            0.9975357055664062,
            0.9975357055664062,
            0.9975357055664062,
            0.9975357055664062,
            0.9918126463890076,
            0.9975357055664062
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9973003268241882,
        "body": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end: return \"NO\"\n    length = end - start\n        if n <= 1: return False\n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: return False\n        return True\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: unexpected indent (<string>, line 26)",
        "similarities": [
            0.9936932325363159,
            0.9950341582298279,
            0.9916459918022156,
            0.9925495982170105,
            0.9971530437469482,
            0.9960072040557861,
            0.996712327003479,
            0.9973003268241882,
            0.9967974424362183,
            0.996030330657959,
            0.9964581727981567,
            0.9970622062683105,
            0.9971356987953186,
            0.997136652469635,
            0.9933090209960938,
            0.9963172078132629,
            0.9959588646888733,
            0.9965817332267761,
            0.9968292713165283,
            0.9950935244560242
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9974375367164612,
        "body": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        sign = -1 if num < 0 else (1 if num > 0 else 0)\n        product *= sign\n    result = sum(abs(num) for num in arr)\n    return result * product",
        "result": "passed",
        "similarities": [
            0.9971823692321777,
            0.9969155192375183,
            0.9950734376907349,
            0.9969749450683594,
            0.9961622953414917,
            0.9956002831459045,
            0.9963880777359009,
            0.9964778423309326,
            0.9974375367164612,
            0.9951938986778259,
            0.9971823692321777,
            0.9959000945091248,
            0.9958691000938416,
            0.9937679171562195,
            0.9962037801742554,
            0.9968690276145935,
            0.9959626793861389,
            0.9968085885047913,
            0.9974061846733093,
            0.9930012226104736
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9971930980682373,
        "body": "    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    stack = [(0, 0, [], [])]\n    res = None\n    while stack:\n        x, y, path, order = stack.pop()\n        if (x, y) not in visited:\n            visited[x][y] = True\n            if len(path) == k:\n                if res is None or tuple(order) < tuple(res):\n                    res = (x, y, order)\n                continue\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                    stack.append((nx, ny, path + [(grid[x][y], grid[nx][ny])], order + [grid[nx][ny]]))\n    return list(res[2])",
        "result": "failed: ",
        "similarities": [
            0.9968096017837524,
            0.9951180219650269,
            0.9937921762466431,
            0.9963740110397339,
            0.9959121346473694,
            0.9964998364448547,
            0.9933693408966064,
            0.9949367046356201,
            0.9955008625984192,
            0.9962497353553772,
            0.9967008233070374,
            0.9965440034866333,
            0.9967153668403625,
            0.9968556761741638,
            0.9955841898918152,
            0.9966773986816406,
            0.9961959719657898,
            0.993513822555542,
            0.9971930980682373,
            0.9958701133728027
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9967354536056519,
        "body": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 3]\n    else:\n        a, b, c = 3, 3, \n        result = [3, 3] \n        for _ in range(2, n+1):\n            a, b, c = b, c, (b + c + a) if a % 2 != 0 else 1 + a / 2\n            result.append(c)\n        return result",
        "result": "failed: not enough values to unpack (expected 3, got 2)",
        "similarities": [
            0.9957008361816406,
            0.9961791038513184,
            0.995705246925354,
            0.9957389831542969,
            0.9963255524635315,
            0.9964830279350281,
            0.9953259229660034,
            0.9947066307067871,
            0.995297908782959,
            0.9956073760986328,
            0.9965810179710388,
            0.9932582378387451,
            0.9959316253662109,
            0.9932702779769897,
            0.9919205904006958,
            0.9964627623558044,
            0.9959839582443237,
            0.9940647482872009,
            0.9967354536056519,
            0.9953765869140625
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9983823895454407,
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9983823895454407,
            0.9964404106140137,
            0.9964404106140137,
            0.9964404106140137,
            0.9983823895454407,
            0.9964404106140137,
            0.9963155388832092,
            0.9960421323776245,
            0.9983823895454407,
            0.9983823895454407,
            0.9983823895454407,
            0.9983823895454407,
            0.998339831829071,
            0.9964404106140137,
            0.9983823895454407,
            0.9960421323776245,
            0.998339831829071,
            0.9983823895454407,
            0.9919540286064148,
            0.9983823895454407
        ]
    },
    "HumanEval/132": {
        "similarity": 0.994443416595459,
        "body": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9807013273239136,
            0.9907965660095215,
            0.9729759097099304,
            0.9937862753868103,
            0.9943879842758179,
            0.9919264912605286,
            0.994443416595459,
            0.993243396282196,
            0.9930675029754639,
            0.9933401346206665,
            0.9831730723381042,
            0.9922899007797241,
            0.9924753308296204,
            0.9942254424095154,
            0.994443416595459,
            0.9943879842758179,
            0.9928538799285889,
            0.9742240905761719,
            0.9928456544876099,
            0.9907654523849487
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9948019981384277,
        "body": "    return sum(int(i) ** 2 for i in [round(x)] for x in lst)",
        "result": "failed: name 'x' is not defined",
        "similarities": [
            0.993821382522583,
            0.99298495054245,
            0.9943456053733826,
            0.9905483722686768,
            0.9923346638679504,
            0.9674738645553589,
            0.993821382522583,
            0.9934867024421692,
            0.9927669167518616,
            0.9931050539016724,
            0.9937615990638733,
            0.9945648908615112,
            0.9910639524459839,
            0.9943797588348389,
            0.9943496584892273,
            0.9948019981384277,
            0.9938375353813171,
            0.9941227436065674,
            0.9931426048278809,
            0.9930300712585449
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9961624145507812,
        "body": "    return len(txt) > 0 and txt[-1].isalpha() and not any(char.isalpha() for char in txt[:-1])",
        "result": "failed: ",
        "similarities": [
            0.9871448874473572,
            0.9960528016090393,
            0.9960005879402161,
            0.9946629405021667,
            0.9937351942062378,
            0.9921453595161438,
            0.9937971234321594,
            0.9951278567314148,
            0.9947848916053772,
            0.9955666065216064,
            0.9961624145507812,
            0.9956327676773071,
            0.9946357607841492,
            0.9942311644554138,
            0.9945693612098694,
            0.9945919513702393,
            0.9952636361122131,
            0.9937971234321594,
            0.9924317598342896,
            0.9960436820983887
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9985668659210205,
        "body": "    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9985479116439819,
            0.9985554218292236,
            0.9982480406761169,
            0.9985668659210205,
            0.9985313415527344,
            0.998022198677063,
            0.9985510110855103,
            0.9974924325942993,
            0.9985510110855103,
            0.9985144734382629,
            0.996418833732605,
            0.9963284730911255,
            0.9982039928436279,
            0.9985554218292236,
            0.9974139332771301,
            0.9985313415527344,
            0.9876084923744202,
            0.998562753200531,
            0.9963484406471252,
            0.9961963295936584
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9930959939956665,
        "body": "    negative_numbers = [x for x in lst if x < 0]\n    positive_numbers = [x for x in lst if x > 0]\n    \n    a = min(negative_numbers) if negative_numbers else None\n    b = min(positive_numbers) if positive_numbers else None\n    \n    return (a, b)",
        "result": "failed: ",
        "similarities": [
            0.9926314353942871,
            0.9919835329055786,
            0.9919630289077759,
            0.978307843208313,
            0.9889505505561829,
            0.9926314353942871,
            0.9872775673866272,
            0.9926314353942871,
            0.9903586506843567,
            0.9875817894935608,
            0.9924874901771545,
            0.986551821231842,
            0.9928441643714905,
            0.9900146126747131,
            0.9812626242637634,
            0.9884618520736694,
            0.9850320219993591,
            0.9930959939956665,
            0.9856135845184326,
            0.9913100004196167
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9922849535942078,
        "body": "    if type(a) != type(b):\n        return max(a, b)\n    elif isinstance(a, str):\n        a = float(a.replace('.', ',').replace(',', '.'))\n        b = float(b.replace('.', ',').replace(',', '.'))\n    else:\n        pass\n    return None if a == b else (a if a > b else b)",
        "result": "failed: '>' not supported between instances of 'str' and 'int'",
        "similarities": [
            0.9901584982872009,
            0.9830740690231323,
            0.9893122315406799,
            0.9724219441413879,
            0.9900299906730652,
            0.990566074848175,
            0.9895051717758179,
            0.9922849535942078,
            0.9865636229515076,
            0.9898284077644348,
            0.9730618000030518,
            0.9851558208465576,
            0.9915422201156616,
            0.9886471629142761,
            0.9891408681869507,
            0.9869409203529358,
            0.9856115579605103,
            0.9763908386230469,
            0.9899322390556335,
            0.9851069450378418
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9910932183265686,
        "body": "    return n % 2 == 0 and all(i % 2 == 0 for i in range(1, 5))",
        "result": "failed: ",
        "similarities": [
            0.9895685315132141,
            0.9871751666069031,
            0.9880437254905701,
            0.9909286499023438,
            0.9791767597198486,
            0.9900480508804321,
            0.9826866984367371,
            0.9874106049537659,
            0.98627108335495,
            0.9856343865394592,
            0.9721273183822632,
            0.9908428192138672,
            0.9846848249435425,
            0.9827342629432678,
            0.988242506980896,
            0.9910932183265686,
            0.9822036623954773,
            0.9879820942878723,
            0.9891846179962158,
            0.9910396933555603
        ]
    },
    "HumanEval/139": {
        "similarity": 0.997334361076355,
        "body": "    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9927449822425842,
            0.9931194186210632,
            0.997303307056427,
            0.997303307056427,
            0.997303307056427,
            0.9894500374794006,
            0.997303307056427,
            0.9931510090827942,
            0.997303307056427,
            0.997303307056427,
            0.997303307056427,
            0.9931510090827942,
            0.9889706373214722,
            0.9931510090827942,
            0.997303307056427,
            0.997303307056427,
            0.997334361076355,
            0.997303307056427,
            0.9953911304473877,
            0.9931510090827942
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9958205223083496,
        "body": "    text = text.replace(' ', '_')\n    while '--' in text or '___' in text:\n        text = text.replace('--', '-')\n        text = text.replace('___', '-')\n    return text",
        "result": "passed",
        "similarities": [
            0.9958205223083496,
            0.9943448305130005,
            0.9954074025154114,
            0.9949725270271301,
            0.9833372235298157,
            0.9950178861618042,
            0.9941774606704712,
            0.9956628680229187,
            0.9948999285697937,
            0.9932939410209656,
            0.9923243522644043,
            0.9847206473350525,
            0.9949451088905334,
            0.9955571889877319,
            0.9955253601074219,
            0.9955253601074219,
            0.9955589771270752,
            0.9816979169845581,
            0.995372474193573,
            0.9923105835914612
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9970177412033081,
        "body": "    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    elif file_name.count('.') != 1 or file_name.split('.')[0] == '' or not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    else:\n        extension = file_name.split('.')[1]\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'",
        "result": "passed",
        "similarities": [
            0.9963810443878174,
            0.9955962300300598,
            0.9948021769523621,
            0.9969042539596558,
            0.9964134097099304,
            0.9946417808532715,
            0.9966104626655579,
            0.9945095777511597,
            0.9928104281425476,
            0.9960519671440125,
            0.9927390217781067,
            0.9967360496520996,
            0.9968425631523132,
            0.9970177412033081,
            0.9967783689498901,
            0.9958726763725281,
            0.9965987205505371,
            0.9947353005409241,
            0.9966151714324951,
            0.9968854188919067
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9945492148399353,
        "body": "    return sum(\n        x**3 if i % 4 == 0 and i % 3 != 0 else\n        x**2 if i % 3 == 0 else x for i, x in enumerate(lst)\n    )",
        "result": "passed",
        "similarities": [
            0.9903439879417419,
            0.9940291047096252,
            0.9904128909111023,
            0.9832823872566223,
            0.9934947490692139,
            0.9945492148399353,
            0.9914087057113647,
            0.9862464070320129,
            0.989533007144928,
            0.9868919253349304,
            0.9916954040527344,
            0.9936934113502502,
            0.9933918714523315,
            0.9882445931434631,
            0.9867202639579773,
            0.993476152420044,
            0.9915933012962341,
            0.9902592897415161,
            0.9912964701652527,
            0.9930050373077393
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9962093830108643,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9959162473678589,
            0.9954066872596741,
            0.9959712624549866,
            0.9910077452659607,
            0.9947224855422974,
            0.995017409324646,
            0.9935974478721619,
            0.9949136972427368,
            0.9953920245170593,
            0.9951103925704956,
            0.9953921437263489,
            0.9958239197731018,
            0.990161120891571,
            0.9956464171409607,
            0.9949136972427368,
            0.9954066872596741,
            0.9952477812767029,
            0.9962093830108643,
            0.9734954833984375,
            0.9952538013458252
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9977046847343445,
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * den_n) == (den_x * num_n)",
        "result": "failed: test1",
        "similarities": [
            0.9970374703407288,
            0.9976285696029663,
            0.9948800802230835,
            0.9976373910903931,
            0.9962554574012756,
            0.9974042773246765,
            0.9977046847343445,
            0.9970374703407288,
            0.9964944124221802,
            0.9976121187210083,
            0.9931002259254456,
            0.9976375102996826,
            0.9913605451583862,
            0.9971739053726196,
            0.9974319934844971,
            0.9920993447303772,
            0.9948800802230835,
            0.9970644116401672,
            0.9943572878837585,
            0.9974042773246765
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9997339844703674,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9992018342018127,
            0.9997339844703674,
            0.9992018342018127,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9997339844703674,
            0.9992018342018127,
            0.9992018342018127,
            0.9997339844703674,
            0.9997339844703674,
            0.9992018342018127,
            0.9997339844703674
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9960290789604187,
        "body": "    count = sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')",
        "result": "failed: ",
        "similarities": [
            0.9957433938980103,
            0.9957433938980103,
            0.9960290789604187,
            0.9960290789604187,
            0.9955852031707764,
            0.9933102130889893,
            0.9957433938980103,
            0.9941519498825073,
            0.9957433938980103,
            0.9957433938980103,
            0.9911297559738159,
            0.9957433938980103,
            0.9919546246528625,
            0.9937402009963989,
            0.9957433938980103,
            0.995092511177063,
            0.9883312582969666,
            0.9933102130889893,
            0.9937811493873596,
            0.9920780658721924
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9969910383224487,
        "body": "    a = [i*i-i+1 for i in range(1, n+1)]\n    cnt = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    cnt += 1\n    return cnt",
        "result": "passed",
        "similarities": [
            0.9969504475593567,
            0.9940618276596069,
            0.9969504475593567,
            0.9954119324684143,
            0.9938164949417114,
            0.9969234466552734,
            0.996740460395813,
            0.9893942475318909,
            0.996947169303894,
            0.9941747784614563,
            0.9969910383224487,
            0.9922523498535156,
            0.9913588166236877,
            0.9969505667686462,
            0.9969234466552734,
            0.9949359893798828,
            0.9968191385269165,
            0.9954302906990051,
            0.9969504475593567,
            0.994623064994812
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9966369271278381,
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    return tuple(sorted([p for i, p in enumerate(planets) if idx1 < i < idx2]))",
        "result": "failed: Second test error: ()",
        "similarities": [
            0.9939161539077759,
            0.9916532635688782,
            0.9953734874725342,
            0.9946812987327576,
            0.9964853525161743,
            0.9966369271278381,
            0.9962469339370728,
            0.9965183734893799,
            0.996527910232544,
            0.9931915998458862,
            0.9947104454040527,
            0.993587076663971,
            0.9947803020477295,
            0.9964543581008911,
            0.9964357018470764,
            0.9887444376945496,
            0.9944899678230286,
            0.9920699596405029,
            0.9964596629142761,
            0.9960303902626038
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9966257214546204,
        "body": "    return sorted([word for word in lst if len(word) % 2 == 0])",
        "result": "failed: ",
        "similarities": [
            0.9963375926017761,
            0.9963375926017761,
            0.9963375926017761,
            0.9941095113754272,
            0.9963375926017761,
            0.9963375926017761,
            0.9963350892066956,
            0.9963375926017761,
            0.9966257214546204,
            0.9963101744651794,
            0.9941105246543884,
            0.9903335571289062,
            0.9941095113754272,
            0.9963101744651794,
            0.9963375926017761,
            0.9963375926017761,
            0.9963375926017761,
            0.980663001537323,
            0.9966257214546204,
            0.9899998903274536
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9983150362968445,
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return x if is_prime(n) else y",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9977994561195374,
            0.9965596795082092,
            0.9979183673858643,
            0.9983150362968445,
            0.9971162676811218,
            0.9983147382736206,
            0.995907723903656,
            0.9966269135475159,
            0.9952012896537781,
            0.9983150362968445,
            0.9971162676811218,
            0.9983147382736206,
            0.9979183673858643,
            0.9972891807556152,
            0.9979387521743774,
            0.9895191192626953,
            0.9983150362968445,
            0.9983150362968445,
            0.9983147382736206,
            0.9962903261184692
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9967620372772217,
        "body": "    result = sum(n ** 2 for n in lst if isinstance(n, int) and n % 2 != 0)\n    return result",
        "result": "failed: This prints if this assert fails 5 (also good for debugging!)",
        "similarities": [
            0.9941563010215759,
            0.991979718208313,
            0.99538654088974,
            0.991777241230011,
            0.9939386248588562,
            0.9935047030448914,
            0.9967620372772217,
            0.9954249858856201,
            0.99538654088974,
            0.9954249858856201,
            0.9964376091957092,
            0.9951547384262085,
            0.9939386248588562,
            0.9966477155685425,
            0.991979718208313,
            0.9966989159584045,
            0.9923447370529175,
            0.9908071756362915,
            0.991979718208313,
            0.996256411075592
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9980594515800476,
        "body": "    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]",
        "result": "passed",
        "similarities": [
            0.9975993633270264,
            0.9964082837104797,
            0.9868951439857483,
            0.9942899346351624,
            0.9971121549606323,
            0.9967650175094604,
            0.9979822039604187,
            0.9979654550552368,
            0.9979822039604187,
            0.9979654550552368,
            0.9975993633270264,
            0.9963741302490234,
            0.9980594515800476,
            0.996548593044281,
            0.9979822039604187,
            0.9975993633270264,
            0.9979654550552368,
            0.997382640838623,
            0.9959875345230103,
            0.9975993633270264
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9942982196807861,
        "body": "    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension",
        "result": "passed",
        "similarities": [
            0.9932329058647156,
            0.9920871257781982,
            0.993635356426239,
            0.9941652417182922,
            0.9910305738449097,
            0.9920680522918701,
            0.9928320050239563,
            0.9942562580108643,
            0.9928355813026428,
            0.99178546667099,
            0.9929477572441101,
            0.9937946796417236,
            0.9941486716270447,
            0.9934162497520447,
            0.9934846758842468,
            0.9923513531684875,
            0.9942982196807861,
            0.992156982421875,
            0.9932648539543152,
            0.9920023679733276
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9946070313453674,
        "body": "    for _ in range(len(b)):\n        if b in a: return True\n        b = b[1:] + b[0]",
        "result": "failed: test #0",
        "similarities": [
            0.9867283701896667,
            0.9931766986846924,
            0.9939017295837402,
            0.9911742210388184,
            0.9867282509803772,
            0.9923462271690369,
            0.9800299406051636,
            0.9939968585968018,
            0.9939968585968018,
            0.9902606010437012,
            0.9937999248504639,
            0.9939968585968018,
            0.991918683052063,
            0.9939968585968018,
            0.9921339154243469,
            0.9946070313453674,
            0.9923577904701233,
            0.9925203919410706,
            0.9914609789848328,
            0.9932718873023987
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9974395632743835,
        "body": "    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "result": "passed",
        "similarities": [
            0.9974395632743835,
            0.996445894241333,
            0.9948359131813049,
            0.9945312142372131,
            0.9974395632743835,
            0.9974395632743835,
            0.9974395632743835,
            0.9948359131813049,
            0.9936270713806152,
            0.9974395632743835,
            0.9971319437026978,
            0.9960068464279175,
            0.9974395632743835,
            0.9974395632743835,
            0.9930233359336853,
            0.9965841174125671,
            0.996445894241333,
            0.9948359131813049,
            0.9974395632743835,
            0.9974187612533569
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9937031269073486,
        "body": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman += numeral\n            number -= value\n    return roman.lower()",
        "result": "passed",
        "similarities": [
            0.9918415546417236,
            0.9936389923095703,
            0.9860329031944275,
            0.9918415546417236,
            0.9934294819831848,
            0.9925042390823364,
            0.9907274842262268,
            0.9935120344161987,
            0.99258953332901,
            0.9911061525344849,
            0.9923154711723328,
            0.991927981376648,
            0.9937031269073486,
            0.9923011660575867,
            0.9884322285652161,
            0.9839926362037659,
            0.9924537539482117,
            0.9921396970748901,
            0.9907256960868835,
            0.9920074343681335
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9975220561027527,
        "body": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2",
        "result": "passed",
        "similarities": [
            0.9975220561027527,
            0.9975220561027527,
            0.9975220561027527,
            0.9975220561027527,
            0.995093822479248,
            0.9909318685531616,
            0.9897597432136536,
            0.9960341453552246,
            0.9974162578582764,
            0.9975220561027527,
            0.9974162578582764,
            0.9975220561027527,
            0.9953306317329407,
            0.9975220561027527,
            0.9975220561027527,
            0.9933175444602966,
            0.9975220561027527,
            0.9876968860626221,
            0.9975220561027527,
            0.9975220561027527
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9970516562461853,
        "body": "    max_word = words[0]\n    for word in words[1:]:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)) and word < max_word:\n            max_word = word\n    return max_word",
        "result": "passed",
        "similarities": [
            0.9970516562461853,
            0.9970516562461853,
            0.9809048175811768,
            0.9970516562461853,
            0.9962429404258728,
            0.9955965280532837,
            0.9951098561286926,
            0.9970516562461853,
            0.9970516562461853,
            0.9958218932151794,
            0.9958543181419373,
            0.9818760752677917,
            0.9970516562461853,
            0.9968028664588928,
            0.9968028664588928,
            0.9968054890632629,
            0.9944453835487366,
            0.9968028664588928,
            0.9970516562461853,
            0.9970516562461853
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9928914308547974,
        "body": "    total = number + max(remaining, need)\n    return [total, max(0, remaining - need)]",
        "result": "failed: Error",
        "similarities": [
            0.9913831949234009,
            0.9891945719718933,
            0.9928914308547974,
            0.984735906124115,
            0.98680579662323,
            0.9905683398246765,
            0.9914432168006897,
            0.9845516681671143,
            0.98680579662323,
            0.9891945719718933,
            0.9892084002494812,
            0.98680579662323,
            0.9912768006324768,
            0.9914432168006897,
            0.98680579662323,
            0.9922005534172058,
            0.9919146299362183,
            0.9880983233451843,
            0.990878164768219,
            0.9884210824966431
        ]
    },
    "HumanEval/160": {
        "similarity": 0.993198573589325,
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9929206371307373,
            0.9883561730384827,
            0.9927956461906433,
            0.9887502789497375,
            0.9917941689491272,
            0.9929206371307373,
            0.9871711730957031,
            0.9930363893508911,
            0.9928644895553589,
            0.9912405610084534,
            0.9905803203582764,
            0.993198573589325,
            0.9915297627449036,
            0.9929206371307373,
            0.98320472240448,
            0.9850707650184631,
            0.9906378388404846,
            0.9831638336181641,
            0.9824315905570984,
            0.9920312762260437
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9914527535438538,
        "body": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if any(c.isalpha() for c in s) else s[::-1]",
        "result": "failed: ",
        "similarities": [
            0.9894260764122009,
            0.9908770322799683,
            0.9907534718513489,
            0.9768214821815491,
            0.9906148314476013,
            0.9795511364936829,
            0.9854464530944824,
            0.9644114971160889,
            0.9912242889404297,
            0.9872923493385315,
            0.9874927401542664,
            0.990687906742096,
            0.9803606271743774,
            0.9892786145210266,
            0.9914527535438538,
            0.9877263307571411,
            0.9715983867645264,
            0.9745281934738159,
            0.9911551475524902,
            0.9913741946220398
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9977204203605652,
        "body": "import hashlib\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9974768757820129,
            0.9950226545333862,
            0.9977204203605652,
            0.9976739287376404,
            0.9973423480987549,
            0.9973708987236023,
            0.9974608421325684,
            0.9969387054443359,
            0.9964872598648071,
            0.9976248741149902,
            0.9973521828651428,
            0.9977204203605652,
            0.996195375919342,
            0.9831889271736145,
            0.9962617754936218,
            0.9973422884941101,
            0.9974218606948853,
            0.9977204203605652,
            0.9966609477996826,
            0.9976248741149902
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9922017455101013,
        "body": "    even_digits = set()\n    for i in range(min(a,b), max(a,b)+1):\n        if i % 2 == 0:\n            even_digits.add(i)\n    return sorted(list(even_digits))",
        "result": "failed: Test 1",
        "similarities": [
            0.987528383731842,
            0.9916243553161621,
            0.9891737103462219,
            0.9917134046554565,
            0.9735767245292664,
            0.9844726920127869,
            0.9868026375770569,
            0.9876852631568909,
            0.9905651807785034,
            0.9896672964096069,
            0.990132212638855,
            0.9892222881317139,
            0.987528383731842,
            0.987528383731842,
            0.9908690452575684,
            0.9922017455101013,
            0.9788611531257629,
            0.9901512861251831,
            0.9892222881317139,
            0.9864104390144348
        ]
    }
}