{
    "4693": {
        "similarity": 0.9977786540985107,
        "body": "A = int(input())\nB = int(input())\nprint(A+B) if A+B < 10 else print('error')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977706074714661,
            0.9963304400444031,
            0.9977786540985107,
            0.991313636302948,
            0.9977545738220215,
            0.9977545738220215,
            0.99277263879776,
            0.9977786540985107,
            0.9977387189865112,
            0.9974521994590759,
            0.9977545738220215,
            0.9905992150306702,
            0.9963304400444031,
            0.9977786540985107,
            0.9977706074714661,
            0.9975382089614868,
            0.9968703389167786,
            0.9967939257621765,
            0.9977149963378906,
            0.9938127398490906
        ]
    },
    "4077": {
        "similarity": 0.9971546530723572,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for l in range(n):\n        for r in range(l, n):\n            if sorted(a[l:r+1]).index(m) == (r-l)//2:\n                ans += 1\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960680603981018,
            0.9917843341827393,
            0.9909809827804565,
            0.994439959526062,
            0.9968492388725281,
            0.9950175285339355,
            0.9966484904289246,
            0.9967910647392273,
            0.9971546530723572,
            0.9944385886192322,
            0.9938909411430359,
            0.9958221316337585,
            0.995353102684021,
            0.9966800212860107,
            0.9967420697212219,
            0.9967790246009827,
            0.9959834218025208,
            0.9965802431106567,
            0.996518075466156,
            0.9968420267105103
        ]
    },
    "4006": {
        "similarity": 0.996744692325592,
        "body": "    while str(x).endswith('0'):\n        x = int(str(x)[:-1])\n    return x + 1\n\n    seen = set()\n    q = [n]\n    while q:\n        x = q.pop(0)\n        if x not in seen:\n            seen.add(x)\n            q.extend(f(i) for i in seen if f(i) != i)\n    return len(seen)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944013357162476,
            0.9939063191413879,
            0.9938943982124329,
            0.9923740029335022,
            0.993434488773346,
            0.9956523776054382,
            0.9939281344413757,
            0.9966050386428833,
            0.9955593943595886,
            0.9949923157691956,
            0.996165931224823,
            0.9966137409210205,
            0.9965716004371643,
            0.9945826530456543,
            0.9946096539497375,
            0.996744692325592,
            0.9936548471450806,
            0.9961527585983276,
            0.9962742328643799,
            0.9941928386688232
        ]
    },
    "4556": {
        "similarity": 0.9977365732192993,
        "body": "s = input().split()[2]\nprint(s[0].upper() + \"xC\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.995949387550354,
            0.9977365732192993,
            0.9965619444847107,
            0.9964951276779175,
            0.9969785809516907,
            0.9977365732192993,
            0.9964951276779175,
            0.9947408437728882,
            0.9968693256378174,
            0.9957502484321594,
            0.9957901835441589,
            0.9962397217750549,
            0.9952531456947327,
            0.9977365732192993,
            0.9964951276779175,
            0.9952372312545776,
            0.9962068200111389,
            0.9968804121017456,
            0.9968188405036926,
            0.9942060708999634
        ]
    },
    "4571": {
        "similarity": 0.9969087243080139,
        "body": "N, M = map(int, input().split())\nX = sum((2**i)*1900 for i in range(M+1))\nprint(X)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967834949493408,
            0.9956647753715515,
            0.9968435168266296,
            0.996773362159729,
            0.9961082339286804,
            0.9950523376464844,
            0.995280921459198,
            0.9942371249198914,
            0.9950820803642273,
            0.9952194690704346,
            0.9962467551231384,
            0.9954683184623718,
            0.9968173503875732,
            0.995898425579071,
            0.9969087243080139,
            0.9960964918136597,
            0.9944635033607483,
            0.9954684376716614,
            0.9943251609802246,
            0.9968782663345337
        ]
    },
    "4019": {
        "similarity": 0.9956570863723755,
        "body": "n, m, D = map(int, input().split())\nedges = []\nfor _ in range(m):\n    v, u = map(int, input().split())\n    edges.append((min(v, u), max(v, u)))\n\n    degrees = {}\n    for edge in edges:\n        if edge[0] not in degrees:\n            degrees[edge[0]] = 1\n        else:\n            degrees[edge[0]] += 1\n        if edge[1] not in degrees:\n            degrees[edge[1]] = 1\n        else:\n            degrees[edge[1]] += 1\n    \n    return D == degrees.get(1, 0)\n\nif has_degree_d(edges, D):\n    print('YES')\n    for _ in range(n-1):\n        v, u = random.sample([i+1 for i in range(n) if i != 1], 2)\n        while (min(v, u), max(v, u)) not in edges:\n            v, u = random.sample([i+1 for i in range(n) if i != 1], 2)\n        print(f'{v} {u}')\nelse:\n    print('NO')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934538006782532,
            0.9948891401290894,
            0.9952229261398315,
            0.9947672486305237,
            0.9939182996749878,
            0.9934685230255127,
            0.9946658611297607,
            0.9940941333770752,
            0.9949626922607422,
            0.9956570863723755,
            0.9937440156936646,
            0.9942628145217896,
            0.9901153445243835,
            0.9923409223556519,
            0.9938735961914062,
            0.9953460693359375,
            0.9942079186439514,
            0.9924156069755554,
            0.9953359365463257,
            0.9954530596733093
        ]
    },
    "4265": {
        "similarity": 0.9923458099365234,
        "body": "    S = input()\n    T = input()\n    m = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            m += 1\n    print(m)",
        "result": "passed",
        "similarities": [
            0.989182710647583,
            0.9917071461677551,
            0.9872391223907471,
            0.9922935366630554,
            0.9918829202651978,
            0.9756190776824951,
            0.9867744445800781,
            0.9872391223907471,
            0.9919347167015076,
            0.9920499920845032,
            0.9885600209236145,
            0.9872037172317505,
            0.9923458099365234,
            0.9921318888664246,
            0.9920164346694946,
            0.9872035980224609,
            0.9738412499427795,
            0.9917557239532471,
            0.9917557239532471,
            0.9859001636505127
        ]
    },
    "4657": {
        "similarity": 0.9966134428977966,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    odd_sum = sum(1 for x in a if x % 2)\n    if odd_sum % k:\n        print(\"NO\")\n    else:\n        res = [0]\n        s = 0\n        for i in range(n):\n            if (s + a[i]) % 2 != 0:\n                res.append(i+1)\n                s += a[i]\n        print(\"YES\")\n        print(' '.join(map(str, res)) + ' ' + str(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959412813186646,
            0.9956287741661072,
            0.994118332862854,
            0.9939677715301514,
            0.9964714050292969,
            0.9956673383712769,
            0.9946584105491638,
            0.9931492209434509,
            0.9958307147026062,
            0.992935061454773,
            0.9962849020957947,
            0.9950709342956543,
            0.9954352378845215,
            0.9918083548545837,
            0.9955663084983826,
            0.9966134428977966,
            0.995236873626709,
            0.9935009479522705,
            0.9958910942077637,
            0.993560791015625
        ]
    },
    "4599": {
        "similarity": 0.9967333078384399,
        "body": "N = int(input())\na = list(map(int, input().split()))\nalice_score = sum(a[: (N // 2) + N % 2])\nbob_score = sum(a[:(N // 2) + N % 1])\nprint(alice_score - bob_score)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964789152145386,
            0.9964917898178101,
            0.9962856769561768,
            0.9965246319770813,
            0.9965161085128784,
            0.9958469867706299,
            0.9954729676246643,
            0.9965534210205078,
            0.9957391023635864,
            0.9967333078384399,
            0.9936192035675049,
            0.9930261373519897,
            0.9957500100135803,
            0.996338427066803,
            0.9967316389083862,
            0.9959673881530762,
            0.9965600371360779,
            0.9923598766326904,
            0.9928785562515259,
            0.9936192035675049
        ]
    },
    "4774": {
        "similarity": 0.9960923790931702,
        "body": "    a, b, c, d = map(int, input().split())\n    for op1 in ['+', '-', '*', '/']:\n        for op2 in ['+', '-', '*', '/']:\n            if eval(f'{a} {op1} {b} == {c} {op2} {d}'):\n                print(f'{a} {op1} {b} = {c} {op2} {d}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956773519515991,
            0.9956902265548706,
            0.9957140684127808,
            0.9938687682151794,
            0.9960259795188904,
            0.993414044380188,
            0.9921116232872009,
            0.9902726411819458,
            0.9960923790931702,
            0.9957574605941772,
            0.9956169128417969,
            0.995684802532196,
            0.9921073913574219,
            0.9959700703620911,
            0.9960857033729553,
            0.995684802532196,
            0.9960923790931702,
            0.9923251271247864,
            0.9953919649124146,
            0.9913960695266724
        ]
    },
    "4851": {
        "similarity": 0.9958154559135437,
        "body": "    n = int(input())\n    i = n + 1\n    while True:\n        d_sum = sum(int(digit) for digit in str(i))\n        if i % d_sum == 0:\n            break\n        i += 1\n    print(i)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955522418022156,
            0.9944508075714111,
            0.9952031373977661,
            0.9922441244125366,
            0.9942944049835205,
            0.9862852692604065,
            0.9957772493362427,
            0.9953412413597107,
            0.9948304891586304,
            0.9940248131752014,
            0.994712233543396,
            0.9919798970222473,
            0.9921427369117737,
            0.9943006634712219,
            0.9955522418022156,
            0.9958154559135437,
            0.9927427172660828,
            0.9956045746803284,
            0.9942927360534668,
            0.995639979839325
        ]
    },
    "4655": {
        "similarity": 0.995945155620575,
        "body": "    q = int(input())\n    for _ in range(q):\n        a, b, c = map(int, input().split())\n        total = a + b + c\n        alice = min(a, (total // 2) + 1)\n        bob = total - alice\n        print(alice)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930697083473206,
            0.995530366897583,
            0.9922020435333252,
            0.9947867393493652,
            0.9944847822189331,
            0.9953926801681519,
            0.9949935078620911,
            0.9939707517623901,
            0.9944902658462524,
            0.992021381855011,
            0.9932529926300049,
            0.9938229918479919,
            0.9926232099533081,
            0.9959208965301514,
            0.9954152703285217,
            0.995673418045044,
            0.995945155620575,
            0.9895914793014526,
            0.9928131103515625,
            0.9836961627006531
        ]
    },
    "4132": {
        "similarity": 0.9933451414108276,
        "body": "import heapq\nn = int(input())\na = list(map(int, input().split()))\nheap = [-x for x in a]\nwhile len(heap) > 1:\n    h1 = -heapq.heappop(heap)\n    h2 = -heapq.heappop(heap)\n    heapq.heappush(heap, -(h1+h2))\nprint(-heap[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910605549812317,
            0.9933451414108276,
            0.989833414554596,
            0.9875456094741821,
            0.9915099143981934,
            0.9913185834884644,
            0.9899004101753235,
            0.9869831800460815,
            0.9919675588607788,
            0.9921537637710571,
            0.9883073568344116,
            0.991025447845459,
            0.993058443069458,
            0.9864867329597473,
            0.9861176013946533,
            0.9891496896743774,
            0.9905562400817871,
            0.9920523762702942,
            0.9914171099662781,
            0.9918197989463806
        ]
    },
    "4085": {
        "similarity": 0.9979029297828674,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        divisors.sort()\n        if divisors[0] != 2 or divisors[-1] != int(10**6):\n            print(-1)\n        else:\n            x = 1\n            for d in divisors:\n                x *= d\n            print(x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965997934341431,
            0.9976149201393127,
            0.9979029297828674,
            0.9973372220993042,
            0.9968336224555969,
            0.9971544146537781,
            0.9970698952674866,
            0.9973734617233276,
            0.9938110709190369,
            0.996789813041687,
            0.9966575503349304,
            0.9975180625915527,
            0.9971299767494202,
            0.9977298378944397,
            0.9974622130393982,
            0.9968986511230469,
            0.9973865151405334,
            0.9954169392585754,
            0.9959052205085754,
            0.9948129057884216
        ]
    },
    "4399": {
        "similarity": 0.992491602897644,
        "body": "print(\"Yes\" if set(S).count('A') * 2 >= 1 else \"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920842051506042,
            0.9909145832061768,
            0.9902546405792236,
            0.9903613924980164,
            0.992491602897644,
            0.9905092120170593,
            0.9834136962890625,
            0.9892397522926331,
            0.9871645569801331,
            0.981913149356842,
            0.9878090620040894,
            0.9727985262870789,
            0.9908314943313599,
            0.9894963502883911,
            0.9889048337936401,
            0.992445707321167,
            0.9905731081962585,
            0.9907485842704773,
            0.9892353415489197,
            0.9905092120170593
        ]
    },
    "4999": {
        "similarity": 0.9972715973854065,
        "body": "    a, b = map(int, input().split())\n    ops = 0\n    while a != b:\n        if a < b:\n            diff = b - a\n            ops += 1\n            while a + ops <= b:\n                a += 1\n                ops += 1\n        else:\n            if a % 2 == 0:\n                a //= 2\n            else:\n                for _ in range(ops):\n                    a += 1\n    print(ops)",
        "result": "timed out",
        "similarities": [
            0.9941859841346741,
            0.9955862760543823,
            0.9971699118614197,
            0.9972715973854065,
            0.9971818327903748,
            0.9961443543434143,
            0.9970091581344604,
            0.9970918893814087,
            0.9933963418006897,
            0.9946178793907166,
            0.9959763288497925,
            0.9955441355705261,
            0.9959612488746643,
            0.9956462383270264,
            0.9958918690681458,
            0.9968549609184265,
            0.9967663288116455,
            0.9963752627372742,
            0.9935730695724487,
            0.9968495965003967
        ]
    },
    "4727": {
        "similarity": 0.9961632490158081,
        "body": "    grid = [list(map(int, input().split())) for _ in range(4)]\n    move = int(input())\n    if move == 0:\n        return '\\n'.join([' '.join(map(str, row)) for row in grid])\n    elif move == 1:\n        grid = [[grid[i][j] for j in range(len(grid[0]))] for i in range(len(grid))]\n    elif move == 2:\n        grid = list(zip(*grid))\n    elif move == 3:\n        grid = [list(reversed(row)) for row in zip(*grid)]\n    max_val = 2048\n    merged = True\n    while merged:\n        merged = False\n        for i in range(4):\n            for j in range(1, 5):\n                if grid[i][j-1] == grid[i][j]:\n                    grid[i][j-1] *= 2\n                    max_val = max(max_val, grid[i][j-1])\n                    grid[i][j] = 0\n                    merged = True\n        for i in range(4):\n            for j in range(len(grid[0])):\n                if j > 0 and grid[i][j] == grid[i][j-1]:\n                    grid[i][j-1] *= 2\n                    max_val = max(max_val, grid[i][j-1])\n                    grid[i][j] = 0\n                    merged = True\n    for i in range(4):\n        for j in range(len(grid[0])):\n            if grid[i][j] > 0:\n                return '\\n'.join([' '.join(map(str, row)) for row in grid])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936724305152893,
            0.9950417876243591,
            0.9961632490158081,
            0.9917779564857483,
            0.9931848645210266,
            0.992093026638031,
            0.9934250712394714,
            0.9957951903343201,
            0.9954938292503357,
            0.9883148074150085,
            0.9953978657722473,
            0.9948875904083252,
            0.9946170449256897,
            0.9952892661094666,
            0.9908152222633362,
            0.9946174621582031,
            0.9943100810050964,
            0.9938572645187378,
            0.9950573444366455,
            0.993972897529602
        ]
    },
    "4906": {
        "similarity": 0.9982172250747681,
        "body": "    mode = input()\n    message = input().strip()\n    if mode == 'E':\n        encoded_message = ''\n        i = 0\n        while i < len(message):\n            count = 1\n            while i + 1 < len(message) and message[i] == message[i+1]:\n                i += 1\n                count += 1\n            encoded_message += str(count)\n            encoded_message += message[i]\n            i += 1\n        print(encoded_message)\n    elif mode == 'D':\n        decoded_message = ''\n        i = 0\n        while i < len(message):\n            if i % 2 == 0:\n                char = message[i]\n                count = int(message[i+1])\n                decoded_message += char * count\n            i += 2\n        print(decoded_message)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977268576622009,
            0.9980934858322144,
            0.9981406331062317,
            0.997868001461029,
            0.9976780414581299,
            0.9971802234649658,
            0.99795001745224,
            0.9977089762687683,
            0.9966662526130676,
            0.9976328611373901,
            0.9974664449691772,
            0.9978480935096741,
            0.9974373579025269,
            0.9965447187423706,
            0.9970169067382812,
            0.9933509826660156,
            0.9979294538497925,
            0.9976564049720764,
            0.9982172250747681,
            0.9972018003463745
        ]
    },
    "4011": {
        "similarity": 0.9959399700164795,
        "body": "n = int(input())\na = str(input())\nf = list(map(int, input().split()))\nmax_a = 0\nfor i in range(1 << n):\n    temp_a = a\n    for j in range(n):\n        if (i >> j) & 1:\n            temp_a = ''.join(str(f[int(c)-1]) if c in str(f) else c for c in temp_a)\n    max_a = max(max_a, int(temp_a))\nprint(max_a)",
        "result": "timed out",
        "similarities": [
            0.9947386384010315,
            0.9950451254844666,
            0.9931074380874634,
            0.9908398389816284,
            0.9935063719749451,
            0.9959399700164795,
            0.9954235553741455,
            0.9949184060096741,
            0.9949421286582947,
            0.9921730756759644,
            0.9932510852813721,
            0.9904446005821228,
            0.9941396117210388,
            0.9914190173149109,
            0.9932513236999512,
            0.9947445392608643,
            0.9953749775886536,
            0.9943920969963074,
            0.9958847761154175,
            0.9956896901130676
        ]
    },
    "4099": {
        "similarity": 0.9966254234313965,
        "body": "N, K, M = map(int, input().split())\nA = list(map(int, input().split()))\naverage = sum(A) / len(A)\nif average >= M:\n    print(-1)\nelse:\n    remaining = M * (N - 1) - sum(A)\n    if remaining <= K:\n        print(remaining)\n    else:\n        print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960876107215881,
            0.9961663484573364,
            0.9965654611587524,
            0.9954946637153625,
            0.9965184926986694,
            0.9953374266624451,
            0.9954416155815125,
            0.9911587238311768,
            0.996250569820404,
            0.9957025647163391,
            0.9957259297370911,
            0.9963248372077942,
            0.9959397912025452,
            0.9966254234313965,
            0.9963979125022888,
            0.9954230785369873,
            0.9965202808380127,
            0.9966110587120056,
            0.9965842366218567,
            0.9960542321205139
        ]
    },
    "4465": {
        "similarity": 0.9987985491752625,
        "body": "    A, B = map(int, input().split())\n    return (A - 2) * (B - 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.998663067817688,
            0.9987947344779968,
            0.9987947344779968,
            0.9986698627471924,
            0.9987948536872864,
            0.9987948536872864,
            0.9931131601333618,
            0.9911414980888367,
            0.9987985491752625,
            0.9987985491752625,
            0.9987985491752625,
            0.9987471699714661,
            0.9987985491752625,
            0.9982690215110779,
            0.9987985491752625,
            0.9987471699714661,
            0.9960957765579224,
            0.9987471699714661,
            0.9987200498580933,
            0.9987985491752625
        ]
    },
    "4315": {
        "similarity": 0.9984893798828125,
        "body": "import math\nR = int(input())\nprint(math.pi * 2 * R)",
        "result": "passed",
        "similarities": [
            0.9984893798828125,
            0.9983267784118652,
            0.9971357583999634,
            0.9984403848648071,
            0.9984504580497742,
            0.9956299662590027,
            0.9971175789833069,
            0.9984893798828125,
            0.9984314441680908,
            0.9975544810295105,
            0.9984893798828125,
            0.9975544810295105,
            0.9974655508995056,
            0.9974655508995056,
            0.9956018328666687,
            0.9984893798828125,
            0.9982236623764038,
            0.9984893798828125,
            0.9984893798828125,
            0.9957996010780334
        ]
    },
    "4633": {
        "similarity": 0.9984695911407471,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        moves = 0\n        while sum(int(digit) for digit in str(n)) > s:\n            n += 1\n            moves += 1\n        print(moves)",
        "result": "timed out",
        "similarities": [
            0.9982541799545288,
            0.9984695911407471,
            0.9979416728019714,
            0.9984695911407471,
            0.9979842305183411,
            0.9984695911407471,
            0.9980645775794983,
            0.9947449564933777,
            0.9967383146286011,
            0.9984375834465027,
            0.9984695911407471,
            0.9984695911407471,
            0.9984695911407471,
            0.994179904460907,
            0.9953648447990417,
            0.9971583485603333,
            0.9984695911407471,
            0.9979526996612549,
            0.9981351494789124,
            0.9984695911407471
        ]
    },
    "4734": {
        "similarity": 0.9980970621109009,
        "body": "    if y[-1] == 'e':\n        return y + 'x' + p\n    elif any(vowel in y for vowel in ['a', 'i', 'o', 'u']):\n        return y[:-1] + 'ex' + p\n    else:\n        return y + p",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965764284133911,
            0.9980970621109009,
            0.9980069994926453,
            0.9978339672088623,
            0.9954425692558289,
            0.9973418712615967,
            0.9970170259475708,
            0.9935383200645447,
            0.9973397850990295,
            0.9980069994926453,
            0.9974885582923889,
            0.9980153441429138,
            0.9979520440101624,
            0.9973397850990295,
            0.9977396726608276,
            0.9980069994926453,
            0.9974533915519714,
            0.9980069994926453,
            0.9973418712615967,
            0.9949986338615417
        ]
    },
    "4229": {
        "similarity": 0.9970960021018982,
        "body": "    N = int(input())\n    total_sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            total_sum += 0\n        elif i % 3 == 0:\n            total_sum += 3\n        elif i % 5 == 0:\n            total_sum += 5\n        else:\n            total_sum += i\n    print(total_sum)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967442750930786,
            0.9967491626739502,
            0.995297372341156,
            0.9962652325630188,
            0.9956911206245422,
            0.9958676695823669,
            0.9970960021018982,
            0.9969286918640137,
            0.9966999888420105,
            0.9970180988311768,
            0.9956911206245422,
            0.9968507885932922,
            0.9969347715377808,
            0.9968050718307495,
            0.9961951375007629,
            0.9961951375007629,
            0.9966999888420105,
            0.9966376423835754,
            0.9967368245124817,
            0.9969372153282166
        ]
    },
    "4321": {
        "similarity": 0.9968743920326233,
        "body": "    n, k = map(int, input().split())\n    for _ in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    print(n)",
        "result": "passed",
        "similarities": [
            0.9941805601119995,
            0.9963122010231018,
            0.9941805601119995,
            0.9955925345420837,
            0.993810772895813,
            0.9967912435531616,
            0.9967912435531616,
            0.9967912435531616,
            0.9954769611358643,
            0.9952075481414795,
            0.9940308928489685,
            0.9968743920326233,
            0.9968743920326233,
            0.9967912435531616,
            0.9891453981399536,
            0.9953369498252869,
            0.9964910745620728,
            0.9968743920326233,
            0.9967912435531616,
            0.9894621968269348
        ]
    },
    "4503": {
        "similarity": 0.9970446228981018,
        "body": "    H, N = map(int, input().split())\n    A = list(map(int, input().split()))\n    used_moves = set()\n    for move in A:\n        if H - move <= 0:\n            return 'Yes'\n        elif move not in used_moves:\n            used_moves.add(move)\n            H -= move\n            if H <= 0:\n                return 'Yes'\n    print('No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953595399856567,
            0.9962379336357117,
            0.9970446228981018,
            0.9962853193283081,
            0.9963307976722717,
            0.9968039989471436,
            0.9925304055213928,
            0.996081531047821,
            0.9947702288627625,
            0.9961363077163696,
            0.9957015514373779,
            0.9927858114242554,
            0.993656575679779,
            0.9907320737838745,
            0.9957811236381531,
            0.9963343739509583,
            0.9966135621070862,
            0.9929994344711304,
            0.9967169761657715,
            0.9947489500045776
        ]
    },
    "4855": {
        "similarity": 0.9967641234397888,
        "body": "A, I = map(int, input().split())\nprint(I * A - A)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967641234397888,
            0.994276225566864,
            0.9959825277328491,
            0.9958764910697937,
            0.994209885597229,
            0.9962286949157715,
            0.9967641234397888,
            0.9910426735877991,
            0.9947556257247925,
            0.996277391910553,
            0.9966870546340942,
            0.9941385984420776,
            0.9967641234397888,
            0.995395839214325,
            0.9967039227485657,
            0.9917194843292236,
            0.9960429668426514,
            0.9955416321754456,
            0.9952406883239746,
            0.9934478402137756
        ]
    },
    "4704": {
        "similarity": 0.9964215159416199,
        "body": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nx, y = sum(a[:n//2]), sum(a[n//2:])\nprint(abs(x-y))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995614230632782,
            0.9940295815467834,
            0.9957900047302246,
            0.9947149157524109,
            0.9936277270317078,
            0.9963489174842834,
            0.9961220622062683,
            0.9963852763175964,
            0.9934589266777039,
            0.995694637298584,
            0.9960488080978394,
            0.994115948677063,
            0.9964215159416199,
            0.9953787922859192,
            0.9963014721870422,
            0.994139552116394,
            0.996364176273346,
            0.9961220622062683,
            0.995346188545227,
            0.9964207410812378
        ]
    },
    "4829": {
        "similarity": 0.9964563250541687,
        "body": "    left, right = map(int, input().split())\n    if left == right:\n        return f\"Even {left*2}\"\n    else:\n        return f\"Odd {(max(left, right)*2)}\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964563250541687,
            0.9963003396987915,
            0.9963870644569397,
            0.9937450885772705,
            0.9964335560798645,
            0.9959694743156433,
            0.9961593151092529,
            0.9932114481925964,
            0.9896993041038513,
            0.9944930076599121,
            0.9948437213897705,
            0.9918293356895447,
            0.9945682883262634,
            0.9962872862815857,
            0.9963003396987915,
            0.9934202432632446,
            0.9894605875015259,
            0.995183527469635,
            0.9947530031204224,
            0.9953470826148987
        ]
    },
    "4730": {
        "similarity": 0.9960536956787109,
        "body": "    l = int(input())\n    s = input().strip()\n    stack = []\n    for i in range(l):\n        c = s[i]\n        if c in '({[':\n            stack.append(c)\n        elif c in ')}]':\n            if not stack or (stack.pop() != '(' and stack[-1] not in '[{'):\n                print(f\"{c} {i}\")\n                return\n    if stack:\n        print(f\"{stack[0]} {l-1}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949696063995361,
            0.9940750002861023,
            0.9950785636901855,
            0.9952928423881531,
            0.9926415681838989,
            0.9943249225616455,
            0.994552731513977,
            0.9953948855400085,
            0.9960536956787109,
            0.9813383221626282,
            0.9911218881607056,
            0.995405912399292,
            0.9954295754432678,
            0.9918761253356934,
            0.9958845376968384,
            0.9945216178894043,
            0.9958497881889343,
            0.9956854581832886,
            0.9915522336959839,
            0.9940276145935059
        ]
    },
    "4729": {
        "similarity": 0.9935104250907898,
        "body": "P, s = input().split()\nP = list(P)\nfor i in range(len(s)):\n    for c in P[1:]:\n        if c in s[i:i+1]:\n            P.pop(0)\n            break\n    else:\n        continue\n    if not P:\n        print('PASS')\n        exit()\nprint('FAIL')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925183653831482,
            0.9843477010726929,
            0.986352801322937,
            0.984165370464325,
            0.9927805662155151,
            0.9854905009269714,
            0.9929915070533752,
            0.9906396269798279,
            0.9921688437461853,
            0.9840137958526611,
            0.9861109852790833,
            0.9891000390052795,
            0.9862915873527527,
            0.9911001324653625,
            0.9935104250907898,
            0.9932131767272949,
            0.9929420351982117,
            0.9931542277336121,
            0.9925255179405212,
            0.9893431663513184
        ]
    },
    "4582": {
        "similarity": 0.9944183826446533,
        "body": "a, b = map(str, input().split())\nif a == b:\n    print('H' if a == 'H' else 'D')\nelse:\n    print('H' if a == 'D' else 'D')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9906360507011414,
            0.9942754507064819,
            0.9926721453666687,
            0.9919521808624268,
            0.9936603903770447,
            0.9937633872032166,
            0.9891030192375183,
            0.9890223145484924,
            0.9906359314918518,
            0.9871968030929565,
            0.9930902719497681,
            0.9872255921363831,
            0.9914854168891907,
            0.9864133596420288,
            0.9930759072303772,
            0.9934200644493103,
            0.9938615560531616,
            0.9930242300033569,
            0.991664707660675,
            0.9944183826446533
        ]
    },
    "4910": {
        "similarity": 0.995969295501709,
        "body": "categories = set()\nfor _ in range(int(input(\"\"))):\n    categories.add(input().lower())\nprint(*sorted([cat for cat in categories if cat not in ['demon', 'darkest demon']]), sep='\\n')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9955837726593018,
            0.9941796064376831,
            0.995969295501709,
            0.9935919046401978,
            0.9955251812934875,
            0.9929568767547607,
            0.9920692443847656,
            0.9944528341293335,
            0.9953240156173706,
            0.9954319000244141,
            0.9958294630050659,
            0.9959496855735779,
            0.9921011924743652,
            0.99260413646698,
            0.9926977753639221,
            0.9946271181106567,
            0.9950360059738159,
            0.9927334189414978,
            0.9958510398864746,
            0.9948128461837769
        ]
    },
    "4323": {
        "similarity": 0.9952911734580994,
        "body": "n, m = map(int, input().split())\na = []\nb = []\nfor _ in range(n):\n    a.append(sum(map(int, input().split())))\nb.append(list(map(int, input().split())) for _ in range(n))[0]\ns = sum(a)\nif s > m:\n    print(-1)\nelse:\n    res = 0\n    tot = 0\n    for i in sorted((a[i], b[i]) for i in range(n)):\n        if tot + i[0] <= m:\n            tot += i[0]\n        else:\n            res += 1\n            tot = i[0]\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.99350506067276,
            0.9951626658439636,
            0.9944190979003906,
            0.9903435111045837,
            0.9949572682380676,
            0.9879274964332581,
            0.9952911734580994,
            0.99394690990448,
            0.9911938905715942,
            0.994858980178833,
            0.9926163554191589,
            0.9945377707481384,
            0.9932577013969421,
            0.9859443306922913,
            0.9945893883705139,
            0.995286226272583,
            0.9940521121025085,
            0.9950563311576843,
            0.9897657632827759,
            0.9930762052536011
        ]
    },
    "4626": {
        "similarity": 0.9954374432563782,
        "body": "    for _ in range(q):\n        a, b, c = map(int, input().split())\n        print(min(abs(a - b) + abs(a - c), abs(b - c)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911471009254456,
            0.9889574646949768,
            0.9949192404747009,
            0.9952940940856934,
            0.9944972991943359,
            0.9937422871589661,
            0.9947845339775085,
            0.9933867454528809,
            0.9949958324432373,
            0.9954374432563782,
            0.9945330619812012,
            0.9945665001869202,
            0.9893807172775269,
            0.9918214678764343,
            0.9931954145431519,
            0.9944972991943359,
            0.9947120547294617,
            0.9938051104545593,
            0.9944867491722107,
            0.9862871766090393
        ]
    },
    "4400": {
        "similarity": 0.9874340891838074,
        "body": "    S = input()\n    return max(map(len, S.split('R'))) - 1 if 'S' in S else 0",
        "result": "failed: testcase 0",
        "similarities": [
            0.9874340891838074,
            0.987339198589325,
            0.984569251537323,
            0.9833486676216125,
            0.97687166929245,
            0.9850975871086121,
            0.9867936968803406,
            0.9857444763183594,
            0.9838793873786926,
            0.9866116046905518,
            0.9857879281044006,
            0.9828369617462158,
            0.9839999675750732,
            0.9843822121620178,
            0.9817904233932495,
            0.982852041721344,
            0.9846559166908264,
            0.9870068430900574,
            0.9866055846214294,
            0.9855768084526062
        ]
    },
    "4794": {
        "similarity": 0.9960981607437134,
        "body": "R, C = map(int, input().split())\nparking_spaces = []\nfor _ in range(R):\n    row = list(input())\n    parking_spaces.append(row)\n\n    total_parking_spaces = [0, 0, 0, 0]\n    for i in range(R):\n        for j in range(C - 1):\n            if parking_spaces[i][j] == '.' and parking_spaces[i][j+1] == '.':\n                for k in range(2):\n                    for l in range(2):\n                        if i+k < R and j+l < C-1 and all(parking_spaces[i+k][j+l] != 'X' for _ in range(4)):\n                            total_parking_spaces[0] += 1\n                            break\n            elif parking_spaces[i][j] == '.':\n                total_parking_spaces[1] += 1\n        for j in range(C-2):\n            if parking_spaces[i][j] == '.' and parking_spaces[i][j+1] == '.' and parking_spaces[i][j+2] == '.':\n                for k in range(2):\n                    for l in range(2):\n                        for m in range(2):\n                            if i+k < R and j+l+m < C-2 and all(parking_spaces[i+k][j+l+m] != 'X' for _ in range(4)):\n                                total_parking_spaces[2] += 1\n                                break\n            elif parking_spaces[i][j] == '.':\n                total_parking_spaces[3] += 1\n    return total_parking_spaces\n\nprint(*count_parking_spaces())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902580976486206,
            0.9954185485839844,
            0.99138343334198,
            0.9949606657028198,
            0.9960981607437134,
            0.993631899356842,
            0.9930582642555237,
            0.9930558800697327,
            0.9932504892349243,
            0.9936598539352417,
            0.9955281615257263,
            0.9955933094024658,
            0.9933255910873413,
            0.9956353902816772,
            0.9955278038978577,
            0.9940426349639893,
            0.9937111735343933,
            0.9941149353981018,
            0.9958490133285522,
            0.993630051612854
        ]
    },
    "4096": {
        "similarity": 0.9957717061042786,
        "body": "n, m = map(int, input().split())\na = list(map(int, input().split()))\ndays = 0\nwritten_pages = 0\nfor i in range(n):\n    written_pages += a[i]\n    while written_pages > m:\n        written_pages -= max(0, written_pages - m)\n        days += 1\nif written_pages < m:\n    print(-1)\nelse:\n    print(days)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925265908241272,
            0.9904958605766296,
            0.9957574605941772,
            0.9954935312271118,
            0.9948281049728394,
            0.9948195219039917,
            0.9913761019706726,
            0.9941133260726929,
            0.9919219017028809,
            0.995579183101654,
            0.9928733706474304,
            0.9957717061042786,
            0.9898929595947266,
            0.9934360980987549,
            0.9940534234046936,
            0.9946070313453674,
            0.995395839214325,
            0.9947149157524109,
            0.9956064820289612,
            0.9954635500907898
        ]
    },
    "4530": {
        "similarity": 0.9964978098869324,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        skills = list(map(int, input().split()))\n        unique_skills = set(skills)\n        same_skills = None\n        for skill in unique_skills:\n            count = skills.count(skill)\n            if count > 0 and (same_skills is None or count > len(same_skills)):\n                same_skills = [skill] * count\n        x = min(len(unique_skills), len(same_skills)) // 2\n        print(x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960712790489197,
            0.9914493560791016,
            0.9956175088882446,
            0.9952684640884399,
            0.991961658000946,
            0.9946397542953491,
            0.9942815899848938,
            0.9943291544914246,
            0.9964978098869324,
            0.9874428510665894,
            0.9928821921348572,
            0.9947893023490906,
            0.9952785968780518,
            0.9947389364242554,
            0.9961987733840942,
            0.9927335977554321,
            0.9959630370140076,
            0.9961962699890137,
            0.995813250541687,
            0.9907755851745605
        ]
    },
    "4724": {
        "similarity": 0.9974441528320312,
        "body": "R, G = map(int, input().split())\nprint((G + R) / 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947049021720886,
            0.9974441528320312,
            0.9932090640068054,
            0.9947049021720886,
            0.9952143430709839,
            0.9974441528320312,
            0.9974441528320312,
            0.9952210187911987,
            0.9974441528320312,
            0.9967466592788696,
            0.9949659109115601,
            0.9974441528320312,
            0.9974441528320312,
            0.9974441528320312,
            0.9969995617866516,
            0.9974441528320312,
            0.996768057346344,
            0.9974441528320312,
            0.9974441528320312,
            0.9947049021720886
        ]
    },
    "4276": {
        "similarity": 0.9961580038070679,
        "body": "n, t = map(int, input().split())\ncosts = []\nfor _ in range(n):\n    costs.append(list(map(int, input().split())))\ncosts.sort()\nfor cost, time in costs:\n    if time <= t:\n        print(cost)\n        break\nelse:\n    print('TLE')",
        "result": "passed",
        "similarities": [
            0.9949457049369812,
            0.9910752177238464,
            0.9900642037391663,
            0.9947349429130554,
            0.9959526062011719,
            0.9942155480384827,
            0.9953698515892029,
            0.9921820759773254,
            0.9956938028335571,
            0.9959008097648621,
            0.9938501119613647,
            0.9941739439964294,
            0.9960036873817444,
            0.9940197467803955,
            0.9899901151657104,
            0.9949132204055786,
            0.9951372742652893,
            0.9956938028335571,
            0.9961580038070679,
            0.9938016533851624
        ]
    },
    "4708": {
        "similarity": 0.9954986572265625,
        "body": "N, K, X, Y = map(int, input().split())\nprint(N * min(K, N) * X + max(0, N - K) * Y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951168894767761,
            0.9954986572265625,
            0.9908689260482788,
            0.9913527965545654,
            0.9914761781692505,
            0.9918674826622009,
            0.9926905632019043,
            0.9917176961898804,
            0.9920220971107483,
            0.9930874705314636,
            0.9918164610862732,
            0.9943265318870544,
            0.9951541423797607,
            0.9950862526893616,
            0.9915708303451538,
            0.9920108318328857,
            0.9951168894767761,
            0.9951168894767761,
            0.9917526245117188,
            0.9953846335411072
        ]
    },
    "4396": {
        "similarity": 0.9983109831809998,
        "body": "    N = int(input())\n    total = 0\n    for _ in range(N):\n        x, u = map(str.split, [input().split()])\n        if u[1] == 'BTC':\n            total += float(x[0]) * 380000.0\n        else:\n            total += float(x[0])\n    print(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9983109831809998,
            0.9981163740158081,
            0.9982422590255737,
            0.9982422590255737,
            0.9967271685600281,
            0.9974410533905029,
            0.9974870085716248,
            0.9983071684837341,
            0.9983109831809998,
            0.9983023405075073,
            0.9885753989219666,
            0.9978570342063904,
            0.9920148253440857,
            0.9982644319534302,
            0.9983072876930237,
            0.9975519776344299,
            0.9966342449188232,
            0.9979733824729919,
            0.9983072876930237,
            0.9965180158615112
        ]
    },
    "4155": {
        "similarity": 0.9954544901847839,
        "body": "    n = int(input())\n    h = list(map(int, input().split()))\n    res = 0\n    prev = 0\n    for i in range(1, n):\n        diff = abs(h[i] - h[i-1])\n        res += diff\n        prev = h[i]\n    print(res)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9944374561309814,
            0.9950180053710938,
            0.9954384565353394,
            0.9918909668922424,
            0.9930601716041565,
            0.9938782453536987,
            0.9954544901847839,
            0.9892075061798096,
            0.9932842254638672,
            0.9935018420219421,
            0.9944833517074585,
            0.9896391034126282,
            0.9947221875190735,
            0.9924255013465881,
            0.9931398630142212,
            0.9942221641540527,
            0.9927705526351929,
            0.9947839379310608,
            0.9952103495597839,
            0.9871854186058044
        ]
    },
    "4557": {
        "similarity": 0.9975700378417969,
        "body": "    A, B, X = map(int, input().split())\n    if min(A, B) <= X <= A:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9852434396743774,
            0.9974417686462402,
            0.997322678565979,
            0.993510901927948,
            0.9973737597465515,
            0.9975700378417969,
            0.9967494606971741,
            0.9972167611122131,
            0.996681809425354,
            0.9971833825111389,
            0.9974759817123413,
            0.9975525736808777,
            0.9939809441566467,
            0.9967494606971741,
            0.9967494606971741,
            0.9951978921890259,
            0.9972370862960815,
            0.9974629282951355,
            0.9974191784858704,
            0.9975088238716125
        ]
    },
    "4930": {
        "similarity": 0.9930628538131714,
        "body": "    sentence = input()\n    decoded_sentence = \"\"\n    for char in sentence:\n        if char in 'aeiou':\n            decoded_sentence += char + 'p' + char\n        else:\n            decoded_sentence += char\n    print(decoded_sentence)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9882085919380188,
            0.9893431663513184,
            0.9811053276062012,
            0.9907096028327942,
            0.9877439737319946,
            0.9927684664726257,
            0.9892498850822449,
            0.9925103783607483,
            0.9929733276367188,
            0.9926744103431702,
            0.9896156191825867,
            0.9927727580070496,
            0.9916739463806152,
            0.9924360513687134,
            0.9886430501937866,
            0.9925785064697266,
            0.9930628538131714,
            0.9795247912406921,
            0.9754737019538879,
            0.990761399269104
        ]
    },
    "4715": {
        "similarity": 0.9985869526863098,
        "body": "a, b, c = map(int, input().split())\nprint(len(set([a, b, c])))",
        "result": "passed",
        "similarities": [
            0.9985869526863098,
            0.9985869526863098,
            0.9985869526863098,
            0.997877836227417,
            0.995869517326355,
            0.995869517326355,
            0.9985869526863098,
            0.9985869526863098,
            0.9985869526863098,
            0.9985869526863098,
            0.9985869526863098,
            0.9985869526863098,
            0.9982033967971802,
            0.99713534116745,
            0.995869517326355,
            0.995869517326355,
            0.9966935515403748,
            0.9982033967971802,
            0.9985869526863098,
            0.9982033967971802
        ]
    },
    "4008": {
        "similarity": 0.9966222047805786,
        "body": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nif len(set(a)) < k:\n    print(\"NO\")\nelse:\n    a.sort()\n    for i in range(k-1):\n        if a[i+1] <= a[i]:\n            print(\"YES\")\n            print(*[i+1 if j % (k-i) == 0 else j // (k-i) + 1 for j in range(1, n+1)], sep=' ')\n            break\n    else:\n        print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949702024459839,
            0.9955516457557678,
            0.995225727558136,
            0.9920519590377808,
            0.9953548908233643,
            0.9963776469230652,
            0.9956046938896179,
            0.9937833547592163,
            0.9948999285697937,
            0.989419162273407,
            0.9956120252609253,
            0.994907796382904,
            0.9949589967727661,
            0.9966222047805786,
            0.9960193634033203,
            0.993310809135437,
            0.9951056241989136,
            0.995482325553894,
            0.9965035319328308,
            0.9956196546554565
        ]
    },
    "4257": {
        "similarity": 0.9970167279243469,
        "body": "    A, B = map(int, input().split())\n    print(A * B)",
        "result": "passed",
        "similarities": [
            0.9961393475532532,
            0.9959291219711304,
            0.994452714920044,
            0.9970167279243469,
            0.9959069490432739,
            0.9959291219711304,
            0.9970167279243469,
            0.996139407157898,
            0.9970167279243469,
            0.9929946064949036,
            0.9959069490432739,
            0.996139407157898,
            0.9944526553153992,
            0.9970167279243469,
            0.9938377737998962,
            0.9943320751190186,
            0.9970167279243469,
            0.9939189553260803,
            0.9959069490432739,
            0.9961393475532532
        ]
    },
    "4584": {
        "similarity": 0.9990056753158569,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    subs = [0] * (n + 1)\n    for i in range(2, n + 1):\n        subs[a[i]] += 1\n    for i in range(1, n + 1):\n        print(subs[i])",
        "result": "failed: testcase 0",
        "similarities": [
            0.998266339302063,
            0.9988228678703308,
            0.9990056753158569,
            0.998844563961029,
            0.9985595345497131,
            0.9984654784202576,
            0.9984654784202576,
            0.9987810850143433,
            0.9977720379829407,
            0.9985618591308594,
            0.9987766146659851,
            0.9989883303642273,
            0.9989638328552246,
            0.9983847737312317,
            0.9989050626754761,
            0.9962752461433411,
            0.9984772205352783,
            0.9986341595649719,
            0.9987275004386902,
            0.9989704489707947
        ]
    },
    "4195": {
        "similarity": 0.9951968789100647,
        "body": "D, N = map(int, input().split())\nprint(100 * (N - 1) + D)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947128295898438,
            0.9883788228034973,
            0.9951968789100647,
            0.9792990684509277,
            0.9938002228736877,
            0.9934689402580261,
            0.9928050637245178,
            0.9928050637245178,
            0.9924448728561401,
            0.9928126335144043,
            0.9935340881347656,
            0.9928050637245178,
            0.9928050637245178,
            0.9928050637245178,
            0.9944021105766296,
            0.9928050637245178,
            0.9943207502365112,
            0.9923057556152344,
            0.9933361411094666,
            0.9942964315414429
        ]
    },
    "4176": {
        "similarity": 0.9939593076705933,
        "body": "    A, B = map(int, input().split())\n    return max(A, B) + 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936049580574036,
            0.9935194253921509,
            0.9938423037528992,
            0.9910534620285034,
            0.9939593076705933,
            0.9912009239196777,
            0.9935704469680786,
            0.9766421914100647,
            0.9904400706291199,
            0.9923654198646545,
            0.9895541667938232,
            0.9879622459411621,
            0.9855642914772034,
            0.9789500832557678,
            0.991481602191925,
            0.9879688620567322,
            0.9937214255332947,
            0.9923461079597473,
            0.9915171265602112,
            0.9909493327140808
        ]
    },
    "4166": {
        "similarity": 0.9957873821258545,
        "body": "    N, M = map(int, input().split())\n    num = \"\"\n    for i in range(M):\n        s, c = map(int, input().split())\n        num += str(c) * (s - 1) + str(c)\n    print(min(int(num.ljust(N, '0')[:N], 10) if N < len(num.ljust(N, '0')) else int(num, 10)) or -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947326183319092,
            0.9949013590812683,
            0.9930015206336975,
            0.9948027729988098,
            0.9937505125999451,
            0.9886685609817505,
            0.9898707866668701,
            0.9954248070716858,
            0.9946449995040894,
            0.9940492510795593,
            0.992165207862854,
            0.9936099052429199,
            0.9938608407974243,
            0.993047833442688,
            0.9928320050239563,
            0.9957873821258545,
            0.990889310836792,
            0.9876024127006531,
            0.9938185811042786,
            0.9919983744621277
        ]
    },
    "4827": {
        "similarity": 0.9919751882553101,
        "body": "    n = int(input())\n    words = [input().strip() for _ in range(n-1)]\n    num_word = input().strip()\n    total_letters = sum(len(word) for word in words)\n    if 'thirty' not in words and 'twenty' not in words:\n        num_name = str(total_letters).replace('1', 'one').replace('2', 'two').replace('3', 'three').replace('4', 'four').replace('5', 'five').replace('6', 'six').replace('7', 'seven').replace('8', 'eight').replace('9', 'nine').replace('10', 'ten')\n    elif 'thirty' in words:\n        num_name = 'thirty'\n    else:\n        for i, word in enumerate(words):\n            if 'twenty' in word:\n                if i == 0: \n                    num_name = 'twenty'\n                else:\n                    return f\"{words[0]} {num_word} {' '.join(words[i+1:])}\"\n    return f\"{words[0]} {num_word} {' '.join(words[1:])} {num_name}\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906710386276245,
            0.9740807414054871,
            0.9905694723129272,
            0.9865673780441284,
            0.9906029105186462,
            0.9899497628211975,
            0.9905985593795776,
            0.9885668754577637,
            0.9811634421348572,
            0.9832804799079895,
            0.9910617470741272,
            0.9914048910140991,
            0.9900754690170288,
            0.9895449280738831,
            0.9896870851516724,
            0.9876905083656311,
            0.9907917380332947,
            0.9919751882553101,
            0.9763197898864746,
            0.99102783203125
        ]
    },
    "4871": {
        "similarity": 0.9966499209403992,
        "body": "n = int(input())\nscores = [int(input()) for _ in range(n)]\ntotal_score = sum(s * 4**i / 5**i for i, s in enumerate(sorted(scores, reverse=True)))\naverage_new_group_scores = sum((s * (1-4**k/5**k) for k, s in enumerate(sorted(scores, reverse=True))) for _ in range(n)) / n\nprint(total_score)\nprint(average_new_group_scores)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966499209403992,
            0.9932299256324768,
            0.9956762194633484,
            0.9916780591011047,
            0.9948012828826904,
            0.9953237771987915,
            0.9877449870109558,
            0.9952439069747925,
            0.9901601076126099,
            0.9951916933059692,
            0.9944650530815125,
            0.9960212707519531,
            0.9958086609840393,
            0.9961100220680237,
            0.9952894449234009,
            0.9946764707565308,
            0.9961273074150085,
            0.9962174296379089,
            0.9960648417472839,
            0.9958474040031433
        ]
    },
    "4148": {
        "similarity": 0.9956430196762085,
        "body": "    N = int(input())\n    S = input()\n    res = ''\n    for c in S:\n        res += chr((ord(c) - ord('A') + N) % 26 + ord('A'))\n    print(res)",
        "result": "passed",
        "similarities": [
            0.990728497505188,
            0.9906570315361023,
            0.9907848834991455,
            0.9944054484367371,
            0.9948433637619019,
            0.9871135354042053,
            0.9902091026306152,
            0.9908866882324219,
            0.9947289228439331,
            0.9951928853988647,
            0.9930664896965027,
            0.9956430196762085,
            0.9951332807540894,
            0.9935296773910522,
            0.988667368888855,
            0.9935057759284973,
            0.9951380491256714,
            0.9926297068595886,
            0.9940826892852783,
            0.995329737663269
        ]
    },
    "4316": {
        "similarity": 0.9944514036178589,
        "body": "    s = input()\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    unique_chars = len(count)\n    if unique_chars == 2:\n        print('Yes' if sum(value==2 for value in count.values()) == 2 else 'No')",
        "result": "failed: testcase 1",
        "similarities": [
            0.991129457950592,
            0.9943841695785522,
            0.9931526184082031,
            0.9938995242118835,
            0.9919748902320862,
            0.9944514036178589,
            0.981281578540802,
            0.9915287494659424,
            0.9943163990974426,
            0.9890895485877991,
            0.9883217215538025,
            0.9907835721969604,
            0.993380606174469,
            0.9917070269584656,
            0.992510974407196,
            0.9934325218200684,
            0.9937742352485657,
            0.9933791160583496,
            0.9905670881271362,
            0.992743968963623
        ]
    },
    "4397": {
        "similarity": 0.9964229464530945,
        "body": "N, i = map(int, input().split())\nprint(N - i + 1)",
        "result": "passed",
        "similarities": [
            0.995275616645813,
            0.9901029467582703,
            0.9958610534667969,
            0.9901029467582703,
            0.9958224892616272,
            0.9964229464530945,
            0.9890097379684448,
            0.9964229464530945,
            0.994623064994812,
            0.9964229464530945,
            0.9964229464530945,
            0.9952017068862915,
            0.9960368275642395,
            0.9950340986251831,
            0.9951784014701843,
            0.9964229464530945,
            0.9960368275642395,
            0.9952017068862915,
            0.9948664307594299,
            0.9950340986251831
        ]
    },
    "4180": {
        "similarity": 0.9958466291427612,
        "body": "    N = int(input())\n    changecnt = N // 1000\n    change = N - changecnt * 1000\n    print(change)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939665794372559,
            0.9925971627235413,
            0.9945704936981201,
            0.9949141144752502,
            0.9958466291427612,
            0.9913102984428406,
            0.9956775307655334,
            0.9945253133773804,
            0.9951694011688232,
            0.9909692406654358,
            0.9954994916915894,
            0.9927514791488647,
            0.9940683245658875,
            0.9945704936981201,
            0.9944930076599121,
            0.9935434460639954,
            0.9942662119865417,
            0.9928980469703674,
            0.9943761229515076,
            0.9955294728279114
        ]
    },
    "4907": {
        "similarity": 0.9979723691940308,
        "body": "n = int(input())\nif n % 2 == 0:\n    print(\"Bob\")\n    print(n//2)\nelse:\n    print(\"Alice\")\n    print(1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979723691940308,
            0.994239091873169,
            0.9958257079124451,
            0.9976382851600647,
            0.9979723691940308,
            0.9906014204025269,
            0.9966467022895813,
            0.9962055087089539,
            0.9950675964355469,
            0.9979723691940308,
            0.9979723691940308,
            0.9979723691940308,
            0.9966467022895813,
            0.9979723691940308,
            0.9959331154823303,
            0.9951466917991638,
            0.997149646282196,
            0.9979343414306641,
            0.9964797496795654,
            0.9968741536140442
        ]
    },
    "4839": {
        "similarity": 0.9947623014450073,
        "body": "    n = int(input())\n    cans = list(map(int, input().split()))\n    cans.sort()\n    balloons = [c for c in range(1, n+1)]\n    max_f = 0\n    for i in range(n):\n        if balloons[i] > cans[i]:\n            return \"impossible\"\n        max_f += min(cans[i], balloons[i]) / balloons[i]\n    return str(max_f)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909723997116089,
            0.9930299520492554,
            0.9938681721687317,
            0.9922274351119995,
            0.9927147626876831,
            0.9919911623001099,
            0.9796348214149475,
            0.9947623014450073,
            0.9940890073776245,
            0.9946160912513733,
            0.994096040725708,
            0.9928677082061768,
            0.9936699271202087,
            0.9921967387199402,
            0.9930630922317505,
            0.98699951171875,
            0.9873155355453491,
            0.9923641085624695,
            0.9907308220863342,
            0.9916208982467651
        ]
    },
    "4665": {
        "similarity": 0.9940806031227112,
        "body": "namedtuple = namedtuple('Student', 'ID MARKS NAME CLASS')\n\ntotal_students = int(input())\ncolumn_names = [value.strip().upper() for value in input().split()]\n\nstudents = []\nfor _ in range(total_students):\n    line = list(map(str, input().split()))\n    students.append(namedtuple(column_names[0], column_names)(*line))\n\naverage_marks = sum(int(student.MARKS) for student in students) / total_students\nprint(f'{average_marks:.2f}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936504364013672,
            0.9938355684280396,
            0.9938822388648987,
            0.9923126101493835,
            0.9935724139213562,
            0.9940806031227112,
            0.991733729839325,
            0.9935894012451172,
            0.9917997121810913,
            0.9933594465255737,
            0.993330180644989,
            0.9936808347702026,
            0.9923149943351746,
            0.9647908806800842,
            0.9907279014587402,
            0.9939470887184143,
            0.9934160113334656,
            0.9903326630592346,
            0.9932281970977783,
            0.9926890134811401
        ]
    },
    "4785": {
        "similarity": 0.9972083568572998,
        "body": "    s = input()\n    if 'ss' in s:\n        print('hiss')\n    else:\n        print('no hiss')",
        "result": "passed",
        "similarities": [
            0.99312824010849,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998,
            0.9931053519248962,
            0.9972083568572998,
            0.9931053519248962,
            0.9930869936943054,
            0.9909406900405884,
            0.9972083568572998,
            0.9930869936943054,
            0.9972083568572998,
            0.9941014647483826,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998,
            0.9972083568572998
        ]
    },
    "4272": {
        "similarity": 0.9948660135269165,
        "body": "n = int(input())\ns = input()\ncount = 0\nfor i in range(n-2):\n    if s[i:i+3] == 'ABC':\n        count += 1\nprint(count)",
        "result": "passed",
        "similarities": [
            0.9928500652313232,
            0.9909912943840027,
            0.9928499460220337,
            0.9948660135269165,
            0.9917415976524353,
            0.9929181933403015,
            0.9920337200164795,
            0.9948660135269165,
            0.9913995862007141,
            0.9905896782875061,
            0.9910185933113098,
            0.99301677942276,
            0.9941941499710083,
            0.9888741374015808,
            0.9932196736335754,
            0.99301677942276,
            0.9944773316383362,
            0.9932892322540283,
            0.992877185344696,
            0.992877185344696
        ]
    },
    "4092": {
        "similarity": 0.9956270456314087,
        "body": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\ncur_sum = 0\nfor i in range(n):\n    cur_sum += a[i]\n    if cur_sum == 0:\n        ans += 1\n    elif cur_sum < 0:\n        while cur_sum < 0 and i < n - 1:\n            cur_sum += 1\n            ans += 1\nprint(ans)",
        "result": "timed out",
        "similarities": [
            0.9938283562660217,
            0.9942637085914612,
            0.9956270456314087,
            0.9940191507339478,
            0.9877189993858337,
            0.9943334460258484,
            0.9927802681922913,
            0.9940035939216614,
            0.9955741763114929,
            0.9945049285888672,
            0.9936791658401489,
            0.9938607811927795,
            0.9948862195014954,
            0.9933748841285706,
            0.992411196231842,
            0.994849443435669,
            0.9943907856941223,
            0.99532550573349,
            0.9896044731140137,
            0.9950852990150452
        ]
    },
    "4023": {
        "similarity": 0.9945738911628723,
        "body": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nmax_height = max(a)\nfor i in range(n):\n    b[i] = max_height - (a[i] - 1) // 2\nif len(set(b)) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934564828872681,
            0.9944113492965698,
            0.9850401878356934,
            0.9944113492965698,
            0.9928163290023804,
            0.9928131103515625,
            0.9942920207977295,
            0.9938639402389526,
            0.9907506704330444,
            0.9944113492965698,
            0.9940376281738281,
            0.99425208568573,
            0.9745184183120728,
            0.9919506907463074,
            0.9926477074623108,
            0.9897536039352417,
            0.9919943809509277,
            0.9927173256874084,
            0.9931783080101013,
            0.9945738911628723
        ]
    },
    "4160": {
        "similarity": 0.9968302845954895,
        "body": "    X = int(input())\n    y = 0\n    balance = 100\n    while balance < X:\n        y += 1\n        balance += balance / 100\n    print(y)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9957593679428101,
            0.9961774945259094,
            0.9966869354248047,
            0.9958736300468445,
            0.9943317770957947,
            0.9957088828086853,
            0.9948548078536987,
            0.9957617521286011,
            0.9956956505775452,
            0.9955452680587769,
            0.9963324666023254,
            0.9957872033119202,
            0.9948224425315857,
            0.9954677224159241,
            0.9965851306915283,
            0.9965053200721741,
            0.9966248869895935,
            0.9959481954574585,
            0.9922808408737183,
            0.9968302845954895
        ]
    },
    "4815": {
        "similarity": 0.9969283938407898,
        "body": "    n, p, m = map(int, input().split())\n    scores = {}\n    for _ in range(n):\n        name = input()\n    for _ in range(m):\n        name, points = input().split()\n        scores[name] = scores.get(name, 0) + [1,2,3].index(int(points))\n    winners = sorted([name for name, score in scores.items() if score >= p])\n    if winners:\n        print(f\"{winners[0]} wins!\")\n    else:\n        print(\"No winner!\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968665242195129,
            0.9961276650428772,
            0.995083749294281,
            0.9951986074447632,
            0.9968206286430359,
            0.9947684407234192,
            0.9926277995109558,
            0.995908260345459,
            0.9950093626976013,
            0.994920015335083,
            0.9959245324134827,
            0.9952509999275208,
            0.9957769513130188,
            0.9961439371109009,
            0.9966810941696167,
            0.9928361773490906,
            0.9954637289047241,
            0.9962818026542664,
            0.9965981841087341,
            0.9969283938407898
        ]
    },
    "4514": {
        "similarity": 0.9970943927764893,
        "body": "    n, q = map(int, input().split())\n    parent = [0] + list(map(int, input().split()))\n    for _ in range(q):\n        u, k = map(int, input().split())\n        visited = [False] * (n + 1)\n        res = []\n            visited[u] = True\n            if len(res) == k - 1:\n                return\n            while not visited[parent[u]]:\n                visited[parent[u]] = True\n                u = parent[u]\n            res.append(u)\n        for i in range(2, n + 1):\n            if not visited[i]:\n                dfs(i)\n        print(res[k - 1] if len(res) >= k else -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966585040092468,
            0.9965086579322815,
            0.9970943927764893,
            0.9950838685035706,
            0.9953651428222656,
            0.9935804605484009,
            0.996487557888031,
            0.9958046674728394,
            0.994982898235321,
            0.9962049722671509,
            0.9963639974594116,
            0.996439516544342,
            0.9964897632598877,
            0.9954981803894043,
            0.9966603517532349,
            0.9942402243614197,
            0.9948978424072266,
            0.9957331418991089,
            0.9967235922813416,
            0.9959034323692322
        ]
    },
    "4585": {
        "similarity": 0.9913193583488464,
        "body": "    X = int(input())\n    if X % 2 == 0: \n        return X // 2\n    else:\n        return (X + 1) // 2",
        "result": "failed: testcase 0",
        "similarities": [
            0.9879953265190125,
            0.9843285083770752,
            0.9894202351570129,
            0.9882603883743286,
            0.9875498414039612,
            0.9758602976799011,
            0.9803277850151062,
            0.9758602976799011,
            0.980329692363739,
            0.9894563555717468,
            0.9894033670425415,
            0.9887815713882446,
            0.9913193583488464,
            0.9903624653816223,
            0.9819921255111694,
            0.9868677854537964,
            0.9893973469734192,
            0.9838688373565674,
            0.9894686341285706,
            0.9816834330558777
        ]
    },
    "4781": {
        "similarity": 0.9959347248077393,
        "body": "k = int(input())\nbox_position = k - 1\nfor _ in range(int(input())): \n    t, z = input().split()\n    t = int(t)\n    if z == 'T':\n        box_position = (box_position + 1) % 8\nprint(box_position + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939673542976379,
            0.9948218464851379,
            0.9954097270965576,
            0.9952630400657654,
            0.9913324117660522,
            0.9954144358634949,
            0.9959347248077393,
            0.9954254627227783,
            0.9924131631851196,
            0.9942248463630676,
            0.9949017763137817,
            0.9929837584495544,
            0.9901171326637268,
            0.9911932945251465,
            0.9940829277038574,
            0.9921402335166931,
            0.9939267039299011,
            0.9935710430145264,
            0.9957839846611023,
            0.9941981434822083
        ]
    },
    "4551": {
        "similarity": 0.9979493021965027,
        "body": "A = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nif A + B > C + D: \n    print(\"Left\")\nelif A + B == C + D:\n    print(\"Balanced\")\nelse:\n    print(\"Right\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9893937706947327,
            0.9979172945022583,
            0.9969699382781982,
            0.997025728225708,
            0.997025728225708,
            0.9965193867683411,
            0.9976193308830261,
            0.9936589002609253,
            0.997849702835083,
            0.9977603554725647,
            0.9951431155204773,
            0.9977089762687683,
            0.9977603554725647,
            0.9979493021965027,
            0.9979059100151062,
            0.9975985288619995,
            0.9947102069854736,
            0.9977603554725647,
            0.9978957176208496,
            0.9978957176208496
        ]
    },
    "4345": {
        "similarity": 0.9974973797798157,
        "body": "n = int(input())\na = list(map(int, input().split()))\nincreasing = []\ndecreasing = []\n\nfor i in range(n):\n    if not increasing or a[i] > increasing[-1]:\n        increasing.append(a[i])\n    elif not decreasing or a[i] < decreasing[-1]:\n        decreasing.append(a[i])\n\nif len(increasing) + len(decreasing) != n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(n):\n        if a[i] in increasing:\n            print(0, end=' ')\n        else:\n            print(1, end=' ')\n    print()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969436526298523,
            0.9974973797798157,
            0.9971473217010498,
            0.9971734881401062,
            0.9955601096153259,
            0.9927982687950134,
            0.9971393942832947,
            0.9913448691368103,
            0.995100736618042,
            0.9962774515151978,
            0.9957255125045776,
            0.9958996176719666,
            0.9974576830863953,
            0.9960728883743286,
            0.9967922568321228,
            0.9972407817840576,
            0.9972190856933594,
            0.9964070916175842,
            0.9973917603492737,
            0.9969180226325989
        ]
    },
    "4075": {
        "similarity": 0.9963212609291077,
        "body": "    N, M = map(int, input().split())\n    switches = []\n    for _ in range(M):\n        k, *switches_in_bulb = map(int, input().split())\n        switches.append((k, switches_in_bulb))\n    p = list(map(int, input().split()))\n    count = 0\n    for state in (1, -1): \n        if all(sum(switches[i][1] == j and i < k for i, (k, j) in enumerate(switches)) % 2 == p[i] for i in range(M)):\n            count += 1\n    print(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936213493347168,
            0.9956013560295105,
            0.9935218691825867,
            0.9959313273429871,
            0.9959504008293152,
            0.9961321949958801,
            0.9945614337921143,
            0.9956496357917786,
            0.9941771626472473,
            0.9960393309593201,
            0.9939984083175659,
            0.993916392326355,
            0.9953798055648804,
            0.9949365258216858,
            0.9948003888130188,
            0.9957259297370911,
            0.9955710172653198,
            0.9941450357437134,
            0.9911353588104248,
            0.9963212609291077
        ]
    },
    "4408": {
        "similarity": 0.9960755705833435,
        "body": "n, k = map(int, input().split())\ncards = list(map(int, input().split()))\nfavors = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ntotal_joy = 0\ncard_counts = [0] * (k + 1)\nfor card in cards:\n    card_counts[card % k] += 1\n\nfor i in range(n):\n    joy = sum([min(card_counts[j], favors[i]) * h[j] for j in range(k)])\n    total_joy = max(total_joy, joy)\n\nprint(total_joy)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955769777297974,
            0.9796697497367859,
            0.9957076907157898,
            0.9949478507041931,
            0.9955312013626099,
            0.9960755705833435,
            0.9936072826385498,
            0.9948065876960754,
            0.994583010673523,
            0.9955241680145264,
            0.9948554635047913,
            0.990488588809967,
            0.9908236265182495,
            0.992807924747467,
            0.9955388903617859,
            0.9938320517539978,
            0.9954603314399719,
            0.9959425926208496,
            0.9916375875473022,
            0.9930393695831299
        ]
    },
    "4282": {
        "similarity": 0.9951328635215759,
        "body": "n = int(input())\np = [0]*n\nfor i in range(n):\n    a, b = map(int, input().split())\n    for j in range(2):\n        if p[int(a-1)] == 0:\n            p[i] = a\n            break\n        elif p[int(b-1)] == 0:\n            p[i] = b\n            break\nprint(' '.join(map(str, p)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937769174575806,
            0.9944273233413696,
            0.993536114692688,
            0.9905290007591248,
            0.9909380078315735,
            0.9931376576423645,
            0.992304265499115,
            0.9932091236114502,
            0.9951328635215759,
            0.9945520162582397,
            0.9931727051734924,
            0.992398202419281,
            0.9944103956222534,
            0.9928390979766846,
            0.9899172782897949,
            0.9937007427215576,
            0.993137538433075,
            0.9938690066337585,
            0.9900546669960022,
            0.9927594065666199
        ]
    },
    "4331": {
        "similarity": 0.9975007772445679,
        "body": "    N = int(input())\n    if '7' in str(N):\n        print('Yes')\n    else:\n        print('No')",
        "result": "passed",
        "similarities": [
            0.9975007772445679,
            0.993787944316864,
            0.9950466156005859,
            0.9949578046798706,
            0.9975007772445679,
            0.9974332451820374,
            0.9944941997528076,
            0.9931547045707703,
            0.9964772462844849,
            0.9974182844161987,
            0.9944507479667664,
            0.9975007772445679,
            0.9975007772445679,
            0.9974332451820374,
            0.996962308883667,
            0.9975007772445679,
            0.996141254901886,
            0.9975007772445679,
            0.9937647581100464,
            0.9974852204322815
        ]
    },
    "4550": {
        "similarity": 0.9975870847702026,
        "body": "    a, b, c = map(int, input().split())\n    if (a + b) % 2 == ((c + b) % 2):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9963980317115784,
            0.9972476959228516,
            0.9974414706230164,
            0.997329831123352,
            0.9966458678245544,
            0.9955783486366272,
            0.99736487865448,
            0.9973178505897522,
            0.9973626732826233,
            0.99502032995224,
            0.9963980317115784,
            0.9973626732826233,
            0.9970463514328003,
            0.9973880648612976,
            0.9883717894554138,
            0.997524082660675,
            0.9883717894554138,
            0.9973920583724976,
            0.9972730875015259,
            0.9975870847702026
        ]
    },
    "4271": {
        "similarity": 0.9958875775337219,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = [0] + list(map(int, input().split()))[:-1]\nprint(sum(B[i] + C[i] for i in range(N)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9887052178382874,
            0.991187572479248,
            0.9956846833229065,
            0.9945307374000549,
            0.9957592487335205,
            0.9958420991897583,
            0.9921081066131592,
            0.9940209984779358,
            0.9958875775337219,
            0.9946272969245911,
            0.9941998720169067,
            0.9943493604660034,
            0.991123378276825,
            0.9955452680587769,
            0.9946280121803284,
            0.9919712543487549,
            0.9868573546409607,
            0.9955309629440308,
            0.9939442873001099,
            0.995263934135437
        ]
    },
    "4848": {
        "similarity": 0.9951434135437012,
        "body": "    for m in range(2, n):\n        if all(i**2 > m*n for i in range(1, int((m*n)**0.5)+1)):\n            return m\n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9870522022247314,
            0.9939099550247192,
            0.9943453073501587,
            0.994663417339325,
            0.9928434491157532,
            0.9924410581588745,
            0.9928094148635864,
            0.9914088845252991,
            0.9925798177719116,
            0.9950970411300659,
            0.9948754906654358,
            0.9946114420890808,
            0.9951434135437012,
            0.9802791476249695,
            0.9928479790687561,
            0.9947213530540466,
            0.993338942527771,
            0.9930301308631897,
            0.9922600984573364,
            0.9932281374931335
        ]
    },
    "4694": {
        "similarity": 0.9961557984352112,
        "body": "    N = int(input())\n    A = list(map(int, input().split()))\n    total_distance = 0\n    for i in range(N):\n        total_distance += sum(abs(a - b) for a, b in zip(A[i:], A[:i+1]))\n    print(min(total_distance))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961557984352112,
            0.9943344593048096,
            0.9959321618080139,
            0.9932854175567627,
            0.9923701882362366,
            0.9939036965370178,
            0.993408203125,
            0.9946727752685547,
            0.9958256483078003,
            0.9942926168441772,
            0.9947639107704163,
            0.9942103028297424,
            0.9934953451156616,
            0.9960222840309143,
            0.996067225933075,
            0.991381824016571,
            0.990559458732605,
            0.9925253987312317,
            0.9961370229721069,
            0.9956786632537842
        ]
    },
    "4213": {
        "similarity": 0.9965242147445679,
        "body": "n = int(input())\nA = [int(x) for x in input().split()]\nprint(max(abs(A[i] - A[j]) for i in range(n) for j in range(i+1, n)))",
        "result": "passed",
        "similarities": [
            0.9963804483413696,
            0.994372546672821,
            0.9911800026893616,
            0.9963804483413696,
            0.9933692812919617,
            0.9963804483413696,
            0.9963804483413696,
            0.9960542917251587,
            0.9905583262443542,
            0.9931247234344482,
            0.9963619112968445,
            0.9962592124938965,
            0.9950045347213745,
            0.992438793182373,
            0.9965242147445679,
            0.9905583262443542,
            0.9959946870803833,
            0.9961559176445007,
            0.9963619112968445,
            0.9962819814682007
        ]
    },
    "4471": {
        "similarity": 0.9969709515571594,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        while any(a):\n            a = [i-1 if i > 0 else 2 for i in a]\n            if all(i == 0 for i in a):\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")",
        "result": "timed out",
        "similarities": [
            0.9940025210380554,
            0.9932108521461487,
            0.9944450259208679,
            0.9960344433784485,
            0.9960150718688965,
            0.9946724772453308,
            0.9937888979911804,
            0.9935949444770813,
            0.9963294863700867,
            0.9962674379348755,
            0.9948897361755371,
            0.9936439990997314,
            0.9927436709403992,
            0.9956398010253906,
            0.9969709515571594,
            0.9955729246139526,
            0.9962182641029358,
            0.9961670637130737,
            0.99664705991745,
            0.994390070438385
        ]
    },
    "4802": {
        "similarity": 0.9970552325248718,
        "body": "    h, m = map(int, input().split())\n    new_m = (m - 45) % 60\n    new_h = (h - ((m-45)//60)) % 24\n    print(f\"{new_h} {new_m}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965142011642456,
            0.9949743151664734,
            0.9970169067382812,
            0.9965623617172241,
            0.9960005879402161,
            0.9970552325248718,
            0.9963974356651306,
            0.9963653087615967,
            0.9904240965843201,
            0.9959706664085388,
            0.9957254528999329,
            0.9961766600608826,
            0.9970169067382812,
            0.9970169067382812,
            0.9961511492729187,
            0.9968488812446594,
            0.9944943785667419,
            0.9963197112083435,
            0.9964630007743835,
            0.9956512451171875
        ]
    },
    "4890": {
        "similarity": 0.9958038330078125,
        "body": "n, m, s, d = map(int, input().split())\nc = list(map(int, input().split()))\nf = [0] * s\nfor i in range(m):\n    if sum(min(cj, d) for cj in c) >= min(c):\n        f[c.index(max(c))] += 1\n        c[c.index(max(c))] -= 1\n    else:\n        break\nprint(*[n//d if n%d > 0 else n//d + (i!=s-1) for i,n in enumerate(f)])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958038330078125,
            0.9955615997314453,
            0.9935992360115051,
            0.9941079020500183,
            0.9939061999320984,
            0.9953469038009644,
            0.9957562685012817,
            0.9942165017127991,
            0.9928141236305237,
            0.991629958152771,
            0.9925089478492737,
            0.9950057864189148,
            0.9932166934013367,
            0.9947078227996826,
            0.9953142404556274,
            0.9926619529724121,
            0.993965744972229,
            0.9951300621032715,
            0.9889639616012573,
            0.9886170625686646
        ]
    },
    "4286": {
        "similarity": 0.9963232278823853,
        "body": "n, m = map(int, input().split())\na = list(map(int, input().split()))\noffers = [list(map(int, input().split())) for _ in range(m)]\n\n    parent = list(range(n))\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n        root_x = find(x)\n        root_y = find(y)\n        if root_x < root_y:\n            parent[root_x] = root_y\n        else:\n            parent[root_y] = root_x\n    \n    for x, y, w in offers:\n        union(x-1, y-1)\n    \n    connected_components = set()\n    for i in range(n):\n        parent[i]\n    \n    return sum(a) - max(connected_components)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961970448493958,
            0.993719220161438,
            0.9947241544723511,
            0.9958431124687195,
            0.9927799701690674,
            0.9946538805961609,
            0.9948298931121826,
            0.9962304830551147,
            0.9940181374549866,
            0.9944691061973572,
            0.9937798380851746,
            0.9932745695114136,
            0.9938195943832397,
            0.9958217144012451,
            0.9939783811569214,
            0.9959706664085388,
            0.994973361492157,
            0.9963232278823853,
            0.9953609108924866,
            0.9955272674560547
        ]
    },
    "4713": {
        "similarity": 0.9955040812492371,
        "body": "x = int(input())\nS = input()\nmax_x = 0\nfor i in S:\n    if i == 'I':\n        x += 1\n    else:\n        x -= 1\n    max_x = max(max_x, x)\nprint(max_x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935462474822998,
            0.9948645234107971,
            0.9953155517578125,
            0.9955040812492371,
            0.9954575300216675,
            0.9954794645309448,
            0.9948819875717163,
            0.99493008852005,
            0.9953733682632446,
            0.9898518919944763,
            0.9954794645309448,
            0.9954717755317688,
            0.9919390678405762,
            0.9887074828147888,
            0.9941315054893494,
            0.9953688383102417,
            0.9919829368591309,
            0.993516743183136,
            0.9954617023468018,
            0.9954205751419067
        ]
    },
    "4698": {
        "similarity": 0.9961082935333252,
        "body": "n = int(input())\nt_times = list(map(int, input().split()))\nm = int(input())\nstimuli = []\nfor _ in range(m):\n    p, x = map(int, input().split())\n    stimuli.append((p-1, x))\nstimuli.sort()\nans = []\nfor t in t_times:\n    total_time = 0\n    for i, (problem, stim) in enumerate(stimuli):\n        if problem == len(t_times):\n            break\n        total_time += min(t[problem-1], stim)\n    ans.append(total_time)\n\nprint('\\n'.join(map(str, ans)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953013062477112,
            0.9933822154998779,
            0.9956107139587402,
            0.9934821128845215,
            0.9941617250442505,
            0.9937220215797424,
            0.9937567710876465,
            0.9933602213859558,
            0.9952219724655151,
            0.9947343468666077,
            0.9922420978546143,
            0.9945047497749329,
            0.9945389628410339,
            0.9940502643585205,
            0.9908128976821899,
            0.9937531352043152,
            0.9943370819091797,
            0.9961082935333252,
            0.9952527284622192,
            0.9937888979911804
        ]
    },
    "4841": {
        "similarity": 0.996805727481842,
        "body": "n = int(input())\ncount = 0\nfor i in input().split():\n    if i == 'mumble':\n        continue\n    count += 1\n    try:\n        new_count = int(i)\n        if new_count != count + 1:\n            print('something is fishy')\n            exit()\n    except ValueError:\n        pass\nprint('makes sense')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964759349822998,
            0.9963493347167969,
            0.996805727481842,
            0.9955131411552429,
            0.9960522055625916,
            0.9923375844955444,
            0.9958480000495911,
            0.9953294396400452,
            0.9949990510940552,
            0.9958380460739136,
            0.9956769347190857,
            0.9960923790931702,
            0.9965673685073853,
            0.9953551292419434,
            0.9918285012245178,
            0.9956616163253784,
            0.9966455698013306,
            0.995093584060669,
            0.9924986958503723,
            0.9952318072319031
        ]
    },
    "4865": {
        "similarity": 0.9969077110290527,
        "body": "    n = int(input())\n    for _ in range(n):\n        direction, minutes_to_change, hour, minute = input().split()\n        minutes_to_change = int(minutes_to_change)\n        if direction == 'F':\n            minutes_to_change *= -1\n        new_minute = (minute + minutes_to_change) % 60\n        new_hour = (hour + (minutes_to_change // 60)) % 24\n        print(f\"{new_hour} {new_minute}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946653246879578,
            0.9956562519073486,
            0.9967997670173645,
            0.9969077110290527,
            0.996436357498169,
            0.9951252341270447,
            0.9961989521980286,
            0.9958576560020447,
            0.9956597685813904,
            0.9957879781723022,
            0.9943892955780029,
            0.9961035847663879,
            0.9899382591247559,
            0.9957075715065002,
            0.9964831471443176,
            0.9932994842529297,
            0.9942831993103027,
            0.9922162294387817,
            0.9964109659194946,
            0.9963470101356506
        ]
    },
    "4957": {
        "similarity": 0.9959887266159058,
        "body": "    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n    visited = [[False] * m for _ in range(n)]\n\n        if visited[i][j]:\n            return\n        visited[i][j] = True\n        for direction in directions:\n            ni, nj = i + direction[0], j + direction[1]\n            if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == '.' and not visited[ni][nj]:\n                dfs(ni, nj)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                dfs(i, j)\n                if all(visited[k][j] for k in range(max(0, i-1), min(n, i+2))):\n                    grid[i][j] = 'E'\n\n    for row in grid:\n        print(''.join(row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943439960479736,
            0.9938900470733643,
            0.9955148100852966,
            0.995120108127594,
            0.9946795105934143,
            0.9946393370628357,
            0.9946401715278625,
            0.9951086640357971,
            0.9777846336364746,
            0.9939707517623901,
            0.9955862760543823,
            0.9950764179229736,
            0.993961751461029,
            0.9948325157165527,
            0.9890134930610657,
            0.9957497119903564,
            0.9956754446029663,
            0.9950435161590576,
            0.9952751994132996,
            0.9959887266159058
        ]
    },
    "4382": {
        "similarity": 0.9947462677955627,
        "body": "print(10**N - 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947462677955627,
            0.9942829608917236,
            0.9942829608917236,
            0.994268000125885,
            0.9941924214363098,
            0.9941924214363098,
            0.9941924214363098,
            0.9945841431617737,
            0.9942829608917236,
            0.9944851398468018,
            0.99407958984375,
            0.9942829608917236,
            0.9916375875473022,
            0.9941602945327759,
            0.9941924214363098,
            0.9941924214363098,
            0.9942829608917236,
            0.9941924214363098,
            0.9919344186782837,
            0.9942829608917236
        ]
    },
    "4456": {
        "similarity": 0.9968000650405884,
        "body": "n, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\ns = ['a' + str(i) for i in range(1, min(n, k))]\ns += [chr(ord('a') + i - 1) for i in range(min(k, 26), n)]\n\nif sorted(s[p-1]) == s and sorted(s[q-1]) == s:\n    print(\"YES\")\n    print(''.join(s))\nelse:\n    print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963284730911255,
            0.9948891997337341,
            0.9951249957084656,
            0.9946033358573914,
            0.9968000650405884,
            0.9943572878837585,
            0.994687020778656,
            0.9950693845748901,
            0.9939560294151306,
            0.9937946796417236,
            0.993672251701355,
            0.99637371301651,
            0.9934981465339661,
            0.9962263703346252,
            0.9954175353050232,
            0.9913648366928101,
            0.9944695234298706,
            0.9955215454101562,
            0.9957005381584167,
            0.9946979880332947
        ]
    },
    "4594": {
        "similarity": 0.996709942817688,
        "body": "    N = int(input())\n    d_mochi = list(map(int, input().split()))\n    d_mochi.sort(reverse=True)\n    layers = 1\n    prev_diameter = d_mochi[0]\n    for diameter in d_mochi[1:]:\n        if diameter < prev_diameter:\n            layers += 1\n        prev_diameter = diameter\n    print(layers)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958745241165161,
            0.9964319467544556,
            0.9924963116645813,
            0.9957658648490906,
            0.9933984875679016,
            0.9965399503707886,
            0.9957235455513,
            0.9965673685073853,
            0.9935489296913147,
            0.9963274598121643,
            0.9917819499969482,
            0.9954231977462769,
            0.9962806701660156,
            0.9958767294883728,
            0.9960145354270935,
            0.996709942817688,
            0.9960146546363831,
            0.9955557584762573,
            0.9959489703178406,
            0.9903812408447266
        ]
    },
    "4560": {
        "similarity": 0.9968597888946533,
        "body": "    N, A = map(int, input().split())\n    if 500*A + A%1 <= N:\n        print('Yes')\n    else:\n        print('No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959902763366699,
            0.9965357780456543,
            0.9949429035186768,
            0.9960105419158936,
            0.9966894388198853,
            0.9968597888946533,
            0.9966105222702026,
            0.9927390217781067,
            0.9965412616729736,
            0.9939595460891724,
            0.9931734800338745,
            0.9960232973098755,
            0.9960602521896362,
            0.9944326281547546,
            0.9936780333518982,
            0.9959617257118225,
            0.9930483102798462,
            0.9960232973098755,
            0.9958642721176147,
            0.9919524192810059
        ]
    },
    "4320": {
        "similarity": 0.9984042644500732,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        k = 0\n        x = 1\n        while True:\n            s = sum([x << i for i in range(k+1)])\n            if s == n:\n                break\n            if s > n:\n                k -= 1\n                break\n            k += 1\n        print(x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996775209903717,
            0.9978691935539246,
            0.9979790449142456,
            0.9962882995605469,
            0.9983128905296326,
            0.9969925284385681,
            0.9978058338165283,
            0.9981322288513184,
            0.9978633522987366,
            0.9972385764122009,
            0.9984022378921509,
            0.9981697797775269,
            0.9971303343772888,
            0.9983657002449036,
            0.9979350566864014,
            0.9980989098548889,
            0.997750461101532,
            0.9984042644500732,
            0.9982518553733826,
            0.9970923066139221
        ]
    },
    "4500": {
        "similarity": 0.99456387758255,
        "body": "    A, B, C = map(int, input().split())\n    if A + B >= C:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9937142729759216,
            0.99456387758255,
            0.9937167763710022,
            0.9937168955802917,
            0.99456387758255,
            0.9924331307411194,
            0.9937168955802917,
            0.99456387758255,
            0.9925852417945862,
            0.9880690574645996,
            0.9937167763710022,
            0.99456387758255,
            0.9937142729759216,
            0.99456387758255,
            0.9929096698760986,
            0.9944813251495361,
            0.99456387758255,
            0.9942677021026611,
            0.9941152334213257,
            0.9936264753341675
        ]
    },
    "4739": {
        "similarity": 0.9960348010063171,
        "body": "M, N = map(int, input().split())\nT = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nspeeds = set()\nfor i in range(M-1):\n    for j in range(i+1, M):\n        speed = (X[j] - X[i]) / (T[j] - T[i])\n        speeds.add(speed)\n\npossible_speeds = len(set())\nprint(possible_speeds)\n\ndifferences = []\nfor i in range(M-1):\n    differences.append(X[i+1] - X[i])\ndifferences.sort()\nprint(' '.join(map(str, differences)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935873746871948,
            0.9893405437469482,
            0.9944272637367249,
            0.9892721772193909,
            0.9938850402832031,
            0.9907819032669067,
            0.9930741190910339,
            0.9951158165931702,
            0.9956843852996826,
            0.9937123656272888,
            0.9936065673828125,
            0.9952090382575989,
            0.9952296018600464,
            0.9938398003578186,
            0.9948001503944397,
            0.9960348010063171,
            0.9951204061508179,
            0.994581937789917,
            0.9943706393241882,
            0.9953309893608093
        ]
    },
    "4410": {
        "similarity": 0.9972323179244995,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        res = 0\n        for i in range(1, n):\n            if (s[i-1] == '1' and s[i] == '1') or (s[i-k] == '1' and s[i+k] == '1'):\n                break\n            res += 1\n        print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967042803764343,
            0.9940987825393677,
            0.9960887432098389,
            0.9966462850570679,
            0.9959134459495544,
            0.9944708943367004,
            0.9971304535865784,
            0.9955067038536072,
            0.9962150454521179,
            0.9919121265411377,
            0.9956274628639221,
            0.9972323179244995,
            0.9967166781425476,
            0.9969434142112732,
            0.9914109110832214,
            0.9959875345230103,
            0.9964718222618103,
            0.9968980550765991,
            0.9939069151878357,
            0.9913665652275085
        ]
    },
    "2441": {
        "similarity": 0.9962691068649292,
        "body": "n, costs = map(int, input().split())\ncosts = list(map(int, input().split()))\nm = int(input())\nroads = []\nfor _ in range(m):\n    roads.append(tuple(map(int, input().split())))\ndp = [[0] * (1 << n) for _ in range(n)]\nmin_cost = float('inf')\nfor mask in range(1 << n):\n    cost = 0\n    checkposts = 0\n    for i in range(n):\n        if not (mask & (1 << i)):\n            continue\n        cost += costs[i]\n        for j in range(i + 1, n):\n            if mask & (1 << j) and ((i == j) or (roads.count((i, j)) > 0 and roads.count((j, i)) > 0)):\n                cost = min(cost, dp[j][mask ^ (1 << i)] + costs[i])\n                checkposts += (costs[i] != 0)\n    if cost < min_cost:\n        min_cost = cost\nprint(min_cost, (min_cost) % 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935715198516846,
            0.9955217242240906,
            0.9959200620651245,
            0.9952722191810608,
            0.994560956954956,
            0.9947671294212341,
            0.995652437210083,
            0.9946831464767456,
            0.9926540851593018,
            0.9951173663139343,
            0.9938368797302246,
            0.9950037598609924,
            0.9959325194358826,
            0.9958030581474304,
            0.9936625957489014,
            0.9937430024147034,
            0.9949612021446228,
            0.9962691068649292,
            0.9950348734855652,
            0.9958283305168152
        ]
    },
    "276": {
        "similarity": 0.9930755496025085,
        "body": "n = int(input())\nabsent_gems = [\"Time\", \"Space\", \"Reality\", \"Mind\", \"Soul\", \"Power\"]\nseen_colors = [input().strip().lower() for _ in range(n)]\nabsent = [gem for gem in absent_gems if gem not in seen_colors]\nprint(len(absent))\nfor gem in absent:\n    print(gem)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909873604774475,
            0.990617573261261,
            0.9913685321807861,
            0.9902635216712952,
            0.9925547242164612,
            0.9873432517051697,
            0.9908673167228699,
            0.9909535646438599,
            0.9852499961853027,
            0.9888854622840881,
            0.9910016655921936,
            0.9823609590530396,
            0.9930755496025085,
            0.978864848613739,
            0.9891259074211121,
            0.9923073649406433,
            0.991932213306427,
            0.9864491820335388,
            0.9926546216011047,
            0.9852971434593201
        ]
    },
    "2635": {
        "similarity": 0.9971405863761902,
        "body": "    if not matrix or not matrix[0]:\n        return []\n\n    R, C = len(matrix), len(matrix[0])\n    seen = [[False] * C for _ in range(R)]\n    answer = []\n    \n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n\n    r = c = di = 0\n    while R * C > len(answer):\n        answer.append(matrix[r][c])\n        seen[r][c] = True\n\n        cr, cc = r + dr[di], c + dc[di]\n        \n        if (0 <= cr < R and 0 <= cc < C and not seen[cr][cc]):\n            r, c = cr, cc\n        else:\n            di = (di + 1) % 4\n            r, c = r + dr[di], c + dc[di]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967769980430603,
            0.9919866323471069,
            0.9890547394752502,
            0.9968079328536987,
            0.996052086353302,
            0.9939199686050415,
            0.9969068765640259,
            0.9971405863761902,
            0.991287350654602,
            0.996662974357605,
            0.995193600654602,
            0.9970307946205139,
            0.9970837831497192,
            0.9967197775840759,
            0.9960551857948303,
            0.9970374703407288,
            0.9959295392036438,
            0.9960839152336121,
            0.99680095911026,
            0.9967834949493408
        ]
    },
    "281": {
        "similarity": 0.9954157471656799,
        "body": "    a, b = map(int, input().split())\n    return pow(10, ((b*(b+1))//2) % 9, 10) % 10",
        "result": "failed: testcase 0",
        "similarities": [
            0.988908052444458,
            0.9905983805656433,
            0.9953227639198303,
            0.9936802387237549,
            0.9954157471656799,
            0.994901180267334,
            0.9925370812416077,
            0.9931110739707947,
            0.9898073077201843,
            0.9915400147438049,
            0.9900757670402527,
            0.9920094013214111,
            0.9887331128120422,
            0.9909335970878601,
            0.9950463175773621,
            0.9893298745155334,
            0.9906680583953857,
            0.9951388835906982,
            0.9948019981384277,
            0.9941706657409668
        ]
    },
    "2300": {
        "similarity": 0.9978830218315125,
        "body": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(m):\n    t = int(input())\n    if t == 1:\n        x, v = map(int, input().split())\n        a[x-1] = v\n    elif t == 2:\n        l, r = map(int, input().split())\n        f = 0\n        for i in range(l, r+1):\n            f += (f + i - l) * a[i]\n        print(f % 10**9)\n    elif t == 3:\n        l, r, d = map(int, input().split())\n        for i in range(l-1, r):\n            a[i] += d",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978768229484558,
            0.9974319338798523,
            0.9974614977836609,
            0.9922153949737549,
            0.9962142109870911,
            0.9962232708930969,
            0.996281087398529,
            0.9958836436271667,
            0.9974288940429688,
            0.9974413514137268,
            0.9963389039039612,
            0.9970038533210754,
            0.9964221119880676,
            0.9973347187042236,
            0.9963122010231018,
            0.9970169067382812,
            0.9976792931556702,
            0.9974689483642578,
            0.9978830218315125,
            0.9972805380821228
        ]
    },
    "2104": {
        "similarity": 0.9974216818809509,
        "body": "    l, r = map(int, input().split())\n    pairs = []\n    for i in range(l, r + 1):\n        if len(pairs) % 2 == 0:\n            pairs.append(i)\n        else:\n            pairs[-1], i = i, pairs[-1]\n    print('YES' if len(pairs) == (r - l + 1) // 2 else 'NO')\n    for i in range(0, len(pairs), 2):\n        print(f\"{pairs[i]} {pairs[i+1]}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974216818809509,
            0.997383713722229,
            0.9965585470199585,
            0.9965211749076843,
            0.9966203570365906,
            0.9958905577659607,
            0.9966829419136047,
            0.9972068667411804,
            0.995096743106842,
            0.9968286156654358,
            0.9971117973327637,
            0.9966562986373901,
            0.9916409850120544,
            0.9965205192565918,
            0.9965208768844604,
            0.995701253414154,
            0.9954041838645935,
            0.9953341484069824,
            0.9964216351509094,
            0.9961428642272949
        ]
    },
    "1995": {
        "similarity": 0.9978724122047424,
        "body": "    s = input()\n    m = int(input())\n    for _ in range(m):\n        l, r, k = map(int, input().split())\n        s = s[r-1:l] + s[:r-1]\n        s = s[-k:] + s[:-k]\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955946207046509,
            0.995949923992157,
            0.9976406097412109,
            0.9939014911651611,
            0.9978199005126953,
            0.9958566427230835,
            0.9966852068901062,
            0.9937090873718262,
            0.9964677691459656,
            0.9970769286155701,
            0.9978228211402893,
            0.9969990253448486,
            0.9973377585411072,
            0.997222900390625,
            0.9978724122047424,
            0.9956064820289612,
            0.997772216796875,
            0.9931846261024475,
            0.9970859885215759,
            0.9972358345985413
        ]
    },
    "2064": {
        "similarity": 0.993033766746521,
        "body": "    return int(''.join(str(i) for i in range(2**n))) - 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.985237717628479,
            0.9923276305198669,
            0.9920074939727783,
            0.9719427227973938,
            0.992048978805542,
            0.9923672080039978,
            0.99132239818573,
            0.9915417432785034,
            0.993033766746521,
            0.9927661418914795,
            0.9927335977554321,
            0.9920099973678589,
            0.9896548390388489,
            0.9881775379180908,
            0.9920760989189148,
            0.9807054400444031,
            0.9909467101097107,
            0.9909486174583435,
            0.9913390278816223,
            0.9647510051727295
        ]
    },
    "1715": {
        "similarity": 0.9944584369659424,
        "body": "    A, B, Q = map(int, input().split())\n    s = list(map(int, [input() for _ in range(A)]))\n    t = list(map(int, [input() for _ in range(B)]))\n    x = list(map(int, [input() for _ in range(Q)]))\n    \n    for i in range(Q):\n        ans = float('inf')\n        for j in s:\n            for k in t:\n                if min(abs(j-x[i]), abs(k-x[i])) < ans:\n                    ans = min(ans, abs(j-k)+1)\n        print(ans)",
        "result": "timed out",
        "similarities": [
            0.9933111071586609,
            0.9932329058647156,
            0.9845398664474487,
            0.9903426170349121,
            0.9933320879936218,
            0.9935380816459656,
            0.9884589314460754,
            0.991521954536438,
            0.9942615032196045,
            0.990414559841156,
            0.9937832355499268,
            0.9943699240684509,
            0.9927017092704773,
            0.9944584369659424,
            0.9912467002868652,
            0.9907698631286621,
            0.9926629662513733,
            0.993857741355896,
            0.9904713034629822,
            0.9907516837120056
        ]
    },
    "2074": {
        "similarity": 0.9938814043998718,
        "body": "n, m = map(int, input().split())\ndinner_costs = [list(map(int, input().split())) for _ in range(n)]\nmax_street_cost = 0\nfor i in range(n):\n    max_street_cost_i = max(dinner_costs[i])\n    if max_street_cost_i > max_street_cost:\n        max_street_cost = max_street_cost_i\nprint(max_street_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920413494110107,
            0.9906293749809265,
            0.9904107451438904,
            0.9875839948654175,
            0.9875839948654175,
            0.9931010007858276,
            0.9866477847099304,
            0.987071692943573,
            0.9877520203590393,
            0.9877000451087952,
            0.9908216595649719,
            0.9938814043998718,
            0.9901444315910339,
            0.989143967628479,
            0.9882516264915466,
            0.9900952577590942,
            0.9918040037155151,
            0.992441713809967,
            0.9933215975761414,
            0.9889034628868103
        ]
    },
    "2921": {
        "similarity": 0.9947264790534973,
        "body": "    m, u, d = map(float, input().split())\n    drinks = []\n    for _ in range(d):\n        name, strength, size, cost = input().split()\n        strength = float(strength)\n        cost = float(cost)\n        drinks.append((name, int((100*strength)/1), size, float(cost)))\n    drinks.sort(key=lambda x: (x[2], -x[3]))\n    spent_units = 0\n    bought_drinks = []\n    for drink in drinks:\n        units = drink[1] // 10\n        while units > 0 and spent_units + units * drink[3] <= m:\n            spent_units += units * drink[3]\n            bought_drinks.append((drink[0], int(units)))\n            units -= 1\n    if spent_units >= u:\n        print(*[' '.join(drink) for drink in bought_drinks], sep='\\n')\n    else:\n        print('IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942626953125,
            0.9942191243171692,
            0.9830096364021301,
            0.9921895861625671,
            0.9923921227455139,
            0.9945700764656067,
            0.9918817281723022,
            0.9912340044975281,
            0.9879603385925293,
            0.9908523559570312,
            0.9930126667022705,
            0.9927259683609009,
            0.9921383261680603,
            0.9925429821014404,
            0.9929941892623901,
            0.99388587474823,
            0.9926647543907166,
            0.9845143556594849,
            0.9947264790534973,
            0.9943515658378601
        ]
    },
    "1642": {
        "similarity": 0.9959235787391663,
        "body": "import math\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y = map(float, input().split())\n    points.append((x, y))\n\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n    return ((o1 > 0 and o2 < 0) or (o1 < 0 and o2 > 0)) or ((o3 > 0 and o4 < 0) or (o3 < 0 and o4 > 0))\n\n    max_distance = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dx = points[j][0] - points[i][0]\n            dy = points[j][1] - points[i][1]\n            distance = math.sqrt(dx * dx + dy * dy)\n            if not do_intersect((0, 0), (dx, dy), points[i], points[j]):\n                max_distance = max(max_distance, distance)\n    return max_distance\n\nprint(find_max_distance())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955677390098572,
            0.9958513379096985,
            0.9938421845436096,
            0.9946704506874084,
            0.9949004650115967,
            0.9959235787391663,
            0.9949241280555725,
            0.994544267654419,
            0.9957566857337952,
            0.9955030679702759,
            0.9936467409133911,
            0.991507887840271,
            0.9955925345420837,
            0.9938278198242188,
            0.994848370552063,
            0.994716227054596,
            0.9935480356216431,
            0.9947744607925415,
            0.9950865507125854,
            0.9954788088798523
        ]
    },
    "947": {
        "similarity": 0.9967403411865234,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            a = n // 2\n            b = a\n        else:\n            a = (n + 1) // 2\n            b = n - a\n        print(a, b)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958385825157166,
            0.9964518547058105,
            0.9943187236785889,
            0.9967403411865234,
            0.9962642192840576,
            0.9935591816902161,
            0.9915872812271118,
            0.9967064261436462,
            0.9967403411865234,
            0.9958571195602417,
            0.9957602620124817,
            0.9951142072677612,
            0.9964979290962219,
            0.991116464138031,
            0.9963423013687134,
            0.995311439037323,
            0.9957080483436584,
            0.9958101511001587,
            0.9943731427192688,
            0.9953962564468384
        ]
    },
    "743": {
        "similarity": 0.9978923797607422,
        "body": "    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.sort()\n    return sum(numbers[-1] - num for num in numbers[:-1]) + numbers[-1]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978356957435608,
            0.9950611591339111,
            0.9975467324256897,
            0.9977824687957764,
            0.9977785348892212,
            0.9977342486381531,
            0.9978805184364319,
            0.9978923797607422,
            0.9940987825393677,
            0.9978055357933044,
            0.997562825679779,
            0.9978587627410889,
            0.995120108127594,
            0.9976627826690674,
            0.9931390881538391,
            0.9958739280700684,
            0.9977342486381531,
            0.9969009757041931,
            0.9976348876953125,
            0.9895989298820496
        ]
    },
    "1397": {
        "similarity": 0.9970811605453491,
        "body": "    n,m = map(int,input().split())\n    g = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a,b = map(int,input().split());g[a].append(b);g[b].append(a)\n    s = 0\n    visited = [False]*(n+1)\n    for i in range(1,n+1):\n        if not visited[i]:\n            stack = [(i,0)]\n            while stack:\n                v,d = stack.pop()\n                if not visited[v]:\n                    visited[v] = True\n                    s += d-1\n                    for u in g[v]:\n                        if not visited[u]:stack.append((u,d+1))\n    print(s)\n    for i in range(1,n):\n        if g[i]:print(*g[i],sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961599111557007,
            0.9956229329109192,
            0.9967954754829407,
            0.9958406090736389,
            0.9920102953910828,
            0.9954191446304321,
            0.9951596856117249,
            0.9970811605453491,
            0.99516761302948,
            0.9961645007133484,
            0.9966583251953125,
            0.9966241717338562,
            0.9963200092315674,
            0.9960998892784119,
            0.9955267906188965,
            0.9959690570831299,
            0.9966552257537842,
            0.9961382150650024,
            0.9965196847915649,
            0.9963226318359375
        ]
    },
    "1144": {
        "similarity": 0.9953036904335022,
        "body": "    n = int(input())\n    s = input().strip()\n    m = int(input())\n\n    replacements = 0\n    t = 'ab' * (m // 2)\n    \n    for i in range(n - m + 1):\n        if all(s[i + j] == t[j] or s[i + j] == '?' for j in range(m)):\n            replacements += s[:i].count('?')\n    \n    return replacements",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931941628456116,
            0.9943486452102661,
            0.9945147633552551,
            0.9953036904335022,
            0.9925959706306458,
            0.9923436045646667,
            0.9932121634483337,
            0.9917862415313721,
            0.9903502464294434,
            0.9930527210235596,
            0.9926673769950867,
            0.9905900359153748,
            0.9885541200637817,
            0.9929884076118469,
            0.994446337223053,
            0.9893448352813721,
            0.9932246804237366,
            0.9937066435813904,
            0.9914844036102295,
            0.9939984679222107
        ]
    },
    "890": {
        "similarity": 0.9963956475257874,
        "body": "    n, l, r, x = map(int, input().split())\n    c = list(map(int, input().split()))\n    ways = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if sum(c[i:j]) >= l and sum(c[i:j]) <= r:\n                if max(c[i:j])-min(c[i:j])>=x:\n                    ways += 1\n    print(ways)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9958347678184509,
            0.9962971210479736,
            0.995847225189209,
            0.9962831139564514,
            0.9943950176239014,
            0.9963179230690002,
            0.9961999654769897,
            0.9963769316673279,
            0.9942136406898499,
            0.9958833456039429,
            0.9955006837844849,
            0.995335042476654,
            0.9924556612968445,
            0.9923590421676636,
            0.9961759448051453,
            0.9963956475257874,
            0.9961186647415161,
            0.9944475889205933,
            0.9959681630134583,
            0.9938747882843018
        ]
    },
    "2410": {
        "similarity": 0.9954651594161987,
        "body": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if all(sum(a[i:j+1]) < s for i in range(n) for j in range(i, n)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9710034728050232,
            0.9945327639579773,
            0.9951447248458862,
            0.9943128824234009,
            0.9936981201171875,
            0.9947280883789062,
            0.9910706281661987,
            0.9944984316825867,
            0.9920676350593567,
            0.9945960640907288,
            0.9954651594161987,
            0.993692934513092,
            0.9931630492210388,
            0.9953425526618958,
            0.9945077300071716,
            0.995186448097229,
            0.9923220276832581,
            0.9913705587387085,
            0.9953309893608093,
            0.9948789477348328
        ]
    },
    "1004": {
        "similarity": 0.9973261952400208,
        "body": "n = int(input())\na = [int(x) for x in input().split()]\nstack = []\ndays = []\nfor event in a:\n    if event > 0:\n        stack.append(event)\n    else:\n        while len(stack) < -event:\n            days.append(len(stack))\n            stack = []\n        if len(stack) != -event:\n            print(-1)\n            exit()\n        stack.pop()\n        if not stack:\n            days.append(0)\ndays.append(len(stack))\nprint(len(days), end=' ')\nprint(*[len(list(group)) for key, group in itertools.groupby(days)], sep=' ')",
        "result": "timed out",
        "similarities": [
            0.9970296621322632,
            0.9963080883026123,
            0.9970437288284302,
            0.995175838470459,
            0.9961509704589844,
            0.9926267862319946,
            0.9959719777107239,
            0.9956853985786438,
            0.9968851804733276,
            0.9965535402297974,
            0.9967870116233826,
            0.9940187335014343,
            0.9970279335975647,
            0.9946284890174866,
            0.9962465167045593,
            0.9973261952400208,
            0.9960440397262573,
            0.9964752197265625,
            0.9968059062957764,
            0.9954065084457397
        ]
    },
    "531": {
        "similarity": 0.9969416260719299,
        "body": "n = int(input())\nx = list(map(int, input().split()))\nmax_x = max(x)\nmin_x = min(x)\navg_x = sum(x) / n\ny = [0] * n\nequal_count = 0\nfor i in range(n):\n    if x[i] - (max_x - min_x) <= avg_x <= x[i] + (max_x - min_x):\n        y[i] = x[i]\n        equal_count += 1\nprint(equal_count)\nprint(' '.join(map(str, y)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967151284217834,
            0.9923844933509827,
            0.9960027933120728,
            0.9969416260719299,
            0.9949275851249695,
            0.9961254000663757,
            0.9969044923782349,
            0.9934288859367371,
            0.9956466555595398,
            0.9956228137016296,
            0.9961642026901245,
            0.99480140209198,
            0.9969249367713928,
            0.9953708648681641,
            0.9960110187530518,
            0.996372640132904,
            0.9964565634727478,
            0.9911845326423645,
            0.996372401714325,
            0.9949988126754761
        ]
    },
    "510": {
        "similarity": 0.9932727813720703,
        "body": "    a, b, c, d = map(int, input().split())\n    return max(a - c, abs(c - b), abs(b - a)) + max(0, d - 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.991817057132721,
            0.9910772442817688,
            0.9901283979415894,
            0.991552472114563,
            0.9905716776847839,
            0.9843176007270813,
            0.9866481423377991,
            0.985236406326294,
            0.9875568747520447,
            0.9891397356987,
            0.9931649565696716,
            0.9932727813720703,
            0.9905419945716858,
            0.990821361541748,
            0.9931552410125732,
            0.9909862875938416,
            0.9862352013587952,
            0.9929922223091125,
            0.9932218790054321,
            0.9662114381790161
        ]
    },
    "2555": {
        "similarity": 0.9959731101989746,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = [max(a)]\n    for _ in range(q):\n        l, r = map(int, input().split())\n        a[l-1], a[r-1] = a[r-1], a[l-1]\n        res.append(max(sum(a[i] if i % 2 == 0 else -a[i] for i in range(1, n+1))))\n    print(*res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944199323654175,
            0.9927502870559692,
            0.9938991069793701,
            0.9924495220184326,
            0.9943574666976929,
            0.9955205321311951,
            0.9947461485862732,
            0.9957695007324219,
            0.994456946849823,
            0.9953984618186951,
            0.9959731101989746,
            0.9959028959274292,
            0.9956129789352417,
            0.9955251812934875,
            0.9934157133102417,
            0.9932245016098022,
            0.9923475980758667,
            0.9922029376029968,
            0.9947688579559326,
            0.992956280708313
        ]
    },
    "324": {
        "similarity": 0.9966423511505127,
        "body": "    n = int(input())\n    a = 2\n    while True:\n        b = a - n\n        if all(1 < i < b for i in range(2, int(b**0.5) + 1)) and all(i > 1 for i in range(2, int(a**0.5) + 1)):\n            print(a, b)\n            break\n        a += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947602152824402,
            0.9954549074172974,
            0.9942733645439148,
            0.9936866760253906,
            0.9954679608345032,
            0.9950543642044067,
            0.9955868124961853,
            0.9956921935081482,
            0.9941982626914978,
            0.9925389885902405,
            0.995244562625885,
            0.9964900612831116,
            0.9907437562942505,
            0.9926414489746094,
            0.9966423511505127,
            0.9920827150344849,
            0.994071364402771,
            0.9957672953605652,
            0.9945502877235413,
            0.9949780702590942
        ]
    },
    "2912": {
        "similarity": 0.9977082014083862,
        "body": "    N = int(input())\n    strings = [input() for _ in range(N)]\n    operations = []\n    for _ in range(N-1):\n        a, b = map(int, input().split())\n        operations.append((a-1, b-1))\n    \n    for a, b in operations:\n        strings[a] += strings[b]\n        strings[b] = ''\n    print(strings[-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970507621765137,
            0.9955414533615112,
            0.9949629902839661,
            0.9970565438270569,
            0.9955659508705139,
            0.9959744811058044,
            0.9977082014083862,
            0.996730387210846,
            0.9961499571800232,
            0.996792733669281,
            0.9954289793968201,
            0.9973843097686768,
            0.9971472024917603,
            0.9943795800209045,
            0.9972267150878906,
            0.9968295693397522,
            0.9974995851516724,
            0.9964843392372131,
            0.9940595030784607,
            0.9974251985549927
        ]
    },
    "9": {
        "similarity": 0.9965802431106567,
        "body": "    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n    for i, sofa in enumerate(sofas):\n        left = sum(x < sofas[j][0] for j in range(d) if i != j and (x == sofa[0] or x < sofa[2]))\n        right = sum(x > sofas[j][2] for j in range(d) if i != j and (x == sofa[2] or x > sofa[0]))\n        top = sum(y < sofas[j][1] for j in range(d) if i != j and (y == sofa[1] or y < sofa[3]))\n        bottom = sum(y > sofas[j][3] for j in range(d) if i != j and (y == sofa[3] or y > sofa[1]))\n        if left == cnt_l and right == cnt_r and top == cnt_t and bottom == cnt_b:\n            return i + 1\n    return -1\n\nprint(solution())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953643679618835,
            0.9954148530960083,
            0.9965802431106567,
            0.9951790571212769,
            0.9952886700630188,
            0.9964039325714111,
            0.9960628151893616,
            0.9938386678695679,
            0.9951968789100647,
            0.9960069060325623,
            0.9940681457519531,
            0.9896840453147888,
            0.9952400922775269,
            0.9957962036132812,
            0.993742823600769,
            0.995427668094635,
            0.9955319762229919,
            0.9953004121780396,
            0.9955083727836609,
            0.9949609041213989
        ]
    },
    "249": {
        "similarity": 0.9963151812553406,
        "body": "n, l, x, y = map(int, input().split())\na = list(map(int, input().split()))\nv = 0\np = []\nwhile len(p) < 2:\n    for i in range(1, n+1):\n        if a[i] - a[0] > x and a[i] - a[0] < y:\n            v += 1\n            p.append(a[i])\n            break\nprint(v)\nprint(*p, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950568675994873,
            0.993411123752594,
            0.9950241446495056,
            0.9950372576713562,
            0.9958242177963257,
            0.9926637411117554,
            0.9963151812553406,
            0.9932437539100647,
            0.9940869212150574,
            0.9945505857467651,
            0.9957018494606018,
            0.9937337636947632,
            0.9956701397895813,
            0.9958459138870239,
            0.9959570169448853,
            0.9873496890068054,
            0.9954721331596375,
            0.9947581887245178,
            0.994442880153656,
            0.9956644773483276
        ]
    },
    "2999": {
        "similarity": 0.9962595701217651,
        "body": "n, s = map(int, input().split())\nwon = set()\ntotal = 0\nfor _ in range(n):\n    t, b = input().split()\n    total += b\n    if total >= s:\n        won.add(t)\n        break\nfor t in set(input().split() for _ in range(n)):\n    if (t+b) >= s:\n        won.add(t)\nprint(len(won))\nfor w in sorted(list(won)):\n    print(w)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953707456588745,
            0.9940153360366821,
            0.9948642253875732,
            0.9956846833229065,
            0.9928337931632996,
            0.9961341023445129,
            0.9952502846717834,
            0.9959072470664978,
            0.9941979646682739,
            0.9953970909118652,
            0.9933744668960571,
            0.9933154582977295,
            0.9962595701217651,
            0.9959313273429871,
            0.9950796365737915,
            0.9955030679702759,
            0.9945796132087708,
            0.9924272298812866,
            0.9956899881362915,
            0.9951081871986389
        ]
    },
    "2239": {
        "similarity": 0.9954870343208313,
        "body": "    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        count = 0\n        while True:\n            if sum([2, 3, 4, 5, 6, 7] * (count + 1)) >= x:\n                print(count + 1)\n                break\n            count += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944179058074951,
            0.9943253397941589,
            0.9828232526779175,
            0.9862770438194275,
            0.99506014585495,
            0.9947210550308228,
            0.9950747489929199,
            0.9931254982948303,
            0.9951661825180054,
            0.98980712890625,
            0.9947169423103333,
            0.9937330484390259,
            0.991455078125,
            0.9858412742614746,
            0.9950786232948303,
            0.9954870343208313,
            0.9924557209014893,
            0.9943481087684631,
            0.9932133555412292,
            0.9934443235397339
        ]
    },
    "2615": {
        "similarity": 0.9946616291999817,
        "body": "    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        count = 0\n        k1, k2, k3 = 0, 0, 0\n        while 2 ** (k1 + 1) <= n:\n            k1 += 1\n        while 3 ** (k2 + 1) <= n // (2 ** k1):\n            k2 += 1\n        while 5 ** (k3 + 1) <= n // (2 ** k1) // 3 ** (k2 + 1):\n            k3 += 1\n        for i in range(k1, -1, -1):\n            for j in range(k2, -1, -1):\n                for m in range(k3, -1, -1):\n                    if gcd(i, j) == 1 and gcd(i * j, m) == 1:\n                        count += 1\n        print(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919050335884094,
            0.9940773844718933,
            0.9936419129371643,
            0.9911866784095764,
            0.9945908784866333,
            0.9923930764198303,
            0.9939314126968384,
            0.9941802024841309,
            0.9840971231460571,
            0.9933918714523315,
            0.9941157102584839,
            0.9912202954292297,
            0.9940182566642761,
            0.991916835308075,
            0.9886727929115295,
            0.9905987977981567,
            0.9731481671333313,
            0.9946616291999817,
            0.9944572448730469,
            0.994013249874115
        ]
    },
    "2542": {
        "similarity": 0.9954653382301331,
        "body": "    t = int(input())\n    for _ in range(t):\n        s = input()\n        n = len(s)\n        left, right = s[1:], s[0]\n        i = 0\n        while i < n:\n            if s[i:] != left and s[:i+1] != right:\n                break\n            i += 1\n        print(n - i)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935302734375,
            0.9911647439002991,
            0.9946771860122681,
            0.9934011697769165,
            0.9952259063720703,
            0.9938778281211853,
            0.9953373670578003,
            0.9951776266098022,
            0.9949066042900085,
            0.9873727560043335,
            0.9935987591743469,
            0.9945935606956482,
            0.9940886497497559,
            0.9954653382301331,
            0.9944908022880554,
            0.9934653043746948,
            0.9917823672294617,
            0.9951095581054688,
            0.9922071695327759,
            0.9945241212844849
        ]
    },
    "511": {
        "similarity": 0.9975700378417969,
        "body": "    while b:\n        a, b = b, a % b\n    return a\n\n        if not b: \n            return 0\n        else:\n            return 1 + _f(a, b - a if gcd(a, b) == b else gcd(a, b))\n    return _f(x, y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972936511039734,
            0.9966052174568176,
            0.9970227479934692,
            0.9972202777862549,
            0.9960070252418518,
            0.9947715401649475,
            0.9975700378417969,
            0.9972530007362366,
            0.9917483925819397,
            0.9970794320106506,
            0.9965972900390625,
            0.9971917867660522,
            0.9968451261520386,
            0.9967868328094482,
            0.9964474439620972,
            0.9974027872085571,
            0.9928297996520996,
            0.9962509870529175,
            0.9964852929115295,
            0.9970795512199402
        ]
    },
    "1409": {
        "similarity": 0.9932501912117004,
        "body": "    n, k = map(int, input().split())\n    y = list(map(int, input().split()))\n    y.sort()\n    teams = 0\n    for i in range(n):\n        if y[i] >= k:\n            teams += (y[i] // k)\n    return teams",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927058815956116,
            0.9904530048370361,
            0.9918662905693054,
            0.9923421144485474,
            0.9921889901161194,
            0.9908959269523621,
            0.975536048412323,
            0.9911767840385437,
            0.9887024760246277,
            0.9922041893005371,
            0.9914689660072327,
            0.9870219826698303,
            0.9921383261680603,
            0.9913488626480103,
            0.9907752871513367,
            0.9932501912117004,
            0.9875780344009399,
            0.9883707761764526,
            0.9898260235786438,
            0.9922084808349609
        ]
    },
    "2274": {
        "similarity": 0.9954257607460022,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        belt = [list(input()) for _ in range(n)]\n        visited = [[False]*m for _ in range(n)]\n        queue = [(0, 0)]\n        while queue:\n            i, j = queue.pop(0)\n            if visited[i][j]:\n                continue\n            visited[i][j] = True\n            if belt[i][j] == 'D':\n                belt[i][j] = 'R'\n                queue.extend([(i+1, j) if (i+1)<n else None, (i, j+1) if (j+1)<m else None])\n            elif belt[i][j] == 'R':\n                belt[i][j] = 'D'\n                queue.extend([(i, j+1) if (j+1)<m else None, (i+1, j) if (i+1)<n else None])\n        print(n*m - sum(1 for row in visited if all(row)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904853701591492,
            0.9905057549476624,
            0.9942381978034973,
            0.9950610995292664,
            0.9952173829078674,
            0.9954257607460022,
            0.9939895272254944,
            0.9934413433074951,
            0.9946564435958862,
            0.9849558472633362,
            0.9950923919677734,
            0.9881861805915833,
            0.9939591288566589,
            0.9952030181884766,
            0.9948786497116089,
            0.9935483336448669,
            0.9946885704994202,
            0.9937039613723755,
            0.9937723875045776,
            0.9937351942062378
        ]
    },
    "2420": {
        "similarity": 0.9968116283416748,
        "body": "    n, r = map(int, input().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    max_covered = 0\n    left = 0\n    for right in range(len(points)):\n        while points[right][1] - points[left][1] > r:\n            left += 1\n        max_covered = max(max_covered, right - left + 1)\n    print(max_covered)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962985515594482,
            0.9927549958229065,
            0.9965487122535706,
            0.9965178966522217,
            0.9941059947013855,
            0.9963412880897522,
            0.9962429404258728,
            0.9967384338378906,
            0.9967954754829407,
            0.9960899353027344,
            0.9967035055160522,
            0.9958358407020569,
            0.9956898093223572,
            0.9944936037063599,
            0.9950762391090393,
            0.9919357299804688,
            0.9967994689941406,
            0.9968116283416748,
            0.995597243309021,
            0.996207594871521
        ]
    },
    "1267": {
        "similarity": 0.9964292645454407,
        "body": "    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    res = 0\n    prev = -1\n    for score in s:\n        if score > 0 and (prev == 0 or score < prev):\n            res += 1\n        prev = score\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955140948295593,
            0.9954706430435181,
            0.9945266246795654,
            0.9955769777297974,
            0.9916660785675049,
            0.9898629784584045,
            0.9940505027770996,
            0.9937494993209839,
            0.9949730634689331,
            0.9961233735084534,
            0.9962685108184814,
            0.9963921308517456,
            0.9935760498046875,
            0.9956272840499878,
            0.995777428150177,
            0.9936382174491882,
            0.9964278340339661,
            0.9964292645454407,
            0.9950772523880005,
            0.9943466186523438
        ]
    },
    "2356": {
        "similarity": 0.9968729615211487,
        "body": "n = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        k = random.randint(0, len(a) - 1)\n        a[i], a[k] = a[k], a[i]\n    print(' '.join(map(str, a)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956845641136169,
            0.9945393800735474,
            0.9954577088356018,
            0.9959839582443237,
            0.9862604737281799,
            0.9956036806106567,
            0.9921337962150574,
            0.996261715888977,
            0.996860921382904,
            0.9968729615211487,
            0.9960752725601196,
            0.9956948161125183,
            0.996234118938446,
            0.993924617767334,
            0.9941021800041199,
            0.993137538433075,
            0.994735598564148,
            0.9953356385231018,
            0.9964810609817505,
            0.9967787861824036
        ]
    },
    "108": {
        "similarity": 0.9952418804168701,
        "body": "    s = input()\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        while c in s:\n            s = s.replace(c, chr((ord(c) + 1) % 26))\n    if all(chr(i+96) in s for i in range(26)):\n        print(s)\n    else:\n        print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952418804168701,
            0.9906149506568909,
            0.994948148727417,
            0.992539644241333,
            0.9941341876983643,
            0.992490291595459,
            0.9947339296340942,
            0.992453932762146,
            0.9943323731422424,
            0.9936153292655945,
            0.9948049187660217,
            0.9833685159683228,
            0.9922496676445007,
            0.9890174865722656,
            0.994873583316803,
            0.9945375323295593,
            0.9952085614204407,
            0.992163896560669,
            0.9938878417015076,
            0.9927429556846619
        ]
    },
    "1833": {
        "similarity": 0.9968944191932678,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if a[j] % (j + 1) == 0:\n                dp[i + 1] += dp[j]\n                dp[i + 1] %= MOD\n    print(dp[-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956552386283875,
            0.9941437244415283,
            0.9936735033988953,
            0.9923316836357117,
            0.9950998425483704,
            0.9961629509925842,
            0.9946184754371643,
            0.9959527850151062,
            0.9963166117668152,
            0.9965319633483887,
            0.9944068789482117,
            0.99664705991745,
            0.9930713176727295,
            0.9928944110870361,
            0.9962306022644043,
            0.9965854287147522,
            0.9947521686553955,
            0.9938349723815918,
            0.9968296885490417,
            0.9968944191932678
        ]
    },
    "2324": {
        "similarity": 0.9976244568824768,
        "body": "    s = input()\n    n = len(s)\n    res = [0] * (n + 1)\n    for i in range(n):\n        res[i + 1] += 1\n        if s[i] == s[n - i - 1]:\n            for j in range(1, i // 2 + 1):\n                if s[j - 1:i] == s[j:i][::-1]:\n                    res[i + 1] += res[i - 2 * j]\n    print(*res[1:])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971287250518799,
            0.9969401955604553,
            0.997546374797821,
            0.9970225095748901,
            0.9965685606002808,
            0.9975235462188721,
            0.9976244568824768,
            0.9931184649467468,
            0.9934936165809631,
            0.9968775510787964,
            0.9950439929962158,
            0.9967805743217468,
            0.9973335266113281,
            0.9974738955497742,
            0.9939935803413391,
            0.9974426627159119,
            0.9969362020492554,
            0.9970681071281433,
            0.9974722862243652,
            0.9923861622810364
        ]
    },
    "2372": {
        "similarity": 0.9982157349586487,
        "body": "    H, W = map(int, input().split())\n    ch, cw, dh, dw = map(int, input().split())\n    S = [list(input()) for _ in range(H)]\n    \n    Q = [(ch, cw, 0)]  # (x, y, magic_count)\n    visited = set((ch, cw))\n    while Q:\n        x, y, magic_count = Q.pop(0)\n        if x == dh and y == dw: return str(magic_count)\n        \n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 1 <= nx <= H and 1 <= ny <= W and S[nx][ny] == '.' and (nx, ny) not in visited:\n                Q.append((nx, ny, magic_count))\n                visited.add((nx, ny))\n        \n        for dx in range(-2, 3):\n            for dy in range(-2, 3):\n                if abs(dx) + abs(dy) > 0:  # skip (0, 0)\n                    nx, ny = x + dx, y + dy\n                    if 1 <= nx <= H and 1 <= ny <= W and S[nx][ny] == '.':\n                        Q.append(((nx, ny), magic_count + 1))\n                        visited.add((nx, ny))\n\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977717995643616,
            0.9968093037605286,
            0.9982157349586487,
            0.9965850710868835,
            0.9963341951370239,
            0.9981572031974792,
            0.9979233145713806,
            0.9971935153007507,
            0.9979726672172546,
            0.9977484345436096,
            0.997318685054779,
            0.9978411793708801,
            0.9979080557823181,
            0.9980402588844299,
            0.9944852590560913,
            0.9980781078338623,
            0.9978160858154297,
            0.9980009198188782,
            0.9975652098655701,
            0.9976891875267029
        ]
    },
    "1984": {
        "similarity": 0.9966394305229187,
        "body": "from collections import Counter\n\nn, m, k, w = map(int, input().split())\nlevels = []\nfor _ in range(k):\n    level = [list(input()) for _ in range(n)]\n    levels.append(level)\n\ntotal_bytes = 0\ntransfers = []\nfor i in range(1, k):\n    diff = sum(a != b and 1 or 0 for a, b in zip(*[line[i:] for line in *levels[:i]]))\n    if i == 1:\n        total_bytes += n * m\n    else:\n        total_bytes += diff + w\n    transfers.append((i, 1 if i == 1 else len(transfers) - 1))\n\nprint(total_bytes)\nfor x, y in transfers:\n    print(x, y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931056499481201,
            0.9953920245170593,
            0.9946902394294739,
            0.9948770403862,
            0.993821918964386,
            0.9955254793167114,
            0.9958285093307495,
            0.9964469075202942,
            0.9958513975143433,
            0.994748592376709,
            0.9959537982940674,
            0.9966394305229187,
            0.9959301352500916,
            0.9964547753334045,
            0.9945821166038513,
            0.994057297706604,
            0.9946111440658569,
            0.9928023815155029,
            0.9957427978515625,
            0.9943693280220032
        ]
    },
    "1253": {
        "similarity": 0.9960437417030334,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    total_income = sum(a)\n    for i in range(n):\n        if k > 0:\n            a[i] *= -1\n            k -= 1\n        elif a[0] < 0 and a[-1] > 0:\n            break\n    print(sum(a))",
        "result": "failed: testcase 2",
        "similarities": [
            0.9953071475028992,
            0.994730532169342,
            0.9954689741134644,
            0.994613528251648,
            0.9944435954093933,
            0.9960437417030334,
            0.9905918836593628,
            0.9953736066818237,
            0.9951725006103516,
            0.9862576723098755,
            0.9899773001670837,
            0.9944401979446411,
            0.9952270984649658,
            0.9904811382293701,
            0.9945923686027527,
            0.9949873089790344,
            0.9953494071960449,
            0.9946038126945496,
            0.9949609637260437,
            0.9943205118179321
        ]
    },
    "523": {
        "similarity": 0.9935678243637085,
        "body": "    n, m = map(int, input().split())\n    s = [input() for _ in range(n)]\n    s.sort()\n    result = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result.append(s[i])\n        else:\n            result.append(s[-i-1].[::-1])\n    return ''.join(result), len(''.join(result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931197166442871,
            0.986702561378479,
            0.9889633059501648,
            0.9916584491729736,
            0.9902177453041077,
            0.9853553771972656,
            0.9919785261154175,
            0.993097186088562,
            0.9935678243637085,
            0.9925161004066467,
            0.9844464659690857,
            0.9917919039726257,
            0.9901020526885986,
            0.9920403361320496,
            0.9869023561477661,
            0.9925061464309692,
            0.9929201006889343,
            0.9923948049545288,
            0.9871771931648254,
            0.9888576865196228
        ]
    },
    "2934": {
        "similarity": 0.9959090352058411,
        "body": "    N, M = map(int, input().split())\n    dp = [[0]*(M+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(i+1):\n            if i == j:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += dp[i-1][min(j, i-j)] * 2\n    print(dp[N][M]%10**9)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954858422279358,
            0.9950511455535889,
            0.9806073904037476,
            0.9930532574653625,
            0.994534969329834,
            0.9897159934043884,
            0.9938730001449585,
            0.9948919415473938,
            0.9916082620620728,
            0.9927583336830139,
            0.9951189756393433,
            0.9926977753639221,
            0.9951028227806091,
            0.9949387907981873,
            0.9911676049232483,
            0.9954176545143127,
            0.9955297708511353,
            0.9933050870895386,
            0.9959090352058411,
            0.9958056211471558
        ]
    },
    "1745": {
        "similarity": 0.9970088601112366,
        "body": "    n, m = map(int, input().split())\n    city_map = [list(input()) for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = [[False]*m for _ in range(n)]\n    result = set()\n    \n        if x < 0 or x >= n or y < 0 or y >= m:\n            return\n        if city_map[x][y] == '#' or visited[x][y]:\n            return\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x+dx, y+dy\n            if 0 <= nx < n and 0 <= ny < m and city_map[nx][ny] == '.':\n                result.add((nx, ny))\n                dfs(nx, ny)\n    \n    for i in range(n):\n        dfs(i, 0)\n    for j in range(m):\n        dfs(0, j)\n    print(len(result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948128461837769,
            0.9937117695808411,
            0.9938782453536987,
            0.9958949089050293,
            0.9963117241859436,
            0.9956853985786438,
            0.9952902793884277,
            0.9962919354438782,
            0.9970088601112366,
            0.9949209094047546,
            0.9963902831077576,
            0.9948158264160156,
            0.9954813718795776,
            0.9964092969894409,
            0.9933758974075317,
            0.9957353472709656,
            0.9952330589294434,
            0.9968908429145813,
            0.9880015850067139,
            0.9951605796813965
        ]
    },
    "1422": {
        "similarity": 0.9958570599555969,
        "body": "    w = [i for i in range(1, 11) if input()[9-i] == '1']\n    m = int(input())\n    if len(w) < m:\n        return \"NO\"\n    res = []\n    left_sum = 0\n    right_sum = 0\n    for _ in range(m):\n        if (left_sum <= right_sum):\n            res.append(min([i for i in w if i > left_sum-right_sum and i not in res]))\n            left_sum += res[-1]\n        else:\n            res.append(min([i for i in w if i > right_sum-left_sum and i not in res]))\n            right_sum += res[-1]\n    print(\"YES\")\n    print(*res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955281615257263,
            0.9930490255355835,
            0.9955180287361145,
            0.9953593015670776,
            0.9871500134468079,
            0.99202960729599,
            0.9949489235877991,
            0.9945464134216309,
            0.9949026703834534,
            0.9957570433616638,
            0.9958570599555969,
            0.9956056475639343,
            0.9956590533256531,
            0.9953759908676147,
            0.9947013854980469,
            0.9947737455368042,
            0.9916114807128906,
            0.9946036338806152,
            0.9952687621116638,
            0.9890509247779846
        ]
    },
    "1763": {
        "similarity": 0.9945626854896545,
        "body": "    N, A, R, M = map(int, input().split())\n    heights = list(map(int, input().split()))\n    min_height = min(heights)\n    return sum(max(0, height - min_height) * (A if i == 0 else R) for i, height in enumerate(heights))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939265251159668,
            0.9934221506118774,
            0.9895879030227661,
            0.9858558177947998,
            0.9933820962905884,
            0.9942467212677002,
            0.9933480024337769,
            0.9839345216751099,
            0.9945626854896545,
            0.9894410967826843,
            0.9944459795951843,
            0.9850780963897705,
            0.9865970611572266,
            0.9934597015380859,
            0.9899946451187134,
            0.9933463931083679,
            0.9926867485046387,
            0.9898257255554199,
            0.9924001097679138,
            0.9926982522010803
        ]
    },
    "974": {
        "similarity": 0.9967439770698547,
        "body": "    n = int(input())\n    added = set()\n    removed = []\n    for _ in range(2*n):\n        command = input().split()[0]\n        if command == 'add':\n            x = int(input())\n            while x not in added:\n                added.add(x)\n        else:\n            removed.append(int(input()))\n    return sum(1 for i in range(n) if i+1 not in removed[:i])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967439770698547,
            0.996455729007721,
            0.995987057685852,
            0.9960341453552246,
            0.9962313771247864,
            0.9941846132278442,
            0.9939075112342834,
            0.9931691884994507,
            0.9945568442344666,
            0.995428204536438,
            0.9956976175308228,
            0.9946568012237549,
            0.9942700266838074,
            0.9952294230461121,
            0.9963732361793518,
            0.9925931692123413,
            0.9965029358863831,
            0.9951726794242859,
            0.9955849051475525,
            0.9962778687477112
        ]
    },
    "2343": {
        "similarity": 0.9968892335891724,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if 2**n < 4:\n            print(\"YES\", round(n).bit_length() - 1)\n        else:\n            print(\"NO\")",
        "result": "timed out",
        "similarities": [
            0.9958282113075256,
            0.9943397045135498,
            0.9929212331771851,
            0.9967211484909058,
            0.9961283802986145,
            0.9955260753631592,
            0.9953386187553406,
            0.9941084980964661,
            0.9947486519813538,
            0.9966309070587158,
            0.9931351542472839,
            0.994744062423706,
            0.9934360980987549,
            0.9963481426239014,
            0.995612621307373,
            0.9929091930389404,
            0.9955683350563049,
            0.9967380166053772,
            0.9952871203422546,
            0.9968892335891724
        ]
    },
    "627": {
        "similarity": 0.9948644042015076,
        "body": "n = int(input())\ns = input()\nif len(set(s)) == 1:\n    print(s[:-1])\nelse:\n    sorted_s = \"\".join(sorted(s))\n    if s.index(sorted_s[0]) == 0 or s.index(sorted_s[0]) == n - 1:\n        print(s[:-1])\n    else:\n        print(sorted_s)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9945610761642456,
            0.9932162761688232,
            0.9926382303237915,
            0.9938526153564453,
            0.991385817527771,
            0.9930782318115234,
            0.9933420419692993,
            0.9941033124923706,
            0.9919101595878601,
            0.9936903119087219,
            0.9886678457260132,
            0.9948644042015076,
            0.9943260550498962,
            0.991717517375946,
            0.9939517974853516,
            0.9908351898193359,
            0.9945076704025269,
            0.9933132529258728,
            0.9920023679733276,
            0.9937992095947266
        ]
    },
    "1655": {
        "similarity": 0.9956833720207214,
        "body": "n = int(input())\nls = list(map(int, input().split()))\nalive = n\nfor i in range(n):\n    for j in range(i-Ls[i]+1):\n        if alive > 0:\n            alive -= 1\nprint(alive)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944825768470764,
            0.9945098757743835,
            0.9934549927711487,
            0.9927354454994202,
            0.9941274523735046,
            0.9940123558044434,
            0.9954730868339539,
            0.9953319430351257,
            0.9954447746276855,
            0.993789792060852,
            0.9929452538490295,
            0.9951130747795105,
            0.9956833720207214,
            0.9949471354484558,
            0.9935768842697144,
            0.9937099814414978,
            0.9950288534164429,
            0.9946827292442322,
            0.9935944080352783,
            0.9910388588905334
        ]
    },
    "2124": {
        "similarity": 0.9984086751937866,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        users = set(input().split())\n        m = int(input())\n        messages = []\n        for i in range(m):\n            line = input()\n            if line.startswith('?'):\n                messages.append(('Unknown', line[2:]))\n            else:\n                user, text = line.split(':')\n                messages.append((user, text))\n        senders = [users.pop(0)]\n        prev_sender = None\n        result = []\n        for message in messages:\n            if message[0] == 'Unknown':\n                if len(users) > 0 and prev_sender not in users:\n                    sender = users.pop(0)\n                else:\n                    print(\"Impossible\")\n                    return\n                result.append((sender, message[1]))\n            else:\n                if message[0] != prev_sender:\n                    result.append(message)\n                else:\n                    print(\"Impossible\")\n                    return\n            prev_sender = message[0]\n        for message in result:\n            print(f\"{message[0]}:{message[1]}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959904551506042,
            0.9981288909912109,
            0.9975988268852234,
            0.9983568787574768,
            0.9979033470153809,
            0.9984086751937866,
            0.9975394010543823,
            0.9965494871139526,
            0.9969281554222107,
            0.9971360564231873,
            0.9976713061332703,
            0.9979093670845032,
            0.9982597827911377,
            0.9979609251022339,
            0.9982213377952576,
            0.998306155204773,
            0.9983338117599487,
            0.9972341656684875,
            0.998148500919342,
            0.9976710081100464
        ]
    },
    "1093": {
        "similarity": 0.9973164796829224,
        "body": "    n, m = map(int, input().split())\n    hrebet = [list(input()) for _ in range(n)]\n    max_ascent = 0\n    max_descent = 0\n    current_height = hrebet[0].index('*')\n    for i in range(1, n):\n        ascent = current_height - hrebet[i].index('*')\n        descent = hrebet[i-1].index('*') - current_height\n        max_ascent = max(max_ascent, ascent)\n        max_descent = max(max_descent, descent if ascent > 0 else 0)\n        current_height = hrebet[i].index('*')\n    print(max_ascent, max_descent)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960566163063049,
            0.9939972758293152,
            0.9960548281669617,
            0.9973164796829224,
            0.9969319701194763,
            0.9969824552536011,
            0.9960098266601562,
            0.9954076409339905,
            0.9970721006393433,
            0.9970870018005371,
            0.9956854581832886,
            0.9972959160804749,
            0.9960334300994873,
            0.9967372417449951,
            0.994887113571167,
            0.9972273111343384,
            0.9914751648902893,
            0.9963830709457397,
            0.9921389222145081,
            0.996071994304657
        ]
    },
    "899": {
        "similarity": 0.9969847798347473,
        "body": "from collections import deque\n    n, m = map(int, input().split())\n    g = {}\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        if a not in g:\n            g[a] = []\n        if b not in g:\n            g[b] = []\n        g[a].append((b, c))\n        g[b].append((a, c))\n    res = 0\n    for i in range(1, n):\n        seen = set()\n        q = deque([(i, float('inf'), [i])])\n        while q:\n            v, d, path = q.popleft()\n            if v not in seen:\n                seen.add(v)\n                for w, c in g.get(v, []):\n                    if w != i and (w, d - c) not in seen:\n                        if w == n-1:\n                            return res\n                        q.append((w, d-c, path+[w]))\n        res += len(g[i])\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961457848548889,
            0.9966703057289124,
            0.9964820742607117,
            0.9967646598815918,
            0.9958663582801819,
            0.9958516359329224,
            0.996555507183075,
            0.995822012424469,
            0.9962121844291687,
            0.9969847798347473,
            0.9962841868400574,
            0.9965816140174866,
            0.9951472878456116,
            0.9944145679473877,
            0.9965705871582031,
            0.996364414691925,
            0.9963377714157104,
            0.9939311146736145,
            0.9961182475090027,
            0.9966490864753723
        ]
    },
    "551": {
        "similarity": 0.9971153736114502,
        "body": "    n = int(input())\n    y = list(map(int, input().split()))\n    y.sort()\n    for i in range(len(y) - 1):\n        if y[i + 1] - y[i] != y[-1] - y[0]:\n            print(\"Yes\")\n            return\n    print(\"No\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9945869445800781,
            0.9969209432601929,
            0.9960936307907104,
            0.9969155192375183,
            0.9952709674835205,
            0.9967426657676697,
            0.9942123293876648,
            0.9958750009536743,
            0.9936655759811401,
            0.9968175292015076,
            0.9947461485862732,
            0.9951105713844299,
            0.9959918856620789,
            0.9956408143043518,
            0.9971153736114502,
            0.9906281232833862,
            0.9943273663520813,
            0.9964805245399475,
            0.9946985840797424,
            0.9965077638626099
        ]
    },
    "1772": {
        "similarity": 0.9963582754135132,
        "body": "    n, *a = map(int, input().split())\n    a.sort()\n    res = 0\n    i = 0\n    while i < len(a):\n        if i + 2 <= len(a) and (a[i] + a[i+1] + a[i+2]) % 2 != 0:\n            i += 3\n        else:\n            res += 1\n            i += 1\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963393807411194,
            0.9925724864006042,
            0.9950444102287292,
            0.9958052635192871,
            0.9944719076156616,
            0.993479311466217,
            0.9937000274658203,
            0.9956333637237549,
            0.9941173195838928,
            0.9955824613571167,
            0.9959471821784973,
            0.9956285357475281,
            0.9962750673294067,
            0.9956273436546326,
            0.9960960745811462,
            0.995177149772644,
            0.9934724569320679,
            0.9943286776542664,
            0.9963582754135132,
            0.9924388527870178
        ]
    },
    "1339": {
        "similarity": 0.9958357810974121,
        "body": "n = int(input())\nfor i in range(n):\n    l, r = map(int, input().split())\n    if all(c >= l and d <= r for j, (c, d) in enumerate([int(x) for x in zip(*[map(int, input().split()) for _ in range(n)])]) if j != i):\n        print(i + 1)\n        break\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943761229515076,
            0.9933255910873413,
            0.9950875043869019,
            0.9941563010215759,
            0.9945895671844482,
            0.9941504597663879,
            0.9953928589820862,
            0.9943739175796509,
            0.9947004914283752,
            0.9956544637680054,
            0.9955111145973206,
            0.9933165311813354,
            0.9943217039108276,
            0.9954004883766174,
            0.9952563047409058,
            0.9947910308837891,
            0.9949188232421875,
            0.9958357810974121,
            0.9954609274864197,
            0.993324875831604
        ]
    },
    "440": {
        "similarity": 0.995538592338562,
        "body": "    n = int(input())\n    s = input()\n    i, j = 0, 0\n    while j < n:\n        if 'aeiouy'.index(s[j]) < 'aeiouy'.index(s[i]):\n            j += 1\n        else:\n            i += 1\n            j = max(0, j - 1)\n    print(''.join(s[:i] + s[j:]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938715100288391,
            0.9924268126487732,
            0.995538592338562,
            0.9932063221931458,
            0.9947029948234558,
            0.9927031993865967,
            0.9941062927246094,
            0.9925708770751953,
            0.9921578168869019,
            0.9912427663803101,
            0.992933988571167,
            0.9944478869438171,
            0.9940621256828308,
            0.9922494292259216,
            0.9935846924781799,
            0.9945753216743469,
            0.9927658438682556,
            0.9946370720863342,
            0.9953330159187317,
            0.9940361380577087
        ]
    },
    "2801": {
        "similarity": 0.9969903826713562,
        "body": "n, m = map(int, input().split())\nc = list(map(int, input().split()))\ngraph = {}\nfor _ in range(m):\n    s, t = map(int, input().split())\n    if s not in graph:\n        graph[s] = []\n    graph[s].append(t)\nmax_satisfaction = 0\n    global max_satisfaction\n    nonlocal current_satisfaction\n    max_satisfaction = max(max_satisfaction, current_satisfaction)\n    for next_stall in graph.get(current_stall, []):\n        if c[next_stall] * (1 / 2 ** ((next_stall - current_stall) % n)) > current_satisfaction:\n            dfs(next_stall, current_satisfaction + c[next_stall] * (1 / 2 ** ((next_stall - current_stall) % n)))\ndfs(0, 0)\nprint(max_satisfaction)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9835847616195679,
            0.9965398907661438,
            0.9966394305229187,
            0.99346923828125,
            0.9957862496376038,
            0.9954819083213806,
            0.9964398741722107,
            0.9958763122558594,
            0.9954179525375366,
            0.9951537251472473,
            0.994223952293396,
            0.9942025542259216,
            0.9957695007324219,
            0.9958508014678955,
            0.9962565898895264,
            0.9963488578796387,
            0.9963641166687012,
            0.9949616193771362,
            0.9969903826713562,
            0.995347797870636
        ]
    },
    "2749": {
        "similarity": 0.996488094329834,
        "body": "    h, w = map(int, input().split())\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert sum(a) == h * w\n    colors = [[None] * w for _ in range(h)]\n    for i in range(n):\n        row = 0\n        for j in range(a[i]):\n            if not any(colors[k][j] == i + 1 for k in range(h)):\n                colors[row][j] = i + 1\n                row += (1 - (row < h // 2)) * 2\n    for row in colors:\n        print(' '.join(str(cell) for cell in row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948678612709045,
            0.993457019329071,
            0.9937898516654968,
            0.9946949481964111,
            0.9959873557090759,
            0.99399334192276,
            0.9934648275375366,
            0.9954659342765808,
            0.9920302033424377,
            0.996488094329834,
            0.9943439960479736,
            0.9958173632621765,
            0.9935961365699768,
            0.9883597493171692,
            0.995236337184906,
            0.9958226084709167,
            0.9940029978752136,
            0.9931161999702454,
            0.9955102801322937,
            0.9954902529716492
        ]
    },
    "2319": {
        "similarity": 0.9963777661323547,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s, t = input(), input()\n        operations = 0\n        while s != t:\n            if s.startswith(t):\n                break\n            for i in range(n):\n                if s[i:] + s[:i] == t:\n                    s = s[i:] + s[:i]\n                    operations += 1\n                    break\n            else:\n                s = s[1:] + s[0]\n                operations += 1\n        print(operations if s == t else -1)",
        "result": "timed out",
        "similarities": [
            0.9923878908157349,
            0.9903526306152344,
            0.9951053261756897,
            0.9957059621810913,
            0.9958368539810181,
            0.996225893497467,
            0.9962347149848938,
            0.9944602847099304,
            0.9960161447525024,
            0.9949405193328857,
            0.9956063032150269,
            0.9960698485374451,
            0.9947795867919922,
            0.9963777661323547,
            0.9933063387870789,
            0.9904227256774902,
            0.9957131147384644,
            0.9961214661598206,
            0.9947131276130676,
            0.9935939311981201
        ]
    },
    "2121": {
        "similarity": 0.9968547821044922,
        "body": "from collections import deque\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nedges = [[] for _ in range(n+1)]\nfor i in range(n-1):\n    u, v = map(int, input().split())\n    edges[u].append(v)\n    edges[v].append(u)\n\n    global min_grade\n    queue = deque([(node, a[node], [a[node]])])\n    while queue:\n        node, grade, path = queue.popleft()\n        for neighbor in edges[node]:\n            if neighbor != parent and len(path) < k:\n                queue.append((neighbor, min(grade, a[neighbor]), path + [a[neighbor]]))\n        else:\n            min_grade = min(min_grade, min(path))\n\nmin_grade = float('inf')\nfor i in range(n+1):\n    dfs(i, -1)\nprint(min_grade)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952055215835571,
            0.9950423836708069,
            0.9968547821044922,
            0.9963711500167847,
            0.9960624575614929,
            0.9967527985572815,
            0.9965284466743469,
            0.9927461743354797,
            0.9935111999511719,
            0.993079423904419,
            0.9956743121147156,
            0.9956101179122925,
            0.9961267113685608,
            0.9966403841972351,
            0.9966091513633728,
            0.9939868450164795,
            0.9937747120857239,
            0.9962742328643799,
            0.9921495318412781,
            0.992432177066803
        ]
    },
    "2617": {
        "similarity": 0.9957209229469299,
        "body": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = 0\n    mass = [1]\n    while sum(mass) < n:\n        d += 1\n        new_mass = []\n        for m in mass:\n            if m > 2:\n                for i in range(2):\n                    new_mass.append((m + 1) / 2)\n            else:\n                new_mass.append(m + 1)\n        mass = new_mass\n    print(d, end=' ')\n    print(*[int(i) if j > 0 else 0 for j, i in zip([*range(d)], [i * 2 for i in mass])])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951109886169434,
            0.9957209229469299,
            0.9952552318572998,
            0.9952276349067688,
            0.9928120970726013,
            0.9925051331520081,
            0.9912824034690857,
            0.9912738800048828,
            0.9862238168716431,
            0.9954856038093567,
            0.9916476011276245,
            0.9923164248466492,
            0.9950875043869019,
            0.9951083660125732,
            0.9913051128387451,
            0.9955442547798157,
            0.995191752910614,
            0.9945377707481384,
            0.993941068649292,
            0.99370938539505
        ]
    },
    "175": {
        "similarity": 0.9981913566589355,
        "body": "a, b = map(int, input().split())\nwhile a > 0 and b > 0:\n    if a >= 2*b:\n        a -= 2*b\n    elif b >= 2*a:\n        b -= 2*a\n    else:\n        break\nprint(a, b)",
        "result": "timed out",
        "similarities": [
            0.9979037046432495,
            0.9981913566589355,
            0.9965900778770447,
            0.9981651306152344,
            0.9977543354034424,
            0.9965900778770447,
            0.9979037046432495,
            0.9936255216598511,
            0.9948949217796326,
            0.9949464201927185,
            0.9976392984390259,
            0.9979037046432495,
            0.9976674914360046,
            0.9979037046432495,
            0.9980782866477966,
            0.9935724139213562,
            0.9981913566589355,
            0.9979037046432495,
            0.9979037046432495,
            0.9979708790779114
        ]
    },
    "995": {
        "similarity": 0.9971715211868286,
        "body": "    n = int(input())\n    A = list(map(int, input().split()))\n    res = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            group_len = j - i\n            count = 0\n            for k in range(group_len):\n                if int(math.sqrt(A[i + k] * A[i + k])) ** 2 != A[i + k] * A[i + k]:\n                    break\n                count += 1\n            res[count] += group_len\n    print(*res[1:])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971715211868286,
            0.9910535216331482,
            0.9964131712913513,
            0.9966116547584534,
            0.9964562654495239,
            0.9962493777275085,
            0.9958716034889221,
            0.9939330220222473,
            0.9961056113243103,
            0.9968318939208984,
            0.9969806671142578,
            0.996435284614563,
            0.9963563680648804,
            0.9923340678215027,
            0.9921777844429016,
            0.9956461191177368,
            0.9963063597679138,
            0.9944556355476379,
            0.9966830015182495,
            0.9968339800834656
        ]
    },
    "582": {
        "similarity": 0.9955072999000549,
        "body": "n = int(input())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nmin_time = 0\nfor i in range(1, n):\n    if a[i] == a[0]:\n        min_time += t[i]\n\nprint(min_time)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947034120559692,
            0.9954057931900024,
            0.9944921731948853,
            0.9903602600097656,
            0.9942303895950317,
            0.9955072999000549,
            0.9934144616127014,
            0.9947524070739746,
            0.9936636090278625,
            0.9936826825141907,
            0.9949597120285034,
            0.994175136089325,
            0.9950539469718933,
            0.9936617612838745,
            0.98614102602005,
            0.9890450239181519,
            0.9944917559623718,
            0.993426501750946,
            0.9939287304878235,
            0.9901436567306519
        ]
    },
    "1402": {
        "similarity": 0.9933651685714722,
        "body": "    n = int(input())\n    s = input()\n    w = input()\n    ans = 1\n    for i in range(n):\n        if s[i] != '?':\n            continue\n        if w[i] == '?':\n            continue\n        if ord(s[i]) > ord(w[i]):\n            ans *= (10 - int(w[i])) * (9) ** (n - i - 1)\n        elif ord(s[i]) < ord(w[i]):\n            ans *= (10 - int(s[i])) * (9) ** (n - i - 1)\n    print(ans % 1000000007)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9896295666694641,
            0.9920849204063416,
            0.9863508939743042,
            0.9878249764442444,
            0.9923530220985413,
            0.9908232688903809,
            0.990711510181427,
            0.9890026450157166,
            0.9898039102554321,
            0.9887416362762451,
            0.9933364391326904,
            0.9923728108406067,
            0.9919520020484924,
            0.9933651685714722,
            0.9862124919891357,
            0.9929772615432739,
            0.9899112582206726,
            0.9859324097633362,
            0.9930504560470581,
            0.9878510236740112
        ]
    },
    "1141": {
        "similarity": 0.996793270111084,
        "body": "s = input().strip()\nm = int(input())\nfor _ in range(m):\n    l, r, c1, c2 = [char for char in input().split()]\n    s = s[:l-1] + c2 * (r - l + 1) + s[r:]\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995431125164032,
            0.9943901896476746,
            0.9952164888381958,
            0.9937531352043152,
            0.9963761568069458,
            0.9965576529502869,
            0.9963232278823853,
            0.9947739839553833,
            0.9965818524360657,
            0.9961075186729431,
            0.9962485432624817,
            0.9962485432624817,
            0.996793270111084,
            0.9959347248077393,
            0.9931831359863281,
            0.9963230490684509,
            0.9964868426322937,
            0.9920282959938049,
            0.9966899752616882,
            0.9953065514564514
        ]
    },
    "2836": {
        "similarity": 0.9951927065849304,
        "body": "N = int(input())\nP = list(map(int, input().split()))\nA, B = map(int, input().split())\nX = A + ((B - A) // 2)\nfor i in range(A, B+1):\n    if i % 2 != 0 and all(abs(i-Pj) > abs(X-Pj) for Pj in P):\n        X = i\nprint(X)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9902390241622925,
            0.9904679656028748,
            0.9906339049339294,
            0.9914237856864929,
            0.9941953420639038,
            0.9925460815429688,
            0.994269847869873,
            0.994472324848175,
            0.9919423460960388,
            0.9946514964103699,
            0.993553876876831,
            0.9942246675491333,
            0.9916502237319946,
            0.9902669191360474,
            0.9943718314170837,
            0.9861047863960266,
            0.9942793846130371,
            0.991810142993927,
            0.9942346215248108,
            0.9951927065849304
        ]
    },
    "1109": {
        "similarity": 0.9952197074890137,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    diff = [a[i] - ((i // k) % 2) for i in range(n)]\n    return sum(1 for x in diff if x != 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927924275398254,
            0.9928479790687561,
            0.9946443438529968,
            0.9933580160140991,
            0.9952197074890137,
            0.9928892254829407,
            0.9943405985832214,
            0.9936113953590393,
            0.9863831400871277,
            0.9929363131523132,
            0.9913416504859924,
            0.9939010143280029,
            0.9940248131752014,
            0.993253231048584,
            0.9937071800231934,
            0.9906695485115051,
            0.9936794638633728,
            0.9929388761520386,
            0.9932104349136353,
            0.9946612119674683
        ]
    },
    "2125": {
        "similarity": 0.9949323534965515,
        "body": "    n, m = map(int, input().split())\n    blanket = [list(input()) for _ in range(n)]\n    flags = set()\n    for i in range(n-2):\n        for j in range(m-2):\n            top_color = blanket[i][j]\n            mid_color = blanket[i+1][j:j+m-1].count(top_color) // (m-2)\n            bottom_color = blanket[i+2][j]\n            if top_color != mid_color and top_color != bottom_color and mid_color != bottom_color:\n                flags.add(f\"({i},{j})\")\n    print(len(flags))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9900215864181519,
            0.9945355653762817,
            0.9945505857467651,
            0.9947415590286255,
            0.9926627278327942,
            0.9902170896530151,
            0.9940527677536011,
            0.9887244701385498,
            0.9944199323654175,
            0.9928725361824036,
            0.9910609722137451,
            0.9943313598632812,
            0.9943388104438782,
            0.9893377423286438,
            0.9896486401557922,
            0.9949323534965515,
            0.9946759939193726,
            0.9924737811088562,
            0.991359531879425,
            0.9864387512207031
        ]
    },
    "1746": {
        "similarity": 0.9956125020980835,
        "body": "    n = int(input())\n    parent_map = {}\n    for _ in range(n-1):\n        p = int(input())\n        if p not in parent_map:\n            parent_map[p] = []\n        parent_map[p].append(int(input()))\n    for child in parent_map.get(1, []):\n        if len(parent_map.get(child, [])) >= 3:\n            return \"Yes\"\n    return \"No\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932065606117249,
            0.9929514527320862,
            0.9934775829315186,
            0.9944486021995544,
            0.9927257895469666,
            0.9956125020980835,
            0.9935763478279114,
            0.9931232929229736,
            0.9937365651130676,
            0.9954140186309814,
            0.9935670495033264,
            0.9952916502952576,
            0.9942266345024109,
            0.9937952160835266,
            0.9896884560585022,
            0.9932307004928589,
            0.9938886761665344,
            0.9887846112251282,
            0.9904713034629822,
            0.9935437440872192
        ]
    },
    "1294": {
        "similarity": 0.994945228099823,
        "body": "    t = int(input())\n    for _ in range(t):\n        s = input()\n        res = ''\n        seen = set()\n        for c in s:\n            if c*2 not in seen:\n                seen.add(c)\n                res += c\n        print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948668479919434,
            0.9938602447509766,
            0.9853835105895996,
            0.993078351020813,
            0.9931684136390686,
            0.9944891929626465,
            0.994945228099823,
            0.9932259321212769,
            0.9933820962905884,
            0.9933593273162842,
            0.9905765056610107,
            0.9918434619903564,
            0.9931907653808594,
            0.9945646524429321,
            0.9913396239280701,
            0.9850950837135315,
            0.9899884462356567,
            0.9939436912536621,
            0.9948238730430603,
            0.9924338459968567
        ]
    },
    "1159": {
        "similarity": 0.996157705783844,
        "body": "    m = 0\n    while not is_prime(m) or m < 2:\n        m += 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if is_prime(i * j - (i + j - 2)) and len([k for k in range(n) if [i, j].count(k) > 0]) == i:\n                yield m\n                yield f\"{i} {j}\"\n                if all(is_prime(d) for d in ([*range(1, n + 1)].count(i) for i in range(n))):\n                    return\n\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934379458427429,
            0.9930214285850525,
            0.994706392288208,
            0.996157705783844,
            0.9927646517753601,
            0.995398759841919,
            0.9952775835990906,
            0.9892657399177551,
            0.9943254590034485,
            0.9934107065200806,
            0.9953799843788147,
            0.9949225187301636,
            0.99554044008255,
            0.9954833984375,
            0.9924235939979553,
            0.9956160187721252,
            0.995843768119812,
            0.9944217205047607,
            0.9953762888908386,
            0.995249330997467
        ]
    },
    "2025": {
        "similarity": 0.9985154867172241,
        "body": "    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        if n < 2:\n            print(-1)\n        else:\n            count = 0\n            i = 2\n            while i * i <= n:\n                while n % i:\n                    i += 1\n                n //= i\n                count += 1\n            if n > 1:\n                count += 1\n            print(count)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9974114298820496,
            0.9985154867172241,
            0.9985154867172241,
            0.9985154867172241,
            0.9984247088432312,
            0.9970626831054688,
            0.9983147382736206,
            0.9973022937774658,
            0.9983147382736206,
            0.9974114298820496,
            0.9983147382736206,
            0.9984164237976074,
            0.9985154867172241,
            0.9983147382736206,
            0.9983147382736206,
            0.9983147382736206,
            0.9984247088432312,
            0.9983147382736206,
            0.9985154867172241,
            0.9965983033180237
        ]
    },
    "1429": {
        "similarity": 0.9969844818115234,
        "body": "    N, S = map(str.strip, input().split())\n    N = int(N)\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            T = S[i:j+1]\n            rev_T = ''.join([{'A':'T', 'T':'A', 'C':'G', 'G':'C'}.get(c) for c in T][::-1])\n            if rev_T in S:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9926223754882812,
            0.9961899518966675,
            0.9967812299728394,
            0.9958629608154297,
            0.9965035319328308,
            0.9957590699195862,
            0.9963873624801636,
            0.9960682392120361,
            0.9962404370307922,
            0.9965978860855103,
            0.9964085817337036,
            0.9963873624801636,
            0.9956275820732117,
            0.9964483380317688,
            0.9969844818115234,
            0.9969822764396667,
            0.9964758157730103,
            0.9934187531471252,
            0.9934465289115906,
            0.9896209239959717
        ]
    },
    "1950": {
        "similarity": 0.9911292195320129,
        "body": "n = int(input())\na = list(map(int, input().split()))\ntotal_penalty = 0\nfor i in range(n):\n    total_penalty += a[i]\nprint(total_penalty)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9911292195320129,
            0.9852399230003357,
            0.9900469779968262,
            0.9903976321220398,
            0.9299920797348022,
            0.97622150182724,
            0.988622784614563,
            0.9805124998092651,
            0.9881325960159302,
            0.9906556010246277,
            0.990482747554779,
            0.9833332896232605,
            0.9761720299720764,
            0.9903976321220398,
            0.9859741926193237,
            0.9884901642799377,
            0.9879521131515503,
            0.9906556010246277,
            0.9869450926780701,
            0.9894624948501587
        ]
    },
    "631": {
        "similarity": 0.9976726174354553,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        total = 0\n        for i in range(n):\n            total += sum((a[j] / (j + 1)) for j in range(i, n))\n        print('YES' if total == m else 'NO')",
        "result": "passed",
        "similarities": [
            0.9958556294441223,
            0.9945811033248901,
            0.9972165822982788,
            0.9949029684066772,
            0.9975128173828125,
            0.9973640441894531,
            0.9958263039588928,
            0.9971082806587219,
            0.9975722432136536,
            0.9973083138465881,
            0.9976539611816406,
            0.9973077178001404,
            0.9976726174354553,
            0.989154040813446,
            0.9976268410682678,
            0.9974432587623596,
            0.996118426322937,
            0.9970951080322266,
            0.9975467324256897,
            0.9973747730255127
        ]
    },
    "2480": {
        "similarity": 0.9972565174102783,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        s = sum(a[i:])\n        for j in range(i, n):\n            if s % k == j - i + 1:\n                count += 1\n    print(count)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9947218894958496,
            0.9971725940704346,
            0.9937483072280884,
            0.9968644976615906,
            0.9969823956489563,
            0.9961903095245361,
            0.9941880106925964,
            0.9949944019317627,
            0.9954560995101929,
            0.9970871806144714,
            0.997131884098053,
            0.9964590668678284,
            0.9972136616706848,
            0.996051013469696,
            0.9943813681602478,
            0.9950371980667114,
            0.9972565174102783,
            0.9972513914108276,
            0.9951164126396179,
            0.9968991875648499
        ]
    },
    "2363": {
        "similarity": 0.9981063008308411,
        "body": "    n = int(input())\n    for _ in range(n):\n        a, b = map(int, input().split())\n        operations = 0\n        while b > a:\n            b -= abs(a - b)\n            operations += 1\n        print(operations)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980189800262451,
            0.9975681304931641,
            0.9959054589271545,
            0.9979605674743652,
            0.9901344180107117,
            0.9974783062934875,
            0.9973263144493103,
            0.9979982972145081,
            0.998045802116394,
            0.9977493286132812,
            0.9974768757820129,
            0.9979192018508911,
            0.9970877766609192,
            0.9977493286132812,
            0.9975368976593018,
            0.9966365694999695,
            0.9981063008308411,
            0.998027503490448,
            0.996376633644104,
            0.9977493286132812
        ]
    },
    "909": {
        "similarity": 0.9957817792892456,
        "body": "    return max((a * b) + c, a + (b * c), a * (b + c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9883073568344116,
            0.994681715965271,
            0.9957817792892456,
            0.9925035238265991,
            0.9926171898841858,
            0.9953094124794006,
            0.9949849843978882,
            0.9945480823516846,
            0.9922534823417664,
            0.9950286746025085,
            0.9917404055595398,
            0.9937615990638733,
            0.9920728802680969,
            0.9951952695846558,
            0.9929311871528625,
            0.98858243227005,
            0.9944815635681152,
            0.9922260642051697,
            0.9955300092697144,
            0.9955300092697144
        ]
    },
    "154": {
        "similarity": 0.9888601899147034,
        "body": "    n = int(input())\n    mod = 998244353\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = sum(dp[j-1] for j in range(i) if i % 2 != j % 2 or i == 1) % mod\n    print(dp[n])",
        "result": "timed out",
        "similarities": [
            0.9864640831947327,
            0.9650371074676514,
            0.9840071797370911,
            0.9884051084518433,
            0.9872263073921204,
            0.9628112316131592,
            0.9872298240661621,
            0.9864735007286072,
            0.9883981347084045,
            0.9881919026374817,
            0.9690723419189453,
            0.9646572470664978,
            0.9704748392105103,
            0.9888601899147034,
            0.9841099977493286,
            0.9671632647514343,
            0.9878556132316589,
            0.9882482290267944,
            0.9865800738334656,
            0.9710700511932373
        ]
    },
    "39": {
        "similarity": 0.998559832572937,
        "body": "    s = input()\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring != substring[::-1]:\n                max_length = max(max_length, len(substring))\n    print(max_length or 0)",
        "result": "passed",
        "similarities": [
            0.9983231425285339,
            0.9972632527351379,
            0.9973810315132141,
            0.9979034066200256,
            0.9979343414306641,
            0.9981986880302429,
            0.9978649616241455,
            0.9975505471229553,
            0.9982578754425049,
            0.9975234866142273,
            0.9977617859840393,
            0.9953802824020386,
            0.9979080557823181,
            0.9972785115242004,
            0.99762362241745,
            0.9975616335868835,
            0.998559832572937,
            0.9981634020805359,
            0.9965721964836121,
            0.9976746439933777
        ]
    },
    "1885": {
        "similarity": 0.9932547211647034,
        "body": "    n = int(input())\n    total = 1\n    for i in range(2, n+1):\n        total *= i\n    print(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9894699454307556,
            0.9915298819541931,
            0.9908429980278015,
            0.9915298819541931,
            0.9920337200164795,
            0.9890208840370178,
            0.9915298819541931,
            0.9924286603927612,
            0.9894699454307556,
            0.9886546730995178,
            0.9927669167518616,
            0.992710292339325,
            0.9894699454307556,
            0.9917954206466675,
            0.9909862875938416,
            0.9922808408737183,
            0.9932547211647034,
            0.9894699454307556,
            0.9927099347114563,
            0.989937424659729
        ]
    },
    "1180": {
        "similarity": 0.9968369007110596,
        "body": "    n, k = map(int, input().split())\n    s = str(input())\n    res = 0\n    for i in range(k):\n        a = int(s[:i+1])\n        b = int(''.join([str(int(x)) if x != '0' else '' for x in s[i+1:]]))\n        res += (a + b)\n    print(res % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959860444068909,
            0.9942217469215393,
            0.9957243204116821,
            0.9918504357337952,
            0.9937940239906311,
            0.9963700175285339,
            0.9963327050209045,
            0.9949803948402405,
            0.9892773032188416,
            0.9946698546409607,
            0.9958088397979736,
            0.9968369007110596,
            0.9959961771965027,
            0.9948328137397766,
            0.9946255087852478,
            0.996101975440979,
            0.9946526288986206,
            0.9944428205490112,
            0.9937594532966614,
            0.9966953992843628
        ]
    },
    "1856": {
        "similarity": 0.9916875958442688,
        "body": "    n = int(input())\n    passwords = [input().strip() for _ in range(n)]\n    min_count = n\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if set(passwords[i]).intersection(set(passwords[j])):\n                count += 1\n        min_count = min(min_count, count)\n    print(min_count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9873205423355103,
            0.9844334125518799,
            0.9887683391571045,
            0.9911437630653381,
            0.9908027648925781,
            0.9830153584480286,
            0.9909361004829407,
            0.9825323820114136,
            0.9916875958442688,
            0.9897934794425964,
            0.9896244406700134,
            0.9854618906974792,
            0.9845854043960571,
            0.9798579812049866,
            0.9840161204338074,
            0.9872241020202637,
            0.98711758852005,
            0.989349901676178,
            0.9897927641868591,
            0.9914304614067078
        ]
    },
    "522": {
        "similarity": 0.9946492910385132,
        "body": "n, f1, f2, f3, c = map(int, input().split())\nfor i in range(4, n):\n    fi = c ** (2 * i - 12) % (10**9 + 7)\n    for j in range(3, 0, -1):\n        fi *= f{i-j}\n        fi %= (10**9 + 7)\nprint(fi)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946492910385132,
            0.9931272268295288,
            0.9918624758720398,
            0.9936951398849487,
            0.9940370321273804,
            0.9932148456573486,
            0.9935768842697144,
            0.9895327687263489,
            0.994562566280365,
            0.9936631917953491,
            0.9941896200180054,
            0.9932156801223755,
            0.9914225339889526,
            0.9903321862220764,
            0.9936718344688416,
            0.9942022562026978,
            0.9912087321281433,
            0.9912750124931335,
            0.9945817589759827,
            0.9902929067611694
        ]
    },
    "1719": {
        "similarity": 0.9972484111785889,
        "body": "    N = int(input())\n    MOD = 10**9 + 7\n    dp = [0] * (N+1)\n    dp[0] = 1\n    for i in range(1, N+1):\n        dp[i] = (dp[i-1] * 4) % MOD\n        if i >= 3:\n            dp[i] -= (dp[i-3] * 2) % MOD\n    print(dp[N])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967586994171143,
            0.995367169380188,
            0.9971925020217896,
            0.9963083863258362,
            0.9869834780693054,
            0.9955700635910034,
            0.9938566088676453,
            0.9963218569755554,
            0.9950073957443237,
            0.9970519542694092,
            0.9953230023384094,
            0.9971646070480347,
            0.9972484111785889,
            0.9943743348121643,
            0.9965693950653076,
            0.9963693022727966,
            0.9967418313026428,
            0.9961985349655151,
            0.9957728981971741,
            0.9966483116149902
        ]
    },
    "1842": {
        "similarity": 0.9985231161117554,
        "body": "import math\n\na, b, c = map(int, input().split())\nroot1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\nroot2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\nprint(round(root1, 10))\nprint(round(root2, 10))",
        "result": "passed",
        "similarities": [
            0.9959365725517273,
            0.9973242878913879,
            0.9983856081962585,
            0.9984411001205444,
            0.9983185529708862,
            0.9976288676261902,
            0.9969216585159302,
            0.9976897239685059,
            0.9984095692634583,
            0.9984038472175598,
            0.9979587197303772,
            0.998500645160675,
            0.9976096153259277,
            0.9981004595756531,
            0.997796893119812,
            0.9976096153259277,
            0.9968153238296509,
            0.9985231161117554,
            0.9966961741447449,
            0.9947206377983093
        ]
    },
    "806": {
        "similarity": 0.9955662488937378,
        "body": "    n, l, r = map(int, input().split())\n    res = pow(3, n, 10**9 + 7)\n    return str((r - l + 1) * (r - l)//3 % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.993033766746521,
            0.9944795370101929,
            0.9954107403755188,
            0.9944421648979187,
            0.9927040934562683,
            0.9948058724403381,
            0.9945992827415466,
            0.9928218722343445,
            0.9807429909706116,
            0.9948733448982239,
            0.9948112964630127,
            0.9919220805168152,
            0.9932666420936584,
            0.9955662488937378,
            0.9923167824745178,
            0.9944585561752319,
            0.9952054619789124,
            0.9940310120582581,
            0.9871545433998108,
            0.9951940178871155
        ]
    },
    "365": {
        "similarity": 0.9958494305610657,
        "body": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nfrom collections import Counter\ncount_a = Counter(a)\nif len(count_a) == 1:\n    if count_a[0] == x // max(a):\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9928258657455444,
            0.9904907941818237,
            0.9953297972679138,
            0.9919403791427612,
            0.9957337975502014,
            0.993065595626831,
            0.9945385456085205,
            0.9956669211387634,
            0.9949037432670593,
            0.9941440224647522,
            0.9957950115203857,
            0.9958494305610657,
            0.9946879148483276,
            0.9936197400093079,
            0.9942203164100647,
            0.9930804371833801,
            0.9957970380783081,
            0.9949753284454346,
            0.9934329986572266,
            0.9955977201461792
        ]
    },
    "1158": {
        "similarity": 0.9966790080070496,
        "body": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nutensils = set(a)\nguest_utensils = set()\nfor i in range(1, 101):\n    if i not in utensils:\n        guest_utensils.add(i)\nstolen = n - len(utensils) + len(guest_utensils)\nprint(stolen)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949210286140442,
            0.9966179728507996,
            0.9961901307106018,
            0.9910910725593567,
            0.9957200288772583,
            0.9952424764633179,
            0.9966790080070496,
            0.9959707856178284,
            0.9946993589401245,
            0.9923003315925598,
            0.9926903247833252,
            0.9898669719696045,
            0.9958952069282532,
            0.9943814873695374,
            0.9947797656059265,
            0.996454656124115,
            0.9962247610092163,
            0.9955663084983826,
            0.9949561953544617,
            0.9962599873542786
        ]
    },
    "33": {
        "similarity": 0.9965143799781799,
        "body": "    a1, b1, a2, b2, L, R = map(int, input().split())\n    ans = 0\n    for k in range((R - b1) // a1 + 1):\n        for l in range(min((L - b2) // a2, (R - b1) // a1), 0, -1):\n            if a1 * k + b1 == a2 * l + b2:\n                ans += 1\n    print(ans)",
        "result": "timed out",
        "similarities": [
            0.9951162934303284,
            0.9897936582565308,
            0.9935838580131531,
            0.9904171824455261,
            0.9935838580131531,
            0.9959924817085266,
            0.9963701367378235,
            0.9956544637680054,
            0.9939990639686584,
            0.994167149066925,
            0.9958240985870361,
            0.9942647218704224,
            0.9950600862503052,
            0.9963669180870056,
            0.995711088180542,
            0.9952399730682373,
            0.9961395263671875,
            0.9929512739181519,
            0.9965143799781799,
            0.9959747791290283
        ]
    },
    "2498": {
        "similarity": 0.9985920786857605,
        "body": "    N, M = map(int, input().split())\n    As = list(map(int, input().split()))\n    count = 0\n    for i in range(2, M+1):\n        is_scm = True\n        for a in As:\n            if i % (a//2) != 0:\n                is_scm = False\n                break\n        if is_scm:\n            count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9976033568382263,
            0.995124101638794,
            0.9970964193344116,
            0.9984444975852966,
            0.9976682066917419,
            0.9985920786857605,
            0.9983859062194824,
            0.9980037212371826,
            0.998264729976654,
            0.997944712638855,
            0.9985749125480652,
            0.9981546998023987,
            0.9972272515296936,
            0.9985134601593018,
            0.9982951283454895,
            0.9982732534408569,
            0.9985900521278381,
            0.9984064698219299,
            0.9983603954315186,
            0.9982253909111023
        ]
    },
    "2309": {
        "similarity": 0.9972293376922607,
        "body": "    n = int(input())\n    words = [input().strip() for _ in range(n)]\n    vowels = 'aeiou'\n    count_vowels = [sum(1 for char in word.lower() if char in vowels) for word in words]\n    max_vowels = max(count_vowels)\n    lyrics = []\n    for i in range(max_vowels):\n        for j in range(n):\n            if sum(1 for char in words[j].lower() if char in vowels) == i + 1:\n                words_copy = words[:]\n                used_words = [words_copy.pop(j)]\n                while len(words_copy) > 0 and len(used_words) < 2:\n                    for k in range(len(words_copy)):\n                        if sum(1 for char in words_copy[k].lower() if char in vowels) == i + 1:\n                            words_copy.pop(k)\n                            used_words.append(words_copy.pop())\n                            break\n                if len(words_copy) > 0 and len(used_words) == 2:\n                    lyrics.append(' '.join([words[j], ' '.join(used_words)]))\n    print(len(lyrics))\n    for lyric in lyrics:\n        print(lyric)",
        "result": "timed out",
        "similarities": [
            0.9962733387947083,
            0.9965336322784424,
            0.9966455101966858,
            0.9967553019523621,
            0.9957058429718018,
            0.9954476952552795,
            0.9967162609100342,
            0.9969611167907715,
            0.9965603351593018,
            0.9955900311470032,
            0.9967243075370789,
            0.9965147972106934,
            0.9959514141082764,
            0.9969464540481567,
            0.9968581199645996,
            0.9950822591781616,
            0.9972293376922607,
            0.9949085712432861,
            0.9965590238571167,
            0.9965306520462036
        ]
    },
    "1326": {
        "similarity": 0.9927443265914917,
        "body": "    N = int(input())\n    total = 0\n    for k in range(1, N+1):\n        count = 0\n        i = 1\n        while i*i <= k:\n            if k%i == 0:\n                count += 2\n            i += 1\n        total += k * (count + 1)\n    print(total)",
        "result": "timed out",
        "similarities": [
            0.9805846214294434,
            0.9897189736366272,
            0.9697518944740295,
            0.9910200238227844,
            0.9895521402359009,
            0.9896953105926514,
            0.9799466729164124,
            0.9759038686752319,
            0.9918913841247559,
            0.9916000366210938,
            0.9899723529815674,
            0.9927443265914917,
            0.9906344413757324,
            0.98846834897995,
            0.9876744151115417,
            0.9892982840538025,
            0.9912559390068054,
            0.9868670105934143,
            0.9874314069747925,
            0.9916676878929138
        ]
    },
    "2950": {
        "similarity": 0.994362473487854,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    count = 0\n    i = 1\n    while heights:\n        if i > heights[0]:\n            break\n        else:\n            heights.pop(0)\n        count += 1\n        i += 1\n    return count",
        "result": "failed: testcase 0",
        "similarities": [
            0.9854326844215393,
            0.9931153655052185,
            0.9929401278495789,
            0.9916733503341675,
            0.9931389689445496,
            0.9938954710960388,
            0.9935075044631958,
            0.9916478395462036,
            0.9917486310005188,
            0.9880001544952393,
            0.9927197694778442,
            0.994362473487854,
            0.9916384816169739,
            0.9904572367668152,
            0.9931570291519165,
            0.991145670413971,
            0.9904714226722717,
            0.9921870231628418,
            0.9882376790046692,
            0.991655170917511
        ]
    },
    "1983": {
        "similarity": 0.9974097013473511,
        "body": "n = int(input())\na = list(map(int, input().split()))\ndp = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] > a[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\nprint(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.996823787689209,
            0.995766282081604,
            0.9970418810844421,
            0.9953541159629822,
            0.996823787689209,
            0.9953541159629822,
            0.995236873626709,
            0.9948033690452576,
            0.9974097013473511,
            0.9953541159629822,
            0.9970798492431641,
            0.9964917898178101,
            0.9974097013473511,
            0.9953541159629822,
            0.9963330626487732,
            0.9953541159629822,
            0.9974097013473511,
            0.9965949058532715,
            0.9964836835861206,
            0.9974097013473511
        ]
    },
    "1767": {
        "similarity": 0.9955357909202576,
        "body": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nmax_sum = 0\nfor l in range(1, n+1):\n    for r in range(l, n+1):\n        temp_a = a[l-1] | sum(a[i] for i in range(l, r+1))\n        temp_b = b[l-1] | sum(b[i] for i in range(l, r+1))\n        max_sum = max(max_sum, temp_a + temp_b)\nprint(max_sum)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947507977485657,
            0.9940966367721558,
            0.9932863116264343,
            0.9949305653572083,
            0.9928502440452576,
            0.9946159720420837,
            0.9945275187492371,
            0.9928082823753357,
            0.9938929677009583,
            0.9948866963386536,
            0.9927446246147156,
            0.9940916299819946,
            0.9937151074409485,
            0.9902247190475464,
            0.9900565147399902,
            0.9895164370536804,
            0.9854517579078674,
            0.9944978952407837,
            0.9955357909202576,
            0.9864934682846069
        ]
    },
    "2382": {
        "similarity": 0.9963656067848206,
        "body": "    N = int(input())\n    S = [int(x) for x in input().split()]\n    healths = [N]\n    remaining_slimes = list(S)\n    while healths[-1] > 0:\n        if len(remaining_slimes) < healths[-1]:\n            return 'No'\n        for _ in range(healths[-1]):\n            remaining_slimes.pop(0)\n        healths.append(len(remaining_slimes))\n    print('Yes' if sorted(healths) == list(S) else 'No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918496012687683,
            0.9944959878921509,
            0.9950854778289795,
            0.9963656067848206,
            0.9944695234298706,
            0.9953067302703857,
            0.9946642518043518,
            0.9962214231491089,
            0.9954003095626831,
            0.9959250092506409,
            0.9945813417434692,
            0.9944074749946594,
            0.9905830025672913,
            0.9924017190933228,
            0.9908074736595154,
            0.9954060912132263,
            0.9938246011734009,
            0.9958440661430359,
            0.9955267906188965,
            0.9955771565437317
        ]
    },
    "3907": {
        "similarity": 0.9952589273452759,
        "body": "    n, m = map(int, input().split())\n    coupons = {}\n    for _ in range(m):\n        q, w = map(int, input().split())\n        if q not in coupons:\n            coupons[q] = 0\n        coupons[q] += w\n    print(max(coupons.values(), default=0))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937032461166382,
            0.9951215982437134,
            0.9936031699180603,
            0.9931055307388306,
            0.9940055012702942,
            0.992584228515625,
            0.9944393038749695,
            0.9875528216362,
            0.9921467304229736,
            0.9912365674972534,
            0.9929267764091492,
            0.9924790263175964,
            0.9930663704872131,
            0.9918398857116699,
            0.991817057132721,
            0.9929537773132324,
            0.9915501475334167,
            0.9936242699623108,
            0.9944618940353394,
            0.9952589273452759
        ]
    },
    "3676": {
        "similarity": 0.9924486875534058,
        "body": "R, C = map(int, input().split())\n    if R == 1 or C == 1: \n        return 2**(R+C-2)\n    elif R == C:\n        return (2**((R+1)//2)) * ((C+1)//2)\n    else:\n        return 0\nprint(poly_count(R, C))",
        "result": "failed: testcase 0",
        "similarities": [
            0.99001544713974,
            0.9882479310035706,
            0.9916434288024902,
            0.9924486875534058,
            0.9861387014389038,
            0.9877253174781799,
            0.9867273569107056,
            0.9885406494140625,
            0.9909352660179138,
            0.9850199818611145,
            0.9890863299369812,
            0.9851111173629761,
            0.9817826151847839,
            0.9868394732475281,
            0.9795209169387817,
            0.982986330986023,
            0.9893051981925964,
            0.9901378154754639,
            0.9871503710746765,
            0.9754208326339722
        ]
    },
    "3293": {
        "similarity": 0.997196614742279,
        "body": "n = int(input())\ntotal_profit = 0\nfor _ in range(n):\n    f, p, m, s = map(int, input().split())\n    total_profit += min(s, s // p * (m - p))\nprint(total_profit)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969615936279297,
            0.9969392418861389,
            0.9921466708183289,
            0.9970743060112,
            0.9948285818099976,
            0.9971694946289062,
            0.997196614742279,
            0.9971839785575867,
            0.9961562156677246,
            0.9898604154586792,
            0.9959728717803955,
            0.9959889650344849,
            0.9942080974578857,
            0.996770977973938,
            0.9965786337852478,
            0.9969417452812195,
            0.9942524433135986,
            0.9971694946289062,
            0.9964624047279358,
            0.9955715537071228
        ]
    },
    "3587": {
        "similarity": 0.9959934949874878,
        "body": "import sys\n\n    N = int(input())\n    taboos = [input().strip() for _ in range(N)]\n    max_len = 0\n    max_clue = ''\n    \n    for i in range(2**200000):\n        binary = bin(i)[2:].zfill(200000)\n        is_taboo = False\n        \n        for taboo in taboos:\n            if taboo in binary:\n                is_taboo = True\n                break\n        \n        if not is_taboo and len(binary) > max_len:\n            max_len = len(binary)\n            max_clue = binary\n            \n    sys.stdout.write(max_clue + '\\n')\n\nlongest_clue()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995333731174469,
            0.9948539733886719,
            0.9934899210929871,
            0.9945642352104187,
            0.9888564944267273,
            0.9947404265403748,
            0.9938306212425232,
            0.9953673481941223,
            0.9938084483146667,
            0.9947191476821899,
            0.9943558573722839,
            0.9919147491455078,
            0.9939036965370178,
            0.9927611351013184,
            0.9946704506874084,
            0.9932954907417297,
            0.9959934949874878,
            0.993882954120636,
            0.99398273229599,
            0.9952728152275085
        ]
    },
    "3530": {
        "similarity": 0.9976840615272522,
        "body": "    N = int(input())\n    coefficients = []\n    for _ in range(N):\n        a, b, t = map(int, input().split())\n        coefficients.append((a, b, t))\n    Q = int(input())\n    for _ in range(Q):\n        T = int(input())\n        total_fun = 0\n        for coefficient in coefficients:\n            fun = max(0, coefficient[0] - (T // coefficient[2] - 1) ** 2 * coefficient[1])\n            total_fun += fun\n        print(total_fun)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976840615272522,
            0.9945158958435059,
            0.997360110282898,
            0.9925459027290344,
            0.9973706603050232,
            0.9944407939910889,
            0.9973295331001282,
            0.9963055849075317,
            0.9955291748046875,
            0.9969390034675598,
            0.9964308738708496,
            0.9955727458000183,
            0.9968964457511902,
            0.9969382286071777,
            0.9958462119102478,
            0.9970903992652893,
            0.9965883493423462,
            0.9966055154800415,
            0.9961816072463989,
            0.9975801706314087
        ]
    },
    "3900": {
        "similarity": 0.9955512881278992,
        "body": "    n, p = map(int, input().split())\n    suspects = set()\n    for _ in range(n):\n        x, y = map(int, input().split())\n        suspects.add(x - 1)\n        suspects.add(y - 1)\n    return sum(bin(i | j).count('1') >= p for i in range(2 ** n) for j in range(2 ** n) if i & j)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924780130386353,
            0.9951154589653015,
            0.9953052401542664,
            0.9921585917472839,
            0.9955452680587769,
            0.9889191389083862,
            0.9954531788825989,
            0.994675874710083,
            0.9937745928764343,
            0.9942261576652527,
            0.9942169189453125,
            0.9936606884002686,
            0.9930528402328491,
            0.9953467845916748,
            0.9955512881278992,
            0.9928598999977112,
            0.9936068654060364,
            0.9868093729019165,
            0.9874081015586853,
            0.9931533336639404
        ]
    },
    "3996": {
        "similarity": 0.9962124228477478,
        "body": "    k = int(input())\n    a = list(map(int, input().split()))\n    p = 1\n    q = 1\n    for ai in a:\n        p *= (2*ai + 1)\n        q *= ai\n    return str(p % (10**9 + 7)) + '/' + str(q % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952810406684875,
            0.9875819683074951,
            0.9950489401817322,
            0.9959126710891724,
            0.9931675791740417,
            0.9959763884544373,
            0.9962124228477478,
            0.9942094683647156,
            0.9941775798797607,
            0.9936220049858093,
            0.9941980242729187,
            0.9950178265571594,
            0.9939153790473938,
            0.9960483908653259,
            0.9947823286056519,
            0.9921383261680603,
            0.9925791025161743,
            0.9948815107345581,
            0.9921031594276428,
            0.9927985668182373
        ]
    },
    "3276": {
        "similarity": 0.9966643452644348,
        "body": "    N, M = map(int, input().split())\n    grid = [list(input()) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if 'W' not in grid[i][j:j+3]:\n                return \"NO\"\n            if 'W' not in [''.join(row[j:j+3]) for row in grid]:\n                return \"NO\"\n    return \"YES\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.992164134979248,
            0.9955956339836121,
            0.9964548349380493,
            0.9957471489906311,
            0.9956914186477661,
            0.9948335886001587,
            0.9947589039802551,
            0.9966232180595398,
            0.993497371673584,
            0.9940107464790344,
            0.9966643452644348,
            0.9946969747543335,
            0.9958911538124084,
            0.9910523295402527,
            0.9954918622970581,
            0.9961965680122375,
            0.9957506060600281,
            0.9938573241233826,
            0.9956954121589661,
            0.9912939667701721
        ]
    },
    "3834": {
        "similarity": 0.9957508444786072,
        "body": "    n, m, k = map(int, input().split())\n    table = [list(map(int, input().split())) for _ in range(n)]\n    changed = 0\n    while True:\n        changed += 1\n        is_changed = False\n        for i in range(n):\n            for j in range(m):\n                if table[i][j] == 1 and all((table[i_].count(1) - 1, j_) == (table[i].count(1) - 1, j) for i_, j_ in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)] if 0 <= i_<n and 0 <= j_<m):\n                    table[i][j] = 0\n                    is_changed = True\n        if not is_changed:\n            break\n    print(-1) if changed > k else print(changed - 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917850494384766,
            0.9901748299598694,
            0.9944859743118286,
            0.9945928454399109,
            0.9948127269744873,
            0.9936423897743225,
            0.9909383058547974,
            0.9956145286560059,
            0.9952075481414795,
            0.9918218851089478,
            0.9945059418678284,
            0.9956209063529968,
            0.9954892992973328,
            0.9953424334526062,
            0.9932752251625061,
            0.9887465238571167,
            0.9957508444786072,
            0.9934052228927612,
            0.9924407005310059,
            0.9933839440345764
        ]
    },
    "3012": {
        "similarity": 0.9946309924125671,
        "body": "    a11, a12, a21, a22, N = map(int, input().split())\n    MOD = 1000000007\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N+1):\n        if i >= 2:\n            dp[i] = (dp[i-1] + dp[i-2]) % MOD\n        else:\n            dp[i] = dp[i-1]\n    print((a11 * a22) % MOD * dp[N] % MOD)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920510053634644,
            0.9892717003822327,
            0.987166166305542,
            0.9942094087600708,
            0.9929681420326233,
            0.9940872192382812,
            0.9889135956764221,
            0.9857177734375,
            0.992445707321167,
            0.9930458068847656,
            0.9926900267601013,
            0.9938713908195496,
            0.9946309924125671,
            0.9925410747528076,
            0.9921330213546753,
            0.9875831604003906,
            0.9924858808517456,
            0.9919018149375916,
            0.9938725233078003,
            0.9934916496276855
        ]
    },
    "3745": {
        "similarity": 0.9939720630645752,
        "body": "    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    \n    s = \"\"\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if (edges.count([i, j]) > 0) and ((s + 'abc').find(s[i-1] + s[j-1]) % 3 == 0 or (s + 'abc').find(s[j-1] + s[i-1]) % 3 == 0):\n                return \"Yes\"\n    print(\"No\")\n    for i in range(n):\n        if 'a' <= chr((i % 3) * 97 + 97) <= 'c':\n            s += chr((i % 3) * 97 + 97)\n        else:\n            s += chr(((i-1) % 3) * 97 + 97)\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9875255227088928,
            0.9867075085639954,
            0.9922487139701843,
            0.9903229475021362,
            0.9898486733436584,
            0.9899058938026428,
            0.9939720630645752,
            0.9936414361000061,
            0.9885440468788147,
            0.9922165274620056,
            0.9842721819877625,
            0.991257905960083,
            0.9926317930221558,
            0.9903119802474976,
            0.9905976057052612,
            0.9921899437904358,
            0.9912829995155334,
            0.9927941560745239,
            0.9923185110092163,
            0.9934278726577759
        ]
    },
    "3028": {
        "similarity": 0.9961057901382446,
        "body": "    board = [list(map(int, input().split())) for _ in range(n)]\n    moves = []\n    while any(max(row) < p or max(col) < p for row in board for col in zip(*board)):\n        max_row = -1\n        max_col = -1\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == p-1:\n                    return -1\n                if max(row) < p or max(col) < p:\n                    max_row, max_col = i, j\n                    break\n            if max_row is not None and max_col is not None:\n                break\n        for row in range(n):\n            board[row][max_col] = (board[row][max_col]+1)%p\n        for col in range(m):\n            board[max_row][col] = (board[max_row][col]+1)%p\n        moves.append((max_row*m + max_col)+1)\n    return len(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995144784450531,
            0.9950006604194641,
            0.9958695769309998,
            0.9950178265571594,
            0.9917823672294617,
            0.9957318902015686,
            0.9948570132255554,
            0.995880126953125,
            0.9951234459877014,
            0.9910007119178772,
            0.9952594637870789,
            0.9954123497009277,
            0.9959092736244202,
            0.9942165017127991,
            0.9957879781723022,
            0.9961057901382446,
            0.9949490427970886,
            0.9958774447441101,
            0.9953930377960205,
            0.9959361553192139
        ]
    },
    "3196": {
        "similarity": 0.9968966245651245,
        "body": "from math import inf\n    n, m = map(int, input().split())\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    visited = set()\n    routes = set()\n    \n        if current == 2:\n            routes.add(tuple(sorted(path)))\n            return\n        for road in roads:\n            if road[0] == current and road[1] not in path:\n                new_path = path + [road[1]]\n                visited.add(road[1])\n                dfs(road[1], new_path)\n                visited.remove(road[1])\n    \n    dfs(1, [])\n    \n    return str(len(routes)) if len(routes) < 10**9 else 'inf'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904873371124268,
            0.9967511892318726,
            0.9968438744544983,
            0.9943099617958069,
            0.9968966245651245,
            0.9948319792747498,
            0.9956231713294983,
            0.9951164126396179,
            0.9936081767082214,
            0.9947006702423096,
            0.995744526386261,
            0.996313214302063,
            0.9958662986755371,
            0.995553195476532,
            0.9964350461959839,
            0.996597409248352,
            0.9960183501243591,
            0.9949350953102112,
            0.9963788390159607,
            0.996443510055542
        ]
    },
    "3405": {
        "similarity": 0.9945782423019409,
        "body": "    X = int(10000*X)\n    answer = []\n    for i in range(1, 10**8):\n        num = str(i)\n        new_num = str(int(num[0]) * (int('9' * (len(num) - 1)) + 1))\n        if float(new_num) * X == i:\n            answer.append(int(num))\n    if answer:\n        for n in sorted(answer):\n            print(n)\n    else:\n        print(\"No solution\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945657849311829,
            0.9930272698402405,
            0.9939320087432861,
            0.9941115379333496,
            0.9856162667274475,
            0.9944918751716614,
            0.9920463562011719,
            0.9926979541778564,
            0.9930113554000854,
            0.9910826683044434,
            0.9934106469154358,
            0.9931910634040833,
            0.9858667254447937,
            0.9928107261657715,
            0.9935925006866455,
            0.9939205646514893,
            0.9834364652633667,
            0.9945782423019409,
            0.9855867028236389,
            0.9939643740653992
        ]
    },
    "3126": {
        "similarity": 0.9973985552787781,
        "body": "n, t = map(int, input().split())\nps = list(map(int, input().split()))\nC = int(input())\n\n    jumps = sum((p - (i % 2) * n) for i, p in enumerate(ps))\n    return jumps\n\nfor _ in range(C):\n    action = input()\n    if action.startswith('t'):\n        t = int(action[2:])\n    elif action.startswith('+'):\n        ps.append(int(action[1:]))\n    else:\n        ps.remove(int(action[1:]))\n\nprint(dance(ps))",
        "result": "failed: testcase 0",
        "similarities": [
            0.996871829032898,
            0.9969128966331482,
            0.9966722726821899,
            0.987705647945404,
            0.9972307085990906,
            0.9971585869789124,
            0.9964872598648071,
            0.996500551700592,
            0.9957571625709534,
            0.9970062971115112,
            0.9966330528259277,
            0.9967771172523499,
            0.9965912699699402,
            0.9967918395996094,
            0.993228018283844,
            0.996505856513977,
            0.9968616962432861,
            0.9972352385520935,
            0.9973985552787781,
            0.9972421526908875
        ]
    },
    "3279": {
        "similarity": 0.9957840442657471,
        "body": "    vertical = [list(input().split()) for _ in range(n)]\n    horizontal = [list(input().split()) for _ in range(n+1)]\n    bars = [['0' for _ in range(n+1)] for _ in range(n)]\n    \n    for i in range(n):\n        for j, group_size in enumerate(map(int, vertical[i])):\n            if i < n-1:\n                bars[i][j] = '1' * (group_size + 1) + '0' * (n - group_size)\n            else:\n                bars[i][j] = '1' * group_size\n    for j in range(n+1):\n        for i, group_size in enumerate(map(int, horizontal[j])):\n            if i < n and j > 0:\n                bars[n-1-i][j-1] = ('1' * (group_size + 1) + '0' * (n - group_size)).ljust(n+1, '0')\n    print('\\n'.join([''.join(row) for row in bars]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915475249290466,
            0.9915863871574402,
            0.9927087426185608,
            0.994385302066803,
            0.9924919605255127,
            0.9944387674331665,
            0.9951862692832947,
            0.9944865703582764,
            0.9941923022270203,
            0.9944301247596741,
            0.994364321231842,
            0.9948413372039795,
            0.9953765869140625,
            0.9906249046325684,
            0.9949033856391907,
            0.9949439167976379,
            0.994480311870575,
            0.9916889667510986,
            0.9957840442657471,
            0.9928295612335205
        ]
    },
    "3599": {
        "similarity": 0.9953437447547913,
        "body": "T, N = map(int, input().split())\nbreaks = list(map(int, input().split()))\nschedule = [0] * N\ncur_time = 0\nfor i in range(N):\n    while schedule[i] < breaks[i]:\n        for j in range(N):\n            if j != i and schedule[j] + breaks[j] > cur_time:\n                break\n        if j == N - 1:\n            for k in range(N - 1, -1, -1):\n                if schedule[k] < breaks[k]:\n                    j = k\n                    break\n        schedule[i] = min(schedule[j], cur_time) + breaks[i]\n        cur_time += breaks[i]\nprint(*schedule, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936615824699402,
            0.9944319725036621,
            0.9937745332717896,
            0.9947066307067871,
            0.9941008687019348,
            0.9929105639457703,
            0.9943015575408936,
            0.9936597943305969,
            0.9948668479919434,
            0.9935469627380371,
            0.994337260723114,
            0.9949965476989746,
            0.9930835366249084,
            0.992836594581604,
            0.9947242736816406,
            0.9913805723190308,
            0.9849124550819397,
            0.9953437447547913,
            0.992232084274292,
            0.9951664805412292
        ]
    },
    "3687": {
        "similarity": 0.9969877004623413,
        "body": "from functools import reduce\nfrom operator import add\n\nn, q, s = map(int, input().split())\nqueue_sizes = list(map(int, input().split()))\nqueues = [[] for _ in range(q)]\nfor i in range(s):\n    queue_index = int(input()) - 1\n    queues[queue_index].append(int(input()))\n\nfor window in [list(map(int, input().split())) for _ in range(n)]:\n    transferable_data = sum(window[1:])\n    queue_space = sum(queue_sizes)\n    \n    if queue_space < transferable_data:\n        print(\"impossible\")\n        exit()\n\nprint(\"possible\" if all(sum(que) == 0 for que in queues) else \"impossible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963472485542297,
            0.9952306151390076,
            0.9946650266647339,
            0.9965077638626099,
            0.9964744448661804,
            0.9960962533950806,
            0.9966270923614502,
            0.988091230392456,
            0.9960968494415283,
            0.9962001442909241,
            0.9955148100852966,
            0.9969877004623413,
            0.9952120780944824,
            0.9938830137252808,
            0.995613694190979,
            0.9966035485267639,
            0.9949042797088623,
            0.9947111010551453,
            0.996238112449646,
            0.9956117272377014
        ]
    },
    "3864": {
        "similarity": 0.9925170540809631,
        "body": "    n = int(input())\n    print((0+1+0+2+1+3+2+3)//8%998244353)",
        "result": "timed out",
        "similarities": [
            0.9925170540809631,
            0.9913157224655151,
            0.9911673665046692,
            0.986028790473938,
            0.9879744648933411,
            0.9905389547348022,
            0.9797176718711853,
            0.9907374382019043,
            0.989918053150177,
            0.9888665080070496,
            0.9834707379341125,
            0.9761659502983093,
            0.9880868792533875,
            0.9897886514663696,
            0.9893701672554016,
            0.9904705882072449,
            0.9897885918617249,
            0.9849520325660706,
            0.9897885918617249,
            0.9881752729415894
        ]
    },
    "3504": {
        "similarity": 0.9970942139625549,
        "body": "    D, S = map(int, input().split())\n    drops = []\n    sensors = []\n    for _ in range(D):\n        x, y = map(int, input().split())\n        drops.append((x, y))\n    for _ in range(S):\n        x1, x2, y = map(int, input().split())\n        sensors.append(((x1, y), (x2, y)))\n    for drop in drops:\n        for sensor in sensors:\n            if min(sensor[0][0], sensor[1][0]) <= drop[0] <= max(sensor[0][0], sensor[1][0]):\n                print(min(max(drop[1], sensor[0][1]), sensor[1][1]))\n                break\n        else:\n            print(0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967360496520996,
            0.9962203502655029,
            0.9965165853500366,
            0.9970909953117371,
            0.9970942139625549,
            0.9965453147888184,
            0.9934558868408203,
            0.9970805644989014,
            0.9965089559555054,
            0.9954026937484741,
            0.9967074394226074,
            0.9970431923866272,
            0.9967103600502014,
            0.9966952800750732,
            0.9969335794448853,
            0.9958357810974121,
            0.9952772259712219,
            0.9882497191429138,
            0.9896025657653809,
            0.996418297290802
        ]
    },
    "3451": {
        "similarity": 0.9940222501754761,
        "body": "    n, k = map(int, input().split())\n    seq = input()\n    cost = [int(input()) for _ in range(n)]\n    balance = 0\n    for p in seq:\n        if p == '(':\n            balance += 1\n        else:\n            balance -= 1\n    return min(sum(cost[:i]) + sum(cost[i:]) for i in range(k+1) if abs(balance - i % 2) > k)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9898888468742371,
            0.9936763644218445,
            0.9923716187477112,
            0.9901183247566223,
            0.9936181902885437,
            0.9925535321235657,
            0.9850555062294006,
            0.9916927814483643,
            0.9924864768981934,
            0.9902337789535522,
            0.9907355308532715,
            0.9911434650421143,
            0.9910216927528381,
            0.9925881624221802,
            0.9936187267303467,
            0.9928970336914062,
            0.9877091646194458,
            0.9940222501754761,
            0.9838382601737976,
            0.9885830283164978
        ]
    },
    "3156": {
        "similarity": 0.9967767596244812,
        "body": "N, K = map(int, input().split())\nstores = {}\nfor _ in range(K):\n    store_index, item_name = input().split()\n    if store_index not in stores:\n        stores[store_index] = set()\n    stores[store_index].add(item_name)\nM = int(input())\nbought_items = [input() for _ in range(M)]\n\nvisited_stores = {}\nunique_path = False\nfor i, item in enumerate(bought_items):\n    if item not in visited_stores:\n        visited_stores[item] = set()\n    visited_stores[item].add(i)\n    \nfor store_index in sorted(stores.keys()):\n    store_items = stores[store_index]\n    if any(len(visited_stores[item]) > 1 for item in store_items):\n        print(\"ambiguous\")\n        exit()\n\nif len(visited_stores) != M:\n    print(\"impossible\")\nelse:\n    print(\"unique\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943510293960571,
            0.9928390383720398,
            0.9955121874809265,
            0.9967767596244812,
            0.9951990842819214,
            0.9957183003425598,
            0.9961461424827576,
            0.9954661130905151,
            0.9948375225067139,
            0.9962775707244873,
            0.9960278868675232,
            0.9946385622024536,
            0.9935100078582764,
            0.9937334656715393,
            0.9960312247276306,
            0.993434488773346,
            0.9945590496063232,
            0.9960038065910339,
            0.9949461221694946,
            0.9936549663543701
        ]
    },
    "3697": {
        "similarity": 0.9961345195770264,
        "body": "    n, k, m, a = map(int, input().split())\n    g = list(map(int, input().split()))\n    seats_taken = sorted((g.count(i), i) for i in range(1, n+1))\n    candidates_to_check = [i for i in range(1, n+1) if (g.count(i), i) not in seats_taken[:k]]\n    for i in range(n):\n        if g.count(candidates_to_check[i]) < k:\n            print(3)\n        elif set(g[:a]).issuperset({candidates_to_check[i]}):\n            print(2)\n        else:\n            print(1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956393837928772,
            0.9946867227554321,
            0.9961208701133728,
            0.9957718253135681,
            0.9908878207206726,
            0.9961345195770264,
            0.9956777691841125,
            0.995019793510437,
            0.9952195882797241,
            0.9958183169364929,
            0.9952436685562134,
            0.9953204989433289,
            0.9887649416923523,
            0.9954530596733093,
            0.9949798583984375,
            0.9924096465110779,
            0.9938598275184631,
            0.9954279065132141,
            0.9956761598587036,
            0.9942578673362732
        ]
    },
    "3647": {
        "similarity": 0.9978817701339722,
        "body": "    C, R = map(int, input().split())\n    maze = [list(input()) for _ in range(R)]\n    goal_row, goal_col = next((r, c) for r in range(R) for c in range(C) if maze[r][c] == 'M')\n\n        moves = [[-1]*C for _ in range(R)]\n\n            if r < 0 or r >= R or c < 0 or c >= C:\n                return\n            if maze[r][c] == '#':\n                return\n            if maze[r][c] == '_':\n                for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < R and 0 <= nc < C:\n                        if maze[nr][nc] == '_':\n                            dfs(nr, nc, count + 1)\n                        elif maze[nr][nc] in ['.', 'M']:\n                            moves[r][c] = count + (nr - r) + (nc - c)\n                            return\n            elif maze[r][c] == '.':\n                moves[r][c] = count\n\n        dfs(goal_row, goal_col, 0)\n\n    for row in range(R):\n        print(*get_moves(row, 0), sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976834654808044,
            0.9956441521644592,
            0.9972622394561768,
            0.9978817701339722,
            0.9975371360778809,
            0.9969102740287781,
            0.9977906942367554,
            0.9958246350288391,
            0.9978252053260803,
            0.997833788394928,
            0.9978445172309875,
            0.9968368411064148,
            0.9974415302276611,
            0.9973711967468262,
            0.9974014759063721,
            0.9974218606948853,
            0.9975455403327942,
            0.9975377321243286,
            0.9968703389167786,
            0.9965840578079224
        ]
    },
    "3699": {
        "similarity": 0.9957897663116455,
        "body": "    a_x, a_y, b_x, b_y, t_x, t_y = map(int, input().split())\n    n = int(input())\n    bottles = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        bottles.append((x, y))\n    adil_distance = 0\n    bera_distance = 0\n    for bottle in sorted(bottles + [(a_x, a_y), (b_x, b_y)]):\n        if bottle == (a_x, a_y) or bottle == (b_x, b_y):\n            continue\n        adil_distance += abs(t_x - bottle[0]) + abs(t_y - bottle[1])\n        bera_distance += abs(t_x - bottle[0]) + abs(t_y - bottle[1])\n    print(adil_distance + bera_distance)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955897927284241,
            0.9947730898857117,
            0.9940298199653625,
            0.9920808672904968,
            0.9930176138877869,
            0.9932431578636169,
            0.9928349852561951,
            0.9949877858161926,
            0.993570864200592,
            0.9950029253959656,
            0.9955928325653076,
            0.9953569173812866,
            0.9945214986801147,
            0.9946141839027405,
            0.9943551421165466,
            0.9909974336624146,
            0.9939559102058411,
            0.9957897663116455,
            0.9945275187492371,
            0.9931104779243469
        ]
    },
    "3145": {
        "similarity": 0.9967621564865112,
        "body": "    X, A, B = map(int, input().split())\n    allowed = set(input())\n    count = 0\n    for i in range(A, B+1):\n        if all(digit in allowed for digit in str(i)):\n            if i % X == 0:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9936197400093079,
            0.9964795708656311,
            0.9936861991882324,
            0.9930820465087891,
            0.9938426613807678,
            0.9963468313217163,
            0.9967621564865112,
            0.9952946901321411,
            0.9937862753868103,
            0.9966892600059509,
            0.9967621564865112,
            0.9961447715759277,
            0.9966028332710266,
            0.9966892600059509,
            0.9965834617614746,
            0.9966320395469666,
            0.9897688031196594,
            0.9966995716094971,
            0.9950447082519531,
            0.9952946901321411
        ]
    },
    "3795": {
        "similarity": 0.9932445883750916,
        "body": "dollar_values = [1, 2, 5, 10, 20, 50, 100]\neuro_values = [5, 10, 20, 50, 100, 200]\n\nn, d, e = map(int, input().split())\nfor dollar_value in dollar_values:\n    if d % dollar_value == 0 and n >= dollar_value * int(d / dollar_value):\n        n -= dollar_value * int(d / dollar_value)\n        break\nif n > 0:\n    for euro_value in euro_values:\n        if e % euro_value == 0 and n >= euro_value * int(e / euro_value):\n            n -= euro_value * int(e / euro_value)\n            break\nprint(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9878977537155151,
            0.9883376955986023,
            0.9867151379585266,
            0.9912896752357483,
            0.9923902750015259,
            0.9768220782279968,
            0.992164134979248,
            0.9880435466766357,
            0.9873504638671875,
            0.9928269982337952,
            0.9913386106491089,
            0.9932445883750916,
            0.9816149473190308,
            0.9911888837814331,
            0.9861413240432739,
            0.9885208010673523,
            0.9904395937919617,
            0.9882469177246094,
            0.9920167326927185,
            0.9928471446037292
        ]
    },
    "3353": {
        "similarity": 0.9973319172859192,
        "body": "P, R, L = map(int, input().split())\ngraph = {}\nfor _ in range(L):\n    e1, e2 = map(int, input().split())\n    if e1 not in graph:\n        graph[e1] = []\n    if e2 not in graph:\n        graph[e2] = []\n    graph[e1].append(e2)\n    graph[e2].append(e1)\n\n    visited = set()\n    queue = [(s, 0)]\n    while queue:\n        node, time = queue.pop(0)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, time + 1))\n    return time\n\nif P == 0:\n    print(P)\nelse:\n    max_time = 0\n    people_left_behind = P\n    for person in range(P):\n        left_bank = -2\n        right_bank = R - 1\n        while left_bank != right_bank:\n            if left_bank not in graph or len(graph[left_bank]) == 0:\n                break\n            left_bank = bfs(left_bank)\n            max_time = max(max_time, left_bank)\n        people_left_behind -= 1\n    print(people_left_behind)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968076348304749,
            0.9959707856178284,
            0.9973319172859192,
            0.9965248107910156,
            0.9954572319984436,
            0.9956601858139038,
            0.9966250061988831,
            0.9967633485794067,
            0.9938470721244812,
            0.9944941997528076,
            0.9962535500526428,
            0.996371328830719,
            0.9934278726577759,
            0.996780276298523,
            0.99432373046875,
            0.9964125752449036,
            0.9964578747749329,
            0.9965079426765442,
            0.9959734082221985,
            0.9962790608406067
        ]
    },
    "3065": {
        "similarity": 0.9960649609565735,
        "body": "import sys\nfrom collections import deque\n\nn = int(input())\nl = int(input())\npath = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nfor i in range(n):\n    n_neighbors = int(input())\n    neighbors = list(map(int, input().split()))\n    graph[i] = [j for j in neighbors]\n\n    queue = deque([(s, [s])])\n    visited = set()\n    while queue:\n        node, path = queue.popleft()\n        if node == t:\n            return path\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, path + [neighbor]))\n    return []\n\np = bfs(0, l - 1)\nif p is None:\n    print('0.0')\nelse:\n    chance = 0\n    for i in range(len(p) - 1):\n        if len(set(path[i:i+2])) == 1:\n            chance += 1\n    print(f'{chance / (len(p) - 1):.6f}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952518343925476,
            0.9929709434509277,
            0.9958827495574951,
            0.9919739961624146,
            0.9939384460449219,
            0.9946672320365906,
            0.9960649609565735,
            0.9952003359794617,
            0.9952269196510315,
            0.9960250854492188,
            0.9953297972679138,
            0.9957261681556702,
            0.995751142501831,
            0.9875531792640686,
            0.9950533509254456,
            0.9930464029312134,
            0.9918704032897949,
            0.9937924146652222,
            0.9953507781028748,
            0.9955153465270996
        ]
    },
    "3250": {
        "similarity": 0.9949672222137451,
        "body": "b, d = map(int, input().split())\nfor m in range(1, b):\n    if ((d % 2 == 0) and (m % 2 == 0)) or ((d % 3 == 0) and (m % 3 == 0)):\n        continue\n    for k in range(b**m):\n        n = sum((k // (b ** j)) * (b ** (m - j - 1)) for j in range(m))\n        if d != 1 and pow(n, d-1, d) == 1:\n            break\n    else:\n        print(\"yes\")\n        exit()\nprint(\"no\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914267659187317,
            0.9895047545433044,
            0.9943354725837708,
            0.9939281344413757,
            0.9928352236747742,
            0.991916835308075,
            0.9879865050315857,
            0.9949672222137451,
            0.9888142943382263,
            0.9912140369415283,
            0.9858394265174866,
            0.9906899333000183,
            0.993955135345459,
            0.9930038452148438,
            0.993553876876831,
            0.9943897724151611,
            0.9906826019287109,
            0.9916387796401978,
            0.9937333464622498,
            0.9940639138221741
        ]
    },
    "3306": {
        "similarity": 0.9971410036087036,
        "body": "    N, M = map(int, input().split())\n    calls = [0]\n    for _ in range(N):\n        p, c = map(int, input().split())\n        calls.append(calls[-1] + c)\n    return min((calls[i+1] - calls[i]) // 2 for i in range(N))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969820976257324,
            0.9957913756370544,
            0.9958911538124084,
            0.9929556846618652,
            0.996432363986969,
            0.9939195513725281,
            0.9941685199737549,
            0.9962778687477112,
            0.9966915845870972,
            0.9963150024414062,
            0.995441734790802,
            0.9970958232879639,
            0.9929267764091492,
            0.9971410036087036,
            0.9945988059043884,
            0.9969196319580078,
            0.9916507601737976,
            0.9966701865196228,
            0.9971410036087036,
            0.9955287575721741
        ]
    },
    "3970": {
        "similarity": 0.9965401887893677,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    res = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] <= a[i] * k:\n            j += 1\n        res = max(res, j - i)\n        i = j\n    print(res)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9917123913764954,
            0.9965388774871826,
            0.9965047240257263,
            0.9940653443336487,
            0.9954508543014526,
            0.9946584105491638,
            0.9951984286308289,
            0.9964320659637451,
            0.9952749013900757,
            0.9955568909645081,
            0.9965401887893677,
            0.9947019815444946,
            0.9962411522865295,
            0.9942852854728699,
            0.9885603189468384,
            0.9954807758331299,
            0.9920367002487183,
            0.9948580861091614,
            0.9953768849372864,
            0.9943159222602844
        ]
    },
    "3655": {
        "similarity": 0.9986357688903809,
        "body": "W, H = map(int, input().split())\nrobot_img = [list(map(int, input().split())) for _ in range(H)]\nfloor_img = []\nfor _ in range(H):\n    line = list(map(int, input().split()))\n    floor_img.append(line)\n\nmax_match = 0\nbest_coords = []\n\nfor y in range(H - H // (W + 1) + 1):\n    for x in range(W):\n        match = sum(a == b for a, b in zip(robot_img[y], floor_img[y]))\n        if match > max_match:\n            max_match = match\n            best_coords = [(x, y)]\n        elif match == max_match:\n            best_coords.append((x, y))\n\nfor x, y in sorted(best_coords):\n    print(f\"{x} {y}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977971315383911,
            0.9979704022407532,
            0.9980829358100891,
            0.9977740049362183,
            0.9969909191131592,
            0.9962712526321411,
            0.9979519248008728,
            0.9976128339767456,
            0.9976823925971985,
            0.9982380270957947,
            0.9980818033218384,
            0.9982336163520813,
            0.9985406994819641,
            0.994594156742096,
            0.9986357688903809,
            0.9985895752906799,
            0.9985058307647705,
            0.9982725381851196,
            0.9983470439910889,
            0.998315691947937
        ]
    },
    "3589": {
        "similarity": 0.9970391988754272,
        "body": "    L, R = map(int, input().split())\n    res = [0]*9\n    for x in range(L, R+1):\n        while x > 0:\n            d = int(str(x)[0])\n            if d != 0:\n                x //= d\n            else:\n                break\n        res[x%9] += 1\n    print(*res)",
        "result": "timed out",
        "similarities": [
            0.9925826191902161,
            0.996752917766571,
            0.9958741068840027,
            0.9926306009292603,
            0.9960068464279175,
            0.9970391988754272,
            0.9930450916290283,
            0.9963832497596741,
            0.9912622570991516,
            0.9965852499008179,
            0.996493399143219,
            0.9960055947303772,
            0.9935461282730103,
            0.9960708618164062,
            0.9940750002861023,
            0.9959931969642639,
            0.9964235424995422,
            0.9957072734832764,
            0.9964081645011902,
            0.9962674379348755
        ]
    },
    "3257": {
        "similarity": 0.9963758587837219,
        "body": "import math\n    a, b, c = map(float, input().split())\n    if math.isclose(a**2 + b**2, c**2) and 0 < a <= 100 and 0 < b <= 100:\n        return math.sqrt(3) * (a ** 2)\n    else:\n        return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962192177772522,
            0.9942582845687866,
            0.995078444480896,
            0.9929526448249817,
            0.9959363341331482,
            0.9919662475585938,
            0.9960846304893494,
            0.9940654635429382,
            0.9950355887413025,
            0.9919263124465942,
            0.9950460195541382,
            0.9948014616966248,
            0.9951145648956299,
            0.9958500266075134,
            0.9957970380783081,
            0.9907998442649841,
            0.9962722659111023,
            0.9941335320472717,
            0.9961943626403809,
            0.9963758587837219
        ]
    },
    "3927": {
        "similarity": 0.995590090751648,
        "body": "n = int(input())\na = list(map(int, input().split()))\nm = sum(a)\nmax_weights = 0\nfor k in range(1, n+1):\n    if sum(min(a[:i] or [0], a[i:]) for i in range(k)) == m:\n        max_weights = k\n        break\nprint(max_weights)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992080807685852,
            0.9928117394447327,
            0.9921259880065918,
            0.9953123331069946,
            0.9925410747528076,
            0.9934428334236145,
            0.9955074787139893,
            0.9916817545890808,
            0.9952152967453003,
            0.9954873323440552,
            0.9952220916748047,
            0.9893091917037964,
            0.9922122955322266,
            0.995590090751648,
            0.9933403730392456,
            0.9947043061256409,
            0.9905654788017273,
            0.9911454916000366,
            0.9914600849151611,
            0.9890045523643494
        ]
    },
    "3319": {
        "similarity": 0.9976929426193237,
        "body": "    n, nx, ny, nz = map(int, input().split())\n    planetoids = []\n    for _ in range(n):\n        m, x, y, z, vx, vy, vz = map(int, input().split())\n        planetoids.append((m, (x, y, z), (vx, vy, vz)))\n    planetoids.sort(key=lambda p: (p[0], p[1][2], p[1][1], p[1][0]))\n    planets = []\n    while True:\n        new_planets = []\n        collisions = False\n        for i in range(len(planetoids)):\n            m, loc, vel = planetoids[i]\n            x, y, z = loc\n            vx, vy, vz = vel\n            for j in range(i + 1, len(planetoids)):\n                m2, loc2, vel2 = planetoids[j]\n                x2, y2, z2 = loc2\n                vx2, vy2, vz2 = vel2\n                if (x == x2 and y == y2 and z == z2):\n                    new_mass = m + m2\n                    new_vel = ((vx + vx2) // 2, (vy + vy2) // 2, (vz + vz2) // 2)\n                    planets.append((new_mass, loc, new_vel))\n                    planetoids[i] = None\n                    planetoids[j] = None\n                    collisions = True\n                    break\n            if not collisions:\n                planetoids[i] = (m, (x + vx, y + vy, z + vz), (vx, vy, vz))\n        planetoids = [p for p in planetoids if p is not None]\n        if len(planetoids) == 0:\n            break\n    planets.sort(key=lambda p: p[0], reverse=True)\n    print(len(planets))\n    for i, planet in enumerate(planets):\n        print(f\"P{i}: {planet[0]} {' '.join(map(str, planet[1]))} {' '.join(map(str, planet[2]))}\")",
        "result": "timed out",
        "similarities": [
            0.9975777864456177,
            0.9971056580543518,
            0.9962469339370728,
            0.9971436262130737,
            0.9970679879188538,
            0.9976803660392761,
            0.9958056211471558,
            0.9968947172164917,
            0.9970999360084534,
            0.9955559968948364,
            0.996820330619812,
            0.9961330890655518,
            0.9957700371742249,
            0.9976929426193237,
            0.9973100423812866,
            0.9970946311950684,
            0.9944818615913391,
            0.9961007833480835,
            0.9965928792953491,
            0.997602641582489
        ]
    },
    "3009": {
        "similarity": 0.9949896931648254,
        "body": "    N = int(input())\n    lamps = []\n    for _ in range(N):\n        x, y, energy = map(int, input().split())\n        lamps.append((x, y, energy))\n    \n    positive_energy = sum(e for x, y, e in lamps if e > 0)\n    negative_energy = -sum(e for x, y, e in lamps if e < 0)\n    \n    if abs(positive_energy - negative_energy) > 1e-6:\n        return \"IMPOSSIBLE\"\n    \n    min_length = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            x1, y1, _ = lamps[i]\n            x2, y2, _ = lamps[j]\n            dx = abs(x2 - x1)\n            dy = abs(y2 - y2)\n            length = (dx ** 2 + dy ** 2) ** 0.5\n            if positive_energy * 2 > negative_energy and positive_energy * 2 < negative_energy:\n                if sum(e for x, y, e in lamps[:i] + lamps[i + 1:j] + lamps[j:] if e > 0) >= abs(sum(e for x, y, e in lamps if e < 0)):\n                    min_length = min(min_length, length)\n    \n    return round(min_length, 6)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942447543144226,
            0.9942750334739685,
            0.994176983833313,
            0.9929465055465698,
            0.9939828515052795,
            0.9948843121528625,
            0.9943467378616333,
            0.9935168027877808,
            0.9925799369812012,
            0.9895995259284973,
            0.9941416382789612,
            0.9937790632247925,
            0.9640657305717468,
            0.9940175414085388,
            0.9935535788536072,
            0.9949896931648254,
            0.994526743888855,
            0.9948505759239197,
            0.994358241558075,
            0.9913815259933472
        ]
    },
    "3896": {
        "similarity": 0.9963769316673279,
        "body": "    n = int(input())\n    res = 0\n    for i in range(2**n):\n        x = i ^ ((1<<n)-1)\n        res += bin(i).count('1') - bin(x).count('1')\n    print(res % 1000000007)",
        "result": "timed out",
        "similarities": [
            0.9940992593765259,
            0.9933634400367737,
            0.9876409769058228,
            0.9951366782188416,
            0.9958682656288147,
            0.9963769316673279,
            0.9935557842254639,
            0.994282603263855,
            0.9952676892280579,
            0.9931192994117737,
            0.995981752872467,
            0.9947112202644348,
            0.9959569573402405,
            0.9957475066184998,
            0.9914788603782654,
            0.9955926537513733,
            0.9940349459648132,
            0.9948724508285522,
            0.9942575693130493,
            0.9953703880310059
        ]
    },
    "3509": {
        "similarity": 0.9948521852493286,
        "body": "a, b = map(int, input().split())\nn, m = map(int, input().split())\nroads = []\nfor _ in range(m):\n    u, v, t = map(int, input().split())\n    roads.append((u, v, t))\n\nwait_time = float('inf')\nfor i in range(1 << m):\n    path_time = 0\n    curr_intersec = 1\n    for j in range(m):\n        if (i & (1 << j)):\n            path_time += roads[j][2]\n            curr_intersec = roads[j][1]\n        else:\n            path_time += abs(curr_intersec - roads[j][1]) * max(a, b) / m\n            curr_intersec = roads[j][0]\n    wait_time = min(wait_time, (a + b) // 2 - path_time)\n\nprint(wait_time)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9860436320304871,
            0.9935641884803772,
            0.9927493929862976,
            0.9890339374542236,
            0.9938833117485046,
            0.9906015992164612,
            0.9939213991165161,
            0.994379460811615,
            0.9940401315689087,
            0.994611918926239,
            0.9948521852493286,
            0.9926662445068359,
            0.9928386211395264,
            0.9906358122825623,
            0.9923635125160217,
            0.9946651458740234,
            0.9757032990455627,
            0.993021547794342,
            0.993549644947052,
            0.9893025159835815
        ]
    },
    "3547": {
        "similarity": 0.9982292652130127,
        "body": "    n = int(input())\n    total_area = 0\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        total_area += (x2 - x1) * (y2 - y1)\n    print(format(total_area, \".2f\"))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9981135129928589,
            0.9979027509689331,
            0.9982082843780518,
            0.9978336691856384,
            0.9978336691856384,
            0.9982082843780518,
            0.9943728446960449,
            0.9979972839355469,
            0.9978336691856384,
            0.9982292652130127,
            0.9980085492134094,
            0.9981786012649536,
            0.9980149865150452,
            0.9945465922355652,
            0.9977880716323853,
            0.9836249351501465,
            0.9979559183120728,
            0.9980817437171936,
            0.9981656670570374,
            0.9981786012649536
        ]
    },
    "3017": {
        "similarity": 0.997165858745575,
        "body": "    n, e = map(int, input().split())\n    count = 0\n    for k in range(n+1):\n        if str(2**e) in str(k):\n            count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9908976554870605,
            0.9955112934112549,
            0.9970750212669373,
            0.9939170479774475,
            0.9813154339790344,
            0.9961738586425781,
            0.997165858745575,
            0.997165858745575,
            0.997165858745575,
            0.9963017702102661,
            0.9922776818275452,
            0.9929789304733276,
            0.9961738586425781,
            0.997165858745575,
            0.9965278506278992,
            0.997165858745575,
            0.997165858745575,
            0.996006190776825,
            0.9957054853439331,
            0.997165858745575
        ]
    },
    "3076": {
        "similarity": 0.995643138885498,
        "body": "n, k = map(int, input().split())\njewels = []\nfor _ in range(n):\n    s, v = map(int, input().split())\n    jewels.append((s, v))\nmax_values = [0] * (k + 1)\nfor s, v in sorted(jewels, reverse=True):\n    for i in range(k, s - 1, -1):\n        max_values[i] = max(max_values[i], max_values[i - s] + v)\nprint(*max_values[k:][::-1], sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954624176025391,
            0.9921973347663879,
            0.995643138885498,
            0.9949325919151306,
            0.9925137758255005,
            0.992020845413208,
            0.9943269491195679,
            0.9942707419395447,
            0.9953212738037109,
            0.9933096170425415,
            0.9927252531051636,
            0.9914962649345398,
            0.9950935244560242,
            0.9955225586891174,
            0.9954185485839844,
            0.9908686280250549,
            0.9941067099571228,
            0.9927819967269897,
            0.9951611757278442,
            0.9940894246101379
        ]
    },
    "3923": {
        "similarity": 0.9952380657196045,
        "body": "N, A, B = map(int, input().split())\nP = [i+1 for i in range(N)]\ng_val = [0]*N\nfor i in range(N):\n    j = 1\n    while True:\n        if P[i-1] == g_val[i]:\n            break\n        g_val[i] = P[P.index(P[i-1])]\n        j += 1\nif A not in set(g_val) or B not in set(g_val):\n    print(-1)\nelse:\n    print(' '.join(map(str, g_val)))",
        "result": "timed out",
        "similarities": [
            0.99249666929245,
            0.9934441447257996,
            0.9946689605712891,
            0.9948042631149292,
            0.9924296140670776,
            0.9925888776779175,
            0.9938505291938782,
            0.9936519265174866,
            0.990543782711029,
            0.9952380657196045,
            0.9932129383087158,
            0.9938888549804688,
            0.9931715130805969,
            0.9941534996032715,
            0.9813278913497925,
            0.990836501121521,
            0.9941538572311401,
            0.9937319755554199,
            0.9858590364456177,
            0.9947971701622009
        ]
    },
    "3332": {
        "similarity": 0.9960504770278931,
        "body": "    n = int(input())\n    streams = []\n    for _ in range(n):\n        s, d, p = map(int, input().split())\n        streams.append((s, d, p))\n    streams.sort(key=lambda x: (x[0], -x[2]), reverse=True)\n    max_priority = 0\n    stack = []\n    for s, d, p in streams:\n        while stack and stack[-1][0] <= s:\n            stack.pop()\n        if not stack or s >= stack[-1][1]:\n            stack.append((s + d, p))\n        else:\n            max_priority += p\n            stack.pop()\n    print(sum(p for _, p in stack))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896922707557678,
            0.9952159523963928,
            0.9944707751274109,
            0.9956949949264526,
            0.9939942955970764,
            0.9959598183631897,
            0.9952894449234009,
            0.9954587817192078,
            0.9950975179672241,
            0.9886049032211304,
            0.9951488971710205,
            0.9936803579330444,
            0.995458722114563,
            0.9934298992156982,
            0.9949015378952026,
            0.9960504770278931,
            0.9958482384681702,
            0.9938660860061646,
            0.9908248782157898,
            0.9952002167701721
        ]
    },
    "3240": {
        "similarity": 0.9950740337371826,
        "body": "k, v = map(int, input().split())\ntotal_votes = sum([int(i) for i in bin((1 << k) - 1)[2:].zfill(v-1)])\nb_v = int(input()) // 1\nmax_expected_positions = 0\nfor b in range(2**v):\n    expected_positions = sum([(p * ((b >> j) & 1)) for j, p in enumerate(map(int, input().split()))[1:]])\n    if expected_positions > max_expected_positions:\n        max_expected_positions = expected_positions\n        b_v = b\nprint(b_v)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943069815635681,
            0.9918079376220703,
            0.9881447553634644,
            0.9921259880065918,
            0.9916520714759827,
            0.9888289570808411,
            0.991635799407959,
            0.9922906756401062,
            0.992022693157196,
            0.9948272705078125,
            0.9926201701164246,
            0.9892562031745911,
            0.9940310120582581,
            0.9950334429740906,
            0.9926595091819763,
            0.9942420125007629,
            0.9950740337371826,
            0.991891086101532,
            0.9949131011962891,
            0.9913873076438904
        ]
    },
    "3368": {
        "similarity": 0.99579256772995,
        "body": "    n, m = map(int, input().split())\n    animals = [[] for _ in range(n)]\n    \n    for i in range(n):\n        info = input().split()\n        animal_type = info[0]\n        num_animals = int(info[1])\n        \n        for j in range(2, 2 + num_animals):\n            animals.append([animal_type, len(animals)])\n    return \"POSSIBLE\" if any(len(enclosure) > 1 for enclosure in animals) else \"FALSE ALARM\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.99579256772995,
            0.9953488111495972,
            0.9952505230903625,
            0.9932039976119995,
            0.9937416911125183,
            0.9948129057884216,
            0.9943512678146362,
            0.9936047792434692,
            0.9935286641120911,
            0.9866048693656921,
            0.9943445920944214,
            0.9922397136688232,
            0.9949491620063782,
            0.9915100932121277,
            0.9932965636253357,
            0.9956371188163757,
            0.9927133321762085,
            0.9944459795951843,
            0.9951073527336121,
            0.9955805540084839
        ]
    },
    "3538": {
        "similarity": 0.9969014525413513,
        "body": "n, d = map(int, input().split())\nfrogs = []\nfor _ in range(n):\n    l, w, h = map(int, input().split())\n    frogs.append((l, w, h))\nfrogs.sort(key=lambda x: (x[0], -x[1]))\nans = 0\ni = j = 0\nwhile i < n:\n    while j < n and sum(frog[1] for frog in frogs[i:j+1]) <= d:\n        if frogs[i][0] + max(h for h in (frog[2] for frog in frogs[i:j+1])) > d:\n            ans += 1\n            i = j = i + 1\n        else:\n            j += 1\nprint(ans)",
        "result": "timed out",
        "similarities": [
            0.9955554604530334,
            0.9960528016090393,
            0.9959889650344849,
            0.995644211769104,
            0.9963019490242004,
            0.9968584775924683,
            0.9950241446495056,
            0.9927393198013306,
            0.9961177706718445,
            0.9966506958007812,
            0.9964033365249634,
            0.9956125020980835,
            0.995082437992096,
            0.991168200969696,
            0.99468594789505,
            0.9969014525413513,
            0.9954797625541687,
            0.9922544360160828,
            0.994118332862854,
            0.996656596660614
        ]
    },
    "3183": {
        "similarity": 0.9912281036376953,
        "body": "import sys\nfrom collections import defaultdict\n\n    graph = defaultdict(dict)\n    for _ in range(m):\n        u, v, c, w = map(int, input().split())\n        graph[u][v] = (c, w)\n\n    flow = 0\n    cost = 0\n    while True:\n        path = bfs(graph, s, t)\n        if not path: break\n        f, p = dfs(graph, path, s, t)\n        flow += f\n        cost += p\n\n    print(flow, cost)\n\n\n    visited = set()\n    queue = [(s, [s])]\n    while queue:\n        u, path = queue.pop(0)\n        for v in graph[u]:\n            if (v not in visited) and (graph[u][v]):\n                visited.add(v)\n                queue.append((v, path + [v]))\n                if v == t: return path\n\n    f = float('inf')\n    p = 0\n    for i in range(len(path) - 1):\n        u = path[i]\n        v = path[i+1]\n        c, w = graph[u][v]\n        if c > 0:\n            f = min(f, c)\n            p += w\n    return f, p",
        "result": "failed: testcase 0",
        "similarities": [
            0.982496976852417,
            0.986743152141571,
            0.9898159503936768,
            0.9898358583450317,
            0.9911699891090393,
            0.9907279014587402,
            0.9902524352073669,
            0.9875797629356384,
            0.9854734539985657,
            0.9907410144805908,
            0.9910595417022705,
            0.9877768158912659,
            0.9904980063438416,
            0.9814533591270447,
            0.9912281036376953,
            0.9845500588417053,
            0.9888753294944763,
            0.9911958575248718,
            0.9910925030708313,
            0.9907549619674683
        ]
    },
    "3916": {
        "similarity": 0.9940625429153442,
        "body": "n = int(input())\nk = [int(x) for x in input().split()]\nP = 1\nfor i in range(1, n+1):\n    while k[i-1] > 1:\n        k[i-1] //= next((x for x in range(2, k[i-1]+1) if k[i-1]%x==0), None)\n    P = max(P, k[i-1])\nprint(P)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916307330131531,
            0.9915624856948853,
            0.9916222095489502,
            0.9910652041435242,
            0.9937778115272522,
            0.9940625429153442,
            0.9905298948287964,
            0.9926386475563049,
            0.9931524395942688,
            0.9906213879585266,
            0.9879810810089111,
            0.9925987124443054,
            0.990276038646698,
            0.9919963479042053,
            0.9916514158248901,
            0.9929269552230835,
            0.990527331829071,
            0.9926267266273499,
            0.9849574565887451,
            0.9791422486305237
        ]
    },
    "3195": {
        "similarity": 0.9956032633781433,
        "body": "T_g, T_y, T_r = map(int, input().split())\nn = int(input())\nobserved_green, observed_yellow, observed_red = 0, 0, 0\nfor _ in range(n):\n    t, c = map(str, input().split())\n    t = int(t)\n    if c == 'green':\n        observed_green += 1\n    elif c == 'yellow':\n        observed_yellow += 1\n    else:\n        observed_red += 1\n\nt_q, c_q = map(str, input().split())\nt_q = int(t_q)\n\n    for t in range(T_g):\n        if (k - t) % (T_g + T_y + T_r) == T_g:\n            return k - t\n    return None\n\npossible_ts = set()\nfor k in range(T_g, n * T_g + T_r, T_g + T_y + T_r):\n    possible_ts.add(find_t(k))\n\np = 0 if len(possible_ts) == 0 else (observed_green / (T_g + T_y + T_r)) if c_q == 'green' else (observed_yellow / (T_g + T_y + T_r)) if c_q == 'yellow' else (observed_red / (T_g + T_y + T_r))\nprint('{:.3f}'.format(p))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9884473085403442,
            0.9952884316444397,
            0.993047297000885,
            0.9937474131584167,
            0.9932997822761536,
            0.9939237833023071,
            0.9932954907417297,
            0.9944802522659302,
            0.9939046502113342,
            0.9914757609367371,
            0.9955869317054749,
            0.9955888390541077,
            0.9940373301506042,
            0.9912154674530029,
            0.9917003512382507,
            0.9952502250671387,
            0.9956032633781433,
            0.9932236075401306,
            0.9944961071014404,
            0.989119291305542
        ]
    },
    "3998": {
        "similarity": 0.9957417845726013,
        "body": "    n = int(input())\n    ratings = list(map(int, input().split()))\n    max_rating = min(ratings)\n    rating_diff = sum(ratings) - n * max_rating\n    matches = rating_diff // (n-1)\n    remainder = rating_diff % (n-1)\n    \n    print(max_rating)\n    for _ in range(matches):\n        friends_to_play = [str(int(i < 5)) for i in range(n)]\n        print(''.join(friends_to_play))\n    if remainder:\n        friends_to_play = ['0'] * n\n        friends_to_play[remainder-1] = '1'\n        print(''.join(friends_to_play))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995097815990448,
            0.9942273497581482,
            0.9939284324645996,
            0.9948678612709045,
            0.9947908520698547,
            0.9945605397224426,
            0.9911504983901978,
            0.9951425194740295,
            0.9957417845726013,
            0.9942026734352112,
            0.9949975609779358,
            0.9940469861030579,
            0.9938228130340576,
            0.9880190491676331,
            0.9947354197502136,
            0.9935560822486877,
            0.9955980181694031,
            0.9944337606430054,
            0.9886558055877686,
            0.9921110272407532
        ]
    },
    "3150": {
        "similarity": 0.9936674237251282,
        "body": "N = int(input())\nguards = []\nfor _ in range(N):\n    x1, y1, x2, y2 = map(int, input().split())\n    guards.append(((x1, y1), (x2, y2)))\n\nways = 0\nfor i in range(3):\n    for j in range(i+1, 3):\n        seen = set()\n        for k in range(N):\n            x1, y1, x2, y2 = guards[k][0], guards[k][1], guards[k][2], guards[k][3]\n            if (i == 0 and min(x1, x2) <= j[0] <= max(x1, x2)) or \\\n               (j == 0 and min(y1, y2) <= i[1] <= max(y1, y2)):\n                seen.add(k)\n        if len(seen) == N:\n            ways += 1\nprint(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906325340270996,
            0.9913398623466492,
            0.9902016520500183,
            0.9914621114730835,
            0.9895196557044983,
            0.9919953942298889,
            0.9860566854476929,
            0.986534833908081,
            0.9824503660202026,
            0.9936674237251282,
            0.9913070201873779,
            0.9919336438179016,
            0.9903429746627808,
            0.9933415651321411,
            0.9880278706550598,
            0.9926165342330933,
            0.985984206199646,
            0.9876168966293335,
            0.9915390014648438,
            0.9843852519989014
        ]
    },
    "3566": {
        "similarity": 0.9969037771224976,
        "body": "n, q = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    i, x = map(int, input().split())\n    a[i] = x\n    left, right = 0, sum(a[i+1:]) if i else 0\n    for j in range(i-1, -1, -1) + range(i+1, n):\n        left += a[j]\n        right += a[j]\n        if abs(left - right) < abs((left + right) // 2 - (right)):\n            break\n    print(min(j for j in range(i-1, -1, -1) + range(i+1, n) if left >= a[j] and right >= a[j]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947019815444946,
            0.9955891370773315,
            0.9966207146644592,
            0.9952760934829712,
            0.9960027933120728,
            0.9898672699928284,
            0.9930596947669983,
            0.9962874054908752,
            0.9963011741638184,
            0.9942663311958313,
            0.9966922402381897,
            0.9949864745140076,
            0.9957618713378906,
            0.9937514066696167,
            0.9964073896408081,
            0.993617594242096,
            0.9964830279350281,
            0.9966922402381897,
            0.9969037771224976,
            0.9910145998001099
        ]
    },
    "3401": {
        "similarity": 0.9966696500778198,
        "body": "    n, s, t, q = map(int, input().split())\n    hills = [list(map(int, input().split())) for _ in range(n)]\n    springs = list(map(int, input().split()))\n    towns = list(map(int, input().split()))\n    \n    springs.sort()\n    towns.sort()\n    \n    dp = [[float('inf')] * (t + 1) for _ in range(s + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, s + 1):\n        for j in range(i):\n            if hills[springs[i - 1]][2] < hills[towns[j]][2]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + abs(hills[springs[i - 1]][0] - hills[towns[j]][0]) + abs(hills[springs[i - 1]][1] - hills[towns[j]][1]))\n    \n    result = float('inf')\n    for i in range(t):\n        if dp[s][i] != float('inf'):\n            result = min(result, dp[s][i])\n        else:\n            return 'IMPOSSIBLE'\n    \n    print(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945498108863831,
            0.993821382522583,
            0.995356023311615,
            0.995371401309967,
            0.9931216239929199,
            0.9952734112739563,
            0.9965061545372009,
            0.9953667521476746,
            0.9933350086212158,
            0.9930590391159058,
            0.9956197142601013,
            0.9966696500778198,
            0.9966374635696411,
            0.9958272576332092,
            0.9961151480674744,
            0.991939127445221,
            0.9963061809539795,
            0.9961254000663757,
            0.995517909526825,
            0.9953669309616089
        ]
    },
    "3660": {
        "similarity": 0.9965017437934875,
        "body": "from collections import defaultdict\n\n    message = input().upper()\n    n = int(input())\n    sticker_info = defaultdict(int)\n    for _ in range(n):\n        word, price = input().split()\n        sticker_info[word] = int(price)\n\n    dp = [float('inf')] * (len(message) + 1)\n    dp[0] = 0\n    for i in range(1, len(message) + 1):\n        for j in range(i):\n            if message[j:i].upper() in sticker_info:\n                dp[i] = min(dp[i], dp[j] + sticker_info[message[j:i].upper()])\n    \n    if dp[-1] == float('inf'):\n        return 'IMPOSSIBLE'\n    else:\n        return str(dp[-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.994454026222229,
            0.9956464171409607,
            0.9964760541915894,
            0.9953631162643433,
            0.9958974123001099,
            0.9933823347091675,
            0.9965017437934875,
            0.9956082105636597,
            0.9943177103996277,
            0.9936088919639587,
            0.9950589537620544,
            0.9951356649398804,
            0.9942916035652161,
            0.9941633343696594,
            0.9939417839050293,
            0.9928582906723022,
            0.995339035987854,
            0.9965012073516846,
            0.9948243498802185,
            0.9955198168754578
        ]
    },
    "3721": {
        "similarity": 0.9933187365531921,
        "body": "    n, m, q = map(int, input().split())\n    elements = set()\n    for _ in range(q):\n        r, c = map(int, input().split())\n        elements.add((r, c))\n    \n    missing = set()\n    for r in range(1, n+1):\n        for c in range(1, m+1):\n            if (r, c) not in elements:\n                missing.add((r, c))\n    \n    return len(missing) - 4",
        "result": "timed out",
        "similarities": [
            0.9917780160903931,
            0.991804301738739,
            0.9907034039497375,
            0.9850624799728394,
            0.9897409677505493,
            0.9933187365531921,
            0.9867244362831116,
            0.9903756976127625,
            0.987157940864563,
            0.9930087924003601,
            0.9887511730194092,
            0.9927438497543335,
            0.9888028502464294,
            0.9891476035118103,
            0.988644540309906,
            0.9866225719451904,
            0.9860860705375671,
            0.9912063479423523,
            0.9896871447563171,
            0.9890242218971252
        ]
    },
    "3811": {
        "similarity": 0.9971010088920593,
        "body": "    n = int(input())\n    gcds = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        gcds.append(max(gcd(a, b), 2))\n    gcds.sort()\n    for i in range(len(gcds)):\n        if gcds[i] > 1:\n            return gcds[i]\n    return -1\n\n    while b:\n        a, b = b, a % b\n    return abs(a)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927845001220703,
            0.995128333568573,
            0.9920770525932312,
            0.9951422810554504,
            0.9949957132339478,
            0.9952294230461121,
            0.996269941329956,
            0.9971010088920593,
            0.9949277639389038,
            0.9955024719238281,
            0.9967362284660339,
            0.9963341951370239,
            0.994545578956604,
            0.9946843981742859,
            0.9955715537071228,
            0.9941952228546143,
            0.996299147605896,
            0.9956221580505371,
            0.9962264895439148,
            0.9949790835380554
        ]
    },
    "3528": {
        "similarity": 0.9959062337875366,
        "body": "import math\n\n    n = int(input())\n    nails = [list(map(int, input().split())) for _ in range(n)]\n    picked = list(input())\n\n    areas = []\n    prev_area = 0\n    for i in range(len(picked)):\n        if picked[i] == 'L':\n            min_x = min(x for x, y in nails[:i+1])\n            max_y = max(y for x, y in nails[:i+1])\n        elif picked[i] == 'R':\n            min_x = min(x for x, y in nails[:i+1])\n            max_y = max(y for x, y in nails[:i+1])\n        elif picked[i] == 'U':\n            min_x = min(x for x, y in nails[:i+1])\n            max_y = max(y for x, y in nails[:i+1])\n        else:\n            min_x = min(x for x, y in nails[:i+1])\n            max_y = min(y for x, y in nails[:i+1])\n\n        area = (max_y - min_y) * (max_x - min_x)\n        areas.append(f'{area:.1f}')\n        prev_area = area\n\n    print('\\n'.join(areas))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939611554145813,
            0.9936805367469788,
            0.9958775043487549,
            0.9895553588867188,
            0.992520809173584,
            0.9951162934303284,
            0.9957441091537476,
            0.9946951866149902,
            0.991825520992279,
            0.9928496479988098,
            0.9955946207046509,
            0.9928493499755859,
            0.992358386516571,
            0.9932592511177063,
            0.9927355051040649,
            0.9948233366012573,
            0.9957042336463928,
            0.9959062337875366,
            0.9932044148445129,
            0.9949067831039429
        ]
    },
    "3890": {
        "similarity": 0.9957507252693176,
        "body": "    n, k = map(int, input().split())\n    res = pow(2, n-k-1, 1000000007)\n    if k > 0:\n        for i in range(k):\n            res *= (i+1) % 1000000007\n        res %= 1000000007\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904550313949585,
            0.9939085245132446,
            0.9951123595237732,
            0.9948001503944397,
            0.9949899315834045,
            0.9927834272384644,
            0.9931455850601196,
            0.987780749797821,
            0.9897581338882446,
            0.9944095611572266,
            0.9937601685523987,
            0.9929211139678955,
            0.9925823211669922,
            0.9937266111373901,
            0.992244303226471,
            0.9957507252693176,
            0.9945480823516846,
            0.9943080544471741,
            0.9940191507339478,
            0.9942703247070312
        ]
    },
    "3534": {
        "similarity": 0.9931073784828186,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nlast_key = A[0]\ncorrect_keys = 1\nk = 0\nfor i in range(1, N):\n    if A[i] > last_key:\n        k += 1\n    elif A[i] < last_key:\n        k -= 1\n    last_key = A[i]\n    if A[i] == last_key:\n        correct_keys += 1\nprint(correct_keys)\nprint(k)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9809634685516357,
            0.9921880960464478,
            0.9923273324966431,
            0.9917789101600647,
            0.9737751483917236,
            0.9914185404777527,
            0.9894077777862549,
            0.9858920574188232,
            0.992318332195282,
            0.9922850728034973,
            0.985312819480896,
            0.9898372292518616,
            0.9899380207061768,
            0.9853724241256714,
            0.9912477731704712,
            0.9887428283691406,
            0.9929530620574951,
            0.9931073784828186,
            0.9901255369186401,
            0.9914320111274719
        ]
    },
    "3371": {
        "similarity": 0.9962784647941589,
        "body": "n, c = map(int, input().split())\nknown_meets = {}\nfor _ in range(c):\n    a, b, y = map(int, input().split())\n    if a not in known_meets:\n        known_meets[a] = set()\n    if b not in known_meets:\n        known_meets[b] = set()\n    known_meets[a].add(y)\n    known_meets[b].add(y)\n\nfor y in range(1948, 2009):\n    first_part = sum(len(meets) <= (y-1)//2 for meets in known_meets.values())\n    if len(range(n)) - first_part <= 2*n//3:\n        print(y)\n        break\nelse:\n    print('Impossible')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957438111305237,
            0.9962784647941589,
            0.9958064556121826,
            0.9939237833023071,
            0.9912986755371094,
            0.9937266111373901,
            0.9957188963890076,
            0.9954612255096436,
            0.9920580983161926,
            0.9947559833526611,
            0.9956709146499634,
            0.9954230785369873,
            0.9924502372741699,
            0.9953302145004272,
            0.989690899848938,
            0.995945155620575,
            0.9938212037086487,
            0.9942691326141357,
            0.9921408295631409,
            0.9957135915756226
        ]
    },
    "3621": {
        "similarity": 0.996232807636261,
        "body": "n = int(input())\ncolor_matrix = [list(map(int, input().split())) for _ in range(n)]\ntotal_sum = 0\nfor i in range(1 << n):\n    visited = [False] * n\n    color = -1\n    for j in range(n):\n        if ((i >> j) & 1): \n            for k in range(n):\n                if (i >> k) & 1 and c[j][k]:\n                    if c[j][k] != color:\n                        color = c[j][k]\n                        break\n            if color == -1:\n                break\n    total_sum += color + 1\nprint(total_sum % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927049279212952,
            0.9934533834457397,
            0.9953286051750183,
            0.9930768609046936,
            0.9953848123550415,
            0.9933971762657166,
            0.996232807636261,
            0.9955665469169617,
            0.9946733117103577,
            0.9931012988090515,
            0.9959983825683594,
            0.9953664541244507,
            0.9947174787521362,
            0.9960309267044067,
            0.9924505949020386,
            0.9961957335472107,
            0.9954609274864197,
            0.9925007224082947,
            0.9951741099357605,
            0.9950386881828308
        ]
    },
    "3392": {
        "similarity": 0.9968315958976746,
        "body": "    N = int(input())\n    tree_heights = [list(map(int, input().split())) for _ in range(N)]\n    growth_speeds = [list(map(int, input().split())) for _ in range(N)]\n    max_group_size = 0\n    visited = [[False]*N for _ in range(N)]\n\n        if i < 0 or i >= N or j < 0 or j >= N or visited[i][j]:\n            return 0\n        visited[i][j] = True\n        size = 1\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N and tree_heights[i][j] == tree_heights[x][y] and growth_speeds[i][j] == growth_speeds[x][y]:\n                size += dfs(x, y)\n        return size\n\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                max_group_size = max(max_group_size, dfs(i, j))\n    print(max_group_size)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966050386428833,
            0.9964555501937866,
            0.9911770224571228,
            0.995056688785553,
            0.9963563680648804,
            0.9962965250015259,
            0.9963000416755676,
            0.9949314594268799,
            0.9869763255119324,
            0.9961785674095154,
            0.99657142162323,
            0.9957581758499146,
            0.9961575269699097,
            0.996600329875946,
            0.9935551881790161,
            0.9955530762672424,
            0.9968315958976746,
            0.9967548847198486,
            0.9941623210906982,
            0.9965946674346924
        ]
    },
    "3095": {
        "similarity": 0.9965805411338806,
        "body": "    R, S = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(R)]\n    \n    max_size = 0\n    \n    for r in range(1, R):\n        for c in range(1, S):\n            if A[0][0] + A[r-1][c-1] <= A[0][c-1] + A[r-1][0]:\n                submatrix_R = min(R, r+1)\n                submatrix_S = min(S, c+1)\n                \n                max_size = max(max_size, (submatrix_R - 1) * (submatrix_S - 1))\n    \n    print(max_size if max_size > 0 else 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939771294593811,
            0.9935597777366638,
            0.9951457977294922,
            0.9960925579071045,
            0.9965805411338806,
            0.9950504302978516,
            0.9934573769569397,
            0.9958935976028442,
            0.995297372341156,
            0.994883120059967,
            0.9949453473091125,
            0.9920796751976013,
            0.9958513975143433,
            0.9950986504554749,
            0.9945508241653442,
            0.9961820840835571,
            0.9957029223442078,
            0.9944582581520081,
            0.9954305291175842,
            0.9945020079612732
        ]
    },
    "3769": {
        "similarity": 0.995432436466217,
        "body": "    p, k = map(int, input().split())\n    count = [1] * p\n    for _ in range(p):\n        for i in range(1, p):\n            count[i] += count[(k*i)%p]\n    print(sum(count) % (10**9 + 7))",
        "result": "timed out",
        "similarities": [
            0.9944422841072083,
            0.9926713705062866,
            0.994684100151062,
            0.988504946231842,
            0.9926711916923523,
            0.9898303151130676,
            0.9948312640190125,
            0.9941186308860779,
            0.9924094676971436,
            0.9887052178382874,
            0.9918965697288513,
            0.9916642904281616,
            0.9944588541984558,
            0.9932510852813721,
            0.995344877243042,
            0.995432436466217,
            0.9929277300834656,
            0.9923962950706482,
            0.994607150554657,
            0.9946722984313965
        ]
    },
    "3563": {
        "similarity": 0.9937616586685181,
        "body": "n = int(input())\nholes = [list(map(int, input().split())) for _ in range(n)]\nedges = []\nfor i in range(n):\n    x1, y1 = holes[i]\n    for j in range(i+1, n):\n        x2, y2 = holes[j]\n        if (y2 - y1) * (x1 + x2) == (y1 - y2) * (x1 - x2):  # Same slope\n            edges.append((abs(x1 - x2), i, j))\nedges.sort()\nlines = set()\nfor edge in edges:\n    if not any(i in holes[k] or j in holes[k] for k in lines):\n        lines.add(edge[1:])\nprint(len(lines) + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931967854499817,
            0.9912852048873901,
            0.9847849011421204,
            0.9792904257774353,
            0.9893888235092163,
            0.9927778840065002,
            0.9921007752418518,
            0.990559458732605,
            0.9881097078323364,
            0.9924031496047974,
            0.990945041179657,
            0.9871540069580078,
            0.9927538633346558,
            0.9922700524330139,
            0.9917426705360413,
            0.9918346405029297,
            0.9926360249519348,
            0.9937616586685181,
            0.993363618850708,
            0.9860501885414124
        ]
    },
    "3618": {
        "similarity": 0.9973856210708618,
        "body": "    MOD = 998244353\n    dp = [0] * (n+1)\n    dp[0] = 2\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            dp[i] = dp[(i-1)//2]\n        else:\n            dp[i] = (dp[(i-2)//2] + dp[(i-4)//2]) % MOD\n    return dp[n]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948853254318237,
            0.9962142109870911,
            0.9847811460494995,
            0.9970418810844421,
            0.9966660737991333,
            0.9973856210708618,
            0.9941667318344116,
            0.9969071745872498,
            0.9957686066627502,
            0.9967864155769348,
            0.9947706460952759,
            0.9971705079078674,
            0.9940613508224487,
            0.9973057508468628,
            0.99432373046875,
            0.9948022961616516,
            0.9971058368682861,
            0.9965786337852478,
            0.9963777661323547,
            0.996445894241333
        ]
    },
    "3830": {
        "similarity": 0.9965859651565552,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = list(input())\n        returnable_rooms = 0\n        for i in range(n):\n            if (s[i] == '>' and s[(i+1)%n] != '<') or (s[i] == '<' and s[(i+1)%n] != '>'):\n                returnable_rooms += 1\n        print(returnable_rooms)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950932860374451,
            0.9965859651565552,
            0.9962134957313538,
            0.9962001442909241,
            0.9961947202682495,
            0.9943912029266357,
            0.9959176778793335,
            0.9920482635498047,
            0.9871057271957397,
            0.9956640005111694,
            0.9961194396018982,
            0.9940257668495178,
            0.9943026304244995,
            0.9931662678718567,
            0.9959701895713806,
            0.9964842796325684,
            0.9893041849136353,
            0.9953230023384094,
            0.9964725971221924,
            0.992594301700592
        ]
    },
    "3912": {
        "similarity": 0.9949447512626648,
        "body": "    n = int(input())\n    s = input()\n    rev_s = s[::-1]\n    l, r = 0, n-1\n    k = 0\n    res = []\n    while l <= r:\n        if s[l:r+1] == rev_s[l:r+1]:\n            res.append(s[l:r+1])\n            l, r = r, l\n            k += 1\n        else:\n            break\n    print(k)\n    for i in range(0, n, k):\n        res.append(res[i//k])\n    print(' '.join(res))",
        "result": "timed out",
        "similarities": [
            0.9923369884490967,
            0.9949447512626648,
            0.9908216595649719,
            0.9927935600280762,
            0.9858982563018799,
            0.9936342835426331,
            0.9907578229904175,
            0.9876118898391724,
            0.9939950704574585,
            0.9925792217254639,
            0.9934824109077454,
            0.9931550621986389,
            0.9937571287155151,
            0.9933722615242004,
            0.9934074282646179,
            0.9937921762466431,
            0.9914994835853577,
            0.9938178062438965,
            0.9898359179496765,
            0.9937338829040527
        ]
    },
    "3878": {
        "similarity": 0.9974618554115295,
        "body": "    n, m = map(int, input().split())\n    graph = {}\n    for _ in range(m):\n        u, v = map(int, input().split())\n        if u not in graph:\n            graph[u] = set()\n        if v not in graph:\n            graph[v] = set()\n        graph[u].add(v)\n        graph[v].add(u)\n\n    steps = 0\n    selected = []\n    while len(graph) > 1:\n        max_degree = 0\n        max_node = None\n        for node, friends in graph.items():\n            if len(friends) > max_degree:\n                max_degree = len(friends)\n                max_node = node\n        steps += 1\n        selected.append(max_node)\n        for friend in list(graph[max_node]):\n            graph[friend].update(graph.pop(max_node))\n    return str(steps) + '\\n' + ' '.join(map(str, selected))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972562193870544,
            0.9965181946754456,
            0.9969541430473328,
            0.9968895316123962,
            0.9970004558563232,
            0.9973732829093933,
            0.9971187114715576,
            0.9969791769981384,
            0.9974618554115295,
            0.9973393678665161,
            0.9943235516548157,
            0.9962854981422424,
            0.9926875233650208,
            0.9969562888145447,
            0.9969891905784607,
            0.9960144758224487,
            0.9973901510238647,
            0.9974585175514221,
            0.9969465136528015,
            0.9958146810531616
        ]
    },
    "3010": {
        "similarity": 0.9953996539115906,
        "body": "    n = int(input())\n    points = set()\n    for _ in range(n):\n        x0, y0, x1, y1 = map(int, input().split())\n        if x0 == x1:\n            if min(y0, y1) <= max(y0, y1):  # vertical line\n                points.add((x0, min(y0, y1)))\n        elif y0 == y1:\n            if min(x0, x1) <= max(x0, x1):  # horizontal line\n                points.add((min(x0, x1), y0))\n        else:  # diagonal line\n            m = (y1 - y0) / (x1 - x0)\n            b = y0 - m * x0\n            for x in range(min(x0, x1), max(x0, x1) + 1):\n                y = int(m * x + b)\n                points.add((x, y))\n    print(len({tuple(sorted(p)) for p in points}))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9840379357337952,
            0.9950584769248962,
            0.9932183027267456,
            0.9930437803268433,
            0.9907079339027405,
            0.9945052266120911,
            0.9953646659851074,
            0.9950982332229614,
            0.9906386137008667,
            0.993691623210907,
            0.9950007200241089,
            0.9939805865287781,
            0.9910154938697815,
            0.9953996539115906,
            0.9903922080993652,
            0.9911409616470337,
            0.9946437478065491,
            0.993587076663971,
            0.9936909079551697,
            0.9827415347099304
        ]
    },
    "3068": {
        "similarity": 0.9949766397476196,
        "body": "from collections import defaultdict, Counter\n\n    n = int(input())\n    circle_counts = defaultdict(Counter)\n    for _ in range(n):\n        suspects, player, reply = input().split()\n        reply = int(reply)\n        circle_counts[player][int(suspects[0] < suspects[1])] += 1\n    total_solutions = 1\n    for count1, count2 in zip(circle_counts[1].values(), circle_counts[2].values()):\n        total_solutions *= (count1 + 1) * (count2 + 1)\n    return total_solutions - 1 if n > 0 else 2600",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948784708976746,
            0.9942745566368103,
            0.9886452555656433,
            0.9878287315368652,
            0.9949296712875366,
            0.9916670918464661,
            0.99346923828125,
            0.9938332438468933,
            0.9936726093292236,
            0.9941341876983643,
            0.9947046041488647,
            0.9945576190948486,
            0.9949678182601929,
            0.9937081933021545,
            0.9942228198051453,
            0.9944517016410828,
            0.9924087524414062,
            0.9949766397476196,
            0.9929962158203125,
            0.9944409728050232
        ]
    },
    "3030": {
        "similarity": 0.9953778982162476,
        "body": "n = int(input())\nvalues = [0] * n\nparent_indices = [0] * n\nfor i in range(n):\n    value, parent_index = map(int, input().split())\n    values[i] = value\n    parent_indices[i] = parent_index\nheap_size = 1\nfor node_index in range(2, n):\n    if values[node_index] > values[parent_indices[node_index]]:\n        heap_size += 1\nprint(heap_size)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9932574033737183,
            0.9946655631065369,
            0.9937888979911804,
            0.9941086173057556,
            0.9930875897407532,
            0.9933385252952576,
            0.9941145181655884,
            0.9933953881263733,
            0.9945562481880188,
            0.9927077293395996,
            0.9913079142570496,
            0.9941423535346985,
            0.9935629963874817,
            0.9941533803939819,
            0.9939258098602295,
            0.9947232604026794,
            0.9953778982162476,
            0.9927023649215698,
            0.9920123219490051,
            0.9949845671653748
        ]
    },
    "3630": {
        "similarity": 0.9959998726844788,
        "body": "    s1, s2 = input().split()\n    moves = 0\n    for c1, c2 in zip(s1, s2):\n        if ord(c2) > ord(c1):\n            if 'z' not in s1[:s1.index(c1)]:\n                moves += (ord(c2) - ord(c1))\n        elif ord(c2) < ord(c1):\n            for i in range(len(s1)):\n                if c1 == s1[i]:\n                    break\n            for j in range(i-1, -1, -1):\n                if s1[j] != 'a':\n                    moves += (ord(s1[i]) - ord(s1[j]))\n                    break\n        else:\n            continue\n    print(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959298968315125,
            0.9937635660171509,
            0.9954748749732971,
            0.9929926991462708,
            0.9933730959892273,
            0.9906823039054871,
            0.9949969053268433,
            0.9947399497032166,
            0.9927334189414978,
            0.9939745664596558,
            0.9947718381881714,
            0.9949871897697449,
            0.9954418540000916,
            0.9959998726844788,
            0.993871808052063,
            0.9958305358886719,
            0.9958485960960388,
            0.9910288453102112,
            0.9913479685783386,
            0.993657648563385
        ]
    },
    "3133": {
        "similarity": 0.9950889945030212,
        "body": "n, A, B = map(int, input().split())\nturns1 = [0] * n\nturns2 = [0] * n\n\nfor i in range(n):\n    l, r, t = map(int, input().split())\n    if t:\n        turns1[A-1] += 1\n        turns2[B-1] += 1\n    else:\n        if A < B:\n            turns1[A-1] += 1\n            turns2[B-1] += 1\n        else:\n            turns1[A-1] += 1\n            turns2[A-1] += 1\n\nif turns1.count(0) and turns2.count(0):\n    print(\"indistinguishable\")\nelse:\n    print(min([turns1.index(x) for x in set(turns1) if x != 0]))",
        "result": "failed: testcase 1",
        "similarities": [
            0.9923840761184692,
            0.9926517009735107,
            0.9916895627975464,
            0.9918237328529358,
            0.9891188740730286,
            0.9879758954048157,
            0.9938030242919922,
            0.9925921559333801,
            0.9925739765167236,
            0.9922124743461609,
            0.994537889957428,
            0.9939234852790833,
            0.9942699074745178,
            0.9855720400810242,
            0.9933574199676514,
            0.9940263628959656,
            0.9930047392845154,
            0.9945387840270996,
            0.9950889945030212,
            0.9948118925094604
        ]
    },
    "3480": {
        "similarity": 0.9956452250480652,
        "body": "    L, D = map(int, input().split())\n    for _ in range(L):\n        line1 = input().strip()\n        time_units = list(map(int, input().split()))\n        first_voice = []\n        second_voice = []\n        delay = 0\n        for syllable, t in zip(line1.split(), time_units):\n            if delay <= D:\n                first_voice.append(syllable)\n            else:\n                second_voice.append(f\"{sylables[:delay-D]}_{'_'*t}_\" + syllable)\n            delay += t\n        if not second_voice:\n            print(first_voice[0])\n            print('/' * len(first_voice[0]))\n        else:\n            for f, s in zip(first_voice, second_voice):\n                print(f\"{f}_{s.replace('_', '___')}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.991439938545227,
            0.9929290413856506,
            0.9936814904212952,
            0.9922929406166077,
            0.9952825307846069,
            0.9922306537628174,
            0.9942536950111389,
            0.9923143982887268,
            0.993723452091217,
            0.9951605796813965,
            0.9951502084732056,
            0.9933804869651794,
            0.986172616481781,
            0.9951028227806091,
            0.9921508431434631,
            0.9915556907653809,
            0.9935979247093201,
            0.9956452250480652,
            0.9937220215797424,
            0.9938408732414246
        ]
    },
    "3389": {
        "similarity": 0.9959818124771118,
        "body": "n, k = map(int, input().split())\nvideos = input()\nvideo_types = {}\nfor i in range(n):\n    type = videos[i]\n    if type not in video_types:\n        video_types[type] = []\n    video_types[type].append(i)\n\nmin_clicks = 0\nlast_video_type = None\nfor video_type, indices in sorted(video_types.items()):\n    min_clicks += len(indices) - 1\n    last_video_type = video_type\n\nprint(min_clicks)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9937930703163147,
            0.9925826191902161,
            0.9917310476303101,
            0.9942540526390076,
            0.9928183555603027,
            0.9911101460456848,
            0.9951854348182678,
            0.9951043725013733,
            0.9955990314483643,
            0.9941697716712952,
            0.9930132627487183,
            0.9959818124771118,
            0.9927273988723755,
            0.9929178953170776,
            0.994676411151886,
            0.993538498878479,
            0.9927485585212708,
            0.9932773113250732,
            0.9933347105979919,
            0.9899467825889587
        ]
    },
    "3925": {
        "similarity": 0.9949280619621277,
        "body": "    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            p, q = 1, 1\n        else:\n            p, q = 2, 1\n        while i + p <= n and s[i:i+p] != s[i+q:i+(p+q)]:\n            p += 1\n        ans = max(ans, p)\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.990504801273346,
            0.9919154644012451,
            0.9857375621795654,
            0.9946072101593018,
            0.9901251792907715,
            0.9941080212593079,
            0.9941177368164062,
            0.9885870218276978,
            0.9932421445846558,
            0.9939755201339722,
            0.992832601070404,
            0.9934632182121277,
            0.9929745197296143,
            0.9932770133018494,
            0.9929186105728149,
            0.9939030408859253,
            0.9905568957328796,
            0.9949280619621277,
            0.9905106425285339,
            0.9943035840988159
        ]
    },
    "3700": {
        "similarity": 0.9949315786361694,
        "body": "n, k = map(int, input().split())\ncount = 0\nfor i in range(1, n):\n    if i + k // 2 <= n:\n        count += min(i, n - i) * 2\nif k % 2 == 0 and k // 2 < n:\n    count += (k // 2)\nprint(count)",
        "result": "timed out",
        "similarities": [
            0.9929030537605286,
            0.9924132823944092,
            0.9933473467826843,
            0.9948978424072266,
            0.9933807253837585,
            0.9907892942428589,
            0.9934303164482117,
            0.9920246601104736,
            0.9919410347938538,
            0.9918664693832397,
            0.9941850900650024,
            0.9930118918418884,
            0.9921977519989014,
            0.993302583694458,
            0.9949315786361694,
            0.9935628175735474,
            0.9940223693847656,
            0.9948278069496155,
            0.9947688579559326,
            0.9916486144065857
        ]
    },
    "3944": {
        "similarity": 0.9901184439659119,
        "body": "    N,M,K = map(int,input().split())\n    MOD = 10**9 + 7\n    return pow(3, N+M+K, MOD) * (pow(2, N, MOD)-1) % MOD * (pow(2, M, MOD)-1) % MOD * (pow(2, K, MOD)-1) % MOD",
        "result": "failed: testcase 0",
        "similarities": [
            0.9895355105400085,
            0.9901184439659119,
            0.9895557761192322,
            0.9804954528808594,
            0.9854146838188171,
            0.9844022393226624,
            0.9896802306175232,
            0.9808140993118286,
            0.9877200126647949,
            0.9885796904563904,
            0.9864768981933594,
            0.9847703576087952,
            0.9890628457069397,
            0.9472824931144714,
            0.9752905964851379,
            0.9844022393226624,
            0.9698771238327026,
            0.9887102842330933,
            0.9900963306427002,
            0.9866347312927246
        ]
    },
    "3821": {
        "similarity": 0.9947518706321716,
        "body": "import sys\nn = float(input())\np = [float(x) for x in input().split()]\nans = sum([x*(1-x)**(n-1) for x in p])\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945254325866699,
            0.9946902394294739,
            0.9929355978965759,
            0.9933314323425293,
            0.9909495115280151,
            0.985716700553894,
            0.9930737018585205,
            0.9947518706321716,
            0.9937840700149536,
            0.9927704334259033,
            0.993076503276825,
            0.9944088459014893,
            0.9937071800231934,
            0.994167149066925,
            0.9916706085205078,
            0.9941670298576355,
            0.9827904105186462,
            0.9937575459480286,
            0.9930612444877625,
            0.9932170510292053
        ]
    },
    "3667": {
        "similarity": 0.9966977834701538,
        "body": "    w, p = map(int, input().split())\n    wells = []\n    pipes = {}\n    for _ in range(w):\n        x, y = map(int, input().split())\n        wells.append((x, y))\n    for _ in range(p):\n        s, x, y = map(int, input().split())\n        if (x, y) not in pipes:\n            pipes[(x, y)] = []\n        pipes[(x, y)].append(s)\n    intersections = set()\n    for well in wells:\n        for pipe in pipes.get(well, []):\n            intersections.add((pipe[0], well[1]))\n            intersections.add((well[0], pipe[1]))\n    if any(len(pipes[inter]) > 2 for inter in intersections):\n        print(\"impossible\")\n    else:\n        print(\"possible\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956282377243042,
            0.9959225058555603,
            0.9873864054679871,
            0.9962838888168335,
            0.9960856437683105,
            0.9960227012634277,
            0.9933831095695496,
            0.9952021241188049,
            0.9956547617912292,
            0.9964316487312317,
            0.9957970976829529,
            0.9914253950119019,
            0.9955175518989563,
            0.9936031699180603,
            0.9935876727104187,
            0.9966843128204346,
            0.9932495951652527,
            0.9966977834701538,
            0.9946780204772949,
            0.9940201640129089
        ]
    },
    "3959": {
        "similarity": 0.9963127970695496,
        "body": "    n, m = map(int, input().split())\n    g = [list(map(int, input().split()[1:])) for _ in range(n)]\n    ans = 1\n    for gi in g:\n        types = {}\n        for t in gi:\n            types[t] = types.get(t, 0) + 1\n        ans *= math.prod((types.count(i) + 1) for i in range(m))\n    print(ans % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953077435493469,
            0.9907172322273254,
            0.9948409199714661,
            0.99358069896698,
            0.9953378438949585,
            0.9950509667396545,
            0.9943738579750061,
            0.9957367777824402,
            0.9931740164756775,
            0.9929932951927185,
            0.9947575330734253,
            0.9940248727798462,
            0.996049702167511,
            0.9963127970695496,
            0.9948922991752625,
            0.9943854808807373,
            0.994049072265625,
            0.993815004825592,
            0.993548572063446,
            0.9952521324157715
        ]
    },
    "3692": {
        "similarity": 0.995015025138855,
        "body": "    n = int(input())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n    regions = 0\n    for i in range(len(circles)):\n        for j in range(i+1, len(circles)):\n            if (circles[i][2]**2)*((circles[j][0]-circles[i][0])**2 + (circles[j][1]-circles[i][1])**2) > ((circles[i][2]+circles[j][2])**2):\n                regions += 1\n    print(regions+1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.987259030342102,
            0.9927815794944763,
            0.9931103587150574,
            0.9939041137695312,
            0.9901062846183777,
            0.9940954446792603,
            0.9935716390609741,
            0.9814463257789612,
            0.9933353066444397,
            0.9931712746620178,
            0.9926279783248901,
            0.9902333617210388,
            0.9942587018013,
            0.9940663576126099,
            0.9933875203132629,
            0.9923968315124512,
            0.9922818541526794,
            0.9933308959007263,
            0.9877318143844604,
            0.995015025138855
        ]
    },
    "3894": {
        "similarity": 0.9910025596618652,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] % 2 == 1:\n            return \"Kevin\"\n    for i in range(n):\n        if a[i] % (k+1) == 0:\n            return \"Nicky\"\n    return \"Nicky\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9782622456550598,
            0.9890509247779846,
            0.9908174276351929,
            0.9842908978462219,
            0.9885326027870178,
            0.9846397042274475,
            0.9881531596183777,
            0.9889147877693176,
            0.978420078754425,
            0.9713786244392395,
            0.9884452819824219,
            0.9842515587806702,
            0.9867593050003052,
            0.9866931438446045,
            0.9881256818771362,
            0.9864037036895752,
            0.9748165011405945,
            0.9871180653572083,
            0.9910025596618652,
            0.9846157431602478
        ]
    },
    "3856": {
        "similarity": 0.9935680031776428,
        "body": "n = int(input())\nw, h = [0]*n, [0]*n\nfor i in range(n):\n    w[i], h[i] = map(int, input().split())\nW = sum(w)\nH = max(h)\nmin_area = float('inf')\nfor lie_on_ground in range(n//2+1):\n    area = W * (n - 2*lie_on_ground) + H * (2*lie_on_ground)\n    min_area = min(min_area, area)\nprint(min_area)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911888837814331,
            0.9935680031776428,
            0.9912165403366089,
            0.992459774017334,
            0.9902275800704956,
            0.9835163950920105,
            0.9917122721672058,
            0.989245593547821,
            0.9906902313232422,
            0.9925282001495361,
            0.9862173199653625,
            0.9913878440856934,
            0.992213785648346,
            0.993072509765625,
            0.9897300601005554,
            0.9924415946006775,
            0.9856675863265991,
            0.9901249408721924,
            0.9923346638679504,
            0.9880953431129456
        ]
    },
    "3282": {
        "similarity": 0.9967869520187378,
        "body": "    P = int(input())\n    count = 0\n    bills = []\n    for a in range(1, P):\n        for b in range(a+1, P):\n            if set(str(a)) & set(str(b)) or set(str(P)) & set(str(a+b)):\n                break\n        else:\n            bills.append((a, b))\n            count += 1\n    print(count)\n    if len(bills) > 5000:\n        print(len(bills))\n    for bill in bills[:5000]:\n        print(*bill)",
        "result": "timed out",
        "similarities": [
            0.9964834451675415,
            0.9967085123062134,
            0.996641993522644,
            0.9966960549354553,
            0.9967831373214722,
            0.9945780038833618,
            0.9962256550788879,
            0.995935320854187,
            0.9935641884803772,
            0.996768057346344,
            0.9959446787834167,
            0.9965639710426331,
            0.9943311810493469,
            0.9967869520187378,
            0.9952133893966675,
            0.9886304140090942,
            0.9950922131538391,
            0.9947664141654968,
            0.9961992502212524,
            0.9938195943832397
        ]
    },
    "3596": {
        "similarity": 0.9965112805366516,
        "body": "from scipy import special as sp\nimport numpy as np\n\n        return c * np.integrate.quad(lambda t: t1*sp.gamma(t) + np.sqrt(t2*np.log(sp.erf(t3*x))) - sp.bessel.jv(k,x)**t4, a, b)[0]\n\n    r = int(input())\n    p = lambda x: sum([(f**i)(0)/np.math.factorial(i)*x**i for i in range(r+1)])\n\n    sn = int(input())\n    pn = lambda x: sum([p(int(x))**j*x**j for j in range(r+sn+1)])\n\n    sl = int(input())\n    g = np.polyder(pn, sl)\n\n    n = float(input())\n    return (g(n) + l)**2 / (np.pi * np.e) + 1/(l+1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952540993690491,
            0.9934738874435425,
            0.9960421323776245,
            0.9963352680206299,
            0.9965112805366516,
            0.9942201375961304,
            0.9954935312271118,
            0.9945052266120911,
            0.9962307810783386,
            0.994878888130188,
            0.9953121542930603,
            0.9949921369552612,
            0.993094801902771,
            0.9963591694831848,
            0.9950208067893982,
            0.9932612180709839,
            0.9945467710494995,
            0.9953727722167969,
            0.993750810623169,
            0.9936562776565552
        ]
    },
    "3540": {
        "similarity": 0.9938802123069763,
        "body": "    puzzle = [list(input().strip()) for _ in range(4)]\n    moves = 0\n    while True:\n        for i, row in enumerate(puzzle):\n            if len(set(row)) > 1:\n                break\n        else:\n            return str(moves)\n        for i, col in enumerate(zip(*puzzle)):\n            if len(set(col)) > 1:\n                puzzle[i] = [c for c in zip(*[r for r in puzzle if r[i]])]\n                moves += 1",
        "result": "timed out",
        "similarities": [
            0.9904189705848694,
            0.9908995628356934,
            0.9938802123069763,
            0.9923245310783386,
            0.9919763803482056,
            0.9854228496551514,
            0.9936398267745972,
            0.987831711769104,
            0.9880017638206482,
            0.9881772398948669,
            0.9930413961410522,
            0.9937425255775452,
            0.9851190447807312,
            0.9934300780296326,
            0.9885737895965576,
            0.9881449341773987,
            0.9931640625,
            0.9918044209480286,
            0.9923867583274841,
            0.9897262454032898
        ]
    },
    "3354": {
        "similarity": 0.995527982711792,
        "body": "n, r, s, z = map(float, input().split())\np = (z / 100) * (s ** 2)\nmax_p = 0\nfor i in range(int(n)):\n    if (r ** 2 + (s - r) ** 2) > p:\n        max_p = i\n        break\nprint(max_p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946317076683044,
            0.9911695718765259,
            0.9924668073654175,
            0.9952888488769531,
            0.9944281578063965,
            0.9939942955970764,
            0.9940455555915833,
            0.9954431653022766,
            0.9922319054603577,
            0.9927243590354919,
            0.9925851225852966,
            0.9937633872032166,
            0.9952753782272339,
            0.9938608407974243,
            0.9934862852096558,
            0.995527982711792,
            0.9932306408882141,
            0.9931994080543518,
            0.9928900003433228,
            0.9937585592269897
        ]
    },
    "3217": {
        "similarity": 0.9931510090827942,
        "body": "    n = int(input())\n    panels = set()\n    for _ in range(n):\n        x, y, z = map(int, input().split())\n        for dx in (-1, 0, 1):\n            for dy in (-1, 0, 1):\n                for dz in (-1, 0, 1):\n                    if abs(dx) + abs(dy) + abs(dz) > 0:\n                        panels.add((x+dx,y+dy,z+dz))\n    return len(panels)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915418028831482,
            0.9894666075706482,
            0.9850760102272034,
            0.9931510090827942,
            0.9875295758247375,
            0.992167055606842,
            0.9796114563941956,
            0.9924638867378235,
            0.9923270344734192,
            0.9910335540771484,
            0.9839496612548828,
            0.9928030967712402,
            0.9809972047805786,
            0.988254725933075,
            0.9928247332572937,
            0.9850913882255554,
            0.9924089312553406,
            0.9912763833999634,
            0.9931245446205139,
            0.9903525114059448
        ]
    },
    "3520": {
        "similarity": 0.9955291748046875,
        "body": "    n, p, c = map(int, input().split())\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n    pills.sort()\n    dp = [0] * (n + 1)\n    for i, pill in enumerate(pills):\n        for j in range(c, min(n, pill[0])):\n            if j - c > dp[j - c]:\n                dp[j] = max(dp[j], j - c) + pill[2]\n    print(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946277141571045,
            0.9955291748046875,
            0.9951190948486328,
            0.9939011335372925,
            0.9815497398376465,
            0.9929602742195129,
            0.9945562481880188,
            0.9907695651054382,
            0.992465078830719,
            0.9923842549324036,
            0.994645357131958,
            0.9949548840522766,
            0.9933835864067078,
            0.9943285584449768,
            0.9940972924232483,
            0.9948654174804688,
            0.995132565498352,
            0.9923049807548523,
            0.9849076867103577,
            0.9937914609909058
        ]
    },
    "3475": {
        "similarity": 0.9962120056152344,
        "body": "    t, n = map(int, input().split())\n    d_min = [0] * t\n    a_max = [0] * t\n    for i in range(t):\n        d_min[i], a_max[i] = map(int, input().split())\n    d_rel, h_rel = [], []\n    for _ in range(n - 1):\n        d_rel.append(int(input()))\n        h_rel.append(int(input()))\n    k = 0\n    total_distance = 0\n    previous_heading = 0\n    for i in range(1, n):\n        total_distance += d_rel[i - 1]\n        if abs(h_rel[i - 1] - previous_heading) > a_max[0]:\n            k += 1\n        previous_heading = h_rel[i - 1]\n        if total_distance < d_min[0]:\n            break\n    print(\"IMPOSSIBLE\" if i != n else k)",
        "result": "failed: testcase 0",
        "similarities": [
            0.98944491147995,
            0.9946092367172241,
            0.9958477020263672,
            0.9935072064399719,
            0.9940634369850159,
            0.9941967725753784,
            0.995114803314209,
            0.9957444071769714,
            0.9954875111579895,
            0.9950430989265442,
            0.9947791695594788,
            0.994605541229248,
            0.9943343997001648,
            0.9932428002357483,
            0.9949654936790466,
            0.9962120056152344,
            0.9938093423843384,
            0.9953514933586121,
            0.9951860308647156,
            0.9958791136741638
        ]
    },
    "3977": {
        "similarity": 0.9944287538528442,
        "body": "n, m, k = map(int, input().split())\ngovs = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for _ in range(m)]\nans = 0\nfor gov in govs:\n    neighbors = set()\n    for edge in edges:\n        if gov in edge:\n            neighbors.update(edge)\n    ans += max(0, k - len(neighbors))\nprint(ans)",
        "result": "failed: testcase 2",
        "similarities": [
            0.9929360747337341,
            0.9941859841346741,
            0.9929242730140686,
            0.9917724132537842,
            0.9893696308135986,
            0.9944287538528442,
            0.9922266602516174,
            0.991655170917511,
            0.9835001230239868,
            0.991830050945282,
            0.9934644103050232,
            0.9913416504859924,
            0.9918949604034424,
            0.9874468445777893,
            0.9937627911567688,
            0.9881699085235596,
            0.990696132183075,
            0.9888437986373901,
            0.9919950366020203,
            0.9941484332084656
        ]
    },
    "3626": {
        "similarity": 0.9963732361793518,
        "body": "    n = int(input())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        rectangles.append((x1, y1, x2, y2))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            (x1, y1, x2, y2) = rectangles[i]\n            (x3, y3, x4, y4) = rectangles[j]\n            \n            if min(x2, x4) <= max(x1, x3) and min(y2, y4) <= max(y1, y3):\n                return 1\n    return 0",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947913289070129,
            0.9958897829055786,
            0.9863861799240112,
            0.9939755797386169,
            0.9950124621391296,
            0.9962372183799744,
            0.9945217967033386,
            0.9903852343559265,
            0.9963060021400452,
            0.995200514793396,
            0.9946520924568176,
            0.9920425415039062,
            0.9952775835990906,
            0.9954842329025269,
            0.981961727142334,
            0.9963732361793518,
            0.9953063130378723,
            0.9951936602592468,
            0.9952417612075806,
            0.9962623119354248
        ]
    },
    "3584": {
        "similarity": 0.9955275654792786,
        "body": "    N, M, K = map(int, input().split())\n    onions = [list(map(int, input().split())) for _ in range(N)]\n    fence_posts = [list(map(int, input().split())) for _ in range(M)]\n    hull = []\n    for i in range(K):\n        while len(hull) > 1 and cross(hull[-2], hull[-1], fence_posts[i]):\n            hull.pop()\n        hull.append(fence_posts[i])\n    max_protected = 0\n    for i, (x, y) in enumerate(onions):\n        protected = False\n        for j, post in enumerate(hull):\n            if cross((x, y), post, hull[(j+1)%len(hull)]):\n                protected = True\n                break\n        max_protected = max(max_protected, int(protected))\n    print(max_protected)\n\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9847269654273987,
            0.9947535991668701,
            0.9920302033424377,
            0.9945070147514343,
            0.9943807721138,
            0.9942966103553772,
            0.9945173859596252,
            0.9934238791465759,
            0.994887113571167,
            0.9955275654792786,
            0.9947555065155029,
            0.9944480061531067,
            0.9944239258766174,
            0.9871278405189514,
            0.9893196821212769,
            0.9948417544364929,
            0.9953866600990295,
            0.9939000010490417,
            0.9938348531723022,
            0.994953989982605
        ]
    },
    "3950": {
        "similarity": 0.9968673586845398,
        "body": "n, q = map(int, input().split())\na = list(map(int, input().split()))\nzeros = [i for i in range(1, n+1) if a[i-1] == 0]\n\nif len(zeros) > q:\n    print(\"NO\")\nelse:\n    queries = []\n    for i in range(q):\n        while len(queries) < zeros.count(i+1):\n            queries.append([i+1, i+1])\n        for j in range(zeros.count(i+1)):\n            a[zeros.pop(0)] = i+1\n    print(\"YES\")\n    print(*a)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962869882583618,
            0.9966173768043518,
            0.9884408712387085,
            0.9937611818313599,
            0.9953374266624451,
            0.9964159727096558,
            0.9953221678733826,
            0.9965276122093201,
            0.9965475797653198,
            0.9967300295829773,
            0.9968673586845398,
            0.9946720600128174,
            0.9965506196022034,
            0.9958604574203491,
            0.9968556761741638,
            0.9942976236343384,
            0.9944961071014404,
            0.9956952929496765,
            0.9954447746276855,
            0.9966551065444946
        ]
    },
    "3075": {
        "similarity": 0.996636152267456,
        "body": "    n, g = map(int, input().split())\n    costs = []\n    for _ in range(n):\n        d, c = map(int, input().split())\n        costs.append((c, d))\n    costs.sort()\n    total_cost = 0\n    current_gas = g\n    for cost, distance in costs:\n        if current_gas >= (distance + len(costs) - 1) // 2:\n            total_cost += cost * ((distance + len(costs) - 1) // 2)\n            current_gas -= (distance + len(costs) - 1) // 2\n        else:\n            break\n    if current_gas > 0:\n        print(\"cancel road trip\")\n    else:\n        print(total_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937366843223572,
            0.9949613809585571,
            0.9953557252883911,
            0.9962348937988281,
            0.9963653087615967,
            0.9944143891334534,
            0.9944553375244141,
            0.9962490797042847,
            0.9955169558525085,
            0.9963575601577759,
            0.9953402280807495,
            0.9939810037612915,
            0.996636152267456,
            0.995031476020813,
            0.9965192079544067,
            0.9950731992721558,
            0.9951925873756409,
            0.9951870441436768,
            0.9938420653343201,
            0.9964894652366638
        ]
    },
    "3711": {
        "similarity": 0.995153546333313,
        "body": "    n, m, k = map(int, input().split())\n    if k > n + m - 2:\n        return -1\n    return max(min(n, m) // 2, min((k + 1) % (n + m), 1)) ** 2",
        "result": "failed: testcase 0",
        "similarities": [
            0.994125485420227,
            0.995078444480896,
            0.9893568158149719,
            0.992581844329834,
            0.9909291863441467,
            0.9948359131813049,
            0.9922840595245361,
            0.9921004772186279,
            0.9847429394721985,
            0.9943715929985046,
            0.995153546333313,
            0.9863354563713074,
            0.9938266277313232,
            0.9904186725616455,
            0.9937258362770081,
            0.991161048412323,
            0.9921945333480835,
            0.9928562641143799,
            0.9944261312484741,
            0.993670642375946
        ]
    }
}