{
    "HumanEval/0": {
        "similarity": 0.999137282371521,
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9990209341049194,
            0.999137282371521,
            0.99849933385849,
            0.999137282371521,
            0.9990209341049194,
            0.9990209341049194,
            0.9990209341049194,
            0.999137282371521,
            0.999137282371521,
            0.999137282371521,
            0.999137282371521,
            0.9990209341049194,
            0.999137282371521,
            0.999137282371521,
            0.9990209341049194,
            0.999137282371521,
            0.9990209341049194,
            0.9990209341049194,
            0.9990209341049194,
            0.999137282371521
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9988963603973389,
        "body": "    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current_group.append(char)\n        \n        if depth == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result",
        "result": "passed",
        "similarities": [
            0.9979846477508545,
            0.9986356496810913,
            0.9982632994651794,
            0.9987453818321228,
            0.9980637431144714,
            0.998134434223175,
            0.9987273216247559,
            0.998134434223175,
            0.9985458254814148,
            0.9987273216247559,
            0.9979994893074036,
            0.9987273216247559,
            0.998846173286438,
            0.998134434223175,
            0.9982211589813232,
            0.9973111748695374,
            0.9987678527832031,
            0.9979846477508545,
            0.9982632994651794,
            0.9988963603973389
        ]
    },
    "HumanEval/2": {
        "similarity": 1.0,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/3": {
        "similarity": 1.0,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9956459403038025,
        "body": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad",
        "result": "passed",
        "similarities": [
            0.9950353503227234,
            0.9929105639457703,
            0.9950353503227234,
            0.9956459403038025,
            0.9950353503227234,
            0.9956459403038025,
            0.9933757781982422,
            0.9930556416511536,
            0.9950353503227234,
            0.9929105639457703,
            0.9949427247047424,
            0.9949427247047424,
            0.9929105639457703,
            0.9956459403038025,
            0.9950353503227234,
            0.9956459403038025,
            0.9950353503227234,
            0.9956459403038025,
            0.9931298494338989,
            0.9497900605201721
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9991609454154968,
        "body": "    result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result",
        "result": "failed: name 'delimiter' is not defined",
        "similarities": [
            0.9991072416305542,
            0.9991609454154968,
            0.9991456866264343,
            0.9991456866264343,
            0.9991456866264343,
            0.9958043694496155,
            0.9991456866264343,
            0.9991072416305542,
            0.9991456866264343,
            0.9991456866264343,
            0.9991072416305542,
            0.9991072416305542,
            0.9986704587936401,
            0.9991456866264343,
            0.9991456866264343,
            0.9991456866264343,
            0.9960063099861145,
            0.9991456866264343,
            0.9959599375724792,
            0.9984080791473389
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9991748332977295,
        "body": "    results = []\n    for group in paren_string.split():\n        depth = max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed",
        "similarities": [
            0.9981787800788879,
            0.9985876679420471,
            0.9989173412322998,
            0.9988468885421753,
            0.9988654255867004,
            0.9988741874694824,
            0.9988741874694824,
            0.9991748332977295,
            0.9989173412322998,
            0.9972755908966064,
            0.9991371035575867,
            0.9988877177238464,
            0.999165415763855,
            0.9974158406257629,
            0.9988741874694824,
            0.9989173412322998,
            0.9991371035575867,
            0.9982031583786011,
            0.998799204826355,
            0.9990259408950806
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9998174905776978,
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed",
        "similarities": [
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9965318441390991,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978,
            0.9998174905776978
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9932821393013,
        "body": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)",
        "result": "passed",
        "similarities": [
            0.9882609844207764,
            0.9931687116622925,
            0.9882609844207764,
            0.9921281933784485,
            0.9930610656738281,
            0.9882608652114868,
            0.9930610656738281,
            0.9882608652114868,
            0.9932821393013,
            0.9923689961433411,
            0.9862004518508911,
            0.9862004518508911,
            0.9930145144462585,
            0.9919395446777344,
            0.9930610656738281,
            0.9930610656738281,
            0.9847735166549683,
            0.9930610656738281,
            0.9931835532188416,
            0.9915617108345032
        ]
    },
    "HumanEval/9": {
        "similarity": 0.997943103313446,
        "body": "    if not numbers:\n        return []\n    \n    result = []\n    current_max = float('-inf')\n    for number in numbers:\n        current_max = max(current_max, number)\n        result.append(current_max)\n    \n    return result",
        "result": "passed",
        "similarities": [
            0.9929875731468201,
            0.9978323578834534,
            0.9972888827323914,
            0.9976077079772949,
            0.9956077933311462,
            0.9975402355194092,
            0.9978948831558228,
            0.996927797794342,
            0.997943103313446,
            0.9977501630783081,
            0.9975402355194092,
            0.9977098107337952,
            0.9972888827323914,
            0.9969875812530518,
            0.9973442554473877,
            0.9976077079772949,
            0.9979103803634644,
            0.9976286888122559,
            0.9973194003105164,
            0.9979429841041565
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9964147806167603,
        "body": "    n = len(string)\n    for i in range(n):\n        if string[:i] == string[:i][::-1]:\n            prefix_to_reverse = string[i:]\n            return string + prefix_to_reverse[::-1]\n    return string",
        "result": "failed: ",
        "similarities": [
            0.9954610466957092,
            0.9964147806167603,
            0.996264636516571,
            0.9953711628913879,
            0.9956038594245911,
            0.9962103962898254,
            0.9820383787155151,
            0.9956117868423462,
            0.9903733134269714,
            0.996123194694519,
            0.9953346252441406,
            0.9953346252441406,
            0.9960692524909973,
            0.9963067770004272,
            0.9954610466957092,
            0.9953346252441406,
            0.9898621439933777,
            0.9962403178215027,
            0.9955998659133911,
            0.9955546855926514
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9967416524887085,
        "body": "    return ''.join('1' if x != y else '0' for x, y in zip(a, b))",
        "result": "passed",
        "similarities": [
            0.9945895671844482,
            0.9967416524887085,
            0.9967416524887085,
            0.9967416524887085,
            0.9967416524887085,
            0.9965959191322327,
            0.9965959191322327,
            0.9967416524887085,
            0.9967416524887085,
            0.995837390422821,
            0.9965959787368774,
            0.9956346154212952,
            0.9966984987258911,
            0.9777054190635681,
            0.9777054190635681,
            0.9967416524887085,
            0.995837390422821,
            0.9967416524887085,
            0.9965959787368774,
            0.9965959787368774
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9970927834510803,
        "body": "    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string",
        "result": "passed",
        "similarities": [
            0.9966100454330444,
            0.9970090985298157,
            0.9966100454330444,
            0.9966100454330444,
            0.9966100454330444,
            0.9970090985298157,
            0.9966100454330444,
            0.9970090985298157,
            0.9956024885177612,
            0.9966100454330444,
            0.9970090985298157,
            0.9784455895423889,
            0.9966100454330444,
            0.9964015483856201,
            0.9957332611083984,
            0.9966100454330444,
            0.9970927834510803,
            0.9966100454330444,
            0.9970927834510803,
            0.9966100454330444
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9999240040779114,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a",
        "result": "passed",
        "similarities": [
            0.9999238848686218,
            0.9999238848686218,
            0.9996952414512634,
            0.9999238848686218,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999240040779114,
            0.9999240040779114,
            0.9996952414512634,
            0.9999238848686218,
            0.9999238848686218,
            0.9999238848686218
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9999998211860657,
        "body": "    return [string[:i] for i in range(1, len(string) + 1)]",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/15": {
        "similarity": 0.999201238155365,
        "body": "    return ' '.join(str(i) for i in range(n + 1))",
        "result": "passed",
        "similarities": [
            0.999201238155365,
            0.9989829063415527,
            0.9976316690444946,
            0.999201238155365,
            0.9989829063415527,
            0.9976316690444946,
            0.9976316690444946,
            0.999201238155365,
            0.999201238155365,
            0.999201238155365,
            0.9989829063415527,
            0.999201238155365,
            0.9992011189460754,
            0.9976316690444946,
            0.9992011189460754,
            0.9992011189460754,
            0.999201238155365,
            0.999201238155365,
            0.9976316690444946,
            0.999201238155365
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9999998807907104,
        "body": "    return len(set(string.lower()))",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9984339475631714,
        "body": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[note] for note in music_string.split()]",
        "result": "passed",
        "similarities": [
            0.9977482557296753,
            0.9984339475631714,
            0.9984339475631714,
            0.9983466267585754,
            0.9984339475631714,
            0.9983466267585754,
            0.9968743920326233,
            0.9977482557296753,
            0.9984339475631714,
            0.9977482557296753,
            0.9984339475631714,
            0.9983466267585754,
            0.9982370138168335,
            0.9984339475631714,
            0.9849149584770203,
            0.9984339475631714,
            0.9984339475631714,
            0.9984339475631714,
            0.9977482557296753,
            0.9984339475631714
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9940647482872009,
        "body": "    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1",
        "result": "passed",
        "similarities": [
            0.9940647482872009,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179,
            0.9633949995040894,
            0.9728112816810608,
            0.9633949995040894,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179,
            0.9940624237060547,
            0.9938957095146179,
            0.9938957095146179,
            0.9937664866447449,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179,
            0.9938957095146179
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9944347739219666,
        "body": "    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)",
        "result": "passed",
        "similarities": [
            0.9813928008079529,
            0.9820200204849243,
            0.9929934144020081,
            0.9919503927230835,
            0.9940012693405151,
            0.9937041401863098,
            0.9923385977745056,
            0.9874765276908875,
            0.9943974018096924,
            0.9941083192825317,
            0.9920809864997864,
            0.9943313598632812,
            0.9713572263717651,
            0.9942434430122375,
            0.9944347739219666,
            0.9943490624427795,
            0.9920136332511902,
            0.9943084716796875,
            0.9941457509994507,
            0.9925350546836853
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9992567300796509,
        "body": "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair",
        "result": "passed",
        "similarities": [
            0.9978480935096741,
            0.995895504951477,
            0.9992519021034241,
            0.998192548751831,
            0.9991708397865295,
            0.9979632496833801,
            0.9992519021034241,
            0.9982797503471375,
            0.9991708993911743,
            0.9991708993911743,
            0.9992567300796509,
            0.9992519021034241,
            0.9992519021034241,
            0.9991708397865295,
            0.9991708397865295,
            0.9976750612258911,
            0.9991708397865295,
            0.9992567300796509,
            0.9983944296836853,
            0.9991708397865295
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9999632835388184,
        "body": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]",
        "result": "passed",
        "similarities": [
            0.9999337792396545,
            0.9999632835388184,
            0.9999632835388184,
            0.9999632835388184,
            0.9999632835388184,
            0.9999632835388184,
            0.9999632835388184,
            0.9999337792396545,
            0.9999632835388184,
            0.9999337792396545,
            0.9999632835388184,
            0.9999632835388184,
            0.9999337792396545,
            0.9999632835388184,
            0.9998936057090759,
            0.9999632835388184,
            0.9999632835388184,
            0.9998936057090759,
            0.9998936057090759,
            0.9999632835388184
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9997770190238953,
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "similarities": [
            0.9997770190238953,
            0.9996446371078491,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9958592653274536,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953,
            0.9997770190238953
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9983367919921875,
        "body": "    return len(string)",
        "result": "passed",
        "similarities": [
            0.9961196780204773,
            0.9961196780204773,
            0.9961196780204773,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9961196780204773,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9983367919921875,
            0.9961196780204773,
            0.9983367919921875,
            0.9983367919921875,
            0.9961196780204773
        ]
    },
    "HumanEval/24": {
        "similarity": 0.99966961145401,
        "body": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "similarities": [
            0.9996535778045654,
            0.9995739459991455,
            0.99966961145401,
            0.9995313882827759,
            0.999481737613678,
            0.9995313882827759,
            0.9996535778045654,
            0.9996535778045654,
            0.999481737613678,
            0.9996535778045654,
            0.9996535778045654,
            0.9996535778045654,
            0.9995739459991455,
            0.9995313882827759,
            0.9996535778045654,
            0.999481737613678,
            0.99966961145401,
            0.9994550943374634,
            0.9995739459991455,
            0.999481737613678
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9982855916023254,
        "body": "    factors = []\n    divisor = 2\n    while n >= divisor * divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors",
        "result": "passed",
        "similarities": [
            0.9982786774635315,
            0.9950768351554871,
            0.9980586171150208,
            0.9978082776069641,
            0.9974883198738098,
            0.9976471662521362,
            0.9974883198738098,
            0.9926654696464539,
            0.9978747367858887,
            0.9982786774635315,
            0.9980615377426147,
            0.9981645345687866,
            0.9965835213661194,
            0.9982855916023254,
            0.9982198476791382,
            0.9977208375930786,
            0.9965835213661194,
            0.9965835213661194,
            0.9980615377426147,
            0.9981645345687866
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9980408549308777,
        "body": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9980407357215881,
            0.9969112873077393,
            0.9979997277259827,
            0.9979997277259827,
            0.9868925213813782,
            0.9980407357215881,
            0.9980407357215881,
            0.9980407357215881,
            0.9969112873077393,
            0.9980407357215881,
            0.9825204610824585,
            0.9969112873077393,
            0.9980407357215881,
            0.9979997277259827,
            0.9980407357215881,
            0.9979997277259827,
            0.9979199171066284,
            0.9973798990249634,
            0.9980408549308777,
            0.9980408549308777
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9975866079330444,
        "body": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)",
        "result": "passed",
        "similarities": [
            0.9910112619400024,
            0.9975866079330444,
            0.9975866079330444,
            0.9910112619400024,
            0.9975866079330444,
            0.9975866079330444,
            0.9972040057182312,
            0.9919572472572327,
            0.9946869611740112,
            0.9946869611740112,
            0.9975866079330444,
            0.9919572472572327,
            0.9975866079330444,
            0.9975866079330444,
            0.9975866079330444,
            0.9975866079330444,
            0.9975866079330444,
            0.9975866079330444,
            0.9946868419647217,
            0.9975866079330444
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9995221495628357,
        "body": "    return ''.join(strings)",
        "result": "passed",
        "similarities": [
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9956996440887451,
            0.9956996440887451,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357,
            0.9995221495628357
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9994855523109436,
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "similarities": [
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9930609464645386,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9994855523109436,
            0.9964794516563416,
            0.9994855523109436
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9995055198669434,
        "body": "    return [x for x in l if x > 0]",
        "result": "passed",
        "similarities": [
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.99554842710495,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434,
            0.99554842710495,
            0.9995055198669434,
            0.9995055198669434,
            0.9995055198669434
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9989549517631531,
        "body": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9989549517631531,
            0.9981703758239746,
            0.9973817467689514,
            0.9981703758239746,
            0.9973817467689514,
            0.9989549517631531,
            0.9989549517631531,
            0.9981703758239746,
            0.9973817467689514,
            0.9989549517631531,
            0.9989549517631531,
            0.9981703758239746,
            0.9973817467689514,
            0.9989549517631531,
            0.9989549517631531,
            0.9981703758239746,
            0.9981703758239746,
            0.9989549517631531,
            0.9989549517631531,
            0.9973817467689514
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9868937134742737,
        "body": "import math\n\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"List must have an even number of coefficients and a non-zero largest coefficient.\")\n    \n    return -xs[0] / xs[1]",
        "result": "failed: unexpected indent (<string>, line 26)",
        "similarities": [
            0.9861401319503784,
            0.9867902994155884,
            0.9815526604652405,
            0.9809228181838989,
            0.9722196459770203,
            0.9749000072479248,
            0.9814724326133728,
            0.9709402322769165,
            0.9867867231369019,
            0.9834117889404297,
            0.9801389575004578,
            0.9789255261421204,
            0.9855880737304688,
            0.9548811912536621,
            0.9868937134742737,
            0.9541612267494202,
            0.9610501527786255,
            0.9841886758804321,
            0.9679983258247375,
            0.9866683483123779
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9987770915031433,
        "body": "    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in indices_divisible_by_three])\n    result = l[:]\n    for idx, value in zip(indices_divisible_by_three, sorted_values):\n        result[idx] = value\n    return result",
        "result": "passed",
        "similarities": [
            0.9987536072731018,
            0.9968477487564087,
            0.996765673160553,
            0.9973621368408203,
            0.9987536072731018,
            0.9983331561088562,
            0.9987770915031433,
            0.9974274039268494,
            0.998641848564148,
            0.9975785613059998,
            0.9987359642982483,
            0.9987359642982483,
            0.9987536072731018,
            0.9975785613059998,
            0.9982016682624817,
            0.9981856346130371,
            0.9976080060005188,
            0.9985504150390625,
            0.9987770915031433,
            0.9984486103057861
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9999998211860657,
        "body": "    return sorted(set(l))",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9958757162094116,
        "body": "    return max(l)",
        "result": "passed",
        "similarities": [
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.968988835811615,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9958757162094116,
            0.9678878784179688,
            0.9958757162094116,
            0.9958757162094116,
            0.9900091290473938,
            0.9958757162094116
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9973562955856323,
        "body": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed",
        "similarities": [
            0.9973092675209045,
            0.9973092675209045,
            0.997309148311615,
            0.9973562955856323,
            0.997309148311615,
            0.997309148311615,
            0.997309148311615,
            0.997309148311615,
            0.9973562955856323,
            0.9973092675209045,
            0.9973092675209045,
            0.9973092675209045,
            0.9973562955856323,
            0.997309148311615,
            0.9850070476531982,
            0.997309148311615,
            0.9850070476531982,
            0.9973092675209045,
            0.9850070476531982,
            0.997309148311615
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9972943067550659,
        "body": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_values = sorted(l[i] for i in even_indices)\n    result = l[:]\n    for original_index, new_value in zip(even_indices, sorted_values):\n        result[original_index] = new_value\n    return result",
        "result": "passed",
        "similarities": [
            0.9849901795387268,
            0.9971171021461487,
            0.9972245097160339,
            0.9966058135032654,
            0.9948865175247192,
            0.9945510029792786,
            0.9945510029792786,
            0.9971171021461487,
            0.997228741645813,
            0.9919445514678955,
            0.9961057901382446,
            0.9961596131324768,
            0.9972943067550659,
            0.997228741645813,
            0.995427668094635,
            0.9972925782203674,
            0.9965242147445679,
            0.9955641031265259,
            0.9955199360847473,
            0.997212290763855
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9978750348091125,
        "body": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed",
        "similarities": [
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9978750348091125,
            0.9951902031898499,
            0.9978750348091125,
            0.9947804808616638,
            0.9951902031898499,
            0.9978750348091125,
            0.9947804808616638,
            0.9978750348091125,
            0.9947804808616638,
            0.9978750348091125,
            0.9978750348091125,
            0.9947804808616638
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9983893036842346,
        "body": "        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib_next = fib1 + fib2\n        fib1, fib2 = fib2, fib_next\n        if is_prime(fib_next):\n            count += 1\n            if count == n:\n                return fib_next",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.9967013001441956,
            0.9982972741127014,
            0.9973562955856323,
            0.9982972741127014,
            0.9983385801315308,
            0.9966779947280884,
            0.9942644834518433,
            0.9983450174331665,
            0.9982761740684509,
            0.9976551532745361,
            0.9967870116233826,
            0.9983159899711609,
            0.9982761740684509,
            0.9982964396476746,
            0.9983385801315308,
            0.9967721700668335,
            0.9951297640800476,
            0.9975551962852478,
            0.9983247518539429,
            0.9983893036842346
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9988963603973389,
        "body": "    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9974074959754944,
            0.9988963603973389,
            0.9980784058570862,
            0.9966670870780945,
            0.9988963603973389,
            0.9988642334938049,
            0.9988642334938049,
            0.9988642334938049,
            0.9988642334938049,
            0.9988642334938049,
            0.9988642334938049,
            0.9988642334938049,
            0.9984101057052612,
            0.9988963603973389,
            0.9988963603973389,
            0.9936272501945496,
            0.997916579246521,
            0.9988642334938049,
            0.9980784058570862,
            0.9988642334938049
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9997319579124451,
        "body": "    return n * n",
        "result": "passed",
        "similarities": [
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9991732239723206,
            0.9997319579124451,
            0.9992080330848694,
            0.9991732239723206,
            0.9997319579124451,
            0.9992080330848694,
            0.9992080330848694,
            0.9997319579124451,
            0.9991732239723206,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451,
            0.9997319579124451
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9999998807907104,
        "body": "    return [x + 1 for x in l]",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9999617338180542,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9997836947441101,
            0.9999617338180542,
            0.9997836947441101,
            0.9999617338180542,
            0.9997836947441101,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542,
            0.9999617338180542
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9967579245567322,
        "body": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])",
        "result": "passed",
        "similarities": [
            0.9967579245567322,
            0.9967579245567322,
            0.9967579245567322,
            0.9966342449188232,
            0.996665358543396,
            0.9966342449188232,
            0.9952284097671509,
            0.9967579245567322,
            0.9849197268486023,
            0.9967579245567322,
            0.9849197268486023,
            0.9966342449188232,
            0.9771865010261536,
            0.9967579245567322,
            0.9967579245567322,
            0.9967579245567322,
            0.9967579245567322,
            0.9967579245567322,
            0.9967579245567322,
            0.9966342449188232
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9993799328804016,
        "body": "    return 0.5 * a * h",
        "result": "passed",
        "similarities": [
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9981400370597839,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9981400370597839,
            0.9981400370597839,
            0.9981400370597839,
            0.9993799328804016,
            0.9993799328804016,
            0.9981400370597839,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016,
            0.9993799328804016
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9994462728500366,
        "body": "    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d",
        "result": "passed",
        "similarities": [
            0.9992678761482239,
            0.9994024038314819,
            0.9994462728500366,
            0.9993659853935242,
            0.999377429485321,
            0.999377429485321,
            0.999363362789154,
            0.999363362789154,
            0.9994178414344788,
            0.9994024038314819,
            0.9994178414344788,
            0.9994462728500366,
            0.9993659853935242,
            0.9994024038314819,
            0.999363362789154,
            0.9994462728500366,
            0.9992490410804749,
            0.9993659853935242,
            0.9992679953575134,
            0.9993659853935242
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9989112019538879,
        "body": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0",
        "result": "passed",
        "similarities": [
            0.9986510276794434,
            0.9986662864685059,
            0.9986510276794434,
            0.9984994530677795,
            0.9984994530677795,
            0.9986510276794434,
            0.9984994530677795,
            0.9986510276794434,
            0.9989112019538879,
            0.9986510276794434,
            0.9989112019538879,
            0.9980005025863647,
            0.9984994530677795,
            0.9986510276794434,
            0.9986510276794434,
            0.9986459016799927,
            0.9989112019538879,
            0.9984994530677795,
            0.9980753064155579,
            0.9986510276794434
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9999998211860657,
        "body": "    return text == text[::-1]",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/49": {
        "similarity": 1.000000238418579,
        "body": "    return pow(2, n, p)",
        "result": "passed",
        "similarities": [
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9996861815452576,
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed",
        "similarities": [
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9982209801673889,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861219406128,
            0.9996861219406128,
            0.9982208609580994,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576,
            0.9982209801673889,
            0.9996861815452576,
            0.9996861815452576,
            0.9996861815452576
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9980643391609192,
        "body": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])",
        "result": "passed",
        "similarities": [
            0.9976276755332947,
            0.9980643391609192,
            0.9974927306175232,
            0.9976409077644348,
            0.9976409077644348,
            0.9980643391609192,
            0.9976276755332947,
            0.9980643391609192,
            0.9976276755332947,
            0.9974927306175232,
            0.9974927306175232,
            0.9976409077644348,
            0.9976409077644348,
            0.9976409077644348,
            0.9980643391609192,
            0.9980643391609192,
            0.9974927306175232,
            0.9974927306175232,
            0.9951238036155701,
            0.9974927306175232
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9950419068336487,
        "body": "    return all(x < t for x in l)",
        "result": "passed",
        "similarities": [
            0.9950419068336487,
            0.9950419068336487,
            0.9950419068336487,
            0.9950419068336487,
            0.9950419068336487,
            0.9851254820823669,
            0.9950419068336487,
            0.9950419068336487,
            0.9950419068336487,
            0.9851254820823669,
            0.9950419068336487,
            0.9950419068336487,
            0.9851254820823669,
            0.9950419068336487,
            0.9950419068336487,
            0.9950419068336487,
            0.9851254820823669,
            0.9851254820823669,
            0.9950419068336487,
            0.9950419068336487
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9996761679649353,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            0.9970848560333252,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9996761679649353,
            0.9970848560333252,
            0.9996761679649353,
            0.9996761679649353
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9999420046806335,
        "body": "    return set(s0) == set(s1)",
        "result": "passed",
        "similarities": [
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9994767904281616,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9994767904281616,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335,
            0.9999420046806335
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9983985424041748,
        "body": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
        "result": "passed",
        "similarities": [
            0.9983291625976562,
            0.9983291625976562,
            0.9880983233451843,
            0.9983291625976562,
            0.9978118538856506,
            0.9983985424041748,
            0.9983291625976562,
            0.9983985424041748,
            0.9983291625976562,
            0.9983291625976562,
            0.9983291625976562,
            0.9983291625976562,
            0.9983291625976562,
            0.9982950091362,
            0.9983291625976562,
            0.9978118538856506,
            0.9880983233451843,
            0.9982950091362,
            0.9983291625976562,
            0.9983291625976562
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9994474053382874,
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "similarities": [
            0.9993384480476379,
            0.9994474053382874,
            0.9994474053382874,
            0.9994474053382874,
            0.9994474053382874,
            0.9994474053382874,
            0.9994474053382874,
            0.9993385672569275,
            0.9994474053382874,
            0.9971922039985657,
            0.9993384480476379,
            0.9993384480476379,
            0.9994474053382874,
            0.9994474053382874,
            0.9974519610404968,
            0.9994474053382874,
            0.9994474053382874,
            0.9971922039985657,
            0.9994474053382874,
            0.9994474053382874
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9886398315429688,
        "body": "    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing",
        "result": "passed",
        "similarities": [
            0.9877731204032898,
            0.9881364107131958,
            0.9668046236038208,
            0.9866475462913513,
            0.9668046832084656,
            0.9847833514213562,
            0.9886398315429688,
            0.984836995601654,
            0.9668046236038208,
            0.9870104789733887,
            0.9880357980728149,
            0.9886398315429688,
            0.9668046832084656,
            0.9877731204032898,
            0.9886398315429688,
            0.9877731204032898,
            0.9757519960403442,
            0.9845767617225647,
            0.9757519960403442,
            0.9878768920898438
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9992222189903259,
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "similarities": [
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9978268146514893,
            0.9987379312515259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9987378716468811,
            0.9879762530326843,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259,
            0.9992222189903259
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9968996644020081,
        "body": "    factor = 2\n    while n % factor == 0:\n        n //= factor\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            factor = i\n    if n > 2:\n        factor = n\n    return factor",
        "result": "passed",
        "similarities": [
            0.9951240420341492,
            0.9957426190376282,
            0.994645893573761,
            0.995110273361206,
            0.9952985644340515,
            0.994645893573761,
            0.9968996644020081,
            0.9967619180679321,
            0.9951902627944946,
            0.9954487681388855,
            0.9957426190376282,
            0.994645893573761,
            0.995512843132019,
            0.9968996644020081,
            0.9967790246009827,
            0.9939053058624268,
            0.994812548160553,
            0.9965758919715881,
            0.995416522026062,
            0.9952985644340515
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9999012351036072,
        "body": "    return n * (n + 1) // 2",
        "result": "passed",
        "similarities": [
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072,
            0.9981251955032349,
            0.9999012351036072,
            0.9999012351036072,
            0.9999012351036072
        ]
    },
    "HumanEval/61": {
        "similarity": 0.999167799949646,
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "similarities": [
            0.999167799949646,
            0.999167799949646,
            0.999167799949646,
            0.999167799949646,
            0.999167799949646,
            0.9977664947509766,
            0.9988023638725281,
            0.999167799949646,
            0.9990197420120239,
            0.999167799949646,
            0.9977664947509766,
            0.999167799949646,
            0.9990197420120239,
            0.9990197420120239,
            0.9990869760513306,
            0.9977664947509766,
            0.9990197420120239,
            0.999167799949646,
            0.999167799949646,
            0.9972793459892273
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9957529306411743,
        "body": "    return [i * x for i, x in enumerate(xs)][1:]",
        "result": "passed",
        "similarities": [
            0.9956091046333313,
            0.9917298555374146,
            0.9957529306411743,
            0.9957529306411743,
            0.9957529306411743,
            0.9957529306411743,
            0.9957529306411743,
            0.9957529306411743,
            0.9956091046333313,
            0.9957529306411743,
            0.9956091046333313,
            0.9957529306411743,
            0.9917298555374146,
            0.9917298555374146,
            0.9917298555374146,
            0.9957529306411743,
            0.9956091046333313,
            0.9956091046333313,
            0.9957529306411743,
            0.9957529306411743
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9997277855873108,
        "body": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed",
        "similarities": [
            0.999664306640625,
            0.999664306640625,
            0.9996603727340698,
            0.9996603727340698,
            0.9997277855873108,
            0.999664306640625,
            0.999664306640625,
            0.999664306640625,
            0.9997277855873108,
            0.9996603727340698,
            0.9997277855873108,
            0.9997277855873108,
            0.9997277855873108,
            0.9996603727340698,
            0.9997277855873108,
            0.999664306640625,
            0.999664306640625,
            0.999664306640625,
            0.999664306640625,
            0.9996603727340698
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9975854158401489,
        "body": "    count = sum(1 for char in s if char.lower() in \"aeiou\")\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9975854158401489,
            0.997323215007782,
            0.9950274229049683,
            0.997323215007782,
            0.9971194863319397,
            0.9971194863319397,
            0.9971194863319397,
            0.997323215007782,
            0.996941328048706,
            0.9972144961357117,
            0.9938387870788574,
            0.9971194863319397,
            0.997323215007782,
            0.9971185326576233,
            0.9973534345626831,
            0.9956578612327576,
            0.9969414472579956,
            0.997323215007782,
            0.9971194863319397,
            0.9973534345626831
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9987102150917053,
        "body": "    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        return digits[::-1]\n    \n    shift = shift % num_digits\n    return digits[-shift:] + digits[:-shift]",
        "result": "passed",
        "similarities": [
            0.9977719187736511,
            0.9981778860092163,
            0.9986576437950134,
            0.9972312450408936,
            0.9987102150917053,
            0.9981378316879272,
            0.9977202415466309,
            0.9986779093742371,
            0.9978659749031067,
            0.9984700083732605,
            0.9984130859375,
            0.998391330242157,
            0.997696042060852,
            0.9981378316879272,
            0.9970458149909973,
            0.9986933469772339,
            0.997806966304779,
            0.9977719187736511,
            0.998391330242157,
            0.9976693391799927
        ]
    },
    "HumanEval/66": {
        "similarity": 1.0,
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9978997111320496,
        "body": "    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed",
        "similarities": [
            0.9953014850616455,
            0.9978997111320496,
            0.9974275231361389,
            0.9978997111320496,
            0.9974275231361389,
            0.9953014850616455,
            0.9974275231361389,
            0.9974275231361389,
            0.9974275231361389,
            0.9953014850616455,
            0.9953014850616455,
            0.9978997111320496,
            0.9974275231361389,
            0.9953014850616455,
            0.9974275231361389,
            0.9974275231361389,
            0.9953014850616455,
            0.9978997111320496,
            0.9977577924728394,
            0.9974275231361389
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9985592365264893,
        "body": "    smallest_even_value = float('inf')\n    smallest_index = -1\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_index = i\n\n    return [smallest_even_value, smallest_index] if smallest_index != -1 else []",
        "result": "passed",
        "similarities": [
            0.9985355734825134,
            0.9985592365264893,
            0.9980562925338745,
            0.9968534111976624,
            0.9981226921081543,
            0.9985592365264893,
            0.9985592365264893,
            0.9958769083023071,
            0.9977280497550964,
            0.9978491067886353,
            0.9977710247039795,
            0.9978935122489929,
            0.9969711303710938,
            0.9977710247039795,
            0.9960280060768127,
            0.9985592365264893,
            0.9985592365264893,
            0.9981637597084045,
            0.9965085387229919,
            0.9978474974632263
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9994163513183594,
        "body": "    from collections import Counter\n    freq = Counter(lst)\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "result": "passed",
        "similarities": [
            0.9991896748542786,
            0.9990090727806091,
            0.9993077516555786,
            0.9991896748542786,
            0.9993077516555786,
            0.9993070363998413,
            0.9994163513183594,
            0.9990754723548889,
            0.9994163513183594,
            0.9993077516555786,
            0.9993077516555786,
            0.9992407560348511,
            0.9987756609916687,
            0.9993077516555786,
            0.9993077516555786,
            0.9991896748542786,
            0.9991896748542786,
            0.9988065361976624,
            0.9994163513183594,
            0.9981034994125366
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9981165528297424,
        "body": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
        "result": "passed",
        "similarities": [
            0.9981165528297424,
            0.9938785433769226,
            0.9973914623260498,
            0.9981165528297424,
            0.9980757832527161,
            0.9980757832527161,
            0.9970691204071045,
            0.9980757832527161,
            0.994928777217865,
            0.9973914623260498,
            0.9970691204071045,
            0.9962607026100159,
            0.9970691204071045,
            0.9981165528297424,
            0.9980757832527161,
            0.9970691204071045,
            0.9941408038139343,
            0.9981165528297424,
            0.9938785433769226,
            0.9981165528297424
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9979439973831177,
        "body": "import math\n\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9970881938934326,
            0.9979439973831177,
            0.9975471496582031,
            0.9970881938934326,
            0.9978061318397522,
            0.9970881938934326,
            0.9970881938934326,
            0.9979439973831177,
            0.9979439973831177,
            0.9979439973831177,
            0.9970881938934326,
            0.9979439973831177,
            0.9979439973831177,
            0.9976144433021545,
            0.9975471496582031,
            0.9978061318397522,
            0.9979439973831177,
            0.9964677691459656,
            0.9979439973831177,
            0.9970881938934326
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9999998807907104,
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9995993375778198,
        "body": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes",
        "result": "passed",
        "similarities": [
            0.9992548227310181,
            0.9995993375778198,
            0.9995993375778198,
            0.9995993375778198,
            0.9995993375778198,
            0.9995993375778198,
            0.9995993375778198,
            0.999141275882721,
            0.9992548227310181,
            0.9995993375778198,
            0.9995993375778198,
            0.9995993375778198,
            0.999538004398346,
            0.9995993375778198,
            0.9992887377738953,
            0.9995993375778198,
            0.9991591572761536,
            0.999538004398346,
            0.9992887377738953,
            0.999500572681427
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9974417686462402,
        "body": "    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    return lst1 if len1 <= len2 else lst2",
        "result": "passed",
        "similarities": [
            0.9974416494369507,
            0.9928128123283386,
            0.9974417686462402,
            0.9973600506782532,
            0.9973600506782532,
            0.9973600506782532,
            0.9974416494369507,
            0.9959112405776978,
            0.9974417686462402,
            0.9974417686462402,
            0.9974417686462402,
            0.9956904053688049,
            0.990336000919342,
            0.9964266419410706,
            0.9912962913513184,
            0.9974416494369507,
            0.9973600506782532,
            0.9973600506782532,
            0.9912756085395813,
            0.9974416494369507
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9991626739501953,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9990630149841309,
            0.9977341890335083,
            0.9990944266319275,
            0.9991324543952942,
            0.9990630745887756,
            0.9965221881866455,
            0.9990944266319275,
            0.9990668296813965,
            0.9990668296813965,
            0.9991626739501953,
            0.9991324543952942,
            0.9991626739501953,
            0.9991626739501953,
            0.9974629282951355,
            0.9991324543952942,
            0.99907386302948,
            0.9990944266319275,
            0.9991324543952942,
            0.9987232685089111,
            0.9991626739501953
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9953389763832092,
        "body": "    if n <= 0 or x <= 0:\n        return False\n    return n ** int(round(math.log(x, n))) == x",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9934720396995544,
            0.989922285079956,
            0.9940832853317261,
            0.9939937591552734,
            0.9939936399459839,
            0.9890256524085999,
            0.9933435320854187,
            0.9951589703559875,
            0.9936739206314087,
            0.9953389763832092,
            0.9915866851806641,
            0.9941928386688232,
            0.9930170774459839,
            0.9950236082077026,
            0.9909037351608276,
            0.9943608641624451,
            0.9940832853317261,
            0.9940832853317261,
            0.9941325783729553,
            0.9933435320854187
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9942009449005127,
        "body": "    return int(round(a ** (1/3))) ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "similarities": [
            0.9942009449005127,
            0.9910919666290283,
            0.9921718239784241,
            0.993370771408081,
            0.993370771408081,
            0.993370771408081,
            0.993370771408081,
            0.9911122918128967,
            0.993370771408081,
            0.993370771408081,
            0.9897813200950623,
            0.993370771408081,
            0.9941532611846924,
            0.9921718239784241,
            0.993370771408081,
            0.9896276593208313,
            0.9917313456535339,
            0.993370771408081,
            0.9921718239784241,
            0.9910919666290283
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9997661113739014,
        "body": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)",
        "result": "passed",
        "similarities": [
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.9980294108390808,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014,
            0.997751772403717,
            0.9997661113739014,
            0.9997661113739014,
            0.9997661113739014
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9924245476722717,
        "body": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"",
        "result": "passed",
        "similarities": [
            0.9924245476722717,
            0.989292562007904,
            0.9909330010414124,
            0.9924245476722717,
            0.9909330010414124,
            0.9924245476722717,
            0.9745528697967529,
            0.9879527688026428,
            0.9909330010414124,
            0.9924245476722717,
            0.988085925579071,
            0.9879527688026428,
            0.9924245476722717,
            0.9876375794410706,
            0.9924245476722717,
            0.9876968264579773,
            0.9876375794410706,
            0.9924245476722717,
            0.9924245476722717,
            0.9924245476722717
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9999141693115234,
        "body": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9999140501022339,
            0.9999140501022339,
            0.9999018311500549,
            0.9999140501022339,
            0.9999141693115234,
            0.9999141693115234,
            0.9999018311500549,
            0.9999141693115234,
            0.9984915852546692,
            0.9999140501022339,
            0.9999140501022339,
            0.9999018311500549,
            0.9999140501022339,
            0.9999140501022339,
            0.9999018311500549,
            0.9999140501022339,
            0.9999140501022339,
            0.9999140501022339,
            0.9999140501022339,
            0.9999018311500549
        ]
    },
    "HumanEval/81": {
        "similarity": 0.998521089553833,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed",
        "similarities": [
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.9840766787528992,
            0.9891006350517273,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833,
            0.9980635643005371,
            0.998521089553833,
            0.998521089553833,
            0.998521089553833
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9980767965316772,
        "body": "    n = len(string)\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9978992342948914,
            0.9979620575904846,
            0.9980767965316772,
            0.9957453012466431,
            0.9957453012466431,
            0.9957453012466431,
            0.997576892375946,
            0.9979314208030701,
            0.9979620575904846,
            0.9957453012466431,
            0.9978992342948914,
            0.9957453012466431,
            0.9979605674743652,
            0.9979314208030701,
            0.9979605674743652,
            0.9978992342948914,
            0.9978998899459839,
            0.9979620575904846,
            0.9980767965316772,
            0.9979620575904846
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9991387724876404,
        "body": "    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)",
        "result": "failed: ",
        "similarities": [
            0.997858464717865,
            0.9989609122276306,
            0.9991387724876404,
            0.9989933371543884,
            0.9990033507347107,
            0.9990269541740417,
            0.9991387724876404,
            0.9990269541740417,
            0.9991387724876404,
            0.9990033507347107,
            0.9989607930183411,
            0.9990269541740417,
            0.9989607930183411,
            0.9990033507347107,
            0.9989607930183411,
            0.9990310668945312,
            0.9990269541740417,
            0.9989933371543884,
            0.9990310668945312,
            0.9990310668945312
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9993759989738464,
        "body": "    return bin(sum(int(digit) for digit in str(N)))[2:]",
        "result": "passed",
        "similarities": [
            0.9993759989738464,
            0.9979936480522156,
            0.9993759989738464,
            0.9979936480522156,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9972987771034241,
            0.9993759989738464,
            0.9993759989738464,
            0.9993759989738464,
            0.9979936480522156,
            0.9993759989738464,
            0.9993759989738464,
            0.9979936480522156,
            0.9993759989738464
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9999119639396667,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)",
        "result": "passed",
        "similarities": [
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9990729093551636,
            0.9997803568840027,
            0.9999119639396667,
            0.9997803568840027,
            0.9999119639396667,
            0.9999119639396667,
            0.9997803568840027,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667,
            0.9999119639396667
        ]
    },
    "HumanEval/86": {
        "similarity": 0.993151843547821,
        "body": "    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])",
        "result": "passed",
        "similarities": [
            0.9931517243385315,
            0.9920963644981384,
            0.9920963644981384,
            0.9920963644981384,
            0.988974928855896,
            0.988524317741394,
            0.9931517243385315,
            0.988974928855896,
            0.9898595213890076,
            0.9920963644981384,
            0.993151843547821,
            0.9920963644981384,
            0.993151843547821,
            0.988974928855896,
            0.9920963644981384,
            0.9920963644981384,
            0.9920963644981384,
            0.9931517243385315,
            0.9920963644981384,
            0.9931517243385315
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9986406564712524,
        "body": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row[::-1]):\n            if val == x:\n                coordinates.append((i, len(row) - 1 - j))\n    return sorted(coordinates)",
        "result": "failed: ",
        "similarities": [
            0.9984225034713745,
            0.9981894493103027,
            0.9984225034713745,
            0.9977852702140808,
            0.9972895383834839,
            0.9982131123542786,
            0.9978960752487183,
            0.9984380602836609,
            0.9986406564712524,
            0.997532308101654,
            0.9984380602836609,
            0.9972659945487976,
            0.9973951578140259,
            0.9978417754173279,
            0.9977852702140808,
            0.9980115294456482,
            0.9984225034713745,
            0.9986123442649841,
            0.9986123442649841,
            0.9984380602836609
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9974262714385986,
        "body": "    if not array:\n        return []\n    copy = array[:]\n    if (copy[0] + copy[-1]) % 2 == 0:\n        copy.sort(reverse=True)\n    else:\n        copy.sort()\n    return copy",
        "result": "passed",
        "similarities": [
            0.9974262714385986,
            0.9958088397979736,
            0.9972126483917236,
            0.9955443143844604,
            0.9972832202911377,
            0.9970205426216125,
            0.9970205426216125,
            0.9965589642524719,
            0.9970205426216125,
            0.9958088397979736,
            0.9964948892593384,
            0.9964722394943237,
            0.9915335774421692,
            0.9935411214828491,
            0.9938774108886719,
            0.9973620176315308,
            0.995509922504425,
            0.9972946047782898,
            0.9973620176315308,
            0.9970205426216125
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9960762858390808,
        "body": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s:\n        if char in alphabet:\n            new_index = (alphabet.index(char) + (2 * 2)) % 26\n            result += alphabet[new_index]\n        else:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9959314465522766,
            0.9938540458679199,
            0.9955251812934875,
            0.9944735169410706,
            0.9960089325904846,
            0.9950236082077026,
            0.9944700002670288,
            0.9960762858390808,
            0.9933000206947327,
            0.9953357577323914,
            0.9953118562698364,
            0.9951494932174683,
            0.9957855939865112,
            0.9946568012237549,
            0.9942829608917236,
            0.9954657554626465,
            0.9957855939865112,
            0.9956663250923157,
            0.9953119158744812,
            0.9951609373092651
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9975760579109192,
        "body": "    if len(lst) < 2:\n        return None\n    unique_elements = sorted(set(lst))\n    return unique_elements[1] if len(unique_elements) > 1 else None",
        "result": "passed",
        "similarities": [
            0.9945482015609741,
            0.9975760579109192,
            0.9975760579109192,
            0.9967067241668701,
            0.9975760579109192,
            0.9945482015609741,
            0.9943596720695496,
            0.9975648522377014,
            0.99667888879776,
            0.99667888879776,
            0.9975648522377014,
            0.9975648522377014,
            0.9856476187705994,
            0.9945482015609741,
            0.9975648522377014,
            0.982265293598175,
            0.9975760579109192,
            0.9975648522377014,
            0.9975693225860596,
            0.9975760579109192
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9971335530281067,
        "body": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)",
        "result": "failed: Test 2",
        "similarities": [
            0.9957228302955627,
            0.9927859902381897,
            0.9969338774681091,
            0.9967513084411621,
            0.9962511658668518,
            0.9948124289512634,
            0.9961726665496826,
            0.9969338774681091,
            0.9953837990760803,
            0.9946539998054504,
            0.9969003796577454,
            0.9964815378189087,
            0.9969499707221985,
            0.9971335530281067,
            0.997086763381958,
            0.9968855977058411,
            0.9969003796577454,
            0.9969548583030701,
            0.9968209862709045,
            0.9969003796577454
        ]
    },
    "HumanEval/92": {
        "similarity": 0.996299147605896,
        "body": "    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)",
        "result": "passed",
        "similarities": [
            0.9945627450942993,
            0.9914155602455139,
            0.9946100115776062,
            0.9922252297401428,
            0.9946100115776062,
            0.9950005412101746,
            0.9945627450942993,
            0.9946100115776062,
            0.9914155602455139,
            0.9935824871063232,
            0.9945627450942993,
            0.9946100115776062,
            0.9924433827400208,
            0.9928861856460571,
            0.9946100115776062,
            0.9926876425743103,
            0.9918178915977478,
            0.996299147605896,
            0.9935289025306702,
            0.9946100115776062
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9943121075630188,
        "body": "    vowels = \"aeiou\"\n    shifted_vowels = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n    shifted_vowels.update({k.upper(): v.upper() for k, v in shifted_vowels.items()})\n    \n        if char.isalpha():\n            swapped_char = char.swapcase()\n            return shifted_vowels.get(swapped_char, swapped_char)\n        else:\n            return char\n    \n    return ''.join(swap_case_and_shift(c) for c in message)",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9884259104728699,
            0.9933688640594482,
            0.9936806559562683,
            0.9942163228988647,
            0.9877082705497742,
            0.9885478615760803,
            0.9936065673828125,
            0.9907028079032898,
            0.9934869408607483,
            0.9943121075630188,
            0.9883771538734436,
            0.9881196618080139,
            0.9937883019447327,
            0.9890020489692688,
            0.9883771538734436,
            0.9872879385948181,
            0.9899686574935913,
            0.9895806908607483,
            0.9923533201217651,
            0.9892694354057312
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9993623495101929,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9993623495101929,
            0.9987006187438965,
            0.9993017911911011,
            0.9993623495101929,
            0.9993623495101929,
            0.9991077780723572,
            0.999345600605011,
            0.9993167519569397,
            0.9993167519569397,
            0.999345600605011,
            0.9993167519569397,
            0.9974744915962219,
            0.9993623495101929,
            0.997552752494812,
            0.999345600605011,
            0.9955300688743591,
            0.9993167519569397,
            0.9993167519569397,
            0.9993167519569397,
            0.9977207183837891
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9983229637145996,
        "body": "    if not dictionary:\n        return False\n    keys = list(dictionary.keys())\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    return all_lower or all_upper",
        "result": "failed: name 'dictionary' is not defined",
        "similarities": [
            0.9981933236122131,
            0.9982597231864929,
            0.9950994253158569,
            0.9942094087600708,
            0.9983229637145996,
            0.9971656799316406,
            0.9965571165084839,
            0.9975031614303589,
            0.9982597231864929,
            0.9972646832466125,
            0.9966123700141907,
            0.9982597231864929,
            0.9950994253158569,
            0.9971656799316406,
            0.997660219669342,
            0.9974411725997925,
            0.9982641339302063,
            0.9982597231864929,
            0.9973708987236023,
            0.9973708987236023
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9993139505386353,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    return primes",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9975911378860474,
            0.9992703199386597,
            0.9992849230766296,
            0.9992856383323669,
            0.9969801902770996,
            0.9993139505386353,
            0.9989676475524902,
            0.9993139505386353,
            0.9992030262947083,
            0.9991746544837952,
            0.9992703199386597,
            0.9992030262947083,
            0.9991902709007263,
            0.9992030262947083,
            0.9976361989974976,
            0.9992856383323669,
            0.9975911378860474,
            0.9992849230766296,
            0.9992721080780029,
            0.9992030262947083
        ]
    },
    "HumanEval/97": {
        "similarity": 1.0,
        "body": "    return (a % 10) * (b % 10)",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9956123232841492,
        "body": "    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)",
        "result": "passed",
        "similarities": [
            0.9933192729949951,
            0.9955309629440308,
            0.9956123232841492,
            0.9955309629440308,
            0.9955309629440308,
            0.982787013053894,
            0.9956123232841492,
            0.9955309629440308,
            0.9955309629440308,
            0.9955309629440308,
            0.9837908744812012,
            0.9912402629852295,
            0.9955309629440308,
            0.9955765604972839,
            0.9955309629440308,
            0.9955309629440308,
            0.9955765604972839,
            0.9955309629440308,
            0.9906278848648071,
            0.9906278848648071
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9972909688949585,
        "body": "    num = float(value)\n    if abs(num - round(num)) == 0.5:\n        return int(num + (1 if num > 0 else -1))\n    else:\n        return round(num)",
        "result": "passed",
        "similarities": [
            0.99396151304245,
            0.9967823028564453,
            0.9964163899421692,
            0.995829164981842,
            0.9958682060241699,
            0.9946831464767456,
            0.9925990104675293,
            0.9970414042472839,
            0.99396151304245,
            0.9967547059059143,
            0.9942101240158081,
            0.9969542622566223,
            0.9915736317634583,
            0.9972909688949585,
            0.9969196319580078,
            0.9949061870574951,
            0.9968827962875366,
            0.9966232180595398,
            0.9940547943115234,
            0.9948808550834656
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9999265074729919,
        "body": "    pile = []\n    current_stones = n\n    for i in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile",
        "result": "passed",
        "similarities": [
            0.9998384714126587,
            0.9999028444290161,
            0.9999265074729919,
            0.9999265074729919,
            0.9998838305473328,
            0.9999265074729919,
            0.9999265074729919,
            0.9998838305473328,
            0.9999147057533264,
            0.9999147057533264,
            0.9998406767845154,
            0.9999265074729919,
            0.9999145865440369,
            0.9998384714126587,
            0.9999265074729919,
            0.9998406767845154,
            0.9999265074729919,
            0.9999145865440369,
            0.9999265074729919,
            0.9999145865440369
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9983266592025757,
        "body": "    return s.replace(',', ' ').split()",
        "result": "passed",
        "similarities": [
            0.9911447167396545,
            0.9983266592025757,
            0.9983266592025757,
            0.9947757720947266,
            0.9911447167396545,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9945859313011169,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757,
            0.9983266592025757
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9988856911659241,
        "body": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if (y - 1) >= x:\n        return y - 1\n    return -1",
        "result": "passed",
        "similarities": [
            0.9987922310829163,
            0.9988856911659241,
            0.9988856911659241,
            0.9988856911659241,
            0.9987922310829163,
            0.9987922310829163,
            0.9987922310829163,
            0.9987922310829163,
            0.9946402311325073,
            0.9988856911659241,
            0.9987922310829163,
            0.9982438683509827,
            0.9982438683509827,
            0.9988856911659241,
            0.9987883567810059,
            0.9988856911659241,
            0.9988856911659241,
            0.9982438683509827,
            0.9987883567810059,
            0.9987883567810059
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9996981620788574,
        "body": "    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
        "result": "passed",
        "similarities": [
            0.9996981620788574,
            0.9996716380119324,
            0.9996981620788574,
            0.9993929862976074,
            0.9990383982658386,
            0.9996981620788574,
            0.9993929862976074,
            0.9996716380119324,
            0.9996981620788574,
            0.9993929862976074,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9993929862976074,
            0.9996981620788574,
            0.9993929862976074,
            0.9996716380119324,
            0.9996981620788574,
            0.9996981620788574,
            0.9996716380119324
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9913140535354614,
        "body": "        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    result = [num for num in x if has_only_odd_digits(num)]\n    return sorted(result)",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9913140535354614,
            0.9851737022399902,
            0.9891059398651123,
            0.9903503060340881,
            0.9910858869552612,
            0.9904931783676147,
            0.9875646233558655,
            0.9875646233558655,
            0.9843233823776245,
            0.9870117902755737,
            0.9884874224662781,
            0.9875514507293701,
            0.9875646233558655,
            0.9831128716468811,
            0.9831128716468811,
            0.9891974925994873,
            0.9875646233558655,
            0.9884874224662781,
            0.9870117902755737,
            0.9875646233558655
        ]
    },
    "HumanEval/105": {
        "similarity": 0.995714008808136,
        "body": "    digit_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_sorted_arr = sorted_filtered_arr[::-1]\n    return [digit_names[num] for num in reversed_sorted_arr]",
        "result": "passed",
        "similarities": [
            0.9756227135658264,
            0.987101137638092,
            0.9943135976791382,
            0.9919003844261169,
            0.9953837990760803,
            0.995714008808136,
            0.9956586956977844,
            0.9950649738311768,
            0.9939494729042053,
            0.9950175881385803,
            0.9952470660209656,
            0.9938615560531616,
            0.9955629110336304,
            0.9939494729042053,
            0.9824633598327637,
            0.9956506490707397,
            0.9943135976791382,
            0.9951916933059692,
            0.9950175881385803,
            0.9944997429847717
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9977493286132812,
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "result": "passed",
        "similarities": [
            0.9938605427742004,
            0.9949710369110107,
            0.9975311160087585,
            0.9975284934043884,
            0.9976792931556702,
            0.9956346154212952,
            0.9975284934043884,
            0.9965730905532837,
            0.9975311160087585,
            0.9975284934043884,
            0.9951967000961304,
            0.9977493286132812,
            0.9975311160087585,
            0.9949710369110107,
            0.9966407418251038,
            0.9975311160087585,
            0.9975284934043884,
            0.9949710369110107,
            0.9976792931556702,
            0.9971632957458496
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9989662170410156,
        "body": "        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)",
        "result": "failed: unexpected indent (<string>, line 25)",
        "similarities": [
            0.9986965656280518,
            0.9989662170410156,
            0.9989107847213745,
            0.9989662170410156,
            0.9985813498497009,
            0.9989202618598938,
            0.9985813498497009,
            0.9987658262252808,
            0.9987915754318237,
            0.9986265897750854,
            0.9988700747489929,
            0.9987860321998596,
            0.9988240599632263,
            0.9987843036651611,
            0.998823344707489,
            0.9989644289016724,
            0.9989662170410156,
            0.9987383484840393,
            0.9989202618598938,
            0.9987698793411255
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9915229678153992,
        "body": "        is_negative = n < 0\n        digits = [int(d) for d in str(abs(n))]\n        if is_negative:\n            digits[0] *= -1\n        return sum(digits)\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)",
        "result": "failed: unexpected indent (<string>, line 12)",
        "similarities": [
            0.9904149770736694,
            0.9903608560562134,
            0.9806360006332397,
            0.9808252453804016,
            0.9910281300544739,
            0.9904149770736694,
            0.9904149770736694,
            0.9904149770736694,
            0.9800276756286621,
            0.9806360006332397,
            0.9908407330513,
            0.989328920841217,
            0.9903759360313416,
            0.9913447499275208,
            0.9903759360313416,
            0.9800276756286621,
            0.9915229678153992,
            0.9806360006332397,
            0.9904149770736694,
            0.9903759360313416
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9982271790504456,
        "body": "    if not arr:\n        return True\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False",
        "result": "passed",
        "similarities": [
            0.9974636435508728,
            0.99742591381073,
            0.9968051910400391,
            0.9963740110397339,
            0.9972116351127625,
            0.9957785606384277,
            0.9982271790504456,
            0.9981487989425659,
            0.9981430768966675,
            0.9981430768966675,
            0.9962068200111389,
            0.9982271790504456,
            0.9956386089324951,
            0.9980202913284302,
            0.9980165362358093,
            0.9982271790504456,
            0.9976829886436462,
            0.9982271790504456,
            0.9981488585472107,
            0.9976829886436462
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9994888305664062,
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if even_count_in_lst2 >= odd_count else \"NO\"",
        "result": "passed",
        "similarities": [
            0.9993011951446533,
            0.9980370402336121,
            0.9993754029273987,
            0.9994057416915894,
            0.9991519451141357,
            0.9980370402336121,
            0.9991616010665894,
            0.999104380607605,
            0.9993059039115906,
            0.9994888305664062,
            0.999104380607605,
            0.999104380607605,
            0.9993059039115906,
            0.9988147616386414,
            0.9994057416915894,
            0.9994888305664062,
            0.9993098378181458,
            0.9994057416915894,
            0.9993011951446533,
            0.9994888305664062
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9985036253929138,
        "body": "    if not test:\n        return {}\n    \n    letters = test.split()\n    letter_count = {}\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}",
        "result": "passed",
        "similarities": [
            0.997800350189209,
            0.9985036253929138,
            0.9982771873474121,
            0.9981008768081665,
            0.9961884021759033,
            0.9965301156044006,
            0.9965301156044006,
            0.9891014099121094,
            0.9985036253929138,
            0.997959315776825,
            0.9980073571205139,
            0.9985036253929138,
            0.9978348612785339,
            0.9980073571205139,
            0.9982883930206299,
            0.9982771873474121,
            0.9978017210960388,
            0.9974300265312195,
            0.9984480142593384,
            0.9975385069847107
        ]
    },
    "HumanEval/112": {
        "similarity": 0.998652994632721,
        "body": "    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "similarities": [
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.9952091574668884,
            0.9985769987106323,
            0.997373104095459,
            0.998612642288208,
            0.9949589967727661,
            0.9985621571540833,
            0.9985771179199219,
            0.9985771179199219,
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.998652994632721,
            0.998612642288208,
            0.9949387311935425
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9981127381324768,
        "body": "    return [f\"the number of odd elements {sum(1 for char in s if int(char) % 2 != 0)}n the str{s.index(s) + 1}ng {s.index(s) + 1} of the {s.index(s) + 1}nput.\" for s in lst]",
        "result": "failed: Test 1",
        "similarities": [
            0.9980970621109009,
            0.9973860383033752,
            0.9980130791664124,
            0.994373619556427,
            0.9980970621109009,
            0.9980613589286804,
            0.9980970621109009,
            0.9971797466278076,
            0.9941522479057312,
            0.9981127381324768,
            0.9971922636032104,
            0.9971426129341125,
            0.9980970621109009,
            0.9971734285354614,
            0.9980970621109009,
            0.9980970621109009,
            0.9972667694091797,
            0.997490644454956,
            0.9941522479057312,
            0.99710613489151
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9956531524658203,
        "body": "    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum",
        "result": "passed",
        "similarities": [
            0.9946510791778564,
            0.9942914247512817,
            0.9942914247512817,
            0.9942914247512817,
            0.9930015206336975,
            0.9942914247512817,
            0.9930015206336975,
            0.9930015206336975,
            0.9950491189956665,
            0.9930015206336975,
            0.9930015206336975,
            0.9930015206336975,
            0.9942914247512817,
            0.9956531524658203,
            0.9930015206336975,
            0.9942914247512817,
            0.9917200803756714,
            0.9950079917907715,
            0.9944409728050232,
            0.9944409728050232
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9953828454017639,
        "body": "    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error",
        "similarities": [
            0.9953828454017639,
            0.9951114654541016,
            0.9951114654541016,
            0.9951114654541016,
            0.9951114654541016,
            0.9951114654541016,
            0.9953828454017639,
            0.9951114654541016,
            0.9951114654541016,
            0.975025475025177,
            0.9951114654541016,
            0.9953099489212036,
            0.975025475025177,
            0.9951114654541016,
            0.9951114654541016,
            0.9951114654541016,
            0.9931783080101013,
            0.9951114654541016,
            0.975025475025177,
            0.9951114654541016
        ]
    },
    "HumanEval/116": {
        "similarity": 1.000000238418579,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579
        ]
    },
    "HumanEval/117": {
        "similarity": 0.998859703540802,
        "body": "    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n\n    return result",
        "result": "passed",
        "similarities": [
            0.998859703540802,
            0.9974941611289978,
            0.9987260699272156,
            0.998859703540802,
            0.997983455657959,
            0.998859703540802,
            0.9988309144973755,
            0.9985507130622864,
            0.9987895488739014,
            0.9976894855499268,
            0.9988309144973755,
            0.9986830353736877,
            0.9987577199935913,
            0.9977923035621643,
            0.9988309144973755,
            0.9976894855499268,
            0.998859703540802,
            0.9980306029319763,
            0.9987126588821411,
            0.9987126588821411
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9992671608924866,
        "body": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed",
        "similarities": [
            0.9992671608924866,
            0.999061107635498,
            0.9992671608924866,
            0.9992671608924866,
            0.9992671608924866,
            0.9990587830543518,
            0.999061107635498,
            0.999061107635498,
            0.9992671608924866,
            0.9992671608924866,
            0.9992671608924866,
            0.9992671608924866,
            0.9982472658157349,
            0.998423159122467,
            0.998423159122467,
            0.9982424378395081,
            0.999061107635498,
            0.999061107635498,
            0.9986773133277893,
            0.9992671608924866
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9994449615478516,
        "body": "        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    first_order = lst[0] + lst[1]\n    second_order = lst[1] + lst[0]\n    return 'Yes' if is_balanced(first_order) or is_balanced(second_order) else 'No'",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.999324381351471,
            0.9994449615478516,
            0.9994449615478516,
            0.9993408918380737,
            0.9988210797309875,
            0.9988692402839661,
            0.9971858859062195,
            0.9994449615478516,
            0.9994449615478516,
            0.9994449615478516,
            0.9972275495529175,
            0.9985076785087585,
            0.9994449615478516,
            0.9994449615478516,
            0.9988210797309875,
            0.9994449615478516,
            0.9994449615478516,
            0.9994449615478516,
            0.9994449615478516,
            0.9994449615478516
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9984084963798523,
        "body": "    return sorted(arr)[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9984084963798523,
            0.9956349730491638,
            0.9984084963798523,
            0.9956349730491638,
            0.9984084963798523,
            0.9984084963798523,
            0.9984084963798523,
            0.9954031109809875,
            0.9956349730491638,
            0.9984084963798523,
            0.9954031109809875,
            0.9984084963798523,
            0.9984084963798523,
            0.9984084963798523,
            0.9984084963798523,
            0.9984084963798523,
            0.9956349730491638,
            0.9956349730491638,
            0.9984084963798523,
            0.9984084963798523
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9998858571052551,
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.9998858571052551,
            0.9998858571052551,
            0.9998275637626648,
            0.9998858571052551,
            0.9998858571052551,
            0.9997825622558594,
            0.9998858571052551,
            0.9998858571052551,
            0.9998858571052551,
            0.9998858571052551,
            0.999335765838623,
            0.9998858571052551,
            0.9998080730438232,
            0.9997825622558594,
            0.9998858571052551,
            0.9997825622558594,
            0.9998858571052551,
            0.9994641542434692,
            0.9998858571052551,
            0.9997825622558594
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9999998211860657,
        "body": "    return sum(x for x in arr[:k] if -99 <= x <= 99)",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9974309206008911,
        "body": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])",
        "result": "passed",
        "similarities": [
            0.9967821836471558,
            0.9958135485649109,
            0.9966478943824768,
            0.9968400597572327,
            0.995414137840271,
            0.9939225912094116,
            0.9966205954551697,
            0.9968992471694946,
            0.9963698387145996,
            0.996401846408844,
            0.9972262382507324,
            0.9965853691101074,
            0.995722234249115,
            0.9928942322731018,
            0.9969411492347717,
            0.9974309206008911,
            0.9972262382507324,
            0.9939603209495544,
            0.9973224997520447,
            0.9966478943824768
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9971474409103394,
        "body": "    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12 or day < 1:\n        return False\n    \n    if month in {4, 6, 9, 11} and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    elif day > 31:\n        return False\n    \n    return True",
        "result": "passed",
        "similarities": [
            0.9955615997314453,
            0.9962162375450134,
            0.9960160851478577,
            0.9949553608894348,
            0.9962852001190186,
            0.9945772886276245,
            0.9962278008460999,
            0.9934702515602112,
            0.9931697845458984,
            0.996346652507782,
            0.9960740804672241,
            0.9959728717803955,
            0.9936837553977966,
            0.9969184398651123,
            0.9964087605476379,
            0.9964497089385986,
            0.9946824908256531,
            0.9969907999038696,
            0.9971474409103394,
            0.9960889220237732
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9990957379341125,
        "body": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)",
        "result": "failed: ",
        "similarities": [
            0.9989427328109741,
            0.9989447593688965,
            0.99876868724823,
            0.9990376830101013,
            0.9990376830101013,
            0.9989898204803467,
            0.9990957379341125,
            0.9990957379341125,
            0.9989427328109741,
            0.9990809559822083,
            0.9987612366676331,
            0.9990164041519165,
            0.9989427328109741,
            0.9990957379341125,
            0.9988234639167786,
            0.9989427328109741,
            0.9988921284675598,
            0.9988728761672974,
            0.9990957379341125,
            0.9990164041519165
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9974478483200073,
        "body": "    if len(lst) < 2:\n        return True\n    count = {}\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] == lst[i - 1]:\n            count[lst[i]] = count.get(lst[i], 0) + 1\n            if count[lst[i]] > 1:\n                return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9960333108901978,
            0.9974478483200073,
            0.9959398508071899,
            0.9971555471420288,
            0.9948045015335083,
            0.9961738586425781,
            0.9948045015335083,
            0.9963412880897522,
            0.9971845746040344,
            0.9945132732391357,
            0.9966342449188232,
            0.9963810443878174,
            0.9962136149406433,
            0.9960606098175049,
            0.997225821018219,
            0.995904803276062,
            0.9971700310707092,
            0.9963282346725464,
            0.9960606098175049,
            0.9965932965278625
        ]
    },
    "HumanEval/127": {
        "similarity": 0.999148428440094,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9979091286659241,
            0.999148428440094,
            0.9988701343536377,
            0.9984999299049377,
            0.9991483092308044,
            0.9984999299049377,
            0.9991334676742554,
            0.9984999299049377,
            0.9991483092308044,
            0.9991483092308044,
            0.9991334676742554,
            0.9991334676742554,
            0.9984999299049377,
            0.9979091286659241,
            0.9986461997032166,
            0.9979950785636902,
            0.999148428440094,
            0.999148428440094,
            0.9984999299049377,
            0.999148428440094
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9994691610336304,
        "body": "    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n        \n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product",
        "result": "passed",
        "similarities": [
            0.9994583129882812,
            0.9993067383766174,
            0.9992851614952087,
            0.9994408488273621,
            0.9993393421173096,
            0.9993123412132263,
            0.998966634273529,
            0.9993067383766174,
            0.9993393421173096,
            0.999221682548523,
            0.9994408488273621,
            0.9993360638618469,
            0.9993123412132263,
            0.9993360638618469,
            0.9993360638618469,
            0.999406099319458,
            0.9993393421173096,
            0.9994583129882812,
            0.9994691610336304,
            0.9992851614952087
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9975549578666687,
        "body": "    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n        if steps == k:\n            return [path[:]]\n        paths = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                paths.extend(dfs(nx, ny, path + [grid[nx][ny]], steps + 1))\n        return paths\n    \n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            paths = dfs(i, j, [grid[i][j]], 1)\n            if not min_path or paths[0] < min_path:\n                min_path = paths[0]\n    \n    return min_path",
        "result": "failed: unexpected indent (<string>, line 35)",
        "similarities": [
            0.9965543150901794,
            0.9969636797904968,
            0.9972303509712219,
            0.9964823722839355,
            0.99700927734375,
            0.997207522392273,
            0.9969127178192139,
            0.9975549578666687,
            0.9921118021011353,
            0.9966404438018799,
            0.994032621383667,
            0.9972586631774902,
            0.9925145506858826,
            0.9963547587394714,
            0.9959099292755127,
            0.996927797794342,
            0.9959130883216858,
            0.9951949715614319,
            0.9967077374458313,
            0.9955677390098572
        ]
    },
    "HumanEval/130": {
        "similarity": 0.999082088470459,
        "body": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(1 + i / 2)\n        else:\n            next_value = result[i - 1] + result[i - 2] + result[i + 1]\n            result.append(next_value)\n    return result",
        "result": "failed: list index out of range",
        "similarities": [
            0.9976392388343811,
            0.9990633726119995,
            0.9989179372787476,
            0.9985666871070862,
            0.9984870553016663,
            0.9987519979476929,
            0.9987859129905701,
            0.9982948303222656,
            0.9984070658683777,
            0.9986987113952637,
            0.9983028769493103,
            0.9980555176734924,
            0.998723566532135,
            0.998354971408844,
            0.9988533854484558,
            0.9985643029212952,
            0.9985831379890442,
            0.9988453388214111,
            0.999082088470459,
            0.9989355206489563
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9995888471603394,
        "body": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed",
        "similarities": [
            0.9995888471603394,
            0.9993277192115784,
            0.9995888471603394,
            0.9995888471603394,
            0.9995888471603394,
            0.9987345337867737,
            0.9987345337867737,
            0.9993277192115784,
            0.9995888471603394,
            0.9986532926559448,
            0.9994387626647949,
            0.9986532926559448,
            0.9995888471603394,
            0.9995822906494141,
            0.9995888471603394,
            0.9995822906494141,
            0.9993277192115784,
            0.9993277192115784,
            0.9993277192115784,
            0.9995888471603394
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9993215799331665,
        "body": "    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    return nested and not stack",
        "result": "failed: ",
        "similarities": [
            0.9983292818069458,
            0.9976922869682312,
            0.9993215799331665,
            0.9992178082466125,
            0.9991161227226257,
            0.9990290403366089,
            0.9990882873535156,
            0.9988023638725281,
            0.9993215799331665,
            0.9989413022994995,
            0.9991161227226257,
            0.999149739742279,
            0.999217689037323,
            0.9991071820259094,
            0.9988744854927063,
            0.9991673231124878,
            0.9972070455551147,
            0.9983292818069458,
            0.9990290403366089,
            0.9993215799331665
        ]
    },
    "HumanEval/133": {
        "similarity": 0.999933123588562,
        "body": "import math\n\n    return sum(math.ceil(x) ** 2 for x in lst)",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.999933123588562,
            0.999933123588562,
            0.999933123588562,
            0.9999213218688965,
            0.999933123588562,
            0.999933123588562,
            0.999933123588562,
            0.9996440410614014,
            0.999933123588562,
            0.999933123588562,
            0.999933123588562,
            0.9999213218688965,
            0.999933123588562,
            0.9996659159660339,
            0.999933123588562,
            0.999933123588562,
            0.999933123588562,
            0.9999213218688965,
            0.9996441602706909,
            0.999933123588562
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9976341128349304,
        "body": "    txt = txt.strip()\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')",
        "result": "failed: ",
        "similarities": [
            0.9976341128349304,
            0.9966061115264893,
            0.9966061115264893,
            0.9971166849136353,
            0.9966061115264893,
            0.9976341128349304,
            0.9971206188201904,
            0.996579647064209,
            0.9932734966278076,
            0.9966061115264893,
            0.9953702688217163,
            0.9976341128349304,
            0.9958333373069763,
            0.9958333373069763,
            0.9969434142112732,
            0.9971166849136353,
            0.9969433546066284,
            0.9946428537368774,
            0.9938791990280151,
            0.996579647064209
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9996225237846375,
        "body": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "passed",
        "similarities": [
            0.9996225237846375,
            0.9996225237846375,
            0.9996225237846375,
            0.9996225237846375,
            0.9995131492614746,
            0.9996225237846375,
            0.9994766116142273,
            0.9996225237846375,
            0.9994932413101196,
            0.9996225237846375,
            0.9994932413101196,
            0.9996225237846375,
            0.9995131492614746,
            0.9996225237846375,
            0.9995131492614746,
            0.9996225237846375,
            0.9996225237846375,
            0.9994932413101196,
            0.9995131492614746,
            0.9995131492614746
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9985138773918152,
        "body": "    negative_ints = [x for x in lst if x < 0]\n    positive_ints = [x for x in lst if x > 0]\n    \n    a = max(negative_ints) if negative_ints else None\n    b = min(positive_ints) if positive_ints else None\n    \n    return (a, b)",
        "result": "passed",
        "similarities": [
            0.9975377321243286,
            0.9982243776321411,
            0.9985137581825256,
            0.9984528422355652,
            0.9958170652389526,
            0.9978187084197998,
            0.997616708278656,
            0.9978335499763489,
            0.9981802105903625,
            0.9981802105903625,
            0.9983687400817871,
            0.9984437823295593,
            0.9960532188415527,
            0.9984528422355652,
            0.9985138773918152,
            0.9985138773918152,
            0.997616708278656,
            0.9985137581825256,
            0.9985137581825256,
            0.9971085786819458
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9961747527122498,
        "body": "        if isinstance(val, str):\n            val = val.replace(',', '.')\n            return float(val)\n        return float(val)\n\n    a_val = parse_value(a)\n    b_val = parse_value(b)\n\n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b",
        "result": "failed: unexpected indent (<string>, line 14)",
        "similarities": [
            0.9958524107933044,
            0.9959231019020081,
            0.9871543049812317,
            0.9959349632263184,
            0.9958911538124084,
            0.9950034618377686,
            0.996148943901062,
            0.9949123859405518,
            0.9959443807601929,
            0.9960343241691589,
            0.987848162651062,
            0.9946827292442322,
            0.9803088307380676,
            0.9905683398246765,
            0.9960322976112366,
            0.9946299195289612,
            0.9961747527122498,
            0.988475501537323,
            0.9959231019020081,
            0.996174693107605
        ]
    },
    "HumanEval/138": {
        "similarity": 0.999936044216156,
        "body": "    return n >= 8 and n % 2 == 0",
        "result": "passed",
        "similarities": [
            0.999936044216156,
            0.9992356896400452,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.9995760917663574,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156,
            0.999936044216156
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9972453713417053,
        "body": "    result = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            result *= j\n    return result",
        "result": "passed",
        "similarities": [
            0.9960668683052063,
            0.9960668683052063,
            0.9960668683052063,
            0.9958918690681458,
            0.9962676167488098,
            0.9972453713417053,
            0.9959245920181274,
            0.9972453713417053,
            0.9968187212944031,
            0.9959737658500671,
            0.9971004128456116,
            0.9962676167488098,
            0.9960668683052063,
            0.9962676167488098,
            0.997114896774292,
            0.9962676167488098,
            0.9960668683052063,
            0.9962676167488098,
            0.997114896774292,
            0.9960668683052063
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9861440062522888,
        "body": "    result = []\n    space_count = 0\n\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            result.append(char)\n            space_count = 0\n\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n\n    return ''.join(result)",
        "result": "passed",
        "similarities": [
            0.9860693216323853,
            0.9854736328125,
            0.9668328166007996,
            0.9856340289115906,
            0.9804854393005371,
            0.9860693216323853,
            0.9861440062522888,
            0.9860693216323853,
            0.9814465045928955,
            0.9850587248802185,
            0.9854736328125,
            0.9854347705841064,
            0.9850587248802185,
            0.9630869030952454,
            0.9630869030952454,
            0.9850021004676819,
            0.9861440062522888,
            0.9843184947967529,
            0.9684498310089111,
            0.9824987649917603
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9945679903030396,
        "body": "import re\n\n    pattern = r'^[a-zA-Z][^\\d]*\\d{0,3}[^\\d]*\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9945679903030396,
            0.9905178546905518,
            0.9945679903030396,
            0.9861897230148315,
            0.9942654967308044,
            0.9943825602531433,
            0.9945679903030396,
            0.9906548857688904,
            0.9945679903030396,
            0.9907125234603882,
            0.9945679903030396,
            0.9945679903030396,
            0.9945679903030396,
            0.9877710938453674,
            0.9943825602531433,
            0.9872442483901978,
            0.9945679903030396,
            0.9945679903030396,
            0.9945679903030396,
            0.9908426403999329
        ]
    },
    "HumanEval/142": {
        "similarity": 0.996683657169342,
        "body": "    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",
        "result": "passed",
        "similarities": [
            0.996683657169342,
            0.996683657169342,
            0.9953039884567261,
            0.996683657169342,
            0.9966019988059998,
            0.985268235206604,
            0.9965880513191223,
            0.9966019988059998,
            0.996683657169342,
            0.9964206218719482,
            0.996683657169342,
            0.9964206218719482,
            0.9887643456459045,
            0.996683657169342,
            0.9887643456459045,
            0.9953039884567261,
            0.9864369630813599,
            0.996683657169342,
            0.996683657169342,
            0.9966019988059998
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9976648092269897,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9955970644950867,
            0.9955970644950867,
            0.98869788646698,
            0.9976648092269897,
            0.997247576713562,
            0.9955971240997314,
            0.9945838451385498,
            0.9976648092269897,
            0.9976648092269897,
            0.997247576713562,
            0.9970090985298157,
            0.9976648092269897,
            0.9956531524658203,
            0.9976648092269897,
            0.9972701072692871,
            0.9976648092269897,
            0.9976648092269897,
            0.9956531524658203,
            0.9976648092269897,
            0.997247576713562
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9975214600563049,
        "body": "    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    result = (num_x * num_n) % (denom_x * denom_n) == 0\n    return result",
        "result": "passed",
        "similarities": [
            0.9973238706588745,
            0.9953896403312683,
            0.9933118224143982,
            0.9974715709686279,
            0.9974715709686279,
            0.9966882467269897,
            0.9968115091323853,
            0.9975214600563049,
            0.9974715709686279,
            0.9971602559089661,
            0.9953896403312683,
            0.9933118224143982,
            0.9966882467269897,
            0.9933118224143982,
            0.9973995089530945,
            0.9973238706588745,
            0.9933118224143982,
            0.9973238706588745,
            0.9953452944755554,
            0.9970148801803589
        ]
    },
    "HumanEval/145": {
        "similarity": 1.0,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/146": {
        "similarity": 0.99605792760849,
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9948161244392395,
            0.9951919913291931,
            0.9955695271492004,
            0.9923507571220398,
            0.99605792760849,
            0.99605792760849,
            0.9951919913291931,
            0.9946361184120178,
            0.9955695271492004,
            0.9887417554855347,
            0.99605792760849,
            0.9931548237800598,
            0.9887417554855347,
            0.9955695271492004,
            0.9887417554855347,
            0.9941328763961792,
            0.9956380128860474,
            0.9887417554855347,
            0.9951382875442505,
            0.9931415915489197
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9999843239784241,
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9999843239784241,
            0.9999843239784241,
            0.9998723864555359,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9998140931129456,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241,
            0.9999843239784241
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9980477094650269,
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    start, end = sorted([idx1, idx2])\n    return tuple(planets[start + 1:end])",
        "result": "passed",
        "similarities": [
            0.9978657960891724,
            0.9970037341117859,
            0.9974802732467651,
            0.9957907795906067,
            0.9979925751686096,
            0.9980477094650269,
            0.9970037341117859,
            0.997803270816803,
            0.9969538450241089,
            0.9972524046897888,
            0.9979925751686096,
            0.9972524046897888,
            0.9964693784713745,
            0.9964693784713745,
            0.9960168600082397,
            0.9962375164031982,
            0.9973543286323547,
            0.9967024922370911,
            0.9974965453147888,
            0.9960168600082397
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9984247088432312,
        "body": "    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "similarities": [
            0.9976212382316589,
            0.9976212382316589,
            0.9978026151657104,
            0.9965271353721619,
            0.9984247088432312,
            0.9980009198188782,
            0.9978026151657104,
            0.9984247088432312,
            0.9984247088432312,
            0.9984247088432312,
            0.9984247088432312,
            0.9965271353721619,
            0.9984247088432312,
            0.9984247088432312,
            0.9984247088432312,
            0.9976212382316589,
            0.9976212382316589,
            0.9984247088432312,
            0.9984247088432312,
            0.9984247088432312
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9997207522392273,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    return x if is_prime(n) else y",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377,
            0.9990269541740417,
            0.999619722366333,
            0.9990269541740417,
            0.9997207522392273,
            0.9997207522392273,
            0.9990269541740417,
            0.9992191791534424,
            0.9997206330299377,
            0.9997207522392273,
            0.9990269541740417,
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377,
            0.9997206330299377
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9999715089797974,
        "body": "    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)",
        "result": "passed",
        "similarities": [
            0.9999715089797974,
            0.9999715089797974,
            0.9999715089797974,
            0.999916672706604,
            0.999916672706604,
            0.9999715089797974,
            0.9999715089797974,
            0.9998990297317505,
            0.9999715089797974,
            0.9999715089797974,
            0.9999166131019592,
            0.9999715089797974,
            0.9999715089797974,
            0.9999715089797974,
            0.9999715089797974,
            0.9999715089797974,
            0.9998990297317505,
            0.9998990297317505,
            0.9999715089797974,
            0.9999715089797974
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9999998807907104,
        "body": "    return [abs(g - s) for g, s in zip(guess, game)]",
        "result": "passed",
        "similarities": [
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104,
            0.9999998807907104
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9996336698532104,
        "body": "    strongest_extension = ''\n    highest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        \n        if strength > highest_strength or (strength == highest_strength and not strongest_extension):\n            strongest_extension = extension\n            highest_strength = strength\n    \n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "similarities": [
            0.9994356036186218,
            0.9994451403617859,
            0.9994779825210571,
            0.9994508028030396,
            0.9994650483131409,
            0.9996123313903809,
            0.9996123313903809,
            0.9990812540054321,
            0.9994451403617859,
            0.9996175169944763,
            0.9994356036186218,
            0.9996334910392761,
            0.99936443567276,
            0.9996334910392761,
            0.9995999932289124,
            0.9995999932289124,
            0.9993647336959839,
            0.9996175169944763,
            0.9994452595710754,
            0.9996336698532104
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9951750040054321,
        "body": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9929589629173279,
            0.9929589629173279,
            0.9929590821266174,
            0.9917853474617004,
            0.9895220398902893,
            0.9951750040054321,
            0.9951750040054321,
            0.9944560527801514,
            0.9929589629173279,
            0.9929589629173279,
            0.9938914775848389,
            0.9917853474617004,
            0.9929589629173279,
            0.9951750040054321,
            0.9929589629173279,
            0.9929589629173279,
            0.9917853474617004,
            0.9917853474617004,
            0.9951750040054321,
            0.9951750040054321
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9970920085906982,
        "body": "    num = abs(num)\n    even_count = sum(1 for digit in str(num) if int(digit) % 2 == 0)\n    odd_count = len(str(num)) - even_count\n    return (even_count, odd_count)",
        "result": "passed",
        "similarities": [
            0.9949597716331482,
            0.9970920085906982,
            0.9949597716331482,
            0.98846435546875,
            0.9964708089828491,
            0.9896002411842346,
            0.9949597716331482,
            0.98846435546875,
            0.9964256286621094,
            0.996631920337677,
            0.9964708089828491,
            0.9923091530799866,
            0.996631920337677,
            0.9970920085906982,
            0.9964708089828491,
            0.996631920337677,
            0.9970920085906982,
            0.9965226054191589,
            0.9966946840286255,
            0.996631920337677
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9969172477722168,
        "body": "    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral",
        "result": "passed",
        "similarities": [
            0.9965783357620239,
            0.9969172477722168,
            0.989102840423584,
            0.9968923330307007,
            0.9969172477722168,
            0.989102840423584,
            0.9965589642524719,
            0.9969172477722168,
            0.9968923330307007,
            0.9968395233154297,
            0.9969172477722168,
            0.9965914487838745,
            0.9857107400894165,
            0.9968395233154297,
            0.9969172477722168,
            0.9968923330307007,
            0.9969172477722168,
            0.9965589642524719,
            0.9932102560997009,
            0.9909095764160156
        ]
    },
    "HumanEval/157": {
        "similarity": 1.0,
        "body": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9994339346885681,
        "body": "    if not words:\n        return \"\"\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word",
        "result": "passed",
        "similarities": [
            0.9992194175720215,
            0.9994339346885681,
            0.9993971586227417,
            0.9989756345748901,
            0.9992977976799011,
            0.9993597269058228,
            0.99931800365448,
            0.9994339346885681,
            0.9994339346885681,
            0.9994339346885681,
            0.9989756345748901,
            0.9982305765151978,
            0.9994339346885681,
            0.9994339346885681,
            0.9993927478790283,
            0.9989756345748901,
            0.9994339346885681,
            0.9993971586227417,
            0.9989756345748901,
            0.9976240396499634
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9991708397865295,
        "body": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed",
        "similarities": [
            0.9991708397865295,
            0.9985779523849487,
            0.9977331757545471,
            0.9990366101264954,
            0.9991708397865295,
            0.9991708397865295,
            0.9991708397865295,
            0.9991708397865295,
            0.9990366101264954,
            0.9959208965301514,
            0.9991708397865295,
            0.9989700317382812,
            0.9991708397865295,
            0.9991708397865295,
            0.9991708397865295,
            0.9991708397865295,
            0.9977331757545471,
            0.9991708397865295,
            0.9959208965301514,
            0.9991708397865295
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9918586611747742,
        "body": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)",
        "result": "passed",
        "similarities": [
            0.991696834564209,
            0.9915916919708252,
            0.991696834564209,
            0.991696834564209,
            0.991696834564209,
            0.991696834564209,
            0.9814983010292053,
            0.991696834564209,
            0.9918586611747742,
            0.9908681511878967,
            0.9809658527374268,
            0.9918586611747742,
            0.9809658527374268,
            0.9915916919708252,
            0.9809658527374268,
            0.9809658527374268,
            0.991696834564209,
            0.991696834564209,
            0.991696834564209,
            0.9814983010292053
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9992084503173828,
        "body": "    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]",
        "result": "passed",
        "similarities": [
            0.9990729093551636,
            0.9992084503173828,
            0.9992084503173828,
            0.9985108971595764,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9979358315467834,
            0.9979358315467834,
            0.9992084503173828,
            0.9978696703910828,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9992084503173828,
            0.9979358315467834,
            0.9979358315467834
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9992468953132629,
        "body": "import hashlib\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9991171956062317,
            0.9991171956062317,
            0.9992468953132629,
            0.9987717866897583,
            0.9991868734359741,
            0.9991171956062317,
            0.9991868734359741,
            0.9987717866897583,
            0.9985381960868835,
            0.9987717866897583,
            0.9990537762641907,
            0.9991171956062317,
            0.9991170763969421,
            0.9992468953132629,
            0.9986920952796936,
            0.9987717866897583,
            0.9987717866897583,
            0.9991171956062317,
            0.9992468953132629,
            0.9987717866897583
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9986119866371155,
        "body": "    start = min(a, b)\n    end = max(a, b)\n    return [x for x in range(start, end + 1) if x % 2 == 0]",
        "result": "failed: Test 1",
        "similarities": [
            0.9984560608863831,
            0.9986118674278259,
            0.9985662698745728,
            0.9984560608863831,
            0.9985662698745728,
            0.9986118674278259,
            0.9984560608863831,
            0.9985662698745728,
            0.9945778250694275,
            0.9986118674278259,
            0.9984561800956726,
            0.9945778250694275,
            0.9986119866371155,
            0.9986119866371155,
            0.9945778250694275,
            0.9986119866371155,
            0.9922363758087158,
            0.9985662698745728,
            0.9984560608863831,
            0.9984560608863831
        ]
    }
}