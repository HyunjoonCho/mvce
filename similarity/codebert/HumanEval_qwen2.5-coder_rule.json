{
    "HumanEval/0": {
        "similarity": 0.9990128874778748,
        "body": "for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9990128874778748,
            0.9990128874778748,
            0.9990128874778748,
            0.9990128874778748,
            0.9988001585006714,
            0.9988001585006714,
            0.9988001585006714,
            0.9990128874778748,
            0.9971293210983276,
            0.9990128874778748,
            0.9990128874778748,
            0.9975839257240295,
            0.9990128874778748,
            0.9988001585006714,
            0.9988001585006714,
            0.9990128874778748,
            0.9988001585006714,
            0.9990128874778748,
            0.9990128874778748,
            0.9988001585006714
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9979368448257446,
        "body": "    result = []\n    current_group = \"\"\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result",
        "result": "passed",
        "similarities": [
            0.9970749616622925,
            0.997846782207489,
            0.9978525042533875,
            0.9967851042747498,
            0.9979368448257446,
            0.9964417815208435,
            0.9975836873054504,
            0.9976328611373901,
            0.9977737069129944,
            0.997218668460846,
            0.9955049157142639,
            0.9973475933074951,
            0.9978344440460205,
            0.9977689385414124,
            0.9962987303733826,
            0.9970223307609558,
            0.9960178732872009,
            0.9968416094779968,
            0.9971634745597839,
            0.9965860247612
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9946130514144897,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            0.9934922456741333,
            0.9934922456741333,
            0.9902074933052063,
            0.9946130514144897,
            0.9946130514144897,
            0.9934922456741333,
            0.9946130514144897,
            0.9946130514144897,
            0.991907000541687,
            0.9934922456741333,
            0.9946130514144897,
            0.9946130514144897,
            0.9934922456741333,
            0.9934922456741333,
            0.9934922456741333,
            0.9946130514144897,
            0.9934922456741333,
            0.9934922456741333,
            0.9946130514144897,
            0.9946130514144897
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9994068145751953,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953,
            0.9975022673606873,
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953,
            0.9975022673606873,
            0.9983828663825989,
            0.9983828663825989,
            0.9983828663825989,
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953,
            0.9983828663825989,
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953,
            0.9994068145751953
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9961298704147339,
        "body": "    total = sum(numbers)\n    count = len(numbers)\n    mean = total / count\n    mad = sum(abs(x - mean) for x in numbers) / count\n    return mad",
        "result": "passed",
        "similarities": [
            0.9960805177688599,
            0.9960805177688599,
            0.9947832226753235,
            0.9936802387237549,
            0.9918771386146545,
            0.9961298704147339,
            0.9959118366241455,
            0.9957807660102844,
            0.9924904704093933,
            0.9960805177688599,
            0.9944241046905518,
            0.9953998923301697,
            0.9960805177688599,
            0.9899701476097107,
            0.9929301738739014,
            0.9959118366241455,
            0.9958524107933044,
            0.9961298704147339,
            0.9960805177688599,
            0.9867192506790161
        ]
    },
    "HumanEval/5": {
        "similarity": 0.998866856098175,
        "body": "    result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result",
        "result": "failed: name 'delimiter' is not defined",
        "similarities": [
            0.9988551139831543,
            0.9974183440208435,
            0.9988351464271545,
            0.9988551139831543,
            0.9988351464271545,
            0.9987969994544983,
            0.9987969994544983,
            0.9958887696266174,
            0.9967583417892456,
            0.9988351464271545,
            0.9921778440475464,
            0.9988551139831543,
            0.9988551139831543,
            0.9988351464271545,
            0.9951549172401428,
            0.998866856098175,
            0.998866856098175,
            0.9988551139831543,
            0.9988551139831543,
            0.9988351464271545
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9995907545089722,
        "body": "    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result",
        "result": "passed",
        "similarities": [
            0.9995452761650085,
            0.999586820602417,
            0.9992039203643799,
            0.9994810223579407,
            0.999586820602417,
            0.9989351034164429,
            0.9994810223579407,
            0.999586820602417,
            0.9994712471961975,
            0.9995907545089722,
            0.999586820602417,
            0.9994685649871826,
            0.9995205402374268,
            0.999586820602417,
            0.9994685649871826,
            0.9995822906494141,
            0.9995822906494141,
            0.9994810223579407,
            0.999586820602417,
            0.9995907545089722
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9991428852081299,
        "body": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "passed",
        "similarities": [
            0.9990449547767639,
            0.9990449547767639,
            0.9991428852081299,
            0.9990449547767639,
            0.9990449547767639,
            0.9990449547767639,
            0.9959394335746765,
            0.9990449547767639,
            0.9959395527839661,
            0.9990449547767639,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9991428852081299,
            0.9990449547767639
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9984707236289978,
        "body": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)",
        "result": "passed",
        "similarities": [
            0.9982101321220398,
            0.998212993144989,
            0.9984707236289978,
            0.99825519323349,
            0.993556559085846,
            0.9984441995620728,
            0.9977306723594666,
            0.9984441995620728,
            0.9984707236289978,
            0.9984441995620728,
            0.9984441995620728,
            0.9984441995620728,
            0.9930204153060913,
            0.9982476830482483,
            0.9975575804710388,
            0.9982476830482483,
            0.9982476830482483,
            0.9982101321220398,
            0.9984441995620728,
            0.9982101321220398
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9985461235046387,
        "body": "    result = []\n    current_max = float('-inf')\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    return result",
        "result": "passed",
        "similarities": [
            0.9982609152793884,
            0.9957410097122192,
            0.9985461235046387,
            0.9981284141540527,
            0.9975522756576538,
            0.9975666403770447,
            0.9984602928161621,
            0.9960929751396179,
            0.9985461235046387,
            0.9983978271484375,
            0.9985461235046387,
            0.9983195066452026,
            0.9978317618370056,
            0.9956914782524109,
            0.9985461235046387,
            0.9985461235046387,
            0.9975330829620361,
            0.9985461235046387,
            0.9950558543205261,
            0.9952474236488342
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9940627217292786,
        "body": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    length = len(string)\n    for i in range(length):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string",
        "result": "passed",
        "similarities": [
            0.9875392913818359,
            0.993519127368927,
            0.9857068657875061,
            0.9934589862823486,
            0.9935950040817261,
            0.9901725649833679,
            0.9903997182846069,
            0.9930235147476196,
            0.993782639503479,
            0.992667555809021,
            0.9940627217292786,
            0.993519127368927,
            0.9926624298095703,
            0.9932507276535034,
            0.9928793907165527,
            0.9824540019035339,
            0.9906740784645081,
            0.9854318499565125,
            0.9939720034599304,
            0.9904826283454895
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9928223490715027,
        "body": "    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n    return ''.join(result)",
        "result": "passed",
        "similarities": [
            0.9812685251235962,
            0.9751928448677063,
            0.9866927266120911,
            0.9928223490715027,
            0.9905763268470764,
            0.9926539063453674,
            0.9877687096595764,
            0.986870527267456,
            0.986870527267456,
            0.9926539063453674,
            0.9893197417259216,
            0.9893197417259216,
            0.9928223490715027,
            0.9918493032455444,
            0.9918714761734009,
            0.9878660440444946,
            0.9893197417259216,
            0.9920947551727295,
            0.9893197417259216,
            0.9893197417259216
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9973363280296326,
        "body": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "result": "passed",
        "similarities": [
            0.9966456890106201,
            0.9953653216362,
            0.9912153482437134,
            0.9973226189613342,
            0.9973226189613342,
            0.9963656067848206,
            0.9964256286621094,
            0.9973363280296326,
            0.9963628649711609,
            0.9963836669921875,
            0.9955425262451172,
            0.9965711832046509,
            0.9973226189613342,
            0.9973363280296326,
            0.9913252592086792,
            0.9912153482437134,
            0.996762216091156,
            0.9970378875732422,
            0.9964954853057861,
            0.9882497191429138
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9976309537887573,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a",
        "result": "passed",
        "similarities": [
            0.9925647377967834,
            0.9951784014701843,
            0.9976309537887573,
            0.9976309537887573,
            0.9971545338630676,
            0.9955865144729614,
            0.9976309537887573,
            0.9951784014701843,
            0.9976308941841125,
            0.9976308941841125,
            0.9976308941841125,
            0.9955865144729614,
            0.9952207803726196,
            0.9976308941841125,
            0.9963362812995911,
            0.9976308941841125,
            0.9971979856491089,
            0.9928920269012451,
            0.996296226978302,
            0.9976309537887573
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9996275901794434,
        "body": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "result": "passed",
        "similarities": [
            0.9979466795921326,
            0.9996275901794434,
            0.9996275901794434,
            0.9988646507263184,
            0.9996275901794434,
            0.9994292855262756,
            0.9996275901794434,
            0.9996275901794434,
            0.9994393587112427,
            0.9996275901794434,
            0.9996275901794434,
            0.9996275901794434,
            0.9996275901794434,
            0.9988645315170288,
            0.9996275901794434,
            0.9994393587112427,
            0.9996275901794434,
            0.9996275901794434,
            0.9994292855262756,
            0.9988646507263184
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9921022057533264,
        "body": "    result = ''\n    for i in range(n + 1):\n        if i > 0:\n            result += ' '\n        result += str(i)\n    return result",
        "result": "passed",
        "similarities": [
            0.9910237193107605,
            0.9921022057533264,
            0.9914235472679138,
            0.990763247013092,
            0.9912135601043701,
            0.990443766117096,
            0.9910237193107605,
            0.9910284280776978,
            0.9910284280776978,
            0.9897290468215942,
            0.990763247013092,
            0.9921022057533264,
            0.990763247013092,
            0.990443766117096,
            0.9897290468215942,
            0.990763247013092,
            0.9897290468215942,
            0.9910237193107605,
            0.9897290468215942,
            0.9916210174560547
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9979425072669983,
        "body": "    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "result": "passed",
        "similarities": [
            0.9979423880577087,
            0.9979423880577087,
            0.9937077760696411,
            0.996537446975708,
            0.9979425072669983,
            0.9882646203041077,
            0.9979425072669983,
            0.9979050159454346,
            0.9979423880577087,
            0.9979423880577087,
            0.9979423880577087,
            0.990507960319519,
            0.9979423880577087,
            0.9979423880577087,
            0.9979050159454346,
            0.996356189250946,
            0.9979423880577087,
            0.9972829222679138,
            0.996537446975708,
            0.9959784150123596
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9942992329597473,
        "body": "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        if note in beats:\n            result.append(beats[note])\n    return result",
        "result": "passed",
        "similarities": [
            0.9940229654312134,
            0.9939495921134949,
            0.9925675988197327,
            0.9916698932647705,
            0.9929897785186768,
            0.9917418956756592,
            0.9917197227478027,
            0.9940932393074036,
            0.9936778545379639,
            0.967303454875946,
            0.9927240610122681,
            0.9939495921134949,
            0.9743809103965759,
            0.9938184022903442,
            0.9927611351013184,
            0.9940229654312134,
            0.9917418956756592,
            0.9788581728935242,
            0.9942992329597473,
            0.9939573407173157
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9983305931091309,
        "body": "    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9965842366218567,
            0.9983305931091309,
            0.998315691947937,
            0.9965842366218567,
            0.9965842366218567,
            0.998315691947937,
            0.9982225298881531,
            0.998315691947937,
            0.9965842366218567,
            0.9965842366218567,
            0.998315691947937,
            0.998315691947937,
            0.998315691947937,
            0.998315691947937,
            0.998315691947937,
            0.9975383281707764,
            0.9955955147743225,
            0.9975383281707764,
            0.9976884722709656,
            0.9975383281707764
        ]
    },
    "HumanEval/19": {
        "similarity": 0.988918125629425,
        "body": "    num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    \n    words = numbers.split()\n    sorted_nums = sorted(words, key=lambda word: num_map[word])\n    return ' '.join(sorted_nums)",
        "result": "passed",
        "similarities": [
            0.9748497009277344,
            0.9888399243354797,
            0.9625701904296875,
            0.9873384237289429,
            0.9872737526893616,
            0.9834671020507812,
            0.988918125629425,
            0.9819025993347168,
            0.986173152923584,
            0.9886904358863831,
            0.9683460593223572,
            0.9718117117881775,
            0.984421968460083,
            0.9886735677719116,
            0.9885255694389343,
            0.9752930402755737,
            0.9882570505142212,
            0.9858561158180237,
            0.9870179891586304,
            0.9876274466514587
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9989250898361206,
        "body": "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair",
        "result": "passed",
        "similarities": [
            0.9975565671920776,
            0.9989029765129089,
            0.9979963898658752,
            0.9987257719039917,
            0.9988813996315002,
            0.9977889060974121,
            0.9979510307312012,
            0.9983518719673157,
            0.9975385069847107,
            0.9989250898361206,
            0.9985324740409851,
            0.998897135257721,
            0.998897135257721,
            0.998788058757782,
            0.9989250898361206,
            0.998911440372467,
            0.9985885620117188,
            0.9984566569328308,
            0.9979963898658752,
            0.9989216327667236
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9981497526168823,
        "body": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]",
        "result": "passed",
        "similarities": [
            0.9981497526168823,
            0.9980483651161194,
            0.9981497526168823,
            0.9981465935707092,
            0.9980483651161194,
            0.9980812072753906,
            0.9981497526168823,
            0.9981497526168823,
            0.9981497526168823,
            0.9981497526168823,
            0.9981465935707092,
            0.9848538637161255,
            0.9979668855667114,
            0.9980483055114746,
            0.9980441927909851,
            0.9847036600112915,
            0.9979695081710815,
            0.9981497526168823,
            0.9981497526168823,
            0.9981497526168823
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9995128512382507,
        "body": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "result": "passed",
        "similarities": [
            0.9995128512382507,
            0.9995128512382507,
            0.9995128512382507,
            0.9995128512382507,
            0.9995128512382507,
            0.9995128512382507,
            0.9994135499000549,
            0.9968653321266174,
            0.9994135499000549,
            0.9994135499000549,
            0.999458909034729,
            0.9994135499000549,
            0.9995128512382507,
            0.9994135499000549,
            0.9995128512382507,
            0.999458909034729,
            0.9964045286178589,
            0.9994135499000549,
            0.9995128512382507,
            0.999458909034729
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9985979795455933,
        "body": "    count = 0\n    for char in string:\n        count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9972811341285706,
            0.9985979795455933,
            0.9985979795455933,
            0.9972811341285706,
            0.9972811341285706,
            0.9968190789222717,
            0.996897280216217,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9985979795455933,
            0.9972811341285706,
            0.9985979795455933,
            0.9970647096633911,
            0.9985979795455933
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9995713829994202,
        "body": "for i in range(n-1, 0, -1):\n    if n % i == 0:\n        return i",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9995708465576172,
            0.9992974996566772,
            0.9993079304695129,
            0.9991406798362732,
            0.9995713829994202,
            0.9993079304695129,
            0.9993079304695129,
            0.9992974996566772,
            0.9992974996566772,
            0.9995370507240295,
            0.9995713829994202,
            0.9993079304695129,
            0.9995708465576172,
            0.999256432056427,
            0.9995708465576172,
            0.9995713829994202,
            0.9992974996566772,
            0.9995370507240295,
            0.9993079304695129,
            0.9995370507240295
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9972080588340759,
        "body": "    factors = []\n    # Start with smallest prime number\n    divisor = 2\n    while n >= divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors",
        "result": "passed",
        "similarities": [
            0.9962684512138367,
            0.9964326620101929,
            0.9955899119377136,
            0.99698406457901,
            0.9913458824157715,
            0.9963788390159607,
            0.994576096534729,
            0.9963788390159607,
            0.9971961975097656,
            0.9959241151809692,
            0.9971961975097656,
            0.9971961975097656,
            0.9962996244430542,
            0.9970148801803589,
            0.990966796875,
            0.9971961975097656,
            0.9971099495887756,
            0.9908835887908936,
            0.9972080588340759,
            0.9966220855712891
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9986199736595154,
        "body": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.991347074508667,
            0.9986199736595154,
            0.9985625743865967,
            0.9986199736595154,
            0.9953215718269348,
            0.9972972869873047,
            0.9986199736595154,
            0.9959375262260437,
            0.9986199736595154,
            0.9986199736595154,
            0.9976900219917297,
            0.9986199736595154,
            0.9934560060501099,
            0.9986199736595154,
            0.9986199736595154,
            0.9986199736595154,
            0.9986199736595154,
            0.9976230263710022,
            0.9984930157661438,
            0.9985761046409607
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9931241273880005,
        "body": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "result": "passed",
        "similarities": [
            0.9839450716972351,
            0.989589512348175,
            0.9931241273880005,
            0.9911764860153198,
            0.9929884076118469,
            0.9931241273880005,
            0.9928163290023804,
            0.9929378032684326,
            0.9815421104431152,
            0.9839450716972351,
            0.9930869936943054,
            0.9931241273880005,
            0.9839450716972351,
            0.9880871176719666,
            0.992072343826294,
            0.9930868744850159,
            0.9792104959487915,
            0.9929884076118469,
            0.9929378032684326,
            0.9911764860153198
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9996982216835022,
        "body": "result = ''\nfor s in strings:\n    result += s\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9996982216835022,
            0.9995657205581665,
            0.9996103048324585,
            0.9996548891067505,
            0.9996103048324585,
            0.9996982216835022,
            0.9996982216835022,
            0.9996548891067505,
            0.9995657205581665,
            0.9954922199249268,
            0.9996982216835022,
            0.9996103048324585,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022,
            0.9996982216835022
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9988987445831299,
        "body": "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result",
        "result": "passed",
        "similarities": [
            0.9971398115158081,
            0.998874843120575,
            0.9988365173339844,
            0.998874843120575,
            0.998874843120575,
            0.9988365173339844,
            0.9988986849784851,
            0.9988365173339844,
            0.9988986849784851,
            0.9988365173339844,
            0.9988365173339844,
            0.9971243143081665,
            0.9971398115158081,
            0.9971398115158081,
            0.9988365173339844,
            0.9942437410354614,
            0.9988987445831299,
            0.998874843120575,
            0.9988365173339844,
            0.9988365173339844
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9955147504806519,
        "body": "    pos_nums = []\n    for num in l:\n        if num > 0:\n            pos_nums.append(num)\n    return pos_nums",
        "result": "passed",
        "similarities": [
            0.9952059388160706,
            0.9955147504806519,
            0.9945964813232422,
            0.9953854084014893,
            0.9951967000961304,
            0.9953854084014893,
            0.9954670667648315,
            0.9953854084014893,
            0.9954670667648315,
            0.9954670667648315,
            0.9875544309616089,
            0.9953145384788513,
            0.9951967000961304,
            0.9875544309616089,
            0.9887491464614868,
            0.9955147504806519,
            0.9875544309616089,
            0.9953854084014893,
            0.98846435546875,
            0.9953854084014893
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9997835755348206,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9991256594657898,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9975804090499878,
            0.9991256594657898,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206,
            0.9997835755348206
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9843716025352478,
        "body": "    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"List must have an even number of coefficients and a non-zero last coefficient\")\n    \n    for i in range(-10, 11):\n        if poly(xs, i) == 0:\n            return i",
        "result": "failed: must be real number, not NoneType",
        "similarities": [
            0.9694778323173523,
            0.9745690226554871,
            0.9842015504837036,
            0.9775386452674866,
            0.966533362865448,
            0.9632405638694763,
            0.9831776022911072,
            0.9803544878959656,
            0.9669026136398315,
            0.9491305351257324,
            0.9775924682617188,
            0.969399094581604,
            0.9734536409378052,
            0.982448399066925,
            0.9768105745315552,
            0.9843716025352478,
            0.9770808815956116,
            0.9790822267532349,
            0.9818851947784424,
            0.9613045454025269
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9954716563224792,
        "body": "    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_divisible_indices = sorted([l[i] for i in indices_divisible_by_three])\n    \n    result = l[:]\n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = values_at_divisible_indices[sorted_index]\n            sorted_index += 1\n    \n    return result",
        "result": "passed",
        "similarities": [
            0.9926033020019531,
            0.9901396036148071,
            0.9859752655029297,
            0.9925472736358643,
            0.9954103231430054,
            0.9929602742195129,
            0.993925929069519,
            0.9943241477012634,
            0.9952599406242371,
            0.9944255352020264,
            0.9953325986862183,
            0.9885859489440918,
            0.9952974915504456,
            0.9954716563224792,
            0.9944223165512085,
            0.994700014591217,
            0.9949349164962769,
            0.9823838472366333,
            0.995243489742279,
            0.9934276938438416
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9902336001396179,
        "body": "    sorted_set = sorted(set(l))\n    return sorted_set",
        "result": "passed",
        "similarities": [
            0.9863805174827576,
            0.9822980165481567,
            0.9861017465591431,
            0.9863805174827576,
            0.9822980165481567,
            0.9842557311058044,
            0.9829505085945129,
            0.9863805174827576,
            0.9877671599388123,
            0.9902336001396179,
            0.9863805174827576,
            0.9822980165481567,
            0.9822980165481567,
            0.9829505085945129,
            0.9863805174827576,
            0.9863805174827576,
            0.9863805174827576,
            0.9900440573692322,
            0.9842557311058044,
            0.9863805174827576
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9966940879821777,
        "body": "    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val",
        "result": "passed",
        "similarities": [
            0.9966940879821777,
            0.9962511658668518,
            0.9961975812911987,
            0.9931038618087769,
            0.9540629982948303,
            0.9961975812911987,
            0.9963483214378357,
            0.9965683817863464,
            0.9966549277305603,
            0.9959684610366821,
            0.9959684610366821,
            0.9966940879821777,
            0.9957578778266907,
            0.9966549277305603,
            0.9966095685958862,
            0.9965683817863464,
            0.9961975812911987,
            0.9933260679244995,
            0.9959983825683594,
            0.9966549277305603
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9994586110115051,
        "body": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed",
        "similarities": [
            0.9994586110115051,
            0.9994586110115051,
            0.9964781403541565,
            0.9994160532951355,
            0.9950304627418518,
            0.9994584918022156,
            0.9994584918022156,
            0.9994584918022156,
            0.9994160532951355,
            0.9994160532951355,
            0.9994584918022156,
            0.9994584918022156,
            0.9994584918022156,
            0.9994584918022156,
            0.9994584918022156,
            0.9983717203140259,
            0.9994160532951355,
            0.9994586110115051,
            0.9994160532951355,
            0.9994584918022156
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9967151284217834,
        "body": "    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result",
        "result": "passed",
        "similarities": [
            0.9821656942367554,
            0.9954753518104553,
            0.9957628846168518,
            0.9950737357139587,
            0.9946564435958862,
            0.9942120909690857,
            0.9967151284217834,
            0.9941922426223755,
            0.9946332573890686,
            0.9943400025367737,
            0.9948134422302246,
            0.9920846819877625,
            0.9892072081565857,
            0.9930802583694458,
            0.9965337514877319,
            0.9960744976997375,
            0.9942916035652161,
            0.9957401156425476,
            0.9965123534202576,
            0.9955492615699768
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9953001141548157,
        "body": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed",
        "similarities": [
            0.9953001141548157,
            0.9901201128959656,
            0.9953001141548157,
            0.992976725101471,
            0.992976725101471,
            0.9909045696258545,
            0.9953001141548157,
            0.9912000894546509,
            0.992976725101471,
            0.9901200532913208,
            0.992976725101471,
            0.992976725101471,
            0.992976725101471,
            0.9897308349609375,
            0.992976725101471,
            0.992976725101471,
            0.9909045696258545,
            0.9901201128959656,
            0.992976725101471,
            0.9953001141548157
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9991593956947327,
        "body": "from math import sqrt\n\n    if num <= 1:\n        return False\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    fib_1, fib_2 = 0, 1\n    count = 0\n    while True:\n        fib_next = fib_1 + fib_2\n        if is_prime(fib_next):\n            count += 1\n            if count == n:\n                return fib_next\n        fib_1, fib_2 = fib_2, fib_next",
        "result": "failed: unexpected indent (<string>, line 19)",
        "similarities": [
            0.9987899661064148,
            0.9990782737731934,
            0.9986171722412109,
            0.9986676573753357,
            0.9990872740745544,
            0.9984305500984192,
            0.9990545511245728,
            0.9982101321220398,
            0.9988768696784973,
            0.9982524514198303,
            0.9991535544395447,
            0.9990605711936951,
            0.9991421103477478,
            0.9989354014396667,
            0.9990730285644531,
            0.9991593956947327,
            0.999041736125946,
            0.9986696839332581,
            0.9984143972396851,
            0.9990137815475464
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9971032738685608,
        "body": "    length = len(l)\n    for i in range(length - 2):\n        for j in range(i + 1, length - 1):\n            for k in range(j + 1, length):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9964045286178589,
            0.9967092275619507,
            0.9967092275619507,
            0.9970829486846924,
            0.9970829486846924,
            0.9914270639419556,
            0.9964045286178589,
            0.9967091083526611,
            0.9967091083526611,
            0.9970829486846924,
            0.9915139079093933,
            0.9964045286178589,
            0.9967091083526611,
            0.9970829486846924,
            0.9971032738685608,
            0.9964045286178589,
            0.9936695098876953,
            0.9964045286178589,
            0.9912239909172058,
            0.9932853579521179
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9998698234558105,
        "body": "    return n * n",
        "result": "passed",
        "similarities": [
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9992616772651672,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9998698234558105,
            0.9992616772651672,
            0.9998698234558105,
            0.9992616772651672,
            0.9998698234558105,
            0.9998698234558105
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9981692433357239,
        "body": "for i in range(len(l)):\n    l[i] += 1\nreturn l",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9981692433357239,
            0.9981692433357239,
            0.9981692433357239,
            0.9964874982833862,
            0.9977403283119202,
            0.9981692433357239,
            0.9981692433357239,
            0.9939676523208618,
            0.9981692433357239,
            0.9981692433357239,
            0.9977403283119202,
            0.9957897663116455,
            0.9981692433357239,
            0.9943839907646179,
            0.9981692433357239,
            0.9981692433357239,
            0.9964874982833862,
            0.9964874982833862,
            0.9981692433357239,
            0.9964874982833862
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9989333152770996,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9989333152770996,
            0.9989333152770996,
            0.9989333152770996,
            0.9970007538795471,
            0.9989333152770996,
            0.9970007538795471,
            0.9988928437232971,
            0.9989070892333984,
            0.9989333152770996,
            0.9989333152770996,
            0.9988407492637634,
            0.9988928437232971,
            0.9970007538795471,
            0.9989333152770996,
            0.9989333152770996,
            0.9970007538795471,
            0.9989333152770996,
            0.9970007538795471,
            0.9989333152770996,
            0.9989070892333984
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9973511099815369,
        "body": "    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result",
        "result": "passed",
        "similarities": [
            0.9967359304428101,
            0.9973100423812866,
            0.9970694184303284,
            0.9973092675209045,
            0.9962234497070312,
            0.9964683055877686,
            0.9973461627960205,
            0.9966681599617004,
            0.9865900278091431,
            0.9966077208518982,
            0.9969393014907837,
            0.9970347881317139,
            0.9973511099815369,
            0.9970804452896118,
            0.9952219128608704,
            0.9865900278091431,
            0.9957696795463562,
            0.9965810179710388,
            0.9973100423812866,
            0.9966681599617004
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9994770884513855,
        "body": "    return 0.5 * a * h",
        "result": "passed",
        "similarities": [
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9985852837562561,
            0.9985852837562561,
            0.9994770884513855,
            0.9968518018722534,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9959885478019714,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855,
            0.9994770884513855
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9977843761444092,
        "body": "    if n <= 3:\n        return 0 if n < 2 else 2\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d",
        "result": "passed",
        "similarities": [
            0.9946065545082092,
            0.9967954754829407,
            0.9946065545082092,
            0.9975236654281616,
            0.9974887371063232,
            0.9928980469703674,
            0.9975648522377014,
            0.9946065545082092,
            0.9975236654281616,
            0.9967954754829407,
            0.9967954754829407,
            0.9946065545082092,
            0.9946065545082092,
            0.9967954754829407,
            0.9972909688949585,
            0.9977843761444092,
            0.9975041747093201,
            0.9975696206092834,
            0.9959107637405396,
            0.997643232345581
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9989106059074402,
        "body": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2.0\n    else:\n        return l[mid]",
        "result": "passed",
        "similarities": [
            0.9989005923271179,
            0.9988142251968384,
            0.9989047050476074,
            0.9966383576393127,
            0.9988469481468201,
            0.997857928276062,
            0.9989005923271179,
            0.9989005923271179,
            0.9989005923271179,
            0.9989005923271179,
            0.9974154233932495,
            0.9989005923271179,
            0.9989106059074402,
            0.9989005923271179,
            0.9989005923271179,
            0.9941707253456116,
            0.9989106059074402,
            0.9989106059074402,
            0.9979158639907837,
            0.9974154233932495
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9915878772735596,
        "body": "    left = 0\n    right = len(text) - 1\n    while left <= right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True",
        "result": "passed",
        "similarities": [
            0.9905188679695129,
            0.9915273785591125,
            0.9761999845504761,
            0.9719478487968445,
            0.9696819186210632,
            0.9761999845504761,
            0.9915878772735596,
            0.9905188679695129,
            0.9914838671684265,
            0.9761999845504761,
            0.9913783073425293,
            0.9910825490951538,
            0.9914838671684265,
            0.9915273785591125,
            0.9915307760238647,
            0.9914838671684265,
            0.9914838671684265,
            0.9907854199409485,
            0.9696819186210632,
            0.9915273785591125
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9983745217323303,
        "body": "    result = 1\n    base = 2 % p\n    for _ in range(n):\n        result = (result * base) % p\n    return result",
        "result": "passed",
        "similarities": [
            0.9982308745384216,
            0.9980493187904358,
            0.9982308745384216,
            0.9962420463562012,
            0.9967655539512634,
            0.9967655539512634,
            0.9982000589370728,
            0.9967655539512634,
            0.9976039528846741,
            0.9982308745384216,
            0.9967655539512634,
            0.9982308745384216,
            0.9982308745384216,
            0.9982308745384216,
            0.9982000589370728,
            0.9982308745384216,
            0.9983745217323303,
            0.9983745217323303,
            0.9976719617843628,
            0.9971218109130859
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9998953938484192,
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed",
        "similarities": [
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9980115294456482,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192,
            0.9998953938484192
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9966094493865967,
        "body": "vowels = \"aeiouAEIOU\"\n\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "failed: unexpected indent (<string>, line 21)",
        "similarities": [
            0.9945716857910156,
            0.9947226643562317,
            0.9964786171913147,
            0.9945294260978699,
            0.9964786171913147,
            0.99251788854599,
            0.9964786171913147,
            0.9944735169410706,
            0.9964786171913147,
            0.9930377006530762,
            0.9938081502914429,
            0.9911671876907349,
            0.9962937235832214,
            0.9964786171913147,
            0.9911671876907349,
            0.9964786171913147,
            0.9966094493865967,
            0.9945716857910156,
            0.9945294260978699,
            0.9964786171913147
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9976029992103577,
        "body": "    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9964043498039246,
            0.9976029992103577,
            0.9976029992103577,
            0.9976029992103577,
            0.9964043498039246,
            0.9964043498039246,
            0.9976029992103577,
            0.9976029992103577,
            0.9976029992103577,
            0.9964043498039246,
            0.9976029992103577,
            0.9976029992103577,
            0.9976029992103577,
            0.9976029992103577,
            0.9964043498039246,
            0.9964043498039246,
            0.9964043498039246,
            0.9976029992103577,
            0.9976029992103577,
            0.9964043498039246
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9993292093276978,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            0.9972286224365234,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9972286224365234,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9964998960494995,
            0.9993292093276978,
            0.9993292093276978,
            0.9993292093276978,
            0.9972286224365234,
            0.9993292093276978
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9878350496292114,
        "body": "    for char in sorted(set(s0)):\n        if s0.count(char) != s1.count(char):\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9863861799240112,
            0.9874266386032104,
            0.9843339323997498,
            0.9843339323997498,
            0.9878350496292114,
            0.9865386486053467,
            0.9822158813476562,
            0.9863861799240112,
            0.9865386486053467,
            0.9755895733833313,
            0.9843339323997498,
            0.9843339323997498,
            0.9843339323997498,
            0.9843339323997498,
            0.9822158813476562,
            0.9843339323997498,
            0.9843339323997498,
            0.9874266386032104,
            0.960626482963562,
            0.9376935362815857
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9960992932319641,
        "body": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "result": "passed",
        "similarities": [
            0.9960992932319641,
            0.9960992932319641,
            0.9930005669593811,
            0.9898245930671692,
            0.9960992932319641,
            0.9960992932319641,
            0.9960992932319641,
            0.9960992932319641,
            0.9898245930671692,
            0.9960992932319641,
            0.9960992932319641,
            0.9960992932319641,
            0.9939627647399902,
            0.9960992932319641,
            0.9898245930671692,
            0.9939627647399902,
            0.9960992932319641,
            0.9960992932319641,
            0.9960992932319641,
            0.9898245930671692
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9990965127944946,
        "body": "    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "result": "passed",
        "similarities": [
            0.9990441203117371,
            0.9990441203117371,
            0.9990831017494202,
            0.9989976286888123,
            0.9988965392112732,
            0.99898761510849,
            0.9964194297790527,
            0.9989976286888123,
            0.9989022016525269,
            0.9990440011024475,
            0.9990965127944946,
            0.9990370869636536,
            0.9977480173110962,
            0.9990440011024475,
            0.9990044832229614,
            0.9977480173110962,
            0.9989022016525269,
            0.9990370869636536,
            0.9990440011024475,
            0.9977480173110962
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9973676800727844,
        "body": "    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing",
        "result": "passed",
        "similarities": [
            0.9827119708061218,
            0.9951382875442505,
            0.9972352385520935,
            0.9973676800727844,
            0.9966872334480286,
            0.9972104430198669,
            0.9971739053726196,
            0.9972158074378967,
            0.9972158074378967,
            0.9971739053726196,
            0.9966872334480286,
            0.9825864434242249,
            0.9972352385520935,
            0.9972352385520935,
            0.9973676800727844,
            0.9971010088920593,
            0.9966872334480286,
            0.9971739053726196,
            0.9966872334480286,
            0.9973592162132263
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9930108785629272,
        "body": "    common_elements = set()\n    for item in l1:\n        if item in l2 and item not in common_elements:\n            common_elements.add(item)\n    return sorted(list(common_elements))",
        "result": "passed",
        "similarities": [
            0.9920293092727661,
            0.9901906251907349,
            0.9926868081092834,
            0.9870039224624634,
            0.9891293048858643,
            0.9895272850990295,
            0.9916285276412964,
            0.9919019341468811,
            0.9927986860275269,
            0.9910575747489929,
            0.9921918511390686,
            0.9921425580978394,
            0.9921401143074036,
            0.9905706644058228,
            0.9546699523925781,
            0.9924941062927246,
            0.9924947023391724,
            0.9908666014671326,
            0.9924947023391724,
            0.9930108785629272
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9973618388175964,
        "body": "    factor = 2\n    while n > factor ** 2:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n",
        "result": "failed: ",
        "similarities": [
            0.9954107403755188,
            0.9960277080535889,
            0.996255099773407,
            0.9968804121017456,
            0.9973618388175964,
            0.9968804121017456,
            0.9968472719192505,
            0.9963895082473755,
            0.9968804121017456,
            0.9963927268981934,
            0.9963895082473755,
            0.9973403811454773,
            0.9959414601325989,
            0.9968804121017456,
            0.9949768781661987,
            0.9973403811454773,
            0.9968804121017456,
            0.997128963470459,
            0.9933468699455261,
            0.9938746094703674
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9992352724075317,
        "body": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total",
        "result": "passed",
        "similarities": [
            0.9959406852722168,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9959406852722168,
            0.9992352724075317,
            0.998746395111084,
            0.9992352724075317,
            0.9992352724075317,
            0.9958661794662476,
            0.9992352724075317,
            0.998746395111084,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317,
            0.9992352724075317
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9987030029296875,
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "similarities": [
            0.9986453652381897,
            0.9987030029296875,
            0.9971843361854553,
            0.9982126951217651,
            0.9984747171401978,
            0.9984853863716125,
            0.9973162412643433,
            0.997186541557312,
            0.998034656047821,
            0.9983658194541931,
            0.9978280663490295,
            0.9983658194541931,
            0.9987030029296875,
            0.9983658194541931,
            0.9975863099098206,
            0.9987030029296875,
            0.9987030029296875,
            0.9987030029296875,
            0.9987030029296875,
            0.998034656047821
        ]
    },
    "HumanEval/62": {
        "similarity": 0.995985209941864,
        "body": "    return [i * xs[i] for i in range(1, len(xs))]",
        "result": "passed",
        "similarities": [
            0.9957181811332703,
            0.995985209941864,
            0.9917635917663574,
            0.9957181811332703,
            0.995985209941864,
            0.9957181811332703,
            0.995985209941864,
            0.9957181811332703,
            0.995985209941864,
            0.9917635917663574,
            0.9957181811332703,
            0.9957181811332703,
            0.995985209941864,
            0.995985209941864,
            0.9936485290527344,
            0.995985209941864,
            0.9957181811332703,
            0.9957181811332703,
            0.9957181811332703,
            0.9917635917663574
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9974071383476257,
        "body": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed",
        "similarities": [
            0.9974004626274109,
            0.9972720742225647,
            0.9973555207252502,
            0.9973555207252502,
            0.9973555207252502,
            0.9887135028839111,
            0.9973267316818237,
            0.9972375631332397,
            0.9860097765922546,
            0.9973555207252502,
            0.9928208589553833,
            0.9969320893287659,
            0.9974071383476257,
            0.9860097765922546,
            0.9972771406173706,
            0.9971014261245728,
            0.9967237114906311,
            0.9972851276397705,
            0.9973437786102295,
            0.9973555207252502
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9958881735801697,
        "body": "    vowels = \"aeiou\"\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9958881735801697,
            0.9948210716247559,
            0.9958881735801697,
            0.9931298494338989,
            0.99559485912323,
            0.9955195188522339,
            0.9934453368186951,
            0.9958881735801697,
            0.9789390563964844,
            0.9947196841239929,
            0.9931298494338989,
            0.9948068261146545,
            0.9955187439918518,
            0.99559485912323,
            0.9850694537162781,
            0.9954679608345032,
            0.9958881735801697,
            0.9949421286582947,
            0.9953096508979797,
            0.9791252017021179
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9983434081077576,
        "body": "    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift >= num_digits:\n        return digits[::-1]\n    \n    shift %= num_digits\n    return digits[-shift:] + digits[:-shift]",
        "result": "failed: ",
        "similarities": [
            0.9944635033607483,
            0.9983291625976562,
            0.9983434081077576,
            0.9982632994651794,
            0.9965071678161621,
            0.9969859719276428,
            0.9978285431861877,
            0.9951111674308777,
            0.9983291625976562,
            0.9976897239685059,
            0.9980397820472717,
            0.9978504180908203,
            0.997291088104248,
            0.9980524182319641,
            0.9978285431861877,
            0.996651291847229,
            0.9983291625976562,
            0.9937257170677185,
            0.997291088104248,
            0.9959871172904968
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9962146282196045,
        "body": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
        "result": "passed",
        "similarities": [
            0.9912587404251099,
            0.9962146282196045,
            0.9962146282196045,
            0.9962146282196045,
            0.9960187673568726,
            0.9912587404251099,
            0.9912587404251099,
            0.9912587404251099,
            0.9962146282196045,
            0.9962146282196045,
            0.9954788088798523,
            0.9959065318107605,
            0.9962146282196045,
            0.9962146282196045,
            0.9912587404251099,
            0.9959065318107605,
            0.9962146282196045,
            0.9912587404251099,
            0.9960187673568726,
            0.9962146282196045
        ]
    },
    "HumanEval/67": {
        "similarity": 0.997350811958313,
        "body": "    words = s.split()\n    apples = int(words[0])\n    oranges = int(words[3])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed",
        "similarities": [
            0.997350811958313,
            0.9931455850601196,
            0.9973040223121643,
            0.9973040223121643,
            0.9969951510429382,
            0.9973040223121643,
            0.997350811958313,
            0.9973040223121643,
            0.9933441877365112,
            0.9931455850601196,
            0.9973040223121643,
            0.9928418397903442,
            0.997350811958313,
            0.997350811958313,
            0.9973040223121643,
            0.9967862367630005,
            0.997350811958313,
            0.9973040223121643,
            0.9931455850601196,
            0.9937318563461304
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9977993369102478,
        "body": "    smallest_even_value = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_index = index\n\n    return [smallest_even_value, smallest_index] if smallest_index != -1 else []",
        "result": "passed",
        "similarities": [
            0.9955350160598755,
            0.9977993369102478,
            0.9970158934593201,
            0.9973474740982056,
            0.9956679344177246,
            0.9968145489692688,
            0.9976935386657715,
            0.9969505667686462,
            0.9962049722671509,
            0.9952458739280701,
            0.9958463907241821,
            0.9976314902305603,
            0.9955805540084839,
            0.9967268109321594,
            0.996036946773529,
            0.9952719807624817,
            0.9960698485374451,
            0.9966365694999695,
            0.9959849119186401,
            0.9973646402359009
        ]
    },
    "HumanEval/69": {
        "similarity": 0.998546302318573,
        "body": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "result": "passed",
        "similarities": [
            0.9983147382736206,
            0.9982524514198303,
            0.9985232353210449,
            0.9979444742202759,
            0.9909493327140808,
            0.9977679252624512,
            0.9983229637145996,
            0.9981430768966675,
            0.9985232353210449,
            0.9985232353210449,
            0.9912628531455994,
            0.9982368350028992,
            0.9982262849807739,
            0.9981713891029358,
            0.9985232353210449,
            0.9983423948287964,
            0.9947994947433472,
            0.9980028867721558,
            0.9985232353210449,
            0.998546302318573
        ]
    },
    "HumanEval/70": {
        "similarity": 0.997452974319458,
        "body": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
        "result": "passed",
        "similarities": [
            0.997452974319458,
            0.9974297285079956,
            0.9947666525840759,
            0.9971545338630676,
            0.997452974319458,
            0.9970521330833435,
            0.9967243671417236,
            0.9953381419181824,
            0.997452974319458,
            0.9973840117454529,
            0.9970520734786987,
            0.9930275678634644,
            0.9971545338630676,
            0.9938697814941406,
            0.9967243671417236,
            0.997452974319458,
            0.9970521330833435,
            0.997452974319458,
            0.997452974319458,
            0.9970521330833435
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9989246726036072,
        "body": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)",
        "result": "passed",
        "similarities": [
            0.9989246726036072,
            0.9971994161605835,
            0.998748779296875,
            0.9989246726036072,
            0.9989246726036072,
            0.998748779296875,
            0.9976558685302734,
            0.998748779296875,
            0.998748779296875,
            0.9989246726036072,
            0.9971994161605835,
            0.9989246726036072,
            0.998748779296875,
            0.9971994161605835,
            0.9989246726036072,
            0.9989246726036072,
            0.9971994161605835,
            0.9989246726036072,
            0.998748779296875,
            0.9976558685302734
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9974717497825623,
        "body": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9952517151832581,
            0.9973570108413696,
            0.9952517151832581,
            0.9974717497825623,
            0.9952517151832581,
            0.9973570108413696,
            0.9973570108413696,
            0.9941269755363464,
            0.9819206595420837,
            0.9973570108413696,
            0.9973570108413696,
            0.9974716901779175,
            0.9973570108413696,
            0.9952517151832581,
            0.9974716901779175,
            0.9960336089134216,
            0.9952517151832581,
            0.9952517151832581,
            0.9973570108413696,
            0.9974717497825623
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9993824362754822,
        "body": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes",
        "result": "passed",
        "similarities": [
            0.9993824362754822,
            0.999241054058075,
            0.9991005659103394,
            0.9993824362754822,
            0.9993824362754822,
            0.9993824362754822,
            0.999241054058075,
            0.9993733763694763,
            0.999241054058075,
            0.9993824362754822,
            0.9957530498504639,
            0.999241054058075,
            0.9993824362754822,
            0.999241054058075,
            0.9993348717689514,
            0.999241054058075,
            0.9993348717689514,
            0.9993824362754822,
            0.9993824362754822,
            0.999241054058075
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9987738728523254,
        "body": "    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    \n    if len_lst1 < len_lst2:\n        return lst1\n    elif len_lst1 > len_lst2:\n        return lst2\n    else:\n        return lst1",
        "result": "passed",
        "similarities": [
            0.9987738728523254,
            0.9981185793876648,
            0.9986215233802795,
            0.9987308382987976,
            0.9983384013175964,
            0.9986215233802795,
            0.99835604429245,
            0.9981185793876648,
            0.9975019693374634,
            0.9981439709663391,
            0.9975019693374634,
            0.9980711936950684,
            0.9981185793876648,
            0.9987738728523254,
            0.9986215233802795,
            0.9985588788986206,
            0.9986991882324219,
            0.9976252317428589,
            0.9983384013175964,
            0.9986215233802795
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9982431530952454,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    count = 0\n    for prime in primes:\n        while a % prime == 0 and a > 1:\n            a /= prime\n            count += 1\n            if count > 3:\n                return False\n    return count == 3",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9977123141288757,
            0.9968171715736389,
            0.9967870116233826,
            0.9979376792907715,
            0.9971847534179688,
            0.9980578422546387,
            0.9979896545410156,
            0.9982431530952454,
            0.9978929162025452,
            0.9971295595169067,
            0.9971852898597717,
            0.9979227781295776,
            0.9979404807090759,
            0.9979504942893982,
            0.9957297444343567,
            0.9975373148918152,
            0.9978514313697815,
            0.9977802634239197,
            0.9975493550300598,
            0.9981376528739929
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9973122477531433,
        "body": "    if x == 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n**i == x:\n            return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9953211545944214,
            0.9970205426216125,
            0.9973122477531433,
            0.9968832731246948,
            0.9968376159667969,
            0.9937878847122192,
            0.9962640404701233,
            0.9940139651298523,
            0.99715656042099,
            0.9966668486595154,
            0.9963060617446899,
            0.9953211545944214,
            0.9953211545944214,
            0.9953211545944214,
            0.9971345663070679,
            0.9957296252250671,
            0.9964722394943237,
            0.9960353374481201,
            0.9958082437515259,
            0.9960383176803589
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9951186776161194,
        "body": "    a = abs(a)\n    for i in range(int(a ** (1/3)) + 2):\n        if i ** 3 == a:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9946790933609009,
            0.9946313500404358,
            0.9874089956283569,
            0.9946923851966858,
            0.9863359332084656,
            0.9933470487594604,
            0.9946313500404358,
            0.9947524070739746,
            0.9945772886276245,
            0.983241856098175,
            0.9927839040756226,
            0.9945951700210571,
            0.9946923851966858,
            0.9856794476509094,
            0.9944031238555908,
            0.9945772886276245,
            0.9785869121551514,
            0.9946995973587036,
            0.9944031238555908,
            0.9951186776161194
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9978842735290527,
        "body": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9978842735290527,
            0.9964364767074585,
            0.9963870644569397,
            0.9978842735290527,
            0.9978841543197632,
            0.9978841543197632,
            0.996436357498169,
            0.9978841543197632,
            0.9978841543197632,
            0.9975254535675049,
            0.9916412234306335,
            0.9978841543197632,
            0.9931150674819946,
            0.9978841543197632,
            0.9916412234306335,
            0.9978841543197632,
            0.9916412234306335,
            0.9978842735290527,
            0.9916412234306335,
            0.9978842735290527
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9981370568275452,
        "body": "    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal //= 2\n    return f\"db{binary}db\"",
        "result": "failed: ",
        "similarities": [
            0.9957588911056519,
            0.9976326823234558,
            0.9980679750442505,
            0.997903048992157,
            0.9980822205543518,
            0.998102068901062,
            0.998102068901062,
            0.9975770711898804,
            0.9974799156188965,
            0.9945098757743835,
            0.9976414442062378,
            0.9974799156188965,
            0.9981370568275452,
            0.9974499940872192,
            0.9976865649223328,
            0.9951499104499817,
            0.9977224469184875,
            0.9974874258041382,
            0.9964398145675659,
            0.9969548583030701
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9998648762702942,
        "body": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9996980428695679,
            0.9998579621315002,
            0.9998648762702942,
            0.9998648762702942,
            0.9998648762702942,
            0.9998579621315002,
            0.9998579621315002,
            0.99923175573349,
            0.9998648762702942,
            0.9989911317825317,
            0.9998648762702942,
            0.9998648762702942,
            0.9992871880531311,
            0.9998648762702942,
            0.9998648762702942,
            0.9998648762702942,
            0.9998648762702942,
            0.9998648762702942,
            0.9998579621315002,
            0.9998648762702942
        ]
    },
    "HumanEval/81": {
        "similarity": 0.998917818069458,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed",
        "similarities": [
            0.9965894818305969,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.9965894818305969,
            0.998917818069458,
            0.9986840486526489,
            0.998917818069458,
            0.998917818069458,
            0.9985515475273132,
            0.9965894818305969,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.998917818069458,
            0.9902238249778748,
            0.998917818069458
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9993488788604736,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return is_prime(len(string))",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9992360472679138,
            0.9989324808120728,
            0.9993476867675781,
            0.9993488788604736,
            0.9993488788604736,
            0.9993488788604736,
            0.9975977540016174,
            0.9992335438728333,
            0.9993476867675781,
            0.9992360472679138,
            0.9993488788604736,
            0.999316394329071,
            0.9992360472679138,
            0.9993488788604736,
            0.9975379109382629,
            0.9993476867675781,
            0.9993488788604736,
            0.9977200031280518,
            0.9993224143981934,
            0.9977249503135681
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9978330731391907,
        "body": "    if n == 1:\n        return 1\n    count = 2 * (10 ** (n - 1)) - 10 ** (n - 2)\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9978330731391907,
            0.9944196343421936,
            0.9977565407752991,
            0.9941970705986023,
            0.9978330731391907,
            0.9978330731391907,
            0.9956077933311462,
            0.9955008625984192,
            0.9944251179695129,
            0.9952744841575623,
            0.9941970705986023,
            0.9976643323898315,
            0.9978330731391907,
            0.9977564811706543,
            0.9971018433570862,
            0.9978330731391907,
            0.9971018433570862,
            0.9955008625984192,
            0.9941970705986023,
            0.9941970705986023
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9997302889823914,
        "body": "    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]",
        "result": "passed",
        "similarities": [
            0.9996886253356934,
            0.9997008442878723,
            0.9996886253356934,
            0.9997008442878723,
            0.9997301697731018,
            0.9997008442878723,
            0.9996886253356934,
            0.9997301697731018,
            0.9997008442878723,
            0.9996886253356934,
            0.9997302889823914,
            0.9997302889823914,
            0.9996886253356934,
            0.9996886253356934,
            0.9997301697731018,
            0.9997301697731018,
            0.9996886253356934,
            0.9996886253356934,
            0.9976515769958496,
            0.9997008442878723
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9957337975502014,
        "body": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
        "result": "passed",
        "similarities": [
            0.9823226928710938,
            0.9956209063529968,
            0.9835604429244995,
            0.9956209063529968,
            0.9948896169662476,
            0.9954902529716492,
            0.9957337975502014,
            0.9835604429244995,
            0.9956209063529968,
            0.9950007200241089,
            0.9835604429244995,
            0.9957337975502014,
            0.9957337975502014,
            0.9955036640167236,
            0.995601236820221,
            0.9957337975502014,
            0.9955036640167236,
            0.9956209063529968,
            0.9957337975502014,
            0.9956209063529968
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9998733401298523,
        "body": "    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "result": "passed",
        "similarities": [
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9993779063224792,
            0.9996936321258545,
            0.9993779063224792,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9998733401298523,
            0.9993777871131897,
            0.9998733401298523
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9983918070793152,
        "body": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))",
        "result": "passed",
        "similarities": [
            0.9982707500457764,
            0.9976938962936401,
            0.9980848431587219,
            0.9982724785804749,
            0.9979660511016846,
            0.9977302551269531,
            0.9982098340988159,
            0.9981681704521179,
            0.9983709454536438,
            0.9983046650886536,
            0.994720458984375,
            0.996772050857544,
            0.997109055519104,
            0.9981126189231873,
            0.9947347044944763,
            0.9978103637695312,
            0.9983918070793152,
            0.9962182641029358,
            0.9978103637695312,
            0.9983775615692139
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9990381002426147,
        "body": "    if not array:\n        return []\n    \n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array",
        "result": "passed",
        "similarities": [
            0.9985622763633728,
            0.9979566335678101,
            0.9986000061035156,
            0.9984085559844971,
            0.9990109205245972,
            0.9976630806922913,
            0.9981192350387573,
            0.9989951252937317,
            0.9990109205245972,
            0.9990381002426147,
            0.9983611106872559,
            0.9990127086639404,
            0.9986532330513,
            0.9990381002426147,
            0.9988319277763367,
            0.9986532330513,
            0.9986698031425476,
            0.9977307915687561,
            0.9967564940452576,
            0.9990127086639404
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9952542185783386,
        "body": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (2 * 2) % 26\n            base = 'a' if char.islower() else 'A'\n            encrypted_char = chr((ord(char) - ord(base) + shift) % 26 + ord(base))\n            result += encrypted_char\n        else:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9866294860839844,
            0.994547426700592,
            0.9916085600852966,
            0.9945777058601379,
            0.993192195892334,
            0.9946323037147522,
            0.9937422871589661,
            0.9930236339569092,
            0.9912804365158081,
            0.9899734854698181,
            0.9922704100608826,
            0.9952542185783386,
            0.9927728772163391,
            0.995008647441864,
            0.9879686236381531,
            0.9949334859848022,
            0.9942302703857422,
            0.9918757081031799,
            0.9950892925262451,
            0.9946112632751465
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9960516095161438,
        "body": "    if len(lst) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in lst:\n        if num <= smallest:\n            smallest, second_smallest = num, smallest\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None",
        "result": "failed: ",
        "similarities": [
            0.9895707964897156,
            0.9951841235160828,
            0.9870505332946777,
            0.9960516095161438,
            0.9960516095161438,
            0.9951841235160828,
            0.9948180317878723,
            0.9948951601982117,
            0.9958807229995728,
            0.9758340716362,
            0.9959986805915833,
            0.9960516095161438,
            0.9951841235160828,
            0.995196521282196,
            0.9875420331954956,
            0.995196521282196,
            0.9939786195755005,
            0.9939103722572327,
            0.9960516095161438,
            0.9959987998008728
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9991956353187561,
        "body": "    bored_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            bored_count += 1\n    return bored_count",
        "result": "passed",
        "similarities": [
            0.9990687966346741,
            0.9991594552993774,
            0.9986297488212585,
            0.9991594552993774,
            0.9991893768310547,
            0.9980898499488831,
            0.9990687966346741,
            0.9991284608840942,
            0.999081552028656,
            0.9972259402275085,
            0.9991635680198669,
            0.9991259574890137,
            0.9981083273887634,
            0.9991956353187561,
            0.9991450905799866,
            0.9990639090538025,
            0.9976376891136169,
            0.9986546039581299,
            0.9974747896194458,
            0.9990429282188416
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9983122944831848,
        "body": "    if all(isinstance(i, int) for i in (x, y, z)):\n        return x + y == z or x + z == y or y + z == x\n    return False",
        "result": "passed",
        "similarities": [
            0.9906501770019531,
            0.9982961416244507,
            0.9981705546379089,
            0.9982961416244507,
            0.9982960224151611,
            0.9982444643974304,
            0.9981705546379089,
            0.9977715015411377,
            0.9982960224151611,
            0.9983122944831848,
            0.9982445240020752,
            0.9967526793479919,
            0.9983122944831848,
            0.9906501770019531,
            0.9982960224151611,
            0.994279146194458,
            0.9983122944831848,
            0.9982961416244507,
            0.9982961416244507,
            0.9981611371040344
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9968170523643494,
        "body": "    vowels = 'aeiou'\n    shifted_vowels = {v: chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}\n    result = ''\n    \n    for char in message:\n        if char.isalpha():\n            new_char = char.swapcase()\n            if new_char.lower() in shifted_vowels:\n                new_char = shifted_vowels[new_char.lower()]\n            result += new_char\n        else:\n            result += char\n    \n    return result",
        "result": "failed: This prints if this assert fails 2 (good for debugging!)",
        "similarities": [
            0.9966226816177368,
            0.9956395030021667,
            0.9965354800224304,
            0.9948951601982117,
            0.9953391551971436,
            0.9948033094406128,
            0.9968170523643494,
            0.9948967695236206,
            0.9959851503372192,
            0.9956857562065125,
            0.9915978312492371,
            0.9958569407463074,
            0.9943946003913879,
            0.9957242608070374,
            0.9960471987724304,
            0.9817525744438171,
            0.9960182905197144,
            0.9955902099609375,
            0.9957601428031921,
            0.994268000125885
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9982474446296692,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    digit_sum = sum(int(digit) for digit in str(max_prime))\n    return digit_sum",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9979808330535889,
            0.9982251524925232,
            0.9980583190917969,
            0.9978371858596802,
            0.9982474446296692,
            0.9979280233383179,
            0.9980801343917847,
            0.9938897490501404,
            0.9982251524925232,
            0.9978252053260803,
            0.9980428814888,
            0.9982371926307678,
            0.9768377542495728,
            0.9980310201644897,
            0.9979954957962036,
            0.9979695677757263,
            0.9980270266532898,
            0.9975941181182861,
            0.9982365965843201,
            0.9979350566864014
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9945631623268127,
        "body": "    if not dct:\n        return False\n    \n    keys = list(dct.keys())\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    \n    return all_lower or all_upper",
        "result": "failed: name 'dct' is not defined",
        "similarities": [
            0.9936204552650452,
            0.990993082523346,
            0.9853013753890991,
            0.9933260083198547,
            0.990165114402771,
            0.9907082915306091,
            0.9945631623268127,
            0.9934228658676147,
            0.986591637134552,
            0.993474543094635,
            0.9941743612289429,
            0.99326092004776,
            0.9853013753890991,
            0.9937129616737366,
            0.9944494962692261,
            0.9926342368125916,
            0.9912537336349487,
            0.9937651753425598,
            0.9941743612289429,
            0.9943036437034607
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9997719526290894,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    return primes",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9997719526290894,
            0.9977902770042419,
            0.9997636675834656,
            0.9997367858886719,
            0.999751627445221,
            0.9997661113739014,
            0.9997367858886719,
            0.9997661113739014,
            0.9994410276412964,
            0.9997661113739014,
            0.9997451305389404,
            0.999751627445221,
            0.9997661113739014,
            0.9993687868118286,
            0.9997367858886719,
            0.9997661113739014,
            0.9997645020484924,
            0.9997645020484924,
            0.9997367858886719,
            0.9997636675834656
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9984617829322815,
        "body": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b",
        "result": "passed",
        "similarities": [
            0.9984617829322815,
            0.9984617829322815,
            0.9984617829322815,
            0.9984617829322815,
            0.9984617829322815,
            0.9984617829322815,
            0.9962360262870789,
            0.9968295693397522,
            0.9984617829322815,
            0.9968295693397522,
            0.9962360262870789,
            0.9984617829322815,
            0.9968295693397522,
            0.9962360262870789,
            0.9968295693397522,
            0.9963954091072083,
            0.9960830211639404,
            0.9984617829322815,
            0.9984617829322815,
            0.9984617829322815
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9981104135513306,
        "body": "    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9981104135513306,
            0.998060405254364,
            0.9979456067085266,
            0.9981104135513306,
            0.9979936480522156,
            0.998060405254364,
            0.9954506754875183,
            0.9981104135513306,
            0.9981104135513306,
            0.9981104135513306,
            0.9981104135513306,
            0.9971000552177429,
            0.9981104135513306,
            0.9981104135513306,
            0.9980100393295288,
            0.9969363808631897,
            0.9978500008583069,
            0.9981104135513306,
            0.9850980043411255,
            0.9853804707527161
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9962859153747559,
        "body": "    num = float(value)\n    if abs(num - round(num)) == 0.5:\n        return int(num + (1 if num > 0 else -1))\n    return round(num)",
        "result": "passed",
        "similarities": [
            0.9943699240684509,
            0.9948019981384277,
            0.9943699240684509,
            0.99596107006073,
            0.9943699240684509,
            0.9931560158729553,
            0.9955087304115295,
            0.989414632320404,
            0.9962859153747559,
            0.9957725405693054,
            0.9958637952804565,
            0.990553617477417,
            0.9943699240684509,
            0.9949756264686584,
            0.9884098768234253,
            0.9949037432670593,
            0.9950572848320007,
            0.9958637952804565,
            0.9948250651359558,
            0.9958637952804565
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9992490410804749,
        "body": "    pile = []\n    current_stones = n\n    for i in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile",
        "result": "passed",
        "similarities": [
            0.9941331148147583,
            0.9991282224655151,
            0.9992213249206543,
            0.9990640878677368,
            0.9992213249206543,
            0.9991550445556641,
            0.9992490410804749,
            0.9992490410804749,
            0.9991282224655151,
            0.9990640878677368,
            0.9990640878677368,
            0.9951306581497192,
            0.9990640878677368,
            0.9990640878677368,
            0.9991549253463745,
            0.9992489218711853,
            0.9992213249206543,
            0.9992213249206543,
            0.9992213249206543,
            0.9992489218711853
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9945442080497742,
        "body": "    s = s.replace(',', ' ')\n    return s.split()",
        "result": "passed",
        "similarities": [
            0.9940552115440369,
            0.9915030598640442,
            0.9930773377418518,
            0.9941204786300659,
            0.9922388195991516,
            0.9922388195991516,
            0.993108868598938,
            0.9922388195991516,
            0.9940552115440369,
            0.9919062256813049,
            0.9932821393013,
            0.9558234214782715,
            0.9940552115440369,
            0.9945442080497742,
            0.9937487244606018,
            0.9940552115440369,
            0.9940552115440369,
            0.9940552115440369,
            0.9933066368103027,
            0.9922388195991516
        ]
    },
    "HumanEval/102": {
        "similarity": 0.999359130859375,
        "body": "    if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "result": "passed",
        "similarities": [
            0.9975845813751221,
            0.9993559122085571,
            0.9993559122085571,
            0.9993559122085571,
            0.999359130859375,
            0.9993559122085571,
            0.9993559122085571,
            0.9975351095199585,
            0.9993559122085571,
            0.9993559122085571,
            0.9993559122085571,
            0.9975387454032898,
            0.9982295632362366,
            0.9993559122085571,
            0.9975351095199585,
            0.9987040162086487,
            0.9993559122085571,
            0.9993559122085571,
            0.9993559122085571,
            0.9993559122085571
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9995118379592896,
        "body": "    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
        "result": "passed",
        "similarities": [
            0.9995118379592896,
            0.9991419911384583,
            0.9995118379592896,
            0.9988611936569214,
            0.9995118379592896,
            0.9990284442901611,
            0.9995118379592896,
            0.9995118379592896,
            0.9994950890541077,
            0.9992228150367737,
            0.9995118379592896,
            0.9995118379592896,
            0.9988611936569214,
            0.9991419911384583,
            0.9994950890541077,
            0.9978474378585815,
            0.9995118379592896,
            0.9994950890541077,
            0.9995118379592896,
            0.9995118379592896
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9933436512947083,
        "body": "    for digit in str(n):\n        if int(digit) % 2 == 0:\n            return False\n    return True\n\n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9910951256752014,
            0.9894337058067322,
            0.9918472170829773,
            0.9889241456985474,
            0.9904448986053467,
            0.9893559813499451,
            0.9807130694389343,
            0.9905503988265991,
            0.9807130694389343,
            0.9904448986053467,
            0.9906778931617737,
            0.989341139793396,
            0.9895301461219788,
            0.9922071695327759,
            0.9933436512947083,
            0.9869853854179382,
            0.989672839641571,
            0.9884768128395081,
            0.9908209443092346,
            0.9883485436439514
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9952834248542786,
        "body": "    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_nums = [num for num in arr if 1 <= num <= 9]\n    sorted_nums.sort()\n    reversed_nums = sorted_nums[::-1]\n    result = [num_names[num - 1] for num in reversed_nums]\n    return result",
        "result": "passed",
        "similarities": [
            0.9951010346412659,
            0.9887281060218811,
            0.9935911297798157,
            0.9893631339073181,
            0.9889258146286011,
            0.9951080679893494,
            0.9949724078178406,
            0.9950609803199768,
            0.991401195526123,
            0.9952834248542786,
            0.9912171959877014,
            0.9917572736740112,
            0.9889140725135803,
            0.9947797060012817,
            0.9946835041046143,
            0.9942250847816467,
            0.9880719780921936,
            0.9892911314964294,
            0.986890971660614,
            0.9950612783432007
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9975234866142273,
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            value = 1\n            for j in range(1, i + 1):\n                value *= j\n            result.append(value)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "result": "passed",
        "similarities": [
            0.9970842599868774,
            0.9947524070739746,
            0.9958557486534119,
            0.9970842599868774,
            0.9958557486534119,
            0.9959366321563721,
            0.9970842599868774,
            0.9958009123802185,
            0.9970842599868774,
            0.9950515627861023,
            0.9970842599868774,
            0.9943293333053589,
            0.997084379196167,
            0.9975234866142273,
            0.9953466057777405,
            0.9970842599868774,
            0.9946444630622864,
            0.9971970915794373,
            0.9959366321563721,
            0.9970842599868774
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9992204308509827,
        "body": "    return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "failed: local variable 'num' referenced before assignment",
        "similarities": [
            0.9991730451583862,
            0.9992204308509827,
            0.9985957741737366,
            0.9989945292472839,
            0.9987917542457581,
            0.9992151856422424,
            0.9987371563911438,
            0.9990161061286926,
            0.9989457726478577,
            0.997981607913971,
            0.9984765648841858,
            0.9985957741737366,
            0.9992203116416931,
            0.9992151856422424,
            0.9986385703086853,
            0.9992203116416931,
            0.9985957741737366,
            0.9992204308509827,
            0.9990161061286926,
            0.9991180300712585
        ]
    },
    "HumanEval/108": {
        "similarity": 0.997165858745575,
        "body": "    result = 0\n    for num in arr:\n        sum_digits = sum(int(digit) if digit != '-' else -int(digit[1:]) for digit in str(num))\n        if sum_digits > 0:\n            result += 1\n    return result",
        "result": "failed: invalid literal for int() with base 10: ''",
        "similarities": [
            0.9956757426261902,
            0.9965193867683411,
            0.9957973957061768,
            0.997165858745575,
            0.9914908409118652,
            0.9956757426261902,
            0.9963406324386597,
            0.9959664940834045,
            0.9965193867683411,
            0.9964237213134766,
            0.9956757426261902,
            0.9971573352813721,
            0.9956757426261902,
            0.9956757426261902,
            0.9958766102790833,
            0.9956358075141907,
            0.9945787191390991,
            0.9958766102790833,
            0.9929777383804321,
            0.9964238405227661
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9984474182128906,
        "body": "    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        if all(arr[j] <= arr[(j + 1) % n] for j in range(n - 1)):\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False",
        "result": "passed",
        "similarities": [
            0.9984176158905029,
            0.997726559638977,
            0.9974161386489868,
            0.9952382445335388,
            0.9972429871559143,
            0.9950495362281799,
            0.9975385069847107,
            0.9978744387626648,
            0.9984176158905029,
            0.9963166117668152,
            0.997726559638977,
            0.9963117837905884,
            0.9984176158905029,
            0.9984176158905029,
            0.9984176158905029,
            0.9970877766609192,
            0.9984474182128906,
            0.9974033832550049,
            0.9961040019989014,
            0.9984474182128906
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9987096190452576,
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    return \"YES\" if even_count_in_lst2 >= odd_count else \"NO\"",
        "result": "passed",
        "similarities": [
            0.998557448387146,
            0.9973453879356384,
            0.9985395669937134,
            0.9985395669937134,
            0.9987096190452576,
            0.9973747134208679,
            0.9985476136207581,
            0.9987096190452576,
            0.9982926249504089,
            0.998046875,
            0.99859619140625,
            0.9938693642616272,
            0.9980016946792603,
            0.9982926249504089,
            0.9973453879356384,
            0.9986170530319214,
            0.9986050128936768,
            0.9986789226531982,
            0.9986789226531982,
            0.9986159801483154
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9981554746627808,
        "body": "    if not test:\n        return {}\n    \n    letter_counts = {}\n    for letter in test.split():\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n    \n    max_count = max(letter_counts.values()) if letter_counts else 0\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result",
        "result": "passed",
        "similarities": [
            0.9973781108856201,
            0.998083233833313,
            0.9979029297828674,
            0.9963983297348022,
            0.9976548552513123,
            0.9979007244110107,
            0.9977532625198364,
            0.9980747699737549,
            0.992527425289154,
            0.9960771203041077,
            0.9977046847343445,
            0.9978182911872864,
            0.9970349669456482,
            0.9962248802185059,
            0.996264636516571,
            0.9981554746627808,
            0.996820330619812,
            0.9974004030227661,
            0.9975603818893433,
            0.9974429607391357
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9955222606658936,
        "body": "    chars_to_remove = set(c)\n    result = ''.join(char for char in s if char not in chars_to_remove)\n    reversed_result = result[::-1]\n    is_palindrome = result == reversed_result\n    return (result, is_palindrome)",
        "result": "passed",
        "similarities": [
            0.9902739524841309,
            0.9937657117843628,
            0.9937657117843628,
            0.9881433248519897,
            0.9951376914978027,
            0.9937657713890076,
            0.9937657713890076,
            0.9937657713890076,
            0.9937657117843628,
            0.9851552844047546,
            0.9952278137207031,
            0.9902739524841309,
            0.9902739524841309,
            0.9925344586372375,
            0.9936514496803284,
            0.9951376914978027,
            0.9955090880393982,
            0.9955222606658936,
            0.9915426969528198,
            0.9938217997550964
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9991717338562012,
        "body": "    output = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        output.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return output",
        "result": "passed",
        "similarities": [
            0.997968852519989,
            0.9990776777267456,
            0.9990838766098022,
            0.9953781962394714,
            0.9991717338562012,
            0.9990794658660889,
            0.9990776777267456,
            0.9991717338562012,
            0.9991488456726074,
            0.999170184135437,
            0.9977729320526123,
            0.9990838766098022,
            0.9991489052772522,
            0.9979005455970764,
            0.9991617798805237,
            0.9991717338562012,
            0.9991463422775269,
            0.9975770711898804,
            0.9973227977752686,
            0.999137282371521
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9955635070800781,
        "body": "    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum",
        "result": "passed",
        "similarities": [
            0.9948596954345703,
            0.9928914904594421,
            0.9940295815467834,
            0.9937456846237183,
            0.9934208393096924,
            0.9955316185951233,
            0.9955316185951233,
            0.9937456846237183,
            0.9955316185951233,
            0.9928914904594421,
            0.975010335445404,
            0.9955316185951233,
            0.9955635070800781,
            0.9928914904594421,
            0.9948596954345703,
            0.9937456846237183,
            0.993534505367279,
            0.9941216707229614,
            0.9940295815467834,
            0.9955316185951233
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9989076852798462,
        "body": "    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error",
        "similarities": [
            0.9989076852798462,
            0.9989076852798462,
            0.9979796409606934,
            0.9979796409606934,
            0.9978736042976379,
            0.9979796409606934,
            0.9989076852798462,
            0.9989076852798462,
            0.9989076852798462,
            0.9989076852798462,
            0.9989076852798462,
            0.9989076852798462,
            0.9989076852798462,
            0.9979796409606934,
            0.9979796409606934,
            0.9989076852798462,
            0.9989076852798462,
            0.9979795217514038,
            0.9966128468513489,
            0.9979796409606934
        ]
    },
    "HumanEval/116": {
        "similarity": 0.999021053314209,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            0.9987521767616272,
            0.9987521767616272,
            0.999021053314209,
            0.9987521767616272,
            0.999021053314209,
            0.9987521767616272,
            0.9987521767616272,
            0.999021053314209,
            0.999021053314209,
            0.999021053314209,
            0.9987521767616272,
            0.9978129863739014,
            0.999021053314209,
            0.9987521767616272,
            0.999021053314209,
            0.999021053314209,
            0.999021053314209,
            0.999021053314209,
            0.999021053314209,
            0.9987521767616272
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9986156821250916,
        "body": "    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n\n    return result",
        "result": "passed",
        "similarities": [
            0.998468816280365,
            0.9977091550827026,
            0.9983677268028259,
            0.9975009560585022,
            0.9985116720199585,
            0.9982189536094666,
            0.9982588887214661,
            0.9985277056694031,
            0.9963734149932861,
            0.9975863099098206,
            0.9960305094718933,
            0.9972084760665894,
            0.9982223510742188,
            0.9977770447731018,
            0.9961830973625183,
            0.998182475566864,
            0.9985277056694031,
            0.9978344440460205,
            0.9986156821250916,
            0.9981666207313538
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9977238178253174,
        "body": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed",
        "similarities": [
            0.9977237582206726,
            0.9967394471168518,
            0.9975682497024536,
            0.9977237582206726,
            0.9977237582206726,
            0.997325599193573,
            0.997711181640625,
            0.993628740310669,
            0.9977121949195862,
            0.9977237582206726,
            0.9977238178253174,
            0.9975682497024536,
            0.997325599193573,
            0.997711181640625,
            0.997711181640625,
            0.9977238178253174,
            0.9967394471168518,
            0.9933690428733826,
            0.9942654371261597,
            0.9923597574234009
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9991084933280945,
        "body": "    for order in [lst, lst[::-1]]:\n        balance = 0\n        for char in order[0] + order[1]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'",
        "result": "passed",
        "similarities": [
            0.9971369504928589,
            0.9979547262191772,
            0.9990068078041077,
            0.9991084933280945,
            0.9977477192878723,
            0.999019205570221,
            0.9990068078041077,
            0.9991084933280945,
            0.999019205570221,
            0.9985663890838623,
            0.9985426664352417,
            0.9970043897628784,
            0.9991084933280945,
            0.9991084933280945,
            0.9991084933280945,
            0.9971430897712708,
            0.9991084933280945,
            0.9991084933280945,
            0.9990068078041077,
            0.9989880323410034
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9967367053031921,
        "body": "    arr.sort()\n    return arr[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9889875054359436,
            0.9896304607391357,
            0.9889875054359436,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9920300245285034,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9896305799484253,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921,
            0.9967367053031921
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9964467883110046,
        "body": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    return total",
        "result": "passed",
        "similarities": [
            0.9962244629859924,
            0.9959820508956909,
            0.9964461326599121,
            0.9963501691818237,
            0.9815834760665894,
            0.9954106211662292,
            0.9964461326599121,
            0.9964461326599121,
            0.9962024688720703,
            0.9963501691818237,
            0.9961920380592346,
            0.9961913228034973,
            0.9815835356712341,
            0.9964467883110046,
            0.9949589967727661,
            0.9964461326599121,
            0.9964461326599121,
            0.9962497353553772,
            0.9815834760665894,
            0.9964461326599121
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9924326539039612,
        "body": "    total = 0\n    for i in range(k):\n        if arr[i] >= -99 and arr[i] <= 99:\n            total += arr[i]\n    return total",
        "result": "passed",
        "similarities": [
            0.9923509359359741,
            0.9924326539039612,
            0.9922197461128235,
            0.992064356803894,
            0.9923509359359741,
            0.9923509359359741,
            0.9924326539039612,
            0.9923509359359741,
            0.9922196269035339,
            0.9923510551452637,
            0.9921694397926331,
            0.9923510551452637,
            0.9924326539039612,
            0.9908738732337952,
            0.9923509359359741,
            0.9922197461128235,
            0.9923509359359741,
            0.9924326539039612,
            0.9923509359359741,
            0.9923509359359741
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9957939982414246,
        "body": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers",
        "result": "passed",
        "similarities": [
            0.9937224388122559,
            0.9954267144203186,
            0.9945355653762817,
            0.9957939982414246,
            0.9726610779762268,
            0.9954244494438171,
            0.9948264956474304,
            0.9947041869163513,
            0.9937224388122559,
            0.9938222765922546,
            0.9952312111854553,
            0.9941972494125366,
            0.9767839312553406,
            0.9949634075164795,
            0.9954357147216797,
            0.9948158264160156,
            0.995339035987854,
            0.9944839477539062,
            0.9954267144203186,
            0.9954357147216797
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9961653351783752,
        "body": "    if not date:\n        return False\n    \n    parts = date.split('-')\n    \n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or (month == 2 and day > 29) or ((month in [4, 6, 9, 11]) and day > 30):\n        return False\n    \n    return True",
        "result": "failed: ",
        "similarities": [
            0.9961653351783752,
            0.9931048154830933,
            0.9953932762145996,
            0.9946475625038147,
            0.9865462779998779,
            0.9946722984313965,
            0.9941793084144592,
            0.9921576976776123,
            0.9953802227973938,
            0.9955145120620728,
            0.9961487650871277,
            0.9943432211875916,
            0.9956632852554321,
            0.9952253103256226,
            0.994909405708313,
            0.981980562210083,
            0.9936267733573914,
            0.9939119219779968,
            0.9947566986083984,
            0.9955734610557556
        ]
    },
    "HumanEval/125": {
        "similarity": 0.998782217502594,
        "body": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)",
        "result": "failed: ",
        "similarities": [
            0.9970625638961792,
            0.9987659454345703,
            0.9984014630317688,
            0.9984315633773804,
            0.997024655342102,
            0.9983492493629456,
            0.9987325072288513,
            0.998782217502594,
            0.997024655342102,
            0.9984014630317688,
            0.9987325072288513,
            0.9937874674797058,
            0.998782217502594,
            0.9984315633773804,
            0.9971557259559631,
            0.998782217502594,
            0.9984014630317688,
            0.9987325072288513,
            0.998782217502594,
            0.9984315633773804
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9955161213874817,
        "body": "    if not lst:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if i >= 2 and lst[i] == lst[i - 1] == lst[i - 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9936147928237915,
            0.9932624697685242,
            0.9942631125450134,
            0.9913080930709839,
            0.9933574199676514,
            0.9924482107162476,
            0.9955161213874817,
            0.9933574199676514,
            0.9933574199676514,
            0.9917082786560059,
            0.9954289197921753,
            0.9927093386650085,
            0.9912241101264954,
            0.9952111840248108,
            0.9916033744812012,
            0.9927093386650085,
            0.9933574199676514,
            0.9948890209197998,
            0.9917426705360413,
            0.993759274482727
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9998970031738281,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9998342394828796,
            0.9998970031738281,
            0.9998970031738281,
            0.9998546242713928,
            0.9998970031738281,
            0.9998970031738281,
            0.9998970031738281,
            0.9998581409454346,
            0.9997959136962891,
            0.9997357726097107,
            0.9998337626457214,
            0.9998825788497925,
            0.9998970031738281,
            0.9998970031738281,
            0.9998970031738281,
            0.9998970031738281,
            0.9998970031738281,
            0.9997985363006592,
            0.9998825788497925,
            0.999186098575592
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9992719888687134,
        "body": "    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n        \n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product",
        "result": "passed",
        "similarities": [
            0.9989053010940552,
            0.9991315603256226,
            0.9992539286613464,
            0.998562753200531,
            0.9990767240524292,
            0.9991903901100159,
            0.9986032247543335,
            0.9988030791282654,
            0.9992719292640686,
            0.9985860586166382,
            0.9992719292640686,
            0.9991350769996643,
            0.9990551471710205,
            0.9988309144973755,
            0.9990010857582092,
            0.9986790418624878,
            0.9989767670631409,
            0.9992719888687134,
            0.9992719888687134,
            0.9992719888687134
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9982033967971802,
        "body": "    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    best_path = [float('inf')] * k\n    \n        nonlocal best_path\n        if len(path) == k:\n            if path < best_path:\n                best_path = path.copy()\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n    \n    return best_path",
        "result": "failed: unexpected indent (<string>, line 36)",
        "similarities": [
            0.9959999918937683,
            0.997702956199646,
            0.9969412088394165,
            0.9980699419975281,
            0.9968793988227844,
            0.9973939657211304,
            0.9980006814002991,
            0.9977314472198486,
            0.998060941696167,
            0.9965962767601013,
            0.9971102476119995,
            0.9977385997772217,
            0.9974291920661926,
            0.9967406392097473,
            0.9976455569267273,
            0.9957887530326843,
            0.9964146018028259,
            0.9972638487815857,
            0.9982033967971802,
            0.9979472756385803
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9982616901397705,
        "body": "    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i / 2\n        else:\n            next_value = sequence[i - 1] + sequence[i - 2] + sequence[i - 1]\n        sequence.append(next_value)\n    \n    return sequence",
        "result": "failed: ",
        "similarities": [
            0.9979027509689331,
            0.9982616901397705,
            0.9973429441452026,
            0.9981845021247864,
            0.9970265626907349,
            0.9978461265563965,
            0.9981135129928589,
            0.997475802898407,
            0.997076153755188,
            0.9975409507751465,
            0.9976121783256531,
            0.997314453125,
            0.9975317716598511,
            0.9981870055198669,
            0.9970605969429016,
            0.9971883893013,
            0.9981763958930969,
            0.9981405138969421,
            0.9972375631332397,
            0.9970499277114868
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9997733235359192,
        "body": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed",
        "similarities": [
            0.9996702075004578,
            0.9997283816337585,
            0.9996702075004578,
            0.9997555613517761,
            0.9996616244316101,
            0.9997733235359192,
            0.9997733235359192,
            0.9997372031211853,
            0.9997733235359192,
            0.9996616244316101,
            0.9997733235359192,
            0.9996702075004578,
            0.9996702075004578,
            0.9997283816337585,
            0.9997372031211853,
            0.9997372031211853,
            0.9997555613517761,
            0.9997733235359192,
            0.9997372031211853,
            0.9996616244316101
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9991360902786255,
        "body": "    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    return nested",
        "result": "failed: ",
        "similarities": [
            0.9984673261642456,
            0.9987841248512268,
            0.9989023804664612,
            0.9984225034713745,
            0.9989456534385681,
            0.9988560080528259,
            0.9991360902786255,
            0.9985083341598511,
            0.9990617632865906,
            0.9988216757774353,
            0.9984867572784424,
            0.9988216757774353,
            0.9988168478012085,
            0.9989440441131592,
            0.9988560080528259,
            0.9961619973182678,
            0.9989877343177795,
            0.9990019798278809,
            0.9984867572784424,
            0.9984867572784424
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9933829307556152,
        "body": "import math\n\n    return sum(int(math.ceil(num)) ** 2 for num in lst)",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9930140972137451,
            0.9844406843185425,
            0.9930140972137451,
            0.9834243655204773,
            0.9930140972137451,
            0.9818512797355652,
            0.9930140972137451,
            0.9930140972137451,
            0.9930140972137451,
            0.993369460105896,
            0.9856590628623962,
            0.9834243655204773,
            0.9856590628623962,
            0.9930140972137451,
            0.9930140972137451,
            0.993119478225708,
            0.9933829307556152,
            0.993369460105896,
            0.9925679564476013,
            0.9925679564476013
        ]
    },
    "HumanEval/134": {
        "similarity": 0.99735027551651,
        "body": "    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9970777630805969,
            0.995191752910614,
            0.9951057434082031,
            0.9973426461219788,
            0.9964957237243652,
            0.9973323345184326,
            0.9951149821281433,
            0.9967671632766724,
            0.9970313906669617,
            0.9973502159118652,
            0.993098795413971,
            0.9967906475067139,
            0.9973502159118652,
            0.9941117167472839,
            0.9965924024581909,
            0.9967330098152161,
            0.9967671632766724,
            0.9939982891082764,
            0.99735027551651,
            0.99735027551651
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9994884133338928,
        "body": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "passed",
        "similarities": [
            0.9992081522941589,
            0.9993557333946228,
            0.9994884133338928,
            0.9993557333946228,
            0.9994633197784424,
            0.9994633197784424,
            0.9994633197784424,
            0.9994884133338928,
            0.9994633197784424,
            0.9994633197784424,
            0.9994633197784424,
            0.9994884133338928,
            0.9992081522941589,
            0.9994884133338928,
            0.9993557333946228,
            0.9991604685783386,
            0.9994633197784424,
            0.9993557333946228,
            0.9994884133338928,
            0.9993557333946228
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9941344261169434,
        "body": "    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    \n    a = max(neg_ints) if neg_ints else None\n    b = min(pos_ints) if pos_ints else None\n    \n    return (a, b)",
        "result": "passed",
        "similarities": [
            0.9933854341506958,
            0.9934899210929871,
            0.9932261109352112,
            0.9901745319366455,
            0.9903925657272339,
            0.99359130859375,
            0.9885152578353882,
            0.9915013909339905,
            0.9924017190933228,
            0.9875550866127014,
            0.9875550866127014,
            0.9922615885734558,
            0.9890748858451843,
            0.9941344261169434,
            0.9914665222167969,
            0.9925424456596375,
            0.9934934377670288,
            0.9938891530036926,
            0.9898772239685059,
            0.9934934377670288
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9949589967727661,
        "body": "    if isinstance(a, str): a = a.replace(',', '.')\n    if isinstance(b, str): b = b.replace(',', '.')\n    \n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    if a_val == b_val: return None\n    if a_val < b_val:  return b\n    return a",
        "result": "failed: ",
        "similarities": [
            0.9902785420417786,
            0.9942870140075684,
            0.9914941191673279,
            0.9919393658638,
            0.9729195833206177,
            0.9931126832962036,
            0.9946688413619995,
            0.9933742880821228,
            0.9947208762168884,
            0.9949589967727661,
            0.9943761229515076,
            0.992287278175354,
            0.9915652275085449,
            0.9928438067436218,
            0.9947488903999329,
            0.9916648864746094,
            0.9916946291923523,
            0.9940819144248962,
            0.9942641854286194,
            0.9942811727523804
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9932051301002502,
        "body": "    for i in range(2, n//4 + 1):\n        for j in range(i, n//3 + 1):\n            for k in range(j, n//2 + 1):\n                l = n - (i + j + k)\n                if l >= k and l % 2 == 0:\n                    return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9722155332565308,
            0.9923927187919617,
            0.9924899935722351,
            0.9914189577102661,
            0.9927340149879456,
            0.9932051301002502,
            0.9914189577102661,
            0.9930248260498047,
            0.9926277995109558,
            0.9722155332565308,
            0.9918664693832397,
            0.9919291138648987,
            0.9920961260795593,
            0.9930415153503418,
            0.9918403625488281,
            0.9722155332565308,
            0.9722155332565308,
            0.9924899935722351,
            0.9920495748519897,
            0.9931954741477966
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9981464743614197,
        "body": "import math\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: unexpected indent (<string>, line 16)",
        "similarities": [
            0.9981464743614197,
            0.9981464743614197,
            0.9981271624565125,
            0.9981464743614197,
            0.9941017031669617,
            0.9941017031669617,
            0.9981464743614197,
            0.9981464743614197,
            0.9981464743614197,
            0.9959427714347839,
            0.9981464743614197,
            0.9981464743614197,
            0.9981464743614197,
            0.9941017031669617,
            0.9936996102333069,
            0.9981464743614197,
            0.9981271624565125,
            0.9981464743614197,
            0.9981464743614197,
            0.9981464743614197
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9983002543449402,
        "body": "    result = []\n    consecutive_spaces = 0\n\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append(\"-\")\n            elif consecutive_spaces > 0:\n                result.extend([\"_\"] * consecutive_spaces)\n            result.append(char)\n            consecutive_spaces = 0\n\n    if consecutive_spaces > 2:\n        result.append(\"-\")\n    elif consecutive_spaces > 0:\n        result.extend([\"_\"] * consecutive_spaces)\n\n    return \"\".join(result)",
        "result": "passed",
        "similarities": [
            0.994002103805542,
            0.9980515837669373,
            0.9980135560035706,
            0.9980477094650269,
            0.9980474710464478,
            0.9982343912124634,
            0.9945657849311829,
            0.9980135560035706,
            0.9981657266616821,
            0.9980135560035706,
            0.9978404641151428,
            0.9975967407226562,
            0.9983002543449402,
            0.9980135560035706,
            0.9975997805595398,
            0.9937406778335571,
            0.9978011250495911,
            0.9980135560035706,
            0.9978011250495911,
            0.9980135560035706
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9988919496536255,
        "body": "    valid_extensions = ['txt', 'exe', 'dll']\n    parts = file_name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    prefix, extension = parts\n    \n    if not prefix or not prefix[0].isalpha():\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    if digit_count > 3 or extension not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'",
        "result": "passed",
        "similarities": [
            0.9972807168960571,
            0.9987186789512634,
            0.9988919496536255,
            0.9980917572975159,
            0.9986353516578674,
            0.9986479878425598,
            0.9979777932167053,
            0.9986706972122192,
            0.9985292553901672,
            0.9987558126449585,
            0.9985807538032532,
            0.9988919496536255,
            0.9987509846687317,
            0.998711347579956,
            0.9984261393547058,
            0.9975390434265137,
            0.9976599812507629,
            0.9984601736068726,
            0.9986164569854736,
            0.9980247020721436
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9993420839309692,
        "body": "    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += value ** 3\n    return total_sum",
        "result": "failed: ",
        "similarities": [
            0.9992878437042236,
            0.9989680051803589,
            0.9993181824684143,
            0.9991104006767273,
            0.999273419380188,
            0.9993181824684143,
            0.9991878867149353,
            0.999273419380188,
            0.9993420839309692,
            0.9990662336349487,
            0.9990662336349487,
            0.9986748099327087,
            0.9989445209503174,
            0.9984599947929382,
            0.9992804527282715,
            0.9992774128913879,
            0.9993181824684143,
            0.9990249276161194,
            0.9993420839309692,
            0.9993181824684143
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9993798136711121,
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9993635416030884,
            0.9986789226531982,
            0.9993762969970703,
            0.9993798136711121,
            0.9993798136711121,
            0.999284029006958,
            0.9991030693054199,
            0.998873770236969,
            0.9982795715332031,
            0.9983611106872559,
            0.999284029006958,
            0.9993798136711121,
            0.9993798136711121,
            0.9993635416030884,
            0.999284029006958,
            0.9993098378181458,
            0.999098002910614,
            0.998119056224823,
            0.999284029006958,
            0.9993635416030884
        ]
    },
    "HumanEval/144": {
        "similarity": 0.997086763381958,
        "body": "    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n    return result_num % result_denom == 0",
        "result": "passed",
        "similarities": [
            0.9952616691589355,
            0.9942559003829956,
            0.9969668984413147,
            0.9951380491256714,
            0.9941997528076172,
            0.994211733341217,
            0.9947044253349304,
            0.9959927797317505,
            0.9940283894538879,
            0.9956924319267273,
            0.9962718486785889,
            0.9952616691589355,
            0.9951380491256714,
            0.9969668984413147,
            0.9964709877967834,
            0.9965091347694397,
            0.9955230355262756,
            0.9943388104438782,
            0.997086763381958,
            0.9966356158256531
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9982775449752808,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.994383692741394,
            0.9971258044242859,
            0.9982775449752808,
            0.9899164438247681,
            0.9936938881874084,
            0.9977543354034424,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9982775449752808,
            0.9971258044242859,
            0.9982775449752808
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9976551532745361,
        "body": "    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9968546628952026,
            0.9973658323287964,
            0.9966574311256409,
            0.9962068796157837,
            0.9976551532745361,
            0.9962300062179565,
            0.9968516826629639,
            0.9966574311256409,
            0.9968516826629639,
            0.9976551532745361,
            0.9965963959693909,
            0.9959638714790344,
            0.996232807636261,
            0.9961282014846802,
            0.9968516826629639,
            0.9976551532745361,
            0.9917674660682678,
            0.9968516826629639,
            0.993912935256958,
            0.9964112639427185
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9999050498008728,
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9996958374977112,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9995611310005188,
            0.9999050498008728,
            0.9996958374977112,
            0.9999050498008728,
            0.999897837638855,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9999050498008728,
            0.9995730519294739,
            0.9999050498008728,
            0.9999050498008728,
            0.9995225667953491
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9983309507369995,
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    start, end = min(index1, index2) + 1, max(index1, index2)\n    \n    return tuple(planets[start:end])",
        "result": "passed",
        "similarities": [
            0.9968118071556091,
            0.9977569580078125,
            0.9956892132759094,
            0.9963399767875671,
            0.9979425072669983,
            0.9971100687980652,
            0.9978665113449097,
            0.9974845051765442,
            0.9980406761169434,
            0.9972990155220032,
            0.9983309507369995,
            0.997868001461029,
            0.9982139468193054,
            0.9974309802055359,
            0.9968308210372925,
            0.9972821474075317,
            0.997730553150177,
            0.9975702166557312,
            0.997868001461029,
            0.9978659749031067
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9983795881271362,
        "body": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))",
        "result": "passed",
        "similarities": [
            0.9981117248535156,
            0.9970391988754272,
            0.9983795881271362,
            0.9970579743385315,
            0.9968135356903076,
            0.9981118440628052,
            0.9981118440628052,
            0.9932504296302795,
            0.9979196190834045,
            0.9983795881271362,
            0.9968135356903076,
            0.9981117248535156,
            0.9970391988754272,
            0.9970391988754272,
            0.9974516034126282,
            0.9970391988754272,
            0.998299241065979,
            0.9958928823471069,
            0.9970579743385315,
            0.9970579743385315
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9988310933113098,
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9975133538246155,
            0.9983420968055725,
            0.9983420968055725,
            0.9938860535621643,
            0.9988310933113098,
            0.9988310933113098,
            0.9988310933113098,
            0.9988310933113098,
            0.9988190531730652,
            0.9988310933113098,
            0.9983420968055725,
            0.9983420968055725,
            0.9988310933113098,
            0.9988190531730652,
            0.9983501434326172,
            0.9984572529792786,
            0.9983420968055725,
            0.9984572529792786,
            0.9984169006347656,
            0.993804931640625
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9998903870582581,
        "body": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    return result",
        "result": "passed",
        "similarities": [
            0.9998903870582581,
            0.9998903870582581,
            0.9998735189437866,
            0.9998903870582581,
            0.9998903870582581,
            0.9994919300079346,
            0.9998903870582581,
            0.9998735189437866,
            0.9998903870582581,
            0.9998735189437866,
            0.9998735189437866,
            0.9998735189437866,
            0.9998903870582581,
            0.9998735189437866,
            0.9998735189437866,
            0.9992402791976929,
            0.9998903870582581,
            0.9998903870582581,
            0.9998903870582581,
            0.9998431205749512
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9959067106246948,
        "body": "    result = []\n    for i in range(len(guess)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "result": "passed",
        "similarities": [
            0.9957237243652344,
            0.9934007525444031,
            0.9862823486328125,
            0.9941749572753906,
            0.9956562519073486,
            0.9937615990638733,
            0.9944103956222534,
            0.9862823486328125,
            0.9957237243652344,
            0.9959067106246948,
            0.9862823486328125,
            0.9957237243652344,
            0.9955271482467651,
            0.9957014322280884,
            0.9936146140098572,
            0.9957484006881714,
            0.9959067106246948,
            0.9934007525444031,
            0.9862823486328125,
            0.9932529926300049
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9991475343704224,
        "body": "    strongest_extension = ''\n    highest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > highest_strength or (strength == highest_strength and not strongest_extension):\n            strongest_extension = extension\n            highest_strength = strength\n    \n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "similarities": [
            0.9990012645721436,
            0.9991238117218018,
            0.998945415019989,
            0.999123215675354,
            0.9987923502922058,
            0.999065101146698,
            0.9987974762916565,
            0.9990502595901489,
            0.9978401064872742,
            0.9990668892860413,
            0.9988533854484558,
            0.999052882194519,
            0.9981757998466492,
            0.99908846616745,
            0.9991475343704224,
            0.9991229176521301,
            0.997809886932373,
            0.9991112947463989,
            0.9978867769241333,
            0.999040424823761
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9988454580307007,
        "body": "    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9988454580307007,
            0.9980442523956299,
            0.9988454580307007,
            0.998757004737854,
            0.9988454580307007,
            0.9980442523956299,
            0.998757004737854,
            0.998757004737854,
            0.998757004737854,
            0.9988454580307007,
            0.9988454580307007,
            0.994587779045105,
            0.9969547986984253,
            0.998757004737854,
            0.9966647624969482,
            0.9982273578643799,
            0.997841477394104,
            0.9966647624969482,
            0.997841477394104,
            0.997841477394104
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9978344440460205,
        "body": "    num = abs(num)\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "similarities": [
            0.9973700642585754,
            0.9977701306343079,
            0.9975257515907288,
            0.9978344440460205,
            0.9959184527397156,
            0.9972666501998901,
            0.9977704286575317,
            0.9923619627952576,
            0.9977017641067505,
            0.9974415302276611,
            0.9973916411399841,
            0.9959044456481934,
            0.9973700642585754,
            0.9977704286575317,
            0.9976678490638733,
            0.9972666501998901,
            0.9977704286575317,
            0.9959044456481934,
            0.9976339936256409,
            0.99462890625
        ]
    },
    "HumanEval/156": {
        "similarity": 0.995305597782135,
        "body": "    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result",
        "result": "passed",
        "similarities": [
            0.9946767687797546,
            0.9931963682174683,
            0.9941388368606567,
            0.9918208122253418,
            0.9941388368606567,
            0.9922063946723938,
            0.9893301725387573,
            0.9941015839576721,
            0.9941388368606567,
            0.9949741363525391,
            0.995305597782135,
            0.9923044443130493,
            0.9942597150802612,
            0.9949672222137451,
            0.9948776960372925,
            0.9945706129074097,
            0.9895142912864685,
            0.9945706129074097,
            0.9922063946723938,
            0.9896368980407715
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9988969564437866,
        "body": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "result": "passed",
        "similarities": [
            0.9988969564437866,
            0.9988969564437866,
            0.9988969564437866,
            0.9900615215301514,
            0.9988778829574585,
            0.9988969564437866,
            0.9983916282653809,
            0.9907279014587402,
            0.9988778829574585,
            0.9988969564437866,
            0.9988969564437866,
            0.9988778829574585,
            0.9988969564437866,
            0.9988778829574585,
            0.9988969564437866,
            0.9988969564437866,
            0.9988969564437866,
            0.9988969564437866,
            0.9984976053237915,
            0.9988969564437866
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9993491768836975,
        "body": "    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word",
        "result": "passed",
        "similarities": [
            0.9993491172790527,
            0.9993491172790527,
            0.9991791248321533,
            0.997765302658081,
            0.9993491172790527,
            0.9986933469772339,
            0.9993491172790527,
            0.9992124438285828,
            0.9992806315422058,
            0.9976122975349426,
            0.9986576437950134,
            0.9993491768836975,
            0.9993491172790527,
            0.9993491172790527,
            0.9993491172790527,
            0.9993491172790527,
            0.9993491172790527,
            0.9983708262443542,
            0.9983775615692139,
            0.9992587566375732
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9994794130325317,
        "body": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed",
        "similarities": [
            0.9994792938232422,
            0.9992792010307312,
            0.9994794130325317,
            0.9994794130325317,
            0.9994794130325317,
            0.9994794130325317,
            0.9976776838302612,
            0.9992792010307312,
            0.9994794130325317,
            0.9994794130325317,
            0.9994794130325317,
            0.9976776838302612,
            0.9994794130325317,
            0.9955886006355286,
            0.9994794130325317,
            0.9994794130325317,
            0.9994792938232422,
            0.9994792938232422,
            0.9994794130325317,
            0.9993253946304321
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9924260377883911,
        "body": "    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9892202615737915,
            0.99237060546875,
            0.99237060546875,
            0.99237060546875,
            0.9917426705360413,
            0.99237060546875,
            0.99237060546875,
            0.9891850352287292,
            0.9922581911087036,
            0.9924260377883911,
            0.9850735068321228,
            0.99237060546875,
            0.9801884889602661,
            0.99237060546875,
            0.9924260377883911,
            0.9810964465141296,
            0.99237060546875,
            0.99237060546875,
            0.9663517475128174,
            0.99237060546875
        ]
    },
    "HumanEval/161": {
        "similarity": 0.997075617313385,
        "body": "    has_letters = False\n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result) if has_letters else s[::-1]",
        "result": "passed",
        "similarities": [
            0.9957931041717529,
            0.9967143535614014,
            0.9967342019081116,
            0.9956650137901306,
            0.997075617313385,
            0.9969004392623901,
            0.9942671060562134,
            0.9966800212860107,
            0.9880881905555725,
            0.9968103170394897,
            0.9909763336181641,
            0.9968103170394897,
            0.9968103170394897,
            0.9947826862335205,
            0.9965395927429199,
            0.9968103170394897,
            0.9957931041717529,
            0.9968973398208618,
            0.9951378703117371,
            0.9945970177650452
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9989760518074036,
        "body": "import hashlib\n\n    if text == '':\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9989355206489563,
            0.9988998770713806,
            0.9985807538032532,
            0.9989760518074036,
            0.9989760518074036,
            0.9988998770713806,
            0.9988998770713806,
            0.9989355206489563,
            0.9989355206489563,
            0.9988998770713806,
            0.9989355206489563,
            0.9988998770713806,
            0.9989760518074036,
            0.9986724853515625,
            0.9988998770713806,
            0.9989355206489563,
            0.9988998770713806,
            0.9989355206489563,
            0.9985905885696411,
            0.9985905885696411
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9955765604972839,
        "body": "    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits",
        "result": "failed: Test 1",
        "similarities": [
            0.9917085766792297,
            0.9939893484115601,
            0.9942576885223389,
            0.9955765604972839,
            0.9952778220176697,
            0.9938841462135315,
            0.9952311515808105,
            0.9955005645751953,
            0.9955765604972839,
            0.9952311515808105,
            0.9939894676208496,
            0.9907374978065491,
            0.9864943623542786,
            0.9894442558288574,
            0.9955765604972839,
            0.9947395324707031,
            0.9955765604972839,
            0.9955005645751953,
            0.9952778220176697,
            0.9923720359802246
        ]
    }
}