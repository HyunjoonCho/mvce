{
    "HumanEval/0": {
        "similarity": 0.9985325336456299,
        "body": "for current_index in range(len(numbers) - 1):\n    for next_index in range(current_index + 1, len(numbers)):\n        if numbers[current_index] - numbers[next_index] <= threshold:\n            return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9983078837394714,
            0.9956177473068237,
            0.9970937967300415,
            0.997371256351471,
            0.9985097646713257,
            0.9983078837394714,
            0.9984939098358154,
            0.9973132610321045,
            0.9984514117240906,
            0.9983686208724976,
            0.9984918832778931,
            0.9984343647956848,
            0.9960311055183411,
            0.9983291625976562,
            0.9984575510025024,
            0.9982352256774902,
            0.9983083009719849,
            0.9973132610321045,
            0.9985325336456299,
            0.9971522092819214
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9979045391082764,
        "body": "    result = []\n    group = ''\n    count = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            count += 1\n            group += char\n        elif char == ')':\n            count -= 1\n            group += char\n            if count == 0:\n                result.append(group)\n                group = ''\n\n    return result",
        "result": "passed",
        "similarities": [
            0.9971634745597839,
            0.9975610375404358,
            0.9964796304702759,
            0.9962204694747925,
            0.9979045391082764,
            0.9937880635261536,
            0.9972220063209534,
            0.9975835084915161,
            0.9974643588066101,
            0.9964121580123901,
            0.9976035952568054,
            0.9975025057792664,
            0.9969912171363831,
            0.9976199269294739,
            0.9975508451461792,
            0.9947530627250671,
            0.9930838346481323,
            0.9973363280296326,
            0.9969139099121094,
            0.9976685047149658
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9963836669921875,
        "body": "    decimal_part = number - int(number)\n    return decimal_part",
        "result": "passed",
        "similarities": [
            0.996368944644928,
            0.996368944644928,
            0.9930605888366699,
            0.994308352470398,
            0.9934166669845581,
            0.996368944644928,
            0.9914124011993408,
            0.9921767711639404,
            0.9963836669921875,
            0.990321934223175,
            0.993811845779419,
            0.996368944644928,
            0.9921939373016357,
            0.996368944644928,
            0.9929496645927429,
            0.996368944644928,
            0.996368944644928,
            0.9934166669845581,
            0.996368944644928,
            0.9945553541183472
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9989362359046936,
        "body": "balance = 0\n\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\n\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "similarities": [
            0.998936116695404,
            0.998667299747467,
            0.9989362359046936,
            0.998667299747467,
            0.998936116695404,
            0.998667299747467,
            0.998936116695404,
            0.9963425993919373,
            0.9989362359046936,
            0.998667299747467,
            0.9989362359046936,
            0.998667299747467,
            0.9989362359046936,
            0.9989362359046936,
            0.998667299747467,
            0.9989362359046936,
            0.998667299747467,
            0.998667299747467,
            0.9989362359046936,
            0.9936429262161255
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9952189922332764,
        "body": "sum_dev = 0.0\nfor num in numbers:\n    sum_dev += abs(num - sum(numbers) / len(numbers))\nreturn sum_dev / len(numbers)",
        "result": "failed: 'return' outside function (<string>, line 16)",
        "similarities": [
            0.9931563138961792,
            0.9922166466712952,
            0.9931722283363342,
            0.9934068322181702,
            0.9930379986763,
            0.9948804974555969,
            0.9952189922332764,
            0.9895473122596741,
            0.9939597249031067,
            0.9945665597915649,
            0.9944925904273987,
            0.9933239817619324,
            0.9884304404258728,
            0.9909332990646362,
            0.9933016896247864,
            0.9950448870658875,
            0.9921794533729553,
            0.9865166544914246,
            0.9930374026298523,
            0.9939597249031067
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9980807304382324,
        "body": "result = []\nfor number in numbers:\n    result.append(number)\n    if len(result) < len(numbers):\n        result.append(delimeter)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 16)",
        "similarities": [
            0.9967102408409119,
            0.9979065656661987,
            0.9978435039520264,
            0.9971875548362732,
            0.9980807304382324,
            0.9964687824249268,
            0.9971067309379578,
            0.9980222582817078,
            0.9973947405815125,
            0.9980222582817078,
            0.9953658580780029,
            0.990574300289154,
            0.9969293475151062,
            0.9977865815162659,
            0.9977421164512634,
            0.998008131980896,
            0.998008131980896,
            0.9967102408409119,
            0.9973267316818237,
            0.9965017437934875
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9990963339805603,
        "body": "    groups = paren_string.split()\n    results = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed",
        "similarities": [
            0.9983258843421936,
            0.9990963339805603,
            0.9990648031234741,
            0.9990867972373962,
            0.9980599284172058,
            0.9974153637886047,
            0.9988986849784851,
            0.9988026022911072,
            0.9987062215805054,
            0.9989333748817444,
            0.999027669429779,
            0.9985767006874084,
            0.9983843564987183,
            0.998665988445282,
            0.998661458492279,
            0.9987128376960754,
            0.9990963339805603,
            0.9989075064659119,
            0.9985026121139526,
            0.9989110231399536
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9980676770210266,
        "body": "filtered_strings = []\n\nfor string in strings:\n    if string <= substring:\n        filtered_strings.append(string)\n\nreturn filtered_strings",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9957360625267029,
            0.9980200529098511,
            0.9977007508277893,
            0.9976832866668701,
            0.9979837536811829,
            0.996681809425354,
            0.9977007508277893,
            0.9964166283607483,
            0.9973128437995911,
            0.9958853721618652,
            0.9956727623939514,
            0.9977007508277893,
            0.9977007508277893,
            0.9980676770210266,
            0.9980200529098511,
            0.9955317974090576,
            0.9977007508277893,
            0.9980200529098511,
            0.9973128437995911,
            0.9958000183105469
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9982295036315918,
        "body": "total_sum = 0\nproduct = 1\n\nfor number in numbers:\n    total_sum += number\n    product *= number\n\nreturn total_sum, product",
        "result": "failed: 'return' outside function (<string>, line 19)",
        "similarities": [
            0.9981167316436768,
            0.9947295188903809,
            0.9980688691139221,
            0.9930895566940308,
            0.9980688691139221,
            0.9979950785636902,
            0.9977573752403259,
            0.9981168508529663,
            0.9976975321769714,
            0.9979591369628906,
            0.9980688691139221,
            0.9980688691139221,
            0.9955129027366638,
            0.997933030128479,
            0.9981167316436768,
            0.9979950785636902,
            0.9979950785636902,
            0.9982295036315918,
            0.9951223134994507,
            0.9979950785636902
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9966456890106201,
        "body": "result = []\nmax_num = float('-inf')\nfor num in numbers:\n    max_num = max(max_num, num)\n    result.append(max_num)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9947785139083862,
            0.9960210919380188,
            0.9942594170570374,
            0.9942122101783752,
            0.9957895874977112,
            0.9960698485374451,
            0.9933831095695496,
            0.9959964752197266,
            0.9966456890106201,
            0.9966456890106201,
            0.995847225189209,
            0.9942536950111389,
            0.9965426921844482,
            0.9942536950111389,
            0.9959865212440491,
            0.9959646463394165,
            0.9957895874977112,
            0.9940622448921204,
            0.9966456890106201,
            0.9959866404533386
        ]
    },
    "HumanEval/10": {
        "similarity": 0.996658444404602,
        "body": "    for i in range(len(string)):\n        if string[:i+1] == string[:i+1][::-1]:\n            return string + string[i::-1]\n    return string",
        "result": "failed: ",
        "similarities": [
            0.996658444404602,
            0.9955341815948486,
            0.9962639212608337,
            0.9950754046440125,
            0.9956670999526978,
            0.9952256083488464,
            0.9937845468521118,
            0.9948167204856873,
            0.9964640736579895,
            0.9938398599624634,
            0.9944493174552917,
            0.9945229291915894,
            0.9944698810577393,
            0.9947109222412109,
            0.9936564564704895,
            0.9962638020515442,
            0.9958699941635132,
            0.9958468079566956,
            0.9947747588157654,
            0.9937284588813782
        ]
    },
    "HumanEval/11": {
        "similarity": 0.994268536567688,
        "body": "for i in range(len(a)):\n    if a[i] == b[i]:\n        result += '0'\n    else:\n        result += '1'\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9930628538131714,
            0.9879778623580933,
            0.9900882244110107,
            0.9913309812545776,
            0.9924278259277344,
            0.9937615990638733,
            0.985654354095459,
            0.9940257668495178,
            0.9940169453620911,
            0.9919213056564331,
            0.9922949075698853,
            0.9888280630111694,
            0.9914895296096802,
            0.9884127378463745,
            0.9913089275360107,
            0.994268536567688,
            0.9913309812545776,
            0.9914562106132507,
            0.9934894442558289,
            0.9928752779960632
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9969810843467712,
        "body": "  longest_string = None\n  for string in strings:\n    if longest_string is None or len(string) > len(longest_string):\n      longest_string = string\n  return longest_string",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9942044615745544,
            0.9964160919189453,
            0.9955026507377625,
            0.9963698983192444,
            0.996134340763092,
            0.9951425790786743,
            0.9955663084983826,
            0.9962171316146851,
            0.9962894916534424,
            0.9969810843467712,
            0.9898672699928284,
            0.9961886405944824,
            0.995880126953125,
            0.9961137175559998,
            0.9959231019020081,
            0.995808482170105,
            0.995133638381958,
            0.9959391355514526,
            0.9965742826461792,
            0.9958986043930054
        ]
    },
    "HumanEval/13": {
        "similarity": 0.99530029296875,
        "body": "    while a < b:\n        temp = a\n        a = b % a\n        b = temp\n    return a",
        "result": "failed: integer division or modulo by zero",
        "similarities": [
            0.9943480491638184,
            0.9936718344688416,
            0.9866918325424194,
            0.9950419068336487,
            0.995172917842865,
            0.9943596720695496,
            0.9943480491638184,
            0.9951409697532654,
            0.9943480491638184,
            0.99530029296875,
            0.9948627948760986,
            0.9932693839073181,
            0.9943480491638184,
            0.9868292808532715,
            0.9912626147270203,
            0.9930145740509033,
            0.9925042986869812,
            0.9904159903526306,
            0.9923832416534424,
            0.9925042986869812
        ]
    },
    "HumanEval/14": {
        "similarity": 0.996597409248352,
        "body": "result = []\nfor i in range(len(string) + 1):\n    result.append(string[:i])\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9938254952430725,
            0.9924551248550415,
            0.996597409248352,
            0.996597409248352,
            0.9964486360549927,
            0.9963591694831848,
            0.996597409248352,
            0.9951460957527161,
            0.9955552816390991,
            0.9959090352058411,
            0.9958981871604919,
            0.9938254952430725,
            0.995976984500885,
            0.9959379434585571,
            0.9964486360549927,
            0.9932843446731567,
            0.9955552816390991,
            0.996597409248352,
            0.9960580468177795,
            0.996597409248352
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9959858655929565,
        "body": "    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result.rstrip()",
        "result": "passed",
        "similarities": [
            0.9957172870635986,
            0.9938245415687561,
            0.991739809513092,
            0.9952671527862549,
            0.9870966672897339,
            0.9956623911857605,
            0.9949166178703308,
            0.9946150779724121,
            0.9959858655929565,
            0.9956623911857605,
            0.9942428469657898,
            0.9955693483352661,
            0.9945923686027527,
            0.9958232045173645,
            0.9948620200157166,
            0.9959858655929565,
            0.9955020546913147,
            0.9949303865432739,
            0.9959858655929565,
            0.9956623911857605
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9958897829055786,
        "body": "    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "result": "passed",
        "similarities": [
            0.9955174326896667,
            0.9958532452583313,
            0.9936423301696777,
            0.9956008791923523,
            0.9956008791923523,
            0.9958897829055786,
            0.9956008791923523,
            0.9956008791923523,
            0.9956008791923523,
            0.9914148449897766,
            0.9956008791923523,
            0.9697051048278809,
            0.9921632409095764,
            0.9888718128204346,
            0.9956008791923523,
            0.9956008791923523,
            0.9956008791923523,
            0.9888718128204346,
            0.9956008791923523,
            0.9956008791923523
        ]
    },
    "HumanEval/17": {
        "similarity": 0.993975818157196,
        "body": "    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == '|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.993975818157196,
            0.9887433648109436,
            0.9938238859176636,
            0.9937123656272888,
            0.9935778379440308,
            0.9934005737304688,
            0.9934005737304688,
            0.9926249980926514,
            0.9789503216743469,
            0.9907020926475525,
            0.9900848269462585,
            0.9933127164840698,
            0.9891284108161926,
            0.9936608076095581,
            0.9909945130348206,
            0.9923661947250366,
            0.9920493960380554,
            0.9921054840087891,
            0.9923463463783264,
            0.9915561676025391
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9958642721176147,
        "body": "count = 0\nfor i in range(len(string)):\n    if string[i:i+len(substring)] == substring:\n        count += 1\n\nreturn count",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9954594969749451,
            0.9917766451835632,
            0.9919729828834534,
            0.9933420419692993,
            0.9954456686973572,
            0.9958642721176147,
            0.9956060647964478,
            0.9954594969749451,
            0.9911608695983887,
            0.9938051104545593,
            0.9954456686973572,
            0.9883210062980652,
            0.9916186928749084,
            0.9954594969749451,
            0.9943130016326904,
            0.9955969452857971,
            0.9954456686973572,
            0.9956060647964478,
            0.9955970644950867,
            0.9947134256362915
        ]
    },
    "HumanEval/19": {
        "similarity": 0.991230845451355,
        "body": "  number_list = numbers.split()\n  for i in range(len(number_list)):\n    for j in range(i + 1, len(number_list)):\n      if int(number_list[i]) > int(number_list[j]):\n        number_list[i], number_list[j] = number_list[j], number_list[i]\n  return ' '.join(number_list)",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 11)",
        "similarities": [
            0.9832051992416382,
            0.9882497191429138,
            0.9882818460464478,
            0.9867600202560425,
            0.9867104291915894,
            0.991230845451355,
            0.98577880859375,
            0.9886725544929504,
            0.9889823794364929,
            0.9867314100265503,
            0.9865327477455139,
            0.9879317879676819,
            0.9777601361274719,
            0.9886193871498108,
            0.9826708436012268,
            0.9813809990882874,
            0.9846920371055603,
            0.9827702045440674,
            0.9864148497581482,
            0.9838094115257263
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9979687929153442,
        "body": "min_diff = float('inf')\nclosest_pair = None\n\nfor i in range(len(numbers) - 1):\n    for j in range(i + 1, len(numbers)):\n        diff = numbers[j] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[j])\n\nreturn closest_pair",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.997434139251709,
            0.9979687929153442,
            0.9958425164222717,
            0.9958425164222717,
            0.997822642326355,
            0.99724280834198,
            0.9979687929153442,
            0.9953358173370361,
            0.9976987242698669,
            0.9954962730407715,
            0.9963017702102661,
            0.9959389567375183,
            0.9922740459442139,
            0.9966198801994324,
            0.9977650046348572,
            0.9945133924484253,
            0.9979687929153442,
            0.9953441619873047,
            0.996770977973938,
            0.9978330731391907
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9881653189659119,
        "body": "min_num = min(numbers)\nmax_num = max(numbers)\n\nif len(numbers) < 2:\n    return numbers\n\nfor i in range(len(numbers)):\n    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\nreturn numbers",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9822698831558228,
            0.983853816986084,
            0.9881653189659119,
            0.9807328581809998,
            0.9822698831558228,
            0.9822698831558228,
            0.9838086366653442,
            0.983853816986084,
            0.9841244220733643,
            0.9844599366188049,
            0.983853816986084,
            0.9822698831558228,
            0.9841387867927551,
            0.9765948057174683,
            0.9832690358161926,
            0.9819191694259644,
            0.9817777872085571,
            0.9807328581809998,
            0.9767795205116272,
            0.9482734203338623
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9980044364929199,
        "body": "filtered_values = []\nfor value in values:\n    if isinstance(value, int) and value <= 2147483647:\n        filtered_values.append(value)\nreturn filtered_values",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9980044364929199,
            0.9961445331573486,
            0.9974658489227295,
            0.9979155659675598,
            0.9976028800010681,
            0.9937905669212341,
            0.997606098651886,
            0.9974246025085449,
            0.9971665143966675,
            0.997153639793396,
            0.9979155659675598,
            0.9978953003883362,
            0.994787335395813,
            0.9979155659675598,
            0.9979155659675598,
            0.9965330362319946,
            0.9936493635177612,
            0.9972628355026245,
            0.9959618449211121,
            0.9968339800834656
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9987006783485413,
        "body": "length = 0\nfor char in string:\n    length += 1\nreturn length",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9972145557403564,
            0.995437741279602,
            0.9979209899902344,
            0.9987006783485413,
            0.9961298108100891,
            0.9987006783485413,
            0.9980434775352478,
            0.9984670281410217,
            0.9987006783485413,
            0.998618483543396,
            0.996324360370636,
            0.9987006783485413,
            0.9984670281410217,
            0.9966665506362915,
            0.9987006783485413,
            0.9987006783485413,
            0.9987006783485413,
            0.9971277117729187,
            0.9984670281410217,
            0.9979786276817322
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9994374513626099,
        "body": "for _a in range(n - 1, 0, -1):\n    if n % _a == 0:\n        return _a",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9991573691368103,
            0.9993679523468018,
            0.9993419647216797,
            0.9994138479232788,
            0.9994316101074219,
            0.9994374513626099,
            0.9994316101074219,
            0.9992719292640686,
            0.9994316101074219,
            0.9994138479232788,
            0.9994316101074219,
            0.9991003274917603,
            0.9994316101074219,
            0.9968352913856506,
            0.9994316101074219,
            0.9993679523468018,
            0.9992649555206299,
            0.9990617632865906,
            0.9991003274917603,
            0.9991003274917603
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9959475994110107,
        "body": "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors",
        "result": "passed",
        "similarities": [
            0.9959475994110107,
            0.9959475994110107,
            0.9959475994110107,
            0.9959447979927063,
            0.9743749499320984,
            0.995212733745575,
            0.995212733745575,
            0.9954612255096436,
            0.9928606748580933,
            0.9951959252357483,
            0.994899570941925,
            0.9952400922775269,
            0.9905251264572144,
            0.9743749499320984,
            0.995212733745575,
            0.9958704113960266,
            0.9901146292686462,
            0.9959475994110107,
            0.9958086609840393,
            0.995212733745575
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9968369007110596,
        "body": "seen_nums = []\nresult = []\n\nfor num in numbers:\n    if num not in seen_nums:\n        result.append(num)\n        seen_nums.append(num)\n\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "similarities": [
            0.9953936338424683,
            0.9941061735153198,
            0.9966820478439331,
            0.9966714978218079,
            0.9953936338424683,
            0.994562029838562,
            0.9968369007110596,
            0.9966820478439331,
            0.9961594343185425,
            0.9957873821258545,
            0.9953936338424683,
            0.9952257871627808,
            0.9963975548744202,
            0.9952009916305542,
            0.9948242902755737,
            0.9966820478439331,
            0.9948242902755737,
            0.9953936338424683,
            0.9966820478439331,
            0.9967669248580933
        ]
    },
    "HumanEval/27": {
        "similarity": 0.994850754737854,
        "body": "for char_index in range(len(string)):\n    if string[char_index] >= 'a' and string[char_index] <= 'z':\n        string = string[:char_index] + chr(ord(string[char_index]) - 32) + string[char_index+1:]\n    elif string[char_index] >= 'A' and string[char_index] <= 'Z':\n        string = string[:char_index] + chr(ord(string[char_index]) + 32) + string[char_index+1:]\n\nreturn string",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9926598072052002,
            0.9917399883270264,
            0.9918785095214844,
            0.9937117695808411,
            0.9930676817893982,
            0.9934921264648438,
            0.994850754737854,
            0.990614652633667,
            0.9905120730400085,
            0.9936445951461792,
            0.9923322796821594,
            0.9918943643569946,
            0.9941384196281433,
            0.9943711161613464,
            0.9930710196495056,
            0.9931166768074036,
            0.989611804485321,
            0.9926598072052002,
            0.9931166768074036,
            0.9941384196281433
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9981763958930969,
        "body": "result = \"\"\nfor s in strings:\n    result += s",
        "result": "failed: name 'strings' is not defined",
        "similarities": [
            0.9979838132858276,
            0.9979649782180786,
            0.9979838132858276,
            0.9962248802185059,
            0.9977778196334839,
            0.9961830973625183,
            0.9972048401832581,
            0.9981763958930969,
            0.9979838132858276,
            0.9979425072669983,
            0.9969938397407532,
            0.9914213418960571,
            0.9981763958930969,
            0.9943269491195679,
            0.9979838132858276,
            0.9978253245353699,
            0.9980852007865906,
            0.9980852007865906,
            0.9979838132858276,
            0.9975975751876831
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9979264140129089,
        "body": "filtered_strings = []\nfor string in strings:\n    if string <= prefix:\n        filtered_strings.append(string)\nreturn filtered_strings",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9963667988777161,
            0.9975685477256775,
            0.9936398863792419,
            0.9949102997779846,
            0.9973002076148987,
            0.9975685477256775,
            0.9965570569038391,
            0.9979264140129089,
            0.9936398863792419,
            0.9979264140129089,
            0.9963667988777161,
            0.9979264140129089,
            0.9974862933158875,
            0.9949102997779846,
            0.9979264140129089,
            0.9936398863792419,
            0.9965570569038391,
            0.9979264140129089,
            0.9976878762245178,
            0.9979264140129089
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9959824085235596,
        "body": "result = []\nfor num in l:\n    if num >= 0:\n        result.append(num)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9959824085235596,
            0.9958170652389526,
            0.9860663414001465,
            0.9958170652389526,
            0.9927964806556702,
            0.9959197044372559,
            0.9958170652389526,
            0.9959824085235596,
            0.9957082867622375,
            0.9959586262702942,
            0.9957082867622375,
            0.9959586262702942,
            0.9957082867622375,
            0.9957082867622375,
            0.9959824085235596,
            0.9957082867622375,
            0.9815130829811096,
            0.9943341612815857,
            0.9957082867622375,
            0.9957082867622375
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9988958239555359,
        "body": "    for num in range(2, int(n**0.5) + 1):\n        if n % num == 0:\n            return False\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9988958239555359,
            0.9983752369880676,
            0.9986007213592529,
            0.9986484050750732,
            0.9988061785697937,
            0.9985684752464294,
            0.9985898733139038,
            0.9988144636154175,
            0.9985913634300232,
            0.9962140917778015,
            0.9987238645553589,
            0.9987050890922546,
            0.9981346130371094,
            0.9987050890922546,
            0.9968804121017456,
            0.9988958239555359,
            0.9986902475357056,
            0.9979876279830933,
            0.9986638426780701,
            0.9959012269973755
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9958059191703796,
        "body": "    for i in range(2, len(xs), 2):\n        if xs[i] != 0:\n            return -xs[i-1] / xs[i]\n    return None",
        "result": "failed: must be real number, not NoneType",
        "similarities": [
            0.991280198097229,
            0.990536630153656,
            0.9945643544197083,
            0.994903564453125,
            0.9946979880332947,
            0.9949133992195129,
            0.9944849610328674,
            0.9949415922164917,
            0.9947419762611389,
            0.9958059191703796,
            0.9896332621574402,
            0.9951961040496826,
            0.9935590028762817,
            0.9945379495620728,
            0.9936736226081848,
            0.9883764386177063,
            0.9931150078773499,
            0.9946979880332947,
            0.9930837750434875,
            0.9953199625015259
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9946478605270386,
        "body": "third_values = []\nfor idx, val in enumerate(l):\n    if idx % 3 == 0:\n        third_values.append(val)\n\nthird_values.sort()\n\nfor idx, val in enumerate(l):\n    if idx % 3 == 0:\n        l[idx] = third_values.pop(0)",
        "result": "failed: name 'l' is not defined",
        "similarities": [
            0.9931243062019348,
            0.9923495054244995,
            0.9930676221847534,
            0.9945732951164246,
            0.9938704967498779,
            0.9944456219673157,
            0.9885309338569641,
            0.9938373565673828,
            0.9896736145019531,
            0.9932644367218018,
            0.9946478605270386,
            0.9905839562416077,
            0.9920244812965393,
            0.9841004610061646,
            0.9918128848075867,
            0.9924896955490112,
            0.9924964904785156,
            0.9923892021179199,
            0.9906818270683289,
            0.9941479563713074
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9951801300048828,
        "body": "    result = []\n    for num in l:\n        if num not in result:\n            result.append(num)\n    return sorted(result)",
        "result": "passed",
        "similarities": [
            0.9947859048843384,
            0.9935328960418701,
            0.9939131736755371,
            0.9949513673782349,
            0.9920493960380554,
            0.9935901165008545,
            0.9951801300048828,
            0.9907020926475525,
            0.9836845397949219,
            0.9941966533660889,
            0.9932877421379089,
            0.9938599467277527,
            0.9938133955001831,
            0.9836845397949219,
            0.994640052318573,
            0.9926851391792297,
            0.9940193891525269,
            0.9949333071708679,
            0.9943867921829224,
            0.9935901165008545
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9976757764816284,
        "body": "max_val = l[0]\nfor num in l:\n    if num <= max_val:\n        continue\n    max_val = num\nreturn max_val",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.994595468044281,
            0.9968355894088745,
            0.9967526793479919,
            0.9976757764816284,
            0.9976757764816284,
            0.9969649910926819,
            0.9973006844520569,
            0.9966605305671692,
            0.9976757764816284,
            0.9969558715820312,
            0.9976757764816284,
            0.9976757764816284,
            0.9968370199203491,
            0.9969558715820312,
            0.9976757764816284,
            0.9967526793479919,
            0.9948635101318359,
            0.994929850101471,
            0.9976757764816284,
            0.9976757764816284
        ]
    },
    "HumanEval/36": {
        "similarity": 0.997099757194519,
        "body": "for num in range(n):\n    if num % 11 == 0 or num % 13 == 0:\n        while num > 0:\n            digit = num % 10\n            if digit == 7:\n                count += 1\n            num //= 10",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.997099757194519,
            0.9960576891899109,
            0.9882863759994507,
            0.9960576891899109,
            0.9915460348129272,
            0.9966810345649719,
            0.9969977140426636,
            0.9968502521514893,
            0.9966810345649719,
            0.9965553283691406,
            0.996425211429596,
            0.9964761137962341,
            0.993864893913269,
            0.9960576891899109,
            0.9915928244590759,
            0.9960576891899109,
            0.9966810345649719,
            0.9945172667503357,
            0.9964757561683655,
            0.9955488443374634
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9928979277610779,
        "body": "for even_index in range(0, len(l), 2):\n  even_values = [l[even_index] for _ in range(even_index, len(l), 2)]\n  even_values.sort()\n  for i, value in enumerate(even_values):\n    l[i * 2] = value",
        "result": "failed: name 'l' is not defined",
        "similarities": [
            0.9928979277610779,
            0.9912400841712952,
            0.9781255125999451,
            0.9922927021980286,
            0.9914053678512573,
            0.989284336566925,
            0.9905985593795776,
            0.9925857186317444,
            0.9760307669639587,
            0.9772661328315735,
            0.988382875919342,
            0.991104006767273,
            0.9914886355400085,
            0.9919677376747131,
            0.9894996285438538,
            0.9919266104698181,
            0.9883896708488464,
            0.9912320971488953,
            0.9867281913757324,
            0.9914031028747559
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9932570457458496,
        "body": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\nfor i in range(len(groups)):\n    if len(groups[i]) == 3:\n        groups[i] = groups[i][-1] + groups[i][:-1]\nreturn \"\".join(groups)",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.9923867583274841,
            0.9895690083503723,
            0.9910740256309509,
            0.9876853823661804,
            0.9903227090835571,
            0.9866645336151123,
            0.9851993918418884,
            0.9811787009239197,
            0.9910358786582947,
            0.9901801943778992,
            0.9918714761734009,
            0.9861566424369812,
            0.992469310760498,
            0.9910589456558228,
            0.9932570457458496,
            0.9915289878845215,
            0.9891616702079773,
            0.992267906665802,
            0.981187105178833,
            0.9857450723648071
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9982383251190186,
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\na, b = 0, 1\ncount = 0\nfor _ in range(n):\n    a, b = b, a + b\n    if is_prime(b):\n        count += 1\n        if count == n:\n            break\nreturn b",
        "result": "failed: 'return' outside function (<string>, line 32)",
        "similarities": [
            0.9974144697189331,
            0.9976497292518616,
            0.9980414509773254,
            0.9964650869369507,
            0.9980402588844299,
            0.9974871277809143,
            0.9970622658729553,
            0.9979844689369202,
            0.9979979991912842,
            0.9979844689369202,
            0.9976284503936768,
            0.9982383251190186,
            0.9962276816368103,
            0.9982147216796875,
            0.9967432618141174,
            0.9980409741401672,
            0.9980986714363098,
            0.9973323345184326,
            0.998218834400177,
            0.9980490803718567
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9953742623329163,
        "body": "    for a_index in range(len(l)):\n        for b_index in range(a_index + 1, len(l)):\n            for c_index in range(b_index + 1, len(l)):\n                if l[a_index] + l[b_index] + l[c_index] == 0:\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9939619302749634,
            0.9933069944381714,
            0.993466854095459,
            0.9953742623329163,
            0.9916369915008545,
            0.9942217469215393,
            0.9942217469215393,
            0.9837612509727478,
            0.9913300275802612,
            0.995013415813446,
            0.9949113726615906,
            0.9953742623329163,
            0.9943636059761047,
            0.9894177317619324,
            0.9944760203361511,
            0.9874986410140991,
            0.9941472411155701,
            0.9949113130569458,
            0.9919213652610779,
            0.9939619302749634
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9968648552894592,
        "body": "    collision_count = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j and i + j < n:\n                collision_count += 1\n    return collision_count",
        "result": "failed: ",
        "similarities": [
            0.9968648552894592,
            0.9968530535697937,
            0.9949823021888733,
            0.9962993264198303,
            0.9967275857925415,
            0.9958198070526123,
            0.9936649799346924,
            0.9963025450706482,
            0.9961775541305542,
            0.9953950643539429,
            0.9907307028770447,
            0.9959587454795837,
            0.9966635704040527,
            0.9960269927978516,
            0.9962742328643799,
            0.9954343438148499,
            0.9958574175834656,
            0.9937616586685181,
            0.9949763417243958,
            0.9950251579284668
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9978436231613159,
        "body": "    for idx in range(len(l)):\n        l[idx] += 1",
        "result": "failed: ",
        "similarities": [
            0.9976838827133179,
            0.9940294027328491,
            0.9972304105758667,
            0.9940294027328491,
            0.9975634217262268,
            0.9978436231613159,
            0.9934712648391724,
            0.9957566857337952,
            0.9938995242118835,
            0.9976999163627625,
            0.9975107908248901,
            0.9976052045822144,
            0.9942905902862549,
            0.9976711273193359,
            0.9975634217262268,
            0.9976999163627625,
            0.9976999163627625,
            0.9976052045822144,
            0.9975107908248901,
            0.9975107908248901
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9973375201225281,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9952841401100159,
            0.9964967966079712,
            0.9973375201225281,
            0.9964315295219421,
            0.9942435026168823,
            0.9939670562744141,
            0.9956331849098206,
            0.994423508644104,
            0.9955090880393982,
            0.9952841401100159,
            0.9968932271003723,
            0.9973375201225281,
            0.9973375201225281,
            0.994843065738678,
            0.9938609600067139,
            0.9973375201225281,
            0.9973375201225281,
            0.9973375201225281,
            0.9947534203529358,
            0.995548665523529
        ]
    },
    "HumanEval/44": {
        "similarity": 0.995256245136261,
        "body": "    result = ''\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x //= base\n    return result",
        "result": "passed",
        "similarities": [
            0.9759148359298706,
            0.9943661093711853,
            0.9948976635932922,
            0.9905098676681519,
            0.9927701354026794,
            0.9754025340080261,
            0.995143711566925,
            0.9951600432395935,
            0.9949951171875,
            0.9941167235374451,
            0.9945856332778931,
            0.9924712181091309,
            0.9951761960983276,
            0.9951069355010986,
            0.9922168254852295,
            0.995256245136261,
            0.9910264611244202,
            0.9905766844749451,
            0.9931631684303284,
            0.9928625822067261
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9952855706214905,
        "body": "    return (a * h) / 2",
        "result": "passed",
        "similarities": [
            0.9913458824157715,
            0.9944196343421936,
            0.9893559217453003,
            0.9877352714538574,
            0.9939844012260437,
            0.9952855706214905,
            0.9944196343421936,
            0.9947808980941772,
            0.9944196343421936,
            0.9947870373725891,
            0.9947184324264526,
            0.9948917031288147,
            0.9939844012260437,
            0.9905053377151489,
            0.9950066804885864,
            0.9950023293495178,
            0.9944196343421936,
            0.9929776787757874,
            0.9909810423851013,
            0.9952855706214905
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9960357546806335,
        "body": "    my_vars = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        my_vars.append(sum(my_vars[i - 4:i]))\n    return my_vars[n]",
        "result": "passed",
        "similarities": [
            0.9944327473640442,
            0.9959291219711304,
            0.9883003234863281,
            0.9959341287612915,
            0.9956019520759583,
            0.9952370524406433,
            0.9934118390083313,
            0.9933180809020996,
            0.9952496290206909,
            0.9942861199378967,
            0.9960357546806335,
            0.9955283999443054,
            0.9935328960418701,
            0.9950323700904846,
            0.9943177103996277,
            0.9943997263908386,
            0.9960199594497681,
            0.9954555034637451,
            0.9942851662635803,
            0.9921562075614929
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9948300719261169,
        "body": "    n = len(l)\n    l_sorted = sorted(l)\n\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[(n - 1) // 2] + l_sorted[n // 2]) / 2",
        "result": "passed",
        "similarities": [
            0.994759738445282,
            0.9909150004386902,
            0.9915586709976196,
            0.9946387410163879,
            0.991737961769104,
            0.9898122549057007,
            0.9939717054367065,
            0.9914174675941467,
            0.9948300719261169,
            0.9836628437042236,
            0.9937930703163147,
            0.9915767312049866,
            0.9932650327682495,
            0.9942482709884644,
            0.9909449219703674,
            0.9926643371582031,
            0.9915856719017029,
            0.9925292134284973,
            0.992186427116394,
            0.9941115379333496
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9978621602058411,
        "body": "    for i in range(len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9977830648422241,
            0.9963101744651794,
            0.9974570274353027,
            0.9977315664291382,
            0.9970793724060059,
            0.997141420841217,
            0.9974570274353027,
            0.9972658753395081,
            0.9974570274353027,
            0.9959084391593933,
            0.9978621602058411,
            0.9970167279243469,
            0.9977983236312866,
            0.9977983236312866,
            0.9958599805831909,
            0.9948306679725647,
            0.9978621602058411,
            0.9948307871818542,
            0.9950976371765137,
            0.9955934286117554
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9983119964599609,
        "body": "    result = 1\n    for i in range(2, n + 1):\n        result = (result * 2) % p\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9983119964599609,
            0.9979375600814819,
            0.9968276619911194,
            0.9980443716049194,
            0.9983118772506714,
            0.9976906180381775,
            0.9954172372817993,
            0.9974532723426819,
            0.9983119964599609,
            0.9983119964599609,
            0.9976906180381775,
            0.9970642924308777,
            0.9978436827659607,
            0.9941938519477844,
            0.9980443716049194,
            0.9955608248710632,
            0.9976906180381775,
            0.9981388449668884,
            0.9981388449668884,
            0.9971391558647156
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9966941475868225,
        "body": "for ch in s:\n    yield chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))",
        "result": "failed: 'yield' outside function (<string>, line 15)",
        "similarities": [
            0.9966941475868225,
            0.9963581562042236,
            0.9966598153114319,
            0.9965356588363647,
            0.9963210225105286,
            0.9966941475868225,
            0.996436357498169,
            0.9938350319862366,
            0.9821772575378418,
            0.9966941475868225,
            0.9934794902801514,
            0.996436357498169,
            0.9926955699920654,
            0.9966941475868225,
            0.9963342547416687,
            0.9963581562042236,
            0.996436357498169,
            0.9963342547416687,
            0.996436357498169,
            0.9853547811508179
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9955710172653198,
        "body": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "similarities": [
            0.9947757720947266,
            0.9955613017082214,
            0.9955613017082214,
            0.9955710172653198,
            0.9944842457771301,
            0.995570957660675,
            0.9818034768104553,
            0.9928103089332581,
            0.9952059388160706,
            0.9947757720947266,
            0.9954299926757812,
            0.9947757720947266,
            0.9955710172653198,
            0.9818034768104553,
            0.9910188913345337,
            0.9954299926757812,
            0.9930808544158936,
            0.9947757720947266,
            0.9858355522155762,
            0.9955613017082214
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9958116412162781,
        "body": "    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9958116412162781,
            0.9958116412162781,
            0.995625376701355,
            0.995625376701355,
            0.995625376701355,
            0.993845522403717,
            0.995625376701355,
            0.9958116412162781,
            0.995625376701355,
            0.9958116412162781,
            0.9958116412162781,
            0.9879763722419739,
            0.995625376701355,
            0.995625376701355,
            0.993845522403717,
            0.995625376701355,
            0.9958116412162781,
            0.9958116412162781,
            0.9958116412162781,
            0.9930622577667236
        ]
    },
    "HumanEval/53": {
        "similarity": 0.9938985109329224,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            0.9938985109329224,
            0.9938985109329224,
            0.9895356893539429,
            0.9911628365516663,
            0.9911211729049683,
            0.9778533577919006,
            0.9938985109329224,
            0.9918735027313232,
            0.9914930462837219,
            0.9916761517524719,
            0.9843648672103882,
            0.9938985109329224,
            0.9938985109329224,
            0.9938985109329224,
            0.9895356893539429,
            0.9938985109329224,
            0.9918735027313232,
            0.9938985109329224,
            0.9938985109329224,
            0.9914204478263855
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9945206046104431,
        "body": "    chars_s0 = [c for c in s0]\n    chars_s1 = [c for c in s1]\n\n    if len(chars_s0) != len(chars_s1):\n        return False\n\n    for char in chars_s0:\n        if char not in chars_s1:\n            return False\n        chars_s1.remove(char)\n\n    return True",
        "result": "failed: ",
        "similarities": [
            0.9864396452903748,
            0.9917016625404358,
            0.9931076765060425,
            0.9919353127479553,
            0.9918131828308105,
            0.9896581768989563,
            0.9926177859306335,
            0.9938948750495911,
            0.9937769174575806,
            0.992050051689148,
            0.9935364127159119,
            0.9915313720703125,
            0.9937527179718018,
            0.9945206046104431,
            0.9919427633285522,
            0.9940620064735413,
            0.9896581768989563,
            0.9933933615684509,
            0.9824672341346741,
            0.9928003549575806
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9972089529037476,
        "body": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "result": "passed",
        "similarities": [
            0.9972089529037476,
            0.9971568584442139,
            0.992843747138977,
            0.9971568584442139,
            0.9971568584442139,
            0.9972089529037476,
            0.9972089529037476,
            0.9972089529037476,
            0.9972089529037476,
            0.9953424334526062,
            0.9972089529037476,
            0.9972089529037476,
            0.9972089529037476,
            0.9967284202575684,
            0.9937041401863098,
            0.9972089529037476,
            0.9972089529037476,
            0.9972089529037476,
            0.989119291305542,
            0.9881942272186279
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9977136254310608,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0",
        "result": "passed",
        "similarities": [
            0.9975661039352417,
            0.9965605735778809,
            0.9973652362823486,
            0.9965605735778809,
            0.9957564473152161,
            0.9972981810569763,
            0.9974398612976074,
            0.9971761107444763,
            0.9959604144096375,
            0.9964536428451538,
            0.9977136254310608,
            0.9957767128944397,
            0.996364414691925,
            0.9950137138366699,
            0.9969781637191772,
            0.9973840117454529,
            0.9972546100616455,
            0.9976214170455933,
            0.9974251985549927,
            0.9968979358673096
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9938766360282898,
        "body": "    inc = dec = True\n\n    for i in range(1, len(l)):\n        if l[i-1] > l[i]:\n            inc = False\n        if l[i-1] < l[i]:\n            dec = False\n\n    return inc or dec",
        "result": "passed",
        "similarities": [
            0.9938766360282898,
            0.9896029233932495,
            0.9930673241615295,
            0.9928387999534607,
            0.9933709502220154,
            0.9932695627212524,
            0.9904623627662659,
            0.981968104839325,
            0.9930797219276428,
            0.9938216209411621,
            0.9928408265113831,
            0.9894508719444275,
            0.993208646774292,
            0.9911344647407532,
            0.9910416007041931,
            0.9808478355407715,
            0.9862309694290161,
            0.9882102608680725,
            0.993208646774292,
            0.9893012046813965
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9947958588600159,
        "body": "    common_elements = []\n    for elem in l1:\n        if elem <= max(l2) and elem >= min(l2):\n            common_elements.append(elem)\n    common_elements.sort()\n    return common_elements",
        "result": "failed: ",
        "similarities": [
            0.992445707321167,
            0.9934670329093933,
            0.9933642148971558,
            0.992661714553833,
            0.9850616455078125,
            0.994462251663208,
            0.9933834075927734,
            0.9936730265617371,
            0.9850616455078125,
            0.9917039275169373,
            0.9934895038604736,
            0.9920812845230103,
            0.9934471845626831,
            0.9939131736755371,
            0.9947958588600159,
            0.9841739535331726,
            0.9907082319259644,
            0.9942006468772888,
            0.9886947274208069,
            0.9945436716079712
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9965242147445679,
        "body": "    i = n\n    while i % 2 == 0:\n        i //= 2\n    for num in range(3, int(i**0.5) + 1, 2):\n        while i % num == 0:\n            i //= num\n    return i if i > 1 else -1",
        "result": "failed: ",
        "similarities": [
            0.9904643893241882,
            0.9965242147445679,
            0.9916718006134033,
            0.9949542880058289,
            0.9941701292991638,
            0.9940902590751648,
            0.9949374794960022,
            0.995772123336792,
            0.9944795370101929,
            0.9953781962394714,
            0.995625376701355,
            0.995625376701355,
            0.9954414367675781,
            0.9957951903343201,
            0.9942069053649902,
            0.9949242472648621,
            0.992497980594635,
            0.9950881004333496,
            0.9953781962394714,
            0.9939826130867004
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9978339672088623,
        "body": "    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total",
        "result": "passed",
        "similarities": [
            0.9978338479995728,
            0.9976078867912292,
            0.9957486391067505,
            0.9975327253341675,
            0.996418833732605,
            0.9971903562545776,
            0.9974620342254639,
            0.9965962171554565,
            0.9978339672088623,
            0.9968823790550232,
            0.9975327253341675,
            0.9936736226081848,
            0.9978339672088623,
            0.9978339672088623,
            0.9962602257728577,
            0.9975327253341675,
            0.9975597858428955,
            0.9962602257728577,
            0.9959413409233093,
            0.9965962171554565
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9980171918869019,
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count == 0:\n                return False\n            open_count -= 1\n    return open_count == 0",
        "result": "passed",
        "similarities": [
            0.9972755908966064,
            0.9980171918869019,
            0.9972589612007141,
            0.9978317618370056,
            0.9962149262428284,
            0.9961236715316772,
            0.9978793263435364,
            0.9959665536880493,
            0.9970990419387817,
            0.9979743957519531,
            0.9977491497993469,
            0.99697345495224,
            0.996315598487854,
            0.9978442788124084,
            0.9958205223083496,
            0.9975459575653076,
            0.9960375428199768,
            0.9963372945785522,
            0.9976935386657715,
            0.9958608746528625
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9957895874977112,
        "body": "    der = []\n    for i in range(1, len(xs)):\n        der.append(i * xs[i])\n    return der",
        "result": "passed",
        "similarities": [
            0.994886577129364,
            0.9945317506790161,
            0.9927372336387634,
            0.9943010210990906,
            0.9950290322303772,
            0.9937745928764343,
            0.9950290322303772,
            0.9957719445228577,
            0.9942653179168701,
            0.9955147504806519,
            0.994886577129364,
            0.9955393075942993,
            0.9957719445228577,
            0.9933131337165833,
            0.9957895874977112,
            0.9955147504806519,
            0.9953243732452393,
            0.9957719445228577,
            0.9955147504806519,
            0.9957719445228577
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9974818229675293,
        "body": "    if n < 3:\n        return n - 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed",
        "similarities": [
            0.9974052309989929,
            0.9965549111366272,
            0.9907513856887817,
            0.9974052309989929,
            0.9943645000457764,
            0.9974052309989929,
            0.9974052309989929,
            0.9974818229675293,
            0.9961541891098022,
            0.9974052309989929,
            0.9852484464645386,
            0.9907513856887817,
            0.9955237507820129,
            0.9974052309989929,
            0.9973050355911255,
            0.9969565868377686,
            0.9944486021995544,
            0.9951761960983276,
            0.9974052309989929,
            0.9974818229675293
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9978159666061401,
        "body": "vowels = 'aeiou'\ncount = 0\n\nfor char in s.lower():\n    if char in vowels or (char == 'y' and s[-1] == 'y'):\n        count += 1",
        "result": "failed: name 's' is not defined",
        "similarities": [
            0.9967846274375916,
            0.9971833825111389,
            0.9971082806587219,
            0.9968127012252808,
            0.9953710436820984,
            0.9976052641868591,
            0.9978159666061401,
            0.9977715015411377,
            0.9978159666061401,
            0.9975048899650574,
            0.9972606301307678,
            0.9969165325164795,
            0.997353196144104,
            0.997353196144104,
            0.9978159666061401,
            0.9969384074211121,
            0.9972108602523804,
            0.9976266622543335,
            0.9955309629440308,
            0.9977148175239563
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9920235872268677,
        "body": "    str_x = str(x)\n    len_str_x = len(str_x)\n\n    if shift >= len_str_x:\n        return str_x[::-1]\n\n    shifted_str = (str_x[-shift:] + str_x[:-shift])[::-1]\n    return shifted_str",
        "result": "failed: ",
        "similarities": [
            0.986423909664154,
            0.9904114603996277,
            0.9896313548088074,
            0.9609925150871277,
            0.9906919598579407,
            0.9916552305221558,
            0.9916552305221558,
            0.9899529218673706,
            0.9904096722602844,
            0.9911336302757263,
            0.9908940196037292,
            0.9896313548088074,
            0.9916531443595886,
            0.9920235872268677,
            0.9911003112792969,
            0.9915457367897034,
            0.9913685321807861,
            0.9894313812255859,
            0.9858715534210205,
            0.9894059896469116
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9977443218231201,
        "body": "    sum = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            sum += ord(char)\n    return sum",
        "result": "passed",
        "similarities": [
            0.9976739287376404,
            0.9973333477973938,
            0.9970261454582214,
            0.9976866841316223,
            0.9891439080238342,
            0.9976866841316223,
            0.9970261454582214,
            0.9969913959503174,
            0.9969994425773621,
            0.9972801208496094,
            0.9976866841316223,
            0.9977240562438965,
            0.9977443218231201,
            0.9972466826438904,
            0.9972801208496094,
            0.9963763356208801,
            0.9970911145210266,
            0.9976788759231567,
            0.9976866841316223,
            0.9973333477973938
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9949082732200623,
        "body": "    apples = int(s.split('apples and')[0].strip())\n    oranges = int(s.split('oranges')[0].split()[-1])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed",
        "similarities": [
            0.9887994527816772,
            0.9944670796394348,
            0.9935185313224792,
            0.988689124584198,
            0.965655505657196,
            0.9945813417434692,
            0.9945339560508728,
            0.9926718473434448,
            0.9943951964378357,
            0.9925528168678284,
            0.9930811524391174,
            0.9931003451347351,
            0.9881097674369812,
            0.9931213855743408,
            0.9949082732200623,
            0.9930890798568726,
            0.9946160912513733,
            0.9930815696716309,
            0.9931018352508545,
            0.9942524433135986
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9948388934135437,
        "body": "even_nodes = []\nfor i, val in enumerate(arr):\n    if val % 2 == 0:\n        even_nodes.append((val, i))\nif even_nodes:\n    smallest_even = min(even_nodes)\n    return [smallest_even[0], smallest_even[1]]\nelse:\n    return []",
        "result": "failed: 'return' outside function (<string>, line 42)",
        "similarities": [
            0.9837273359298706,
            0.993937075138092,
            0.9942079186439514,
            0.9913751482963562,
            0.9925987124443054,
            0.9927777051925659,
            0.9942370057106018,
            0.990820050239563,
            0.9924885630607605,
            0.9906036853790283,
            0.9945988059043884,
            0.9948388934135437,
            0.9937373995780945,
            0.9915903806686401,
            0.9872990846633911,
            0.9940757751464844,
            0.9925820231437683,
            0.9942376017570496,
            0.9934415221214294,
            0.9922350645065308
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9944456815719604,
        "body": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    for num in freq.keys():\n        if freq[num] >= num and num > 0:\n            return num\n\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9914156198501587,
            0.9908148050308228,
            0.9871587157249451,
            0.987583339214325,
            0.9940806031227112,
            0.9901208281517029,
            0.9849668741226196,
            0.9940721392631531,
            0.9897961020469666,
            0.9937421083450317,
            0.9938161969184875,
            0.9885119199752808,
            0.9915557503700256,
            0.9871587157249451,
            0.9940611124038696,
            0.9935445189476013,
            0.9909531474113464,
            0.9865514039993286,
            0.9944456815719604,
            0.9941002726554871
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9960790872573853,
        "body": "    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n\n        if lst:\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_lst",
        "result": "passed",
        "similarities": [
            0.9931002259254456,
            0.9940629601478577,
            0.9956135153770447,
            0.9942082166671753,
            0.9931002259254456,
            0.9960790872573853,
            0.9941892027854919,
            0.9953616261482239,
            0.9931002259254456,
            0.9908041954040527,
            0.9960790872573853,
            0.9960790872573853,
            0.9940629601478577,
            0.9953616261482239,
            0.9942082166671753,
            0.9942082166671753,
            0.9931002259254456,
            0.9944006204605103,
            0.9931002259254456,
            0.9957275390625
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9972949624061584,
        "body": "    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n\n    s = (a + b + c) / 2\n    area = round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return area",
        "result": "passed",
        "similarities": [
            0.9970191121101379,
            0.9963560700416565,
            0.9954639077186584,
            0.9968703389167786,
            0.9964545369148254,
            0.9921228289604187,
            0.9972865581512451,
            0.9947088956832886,
            0.9968629479408264,
            0.9962813854217529,
            0.9964154958724976,
            0.9972949624061584,
            0.9952502846717834,
            0.9959094524383545,
            0.9925464987754822,
            0.9955269694328308,
            0.9952502846717834,
            0.9972865581512451,
            0.9944648742675781,
            0.9953856468200684
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9936865568161011,
        "body": "    for i in range(len(q)//2):\n        if q[i] != q[-i-1]:\n            return False\n    return sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9926986694335938,
            0.993172287940979,
            0.9879863262176514,
            0.9924846291542053,
            0.9918691515922546,
            0.9890744090080261,
            0.9513683319091797,
            0.9926986694335938,
            0.9929834008216858,
            0.9932436943054199,
            0.9895206093788147,
            0.9926986694335938,
            0.9926986694335938,
            0.9930406212806702,
            0.9935317039489746,
            0.9933675527572632,
            0.9930406212806702,
            0.9934824705123901,
            0.9926986694335938,
            0.9936865568161011
        ]
    },
    "HumanEval/73": {
        "similarity": 0.996813952922821,
        "body": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    for i in range(len(arr) // 2 + 1):\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes",
        "result": "failed: ",
        "similarities": [
            0.996813952922821,
            0.9958471059799194,
            0.996637225151062,
            0.9948172569274902,
            0.9967200756072998,
            0.9908003807067871,
            0.995310366153717,
            0.9966121315956116,
            0.9935132265090942,
            0.9951657652854919,
            0.9909804463386536,
            0.9947186708450317,
            0.9967658519744873,
            0.9948760867118835,
            0.9959489703178406,
            0.9953312277793884,
            0.9956022500991821,
            0.9948399066925049,
            0.9894517660140991,
            0.9944199919700623
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9947704672813416,
        "body": "  sum_lst1 = sum(len(word) for word in lst1)\n  sum_lst2 = sum(len(word) for word in lst2)\n\n  if sum_lst1 <= sum_lst2:\n    return lst1\n  else:\n    return lst2",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 16)",
        "similarities": [
            0.9946441650390625,
            0.9944256544113159,
            0.9904751181602478,
            0.9936655759811401,
            0.9903571605682373,
            0.9938539266586304,
            0.9947704672813416,
            0.9940724968910217,
            0.9943507313728333,
            0.9939253926277161,
            0.9916538596153259,
            0.9908969402313232,
            0.992142915725708,
            0.9941318035125732,
            0.9932969808578491,
            0.9942046999931335,
            0.9945273399353027,
            0.9938081502914429,
            0.9905257225036621,
            0.9940402507781982
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9960362315177917,
        "body": "        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a // 2 + 1):\n        if a % i == 0 and check_prime(i):\n            factors.append(i)\n        if len(factors) >= 3:\n            break\n    return len(factors) == 3",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9938818216323853,
            0.9937871694564819,
            0.9793446063995361,
            0.985156238079071,
            0.994377851486206,
            0.9947511553764343,
            0.9938979148864746,
            0.9952864646911621,
            0.9960362315177917,
            0.9951504468917847,
            0.9944421648979187,
            0.9933631420135498,
            0.9943291544914246,
            0.9942352175712585,
            0.9953131675720215,
            0.9945935606956482,
            0.9945404529571533,
            0.9954808950424194,
            0.9939641356468201,
            0.9935670495033264
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9974237084388733,
        "body": "    i = 0\n    for _ in range(n):\n        if x == n ** i:\n            return True\n        i += 1\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9962449669837952,
            0.9971935749053955,
            0.9948453307151794,
            0.9974237084388733,
            0.9974237084388733,
            0.9964522123336792,
            0.9972259402275085,
            0.9908351898193359,
            0.9959336519241333,
            0.996812105178833,
            0.9966360330581665,
            0.9968880414962769,
            0.9957617521286011,
            0.9940842986106873,
            0.9956543445587158,
            0.9969782829284668,
            0.9969504475593567,
            0.9969004392623901,
            0.9972074627876282,
            0.9961216449737549
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9982189536094666,
        "body": "for a in range(-a, a + 1):\n    if a ** 3 == abs(a):\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9977443218231201,
            0.9972184896469116,
            0.9981828331947327,
            0.9978731870651245,
            0.9981828331947327,
            0.9974955320358276,
            0.9981828331947327,
            0.9973348379135132,
            0.9977384209632874,
            0.9971216320991516,
            0.9975136518478394,
            0.9973248839378357,
            0.9978800415992737,
            0.9978800415992737,
            0.9981828927993774,
            0.9972530007362366,
            0.9977342486381531,
            0.9982189536094666,
            0.9981828331947327,
            0.9978132843971252
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9981191754341125,
        "body": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9978850483894348,
            0.9976385235786438,
            0.9980549216270447,
            0.9968529939651489,
            0.9981191754341125,
            0.9978850483894348,
            0.9981191754341125,
            0.9981191754341125,
            0.9980115294456482,
            0.988776683807373,
            0.9981191754341125,
            0.9926286339759827,
            0.9933502674102783,
            0.9980115294456482,
            0.9981191754341125,
            0.9934661388397217,
            0.9979842305183411,
            0.9981191754341125,
            0.9929652810096741,
            0.9979884624481201
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9949796795845032,
        "body": "binary = \"\"\nfor i in range(decimal):\n    binary = str(i % 2) + binary\nreturn \"db\" + binary + \"db\"",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9948240518569946,
            0.9929599761962891,
            0.9941514730453491,
            0.994615375995636,
            0.9847436547279358,
            0.9937753081321716,
            0.9949796795845032,
            0.9829075336456299,
            0.9943811297416687,
            0.9944878816604614,
            0.9948031902313232,
            0.9900534749031067,
            0.9933323264122009,
            0.9917814135551453,
            0.9949796795845032,
            0.993985116481781,
            0.9947958588600159,
            0.9914079308509827,
            0.9942737221717834,
            0.9945712685585022
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9972056150436401,
        "body": "    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9967873096466064,
            0.9959867596626282,
            0.9970209002494812,
            0.9913181662559509,
            0.9923828840255737,
            0.9964523315429688,
            0.9939376711845398,
            0.9967873096466064,
            0.9916304349899292,
            0.9972056150436401,
            0.9961997866630554,
            0.9943864941596985,
            0.9971372485160828,
            0.9895306825637817,
            0.9968964457511902,
            0.996181309223175,
            0.9967873096466064,
            0.9963714480400085,
            0.9968964457511902,
            0.9972055554389954
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9939193725585938,
        "body": "grades = []\nfor grade in grades:\n    if grade >= 4.0:\n        grades.append('A+')\n    elif grade > 3.7:\n        grades.append('A')\n    elif grade > 3.3:\n        grades.append('A-')\n    elif grade > 3.0:\n        grades.append('B+')\n    elif grade > 2.7:\n        grades.append('B')\n    elif grade > 2.3:\n        grades.append('B-')\n    elif grade > 2.0:\n        grades.append('C+')\n    elif grade > 1.7:\n        grades.append('C')\n    elif grade > 1.3:\n        grades.append('C-')\n    elif grade > 1.0:\n        grades.append('D+')\n    elif grade > 0.7:\n        grades.append('D')\n    elif grade >= 0.0:\n        grades.append('D-')\n    else:\n        grades.append('E')\n\nreturn grades",
        "result": "failed: 'return' outside function (<string>, line 56)",
        "similarities": [
            0.9917941689491272,
            0.9928298592567444,
            0.9927796125411987,
            0.9930601716041565,
            0.9838968515396118,
            0.9912487864494324,
            0.9923113584518433,
            0.992842435836792,
            0.9928298592567444,
            0.9916854500770569,
            0.9859641194343567,
            0.9913958311080933,
            0.9938279986381531,
            0.992842435836792,
            0.9884747266769409,
            0.9939193725585938,
            0.9930601716041565,
            0.9765813946723938,
            0.9861325025558472,
            0.9930601716041565
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9988847374916077,
        "body": "    if n < 2:\n        return False\n    for num in range(2, int(n**0.5) + 1):\n        if n % num == 0:\n            return False\n    return True\n\n    length = len(string)\n    return is_prime(length)",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.99798583984375,
            0.9988847374916077,
            0.9988847374916077,
            0.9988847374916077,
            0.9981641173362732,
            0.9973760843276978,
            0.9986811280250549,
            0.9974221587181091,
            0.9971815347671509,
            0.9974868297576904,
            0.9988484978675842,
            0.9978457093238831,
            0.9979490041732788,
            0.9988847374916077,
            0.9988484978675842,
            0.9988484978675842,
            0.9967946410179138,
            0.9978457093238831,
            0.9988847374916077,
            0.9955796003341675
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9959586262702942,
        "body": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // (10**(n-1)) == 1:\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9911777377128601,
            0.9953790903091431,
            0.9943650960922241,
            0.9950611591339111,
            0.995803713798523,
            0.9941373467445374,
            0.9933279156684875,
            0.995803713798523,
            0.9953162670135498,
            0.9959586262702942,
            0.9879776835441589,
            0.9945343732833862,
            0.9948298931121826,
            0.9953790903091431,
            0.9959286451339722,
            0.9958638548851013,
            0.995378315448761,
            0.9954936504364014,
            0.9940322041511536,
            0.9889464378356934
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9950099587440491,
        "body": "    result = ''\n    for _ in range(N):\n        result = str(int(result) + (N & 1)) if result else '0'\n        N >>= 1\n    return result",
        "result": "failed: Error",
        "similarities": [
            0.9906005859375,
            0.9947782158851624,
            0.9932034015655518,
            0.9917032122612,
            0.9946730732917786,
            0.9940629601478577,
            0.9939094185829163,
            0.9936650991439819,
            0.9946532249450684,
            0.9946730732917786,
            0.9923189878463745,
            0.9943291544914246,
            0.9834787249565125,
            0.9921738505363464,
            0.9939094185829163,
            0.9950099587440491,
            0.9921690225601196,
            0.9948341250419617,
            0.9948816895484924,
            0.9822094440460205
        ]
    },
    "HumanEval/85": {
        "similarity": 0.995640218257904,
        "body": "result = 0\nfor i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n        result += lst[i]\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9953261017799377,
            0.9950278401374817,
            0.9707330465316772,
            0.9954501986503601,
            0.9945060610771179,
            0.9956023693084717,
            0.9954501986503601,
            0.9956024885177612,
            0.993780255317688,
            0.9953491687774658,
            0.991001546382904,
            0.9956024885177612,
            0.9951019287109375,
            0.9954500794410706,
            0.9953796863555908,
            0.9956024885177612,
            0.9956024885177612,
            0.995640218257904,
            0.9955528974533081,
            0.9954501986503601
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9951131939888,
        "body": "    result = ''\n    for word in s.split():\n        sorted_word = ''.join(ch for ch in sorted(word))\n        result += sorted_word + ' '\n    return result.rstrip()",
        "result": "passed",
        "similarities": [
            0.9937971234321594,
            0.9945644736289978,
            0.9950240254402161,
            0.9913567900657654,
            0.994647204875946,
            0.9947462677955627,
            0.9942751526832581,
            0.9950240254402161,
            0.9951131939888,
            0.9945644736289978,
            0.9897472262382507,
            0.9769940972328186,
            0.9950429797172546,
            0.9940308928489685,
            0.9922822713851929,
            0.98968905210495,
            0.9903243184089661,
            0.9901331663131714,
            0.981663167476654,
            0.994647204875946
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9945945739746094,
        "body": "    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            cols = sorted((j for j, num in enumerate(row) if num == x), reverse=True)\n            result.extend(((i, col) for col in cols))\n    return sorted(result)",
        "result": "failed: ",
        "similarities": [
            0.9865047335624695,
            0.9907993674278259,
            0.9931652545928955,
            0.994229257106781,
            0.9911531209945679,
            0.992985188961029,
            0.9943536520004272,
            0.9916865825653076,
            0.9939132332801819,
            0.9931576251983643,
            0.9911072254180908,
            0.985545814037323,
            0.9937292337417603,
            0.9924806356430054,
            0.9865618348121643,
            0.9928643107414246,
            0.9945945739746094,
            0.9926194548606873,
            0.9891518950462341,
            0.9875118732452393
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9944730401039124,
        "body": "    sorted_array = input_array.copy()\n    first_val = sorted_array[0]\n    last_val = sorted_array[-1]\n    sum_val = first_val + last_val\n\n    if sum_val % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n\n    return sorted_array",
        "result": "failed: name 'input_array' is not defined",
        "similarities": [
            0.9937382936477661,
            0.9934862852096558,
            0.9919363260269165,
            0.9926422834396362,
            0.9842998385429382,
            0.9897641539573669,
            0.9909967184066772,
            0.9938292503356934,
            0.9889305830001831,
            0.9921004772186279,
            0.9944730401039124,
            0.9867085814476013,
            0.9931187033653259,
            0.9870397448539734,
            0.9892933368682861,
            0.9933562278747559,
            0.9930014610290527,
            0.9918365478515625,
            0.9940374493598938,
            0.9897048473358154
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9954304099082947,
        "body": "    encrypted_s = \"\"\n    for i in range(len(s)):\n        char = s[i]\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            shifted_char = chr((ord(char) - ascii_offset + (2 * 2)) % 26 + ascii_offset)\n            encrypted_s += shifted_char\n    return encrypted_s",
        "result": "passed",
        "similarities": [
            0.9945329427719116,
            0.9920055866241455,
            0.9948018789291382,
            0.9951543211936951,
            0.9952183961868286,
            0.9921106100082397,
            0.9944142699241638,
            0.9946616291999817,
            0.9946585297584534,
            0.9938555359840393,
            0.9911404848098755,
            0.9947714805603027,
            0.9895377159118652,
            0.9935060143470764,
            0.9944753050804138,
            0.9926232099533081,
            0.9947998523712158,
            0.9837504029273987,
            0.9945732951164246,
            0.9954304099082947
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9986076354980469,
        "body": "    smallest = largest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            largest = smallest\n            smallest = num\n        elif largest is None or num > smallest and num <= largest:\n            largest = num\n    return largest",
        "result": "failed: ",
        "similarities": [
            0.9984402060508728,
            0.9960153698921204,
            0.9985728859901428,
            0.9985871911048889,
            0.9986076354980469,
            0.9937800168991089,
            0.9985724091529846,
            0.998343825340271,
            0.9979129433631897,
            0.9982161521911621,
            0.9974637627601624,
            0.996997058391571,
            0.9944199323654175,
            0.9977465271949768,
            0.9984402060508728,
            0.9984833598136902,
            0.997991681098938,
            0.9985929727554321,
            0.9985929727554321,
            0.99774569272995
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9970653057098389,
        "body": "    count = 0\n    sentences = s.split('.') + s.split('?') + s.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count",
        "result": "failed: name 's' is not defined",
        "similarities": [
            0.9969384074211121,
            0.9970653057098389,
            0.9970311522483826,
            0.9969835877418518,
            0.9969701170921326,
            0.9933409690856934,
            0.9969844818115234,
            0.99660724401474,
            0.9922882914543152,
            0.9924423098564148,
            0.9970566630363464,
            0.9943494200706482,
            0.9970311522483826,
            0.9969834685325623,
            0.9960915446281433,
            0.9957090616226196,
            0.9969834685325623,
            0.9970653057098389,
            0.989913821220398,
            0.9932661652565002
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9949930310249329,
        "body": "    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    for num in [x, y, z]:\n        if num == x + y or num == y + z or num == z + x:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.991815447807312,
            0.9949930310249329,
            0.9939711689949036,
            0.9948893189430237,
            0.9940152764320374,
            0.9911152720451355,
            0.9930576682090759,
            0.9941724538803101,
            0.994709312915802,
            0.9941322803497314,
            0.9946098327636719,
            0.9907845258712769,
            0.9901536703109741,
            0.9942712187767029,
            0.9942591786384583,
            0.9929529428482056,
            0.9926357269287109,
            0.9947100281715393,
            0.9904369711875916,
            0.9943115711212158
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9968932271003723,
        "body": "    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9950083494186401,
            0.9962301850318909,
            0.9950186014175415,
            0.9961971640586853,
            0.995908260345459,
            0.9952476024627686,
            0.9964966177940369,
            0.9945319294929504,
            0.9959766864776611,
            0.9968932271003723,
            0.9911262392997742,
            0.9944123029708862,
            0.9947015643119812,
            0.9953683614730835,
            0.9951046705245972,
            0.9946443438529968,
            0.9953845143318176,
            0.9958242177963257,
            0.9962775707244873,
            0.9943054914474487
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9979665875434875,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9974449872970581,
            0.9966447949409485,
            0.9976077675819397,
            0.9938440918922424,
            0.9976603984832764,
            0.9970508217811584,
            0.9975802898406982,
            0.9967878460884094,
            0.9975352883338928,
            0.9967377185821533,
            0.9973794221878052,
            0.9976931214332581,
            0.9970145225524902,
            0.9979665875434875,
            0.9899834394454956,
            0.997353196144104,
            0.9978222250938416,
            0.9977264404296875,
            0.9965720176696777,
            0.9976787567138672
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9962774515151978,
        "body": "    if not dictionary:\n        return False\n    case = dictionary[next(iter(dictionary))].islower()\n    for key in dictionary:\n        if key.islower() != case or not isinstance(key, str):\n            return False\n    return True",
        "result": "failed: name 'dictionary' is not defined",
        "similarities": [
            0.9938294291496277,
            0.9951286315917969,
            0.9950633645057678,
            0.9959085583686829,
            0.9940336346626282,
            0.9940162301063538,
            0.9958702921867371,
            0.9935455322265625,
            0.9962774515151978,
            0.9936738610267639,
            0.9905629754066467,
            0.9947637319564819,
            0.9957837462425232,
            0.9943296313285828,
            0.9949091672897339,
            0.9933049082756042,
            0.9941689372062683,
            0.9928516745567322,
            0.9932715892791748,
            0.9958866834640503
        ]
    },
    "HumanEval/96": {
        "similarity": 0.997912585735321,
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "result": "failed: local variable 'num' referenced before assignment",
        "similarities": [
            0.9967246651649475,
            0.9966944456100464,
            0.997912585735321,
            0.9979108572006226,
            0.9972482323646545,
            0.9973598122596741,
            0.9978696703910828,
            0.9978817701339722,
            0.995630145072937,
            0.9978825449943542,
            0.997912585735321,
            0.997218668460846,
            0.9979108572006226,
            0.9963914752006531,
            0.9955493807792664,
            0.9972482323646545,
            0.977392315864563,
            0.9962968230247498,
            0.997912585735321,
            0.9978816509246826
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9932538270950317,
        "body": "    a_unit = a % 10\n    b_unit = b % 10\n    result = a_unit * b_unit\n    return result",
        "result": "passed",
        "similarities": [
            0.9865270256996155,
            0.9917423725128174,
            0.9866202473640442,
            0.9927237629890442,
            0.9915448427200317,
            0.9931445717811584,
            0.9871910810470581,
            0.9854468107223511,
            0.9921138286590576,
            0.9931568503379822,
            0.9886131286621094,
            0.9789345264434814,
            0.9921138286590576,
            0.9912142753601074,
            0.9912142753601074,
            0.9851571917533875,
            0.9921138286590576,
            0.9932538270950317,
            0.9914562702178955,
            0.9927486777305603
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9976495504379272,
        "body": "count = 0\nfor i in range(0, len(s), 2):\n    if s[i] in ('A', 'E', 'I', 'O', 'U'):\n        count += 1",
        "result": "failed: name 's' is not defined",
        "similarities": [
            0.9976087808609009,
            0.997360110282898,
            0.9976227283477783,
            0.9955190420150757,
            0.9976227283477783,
            0.9974882006645203,
            0.9976495504379272,
            0.9971988201141357,
            0.9948402047157288,
            0.9958199262619019,
            0.9960469603538513,
            0.9976227283477783,
            0.9971989393234253,
            0.9976227283477783,
            0.9969538450241089,
            0.9976087808609009,
            0.997360110282898,
            0.997360110282898,
            0.9976227283477783,
            0.9973175525665283
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9943992495536804,
        "body": "    num = float(value)\n    if num >= 0:\n        close_int = int(num + 0.5)\n    else:\n        close_int = int(num - 0.5)\n    return close_int",
        "result": "passed",
        "similarities": [
            0.9920403361320496,
            0.9931264519691467,
            0.9861234426498413,
            0.9896445274353027,
            0.9935647249221802,
            0.9937113523483276,
            0.9896445274353027,
            0.9930816292762756,
            0.992061197757721,
            0.9853295087814331,
            0.9896445274353027,
            0.9921192526817322,
            0.9899311065673828,
            0.9891012907028198,
            0.9936433434486389,
            0.9936615824699402,
            0.9896445274353027,
            0.9917580485343933,
            0.9943992495536804,
            0.989851713180542
        ]
    },
    "HumanEval/100": {
        "similarity": 0.997228741645813,
        "body": "    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 1:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile",
        "result": "passed",
        "similarities": [
            0.9939509034156799,
            0.9958819150924683,
            0.9948093891143799,
            0.9968870282173157,
            0.9969891905784607,
            0.9926590323448181,
            0.9963183403015137,
            0.9972092509269714,
            0.9962400197982788,
            0.9971369504928589,
            0.9971553683280945,
            0.9969488382339478,
            0.9882087707519531,
            0.9961858987808228,
            0.9949698448181152,
            0.9971762299537659,
            0.9964222311973572,
            0.9971369504928589,
            0.997228741645813,
            0.9942956566810608
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9932439923286438,
        "body": "    words = s.split(',') + s.split(' ')\n    return words",
        "result": "failed: ",
        "similarities": [
            0.9880031943321228,
            0.9927660226821899,
            0.9932439923286438,
            0.9852595925331116,
            0.987167239189148,
            0.9906014800071716,
            0.9919612407684326,
            0.9927660226821899,
            0.9893611073493958,
            0.9928532838821411,
            0.9927660226821899,
            0.9929713010787964,
            0.9929713010787964,
            0.9931610822677612,
            0.992362380027771,
            0.9882073998451233,
            0.9906015992164612,
            0.9760295748710632,
            0.9910997152328491,
            0.992362380027771
        ]
    },
    "HumanEval/102": {
        "similarity": 0.998601496219635,
        "body": "for num in range(y, x - 1, -1):\n    if num % 2 == 0:\n        return num\n\nreturn -1",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9985854625701904,
            0.9982795715332031,
            0.9982795715332031,
            0.9976702332496643,
            0.998601496219635,
            0.9960925579071045,
            0.9979385733604431,
            0.9980866312980652,
            0.9985854625701904,
            0.9982795715332031,
            0.998601496219635,
            0.9982854127883911,
            0.9979332685470581,
            0.9982795715332031,
            0.9960925579071045,
            0.9960925579071045,
            0.9981555938720703,
            0.9979332685470581,
            0.9982795715332031,
            0.9979332685470581
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9953332543373108,
        "body": "for num in range(n, m + 1):\n    avg = sum(num) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\nreturn binary_avg if n <= m else -1",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9925284385681152,
            0.9946118593215942,
            0.9935857653617859,
            0.9927464723587036,
            0.990210771560669,
            0.9883154034614563,
            0.9937281608581543,
            0.9930469989776611,
            0.9935794472694397,
            0.9941368103027344,
            0.9933238625526428,
            0.99252849817276,
            0.9932748675346375,
            0.9953332543373108,
            0.9941908121109009,
            0.991474986076355,
            0.9950250387191772,
            0.993447482585907,
            0.9822642803192139,
            0.9917055368423462
        ]
    },
    "HumanEval/104": {
        "similarity": 0.995310366153717,
        "body": "    result = []\n    for num in x:\n        if not any(num % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)",
        "result": "failed: ",
        "similarities": [
            0.9924982786178589,
            0.9911559224128723,
            0.9890794157981873,
            0.9923057556152344,
            0.9951039552688599,
            0.9942331910133362,
            0.993937075138092,
            0.9940918684005737,
            0.9944702982902527,
            0.9940918684005737,
            0.9924847483634949,
            0.9951039552688599,
            0.9951039552688599,
            0.9951039552688599,
            0.9890794157981873,
            0.995310366153717,
            0.995310366153717,
            0.9938064217567444,
            0.9951039552688599,
            0.9918236136436462
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9962058067321777,
        "body": "    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num - 1])\n    return result[::-1]",
        "result": "failed: Error",
        "similarities": [
            0.9960070252418518,
            0.9962058067321777,
            0.9955273866653442,
            0.9945644736289978,
            0.9917359948158264,
            0.9916363954544067,
            0.9909007549285889,
            0.9960070252418518,
            0.9903960227966309,
            0.9898368716239929,
            0.9918949007987976,
            0.9956622123718262,
            0.9908161163330078,
            0.9958046674728394,
            0.9956361055374146,
            0.9934171438217163,
            0.9960070252418518,
            0.991998553276062,
            0.995844304561615,
            0.9954271912574768
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9984033703804016,
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_val = 0\n            for j in range(1, i + 1):\n                sum_val += j\n            result.append(sum_val)\n    return result",
        "result": "passed",
        "similarities": [
            0.9935123324394226,
            0.9963192343711853,
            0.9980207681655884,
            0.9973381757736206,
            0.9983526468276978,
            0.9964125752449036,
            0.9983729124069214,
            0.9969509840011597,
            0.9961913228034973,
            0.9983022809028625,
            0.9983735680580139,
            0.9983331561088562,
            0.995630145072937,
            0.9983608722686768,
            0.9983729124069214,
            0.995630145072937,
            0.9983735680580139,
            0.9984033703804016,
            0.9983735680580139,
            0.9983729124069214
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9995725750923157,
        "body": "    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "result": "passed",
        "similarities": [
            0.9993558526039124,
            0.9995725750923157,
            0.9995725750923157,
            0.9994948506355286,
            0.9989913105964661,
            0.9995725750923157,
            0.9995725750923157,
            0.9994929432868958,
            0.9993531107902527,
            0.9994948506355286,
            0.9994382262229919,
            0.9993531107902527,
            0.9994382262229919,
            0.9994948506355286,
            0.9992744326591492,
            0.9995725750923157,
            0.9995237588882446,
            0.9993607401847839,
            0.9989006519317627,
            0.9992743134498596
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9967504143714905,
        "body": "    count = 0\n    for num in arr:\n        signed_digits_sum = sum(int(digit) for digit in str(abs(num)))\n        if signed_digits_sum > 0:\n            count += 1\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9939208030700684,
            0.9965274333953857,
            0.9961927533149719,
            0.9939208030700684,
            0.9943634867668152,
            0.995525062084198,
            0.9966363310813904,
            0.9947907328605652,
            0.994038462638855,
            0.9945436716079712,
            0.9954336285591125,
            0.9943652749061584,
            0.9951974749565125,
            0.9943116903305054,
            0.9884376525878906,
            0.9947670698165894,
            0.9963591694831848,
            0.9967504143714905,
            0.9914034605026245,
            0.9963275790214539
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9964146018028259,
        "body": "    temp = arr + [arr[0]]\n    sorted_arr = sorted(temp)\n    for i in range(len(arr)):\n        if sorted_arr[i] != temp[(i+1)%len(arr)]:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9933040142059326,
            0.9943432211875916,
            0.9920287132263184,
            0.9964146018028259,
            0.9956086874008179,
            0.9943432211875916,
            0.9905458092689514,
            0.994736909866333,
            0.9872894287109375,
            0.9956086874008179,
            0.9956086874008179,
            0.9956086874008179,
            0.9956086874008179,
            0.9942420125007629,
            0.9933426380157471,
            0.9933683276176453,
            0.9943432211875916,
            0.9956086874008179,
            0.9956086874008179,
            0.9949665069580078
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9961313009262085,
        "body": "for i in range(len(lst1)):\n    if lst1[i] % 2 != 0:\n        found = False\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                found = True\n                break\n        if not found:\n            return \"NO\"\nreturn \"YES\"",
        "result": "failed: 'return' outside function (<string>, line 24)",
        "similarities": [
            0.9949571490287781,
            0.9955605268478394,
            0.9938605427742004,
            0.9946873188018799,
            0.9949571490287781,
            0.9924591779708862,
            0.9949571490287781,
            0.9950940012931824,
            0.9887362122535706,
            0.9952992796897888,
            0.9949571490287781,
            0.9887750744819641,
            0.9950749278068542,
            0.9930508136749268,
            0.9960457682609558,
            0.9961313009262085,
            0.9961238503456116,
            0.9959290027618408,
            0.9921370148658752,
            0.9950749278068542
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9987717866897583,
        "body": "    counts = {}\n    max_count = 0\n    for letter in test.split():\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n    result = {k: v for k, v in counts.items() if v == max_count}\n    return result",
        "result": "passed",
        "similarities": [
            0.9985905885696411,
            0.996650218963623,
            0.998392641544342,
            0.995631754398346,
            0.9981554746627808,
            0.9981042146682739,
            0.9986895322799683,
            0.9978088736534119,
            0.998694658279419,
            0.9987514019012451,
            0.9982683062553406,
            0.9974449872970581,
            0.9984556436538696,
            0.9987717866897583,
            0.9981141686439514,
            0.9984946846961975,
            0.9963142275810242,
            0.9987302422523499,
            0.9980300068855286,
            0.9986174702644348
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9952659606933594,
        "body": "for i in range(len(s)):\n    if s[i] in c:\n        s = s[:i] + s[i+1:]\ns_rev = s[::-1]\nresult = (s, s == s_rev)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "similarities": [
            0.9940512776374817,
            0.9941783547401428,
            0.9949020743370056,
            0.9945104718208313,
            0.9940810203552246,
            0.9935941100120544,
            0.9945544004440308,
            0.994337797164917,
            0.9873241782188416,
            0.9930846691131592,
            0.9942048788070679,
            0.9951274394989014,
            0.9938434958457947,
            0.9939258098602295,
            0.9950132966041565,
            0.9948551058769226,
            0.9952659606933594,
            0.9915891885757446,
            0.9940810203552246,
            0.9942921996116638
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9981523156166077,
        "body": "    result = []\n    for i in range(len(lst)):\n        count_odd = sum(1 for c in lst[i] if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count_odd}n the str{count_odd}ng {i+1} of the {count_odd}nput.\")\n    return result",
        "result": "failed: Test 1",
        "similarities": [
            0.9976186156272888,
            0.9977061748504639,
            0.9896379113197327,
            0.9954372048377991,
            0.9979068636894226,
            0.9979820251464844,
            0.9962815046310425,
            0.9972909688949585,
            0.9976018667221069,
            0.994766354560852,
            0.9974493980407715,
            0.9972259998321533,
            0.9973104596138,
            0.9971691966056824,
            0.9981523156166077,
            0.9970267415046692,
            0.996468186378479,
            0.9979724884033203,
            0.9977061748504639,
            0.9978131651878357
        ]
    },
    "HumanEval/114": {
        "similarity": 0.997879147529602,
        "body": "    min_sum = float('inf')\n    cur_sum = 0\n\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        elif cur_sum < min_sum:\n            min_sum = cur_sum\n\n    return min_sum if min_sum != float('inf') else 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9967902302742004,
            0.9967177510261536,
            0.9976733326911926,
            0.9969401955604553,
            0.9966916441917419,
            0.9977220296859741,
            0.9977886080741882,
            0.9974271059036255,
            0.995261549949646,
            0.9978354573249817,
            0.9975465536117554,
            0.9976420998573303,
            0.9972078204154968,
            0.9969335794448853,
            0.9963268637657166,
            0.9934947490692139,
            0.9975079298019409,
            0.997879147529602,
            0.996179461479187,
            0.9924547076225281
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9917727112770081,
        "body": "    for row_idx, row in enumerate(grid):\n        total_water = sum(row)\n        fills = math.ceil(total_water / capacity) if total_water else 0\n        if row_idx == 0:\n            result = fills\n        else:\n            result += fills\n    return result",
        "result": "passed",
        "similarities": [
            0.9864488840103149,
            0.9853644371032715,
            0.9869267344474792,
            0.9892392754554749,
            0.987809419631958,
            0.9856418967247009,
            0.9838048219680786,
            0.9838114380836487,
            0.9845036864280701,
            0.9917727112770081,
            0.9906463623046875,
            0.9907220602035522,
            0.9849546551704407,
            0.9881459474563599,
            0.9893044233322144,
            0.9846691489219666,
            0.9899459481239319,
            0.9897918701171875,
            0.9876771569252014,
            0.9900942444801331
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9957475066184998,
        "body": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
        "result": "passed",
        "similarities": [
            0.9950395822525024,
            0.9957475066184998,
            0.994803786277771,
            0.9957475066184998,
            0.9905763268470764,
            0.9917371869087219,
            0.9941037893295288,
            0.9941037893295288,
            0.9892686605453491,
            0.9957475066184998,
            0.9957475066184998,
            0.993180513381958,
            0.9941037893295288,
            0.9919813275337219,
            0.9942228198051453,
            0.9943897128105164,
            0.9957475066184998,
            0.9957475066184998,
            0.994803786277771,
            0.9951022267341614
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9954472780227661,
        "body": "    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(char in consonants for char in word)\n        if count == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "similarities": [
            0.9952859282493591,
            0.993040919303894,
            0.9892821311950684,
            0.9954261779785156,
            0.9951834678649902,
            0.9919988512992859,
            0.9939745664596558,
            0.9954316020011902,
            0.9954472780227661,
            0.990091860294342,
            0.9725534319877625,
            0.9876046776771545,
            0.9953446984291077,
            0.9907346963882446,
            0.9928231835365295,
            0.9949719309806824,
            0.9926129579544067,
            0.9947190880775452,
            0.9953470826148987,
            0.9894643425941467
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9971080422401428,
        "body": "vowels = 'aeiou'\nfor i in range(1, len(word) - 1):\n    if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:\n        return word[i]\nreturn ''",
        "result": "failed: 'return' outside function (<string>, line 20)",
        "similarities": [
            0.9960678815841675,
            0.9931774139404297,
            0.9968400597572327,
            0.9963278770446777,
            0.9969392418861389,
            0.9963278770446777,
            0.9915363788604736,
            0.9963235259056091,
            0.9964296221733093,
            0.9970025420188904,
            0.9969387054443359,
            0.9963158369064331,
            0.9966921806335449,
            0.9966103434562683,
            0.9971080422401428,
            0.9966602325439453,
            0.9947648644447327,
            0.9961682558059692,
            0.996953547000885,
            0.9953119158744812
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9989053606987,
        "body": "    open_count = 0\n    close_count = 0\n\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n\n        if close_count > open_count:\n            return 'No'\n\n    return 'Yes' if open_count == close_count else 'No'",
        "result": "failed: ",
        "similarities": [
            0.9963520765304565,
            0.9988862872123718,
            0.9986564517021179,
            0.997583270072937,
            0.9975987672805786,
            0.9978547692298889,
            0.9986558556556702,
            0.9984074831008911,
            0.9988872408866882,
            0.9986764788627625,
            0.9989053606987,
            0.9988872408866882,
            0.9979890584945679,
            0.9986582398414612,
            0.9987766742706299,
            0.9986558556556702,
            0.9984074831008911,
            0.9981051087379456,
            0.9984871745109558,
            0.9988828897476196
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9922657012939453,
        "body": "    sorted_arr = []\n    for num in arr:\n        if len(sorted_arr) < k or num > sorted_arr[0]:\n            sorted_arr.insert(0, num)\n            if len(sorted_arr) > k:\n                sorted_arr.pop()\n    return sorted_arr[:k]",
        "result": "failed: ",
        "similarities": [
            0.9762536287307739,
            0.9896481037139893,
            0.9907814860343933,
            0.9852238893508911,
            0.9883208274841309,
            0.9907814860343933,
            0.9890110492706299,
            0.9906319975852966,
            0.9922657012939453,
            0.986640453338623,
            0.9895328879356384,
            0.991137683391571,
            0.988718569278717,
            0.9706872701644897,
            0.9853518605232239,
            0.9913514852523804,
            0.9904741048812866,
            0.9904037117958069,
            0.9917283654212952,
            0.9897994995117188
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9970363974571228,
        "body": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total",
        "result": "passed",
        "similarities": [
            0.9967148303985596,
            0.996295154094696,
            0.9962975382804871,
            0.9970064759254456,
            0.9967149496078491,
            0.9959285259246826,
            0.9970064759254456,
            0.9970363974571228,
            0.9960889220237732,
            0.9961657524108887,
            0.9966405630111694,
            0.9963352680206299,
            0.9970064759254456,
            0.9948047995567322,
            0.9946848154067993,
            0.9960803985595703,
            0.996295154094696,
            0.9959285259246826,
            0.9960889220237732,
            0.9959223866462708
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9990812540054321,
        "body": "    sum = 0\n    for i in range(k):\n        if arr[i] < 100 and arr[i] >= -99:\n            sum += arr[i]\n    return sum",
        "result": "passed",
        "similarities": [
            0.995003342628479,
            0.9989702105522156,
            0.9990358948707581,
            0.9990718364715576,
            0.9990413188934326,
            0.9989312887191772,
            0.9960482716560364,
            0.9984320402145386,
            0.999039888381958,
            0.9990144968032837,
            0.9990130066871643,
            0.9989702105522156,
            0.9990812540054321,
            0.9990207552909851,
            0.9990471601486206,
            0.9990128874778748,
            0.9989606738090515,
            0.9990529417991638,
            0.9990453124046326,
            0.9952622652053833
        ]
    },
    "HumanEval/123": {
        "similarity": 0.996923565864563,
        "body": "    collatz = []\n    num = n\n    while num > 1:\n        if num % 2 == 1:\n            collatz.append(num)\n        num = num // 2 if num % 2 == 0 else 3 * num + 1\n    return sorted(collatz)",
        "result": "failed: ",
        "similarities": [
            0.996923565864563,
            0.9915434122085571,
            0.9906965494155884,
            0.9956201314926147,
            0.9952358603477478,
            0.9959423542022705,
            0.9952537417411804,
            0.9956396222114563,
            0.996246874332428,
            0.9902049899101257,
            0.9962804913520813,
            0.9967519044876099,
            0.9960812926292419,
            0.9961095452308655,
            0.9956284761428833,
            0.9947519898414612,
            0.9958622455596924,
            0.9963257312774658,
            0.9965253472328186,
            0.9947132468223572
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9953673481941223,
        "body": "    import re\n    if not date or len(date) != 10 or '-' not in date or '.' in date or '/' in date:\n        return False\n    day, month, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in (4, 6, 9, 11) and not(1 <= day <= 30):\n        return False\n    if month == 2 and not(1 <= day <= 29):\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12) and not(1 <= day <= 31):\n        return True",
        "result": "failed: ",
        "similarities": [
            0.994688868522644,
            0.992893636226654,
            0.9935094714164734,
            0.9874470233917236,
            0.9953673481941223,
            0.9943991303443909,
            0.9932911396026611,
            0.9943211078643799,
            0.992506742477417,
            0.982140302658081,
            0.9950693845748901,
            0.9936121106147766,
            0.9947078227996826,
            0.9950112104415894,
            0.9943990111351013,
            0.9943572878837585,
            0.9929715991020203,
            0.9945372343063354,
            0.9914088249206543,
            0.9933720827102661
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9932682514190674,
        "body": "    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split(' ')\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if chr(97 + i) == txt[i].lower():\n                count += 1\n        return count",
        "result": "failed: ",
        "similarities": [
            0.9924677610397339,
            0.9911274313926697,
            0.9928562641143799,
            0.9920310974121094,
            0.986686110496521,
            0.9884710907936096,
            0.9845410585403442,
            0.9766467213630676,
            0.9928179383277893,
            0.9914456605911255,
            0.9888016581535339,
            0.9919276833534241,
            0.993158221244812,
            0.9927513003349304,
            0.9901739358901978,
            0.9895808696746826,
            0.9932682514190674,
            0.9930532574653625,
            0.988908588886261,
            0.9869917035102844
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9960903525352478,
        "body": "for idx_a in range(len(lst) - 1):\n    if lst[idx_a] > lst[idx_a + 1]:\n        return False\n    elif lst.count(lst[idx_a]) > 1:\n        return False\nreturn True",
        "result": "failed: 'return' outside function (<string>, line 20)",
        "similarities": [
            0.9944564700126648,
            0.9960216879844666,
            0.9935140013694763,
            0.9929235577583313,
            0.9947969317436218,
            0.9940543174743652,
            0.99486243724823,
            0.9934241771697998,
            0.9947969317436218,
            0.9924232959747314,
            0.9954546093940735,
            0.9952985048294067,
            0.9948390126228333,
            0.9958833456039429,
            0.9943622946739197,
            0.9956514239311218,
            0.99486243724823,
            0.9960903525352478,
            0.9948484301567078,
            0.9949753284454346
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9995841979980469,
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"",
        "result": "failed: name 'n' is not defined",
        "similarities": [
            0.9995583295822144,
            0.9995781779289246,
            0.9994269013404846,
            0.9992069602012634,
            0.9994599223136902,
            0.999295711517334,
            0.9995699524879456,
            0.998289942741394,
            0.9994094371795654,
            0.9993475079536438,
            0.9990760684013367,
            0.9995583295822144,
            0.9984038472175598,
            0.9981191754341125,
            0.9994670748710632,
            0.9995841979980469,
            0.9995583295822144,
            0.9995841979980469,
            0.9995841979980469,
            0.9995595216751099
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9962312579154968,
        "body": "product = 1\ntotal = 0\nfor num in arr:\n    if num != 0:\n        product *= (1 if num > 0 else -1)\n        total += abs(num)\nreturn None if len(arr) == 0 else total * product",
        "result": "failed: 'return' outside function (<string>, line 20)",
        "similarities": [
            0.9961228966712952,
            0.9950246214866638,
            0.9936811327934265,
            0.993264377117157,
            0.9960840940475464,
            0.9955645203590393,
            0.9958192110061646,
            0.99498450756073,
            0.9948605895042419,
            0.9929307699203491,
            0.9929630756378174,
            0.9923035502433777,
            0.9962312579154968,
            0.9957153797149658,
            0.9958815574645996,
            0.9959028363227844,
            0.9957420229911804,
            0.9950639605522156,
            0.995884358882904,
            0.9956508278846741
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9982720613479614,
        "body": "    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = [[False] * n for _ in range(n)]\n    path = []\n\n        if remaining_k == 0:\n            return\n        visited[x][y] = True\n        path.append(grid[x][y])\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                dfs(nx, ny, remaining_k - 1)\n        path.pop()\n        visited[x][y] = False\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == k:\n                dfs(i, j, k)\n                break",
        "result": "failed: unexpected indent (<string>, line 37)",
        "similarities": [
            0.997613787651062,
            0.9978029131889343,
            0.9975854158401489,
            0.9976882934570312,
            0.9982720613479614,
            0.996978759765625,
            0.9981995820999146,
            0.99713134765625,
            0.9980587363243103,
            0.9976251721382141,
            0.9976723194122314,
            0.9974070191383362,
            0.9980577230453491,
            0.9976884722709656,
            0.9979073405265808,
            0.996846079826355,
            0.9982271790504456,
            0.9979815483093262,
            0.9976623058319092,
            0.9965322613716125
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9979854226112366,
        "body": "    result = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            result.append(3)\n        elif i % 2 == 0:\n            result.append(1 + i // 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    return result",
        "result": "failed: list index out of range",
        "similarities": [
            0.9977174401283264,
            0.997711181640625,
            0.9972290396690369,
            0.9952605366706848,
            0.9979678988456726,
            0.9968688488006592,
            0.9978973269462585,
            0.9973465800285339,
            0.9970268607139587,
            0.9972000122070312,
            0.993588924407959,
            0.997472882270813,
            0.9979854226112366,
            0.9979732036590576,
            0.9950963258743286,
            0.9973863363265991,
            0.997430682182312,
            0.997672438621521,
            0.9974455833435059,
            0.9950435161590576
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9971626996994019,
        "body": "    product = 1\n    for num in str(n):\n        if int(num) % 2 != 0:\n            product *= int(num)\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9971131086349487,
            0.9971131086349487,
            0.9930774569511414,
            0.9971131086349487,
            0.9971131086349487,
            0.9971131086349487,
            0.9934628009796143,
            0.9896165132522583,
            0.9971417784690857,
            0.9971131086349487,
            0.9953278303146362,
            0.9907676577568054,
            0.9896165132522583,
            0.9971626996994019,
            0.9971131086349487,
            0.9971131086349487,
            0.9970319867134094,
            0.9971131086349487,
            0.9949684143066406,
            0.996478259563446
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9988036155700684,
        "body": "    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9986516833305359,
            0.9984928965568542,
            0.9988036155700684,
            0.9986999034881592,
            0.9986516237258911,
            0.9969305992126465,
            0.9988036155700684,
            0.9986259937286377,
            0.9986834526062012,
            0.9985651969909668,
            0.9988036155700684,
            0.9986832141876221,
            0.9986079335212708,
            0.9850867390632629,
            0.9983713030815125,
            0.9988036155700684,
            0.9988036155700684,
            0.9982161521911621,
            0.9986645579338074,
            0.9982512593269348
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9975562691688538,
        "body": "total = 0\nfor num in lst:\n    total += int(math.ceil(num)) ** 2\nreturn total",
        "result": "failed: 'return' outside function (<string>, line 19)",
        "similarities": [
            0.9974265098571777,
            0.9972902536392212,
            0.9957209229469299,
            0.9974717497825623,
            0.9974777102470398,
            0.9955535531044006,
            0.9972190856933594,
            0.9974777102470398,
            0.9972360730171204,
            0.9936848878860474,
            0.9975562691688538,
            0.9971427917480469,
            0.9963571429252625,
            0.9970973134040833,
            0.9949659109115601,
            0.9941033124923706,
            0.9972359538078308,
            0.9931420087814331,
            0.9970341920852661,
            0.9971947073936462
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9962292909622192,
        "body": "for char_index in range(len(txt), 0, -1):\n    if txt[char_index].isalpha():\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9949073791503906,
            0.9937246441841125,
            0.9962292909622192,
            0.9956297874450684,
            0.9933568239212036,
            0.9943712949752808,
            0.9953771233558655,
            0.9898680448532104,
            0.9956297874450684,
            0.9936222434043884,
            0.9953880310058594,
            0.995609700679779,
            0.9946457743644714,
            0.9948727488517761,
            0.996171236038208,
            0.9952279925346375,
            0.9952947497367859,
            0.9952974915504456,
            0.9951180219650269,
            0.9945998191833496
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9988003969192505,
        "body": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9975983500480652,
            0.9988003969192505,
            0.9962750673294067,
            0.998574435710907,
            0.9964210987091064,
            0.9987760782241821,
            0.9987760782241821,
            0.9988003969192505,
            0.9988003969192505,
            0.9988003969192505,
            0.9987760782241821,
            0.9984437823295593,
            0.9972023367881775,
            0.9969821572303772,
            0.9988003969192505,
            0.9986567497253418,
            0.9984207153320312,
            0.9977219104766846,
            0.9988002777099609,
            0.996934711933136
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9958300590515137,
        "body": "  a = b = None\n  for num in lst:\n    if num < 0 and (a is None or num > a):\n      a = num\n    elif num > 0 and (b is None or num < b):\n      b = num\n  return a, b",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)",
        "similarities": [
            0.9925299286842346,
            0.9927570223808289,
            0.9953978657722473,
            0.9919111132621765,
            0.9938988089561462,
            0.9945496320724487,
            0.9951565265655518,
            0.9950846433639526,
            0.9950738549232483,
            0.9951348900794983,
            0.9949990510940552,
            0.9949647784233093,
            0.992326557636261,
            0.9948856830596924,
            0.9923650026321411,
            0.9958300590515137,
            0.995799720287323,
            0.9902650117874146,
            0.9949901103973389,
            0.9950776696205139
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9956783652305603,
        "body": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    else:\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    else:\n        b = float(b)\n\n    if a <= b:\n        return None\n    elif a > b:\n        return a",
        "result": "failed: ",
        "similarities": [
            0.9930805563926697,
            0.9942011833190918,
            0.995320200920105,
            0.9952512979507446,
            0.9913291931152344,
            0.9952151775360107,
            0.9951801300048828,
            0.9917007088661194,
            0.9953158497810364,
            0.9938663840293884,
            0.98985755443573,
            0.9887107014656067,
            0.9921342134475708,
            0.9952667951583862,
            0.9956783652305603,
            0.9952667951583862,
            0.9952112436294556,
            0.9874428510665894,
            0.9951768517494202,
            0.9929679036140442
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9966955780982971,
        "body": "    for a in range(2, n // 2 + 1):\n        if a * 4 > n:\n            break\n        for b in range(a + 2, n - (a * 3) // 2 + 1):\n            c = n - a - b\n            if c >= b and c % 2 == 0:\n                return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9960058331489563,
            0.9961301684379578,
            0.9952587485313416,
            0.9965441823005676,
            0.9958466291427612,
            0.9966540932655334,
            0.9942587018013,
            0.9966955780982971,
            0.9958419799804688,
            0.9921031594276428,
            0.9938428997993469,
            0.9947323203086853,
            0.9911593198776245,
            0.9947521686553955,
            0.9960991740226746,
            0.9966474771499634,
            0.9957665801048279,
            0.9966477155685425,
            0.99517422914505,
            0.9939372539520264
        ]
    },
    "HumanEval/139": {
        "similarity": 0.997291088104248,
        "body": "    result = 1\n    for i in range(1, n + 1):\n        result *= i ** (n - i)\n    return result",
        "result": "failed: Test 4",
        "similarities": [
            0.9921665191650391,
            0.996866762638092,
            0.9929781556129456,
            0.9957327842712402,
            0.9964583516120911,
            0.9955598711967468,
            0.997291088104248,
            0.9923534393310547,
            0.9970006346702576,
            0.9951368570327759,
            0.9971221089363098,
            0.9964583516120911,
            0.9965205788612366,
            0.9970006346702576,
            0.9970006346702576,
            0.9968457818031311,
            0.9969910979270935,
            0.9970006346702576,
            0.9959776997566223,
            0.9942564964294434
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9987144470214844,
        "body": "    new_text = \"\"\n    prev_space = False\n\n    for char in text:\n        if char == \" \":\n            if prev_space:\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n            prev_space = True\n        else:\n            new_text += char\n            prev_space = False\n\n    return new_text",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "similarities": [
            0.9986110329627991,
            0.9982996582984924,
            0.9983217120170593,
            0.9984663128852844,
            0.9986990094184875,
            0.9972893595695496,
            0.9922314882278442,
            0.9987144470214844,
            0.9985885620117188,
            0.9984663128852844,
            0.9984785318374634,
            0.998622715473175,
            0.9985885620117188,
            0.9963564872741699,
            0.9987144470214844,
            0.9986990094184875,
            0.9982088208198547,
            0.9961636066436768,
            0.9986990094184875,
            0.9986990094184875
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9966468811035156,
        "body": "    digit_count = 0\n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n\n    dot_index = file_name.find('.')\n    if digit_count > 3 or dot_index == -1 or dot_index == len(file_name) - 1:\n        return 'No'\n\n    first_part = file_name[:dot_index]\n    if not first_part[0].isalpha():\n        return 'No'\n\n    second_part = file_name[dot_index+1:]\n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "result": "failed: string index out of range",
        "similarities": [
            0.9966426491737366,
            0.9963584542274475,
            0.996306300163269,
            0.9946853518486023,
            0.9962927103042603,
            0.9966468811035156,
            0.9961848855018616,
            0.9926232099533081,
            0.9945613741874695,
            0.9960846304893494,
            0.9944360852241516,
            0.9953719973564148,
            0.9961633086204529,
            0.9936054944992065,
            0.9939928650856018,
            0.9936228394508362,
            0.9959557056427002,
            0.995520830154419,
            0.9955878257751465,
            0.9961755871772766
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9976751208305359,
        "body": "sum = 0\nfor i in range(len(lst)):\n    if i % 3 == 0:\n        sum += lst[i]**2\n    elif i % 4 == 0 and i % 3 != 0:\n        sum += lst[i]**3",
        "result": "failed: name 'lst' is not defined",
        "similarities": [
            0.9968804121017456,
            0.9968007802963257,
            0.996601402759552,
            0.9970236420631409,
            0.9976599812507629,
            0.9976751208305359,
            0.9936738610267639,
            0.9961035847663879,
            0.9975571036338806,
            0.997329592704773,
            0.9971153140068054,
            0.9971874952316284,
            0.9973414540290833,
            0.9974091053009033,
            0.9967161417007446,
            0.9962193369865417,
            0.9967161417007446,
            0.9922999143600464,
            0.9975253939628601,
            0.9941326975822449
        ]
    },
    "HumanEval/143": {
        "similarity": 0.996850848197937,
        "body": "        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = ''\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result += word + ' '\n    return result.strip()",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.9967750906944275,
            0.9966311454772949,
            0.996850848197937,
            0.9966027140617371,
            0.9946172833442688,
            0.995766282081604,
            0.9906442761421204,
            0.9908439517021179,
            0.9967725872993469,
            0.9967750906944275,
            0.9957814812660217,
            0.9966089129447937,
            0.9957741498947144,
            0.993896484375,
            0.9967491626739502,
            0.9967920184135437,
            0.9949250817298889,
            0.9952412843704224,
            0.9967750906944275,
            0.996803879737854
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9969508647918701,
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n\n    prod_num = num_x * num_n\n    prod_den = den_x * den_n\n\n    return prod_num % prod_den == 0",
        "result": "passed",
        "similarities": [
            0.9969161152839661,
            0.9965050220489502,
            0.9965760111808777,
            0.9946767091751099,
            0.9945520162582397,
            0.9916427135467529,
            0.9920642375946045,
            0.9902423024177551,
            0.9953683614730835,
            0.9967080354690552,
            0.9969508647918701,
            0.9948922991752625,
            0.9951187968254089,
            0.9961591362953186,
            0.9968087077140808,
            0.9920493960380554,
            0.9941614270210266,
            0.9965800046920776,
            0.9968733787536621,
            0.9960981011390686
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9931420683860779,
        "body": "        return sum(int(digit) for digit in str(abs(n)))\n\n    sorted_nums = []\n    for num in nums:\n        sorted_nums.append((digit_sum(num), nums.index(num), num))\n\n    sorted_nums.sort()\n    return [num for _, _, num in sorted_nums]",
        "result": "failed: unexpected indent (<string>, line 13)",
        "similarities": [
            0.9852971434593201,
            0.9921178221702576,
            0.9895798563957214,
            0.9881606698036194,
            0.9914295673370361,
            0.9914014935493469,
            0.9861496686935425,
            0.9868335723876953,
            0.985331118106842,
            0.9914581179618835,
            0.9862157106399536,
            0.9923415184020996,
            0.9877289533615112,
            0.9923742413520813,
            0.9928069114685059,
            0.9872031211853027,
            0.9931420683860779,
            0.9923304319381714,
            0.9925999045372009,
            0.9866148233413696
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9970464110374451,
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            count += 1\n    return count",
        "result": "failed: not all arguments converted during string formatting",
        "similarities": [
            0.9937711954116821,
            0.9943080544471741,
            0.9937711954116821,
            0.993575930595398,
            0.995368242263794,
            0.9940022826194763,
            0.9960883259773254,
            0.996690034866333,
            0.9970288872718811,
            0.9885318279266357,
            0.9970464110374451,
            0.9937565326690674,
            0.9919556379318237,
            0.9964969158172607,
            0.9965181946754456,
            0.9970464110374451,
            0.9964892864227295,
            0.9954513907432556,
            0.9964892864227295,
            0.9964856505393982
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9990818500518799,
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9990818500518799,
            0.9990818500518799,
            0.9989702105522156,
            0.9989702105522156,
            0.9986752867698669,
            0.9990818500518799,
            0.9980196952819824,
            0.9989701509475708,
            0.9990818500518799,
            0.9989702105522156,
            0.9973634481430054,
            0.9990818500518799,
            0.9952379465103149,
            0.9990818500518799,
            0.9987801909446716,
            0.9990818500518799,
            0.9989575743675232,
            0.9990818500518799,
            0.9989101886749268,
            0.9989702105522156
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9964545369148254,
        "body": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1 + 1:idx2])\n    else:\n        return ()",
        "result": "failed: unexpected indent (<string>, line 20)",
        "similarities": [
            0.9964430928230286,
            0.9955793619155884,
            0.9948905110359192,
            0.9932893514633179,
            0.9957841634750366,
            0.9944475889205933,
            0.9892868399620056,
            0.9964215159416199,
            0.9964545369148254,
            0.9930595755577087,
            0.9959036111831665,
            0.9964138865470886,
            0.9953233003616333,
            0.9922771453857422,
            0.9937752485275269,
            0.9950264692306519,
            0.9944130778312683,
            0.9951171875,
            0.9920374155044556,
            0.9929302930831909
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9963650107383728,
        "body": "for my_var in lst[:]:\n    if len(my_var) % 2 != 0:\n        lst.remove(my_var)\n\nlst.sort(key=lambda x: (len(x), x))\nreturn lst",
        "result": "failed: 'return' outside function (<string>, line 22)",
        "similarities": [
            0.9948104023933411,
            0.996046245098114,
            0.9962678551673889,
            0.993140459060669,
            0.9959620237350464,
            0.9960450530052185,
            0.9960450530052185,
            0.9955710172653198,
            0.995997965335846,
            0.9962678551673889,
            0.9959458112716675,
            0.9954600930213928,
            0.9951839447021484,
            0.9946087598800659,
            0.9958609342575073,
            0.9962678551673889,
            0.9958313703536987,
            0.9963650107383728,
            0.9955710172653198,
            0.9956257343292236
        ]
    },
    "HumanEval/150": {
        "similarity": 0.996290922164917,
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    result = x if is_prime(n) else y\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9951151609420776,
            0.995625376701355,
            0.996171236038208,
            0.9942986369132996,
            0.9955771565437317,
            0.9960202574729919,
            0.9944799542427063,
            0.9951485395431519,
            0.99593585729599,
            0.9947826862335205,
            0.993800938129425,
            0.9956775307655334,
            0.995879054069519,
            0.996290922164917,
            0.99593585729599,
            0.995286226272583,
            0.9944371581077576,
            0.9960202574729919,
            0.9960155487060547,
            0.99593585729599
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9979274272918701,
        "body": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9958680868148804,
            0.9979274272918701,
            0.9977594017982483,
            0.9970616102218628,
            0.9964196085929871,
            0.9975207448005676,
            0.9969382882118225,
            0.9979274272918701,
            0.9970616102218628,
            0.9977594017982483,
            0.9970330595970154,
            0.9970616102218628,
            0.9964970946311951,
            0.9977594017982483,
            0.9970330595970154,
            0.9977260231971741,
            0.9962642192840576,
            0.99654620885849,
            0.9970616102218628,
            0.9970386028289795
        ]
    },
    "HumanEval/152": {
        "similarity": 0.996094286441803,
        "body": "    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "result": "passed",
        "similarities": [
            0.9933640360832214,
            0.9929279685020447,
            0.9957099556922913,
            0.9893115162849426,
            0.9913831353187561,
            0.9946827292442322,
            0.996094286441803,
            0.9946959614753723,
            0.9933640360832214,
            0.9933640360832214,
            0.9943809509277344,
            0.9936741590499878,
            0.9950565695762634,
            0.9832217693328857,
            0.993233859539032,
            0.9958462119102478,
            0.9946080446243286,
            0.9927433729171753,
            0.993233859539032,
            0.9949802756309509
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9983395934104919,
        "body": "    strongest_strength = float('-inf')\n    strongest_ext = None\n\n    for ext in extensions:\n        cap_count = sum(1 for char in ext if char.isupper())\n        sm_count = sum(1 for char in ext if char.islower())\n        strength = cap_count - sm_count\n        if strength > strongest_strength or (strength == strongest_strength and extensions.index(ext) < extensions.index(strongest_ext)):\n            strongest_strength = strength\n            strongest_ext = ext\n\n    return f\"{class_name}.{strongest_ext}\"",
        "result": "passed",
        "similarities": [
            0.9837509989738464,
            0.9974121451377869,
            0.9982973337173462,
            0.9982284903526306,
            0.9983395934104919,
            0.9975499510765076,
            0.9981171488761902,
            0.9974717497825623,
            0.9982905983924866,
            0.9975537657737732,
            0.9974802136421204,
            0.9965130686759949,
            0.9983017444610596,
            0.9975371360778809,
            0.9975716471672058,
            0.9973676800727844,
            0.9974526166915894,
            0.997294008731842,
            0.9982221722602844,
            0.9983017444610596
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9949695467948914,
        "body": "for pattern in range(len(b)):\n    rotated = b[-pattern:] + b[:-pattern]\n    if rotated in a:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9943141937255859,
            0.9870461225509644,
            0.9907549619674683,
            0.993855357170105,
            0.9893559813499451,
            0.9917356371879578,
            0.9945295453071594,
            0.9949695467948914,
            0.9927318096160889,
            0.9937630891799927,
            0.9944707155227661,
            0.9945295453071594,
            0.9946431517601013,
            0.9940057396888733,
            0.9949192404747009,
            0.9945295453071594,
            0.989902675151825,
            0.9927670359611511,
            0.9920598268508911,
            0.9930488467216492
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9984289407730103,
        "body": "    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "similarities": [
            0.9973819255828857,
            0.9981157183647156,
            0.9977832436561584,
            0.9952282309532166,
            0.9976549744606018,
            0.9981157183647156,
            0.9981843829154968,
            0.9965020418167114,
            0.9981843829154968,
            0.9974177479743958,
            0.9955598711967468,
            0.9955598711967468,
            0.9967846274375916,
            0.9984289407730103,
            0.9976581931114197,
            0.9981843829154968,
            0.9978181719779968,
            0.9981843829154968,
            0.9976736307144165,
            0.9979910850524902
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9929488301277161,
        "body": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numeral = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral",
        "result": "passed",
        "similarities": [
            0.9900611042976379,
            0.9903690814971924,
            0.992863118648529,
            0.9910097718238831,
            0.9896583557128906,
            0.9873153567314148,
            0.9895186424255371,
            0.9926766753196716,
            0.9928336143493652,
            0.9929488301277161,
            0.985970139503479,
            0.9925432801246643,
            0.992756724357605,
            0.9892818927764893,
            0.9870298504829407,
            0.9902313947677612,
            0.9888964295387268,
            0.9925380349159241,
            0.969323992729187,
            0.9914453625679016
        ]
    },
    "HumanEval/157": {
        "similarity": 0.993778645992279,
        "body": "    for _ in range(3):\n        if a*a + b*b <= c*c or a*a + c*c <= b*b or b*b + c*c <= a*a:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9900131225585938,
            0.9910024404525757,
            0.9925334453582764,
            0.9907562732696533,
            0.9920695424079895,
            0.9925306439399719,
            0.9918431639671326,
            0.9873205423355103,
            0.9921354055404663,
            0.9878425598144531,
            0.9934353232383728,
            0.9897330403327942,
            0.9932535290718079,
            0.990462064743042,
            0.993778645992279,
            0.9907190203666687,
            0.9900131225585938,
            0.990462064743042,
            0.9899721741676331,
            0.9912500977516174
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9980509877204895,
        "body": "  max_unique = 0\n  max_word = ''\n  for word in words:\n    unique_chars = len(set(word))\n    if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n      max_unique = unique_chars\n      max_word = word\n  return max_word",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 12)",
        "similarities": [
            0.9977425932884216,
            0.9964597821235657,
            0.9978480339050293,
            0.9980509877204895,
            0.996661365032196,
            0.9959398508071899,
            0.9979641437530518,
            0.9968823790550232,
            0.9951657652854919,
            0.9978346824645996,
            0.997271716594696,
            0.9971546530723572,
            0.9967922568321228,
            0.9961888194084167,
            0.9975172281265259,
            0.9980509877204895,
            0.9978712201118469,
            0.9974901080131531,
            0.9979186058044434,
            0.997115969657898
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9949150085449219,
        "body": "    eaten = number\n    left = remaining\n\n    for _ in range(need):\n        if left == 0:\n            break\n        eaten += 1\n        left -= 1\n\n    return [eaten, left]",
        "result": "passed",
        "similarities": [
            0.9939069151878357,
            0.9894883036613464,
            0.9883274435997009,
            0.9916164875030518,
            0.9949150085449219,
            0.9916017651557922,
            0.9805566072463989,
            0.9949150085449219,
            0.9939101338386536,
            0.9943837523460388,
            0.9935939311981201,
            0.9938310384750366,
            0.990401029586792,
            0.9865200519561768,
            0.9922509789466858,
            0.9938423037528992,
            0.9942876696586609,
            0.9927545785903931,
            0.9945176839828491,
            0.9949150085449219
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9967975616455078,
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9907801747322083,
            0.9966073632240295,
            0.9937198162078857,
            0.9966073632240295,
            0.9967975616455078,
            0.9958463907241821,
            0.9958463907241821,
            0.9959028959274292,
            0.9967975616455078,
            0.9966073632240295,
            0.9954484701156616,
            0.9966073632240295,
            0.9727609753608704,
            0.9958463907241821,
            0.9953048229217529,
            0.9950303435325623,
            0.9967975616455078,
            0.9958463907241821,
            0.9967975616455078,
            0.9967975616455078
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9953467845916748,
        "body": "result = \"\"\nfor i in range(len(s) - 1, -1, -1):\n    if s[i].isalpha():\n        result += s[i].swapcase()\n    else:\n        result += s[i]\nreturn result[::-1] if not any(char.isalpha() for char in s) else result",
        "result": "failed: 'return' outside function (<string>, line 19)",
        "similarities": [
            0.995169997215271,
            0.9916848540306091,
            0.9953467845916748,
            0.995151698589325,
            0.9929924011230469,
            0.994064211845398,
            0.9924496412277222,
            0.9944591522216797,
            0.9941225647926331,
            0.9923717975616455,
            0.9922937154769897,
            0.9951695799827576,
            0.9945066571235657,
            0.9946548342704773,
            0.9915924072265625,
            0.9949485659599304,
            0.9935427308082581,
            0.9952216148376465,
            0.9951377511024475,
            0.9936611652374268
        ]
    },
    "HumanEval/162": {
        "similarity": 0.997226893901825,
        "body": "import hashlib\n\n    if text == '':\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9959327578544617,
            0.9971605539321899,
            0.9971605539321899,
            0.9971605539321899,
            0.9972195029258728,
            0.997226893901825,
            0.9972195029258728,
            0.9943376779556274,
            0.9850519895553589,
            0.994316816329956,
            0.9971605539321899,
            0.9947901368141174,
            0.9972195029258728,
            0.9956403970718384,
            0.994316816329956,
            0.9967193603515625,
            0.9943376779556274,
            0.9965278506278992,
            0.9971605539321899,
            0.9906315207481384
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9944576621055603,
        "body": "for num in range(a, b + 1):\n    if num % 2 == 0:\n        result.append(num)\n\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 16)",
        "similarities": [
            0.9915766716003418,
            0.9944576621055603,
            0.9908061623573303,
            0.9902378916740417,
            0.9904362559318542,
            0.9922659993171692,
            0.9920260906219482,
            0.9942488670349121,
            0.9910853505134583,
            0.9940892457962036,
            0.9916255474090576,
            0.9935226440429688,
            0.9910853505134583,
            0.9931433796882629,
            0.9933369159698486,
            0.9904361367225647,
            0.9936840534210205,
            0.9887482523918152,
            0.9909455180168152,
            0.9933875203132629
        ]
    }
}