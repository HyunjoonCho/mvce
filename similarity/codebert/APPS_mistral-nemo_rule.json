{
    "4693": {
        "similarity": 0.9960762858390808,
        "body": "a, b = map(int, input().split())\nresult = a + b\nif result >= 10:\n    print(\"error\")\nelse:\n    print(result)",
        "result": "passed",
        "similarities": [
            0.9944132566452026,
            0.9951452016830444,
            0.9960762858390808,
            0.9953703880310059,
            0.995166003704071,
            0.9951063394546509,
            0.9944887757301331,
            0.9951368570327759,
            0.9944132566452026,
            0.9946259260177612,
            0.9951063394546509,
            0.9944132566452026,
            0.9960762858390808,
            0.9947308301925659,
            0.995244562625885,
            0.9959584474563599,
            0.9960762858390808,
            0.9959584474563599,
            0.9959584474563599,
            0.9952208995819092
        ]
    },
    "4077": {
        "similarity": 0.9970648884773254,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    pairs = 0\n    for l in range(n):\n        for r in range(l, n):\n            if sorted(a[l:r+1])[len(a[l:r+1])//2] == m:\n                pairs += 1\n    print(pairs)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969017505645752,
            0.9965341687202454,
            0.9970648884773254,
            0.9959686994552612,
            0.9962764382362366,
            0.9961572289466858,
            0.9966776967048645,
            0.9969017505645752,
            0.9967004656791687,
            0.99566650390625,
            0.9960240721702576,
            0.9964433312416077,
            0.9907697439193726,
            0.9964408874511719,
            0.9921148419380188,
            0.9968133568763733,
            0.9964495301246643,
            0.9965710043907166,
            0.996321439743042,
            0.9952439069747925
        ]
    },
    "4006": {
        "similarity": 0.998025119304657,
        "body": "    reachable = set()\n    num = n + 1\n    while num != 0:\n        reachable.add(num)\n        while num % 10 == 0:\n            num //= 10\n    return len(reachable)\n\nn = int(input())\nprint(count_reachable_numbers(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938681721687317,
            0.9976287484169006,
            0.9977215528488159,
            0.9947564005851746,
            0.9970118999481201,
            0.9954696297645569,
            0.9971129894256592,
            0.9952195882797241,
            0.9952455759048462,
            0.996252179145813,
            0.9978488087654114,
            0.9968788027763367,
            0.9973934888839722,
            0.9972884654998779,
            0.998025119304657,
            0.9977216124534607,
            0.9971420168876648,
            0.9965300559997559,
            0.9978120923042297,
            0.9974672198295593
        ]
    },
    "4556": {
        "similarity": 0.9961910247802734,
        "body": "    s = input().strip()\n    x = s[0]\n    print(f\"{x}BC\")\n\ngenerate_abbreviation()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930033683776855,
            0.9946917295455933,
            0.9925292134284973,
            0.9942757487297058,
            0.9896555542945862,
            0.9960984587669373,
            0.9961323142051697,
            0.9935488700866699,
            0.9916641116142273,
            0.9915558695793152,
            0.9952806234359741,
            0.9961909055709839,
            0.9957124590873718,
            0.9955815672874451,
            0.995231032371521,
            0.9950589537620544,
            0.9895817637443542,
            0.9946726560592651,
            0.9871531128883362,
            0.9961910247802734
        ]
    },
    "4571": {
        "similarity": 0.9962513446807861,
        "body": "    time = 1900 * (2 ** m)\n    for i in range(m + 1, n + 1):\n        time += 100\n    return int(time)\n\nn, m = map(int, input().split())\nprint(expected_time(n, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9874763488769531,
            0.9941017031669617,
            0.9911983013153076,
            0.9942175149917603,
            0.9962513446807861,
            0.9954093098640442,
            0.993423581123352,
            0.9950302839279175,
            0.9960404634475708,
            0.9943645000457764,
            0.9932138323783875,
            0.9943514466285706,
            0.9946853518486023,
            0.9962272644042969,
            0.9948508739471436,
            0.994960367679596,
            0.9954360127449036,
            0.9938794374465942,
            0.9929872751235962,
            0.9959323406219482
        ]
    },
    "4019": {
        "similarity": 0.9979663491249084,
        "body": "    n, m, D = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((min(u, v), max(u, v)))\n\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n        if node == 1 and degree != D:\n            return False\n        visited[node] = True\n        for neighbor in adj[node]:\n            if neighbor != parent and not visited[neighbor]:\n                if dfs(neighbor, node, degree + 1):\n                    spanning_tree.append((node, neighbor))\n                    return True\n        return False\n\n    visited = [False] * (n+1)\n    spanning_tree = []\n    if dfs(1, None, 0):\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nfind_spanning_tree()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979493021965027,
            0.9969715476036072,
            0.9977590441703796,
            0.9974045157432556,
            0.9961323142051697,
            0.9967308044433594,
            0.9978354573249817,
            0.997059166431427,
            0.9978849291801453,
            0.9962748289108276,
            0.9965302348136902,
            0.9976293444633484,
            0.9967563152313232,
            0.9973334074020386,
            0.9965196251869202,
            0.9967408776283264,
            0.9976564049720764,
            0.9979663491249084,
            0.9923868775367737,
            0.9973372220993042
        ]
    },
    "4265": {
        "similarity": 0.9972286224365234,
        "body": "    s = input()\n    t = input()\n    ops = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            ops += 1\n    print(ops)\n\nmin_ops()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962339997291565,
            0.9960023760795593,
            0.9963613748550415,
            0.9961869120597839,
            0.9970157146453857,
            0.9972286224365234,
            0.9956361651420593,
            0.9942976236343384,
            0.9970157146453857,
            0.9954977631568909,
            0.9964605569839478,
            0.9970157146453857,
            0.9962339997291565,
            0.9960744976997375,
            0.9962339997291565,
            0.9969819784164429,
            0.9963613748550415,
            0.9939180612564087,
            0.9964455962181091,
            0.9965349435806274
        ]
    },
    "4657": {
        "similarity": 0.9972604513168335,
        "body": "    if len(arr) < k:\n        return False\n\n    odd_sum = sum(1 for num in arr if num % 2 != 0)\n    even_sum = len(arr) - odd_sum\n    if k > min(odd_sum, even_sum):\n        return False\n\n    result = []\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum % 2 != 0 and len(result) < k:\n            result.append(i + 1)\n            curr_sum = 0\n\n    if len(result) == k:\n        return True, result\n    else:\n        return False\n\n    q = int(input())\n    for _ in range(q):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        divisible, result = can_divide(arr, k)\n        if divisible:\n            print(\"YES\")\n            print(*result)\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944654703140259,
            0.9969058632850647,
            0.9954637289047241,
            0.9957241415977478,
            0.9970147013664246,
            0.9944785237312317,
            0.9959188103675842,
            0.9965211749076843,
            0.9966444969177246,
            0.9969796538352966,
            0.9912424683570862,
            0.9968163371086121,
            0.9957627058029175,
            0.9949831962585449,
            0.9971266388893127,
            0.9949515461921692,
            0.9957267642021179,
            0.9951978325843811,
            0.9972604513168335,
            0.9969900250434875
        ]
    },
    "4599": {
        "similarity": 0.9962519407272339,
        "body": "    num_cards = int(input())\n    card_values = list(map(int, input().split()))\n    alice_score, bob_score = 0, 0\n    for i in range(num_cards):\n        if i % 2 == 0:\n            alice_score += card_values[i]\n        else:\n            bob_score += card_values[i]\n    print(alice_score - bob_score)\n\nmax_score_difference()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954207539558411,
            0.9960246682167053,
            0.9957627058029175,
            0.9957627058029175,
            0.9933146238327026,
            0.9905264973640442,
            0.9953336119651794,
            0.9893885254859924,
            0.9939103722572327,
            0.9962172508239746,
            0.9901530742645264,
            0.9927474856376648,
            0.9962519407272339,
            0.9925691485404968,
            0.9953595995903015,
            0.9960441589355469,
            0.9942126870155334,
            0.9944444298744202,
            0.9935393333435059,
            0.9962451457977295
        ]
    },
    "4774": {
        "similarity": 0.9965420961380005,
        "body": "    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    results = []\n\n    for op1 in ops:\n        for op2 in ops:\n            try:\n                if eval(f\"{a} {op1} {b}\") == eval(f\"{c} {op2} {d}\"):\n                    results.append(f\"{a} {op1} {b} = {c} {op2} {d}\")\n            except ZeroDivisionError:\n                pass\n\n    results.sort()\n    if not results:\n        print(\"problems ahead\")\n    else:\n        print('\\n'.join(results))\n\nfind_operators()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956933856010437,
            0.9962551593780518,
            0.9954480528831482,
            0.9952604174613953,
            0.9938948750495911,
            0.9951902627944946,
            0.9946388602256775,
            0.9955242872238159,
            0.9957712888717651,
            0.9962999224662781,
            0.9961515665054321,
            0.9943388104438782,
            0.9898750185966492,
            0.9965420961380005,
            0.9942227602005005,
            0.9962416291236877,
            0.9954193830490112,
            0.9961292147636414,
            0.9955508708953857,
            0.9948715567588806
        ]
    },
    "4851": {
        "similarity": 0.9973954558372498,
        "body": "    while True:\n        if sum(int(digit) for digit in str(n)) % n == 0:\n            return n\n        n += 1\n\nn = int(input())\nprint(smallest_harshad(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951619505882263,
            0.9961211681365967,
            0.9952269196510315,
            0.9961805939674377,
            0.9961886405944824,
            0.9972963929176331,
            0.9925607442855835,
            0.9971903562545776,
            0.997222900390625,
            0.9920026063919067,
            0.9957674145698547,
            0.996606707572937,
            0.994684100151062,
            0.9965453743934631,
            0.9973954558372498,
            0.9954685568809509,
            0.9971903562545776,
            0.9971138834953308,
            0.9966205954551697,
            0.9912983775138855
        ]
    },
    "4655": {
        "similarity": 0.9974076151847839,
        "body": "    for _ in range(int(input())):\n        a, b, c = map(int, input().split())\n        candies = sorted([a, b, c])\n        if candies[0] + candies[1] <= candies[2]:\n            print(candies[2] // 2)\n        else:\n            print(min(a, b))\n\nmax_candies()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972301125526428,
            0.9961339235305786,
            0.996703028678894,
            0.9942447543144226,
            0.9963963031768799,
            0.9961115121841431,
            0.9937364459037781,
            0.9971905946731567,
            0.9937713146209717,
            0.9960404634475708,
            0.9962080121040344,
            0.996662437915802,
            0.99642413854599,
            0.9971972107887268,
            0.9966591596603394,
            0.9974076151847839,
            0.9969781637191772,
            0.9958671927452087,
            0.9960901141166687,
            0.9959208965301514
        ]
    },
    "4132": {
        "similarity": 0.9949696063995361,
        "body": "    n = int(input())\n    health = list(map(int, input().split()))\n    while len(health) > 1:\n        i, j = sorted([(i, health[i]) for i in range(n)], key=lambda x: x[1])[:2]\n        health[j] -= health[i]\n        if health[j] <= 0:\n            del health[j]\n    print(min(health))\n\nmin_health()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922484159469604,
            0.9918906688690186,
            0.9939475655555725,
            0.9921959638595581,
            0.9888960123062134,
            0.9945592284202576,
            0.9949696063995361,
            0.9945326447486877,
            0.9932200908660889,
            0.9915652871131897,
            0.989600658416748,
            0.9948971271514893,
            0.9924266338348389,
            0.9916470050811768,
            0.9932810068130493,
            0.9939507842063904,
            0.9927878975868225,
            0.990958571434021,
            0.9943020343780518,
            0.9910722970962524
        ]
    },
    "4085": {
        "similarity": 0.997279703617096,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        x = max(divisors)\n        for d in divisors:\n            if d * 2 <= x and d * 2 not in divisors:\n                print(-1)\n                break\n        else:\n            print(x)\n\nfind_min_x()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949274659156799,
            0.9966343641281128,
            0.9962391257286072,
            0.997279703617096,
            0.9965897798538208,
            0.9931345582008362,
            0.9948834180831909,
            0.9959843158721924,
            0.990543782711029,
            0.9965456128120422,
            0.9958299398422241,
            0.9961318969726562,
            0.9971245527267456,
            0.9926356077194214,
            0.9963828921318054,
            0.9935939311981201,
            0.9965635538101196,
            0.9968006014823914,
            0.99600750207901,
            0.9968878030776978
        ]
    },
    "4399": {
        "similarity": 0.9948329925537109,
        "body": "    s = input()\n    for i in range(3):\n        if s[i] == 'A' and s[(i + 1) % 3] == 'B':\n            print('Yes')\n            return\n        elif s[i] == 'B' and s[(i + 1) % 3] == 'A':\n            print('Yes')\n            return\n    print('No')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9814738035202026,
            0.9944556355476379,
            0.9929001331329346,
            0.9911395907402039,
            0.992950975894928,
            0.9931955933570862,
            0.9929090142250061,
            0.9884405732154846,
            0.9932349324226379,
            0.9941312074661255,
            0.9939848184585571,
            0.9944121837615967,
            0.9933666586875916,
            0.9940400719642639,
            0.9859824180603027,
            0.9948329925537109,
            0.9882306456565857,
            0.9941548705101013,
            0.9882306456565857,
            0.9934608340263367
        ]
    },
    "4999": {
        "similarity": 0.9989022016525269,
        "body": "    a, b = map(int, input().split())\n    ops = 0\n    while a > b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a -= 1\n        ops += 1\n    print(ops)\n\nmin_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9988518953323364,
            0.9968924522399902,
            0.9970161318778992,
            0.9976913332939148,
            0.9989022016525269,
            0.9989022016525269,
            0.9988518953323364,
            0.9983987212181091,
            0.9988518953323364,
            0.9982044100761414,
            0.9988518953323364,
            0.9984021782875061,
            0.997236430644989,
            0.9977205991744995,
            0.9989022016525269,
            0.998151957988739,
            0.9985207319259644,
            0.9988518953323364,
            0.9988208413124084,
            0.9982823729515076
        ]
    },
    "4727": {
        "similarity": 0.9979180097579956,
        "body": "    grid = [[int(j) for j in input().split()] for _ in range(4)]\n    move = int(input())\n\n    # Move tiles and merge\n    if move == 0: # left\n        for i in range(4):\n            new_row = []\n            zero_count = 0\n            for j in range(4):\n                if grid[i][j] != 0:\n                    new_row.append(grid[i][j])\n                else:\n                    zero_count += 1\n            for _ in range(zero_count):\n                new_row.append(0)\n            grid[i] = new_row\n\n        for i in range(3, -1, -1):\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1] and grid[i][j] != 0:\n                    grid[i][j], grid[i][j+1] = grid[i][j]*2, 0\n\n    elif move == 1: # up\n        grid = list(zip(*grid))[::-1]\n        merge_2048()\n        grid = list(zip(*grid))[::-1]\n\n    elif move == 2: # right\n        for i in range(4):\n            new_row = []\n            zero_count = 0\n            for j in range(3, -1, -1):\n                if grid[i][j] != 0:\n                    new_row.append(grid[i][j])\n                else:\n                    zero_count += 1\n            for _ in range(zero_count):\n                new_row.insert(0, 0)\n            grid[i] = new_row\n\n        for i in range(3, -1, -1):\n            for j in range(2, -1, -1):\n                if grid[i][j] == grid[i][j+1] and grid[i][j] != 0:\n                    grid[i][j], grid[i][j+1] = grid[i][j]*2, 0\n\n    elif move == 3: # down\n        grid = list(zip(*grid))[::-1]\n        merge_2048()\n        grid = list(zip(*grid))[::-1]\n\n    # Print result\n    for row in grid:\n        print(' '.join(str(x) for x in row))\n\nmerge_2048()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962714314460754,
            0.9969409108161926,
            0.9967685341835022,
            0.9968305826187134,
            0.9952916502952576,
            0.9971082806587219,
            0.9970277547836304,
            0.9967771768569946,
            0.9966133832931519,
            0.9979180097579956,
            0.9965611696243286,
            0.9969518780708313,
            0.9954673647880554,
            0.9975963234901428,
            0.9969301819801331,
            0.9966619610786438,
            0.9974600076675415,
            0.9958350658416748,
            0.9969467520713806,
            0.9974343180656433
        ]
    },
    "4906": {
        "similarity": 0.9979272484779358,
        "body": "    if operation == 'E':\n        encoded = ''\n        i = 0\n        while i < len(message):\n            count = 1\n            while i + 1 < len(message) and message[i] == message[i+1]:\n                i += 1\n                count += 1\n            encoded += message[i] + str(count)\n            i += 1\n        return encoded\n    elif operation == 'D':\n        decoded = ''\n        for i in range(0, len(message), 2):\n            char = message[i]\n            run_length = int(message[i+1])\n            decoded += char * run_length\n        return decoded\n\nprint(run_length_encoding(input().split()[0], input().split()[1]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975519776344299,
            0.9972656965255737,
            0.9976595640182495,
            0.9976417422294617,
            0.9976392984390259,
            0.996357262134552,
            0.9979272484779358,
            0.9951158165931702,
            0.9961736798286438,
            0.9976387023925781,
            0.9967617392539978,
            0.9968485832214355,
            0.997199535369873,
            0.9970577955245972,
            0.997686505317688,
            0.9959597587585449,
            0.9927554726600647,
            0.9963252544403076,
            0.9974004626274109,
            0.9977489113807678
        ]
    },
    "4011": {
        "similarity": 0.9959432482719421,
        "body": "    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subseg = a[i:j]\n            new_subseg = ''.join(str(f[int(d)]) for d in subseg)\n            num = int(new_subseg)\n            max_num = max(max_num, num)\n    print(max_num)\n\nmax_number()",
        "result": "failed: testcase 0",
        "similarities": [
            0.991081953048706,
            0.9936962127685547,
            0.9875003695487976,
            0.9944830536842346,
            0.9948134422302246,
            0.9955815672874451,
            0.9951590299606323,
            0.9935861229896545,
            0.9919834136962891,
            0.9924493432044983,
            0.9950224161148071,
            0.9881210327148438,
            0.986458420753479,
            0.9955201745033264,
            0.9959432482719421,
            0.9951667785644531,
            0.9955105185508728,
            0.9954211711883545,
            0.9950448870658875,
            0.9946411848068237
        ]
    },
    "4099": {
        "similarity": 0.9963740110397339,
        "body": "    n, k, m = map(int, input().split())\n    ai = list(map(int, input().split()))\n    total = sum(ai)\n    required = max(0, n * m - total)\n    print(-1 if required > k else required)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910627603530884,
            0.9951936602592468,
            0.9949823021888733,
            0.9952081441879272,
            0.9933181405067444,
            0.9958139061927795,
            0.9955153465270996,
            0.9944077730178833,
            0.9955463409423828,
            0.9925589561462402,
            0.9950982928276062,
            0.9954609274864197,
            0.991094708442688,
            0.9963740110397339,
            0.9943260550498962,
            0.9962214231491089,
            0.9960516095161438,
            0.9952580332756042,
            0.9955340027809143,
            0.996152400970459
        ]
    },
    "4465": {
        "similarity": 0.9964515566825867,
        "body": "    a, b = map(int, input().split())\n    return (a - 2) * (b - 2)\n\nprint(calculate_area())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961128234863281,
            0.9924535155296326,
            0.9961128234863281,
            0.9937244057655334,
            0.9935762286186218,
            0.9924665093421936,
            0.9935762286186218,
            0.9904507994651794,
            0.9961128234863281,
            0.9964515566825867,
            0.9956323504447937,
            0.9935256838798523,
            0.9964515566825867,
            0.9935762286186218,
            0.9964515566825867,
            0.9962077736854553,
            0.9961128234863281,
            0.9961128234863281,
            0.9961128234863281,
            0.9947431683540344
        ]
    },
    "4315": {
        "similarity": 0.9963993430137634,
        "body": "import math\n\nR = int(input())\ncircumference = 2 * math.pi * R\nprint(circumference)",
        "result": "passed",
        "similarities": [
            0.9963993430137634,
            0.9955602884292603,
            0.9941843152046204,
            0.9955602884292603,
            0.9963390827178955,
            0.9926694631576538,
            0.9853100180625916,
            0.9955602884292603,
            0.9963993430137634,
            0.9935107827186584,
            0.9936474561691284,
            0.9888409972190857,
            0.9963993430137634,
            0.9951497316360474,
            0.9942117929458618,
            0.9955602884292603,
            0.9960115551948547,
            0.9958834648132324,
            0.9958834648132324,
            0.9963993430137634
        ]
    },
    "4633": {
        "similarity": 0.9978757500648499,
        "body": "    moves = 0\n    while sum(int(digit) for digit in str(n)) > s:\n        n += 1\n        moves += 1\n    return moves\n\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978757500648499,
            0.9972588419914246,
            0.9888094663619995,
            0.9975797533988953,
            0.9966521263122559,
            0.997012197971344,
            0.9973734021186829,
            0.9969728589057922,
            0.9967254996299744,
            0.9976350665092468,
            0.9978757500648499,
            0.9971082806587219,
            0.9970104098320007,
            0.9966926574707031,
            0.997622549533844,
            0.9978757500648499,
            0.9971185326576233,
            0.9971112012863159,
            0.9978757500648499,
            0.9971577525138855
        ]
    },
    "4734": {
        "similarity": 0.9967987537384033,
        "body": "    y, p = input().split()\n    if y[-1] == 'e':\n        print(y + 'x' + p)\n    elif y.endswith(('a', 'i', 'o', 'u')):\n        print(y[:-1] + 'ex' + p)\n    elif y.endswith('ex'):\n        print(y + p)\n    else:\n        print(y + 'ex' + p)\n\nextend_name()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962291717529297,
            0.9946767687797546,
            0.9967987537384033,
            0.9952138662338257,
            0.9954606294631958,
            0.9961519837379456,
            0.995665431022644,
            0.9957472085952759,
            0.9958482384681702,
            0.995209276676178,
            0.9960299134254456,
            0.9938017129898071,
            0.9957586526870728,
            0.9960256814956665,
            0.9966312050819397,
            0.9946837425231934,
            0.9955064058303833,
            0.9966312050819397,
            0.9915225505828857,
            0.9967987537384033
        ]
    },
    "4229": {
        "similarity": 0.9986726641654968,
        "body": "    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        elif i % 3 == 0 or i % 5 == 0:\n            continue\n        else:\n            total += i\n    print(total)\n\nn = int(input())\nfizzbuzz_sum(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9985432028770447,
            0.9986726641654968,
            0.9983037710189819,
            0.9986726641654968,
            0.9962126016616821,
            0.9981496930122375,
            0.9974198937416077,
            0.9983309507369995,
            0.9978479146957397,
            0.9984572529792786,
            0.9979682564735413,
            0.9965175986289978,
            0.9976055026054382,
            0.9970183372497559,
            0.9978479146957397,
            0.9984572529792786,
            0.9984207153320312,
            0.9978675842285156,
            0.9981911182403564,
            0.9981909394264221
        ]
    },
    "4321": {
        "similarity": 0.9974654316902161,
        "body": "    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    return n\n\nn, k = map(int, input().split())\nprint(decrease_number(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947339296340942,
            0.9973921775817871,
            0.9974654316902161,
            0.996314525604248,
            0.9974654316902161,
            0.9974654316902161,
            0.9957650899887085,
            0.9965201020240784,
            0.9974654316902161,
            0.9967815279960632,
            0.9928598999977112,
            0.9974654316902161,
            0.9974654316902161,
            0.9952692985534668,
            0.9944268465042114,
            0.9944268465042114,
            0.9974654316902161,
            0.995468258857727,
            0.9944268465042114,
            0.9904752969741821
        ]
    },
    "4503": {
        "similarity": 0.9962429404258728,
        "body": "    move_used = [False] * num_moves\n    for _ in range(num_moves):\n        for i in range(num_moves):\n            if not move_used[i] and monster_health <= move_damage[i]:\n                monster_health -= move_damage[i]\n                move_used[i] = True\n                break\n        else:\n            return False\n    return True\n\nprint(\"Yes\" if can_win(*map(int, input().split())) else \"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953228831291199,
            0.9945299029350281,
            0.9960232973098755,
            0.9896162748336792,
            0.9931570291519165,
            0.9961032867431641,
            0.9955953359603882,
            0.9955431222915649,
            0.995438814163208,
            0.9960007071495056,
            0.9956229329109192,
            0.9959512948989868,
            0.9962429404258728,
            0.994280993938446,
            0.9952244162559509,
            0.9954285025596619,
            0.9916635155677795,
            0.9954346418380737,
            0.9957351684570312,
            0.993658185005188
        ]
    },
    "4855": {
        "similarity": 0.993687093257904,
        "body": "    a, i = map(int, input().split())\n    return max(0, i * a - a + 1)\n\nprint(journal_impact())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911554455757141,
            0.9935242533683777,
            0.9935170412063599,
            0.9820643067359924,
            0.9764091372489929,
            0.9905145764350891,
            0.9912053346633911,
            0.9897107481956482,
            0.9870219826698303,
            0.9913368225097656,
            0.9928213357925415,
            0.9930771589279175,
            0.9924297332763672,
            0.9931989908218384,
            0.9893965721130371,
            0.9923834800720215,
            0.9909582734107971,
            0.993687093257904,
            0.9901150465011597,
            0.9809358716011047
        ]
    },
    "4704": {
        "similarity": 0.9972388744354248,
        "body": "    n = int(input())\n    nums = list(map(int, input().split()))\n    total = sum(nums)\n    diff = float('inf')\n    for i in range(1, n):\n        x = sum(nums[:i])\n        y = total - x\n        diff = min(diff, abs(x - y))\n    print(diff)\n\nmin_diff()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951591491699219,
            0.9971191883087158,
            0.9955678582191467,
            0.9939812421798706,
            0.9956986308097839,
            0.9972388744354248,
            0.9959034323692322,
            0.9935868978500366,
            0.9962685108184814,
            0.9951983094215393,
            0.9949657320976257,
            0.9963333010673523,
            0.9961348176002502,
            0.9960730671882629,
            0.9960005879402161,
            0.9954943656921387,
            0.9963406920433044,
            0.9952832460403442,
            0.9963142275810242,
            0.995132327079773
        ]
    },
    "4829": {
        "similarity": 0.9969536662101746,
        "body": "    left_tines, right_tines = map(int, input().split())\n    if left_tines == 0 and right_tines == 0:\n        print(\"Not a moose\")\n    elif left_tines == right_tines:\n        points = left_tines * 2\n        print(f\"Even {points}\")\n    else:\n        points = max(left_tines, right_tines) * 2\n        print(f\"Odd {points}\")\n\ndetermine_moose_points()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952617287635803,
            0.9957891702651978,
            0.9921851754188538,
            0.9961785078048706,
            0.9936017394065857,
            0.9963205456733704,
            0.9936307668685913,
            0.9963120818138123,
            0.9948976635932922,
            0.9960712790489197,
            0.9927127361297607,
            0.9946168661117554,
            0.9933863282203674,
            0.9951959252357483,
            0.9961961507797241,
            0.9963595867156982,
            0.9954066872596741,
            0.9960588216781616,
            0.9969536662101746,
            0.9965051412582397
        ]
    },
    "4730": {
        "similarity": 0.9953516721725464,
        "body": "    length = int(input())\n    line = input().strip()\n    stack = []\n    for i, char in enumerate(line):\n        if char in '([{':\n            stack.append((char, i))\n        elif char == ')':\n            if not stack or stack[-1][0] != '(':\n                print(')' + str(i))\n                return\n        elif char == ']':\n            if not stack or stack[-1][0] != '[':\n                print(']' + str(i))\n                return\n        elif char == '}':\n            if not stack or stack[-1][0] != '{':\n                print('}' + str(i))\n                return\n    if len(stack) > 0:\n        print('ok so far')\n    else:\n        print('too many closing delimiters')\n\nvalidate_parentheses()",
        "result": "failed: testcase 0",
        "similarities": [
            0.991474449634552,
            0.9928545951843262,
            0.9946977496147156,
            0.9897631406784058,
            0.9901840686798096,
            0.9948956370353699,
            0.9914005994796753,
            0.9908931255340576,
            0.9917317628860474,
            0.9947273135185242,
            0.9931935667991638,
            0.9953516721725464,
            0.9944913983345032,
            0.9926184415817261,
            0.9888012409210205,
            0.9930695295333862,
            0.9946805238723755,
            0.9928405284881592,
            0.9939664602279663,
            0.9904805421829224
        ]
    },
    "4729": {
        "similarity": 0.9959098696708679,
        "body": "password, message = input().split()\nfound = [False] * len(password)\ni = j = 0\nwhile i < len(message):\n    if not found[j]:\n        if message[i] == password[j]:\n            found[j] = True\n            j += 1\n        elif j > 0:\n            break\n    i += 1\nprint('PASS' if all(found) else 'FAIL')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957658052444458,
            0.9959098696708679,
            0.9953739643096924,
            0.9946585297584534,
            0.9950119853019714,
            0.9937179088592529,
            0.9953704476356506,
            0.9937057495117188,
            0.9952635765075684,
            0.9935993552207947,
            0.993789553642273,
            0.9941174387931824,
            0.9951070547103882,
            0.9938138723373413,
            0.988620936870575,
            0.9934386014938354,
            0.9890691637992859,
            0.9912684559822083,
            0.9930883646011353,
            0.9937198162078857
        ]
    },
    "4582": {
        "similarity": 0.9960269927978516,
        "body": "    a, b = input().split()\n    if a == 'H' and b == 'H':\n        print('H')\n    elif a == 'D' and b == 'D':\n        print('H')\n    else:\n        print('D')\n\ndetermine_honesty()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947728514671326,
            0.9960269927978516,
            0.9927916526794434,
            0.9930779337882996,
            0.9846532940864563,
            0.995652437210083,
            0.993986964225769,
            0.9957554340362549,
            0.9936312437057495,
            0.9952706098556519,
            0.9952111840248108,
            0.9949738383293152,
            0.9907597899436951,
            0.9916926026344299,
            0.9959689974784851,
            0.9946853518486023,
            0.9947865009307861,
            0.9949738383293152,
            0.9879403710365295,
            0.9957731366157532
        ]
    },
    "4910": {
        "similarity": 0.9968199729919434,
        "body": "costume_count = {}\nfor _ in range(int(input())):\n    costume = input()\n    if costume not in costume_count:\n        costume_count[costume] = 0\n    costume_count[costume] += 1\n\nmax_count = max(costume_count.values())\nfor costume, count in sorted(costume_count.items()):\n    if count == max_count:\n        print(costume)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966787099838257,
            0.9957213401794434,
            0.9965298175811768,
            0.9962008595466614,
            0.9945104718208313,
            0.9964624047279358,
            0.9950313568115234,
            0.9940430521965027,
            0.9967411756515503,
            0.9963770508766174,
            0.9953115582466125,
            0.9963186383247375,
            0.9968199729919434,
            0.9946682453155518,
            0.9934934377670288,
            0.9946612119674683,
            0.9966035485267639,
            0.9933869242668152,
            0.9964309334754944,
            0.9958491921424866
        ]
    },
    "4323": {
        "similarity": 0.9970996379852295,
        "body": "    n, m = map(int, input().split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        songs.append((a, b))\n\n    compressions = 0\n    total_size = sum(a for a, b in songs)\n\n    if total_size > m:\n        return -1\n\n    songs.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if total_size <= m:\n            break\n        compressions += 1\n        total_size -= songs[i][0] - songs[i][1]\n\n    return compressions",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957542419433594,
            0.9931433796882629,
            0.9958686828613281,
            0.9970996379852295,
            0.9911612272262573,
            0.9965830445289612,
            0.997077226638794,
            0.9969806671142578,
            0.9962425231933594,
            0.9956770539283752,
            0.9969633221626282,
            0.9960146546363831,
            0.996762752532959,
            0.9967764019966125,
            0.9970408082008362,
            0.9960882067680359,
            0.9969020485877991,
            0.9968276023864746,
            0.9970526695251465,
            0.9969633221626282
        ]
    },
    "4626": {
        "similarity": 0.993087887763977,
        "body": "    max_val = max(a, b, c)\n    min_val = min(a, b, c)\n\n    if max_val >= a + b:\n        return abs(b - max_val) + abs(c - max_val) + abs(a - max_val)\n    elif max_val >= a + c:\n        return abs(c - max_val) + abs(b - max_val) + abs(a - max_val)\n    else:\n        return abs(a - min_val) + abs(b - min_val) + abs(c - min_val)\n\n    for _ in range(int(input())):\n        a, b, c = map(int, input().split())\n        print(min_distance(a, b, c))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926941394805908,
            0.990766704082489,
            0.9928151369094849,
            0.9918837547302246,
            0.9819279909133911,
            0.9924324750900269,
            0.9920371174812317,
            0.9907081127166748,
            0.9920770525932312,
            0.9885287880897522,
            0.9905508160591125,
            0.9878405332565308,
            0.9918534159660339,
            0.986954927444458,
            0.9862641096115112,
            0.9886181354522705,
            0.988785982131958,
            0.9892740845680237,
            0.9915696978569031,
            0.993087887763977
        ]
    },
    "4400": {
        "similarity": 0.9987254738807678,
        "body": "    s = input()\n    max_rainy_days = 0\n    current_rainy_days = 0\n\n    for day in range(3):\n        if s[day] == 'R':\n            current_rainy_days += 1\n            max_rainy_days = max(max_rainy_days, current_rainy_days)\n        else:\n            current_rainy_days = 0\n\n    print(max_rainy_days)\n\nif __name__ == \"__main__\":\n    find_max_rainy_days()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9986764788627625,
            0.9987254738807678,
            0.9987147450447083,
            0.998693585395813,
            0.9986887574195862,
            0.9983763694763184,
            0.9983233213424683,
            0.9986887574195862,
            0.997260570526123,
            0.9984183311462402,
            0.9983178377151489,
            0.9987147450447083,
            0.9976831674575806,
            0.9982078075408936,
            0.998718798160553,
            0.9987174868583679,
            0.998693585395813,
            0.9987135529518127,
            0.998275637626648,
            0.9979669451713562
        ]
    },
    "4794": {
        "similarity": 0.9964505434036255,
        "body": "    r, c = map(int, input().split())\n    grid = [input() for _ in range(r)]\n\n        return all(grid[x+i][y+j] == '.' for i in range(2) for j in range(2))\n\n    counts = [0] * 5\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if grid[i][j] != '#' and can_park(i, j):\n                counts[0] += 1\n                if j > 0 and grid[i][j-1] == 'X':\n                    counts[1] += 1\n                if i > 0 and grid[i-1][j] == 'X':\n                    counts[2] += 1\n                if i > 0 and j > 0 and grid[i-1][j-1] == 'X':\n                    counts[3] += 1\n\n    print(*counts, sep='\\n')\n\ncount_parking_spaces()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949043989181519,
            0.9934577941894531,
            0.9944837689399719,
            0.9961981773376465,
            0.9954153299331665,
            0.9947540163993835,
            0.9956506490707397,
            0.9948666095733643,
            0.9964505434036255,
            0.9951104521751404,
            0.9951308369636536,
            0.9933638572692871,
            0.992222249507904,
            0.9960987567901611,
            0.9951585531234741,
            0.9958444833755493,
            0.9934435486793518,
            0.9918004274368286,
            0.9962595701217651,
            0.9949145913124084
        ]
    },
    "4096": {
        "similarity": 0.9960532784461975,
        "body": "    days = 0\n    pages_written = 0\n    for i in range(n):\n        if pages_written + a[i] <= m:\n            pages_written += a[i]\n        else:\n            days += 1\n            pages_written = a[i]\n            if pages_written > m:\n                return -1\n    return days\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nprint(min_days(n, m, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896913766860962,
            0.9937099814414978,
            0.9948613047599792,
            0.9955998659133911,
            0.9932913780212402,
            0.9913366436958313,
            0.9945287108421326,
            0.9952892661094666,
            0.9939764142036438,
            0.9947458505630493,
            0.9956098794937134,
            0.9959987998008728,
            0.9876980185508728,
            0.9960532784461975,
            0.9958116412162781,
            0.9933615326881409,
            0.9947091937065125,
            0.9954927563667297,
            0.9882164001464844,
            0.9943453073501587
        ]
    },
    "4530": {
        "similarity": 0.9961413145065308,
        "body": "    n = int(input())\n    skills = list(map(int, input().split()))\n    unique_skills = set(skills)\n    skill_counts = {}\n    for skill in skills:\n        if skill not in skill_counts:\n            skill_counts[skill] = 0\n        skill_counts[skill] += 1\n\n    max_count = max(skill_counts.values())\n    if len(unique_skills) <= max_count:\n        print(len(unique_skills))\n    else:\n        print(max_count)\n\nfor _ in range(int(input())):\n    max_team_size()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946192502975464,
            0.9884865283966064,
            0.9961413145065308,
            0.994243323802948,
            0.9951459765434265,
            0.9954701662063599,
            0.9958534240722656,
            0.9951463341712952,
            0.9943005442619324,
            0.996113657951355,
            0.9934495687484741,
            0.9937631487846375,
            0.9942677021026611,
            0.9938222169876099,
            0.9953592419624329,
            0.9955360293388367,
            0.9952042102813721,
            0.9927654266357422,
            0.9952003955841064,
            0.9934409260749817
        ]
    },
    "4724": {
        "similarity": 0.9966259002685547,
        "body": "    r = int(input())\n    g = int(input())\n\n    performance = (g * 2 - r) / 1\n    print(int(performance))\n\ncalculate_performance()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931409955024719,
            0.9944180846214294,
            0.9958432912826538,
            0.9958146810531616,
            0.993438720703125,
            0.9958907961845398,
            0.9929932951927185,
            0.9957077503204346,
            0.9958638548851013,
            0.9958139061927795,
            0.9954085350036621,
            0.9953386187553406,
            0.9953292012214661,
            0.9964118003845215,
            0.9887473583221436,
            0.9940276145935059,
            0.9966259002685547,
            0.9953162670135498,
            0.9963380098342896,
            0.9960178732872009
        ]
    },
    "4276": {
        "similarity": 0.9979866743087769,
        "body": "    n, t = map(int, input().split())\n    routes = []\n    for _ in range(n):\n        c, ti = map(int, input().split())\n        routes.append((c, ti))\n    min_cost = float('inf')\n    for cost, time in routes:\n        if time <= t and cost < min_cost:\n            min_cost = cost\n    print(min_cost if min_cost != float('inf') else 'TLE')\n\nfind_smallest_cost()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978649616241455,
            0.9971705079078674,
            0.9977720975875854,
            0.9975915551185608,
            0.9974409341812134,
            0.9969894289970398,
            0.9967573285102844,
            0.997409999370575,
            0.9957970380783081,
            0.9969894289970398,
            0.9978982210159302,
            0.9979866743087769,
            0.9960057139396667,
            0.9978092908859253,
            0.9976119995117188,
            0.9968085289001465,
            0.9973325133323669,
            0.9950715899467468,
            0.9976119995117188,
            0.997342586517334
        ]
    },
    "4708": {
        "similarity": 0.9970881938934326,
        "body": "    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n\n    total_fee = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            total_fee += x\n        else:\n            total_fee += y\n\n    print(total_fee)\n\ncalculate_fee()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968832731246948,
            0.9969133138656616,
            0.9946175813674927,
            0.9945967793464661,
            0.9970881938934326,
            0.9965912699699402,
            0.9957855939865112,
            0.9960616230964661,
            0.9944050312042236,
            0.995785653591156,
            0.990276038646698,
            0.9948262572288513,
            0.9955187439918518,
            0.9950124025344849,
            0.9965275526046753,
            0.9964174032211304,
            0.9897604584693909,
            0.9968857169151306,
            0.995457112789154,
            0.9965616464614868
        ]
    },
    "4396": {
        "similarity": 0.9966028928756714,
        "body": "    N = int(input())\n    total_yen = 0.0\n\n    for _ in range(N):\n        x, u = input().split()\n        if u == \"JPY\":\n            total_yen += float(x)\n        elif u == \"BTC\":\n            total_yen += float(x) * 380000.0\n\n    print(total_yen)\n\nif __name__ == \"__main__\":\n    calculate_total_gifts()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963314533233643,
            0.994830310344696,
            0.9953168630599976,
            0.9962102174758911,
            0.9956685304641724,
            0.9963065981864929,
            0.9963773488998413,
            0.9964625835418701,
            0.9951531291007996,
            0.9944079518318176,
            0.9939008951187134,
            0.9960564374923706,
            0.9965226054191589,
            0.9966028928756714,
            0.9938914775848389,
            0.9961674213409424,
            0.9960265159606934,
            0.9949353933334351,
            0.9959332346916199,
            0.9961549043655396
        ]
    },
    "4155": {
        "similarity": 0.997127115726471,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    operations = 0\n    current_height = 0\n    for i in range(1, n + 1):\n        if heights[i - 1] > current_height:\n            operations += heights[i - 1] - current_height\n            current_height = heights[i - 1]\n        elif heights[i - 1] < current_height:\n            operations += current_height - heights[i - 1]\n    print(operations)\n\nmin_watering_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995784342288971,
            0.9947788715362549,
            0.9959570169448853,
            0.9878713488578796,
            0.9963750243186951,
            0.9953488707542419,
            0.9928361773490906,
            0.9965037107467651,
            0.9956555962562561,
            0.9970147013664246,
            0.996920645236969,
            0.9965927600860596,
            0.9911131858825684,
            0.9937782287597656,
            0.9961417317390442,
            0.9966524839401245,
            0.997127115726471,
            0.9969061017036438,
            0.9946409463882446,
            0.9963393211364746
        ]
    },
    "4557": {
        "similarity": 0.9963120222091675,
        "body": "    a, b, x = map(int, input().split())\n    if x >= a and x <= a + b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ncheck_cats()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995707094669342,
            0.995911180973053,
            0.9963120222091675,
            0.9962246417999268,
            0.9956243634223938,
            0.9902570843696594,
            0.9954625964164734,
            0.9945248961448669,
            0.9955255389213562,
            0.9954044818878174,
            0.9953474998474121,
            0.9932824969291687,
            0.9942412972450256,
            0.9959098696708679,
            0.9916924238204956,
            0.9931706190109253,
            0.9959849119186401,
            0.9932205677032471,
            0.9954474568367004,
            0.9960376620292664
        ]
    },
    "4930": {
        "similarity": 0.9970905780792236,
        "body": "    sentence = input().split()\n    vowels = 'aeiou'\n    decoded_sentence = []\n    for word in sentence:\n        decoded_word = ''\n        for char in word:\n            if char not in vowels:\n                decoded_word += char\n            elif len(decoded_word) > 0 and decoded_word[-1] == 'p':\n                decoded_word += char\n            else:\n                decoded_word += char + 'p' + char\n        decoded_sentence.append(decoded_word)\n    print(' '.join(decoded_sentence))\n\ndecode_luka_sentence()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961054921150208,
            0.9951177835464478,
            0.9959624409675598,
            0.9948657155036926,
            0.9932580590248108,
            0.9963990449905396,
            0.9967308044433594,
            0.9959313273429871,
            0.9970572590827942,
            0.9943544268608093,
            0.9965609312057495,
            0.9933375120162964,
            0.9961860179901123,
            0.9965139031410217,
            0.9939862489700317,
            0.9970905780792236,
            0.9915727376937866,
            0.9957891702651978,
            0.9957263469696045,
            0.9957014322280884
        ]
    },
    "4715": {
        "similarity": 0.9964714050292969,
        "body": "    a, b, c = map(int, input().split())\n    colors = [a, b, c]\n    unique_colors = set(colors)\n    print(len(unique_colors))\n\ncount_colors()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957537651062012,
            0.9955182671546936,
            0.9962055683135986,
            0.9962056875228882,
            0.995207667350769,
            0.9961473345756531,
            0.9903919100761414,
            0.9929011464118958,
            0.9961549639701843,
            0.992832601070404,
            0.9955565929412842,
            0.9964714050292969,
            0.9955417513847351,
            0.9930064678192139,
            0.9959128499031067,
            0.9939525127410889,
            0.9948997497558594,
            0.9948644042015076,
            0.9915573000907898,
            0.9921087026596069
        ]
    },
    "4008": {
        "similarity": 0.9976452589035034,
        "body": "    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    colors = [-1] * n\n\n    for i in range(n):\n        if colors[i] == -1:\n            for j in range(k):\n                if all(colors[x] != j for x in range(i, n) if arr[x] == arr[i]):\n                    colors[i] = j\n                    break\n            else:\n                print(\"NO\")\n                return\n\n    print(\"YES\")\n    for color in colors:\n        print(color + 1, end=\" \")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976452589035034,
            0.99710613489151,
            0.9965641498565674,
            0.9964677691459656,
            0.9970044493675232,
            0.9949546456336975,
            0.9967533946037292,
            0.9966537356376648,
            0.9971989989280701,
            0.995451807975769,
            0.9920946359634399,
            0.9975241422653198,
            0.9950008392333984,
            0.9965617656707764,
            0.9972513914108276,
            0.9969196319580078,
            0.9951868653297424,
            0.9973354339599609,
            0.9962704181671143,
            0.9963324666023254
        ]
    },
    "4257": {
        "similarity": 0.9955601096153259,
        "body": "a, b = map(int, input().split())\nfor _ in range(a):\n    for __ in range(b):\n        pass\nresult = a * b\nprint(result)",
        "result": "passed",
        "similarities": [
            0.9955601096153259,
            0.9934167265892029,
            0.9929444193840027,
            0.994694173336029,
            0.994147777557373,
            0.9932510852813721,
            0.9941105246543884,
            0.9941743612289429,
            0.9929444193840027,
            0.9929444193840027,
            0.9943799376487732,
            0.9934479594230652,
            0.9941985607147217,
            0.9944036602973938,
            0.9933375120162964,
            0.9941960573196411,
            0.9929444193840027,
            0.9929444193840027,
            0.9944506287574768,
            0.9941105246543884
        ]
    },
    "4584": {
        "similarity": 0.9972604513168335,
        "body": "N = int(input())\nA = list(map(int, input().split()))\nsubordinates = [0] * N\n\nfor i in range(2, N + 1):\n    subordinates[A[i - 1]] += 1\n\nfor count in subordinates:\n    print(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967859983444214,
            0.9963411092758179,
            0.9969133138656616,
            0.996799647808075,
            0.9970840811729431,
            0.9969038963317871,
            0.9971986413002014,
            0.9966815114021301,
            0.9967316389083862,
            0.997157871723175,
            0.9949929118156433,
            0.996918261051178,
            0.996918261051178,
            0.9969087243080139,
            0.9969838857650757,
            0.9948881268501282,
            0.9966495037078857,
            0.9972604513168335,
            0.9969191551208496,
            0.9972130656242371
        ]
    },
    "4195": {
        "similarity": 0.995317280292511,
        "body": "    d, n = map(int, input().split())\n    for i in range(100):\n        if i % 100 == d:\n            n -= 1\n            if n == 0:\n                return i\n\nprint(find_nth_number())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945210814476013,
            0.9910163879394531,
            0.9949228167533875,
            0.9943984150886536,
            0.9938273429870605,
            0.9951013326644897,
            0.9854927062988281,
            0.9943690896034241,
            0.9873185753822327,
            0.9948900938034058,
            0.9945694804191589,
            0.9937513470649719,
            0.9948640465736389,
            0.9932786226272583,
            0.9922592043876648,
            0.9951633810997009,
            0.9920033812522888,
            0.9897404909133911,
            0.995317280292511,
            0.9924724102020264
        ]
    },
    "4176": {
        "similarity": 0.996221125125885,
        "body": "    a, b = map(int, input().split())\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i * max(a, b)\n\nprint(min_pieces())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936744570732117,
            0.9889059662818909,
            0.9888737201690674,
            0.9960845112800598,
            0.9959025382995605,
            0.9897744059562683,
            0.9954943656921387,
            0.996221125125885,
            0.9955096244812012,
            0.9935537576675415,
            0.994515597820282,
            0.9925573468208313,
            0.9961238503456116,
            0.9961923360824585,
            0.9956849813461304,
            0.9954940676689148,
            0.9961238503456116,
            0.9960644245147705,
            0.9955853819847107,
            0.9953657388687134
        ]
    },
    "4166": {
        "similarity": 0.9977025389671326,
        "body": "    n, m = map(int, input().split())\n    digits = []\n    for _ in range(m):\n        s, c = map(int, input().split())\n        digits.append((s - 1, str(c)))\n    nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    smallest_num = None\n    for i in range(10 ** (n - m), 10 ** n):\n        num_str = str(i)\n        if len(num_str) != n or int(num_str[0]) == 0:\n            continue\n        if all(int(num_str[s-1]) == c for s, c in digits):\n            smallest_num = i\n            break\n    print(-1 if smallest_num is None else smallest_num)\n\ngenerate_smallest_number()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944520592689514,
            0.9966394305229187,
            0.9965531229972839,
            0.9972218871116638,
            0.9970851540565491,
            0.9975845217704773,
            0.9969010949134827,
            0.9975390434265137,
            0.9974727630615234,
            0.9959351420402527,
            0.9968056082725525,
            0.9977025389671326,
            0.9967846274375916,
            0.9969303607940674,
            0.9976047873497009,
            0.9972893595695496,
            0.9953669309616089,
            0.9967699646949768,
            0.995887279510498,
            0.9922639727592468
        ]
    },
    "4827": {
        "similarity": 0.9960663318634033,
        "body": "    units = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n    teens = [\"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = {\"2\": \"twenty\", \"3\": \"thirty\", \"4\": \"forty\", \"5\": \"fifty\", \"6\": \"sixty\", \"7\": \"seventy\", \"8\": \"eighty\", \"9\": \"ninety\"}\n\n    if number < 10:\n        return units[number - 1]\n    elif number < 20:\n        return teens[number - 11]\n    elif number < 100:\n        tens_digit = str(number // 10)\n        remaining = number % 10\n        if remaining == 0:\n            return tens[tens_digit]\n        else:\n            return tens[tens_digit] + units[remaining - 1]\n\n    n = int(input())\n    words = []\n    for _ in range(n):\n        word = input()\n        words.append(word)\n\n    number_name_index = words.index('$')\n    words[number_name_index] = generate_number_name(len(\" \".join(words)))\n    print(\" \".join(words))\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942819476127625,
            0.9951027631759644,
            0.9939135313034058,
            0.9953122735023499,
            0.9916710257530212,
            0.9943923950195312,
            0.9954301714897156,
            0.9953356385231018,
            0.9951158165931702,
            0.9958202838897705,
            0.995786190032959,
            0.9960663318634033,
            0.994968593120575,
            0.9931893944740295,
            0.995692789554596,
            0.9943183064460754,
            0.9952376484870911,
            0.9955715537071228,
            0.9958227276802063,
            0.9855579733848572
        ]
    },
    "4871": {
        "similarity": 0.9949561953544617,
        "body": "    scores = [int(input()) for _ in range(n)]\n    current_sum = 0\n    new_scores = []\n    for i in range(1, n + 1):\n        removed_score = scores[i - 1]\n        remaining_scores = scores[:i - 1] + scores[i:]\n        group_score = sum(s * (4 / 5) ** idx for idx, s in enumerate(remaining_scores)) / 5\n        new_scores.append(group_score)\n    current_group_score = sum(scores) / 5\n    avg_new_group_score = sum(new_scores) / len(new_scores)\n    print(f\"{current_group_score:.1f}\")\n    print(f\"{avg_new_group_score:.8f}\")\n\ncalculate_group_score(int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938565492630005,
            0.9922413229942322,
            0.9912878274917603,
            0.9903832674026489,
            0.9924088716506958,
            0.9938998818397522,
            0.9949561953544617,
            0.9911723136901855,
            0.9932390451431274,
            0.9946962594985962,
            0.9928727746009827,
            0.9925100207328796,
            0.990962564945221,
            0.9942638874053955,
            0.993497371673584,
            0.9931309223175049,
            0.9901488423347473,
            0.9915967583656311,
            0.9912894368171692,
            0.9920710325241089
        ]
    },
    "4148": {
        "similarity": 0.9969028830528259,
        "body": "    n = int(input())\n    s = input()\n    shifted_s = ''\n    for i in range(len(s)):\n        char_code = ord(s[i]) + n\n        if char_code > ord('Z'):\n            char_code -= 26\n        shifted_s += chr(char_code)\n    print(shifted_s)\n\n# Example usage:\n# shift_string()",
        "result": "passed",
        "similarities": [
            0.9957175254821777,
            0.9949036836624146,
            0.9962164163589478,
            0.9946867227554321,
            0.9949774742126465,
            0.996314287185669,
            0.9961656332015991,
            0.9959158897399902,
            0.9961568713188171,
            0.9966260194778442,
            0.9956193566322327,
            0.9945269227027893,
            0.9966848492622375,
            0.9950547814369202,
            0.9969028830528259,
            0.9961735606193542,
            0.9966648817062378,
            0.9948270916938782,
            0.9947433471679688,
            0.9963300824165344
        ]
    },
    "4316": {
        "similarity": 0.9944596886634827,
        "body": "    s = input().strip()\n    chars = {}\n    for char in s:\n        if char not in chars:\n            chars[char] = 1\n        else:\n            chars[char] += 1\n\n    count_unique_chars = sum(1 for v in chars.values() if v == 2)\n\n    print('Yes' if count_unique_chars == 2 else 'No')\n\ndetermine_characters()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940502047538757,
            0.9906212687492371,
            0.9938505291938782,
            0.991966962814331,
            0.9911653399467468,
            0.9925099611282349,
            0.9861935973167419,
            0.9903407096862793,
            0.9916490316390991,
            0.9918922781944275,
            0.9928045868873596,
            0.9820979237556458,
            0.9940766096115112,
            0.992725670337677,
            0.9907308220863342,
            0.9892295002937317,
            0.9944596886634827,
            0.9942797422409058,
            0.9913424253463745,
            0.9836126565933228
        ]
    },
    "4397": {
        "similarity": 0.9973888397216797,
        "body": "    j = n - i + 1\n    print(j)\n\nn, i = map(int, input().split())\nfind_j(n, i)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962700605392456,
            0.9967592358589172,
            0.9946449995040894,
            0.9942609071731567,
            0.9971736073493958,
            0.9971736073493958,
            0.9962244629859924,
            0.9962700605392456,
            0.9962243437767029,
            0.9971736073493958,
            0.9971736073493958,
            0.9955729246139526,
            0.9919938445091248,
            0.9962700605392456,
            0.9962050914764404,
            0.9973888397216797,
            0.9970446228981018,
            0.9944666624069214,
            0.9973888397216797,
            0.9948668479919434
        ]
    },
    "4180": {
        "similarity": 0.9962859749794006,
        "body": "    n = int(input())\n    num_bills = n // 1000\n    change = n - (num_bills * 1000)\n    print(change)\n\ncalculate_change()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943401217460632,
            0.9919108152389526,
            0.9962186217308044,
            0.9895230531692505,
            0.9962186217308044,
            0.9962186217308044,
            0.9943401217460632,
            0.9962186217308044,
            0.9956795573234558,
            0.9933094382286072,
            0.9934819936752319,
            0.9962186217308044,
            0.9909030795097351,
            0.9925325512886047,
            0.991617739200592,
            0.9943401217460632,
            0.9962859749794006,
            0.9943503141403198,
            0.9905050992965698,
            0.9962186217308044
        ]
    },
    "4907": {
        "similarity": 0.9962670207023621,
        "body": "n = int(input())\nif n % 2 == 0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n    print(n // 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953863024711609,
            0.9938734173774719,
            0.9962670207023621,
            0.9954214692115784,
            0.9954730868339539,
            0.9940590262413025,
            0.9934005737304688,
            0.985660970211029,
            0.9962276816368103,
            0.9896752238273621,
            0.9946423768997192,
            0.9960370659828186,
            0.9888002276420593,
            0.9960407614707947,
            0.9960408806800842,
            0.9953476786613464,
            0.9958149790763855,
            0.9944517016410828,
            0.9959542155265808,
            0.9954093098640442
        ]
    },
    "4839": {
        "similarity": 0.9965635538101196,
        "body": "    n = int(input())\n    canisters = list(map(int, input().split()))\n    balloons = list(range(1, n + 1))\n    canisters.sort(reverse=True)\n    balloons.sort()\n\n    used_canisters = 0\n    for i in range(n):\n        if canisters[i] > 0:\n            fraction = min(canisters[i] / balloons[i], 1.0)\n            canisters[i] -= fraction * balloons[i]\n            used_canisters += 1\n\n    if used_canisters < n:\n        print(\"impossible\")\n    else:\n        print(max(c / b for c, b in zip(canisters, balloons)))\n\nmax_helium_fraction()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963220357894897,
            0.9952436685562134,
            0.9961162209510803,
            0.9909593462944031,
            0.9965100884437561,
            0.995275616645813,
            0.9964749217033386,
            0.9963052868843079,
            0.9964655637741089,
            0.9960494041442871,
            0.9964508414268494,
            0.9940209984779358,
            0.9872775077819824,
            0.994836688041687,
            0.9875257611274719,
            0.9958323240280151,
            0.9965635538101196,
            0.9962490797042847,
            0.9950768351554871,
            0.9949204325675964
        ]
    },
    "4665": {
        "similarity": 0.9973586201667786,
        "body": "    n = int(input())\n    columns = input().split()\n    total_marks = 0\n    for _ in range(n):\n        student_data = dict(zip(columns, input().split()))\n        total_marks += float(student_data['MARKS'])\n    avg_marks = total_marks / n\n    print(\"{:.2f}\".format(avg_marks))",
        "result": "passed",
        "similarities": [
            0.9960275292396545,
            0.9966284036636353,
            0.9957090616226196,
            0.9960256814956665,
            0.9973586201667786,
            0.9957083463668823,
            0.9956619143486023,
            0.9970704913139343,
            0.9958940148353577,
            0.9953440427780151,
            0.9973305463790894,
            0.9973162412643433,
            0.9973586201667786,
            0.9972568154335022,
            0.9968095421791077,
            0.9947397112846375,
            0.9946622252464294,
            0.9947549700737,
            0.9967602491378784,
            0.9960184693336487
        ]
    },
    "4785": {
        "similarity": 0.9982476830482483,
        "body": "    s = input()\n    hiss_detected = False\n    for i in range(len(s)-1):\n        if s[i] == 's' and s[i+1] == 's':\n            hiss_detected = True\n            break\n    print('hiss' if hiss_detected else 'no hiss')",
        "result": "passed",
        "similarities": [
            0.9975540041923523,
            0.997512698173523,
            0.9982211589813232,
            0.998246431350708,
            0.9979673624038696,
            0.9978067278862,
            0.9959907531738281,
            0.9964343905448914,
            0.9978315234184265,
            0.998002290725708,
            0.9957196116447449,
            0.9975974559783936,
            0.9978067278862,
            0.9982271790504456,
            0.9977609515190125,
            0.9973189830780029,
            0.9978407621383667,
            0.9982271790504456,
            0.998002290725708,
            0.9982476830482483
        ]
    },
    "4272": {
        "similarity": 0.998897135257721,
        "body": "    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    print(count)\n\ncount_abc()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968913197517395,
            0.9986982941627502,
            0.998897135257721,
            0.99875408411026,
            0.9985009431838989,
            0.998786449432373,
            0.9983335733413696,
            0.9985672831535339,
            0.998897135257721,
            0.9983335733413696,
            0.998897135257721,
            0.9983335733413696,
            0.998897135257721,
            0.9986720681190491,
            0.9985672831535339,
            0.9985009431838989,
            0.9988409280776978,
            0.9967132210731506,
            0.9986720681190491,
            0.9986720681190491
        ]
    },
    "4092": {
        "similarity": 0.9964609742164612,
        "body": "import sys\n\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    inserts = 0\n    prev_sum = 0\n    for i in range(n):\n        curr_sum = prev_sum + arr[i]\n        if curr_sum == 0:\n            inserts += 1\n            arr.insert(i+1, -arr[i])\n            prev_sum -= arr[i]\n        else:\n            prev_sum = curr_sum\n\n    print(inserts)\n\nfind_insertions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957781434059143,
            0.9956474304199219,
            0.99358731508255,
            0.9818411469459534,
            0.9958419799804688,
            0.9944517016410828,
            0.9962840676307678,
            0.995681643486023,
            0.9964389801025391,
            0.995906412601471,
            0.9955385327339172,
            0.9961563944816589,
            0.9956172108650208,
            0.9924296140670776,
            0.9954245686531067,
            0.9964609742164612,
            0.9951074719429016,
            0.9938216805458069,
            0.9955886006355286,
            0.9961210489273071
        ]
    },
    "4023": {
        "similarity": 0.9973642230033875,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n\n    min_height = min(heights)\n    max_height = max(heights)\n\n    if n == 1 or min_height == max_height:\n        print(\"YES\")\n        return\n\n    has_empty_space = False\n    for i in range(1, n):\n        if heights[i] != heights[i-1]:\n            has_empty_space = True\n            break\n\n    print(\"NO\" if has_empty_space else \"YES\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948915243148804,
            0.9971041679382324,
            0.9970203042030334,
            0.9972319602966309,
            0.9928927421569824,
            0.9957614541053772,
            0.9967964887619019,
            0.9902554750442505,
            0.9960723519325256,
            0.9969407320022583,
            0.9933722615242004,
            0.9971690773963928,
            0.9961943626403809,
            0.996539294719696,
            0.9968411326408386,
            0.9951619505882263,
            0.9957257509231567,
            0.9973642230033875,
            0.9967416524887085,
            0.9970043897628784
        ]
    },
    "4160": {
        "similarity": 0.997501790523529,
        "body": "    x = int(input())\n    years = 0\n    balance = 100\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    print(years)\n\nfind_years()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948917031288147,
            0.9933453798294067,
            0.9949553608894348,
            0.9974853992462158,
            0.9973099231719971,
            0.9951022267341614,
            0.996833324432373,
            0.9952980875968933,
            0.997501790523529,
            0.995665431022644,
            0.9972640872001648,
            0.9971445798873901,
            0.9973925352096558,
            0.9946831464767456,
            0.9942836761474609,
            0.9951350688934326,
            0.9974758625030518,
            0.9971203207969666,
            0.9965124726295471,
            0.9967733025550842
        ]
    },
    "4815": {
        "similarity": 0.9972440004348755,
        "body": "player_scores = {}\nnum_players, min_points, num_games = map(int, input().split())\n\nfor _ in range(num_players):\n    player_name = input()\n    player_scores[player_name] = 0\n\nwinners = []\ncurrent_winner_time = float('inf')\n\nfor _ in range(num_games):\n    player_name, points_str = input().split()\n    points = int(points_str)\n\n    player_scores[player_name] += points\n\n    if player_scores[player_name] >= min_points:\n        winners.append(player_name)\n        current_winner_time = min(current_winner_time, _ + 1)\n\nif not winners:\n    print(\"No winner!\")\nelse:\n    for name in winners[:current_winner_time]:\n        print(f\"{name} wins!\")",
        "result": "passed",
        "similarities": [
            0.9964072704315186,
            0.9959700703620911,
            0.9959568381309509,
            0.9969978332519531,
            0.9959517121315002,
            0.9960994720458984,
            0.9972440004348755,
            0.9967517852783203,
            0.9959935545921326,
            0.9962466359138489,
            0.995719313621521,
            0.9965755939483643,
            0.9965460896492004,
            0.9942066073417664,
            0.9956972002983093,
            0.9956660866737366,
            0.9945935010910034,
            0.9953480958938599,
            0.9957027435302734,
            0.9964480400085449
        ]
    },
    "4514": {
        "similarity": 0.9966382384300232,
        "body": "    graph = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        graph[parents[i-1]].append(i)\n        graph[i].append(parents[i-1])\n\n        if len(graph[node]) == 0:\n            return -1\n        for child in sorted(graph[node]):\n            if not visited[child]:\n                visited[child] = True\n                res = dfs(child, k, visited)\n                if res != -1:\n                    return res\n                elif len(graph[node]) == k-1:\n                    return node\n        return -1\n\n    results = []\n    for _ in range(q):\n        u, k = map(int, input().split())\n        visited = [False] * (n+1)\n        results.append(dfs(u, k, visited))\n    print('\\n'.join(map(str, results)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964221119880676,
            0.9950569868087769,
            0.9966241717338562,
            0.9956837892532349,
            0.9936244487762451,
            0.9960224032402039,
            0.9942066669464111,
            0.9966382384300232,
            0.9960528016090393,
            0.9957062602043152,
            0.9939146637916565,
            0.9960024952888489,
            0.9944412112236023,
            0.9950191378593445,
            0.9965494871139526,
            0.9961361289024353,
            0.9923933148384094,
            0.9965579509735107,
            0.9962486624717712,
            0.9962701201438904
        ]
    },
    "4585": {
        "similarity": 0.9969547986984253,
        "body": "    x = int(input())\n    i = 1\n    while True:\n        if i >= x or i <= -x:\n            break\n        i += 1\n    print(i)\n\nfind_earliest_time()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931909441947937,
            0.9931646585464478,
            0.9968017935752869,
            0.9960989952087402,
            0.9969388246536255,
            0.9962765574455261,
            0.9956957101821899,
            0.990437388420105,
            0.9950495362281799,
            0.994662344455719,
            0.9969547986984253,
            0.9958909749984741,
            0.9959439635276794,
            0.9969388246536255,
            0.9954606890678406,
            0.9959084391593933,
            0.9936806559562683,
            0.9966546893119812,
            0.9964268207550049,
            0.9969161152839661
        ]
    },
    "4781": {
        "similarity": 0.9975782632827759,
        "body": "    k = int(input())\n    n = int(input())\n    players = list(range(1, 9))\n    current_player = k - 1\n\n    for _ in range(n):\n        t, z = input().split()\n        if z == \"P\" or z == \"N\":\n            players.append(players.pop(current_player))\n            current_player += 1\n            current_player %= 8\n        else:\n            current_player = (current_player + 1) % 8\n\n    print(players[current_player] + 1)\n\nfind_explosion_player()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961255788803101,
            0.9969779849052429,
            0.996781587600708,
            0.9970148801803589,
            0.9970375895500183,
            0.9967308044433594,
            0.9969974160194397,
            0.9968177676200867,
            0.9936535358428955,
            0.9975782632827759,
            0.9966546893119812,
            0.9974324107170105,
            0.9967643618583679,
            0.9969297647476196,
            0.9946068525314331,
            0.9955189228057861,
            0.9968553185462952,
            0.9958234429359436,
            0.9961584210395813,
            0.994431734085083
        ]
    },
    "4551": {
        "similarity": 0.9965466260910034,
        "body": "a, b, c, d = map(int, input().split())\nif a + b > c + d:\n    print(\"Left\")\nelif a + b == c + d:\n    print(\"Balanced\")\nelse:\n    print(\"Right\")",
        "result": "passed",
        "similarities": [
            0.9963893890380859,
            0.996387779712677,
            0.9876008629798889,
            0.9962385892868042,
            0.9963893890380859,
            0.9941908121109009,
            0.996387779712677,
            0.9958434104919434,
            0.9963666796684265,
            0.9953519105911255,
            0.991093099117279,
            0.9938083291053772,
            0.9942522644996643,
            0.9934895038604736,
            0.9889096021652222,
            0.9964788556098938,
            0.9965466260910034,
            0.9964788556098938,
            0.9963203072547913,
            0.9964788556098938
        ]
    },
    "4345": {
        "similarity": 0.9983982443809509,
        "body": "    import sys\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    increasing = []\n    decreasing = []\n    res = []\n\n    for i in range(n):\n        if not increasing or a[i] < increasing[-1]:\n            increasing.append(a[i])\n            res.append(0)\n        elif not decreasing or a[i] > decreasing[-1]:\n            decreasing.append(a[i])\n            res.append(1)\n\n    if len(increasing) + len(decreasing) != n:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(*res)\n\nfind_sequences()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978963732719421,
            0.9983938336372375,
            0.9975832104682922,
            0.9973843097686768,
            0.9977967143058777,
            0.9965192079544067,
            0.9976200461387634,
            0.9967169761657715,
            0.9978929162025452,
            0.9968409538269043,
            0.9979265928268433,
            0.9977878928184509,
            0.9983982443809509,
            0.9976788759231567,
            0.997363269329071,
            0.9979720711708069,
            0.9979448914527893,
            0.9973926544189453,
            0.9973992109298706,
            0.997962236404419
        ]
    },
    "4075": {
        "similarity": 0.9970641732215881,
        "body": "    n, m = map(int, input().split())\n    bulb_connections = []\n    for i in range(m):\n        k_i, *s_i = map(int, input().split())\n        bulb_connections.append((k_i, s_i))\n    target_states = list(map(int, input().split()))\n\n        if idx == m:\n            return all([sum(x) % 2 == t for x, t in zip(bulb_connections, target_states)])\n\n        bulb_satisfied = False\n        for state in range(2):\n            switches[idx] = state\n            bulb_satisfied |= dfs(switches, idx + 1)\n            switches[idx] = not state\n\n        return bulb_satisfied\n\n    switch_states = [0] * n\n    print(int(dfs(switch_states)))\n\nfind_combinations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968245625495911,
            0.9960676431655884,
            0.9934849143028259,
            0.9925011396408081,
            0.9945134520530701,
            0.9964050650596619,
            0.9966069459915161,
            0.9969087243080139,
            0.9959025382995605,
            0.9967694878578186,
            0.9967616200447083,
            0.9970641732215881,
            0.9965293407440186,
            0.99699866771698,
            0.9967283010482788,
            0.9932931661605835,
            0.9968594908714294,
            0.9942370057106018,
            0.9960078001022339,
            0.9969139099121094
        ]
    },
    "4408": {
        "similarity": 0.9974377155303955,
        "body": "    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    fav_nums = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n\n    count = [0] * (10**5 + 1)\n    for card in cards:\n        count[card] += 1\n\n    max_joy = 0\n    for fav_num in fav_nums:\n        t = count[fav_num]\n        if t >= k:\n            max_joy += joy_levels[t//k] * k\n            break\n        elif t > 0:\n            max_joy += joy_levels[t]\n\n    print(max_joy)\n\nmax_joy_levels()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965301156044006,
            0.9969338774681091,
            0.9954230785369873,
            0.9952974915504456,
            0.9966097474098206,
            0.9956194162368774,
            0.9972745180130005,
            0.9953479766845703,
            0.9958837628364563,
            0.9949879050254822,
            0.9966840147972107,
            0.9960508942604065,
            0.9969499707221985,
            0.9974377155303955,
            0.9965221881866455,
            0.9964081645011902,
            0.9971131682395935,
            0.9951199293136597,
            0.9969125390052795,
            0.9967007040977478
        ]
    },
    "4282": {
        "similarity": 0.9968946576118469,
        "body": "    n = int(input())\n    a = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        a_i_1, a_i_2 = map(int, input().split())\n        a[i].append(a_i_1)\n        a[i].append(a_i_2)\n\n    p = [0] * (n + 1)\n    used = [False] * (n + 1)\n\n        if i > n:\n            return True\n        for j in a[i]:\n            if not used[j]:\n                used[j] = True\n                p[i] = j\n                if dfs(i + 1):\n                    return True\n                used[j] = False\n        return False\n\n    dfs(1)\n    print(*p[1:])\n\nrestore_order()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954467415809631,
            0.996143639087677,
            0.9956142902374268,
            0.9934253692626953,
            0.9968946576118469,
            0.994197428226471,
            0.9951450824737549,
            0.9955400228500366,
            0.9941322803497314,
            0.9949126243591309,
            0.9960088133811951,
            0.9953715801239014,
            0.9956472516059875,
            0.9964552521705627,
            0.994913637638092,
            0.994168758392334,
            0.996753990650177,
            0.9958603382110596,
            0.9951270222663879,
            0.9967839121818542
        ]
    },
    "4331": {
        "similarity": 0.9989772439002991,
        "body": "    n = int(input())\n    for digit in str(n):\n        if digit == '7':\n            print('Yes')\n            return\n    print('No')\n\ncheck_seven()",
        "result": "failed: testcase 0",
        "similarities": [
            0.998603105545044,
            0.9977025389671326,
            0.9971722364425659,
            0.9966822266578674,
            0.9978398680686951,
            0.9989480376243591,
            0.9989480376243591,
            0.9989772439002991,
            0.9988749623298645,
            0.9989175200462341,
            0.9989772439002991,
            0.9988688230514526,
            0.9983857870101929,
            0.9982559084892273,
            0.9987584352493286,
            0.9989772439002991,
            0.9988957643508911,
            0.9989480376243591,
            0.9977025389671326,
            0.9988957643508911
        ]
    },
    "4550": {
        "similarity": 0.9954433441162109,
        "body": "    a, b, c = map(int, input().split())\n    total_a_b = a + b\n    if not (total_a_b < c or total_a_b % 2 != 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "failed: testcase 2",
        "similarities": [
            0.9913488626480103,
            0.9922069907188416,
            0.9917119741439819,
            0.9934344291687012,
            0.9921212792396545,
            0.9760003685951233,
            0.9904544353485107,
            0.9926047921180725,
            0.9951045513153076,
            0.9938887357711792,
            0.993068277835846,
            0.9894005656242371,
            0.9947527647018433,
            0.995092511177063,
            0.9937402606010437,
            0.9954433441162109,
            0.9952878355979919,
            0.9945703744888306,
            0.9930235147476196,
            0.9950957894325256
        ]
    },
    "4271": {
        "similarity": 0.9963889122009277,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    points = 0\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            points += b[a[i] - 1] + c[i]\n    for i in range(n):\n        points += b[a[i] - 1]\n\n    print(points)\n\ncalculate_satisfaction_points()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906755089759827,
            0.9931818246841431,
            0.9963889122009277,
            0.9917586445808411,
            0.9893142580986023,
            0.9956364035606384,
            0.9899388551712036,
            0.9947953820228577,
            0.9940338134765625,
            0.9952351450920105,
            0.9940615296363831,
            0.9960158467292786,
            0.9952939748764038,
            0.9957877993583679,
            0.9920672178268433,
            0.9949908256530762,
            0.9954757690429688,
            0.9958630800247192,
            0.9963452219963074,
            0.9945384860038757
        ]
    },
    "4848": {
        "similarity": 0.9970004558563232,
        "body": "    m = 2\n    while True:\n        if pow(m * n, 0.5).is_integer():\n            m += 1\n        else:\n            return m\n\nn = int(input())\nprint(find_squarefree_multiple(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932384490966797,
            0.9964799284934998,
            0.996557354927063,
            0.9966279864311218,
            0.9966312050819397,
            0.9965774416923523,
            0.9910344481468201,
            0.9968693256378174,
            0.9966272115707397,
            0.993628740310669,
            0.9965562224388123,
            0.9939408898353577,
            0.9961597919464111,
            0.9950085878372192,
            0.9965598583221436,
            0.9953866600990295,
            0.9966210722923279,
            0.9961365461349487,
            0.9967966675758362,
            0.9970004558563232
        ]
    },
    "4694": {
        "similarity": 0.9981848001480103,
        "body": "    n = int(input())\n    houses = list(map(int, input().split()))\n    min_distance = float('inf')\n    for i in range(n):\n        for j in range(i, n):\n            distance = max(houses[j] - houses[i], houses[n-1] - houses[j])\n            if distance < min_distance:\n                min_distance = distance\n    print(min_distance)\n\nfind_min_distance()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960463643074036,
            0.9978764057159424,
            0.9981848001480103,
            0.9968546628952026,
            0.9958343505859375,
            0.9977006316184998,
            0.996785044670105,
            0.997810959815979,
            0.99810391664505,
            0.9974188804626465,
            0.992954671382904,
            0.9966077208518982,
            0.99750155210495,
            0.996198832988739,
            0.9981299042701721,
            0.9979147911071777,
            0.9969068765640259,
            0.9978039264678955,
            0.9956908822059631,
            0.9981598258018494
        ]
    },
    "4213": {
        "similarity": 0.9974604249000549,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n    print(max_diff)\n\nfind_max_diff()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963113069534302,
            0.9913302063941956,
            0.9954240918159485,
            0.9973793029785156,
            0.9937230348587036,
            0.9954230785369873,
            0.9973370432853699,
            0.9974192380905151,
            0.997431218624115,
            0.9958720207214355,
            0.9973793029785156,
            0.9974604249000549,
            0.9974604249000549,
            0.9974548816680908,
            0.9959907531738281,
            0.9973778128623962,
            0.9944055676460266,
            0.9953840374946594,
            0.9953840374946594,
            0.9958720207214355
        ]
    },
    "4471": {
        "similarity": 0.9967281222343445,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] > 0:\n            a[i] += 2\n\n    for i in range(n):\n        while a[i] > 0:\n            a[i] -= 1\n            if all(a[j] <= 0 for j in range(n)):\n                break\n        else:\n            return \"NO\"\n\n    return \"YES\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.993280827999115,
            0.9938451647758484,
            0.9965282082557678,
            0.9960783123970032,
            0.9967281222343445,
            0.9823259115219116,
            0.9953608512878418,
            0.9940094351768494,
            0.9963794350624084,
            0.9958475828170776,
            0.9957293272018433,
            0.995212733745575,
            0.9957203269004822,
            0.9964982867240906,
            0.996282160282135,
            0.9926062226295471,
            0.9955267906188965,
            0.9962528944015503,
            0.9950493574142456,
            0.9954522848129272
        ]
    },
    "4802": {
        "similarity": 0.9961946606636047,
        "body": "    new_minutes = minutes - 45\n    if new_minutes < 0:\n        hours -= 1\n        new_minutes += 60\n    if hours < 0:\n        hours += 24\n    print(f\"{hours} {new_minutes}\")\n\nhours, minutes = map(int, input().split())\nadjust_time(hours, minutes)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942502379417419,
            0.9961946606636047,
            0.9945933818817139,
            0.9946243762969971,
            0.9948357343673706,
            0.9961946606636047,
            0.9957253336906433,
            0.9944840669631958,
            0.9940159320831299,
            0.9954412579536438,
            0.9935407042503357,
            0.9944301247596741,
            0.994433581829071,
            0.9948755502700806,
            0.9949162006378174,
            0.9952073693275452,
            0.9950942993164062,
            0.9955717325210571,
            0.9943533539772034,
            0.9949498772621155
        ]
    },
    "4890": {
        "similarity": 0.9964595437049866,
        "body": "    n, m, s, d = map(int, input().split())\n    slots = list(map(int, input().split()))\n\n    # Find empty slots first\n    empty_slots = [i for i in range(s) if slots[i] == 0]\n    new_bottles_per_slot = [0] * s\n\n    # Distribute new bottles to maximize probability of getting cold ones\n    while n > 0 and m > 0:\n        for slot in empty_slots:\n            if n >= d:\n                new_bottles_per_slot[slot] = d\n                n -= d\n            else:\n                new_bottles_per_slot[slot] = n\n                n = 0\n        m -= 1\n\n    # Check if it's possible to satisfy all students with cold bottles\n    if any(slots[i] + new_bottles_per_slot[i] > d for i in range(s)):\n        print(\"impossible\")\n    else:\n        print(*new_bottles_per_slot)\n\nrefill_soda()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950757622718811,
            0.9958139061927795,
            0.9959257245063782,
            0.9955567121505737,
            0.993025004863739,
            0.995660662651062,
            0.9953557252883911,
            0.9961122274398804,
            0.9962170124053955,
            0.9964595437049866,
            0.9959903359413147,
            0.9953087568283081,
            0.9935346841812134,
            0.9952194094657898,
            0.9911221861839294,
            0.9931777119636536,
            0.995793879032135,
            0.9937880635261536,
            0.9957313537597656,
            0.9940522909164429
        ]
    },
    "4286": {
        "similarity": 0.9975244402885437,
        "body": "    graph = [[] for _ in range(n)]\n    special_offers = [[] for _ in range(m)]\n\n    for i in range(m):\n        x, y, w = map(int, input().split())\n        special_offers[i] = [x - 1, y - 1, w]\n\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, node, max(cost, a[node] + a[neighbor]))\n        return cost\n\n    min_cost = float('inf')\n    visited = [False] * n\n    for i in range(m):\n        x, y, w = special_offers[i]\n        graph[x].append(y)\n        graph[y].append(x)\n        cost = dfs(0, -1, 0)\n        if cost < min_cost:\n            min_cost = cost\n        graph[x].remove(y)\n        graph[y].remove(x)\n\n    return min_cost\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nprint(min_coins(n, m, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955906271934509,
            0.9974341988563538,
            0.9965566396713257,
            0.9915685057640076,
            0.9970564842224121,
            0.9974027872085571,
            0.996536374092102,
            0.9970679879188538,
            0.9968639016151428,
            0.9965977072715759,
            0.997271716594696,
            0.99688321352005,
            0.9975244402885437,
            0.9971270561218262,
            0.9970638751983643,
            0.9964932799339294,
            0.9961608052253723,
            0.9974353313446045,
            0.9964624643325806,
            0.9967353343963623
        ]
    },
    "4713": {
        "similarity": 0.9984663128852844,
        "body": "    n = int(input())\n    s = input()\n    x = 0\n    max_x = 0\n    for i in range(n):\n        if s[i] == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n    print(max_x)\n\nmax_x()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9984663128852844,
            0.9977503418922424,
            0.9984530210494995,
            0.9981644153594971,
            0.9976292848587036,
            0.9984663128852844,
            0.9972243905067444,
            0.9968976378440857,
            0.9972142577171326,
            0.9983574748039246,
            0.9984339475631714,
            0.9971851706504822,
            0.9968976378440857,
            0.9968976378440857,
            0.9983847737312317,
            0.9983446002006531,
            0.9984548687934875,
            0.9963305592536926,
            0.9953538179397583,
            0.9983847737312317
        ]
    },
    "4698": {
        "similarity": 0.9977758526802063,
        "body": "    n = int(input())\n    t_i = list(map(int, input().split()))\n    m = int(input())\n\n    for _ in range(m):\n        p_i, x_i = map(int, input().split())\n        new_t_i = t_i.copy()\n        new_t_i[p_i - 1] = x_i\n        print(sum(new_t_i))\n\ncalculate_time()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969112277030945,
            0.9944048523902893,
            0.9873185753822327,
            0.9962457418441772,
            0.99608314037323,
            0.9970588684082031,
            0.9941737651824951,
            0.9977758526802063,
            0.9960349202156067,
            0.9975448250770569,
            0.9970647096633911,
            0.9961527585983276,
            0.9969602227210999,
            0.9972934722900391,
            0.9970535635948181,
            0.9949946403503418,
            0.9971860647201538,
            0.996820867061615,
            0.9969112277030945,
            0.9961734414100647
        ]
    },
    "4841": {
        "similarity": 0.9972261190414429,
        "body": "    n = int(input())\n    counts = []\n    for _ in range(n):\n        count = input()\n        if count != \"mumble\":\n            counts.append(int(count))\n    current = 0\n    for i in range(len(counts)):\n        if counts[i] < current:\n            print(\"something is fishy\")\n            return\n        elif counts[i] == current + 1:\n            current += 1\n    print(\"makes sense\")\n\ncheck_counting()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972134828567505,
            0.9966750144958496,
            0.9971038699150085,
            0.9966565370559692,
            0.9971279501914978,
            0.9970927238464355,
            0.996464192867279,
            0.9970506429672241,
            0.9972261190414429,
            0.9956222176551819,
            0.994369626045227,
            0.992653489112854,
            0.9947828054428101,
            0.9969543814659119,
            0.9947452545166016,
            0.9929748177528381,
            0.9970948100090027,
            0.9965256452560425,
            0.9969740509986877,
            0.9969988465309143
        ]
    },
    "4865": {
        "similarity": 0.9976486563682556,
        "body": "    for _ in range(int(input())):\n        op, d, h, m = input().split()\n        d = int(d)\n        h = int(h)\n        m = int(m)\n\n        if op == 'F':\n            m += d\n            if m >= 60:\n                h += m // 60\n                m %= 60\n            if h >= 24:\n                h -= 24\n        elif op == 'B':\n            m -= d\n            if m < 0:\n                h -= 1\n                m += 60\n\n        print(f\"{h:02d} {m:02d}\")\n\nprocess_time_input()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965956807136536,
            0.9962888956069946,
            0.9976486563682556,
            0.9974309802055359,
            0.9975487589836121,
            0.9965621829032898,
            0.9967483878135681,
            0.9970077872276306,
            0.9954031109809875,
            0.9974099397659302,
            0.9946104288101196,
            0.9966781139373779,
            0.9966731667518616,
            0.9969735741615295,
            0.9935603141784668,
            0.9971634745597839,
            0.9962354898452759,
            0.99680095911026,
            0.9975971579551697,
            0.9974080920219421
        ]
    },
    "4957": {
        "similarity": 0.9972330331802368,
        "body": "    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    shops = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        grid[x][y] = 'E'\n        shops.add((x, y))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                grid[nx][ny] = 'E'\n                shops.add((nx, ny))\n                place_shop(nx, ny)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and (i, j) not in shops:\n                place_shop(i, j)\n\n    print('\\n'.join(''.join(row) for row in grid))\n\nsolve_espresso_bucks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946256875991821,
            0.9953233003616333,
            0.9964135885238647,
            0.9942817687988281,
            0.9969878196716309,
            0.9972330331802368,
            0.9956745505332947,
            0.9962869882583618,
            0.9962576627731323,
            0.9958917498588562,
            0.9965466856956482,
            0.9961979389190674,
            0.9961164593696594,
            0.9965832233428955,
            0.996286928653717,
            0.9949364066123962,
            0.9964780211448669,
            0.9960538148880005,
            0.9971762299537659,
            0.9944961071014404
        ]
    },
    "4382": {
        "similarity": 0.9965766072273254,
        "body": "    n = int(input())\n    total = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                total += 1\n    print(total)\n\ncount_passwords()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9843676686286926,
            0.9869199991226196,
            0.9958502054214478,
            0.9943809509277344,
            0.9964420199394226,
            0.9955705404281616,
            0.9958016276359558,
            0.9879997968673706,
            0.9953643679618835,
            0.9929350018501282,
            0.9936517477035522,
            0.9965766072273254,
            0.9964913129806519,
            0.9965341687202454,
            0.9965766072273254,
            0.995491623878479,
            0.9955705404281616,
            0.9945499897003174,
            0.9960933327674866,
            0.9956132769584656
        ]
    },
    "4456": {
        "similarity": 0.9957640767097473,
        "body": "    chars = [chr(i + 97) for i in range(k)]\n    s = [''] * n\n\n    for i in range(n):\n        if s[p[i] - 1] == '':\n            s[p[i] - 1] = chars.pop(0)\n        elif s[q[i] - 1] == '' and ord(s[p[i] - 1]) < ord(chars[-1]):\n            s[q[i] - 1] = chars.pop()\n        else:\n            return \"NO\"\n\n    print(\"YES\\n\" + ''.join(s))\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\nrestore_string(n, k, p, q)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9891682863235474,
            0.9953842163085938,
            0.9954260587692261,
            0.9952649474143982,
            0.9952388405799866,
            0.9957640767097473,
            0.9907001852989197,
            0.995005190372467,
            0.9930130839347839,
            0.9940338134765625,
            0.9930135011672974,
            0.9956979155540466,
            0.991572916507721,
            0.9954195618629456,
            0.993859052658081,
            0.9926111102104187,
            0.991627037525177,
            0.9936425089836121,
            0.9951952695846558,
            0.9917739033699036
        ]
    },
    "4594": {
        "similarity": 0.9973562955856323,
        "body": "    n = int(input())\n    diameters = [int(input()) for _ in range(n)]\n    diameters.sort(reverse=True)\n    layers = 1\n    prev_diameter = diameters[0]\n    for i in range(1, n):\n        if diameters[i] < prev_diameter:\n            layers += 1\n            prev_diameter = diameters[i]\n    print(layers)\n\nmax_layers()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955938458442688,
            0.9949778318405151,
            0.995143473148346,
            0.9969257712364197,
            0.9960828423500061,
            0.9938083291053772,
            0.9946563243865967,
            0.9971176981925964,
            0.9973562955856323,
            0.9972183108329773,
            0.9963208436965942,
            0.9964766502380371,
            0.997221827507019,
            0.9968196749687195,
            0.9971002340316772,
            0.9962033629417419,
            0.9944673180580139,
            0.9956209063529968,
            0.99590665102005,
            0.9956170916557312
        ]
    },
    "4560": {
        "similarity": 0.9968185424804688,
        "body": "    n = int(input())\n    a = int(input())\n\n    for i in range(n // 500 + 1):\n        remaining = n - i * 500\n        if remaining <= a:\n            print('Yes')\n            return\n\n    print('No')\n\ncan_pay_n_yen()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960202574729919,
            0.9961110949516296,
            0.9953866600990295,
            0.9947527647018433,
            0.9962168335914612,
            0.9966191053390503,
            0.9935277700424194,
            0.9961063861846924,
            0.9964581727981567,
            0.9964137077331543,
            0.9926483631134033,
            0.9954646229743958,
            0.9965224862098694,
            0.9958735108375549,
            0.9960205554962158,
            0.9950210452079773,
            0.9922086000442505,
            0.9968185424804688,
            0.9960845112800598,
            0.9965593218803406
        ]
    },
    "4320": {
        "similarity": 0.9981619119644165,
        "body": "    n = int(input())\n    x = 1\n    while True:\n        total = 0\n        k = 2\n        while total < n:\n            total += x * pow(2, k - 1)\n            k += 1\n        if total == n and k > 1:\n            print(x)\n            break\n        x += 1\n\nfor _ in range(int(input())):\n    solve_problem()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976468682289124,
            0.9976686239242554,
            0.995505690574646,
            0.997323215007782,
            0.9976814985275269,
            0.9973967671394348,
            0.9963974356651306,
            0.9981619119644165,
            0.9974790811538696,
            0.9975132346153259,
            0.9980681538581848,
            0.9976608157157898,
            0.9976485371589661,
            0.9976068139076233,
            0.9978960752487183,
            0.997673749923706,
            0.9977774620056152,
            0.9901918172836304,
            0.9976682066917419,
            0.9975371360778809
        ]
    },
    "4500": {
        "similarity": 0.998123288154602,
        "body": "a, b, c = map(int, input().split())\nif a + b >= c:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9980576038360596,
            0.997992992401123,
            0.9974539875984192,
            0.9945345520973206,
            0.9973413348197937,
            0.9969940185546875,
            0.9980576038360596,
            0.998123288154602,
            0.9980576038360596,
            0.9965810179710388,
            0.9980550408363342,
            0.9974570870399475,
            0.9980577230453491,
            0.9974914193153381,
            0.9975908994674683,
            0.9955271482467651,
            0.9980550408363342,
            0.9972949624061584,
            0.998123288154602,
            0.9975908994674683
        ]
    },
    "4739": {
        "similarity": 0.9977483153343201,
        "body": "    M, N = map(int, input().split())\n    T = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n\n    speeds = set()\n    for i in range(1, M):\n        speed = (X[T[i]] - X[T[0]]) / (T[i] - T[0])\n        speeds.add(speed)\n\n    print(len(speeds))\n    if len(speeds) > 0:\n        print(*sorted(speeds))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972657561302185,
            0.9960525035858154,
            0.9958571195602417,
            0.9976202249526978,
            0.9974523782730103,
            0.9970569610595703,
            0.9970253705978394,
            0.9974666237831116,
            0.9956949949264526,
            0.9970399737358093,
            0.9976029992103577,
            0.9972264170646667,
            0.9975317716598511,
            0.9969382286071777,
            0.997633695602417,
            0.9971848726272583,
            0.9975827932357788,
            0.9977483153343201,
            0.9972524046897888,
            0.9958239197731018
        ]
    },
    "4410": {
        "similarity": 0.9971014261245728,
        "body": "    count = 0\n    for i in range(n):\n        if s[i] == '0':\n            left = max(0, i - k)\n            right = min(n, i + k + 1)\n            if all(s[left: right] == '0'):\n                count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_free_tables(n, k, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965114593505859,
            0.9914128184318542,
            0.9950898885726929,
            0.9964884519577026,
            0.9950696229934692,
            0.9963893890380859,
            0.9971014261245728,
            0.9965267181396484,
            0.9959480166435242,
            0.9966697692871094,
            0.9967432618141174,
            0.9950579404830933,
            0.9928386211395264,
            0.9945715665817261,
            0.9960736632347107,
            0.9958763122558594,
            0.9968129992485046,
            0.9958391785621643,
            0.9967864155769348,
            0.9920640587806702
        ]
    },
    "2441": {
        "similarity": 0.9978975057601929,
        "body": "    n = int(input())\n    costs = list(map(int, input().split()))\n    m = int(input())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n\n    min_cost = float('inf')\n    ways = 0\n    mod = 10**9 + 7\n\n        nonlocal min_cost, ways\n        max_cost = 0\n        for child in graph[node]:\n            if child != parent:\n                dfs(child, node)\n                max_cost = max(max_cost, costs[child])\n        if max_cost < costs[node] and sum(costs) - costs[node] >= min_cost:\n            ways += (sum(costs) - costs[node]) // min_cost\n            ways %= mod\n\n    for i in range(n):\n        dfs(i, -1)\n        min_cost = min(min_cost, sum(costs) - costs[i])\n    print(min_cost, ways)\n\nfind_min_cost_and_ways()",
        "result": "failed: testcase 0",
        "similarities": [
            0.997710108757019,
            0.9970500469207764,
            0.9978975057601929,
            0.997031569480896,
            0.9963055849075317,
            0.9971530437469482,
            0.9941529035568237,
            0.9972352385520935,
            0.9961104989051819,
            0.9960011839866638,
            0.9972787499427795,
            0.9973058104515076,
            0.9978134632110596,
            0.9973238706588745,
            0.9971601366996765,
            0.9977756142616272,
            0.9978560209274292,
            0.9971426725387573,
            0.9963028430938721,
            0.9964408874511719
        ]
    },
    "276": {
        "similarity": 0.9959254860877991,
        "body": "    gem_names = ['power', 'time', 'space', 'soul', 'reality', 'mind']\n    colors = ['purple', 'green', 'blue', 'orange', 'red', 'yellow']\n\n    num_gems = int(input())\n    present_gems = [input() for _ in range(num_gems)]\n\n    absent_gems = []\n    for i, gem_name in enumerate(gem_names):\n        if colors[i] not in present_gems:\n            absent_gems.append(gem_name[0].upper() + gem_name[1:])\n\n    print(len(absent_gems))\n    for gem in absent_gems:\n        print(gem)\n\ndetermine_gems()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940283894538879,
            0.9910939931869507,
            0.9928265810012817,
            0.9946252107620239,
            0.991562008857727,
            0.9937800168991089,
            0.9955265522003174,
            0.9951429963111877,
            0.9937404990196228,
            0.9902974367141724,
            0.9908109903335571,
            0.9923816323280334,
            0.9953764081001282,
            0.9951924681663513,
            0.9928265810012817,
            0.9956139922142029,
            0.9959254860877991,
            0.994843065738678,
            0.9936093688011169,
            0.9939733147621155
        ]
    },
    "2635": {
        "similarity": 0.9965805411338806,
        "body": "    if not matrix or not matrix[0]:\n        return []\n\n    top, bottom = 0, len(matrix)\n    left, right = 0, len(matrix[0])\n\n    result = []\n    while top < bottom and left < right:\n        for i in range(left, right):\n            result.append(matrix[top][i])\n        top += 1\n\n        for i in range(top, bottom):\n            result.append(matrix[i][right - 1])\n        right -= 1\n\n        if top < bottom and left < right:\n            for i in range(right - 1, left - 1, -1):\n                result.append(matrix[bottom - 1][i])\n            bottom -= 1\n\n            for i in range(bottom - 1, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n\n    return result",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919646382331848,
            0.9938260912895203,
            0.9950141906738281,
            0.9965428709983826,
            0.9952670931816101,
            0.9965707659721375,
            0.9919646382331848,
            0.9942530393600464,
            0.9962734580039978,
            0.9939478039741516,
            0.99510657787323,
            0.9965805411338806,
            0.9938260912895203,
            0.9947052001953125,
            0.9948997497558594,
            0.996103823184967,
            0.9957239031791687,
            0.9937536120414734,
            0.9953523278236389,
            0.9941655993461609
        ]
    },
    "281": {
        "similarity": 0.9956033825874329,
        "body": "    import math\n    a_fact = math.factorial(a)\n    b_fact = math.factorial(b)\n    last_digit = b_fact // a_fact % 10\n    return last_digit\n\na, b = map(int, input().split())\nprint(calculate_last_digit(a, b))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950074553489685,
            0.9950159788131714,
            0.9938229322433472,
            0.9940945506095886,
            0.9943094849586487,
            0.9866080284118652,
            0.994846522808075,
            0.9951009154319763,
            0.9892038106918335,
            0.9944291710853577,
            0.9943222403526306,
            0.9920076131820679,
            0.9944652915000916,
            0.9946542382240295,
            0.9950467348098755,
            0.9956033825874329,
            0.9931125640869141,
            0.9940452575683594,
            0.9917036294937134,
            0.994892418384552
        ]
    },
    "2300": {
        "similarity": 0.9976118803024292,
        "body": "    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for _ in range(m):\n        t = int(input())\n        if t == 1:\n            x, v = map(int, input().split())\n            arr[x - 1] = v\n        elif t == 2:\n            l, r = map(int, input().split())\n            print(sum(arr[l - 1:r]) % 1000000000)\n        else:\n            l, r, d = map(int, input().split())\n            arr[l - 1:r] = [a + d for a in arr[l - 1:r]]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974148273468018,
            0.9971887469291687,
            0.9933316111564636,
            0.995072603225708,
            0.99579256772995,
            0.9972279071807861,
            0.9957273602485657,
            0.9973059296607971,
            0.9968522787094116,
            0.9969859719276428,
            0.996576189994812,
            0.9969567656517029,
            0.997329831123352,
            0.9960283041000366,
            0.9969183206558228,
            0.9969353079795837,
            0.9957869648933411,
            0.9974077939987183,
            0.9976118803024292,
            0.9964624643325806
        ]
    },
    "2104": {
        "similarity": 0.9973486661911011,
        "body": "    left, right = map(int, input().split())\n    pairs = []\n    for i in range(left, right + 1):\n        for j in range(i + 1, right + 1):\n            if math.gcd(i, j) == 1:\n                pairs.append((i, j))\n                break\n    if len(pairs) != (right - left + 1) // 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for pair in pairs:\n            print(*pair)\n\nif __name__ == \"__main__\":\n    generate_pairs()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9882659912109375,
            0.9960319399833679,
            0.9966686964035034,
            0.996937096118927,
            0.9972755312919617,
            0.9893680214881897,
            0.9970578551292419,
            0.9966352581977844,
            0.9972876310348511,
            0.9968695640563965,
            0.9951696991920471,
            0.9969466328620911,
            0.9970855712890625,
            0.997045636177063,
            0.9965147972106934,
            0.9970546364784241,
            0.9964938163757324,
            0.9956415891647339,
            0.9973486661911011,
            0.9952164888381958
        ]
    },
    "1995": {
        "similarity": 0.9971508383750916,
        "body": "    s = input()\n    m = int(input())\n    for _ in range(m):\n        l, r, k = map(int, input().split())\n        k %= len(s[l-1:r])\n        s = s[:l-1] + s[l-1:r][k:] + s[l-1:r][:k] + s[r:]\n    print(s)\n\nprocess_queries()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996220052242279,
            0.996107816696167,
            0.9935662150382996,
            0.9939475655555725,
            0.9964608550071716,
            0.9956802725791931,
            0.9963415265083313,
            0.9971508383750916,
            0.9965052604675293,
            0.9959370493888855,
            0.9943793416023254,
            0.9969398975372314,
            0.9939948916435242,
            0.9954277873039246,
            0.9946556091308594,
            0.9947593212127686,
            0.9964219927787781,
            0.9947191476821899,
            0.9939940571784973,
            0.9944028258323669
        ]
    },
    "2064": {
        "similarity": 0.9970014691352844,
        "body": "    n = int(input())\n    max_num = 0\n    for i in range(9, -1, -1):\n        if i <= n:\n            max_num = max_num * 10 + i\n            n -= i\n        else:\n            break\n    print(max_num)\n\nfind_max_number()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965870380401611,
            0.9942479729652405,
            0.9952306151390076,
            0.9939724802970886,
            0.9943534731864929,
            0.9955365061759949,
            0.9913769960403442,
            0.9948300123214722,
            0.9954584836959839,
            0.9970014691352844,
            0.996817946434021,
            0.9962822794914246,
            0.9952943921089172,
            0.9942857623100281,
            0.9953799843788147,
            0.9966683983802795,
            0.9942619204521179,
            0.9964872002601624,
            0.9956175088882446,
            0.9934917092323303
        ]
    },
    "1715": {
        "similarity": 0.9956777691841125,
        "body": "    A, B, Q = map(int, input().split())\n    shrines = sorted([int(input()) for _ in range(A)])\n    temples = sorted([int(input()) for _ in range(B)])\n    queries = [int(input()) for _ in range(Q)]\n\n        left, right = 0, len(lst) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if lst[mid] == target:\n                return mid\n            elif lst[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    for query in queries:\n        shrine_idx = binary_search(shrines, query)\n        temple_idx = binary_search(temples, query)\n\n        if shrine_idx != -1 and temple_idx != -1:\n            print(min(abs(query - shrines[shrine_idx]), abs(query - temples[temple_idx])))\n        elif shrine_idx != -1:\n            print(abs(query - shrines[shrine_idx]))\n        else:\n            print(abs(query - temples[temple_idx]))\n\nmin_distance_to_shrine_and_temple()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896043539047241,
            0.9932478070259094,
            0.9900590181350708,
            0.9938030242919922,
            0.9945207834243774,
            0.9955335855484009,
            0.9923135638237,
            0.9952356219291687,
            0.9956777691841125,
            0.9943636655807495,
            0.99005126953125,
            0.9938559532165527,
            0.9928278923034668,
            0.9942948222160339,
            0.9935845732688904,
            0.9921134114265442,
            0.9924393892288208,
            0.9930733442306519,
            0.994321346282959,
            0.9909905195236206
        ]
    },
    "2074": {
        "similarity": 0.9962297677993774,
        "body": "    n, m = map(int, input().split())\n    costs = [list(map(int, input().split())) for _ in range(n)]\n    min_costs = []\n    for i in range(n):\n        min_costs.append(min(costs[i]))\n    max_cost = max(min_costs)\n    print(max_cost)\n\ncalculate_dinner_cost()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954878091812134,
            0.992506742477417,
            0.9951600432395935,
            0.9944880604743958,
            0.9930488467216492,
            0.9962297677993774,
            0.9915801882743835,
            0.9952440857887268,
            0.9946748614311218,
            0.9952664971351624,
            0.9922589659690857,
            0.9948326945304871,
            0.9954653382301331,
            0.9907504916191101,
            0.99419105052948,
            0.991037905216217,
            0.9959959983825684,
            0.991037905216217,
            0.9960607290267944,
            0.9933056235313416
        ]
    },
    "2921": {
        "similarity": 0.9980898499488831,
        "body": "    m, u, d = map(float, input().split())\n    drinks = []\n    for _ in range(int(d)):\n        name, strength, size, price = input().split()\n        strength = float(strength[:-1])\n        size = {'1/1': 3, '1/2': 2, '1/3': 1}[size]\n        price = float(price)\n        drinks.append((name, strength * size / 100))\n\n    purchases = {}\n    for drink in sorted(drinks, key=lambda x: x[1], reverse=True):\n        name, units = drink\n        if u >= units:\n            u -= units\n            purchases[name] = purchases.get(name, 0) + 1\n            if u == 0:\n                break\n\n    if u > 0 or sum(price * quantity for price, quantity in purchases.items()) > m:\n        print('IMPOSSIBLE')\n    else:\n        for name, quantity in purchases.items():\n            print(f'{name} {quantity}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980898499488831,
            0.9975993633270264,
            0.9975003600120544,
            0.9962416291236877,
            0.9977995157241821,
            0.997157871723175,
            0.9979808330535889,
            0.9973624348640442,
            0.9977730512619019,
            0.997259259223938,
            0.997414231300354,
            0.9945343732833862,
            0.993864893913269,
            0.9979098439216614,
            0.9980213642120361,
            0.9980615377426147,
            0.9966760277748108,
            0.9980428814888,
            0.9976298809051514,
            0.9975022077560425
        ]
    },
    "1642": {
        "similarity": 0.995747447013855,
        "body": "    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    max_distance = 0\n    for i in range(n):\n        next_point = (points[(i + 1) % n][0] - points[i][0], points[(i + 1) % n][1] - points[i][1])\n        prev_point = (points[i][0] - points[(i - 1) % n][0], points[i][1] - points[(i - 1) % n][1])\n        cross_product = next_point[0] * prev_point[1] - next_point[1] * prev_point[0]\n        if cross_product < 0:\n            break\n        distance = (next_point[0]**2 + next_point[1]**2)**0.5\n        max_distance = max(max_distance, distance)\n\n    print(max_distance)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948212504386902,
            0.9939104318618774,
            0.994659423828125,
            0.9945067167282104,
            0.9947550892829895,
            0.9893797636032104,
            0.9954099059104919,
            0.994981586933136,
            0.995747447013855,
            0.9952402710914612,
            0.9945964813232422,
            0.9904184937477112,
            0.9930428266525269,
            0.9926549196243286,
            0.9952524900436401,
            0.9941707253456116,
            0.9940436482429504,
            0.9937067627906799,
            0.9904429912567139,
            0.9946656823158264
        ]
    },
    "947": {
        "similarity": 0.9961867332458496,
        "body": "    if n % 2 == 0:\n        return f\"{n // 2} {n // 2}\"\n    else:\n        return f\"{n - 1} 1\"\n\nfor _ in range(int(input())):\n    n = int(input())\n    a, b = map(int, find_ab(n).split())\n    print(a, b)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957273602485657,
            0.9927653074264526,
            0.9928060173988342,
            0.9946544170379639,
            0.9937154650688171,
            0.9950891733169556,
            0.9935208559036255,
            0.9954704642295837,
            0.995453417301178,
            0.9959335327148438,
            0.9961867332458496,
            0.9939262270927429,
            0.9937567710876465,
            0.9948387145996094,
            0.9950029253959656,
            0.9954820275306702,
            0.9900339245796204,
            0.9943931102752686,
            0.9933146238327026,
            0.9954902529716492
        ]
    },
    "743": {
        "similarity": 0.9976087212562561,
        "body": "    n = int(input())\n    nums = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] > nums[j]:\n                nums[i] -= nums[j]\n    print(sum(nums))\n\nfind_minimal_sum()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974088072776794,
            0.9936943054199219,
            0.9963434934616089,
            0.996738851070404,
            0.9966941475868225,
            0.9974708557128906,
            0.9976087212562561,
            0.9950671792030334,
            0.9972907900810242,
            0.9974181652069092,
            0.9923589825630188,
            0.9967648386955261,
            0.9963673949241638,
            0.995441734790802,
            0.9967406392097473,
            0.9974678754806519,
            0.9967648386955261,
            0.9951409101486206,
            0.9967406392097473,
            0.9947229027748108
        ]
    },
    "1397": {
        "similarity": 0.9974152445793152,
        "body": "import sys\n\n    n, m = map(int, sys.stdin.readline().split())\n    forbidden_pairs = set()\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        forbidden_pairs.add((a, b))\n\n    roads = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i, j) not in forbidden_pairs and (j, i) not in forbidden_pairs:\n                roads.append((i, j))\n                break\n\n    print(len(roads))\n    for road in roads:\n        print(*road)\n\nconstruct_roads()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973846077919006,
            0.9972718954086304,
            0.9969823956489563,
            0.9966782331466675,
            0.9967753887176514,
            0.9963537454605103,
            0.9969514608383179,
            0.9962806701660156,
            0.9974152445793152,
            0.9962801933288574,
            0.9937605857849121,
            0.9958726763725281,
            0.9961649179458618,
            0.9959145784378052,
            0.9965840578079224,
            0.9945967793464661,
            0.9909715056419373,
            0.9965565204620361,
            0.9967586398124695,
            0.9969658255577087
        ]
    },
    "1144": {
        "similarity": 0.9964121580123901,
        "body": "    n = int(input())\n    s = input()\n    m = int(input())\n\n    t = ['a' if i % 2 == 0 else 'b' for i in range(m)]\n\n    max_occurrences = 0\n    replacements = float('inf')\n\n    for i in range(n - m + 1):\n        occurrences = 0\n        curr_replacements = 0\n\n        for j in range(m):\n            if s[i + j] == '?' or s[i + j] == t[j]:\n                continue\n            else:\n                curr_replacements += 1\n                s[i + j] = t[j]\n\n        occurrences = sum(s.count(t[j]) for j in range(m))\n\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n            replacements = curr_replacements\n\n    print(replacements)\n\nfind_min_replacements()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964121580123901,
            0.9940811991691589,
            0.9954697489738464,
            0.995461106300354,
            0.9910823702812195,
            0.9933172464370728,
            0.9947744011878967,
            0.9951842427253723,
            0.9959530234336853,
            0.9963301420211792,
            0.993669331073761,
            0.9894309639930725,
            0.9953930377960205,
            0.9928895831108093,
            0.9924238324165344,
            0.9954703450202942,
            0.9939181804656982,
            0.9945011138916016,
            0.9956631064414978,
            0.9942942261695862
        ]
    },
    "890": {
        "similarity": 0.9975320100784302,
        "body": "    n, l, r, x = map(int, input().split())\n    problems = list(map(int, input().split()))\n    problems.sort()\n    ways = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if l <= sum(problems[i:j+1]) <= r and max(problems[j] - problems[i], problems[-1] - problems[0]) >= x:\n                ways += 1\n    print(ways)\n\ncount_problemsets()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943250417709351,
            0.9968141317367554,
            0.9969521760940552,
            0.9975320100784302,
            0.9958632588386536,
            0.9965165853500366,
            0.9951665997505188,
            0.9967802166938782,
            0.9972520470619202,
            0.9963240623474121,
            0.9966938495635986,
            0.9895764589309692,
            0.9969517588615417,
            0.996711254119873,
            0.9973703622817993,
            0.9972308278083801,
            0.9944787621498108,
            0.9972888827323914,
            0.994137704372406,
            0.9971574544906616
        ]
    },
    "2410": {
        "similarity": 0.9980576038360596,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    yasser_total = sum(a)\n    max_adel_total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            adel_total = sum(a[i:j + 1])\n            max_adel_total = max(max_adel_total, adel_total)\n    return \"YES\" if yasser_total > max_adel_total else \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    print(can_yasser_be_happy())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980576038360596,
            0.9953286051750183,
            0.9960058927536011,
            0.9969621896743774,
            0.9966617226600647,
            0.9977660179138184,
            0.9971797466278076,
            0.9967594146728516,
            0.9974578022956848,
            0.9968671202659607,
            0.9967026114463806,
            0.9978260397911072,
            0.9967771172523499,
            0.9979588389396667,
            0.9974796175956726,
            0.9965126514434814,
            0.9975590109825134,
            0.9966012239456177,
            0.997453510761261,
            0.997963547706604
        ]
    },
    "1004": {
        "similarity": 0.9973227977752686,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n\n    entered = [0] * (10**6 + 1)\n    days = []\n    current_day = []\n\n    for i in range(n):\n        if abs(a[i]) <= 10**6:\n            if entered[abs(a[i])] == 0 and a[i] > 0:\n                entered[abs(a[i])] = 1\n                current_day.append(a[i])\n            elif entered[abs(a[i])] == 1 and a[i] < 0:\n                entered[abs(a[i])] = 0\n                current_day.append(a[i])\n            else:\n                if current_day:\n                    days.append(current_day)\n                    current_day = []\n        else:\n            print(-1)\n            return\n\n    if current_day:\n        days.append(current_day)\n\n    print(len(days))\n    for day in days:\n        print(len(day))\n\nfind_partitions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971074461936951,
            0.9961292743682861,
            0.9958521127700806,
            0.9970998167991638,
            0.9956186413764954,
            0.995857834815979,
            0.9934020638465881,
            0.9954213500022888,
            0.9965409636497498,
            0.9960708618164062,
            0.9962382912635803,
            0.994551420211792,
            0.9955880045890808,
            0.9953004121780396,
            0.9973227977752686,
            0.9953559041023254,
            0.9948573112487793,
            0.9967799782752991,
            0.9962541460990906,
            0.9958847761154175
        ]
    },
    "531": {
        "similarity": 0.9961069822311401,
        "body": "    n = int(input())\n    x_values = list(map(int, input().split()))\n    min_x = min(x_values)\n    max_x = max(x_values)\n    y_values = []\n    equal_count = 0\n\n    for i in range(n):\n        if len(y_values) < n:\n            if x_values[i] not in y_values:\n                y_values.append(x_values[i])\n            else:\n                y_values.append(min_x - 1)\n                equal_count += 1\n        else:\n            break\n\n    print(equal_count)\n    print(' '.join(map(str, sorted(y_values))))\n\ngenerate_measurements()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9884294271469116,
            0.9936551451683044,
            0.9938156604766846,
            0.9915837645530701,
            0.9917299151420593,
            0.9920783042907715,
            0.9954465627670288,
            0.9952782392501831,
            0.9961069822311401,
            0.994758129119873,
            0.9907644391059875,
            0.995101809501648,
            0.9953324198722839,
            0.992085337638855,
            0.9935232400894165,
            0.9956216216087341,
            0.9907138347625732,
            0.9925862550735474,
            0.9958581328392029,
            0.9956281781196594
        ]
    },
    "510": {
        "similarity": 0.9939688444137573,
        "body": "    a, b, c, d = map(int, input().split())\n    duration = 0\n\n    for _ in range(max(a, b, c)):\n        if abs(a - b) < d or abs(b - c) < d or abs(a - c) < d:\n            max_diff = max(a - b, b - c, a - c)\n            if max_diff == a - b and abs(a - b) < d:\n                a += 1\n            elif max_diff == b - c and abs(b - c) < d:\n                b += 1\n            else:\n                c += 1\n            duration += 1\n\n    print(duration)\n\nmin_duration()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932993054389954,
            0.9908912181854248,
            0.9930424094200134,
            0.9890140891075134,
            0.9889532327651978,
            0.9913868308067322,
            0.9894121885299683,
            0.9907374978065491,
            0.9893075823783875,
            0.9848397970199585,
            0.9885292053222656,
            0.9934872388839722,
            0.9920880198478699,
            0.9915043711662292,
            0.9917941689491272,
            0.9893521666526794,
            0.9939688444137573,
            0.9815751910209656,
            0.9910888671875,
            0.9933236837387085
        ]
    },
    "2555": {
        "similarity": 0.9959504008293152,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, q = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_strengths = []\n        for i in range(q + 1):\n            if i == 0:\n                strengths = [a[j] - a[j + 1] if j % 2 == 0 else a[j + 1] - a[j] for j in range(0, n - 1, 2)]\n                max_strengths.append(max(strengths))\n            else:\n                l, r = map(int, input().split())\n                a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n                strengths = [a[j] - a[j + 1] if j % 2 == 0 else a[j + 1] - a[j] for j in range(0, n - 1, 2)]\n                max_strengths.append(max(strengths))\n        print(*max_strengths)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937326312065125,
            0.9945309162139893,
            0.9940832257270813,
            0.9919725060462952,
            0.9947587847709656,
            0.9936125874519348,
            0.9951296448707581,
            0.9944908022880554,
            0.9938352704048157,
            0.9959504008293152,
            0.995940089225769,
            0.9919750094413757,
            0.9950169920921326,
            0.9937841296195984,
            0.9942187070846558,
            0.9949836730957031,
            0.9952932596206665,
            0.995380699634552,
            0.9952834248542786,
            0.9957823753356934
        ]
    },
    "324": {
        "similarity": 0.9973559975624084,
        "body": "    n = int(input())\n    a, b = 3, 2\n    while True:\n        if is_composite(a + n) and is_composite(b):\n            print(a + n, b)\n            break\n        elif is_composite(b) and not is_composite(a + n):\n            b += 1\n        else:\n            a += 1\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return True\n    return False",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973559975624084,
            0.9971410036087036,
            0.9972766041755676,
            0.9929761290550232,
            0.9965590238571167,
            0.9971590638160706,
            0.9970327615737915,
            0.9965905547142029,
            0.9971858859062195,
            0.9957318902015686,
            0.9969406127929688,
            0.9973422884941101,
            0.9967504143714905,
            0.9962993264198303,
            0.9962040781974792,
            0.9954850077629089,
            0.9970285296440125,
            0.9939397573471069,
            0.9972918629646301,
            0.9928070902824402
        ]
    },
    "2912": {
        "similarity": 0.9959367513656616,
        "body": "    n = int(input())\n    strings = [input() for _ in range(n)]\n    operations = [[int(i) - 1 for i in input().split()] for _ in range(n - 1)]\n\n    for a, b in operations:\n        strings[a] += strings[b]\n        strings[b] = \"\"\n\n    return next((s for s in strings if s), \"\")\n\nprint(process_strings())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928060173988342,
            0.9950183033943176,
            0.9912145733833313,
            0.9947237968444824,
            0.9940715432167053,
            0.9947909116744995,
            0.9949037432670593,
            0.9926433563232422,
            0.9937475919723511,
            0.9954817891120911,
            0.9957327842712402,
            0.9931703209877014,
            0.9950962066650391,
            0.9952077269554138,
            0.9955191612243652,
            0.9959367513656616,
            0.9949995279312134,
            0.9933978915214539,
            0.9929423928260803,
            0.9920711517333984
        ]
    },
    "9": {
        "similarity": 0.9962325096130371,
        "body": "    for i in range(1, d + 1):\n        left = right = top = bottom = 0\n        for j in range(i):\n            if sofas[j][0] < sofas[i][0]:\n                left += 1\n            elif sofas[j][0] > sofas[i][0]:\n                right += 1\n            if sofas[j][1] < sofas[i][1]:\n                top += 1\n            elif sofas[j][1] > sofas[i][1]:\n                bottom += 1\n        if left == cnt[0] and right == cnt[1] and top == cnt[2] and bottom == cnt[3]:\n            return i\n    return -1\n\nd = int(input())\nn, m = map(int, input().split())\nsofas = [list(map(int, input().split())) for _ in range(d)]\ncnt = list(map(int, input().split()))\nprint(find_sofa(d, n, m, sofas, cnt))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943689107894897,
            0.9961068034172058,
            0.9951154589653015,
            0.9961706399917603,
            0.9947622418403625,
            0.9951958060264587,
            0.9917694926261902,
            0.9951415061950684,
            0.994799792766571,
            0.9956676363945007,
            0.9936453104019165,
            0.9931471943855286,
            0.9951035380363464,
            0.9911589622497559,
            0.9960764646530151,
            0.9944111704826355,
            0.9958162903785706,
            0.9944735169410706,
            0.9962325096130371,
            0.9939717650413513
        ]
    },
    "249": {
        "similarity": 0.9961041212081909,
        "body": "    n, l, x, y = map(int, input().split())\n    marks = list(map(int, input().split()))\n    v = 0\n    p = []\n    for i in range(n):\n        if marks[i] == x or marks[i] == y:\n            break\n    else:\n        if x not in marks and y in marks:\n            v = 1\n            p.append(x)\n        elif x in marks and y not in marks:\n            v = 1\n            p.append(y)\n        elif x not in marks and y not in marks:\n            v = 2\n            p.extend([x, y])\n    print(v)\n    print(*p)\n\nfind_marks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942384362220764,
            0.9953440427780151,
            0.9941455721855164,
            0.9920541644096375,
            0.9938077330589294,
            0.9948387145996094,
            0.9957734942436218,
            0.9961041212081909,
            0.9949647188186646,
            0.9957339763641357,
            0.9937472343444824,
            0.9929668307304382,
            0.9932311177253723,
            0.9939818382263184,
            0.9947490692138672,
            0.9872896075248718,
            0.9951220154762268,
            0.9953452944755554,
            0.9931473135948181,
            0.9925497770309448
        ]
    },
    "2999": {
        "similarity": 0.9979681968688965,
        "body": "    n, s = map(int, input().split())\n    bets = {}\n    for _ in range(n):\n        name, bet = input().split()\n        bet = int(bet)\n        if bet not in bets:\n            bets[bet] = []\n        bets[bet].append(name)\n\n    winners = set()\n    for bet in sorted(bets.keys()):\n        if sum(winners) + bet <= s and len(winners) < n:\n            winners.update(bets[bet])\n        else:\n            break\n\n    print(len(winners))\n    for winner in winners:\n        print(winner)\n\nfind_winners()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996904194355011,
            0.9971135854721069,
            0.9979681968688965,
            0.9974519610404968,
            0.9977744221687317,
            0.9973798990249634,
            0.9976046681404114,
            0.9971072673797607,
            0.9978291392326355,
            0.9953832030296326,
            0.9971672892570496,
            0.997767984867096,
            0.9973871111869812,
            0.9909804463386536,
            0.9970458149909973,
            0.9972078204154968,
            0.9936751127243042,
            0.9973775148391724,
            0.9971728324890137,
            0.9979169964790344
        ]
    },
    "2239": {
        "similarity": 0.9978306293487549,
        "body": "    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        rolls = 1\n        while True:\n            sum_of_rolls = rolls * 7\n            if sum_of_rolls >= x:\n                break\n            rolls += 1\n        print(rolls)\n\nfind_rolls()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965088367462158,
            0.9978306293487549,
            0.995527982711792,
            0.9958621859550476,
            0.9970695376396179,
            0.9976505637168884,
            0.9975121021270752,
            0.9950814843177795,
            0.9954823851585388,
            0.9975660443305969,
            0.9974266886711121,
            0.9971696734428406,
            0.9951268434524536,
            0.9969689249992371,
            0.9974535703659058,
            0.9975245594978333,
            0.9975672364234924,
            0.9891867637634277,
            0.9971544146537781,
            0.9967274069786072
        ]
    },
    "2615": {
        "similarity": 0.9965657591819763,
        "body": "    elegant_count = 0\n    for i in range(2, n + 1):\n        k_values = []\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                k_values.append(0)\n                while i % j == 0:\n                    i //= j\n            j += 1\n        if i > 1:\n            k_values.append(0)\n        gcd = k_values[0]\n        for k in k_values[1:]:\n            gcd = math.gcd(gcd, k)\n        if gcd == 1:\n            elegant_count += 1\n    return elegant_count\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(count_elegant(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948939085006714,
            0.9964932203292847,
            0.9961323142051697,
            0.9963019490242004,
            0.9878427386283875,
            0.9956328868865967,
            0.9951266050338745,
            0.9965657591819763,
            0.9962778687477112,
            0.9956117272377014,
            0.995457112789154,
            0.9936249256134033,
            0.9923201203346252,
            0.9937302470207214,
            0.994148850440979,
            0.9921955466270447,
            0.9962683320045471,
            0.9927514791488647,
            0.9953619241714478,
            0.9961482882499695
        ]
    },
    "2542": {
        "similarity": 0.9971323609352112,
        "body": "    n = len(s)\n    left = s[:n//2]\n    right = s[n-n//2:]\n    erase_count = 0\n\n    for i in range(n//2):\n        if left[i] != right[n-i-1]:\n            erase_count += 1\n            left = left[:-1]\n            right = right[1:]\n\n    return erase_count + (n % 2)\n\nfor _ in range(int(input())):\n    s = input()\n    print(min_erase(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964049458503723,
            0.9964057803153992,
            0.9971323609352112,
            0.9910953044891357,
            0.9938973784446716,
            0.9969617128372192,
            0.9954107999801636,
            0.9961043000221252,
            0.9966146349906921,
            0.9968114495277405,
            0.9967806935310364,
            0.9963192343711853,
            0.9953278303146362,
            0.9968520998954773,
            0.9954225420951843,
            0.9958418011665344,
            0.9945785403251648,
            0.9970552325248718,
            0.9961329102516174,
            0.9969347715377808
        ]
    },
    "511": {
        "similarity": 0.9964021444320679,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\n    if y == 0:\n        return 0\n    else:\n        result = 1 + f(x, y - gcd(x, y))\n        print(result)\n\nx, y = map(int, input().split())\nf(x, y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945964813232422,
            0.9956384301185608,
            0.9937805533409119,
            0.994248628616333,
            0.9953342080116272,
            0.9963009357452393,
            0.9950509667396545,
            0.9932900667190552,
            0.9963055849075317,
            0.9916249513626099,
            0.9912065267562866,
            0.9947482943534851,
            0.9964021444320679,
            0.9954692721366882,
            0.9951459169387817,
            0.9946889281272888,
            0.9950693845748901,
            0.9911167621612549,
            0.9930321574211121,
            0.9926308393478394
        ]
    },
    "1409": {
        "similarity": 0.9953862428665161,
        "body": "    participation = list(map(int, input().split()))\n    eligible = [i for i in range(n) if participation[i] >= k]\n    teams = 0\n    for i in range(0, len(eligible), 3):\n        teams += 1\n    print(teams)\n\nmax_teams(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918997883796692,
            0.9919793009757996,
            0.9916138052940369,
            0.9951105713844299,
            0.9946749806404114,
            0.9931881427764893,
            0.993355929851532,
            0.9917181134223938,
            0.9918786883354187,
            0.9927376508712769,
            0.9948687553405762,
            0.9914470314979553,
            0.9876792430877686,
            0.9948704242706299,
            0.9912629723548889,
            0.9934114217758179,
            0.9953452944755554,
            0.9918980002403259,
            0.9953862428665161,
            0.9951503276824951
        ]
    },
    "2274": {
        "similarity": 0.9975635409355164,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = []\n        for i in range(n):\n            grid.append(list(input()))\n        changes = 0\n        for i in range(n - 1):\n            for j in range(m - 1):\n                if grid[i][j] == 'R' and grid[i + 1][j] != 'D':\n                    changes += 1\n                    grid[i + 1][j] = 'D'\n                elif grid[i][j] == 'D' and grid[i][j + 1] != 'R':\n                    changes += 1\n                    grid[i][j + 1] = 'R'\n        print(changes)\n\nmin_changes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975635409355164,
            0.9960311055183411,
            0.9965290427207947,
            0.9959722757339478,
            0.9934004545211792,
            0.9964285492897034,
            0.9940149188041687,
            0.9971793293952942,
            0.9970089793205261,
            0.9961032867431641,
            0.9972147941589355,
            0.9969066977500916,
            0.9950970411300659,
            0.9959279298782349,
            0.9971084594726562,
            0.9932479858398438,
            0.9962567687034607,
            0.997107982635498,
            0.9957894086837769,
            0.9966189861297607
        ]
    },
    "2420": {
        "similarity": 0.9972933530807495,
        "body": "import sys\n\n    n, r = map(int, sys.stdin.readline().split())\n    points = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\n        count = 0\n        for x, y in points:\n            if abs(x - x0) + abs(y - y0) <= r:\n                count += 1\n        return count\n\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x0, y0 = (points[i][0] + points[j][0]) / 2, (points[i][1] + points[j][1]) / 2\n            count = can_cover(x0, y0)\n            max_count = max(max_count, count)\n\n    print(max_count)\n\nif __name__ == \"__main__\":\n    max_points_in_ball()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958963990211487,
            0.9966926574707031,
            0.9971604943275452,
            0.9968944191932678,
            0.9959957599639893,
            0.9968963265419006,
            0.9956021904945374,
            0.9969385862350464,
            0.9954970479011536,
            0.9964005351066589,
            0.9972933530807495,
            0.9961446523666382,
            0.9961461424827576,
            0.9972561597824097,
            0.9955390095710754,
            0.9961649179458618,
            0.9955223798751831,
            0.9919415712356567,
            0.9954166412353516,
            0.997106671333313
        ]
    },
    "1267": {
        "similarity": 0.997228741645813,
        "body": "    n = int(input())\n    scores = list(map(int, input().split()))\n    max_score = max(s for s in scores if s > 0)\n    ways = 1\n    for score in range(max_score + 1):\n        if any(score <= s for s in scores):\n            ways += 1\n    print(ways)\n\ncount_ways()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970673322677612,
            0.9961863160133362,
            0.997228741645813,
            0.989997386932373,
            0.9971554279327393,
            0.9958868622779846,
            0.9971649050712585,
            0.9964210987091064,
            0.9971455931663513,
            0.99715656042099,
            0.9959016442298889,
            0.9971238970756531,
            0.9954439401626587,
            0.996491014957428,
            0.9925796389579773,
            0.9969933032989502,
            0.9897717833518982,
            0.9951257109642029,
            0.99672931432724,
            0.9971124529838562
        ]
    },
    "2356": {
        "similarity": 0.9966989755630493,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        shuffled_arr = [0] * n\n        for i in range(n):\n            j = i + 1 - arr[i]\n            while shuffled_arr[j]:\n                j += 1\n            shuffled_arr[j] = arr[i]\n        print(*shuffled_arr)\n\nshuffle_array()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962453246116638,
            0.9956470131874084,
            0.9958571195602417,
            0.9931801557540894,
            0.9944642782211304,
            0.995680034160614,
            0.9952772259712219,
            0.9937796592712402,
            0.9961138367652893,
            0.9939394593238831,
            0.9951526522636414,
            0.9963770508766174,
            0.9950425028800964,
            0.9933575391769409,
            0.9909044504165649,
            0.9965348839759827,
            0.9951637983322144,
            0.9935730695724487,
            0.9966989755630493,
            0.9955153465270996
        ]
    },
    "108": {
        "similarity": 0.9970666766166687,
        "body": "s = input().strip()\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nresult = ''\nfor i in range(len(alphabet)):\n    if alphabet[i] in s:\n        result += alphabet[i]\nif len(result) == 26:\n    print(result)\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925199747085571,
            0.9946838021278381,
            0.9960182905197144,
            0.9970666766166687,
            0.9961873292922974,
            0.9967683553695679,
            0.9965198040008545,
            0.992502748966217,
            0.9968054890632629,
            0.9932324290275574,
            0.9955255389213562,
            0.9964063763618469,
            0.9954113364219666,
            0.996902346611023,
            0.9959821105003357,
            0.9963676333427429,
            0.9943455457687378,
            0.9963364005088806,
            0.9960089325904846,
            0.994871973991394
        ]
    },
    "1833": {
        "similarity": 0.997552752494812,
        "body": "    MOD = 10**9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if a[j] % (i + 1) == 0:\n                dp[i] += dp[j]\n                dp[i] %= MOD\n    return sum(dp[n:]) % MOD\n\nprint(count_good_subsequences())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952523112297058,
            0.9960334300994873,
            0.996446430683136,
            0.9948398470878601,
            0.9970540404319763,
            0.9970064759254456,
            0.996839702129364,
            0.9971104860305786,
            0.9961437582969666,
            0.9973359704017639,
            0.9968699216842651,
            0.9915907979011536,
            0.9973762035369873,
            0.9950850605964661,
            0.99565589427948,
            0.9972162842750549,
            0.994642436504364,
            0.997552752494812,
            0.9964177012443542,
            0.9937820434570312
        ]
    },
    "2324": {
        "similarity": 0.9972004294395447,
        "body": "    n = len(s)\n    res = [0] * n\n\n    for k in range(1, n + 1):\n        for i in range(n - k + 1):\n            j = i + k // 2\n            if s[i:j][::-1] == s[j:i+k-j]:\n                res[k - 1] += 1\n\n    print(*res)\n\npalindromic_characteristics(input())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936236143112183,
            0.9966254234313965,
            0.9964070916175842,
            0.9935927391052246,
            0.9957207441329956,
            0.9959232211112976,
            0.9928239583969116,
            0.9944028258323669,
            0.9959071278572083,
            0.9966608285903931,
            0.9963204264640808,
            0.9963179230690002,
            0.9961991906166077,
            0.995756983757019,
            0.9960417747497559,
            0.9957383871078491,
            0.9958643913269043,
            0.9929893016815186,
            0.9972004294395447,
            0.9933176636695862
        ]
    },
    "2372": {
        "similarity": 0.9985018372535706,
        "body": "    H, W = map(int, input().split())\n    C_h, C_w = map(int, input().split())\n    D_h, D_w = map(int, input().split())\n    maze = [list(input()) for _ in range(H)]\n\n        return 0 <= x < H and 0 <= y < W and maze[x][y] == '.'\n\n    queue = [(C_h, C_w, 0)]\n    visited = set((C_h, C_w))\n\n    while queue:\n        h, w, magic_count = queue.pop(0)\n        if (h, w) == (D_h, D_w):\n            print(magic_count)\n            return\n        for dh, dw in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            nh, nw = h + dh, w + dw\n            if is_valid(nh, nw) and (nh, nw) not in visited:\n                queue.append((nh, nw, magic_count))\n                visited.add((nh, nw))\n        if magic_count < 25:\n            for dh in range(-2, 3):\n                for dw in range(-2, 3):\n                    nh, nw = h + dh, w + dw\n                    if is_valid(nh, nw) and (nh, nw) not in visited:\n                        queue.append((nh, nw, magic_count + 1))\n                        visited.add((nh, nw))\n\n    print(-1)\n\nfind_minimum_moves()",
        "result": "failed: testcase 0",
        "similarities": [
            0.99811190366745,
            0.9980210065841675,
            0.9984217286109924,
            0.9967054128646851,
            0.9979903697967529,
            0.9977927803993225,
            0.9985018372535706,
            0.9951298236846924,
            0.9969173073768616,
            0.9975700378417969,
            0.9983928203582764,
            0.9964337944984436,
            0.9981247782707214,
            0.9976710081100464,
            0.998291552066803,
            0.9971474409103394,
            0.9983715415000916,
            0.997727632522583,
            0.9982057809829712,
            0.9982279539108276
        ]
    },
    "1984": {
        "similarity": 0.9968960285186768,
        "body": "    levels = []\n    for _ in range(k):\n        level = []\n        for _ in range(n):\n            row = list(input())\n            level.append(row)\n        levels.append(level)\n\n    min_bytes = float('inf')\n    best_order = []\n\n        nonlocal min_bytes\n        if idx == k:\n            bytes_transferred = 0\n            for i in range(k):\n                if levels[i][0] != prev_level[i]:\n                    bytes_transferred += w * sum(c1 != c2 for c1, c2 in zip(levels[i], prev_level[i]))\n                else:\n                    bytes_transferred += n * m\n            min_bytes = min(min_bytes, bytes_transferred)\n            return\n\n        for i in range(idx):\n            if levels[idx] == levels[i]:\n                continue\n            new_levels = levels[:idx+1]\n            new_levels[idx], new_levels[i] = new_levels[i], new_levels[idx]\n            dfs(new_levels, idx+1, new_levels[:idx])\n\n    dfs(levels, 0)\n\n    print(min_bytes)\n    current_level = 0\n    for i in range(k):\n        if levels[i][0] != current_level:\n            print(f\"{i+1} {current_level}\")\n            current_level = i\n\nmin_traffic(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959515929222107,
            0.9967960715293884,
            0.9964914917945862,
            0.9936698079109192,
            0.996791422367096,
            0.9958981275558472,
            0.9954032897949219,
            0.9966779351234436,
            0.9966744780540466,
            0.9961101412773132,
            0.9968056082725525,
            0.9963499307632446,
            0.994799792766571,
            0.9959584474563599,
            0.9937930107116699,
            0.9964312314987183,
            0.9968960285186768,
            0.9968892335891724,
            0.9964684247970581,
            0.9948388934135437
        ]
    },
    "1253": {
        "similarity": 0.9954408407211304,
        "body": "    incomes = [int(x) for x in input().split()]\n    incomes.sort()\n    for _ in range(k):\n        if incomes[0] > 0:\n            incomes[0] *= -1\n        else:\n            incomes.pop(0)\n    return sum(incomes)\n\nn, k = map(int, input().split())\nprint(max_income(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937106966972351,
            0.9942716360092163,
            0.9944735169410706,
            0.9898147583007812,
            0.9919393658638,
            0.9919773936271667,
            0.9947748780250549,
            0.9936156868934631,
            0.9938766360282898,
            0.9950966238975525,
            0.9861540794372559,
            0.994443416595459,
            0.9953309893608093,
            0.9930383563041687,
            0.9944245219230652,
            0.9939208030700684,
            0.9900816082954407,
            0.9954408407211304,
            0.9948986768722534,
            0.9934256672859192
        ]
    },
    "523": {
        "similarity": 0.9968022704124451,
        "body": "    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    strings.sort()\n    i, j = 0, len(strings) - 1\n    palindrome = ''\n\n    while i <= j:\n        if strings[i] == strings[j][::-1]:\n            palindrome += strings[i]\n            i += 1\n            j -= 1\n        elif len(palindrome) > 0 and strings[i][::-1] in strings[i+1:]:\n            i = strings[i+1:].index(strings[i][::-1]) + i + 1\n        else:\n            j -= 1\n\n    print(len(palindrome))\n    if palindrome:\n        print(palindrome)\n\nlongest_palindrome(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948458671569824,
            0.9961130023002625,
            0.9954254627227783,
            0.9963371157646179,
            0.9960481524467468,
            0.9960652589797974,
            0.9896722435951233,
            0.9945273995399475,
            0.9940919280052185,
            0.9946403503417969,
            0.9950948357582092,
            0.9959022402763367,
            0.9942590594291687,
            0.9960677623748779,
            0.9962297677993774,
            0.9964344501495361,
            0.9962204694747925,
            0.9954942464828491,
            0.9968022704124451,
            0.9955930113792419
        ]
    },
    "2934": {
        "similarity": 0.9975050687789917,
        "body": "    n = int(input())\n    m = int(input())\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    mod = 10**9\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1:\n                dp[i][j] = dp[i - 1][j]\n            elif j % 2 == 1:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j // 2]) % mod\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    print(dp[n][m])\n\ncount_macaron_tilings()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961114525794983,
            0.9903229475021362,
            0.9963347911834717,
            0.9971109628677368,
            0.9959865212440491,
            0.9959954619407654,
            0.9975050687789917,
            0.9967208504676819,
            0.9955698251724243,
            0.9972963929176331,
            0.9968159198760986,
            0.9945706129074097,
            0.995056688785553,
            0.9962921142578125,
            0.9965858459472656,
            0.9962916374206543,
            0.9958456158638,
            0.9967960715293884,
            0.9973108172416687,
            0.9972289204597473
        ]
    },
    "1745": {
        "similarity": 0.9959644675254822,
        "body": "    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n        if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == '#':\n            return\n        if x == 0 or y == 0 or x == n - 1 or y == m - 1:\n            if (x == 0 and pipes.count('.')) or (y == 0 and pipes.count('.')) or (x == n - 1 and pipes.count('#')) or (y == m - 1 and pipes.count('#')):\n                return\n        pipes += grid[x][y]\n        dfs(x + dx, y + dy, dx, dy, pipes)\n\n        ways = 0\n        for x in range(1, n - 1):\n            if grid[x][0] == '.':\n                ways += 1\n                dfs(x, 0, 0, 1, '')\n        for y in range(1, m - 1):\n            if grid[0][y] == '.':\n                ways += 1\n                dfs(0, y, 1, 0, '')\n        return ways\n\n    print(count_ways())\n\ncount_pipes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937663078308105,
            0.9927199482917786,
            0.9951061606407166,
            0.9959644675254822,
            0.9923763275146484,
            0.9956058859825134,
            0.9950342774391174,
            0.9959570169448853,
            0.9820600748062134,
            0.995200514793396,
            0.9956538677215576,
            0.9933499693870544,
            0.9941815137863159,
            0.9943747520446777,
            0.9935450553894043,
            0.9946761131286621,
            0.9893007874488831,
            0.9955171346664429,
            0.9948659539222717,
            0.9956437349319458
        ]
    },
    "1422": {
        "similarity": 0.9965727925300598,
        "body": "    weights = [int(i) for i in input().strip()][::-1]\n    m = int(input())\n    left, right = 0, 0\n    weights_used = []\n    for weight in range(1, 11):\n        if weights[weight - 1] == 1:\n            for _ in range(m):\n                if len(weights_used) == 0 or weights_used[-1] != weight:\n                    if left + weight > right:\n                        left += weight\n                        weights_used.append(weight)\n                        break\n                    else:\n                        right += weight\n    print(\"YES\") if len(weights_used) == m else print(\"NO\")\n    print(*weights_used[::-1]) if len(weights_used) == m else None\n\nxenia_weights()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953145384788513,
            0.9952386617660522,
            0.9944574236869812,
            0.9943496584892273,
            0.9963623881340027,
            0.9911056160926819,
            0.9946368336677551,
            0.9958851337432861,
            0.9965727925300598,
            0.9942376017570496,
            0.9947798848152161,
            0.9949959516525269,
            0.9958113431930542,
            0.9940788745880127,
            0.994645357131958,
            0.9959122538566589,
            0.9958532452583313,
            0.9956729412078857,
            0.9962329864501953,
            0.9948692321777344
        ]
    },
    "1763": {
        "similarity": 0.9956042766571045,
        "body": "    n, a, r, m = map(int, input().split())\n    pillars = list(map(int, input().split()))\n    min_height = min(pillars)\n    total_cost = 0\n\n    for i in range(n):\n        if pillars[i] > min_height:\n            diff = pillars[i] - min_height\n            cost_add = diff * a\n            cost_remove = diff * r\n            if cost_add <= cost_remove:\n                total_cost += diff * a\n            else:\n                total_cost += diff * r + m\n\n    print(total_cost)\n\nrestore_wall()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944582581520081,
            0.9901856184005737,
            0.9928094744682312,
            0.9899287819862366,
            0.990964412689209,
            0.9933121204376221,
            0.9912627339363098,
            0.9946427941322327,
            0.9931192994117737,
            0.9929572939872742,
            0.9931138753890991,
            0.9952203035354614,
            0.993015706539154,
            0.9930059313774109,
            0.9943783283233643,
            0.992376446723938,
            0.9956042766571045,
            0.9926952719688416,
            0.9947049021720886,
            0.9941936135292053
        ]
    },
    "974": {
        "similarity": 0.9971944689750671,
        "body": "    stack = []\n    reorders = 0\n\n    for _ in range(2 * n):\n        command, x = input().split()\n        x = int(x)\n\n        if command == \"add\":\n            stack.append(x)\n        else:\n            while stack and stack[-1] != x:\n                stack.pop()\n                reorders += 1\n            stack.pop()\n\n    return reorders\n\nn = int(input())\nprint(min_reorders(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967983961105347,
            0.996173083782196,
            0.9925139546394348,
            0.996801495552063,
            0.9967771768569946,
            0.9935136437416077,
            0.9968382120132446,
            0.9959895610809326,
            0.9970219135284424,
            0.9960504174232483,
            0.9959809184074402,
            0.9956908226013184,
            0.9967828392982483,
            0.9969322681427002,
            0.9961894154548645,
            0.9957451224327087,
            0.9952834248542786,
            0.995116114616394,
            0.9971944689750671,
            0.9954983592033386
        ]
    },
    "2343": {
        "similarity": 0.9972136616706848,
        "body": "    size = 2 ** n\n    while k > 0 and size > 1:\n        if k >= 4:\n            k -= 4\n            size /= 2\n        else:\n            return \"NO\"\n    if size == 1 and k == 0:\n        return f\"YES {int(log2(size))}\"\n    return \"NO\"\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(check_olya(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918000102043152,
            0.9964746236801147,
            0.9945317506790161,
            0.9958456158638,
            0.9963433146476746,
            0.9948320984840393,
            0.9953109622001648,
            0.9934855103492737,
            0.9963613748550415,
            0.9912866353988647,
            0.9969531893730164,
            0.995517909526825,
            0.9962320923805237,
            0.9972136616706848,
            0.9964179992675781,
            0.996332049369812,
            0.9963067770004272,
            0.9945062398910522,
            0.9950369000434875,
            0.9968127012252808
        ]
    },
    "627": {
        "similarity": 0.997313380241394,
        "body": "    n = int(input())\n    s = input()\n    for i in range(n):\n        if i == 0 or s[i-1] < s[i]:\n            continue\n        return s[:i] + s[i+1:]\n    return s\n\nprint(smallest_string())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966264367103577,
            0.9946955442428589,
            0.9958463311195374,
            0.9944321513175964,
            0.9965959191322327,
            0.9972497224807739,
            0.9969896078109741,
            0.9966487884521484,
            0.9945618510246277,
            0.9961820840835571,
            0.997313380241394,
            0.9933825135231018,
            0.9953576922416687,
            0.9949043989181519,
            0.9961892366409302,
            0.9956145286560059,
            0.9946576356887817,
            0.9953542947769165,
            0.9957592487335205,
            0.9956425428390503
        ]
    },
    "1655": {
        "similarity": 0.9978479146957397,
        "body": "    n = int(input())\n    claws = list(map(int, input().split()))\n    alive = [True] * n\n    for i in range(n):\n        if claws[i]:\n            for j in range(max(i - claws[i], 0), i):\n                alive[j] = False\n    print(sum(alive))\n\nfind_alive_people()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965081810951233,
            0.9978479146957397,
            0.9965395927429199,
            0.9968311786651611,
            0.9966254234313965,
            0.9895172119140625,
            0.9961613416671753,
            0.9962517619132996,
            0.9973917603492737,
            0.997523844242096,
            0.9963338971138,
            0.9923197031021118,
            0.9974920153617859,
            0.9969884753227234,
            0.9975652098655701,
            0.9957998991012573,
            0.9977623820304871,
            0.9970186948776245,
            0.9965073466300964,
            0.9962152242660522
        ]
    },
    "2124": {
        "similarity": 0.9978272318840027,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        users = set(input().split())\n        m = int(input())\n        prev_user = None\n        for i in range(m):\n            msg = input()\n            user, text = (msg.split(\":\")[0] if \":\" in msg else None), msg.split(\":\")[1] if \":\" in msg else msg\n            if user is not None:\n                if user in users and user != prev_user:\n                    print(f\"{user}: {text}\")\n                    prev_user = user\n                else:\n                    print(\"Impossible\")\n                    break\n            elif i > 0 and text.lower() in [u.lower() for u in users]:\n                print(f\"{prev_user}: {text}\")\n            else:\n                print(f\"?{text}\")\n\nrecover_senders()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977235198020935,
            0.9968988299369812,
            0.9951011538505554,
            0.9969637989997864,
            0.997268557548523,
            0.997411847114563,
            0.9976053833961487,
            0.9960202574729919,
            0.99713134765625,
            0.9976391196250916,
            0.997278094291687,
            0.9971646070480347,
            0.9970148205757141,
            0.9960830211639404,
            0.9971054792404175,
            0.9978272318840027,
            0.9969857931137085,
            0.9954317808151245,
            0.9976692199707031,
            0.9976140856742859
        ]
    },
    "1093": {
        "similarity": 0.9977887868881226,
        "body": "    n, m = map(int, input().split())\n    matrix = [input() for _ in range(n)]\n    max_climb, max_descent = 0, 0\n    prev_height = -1\n\n    for j in range(m):\n        for i in range(n):\n            if matrix[i][j] == '*':\n                current_height = n - i\n                if current_height > prev_height:\n                    max_climb = max(max_climb, current_height - prev_height)\n                elif current_height < prev_height:\n                    max_descent = max(max_descent, prev_height - current_height)\n                prev_height = current_height\n\n    print(max_climb, max_descent)\n\nfind_max_climb_descent()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966109395027161,
            0.9972870349884033,
            0.9971418976783752,
            0.9961638450622559,
            0.9976979494094849,
            0.9973936676979065,
            0.9973559379577637,
            0.9960696697235107,
            0.9968535900115967,
            0.995253324508667,
            0.9971370697021484,
            0.996555745601654,
            0.9973377585411072,
            0.9975036978721619,
            0.9970269799232483,
            0.9977887868881226,
            0.9970590472221375,
            0.9975190758705139,
            0.9954397082328796,
            0.9975537061691284
        ]
    },
    "899": {
        "similarity": 0.9972726106643677,
        "body": "    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        edges.append((a - 1, b - 1, c))\n\n        if src == dst:\n            return True\n        visited[src] = True\n        for node, weight in graph[src]:\n            if not visited[node] and (parent[node] is None or weight < parent[node][1]):\n                parent[node] = (src, weight)\n                if dfs(node, dst, parent):\n                    return True\n\n    graph = [[] for _ in range(n)]\n    for a, b, c in edges:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n\n    non_shortest_path_edges = 0\n    visited = [False] * n\n    parent = [[None, float('inf')]] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dfs(i, j, parent)\n            if parent[j][0] != i:\n                non_shortest_path_edges += 1\n\n    print(non_shortest_path_edges)\n\nif __name__ == \"__main__\":\n    find_non_shortest_path_edges()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951099753379822,
            0.9963406324386597,
            0.9969784617424011,
            0.9936640858650208,
            0.9952822327613831,
            0.9961051940917969,
            0.9963126182556152,
            0.9966295957565308,
            0.9968000650405884,
            0.9959248900413513,
            0.994029700756073,
            0.9964370727539062,
            0.9966207146644592,
            0.9950840473175049,
            0.9946640729904175,
            0.9967175722122192,
            0.9957298636436462,
            0.9972726106643677,
            0.9958965182304382,
            0.9947714805603027
        ]
    },
    "551": {
        "similarity": 0.996342122554779,
        "body": "    n = int(input())\n    y_coords = list(map(int, input().split()))\n    if n < 3:\n        return \"No\"\n    sorted_y = sorted(y_coords)\n    prev_diff = None\n    for i in range(1, len(sorted_y)):\n        curr_diff = sorted_y[i] - sorted_y[i-1]\n        if prev_diff is not None and curr_diff != prev_diff:\n            return \"Yes\"\n        prev_diff = curr_diff\n    return \"No\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955589175224304,
            0.9952801465988159,
            0.9946845173835754,
            0.995258629322052,
            0.9884553551673889,
            0.994907557964325,
            0.9916598796844482,
            0.9958285093307495,
            0.9908605813980103,
            0.9960658550262451,
            0.9954637289047241,
            0.9929667115211487,
            0.996342122554779,
            0.9956464171409607,
            0.9911105632781982,
            0.9958763122558594,
            0.9943227171897888,
            0.9952607750892639,
            0.9953076243400574,
            0.9953421354293823
        ]
    },
    "1772": {
        "similarity": 0.9963034391403198,
        "body": "import sys\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    large_bouquets = 0\n    i = 0\n    while i < n:\n        if a[i] % 2 == 1 and (i + 1 < n or a[i + 1] % 2 == 1):\n            large_bouquets += 1\n            i += 2\n        else:\n            i += 1\n    print(large_bouquets)\n\nmax_large_bouquets()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993937075138092,
            0.9959941506385803,
            0.9963034391403198,
            0.9921009540557861,
            0.9948828816413879,
            0.9958218932151794,
            0.993526041507721,
            0.99466472864151,
            0.995792806148529,
            0.9958997964859009,
            0.9920290112495422,
            0.9962698221206665,
            0.9957612752914429,
            0.9955412149429321,
            0.9937227368354797,
            0.9961562752723694,
            0.9951539635658264,
            0.9938270449638367,
            0.9938194751739502,
            0.9960575103759766
        ]
    },
    "1339": {
        "similarity": 0.9960227608680725,
        "body": "    n = int(input())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    covering_segment_index = -1\n    for i in range(n):\n        if all(s[0] <= segments[i][0] and s[1] >= segments[i][1] for s in segments if i != j):\n            covering_segment_index = i + 1\n            break\n\n    print(covering_segment_index)\n\nfind_covering_segment()",
        "result": "failed: testcase 0",
        "similarities": [
            0.992579996585846,
            0.9957769513130188,
            0.9934209585189819,
            0.9959365725517273,
            0.9937705993652344,
            0.9952729940414429,
            0.9941149353981018,
            0.9856065511703491,
            0.9934784770011902,
            0.9947673678398132,
            0.9942018389701843,
            0.9933869242668152,
            0.9960227608680725,
            0.9940279126167297,
            0.9942455291748047,
            0.9959570169448853,
            0.9954746961593628,
            0.9960082173347473,
            0.9959660768508911,
            0.9950363039970398
        ]
    },
    "440": {
        "similarity": 0.9970386028289795,
        "body": "    s = input()\n    vowels = 'aeiouy'\n    for i in range(len(s) - 1):\n        if s[i] in vowels and s[i + 1] in vowels:\n            s = s[:i] + s[i + 2:]\n            print(s)\n            break\n    else:\n        print(s)\n\ncorrect_word()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910992383956909,
            0.9945793151855469,
            0.9969998598098755,
            0.9955917000770569,
            0.9961405396461487,
            0.9962304830551147,
            0.9969174265861511,
            0.9968995451927185,
            0.9913131594657898,
            0.9953474998474121,
            0.9970386028289795,
            0.9966908693313599,
            0.9940153360366821,
            0.9952011108398438,
            0.9945994019508362,
            0.9965567588806152,
            0.9963937997817993,
            0.9968696236610413,
            0.9962413311004639,
            0.9967702627182007
        ]
    },
    "2801": {
        "similarity": 0.9976768493652344,
        "body": "import sys\n\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, input().split())\n        graph[s].append(t)\n\n        max_satisfaction = 0\n        for child in graph[node]:\n            if child != parent:\n                new_path = path + [child]\n                satisfaction = sum(c[new_node] * (1 / (2 ** i)) for i, new_node in enumerate(new_path))\n                max_satisfaction = max(max_satisfaction, dfs(child, node, new_path), satisfaction)\n        return max_satisfaction\n\n    print(dfs(0, None, [0]))\n\nsolve_pizza_problem()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959151744842529,
            0.9955293536186218,
            0.9969253540039062,
            0.9961022138595581,
            0.9974244832992554,
            0.9961996674537659,
            0.9961132407188416,
            0.9951399564743042,
            0.9962319135665894,
            0.9974297285079956,
            0.9971461892127991,
            0.9966354370117188,
            0.9976768493652344,
            0.9970020651817322,
            0.9968075156211853,
            0.9972463846206665,
            0.9972900748252869,
            0.9966924786567688,
            0.9972665905952454,
            0.996948778629303
        ]
    },
    "2749": {
        "similarity": 0.9966586232185364,
        "body": "    H, W = map(int, input().split())\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    grid = [[0] * W for _ in range(H)]\n\n        if x < 0 or y < 0 or x >= H or y >= W:\n            return False\n        if grid[x][y] != 0:\n            return False\n        if a[color - 1] == 0:\n            return False\n        grid[x][y] = color\n        a[color - 1] -= 1\n        dfs(x + 1, y, color)\n        dfs(x - 1, y, color)\n        dfs(x, y + 1, color)\n        dfs(x, y - 1, color)\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == 0:\n                for color in range(1, N + 1):\n                    if a[color - 1] > 0:\n                        dfs(i, j, color)\n                        break\n\n    for row in grid:\n        print(' '.join(map(str, row)))\n\npaint_grid()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966145753860474,
            0.9950436353683472,
            0.9934509992599487,
            0.9961521625518799,
            0.9914858937263489,
            0.9953565001487732,
            0.9925275444984436,
            0.9966586232185364,
            0.996379554271698,
            0.9957990050315857,
            0.9939255118370056,
            0.996592104434967,
            0.9952605366706848,
            0.9954524636268616,
            0.9961199760437012,
            0.9945782423019409,
            0.9934796690940857,
            0.9965142011642456,
            0.9918739199638367,
            0.9963948130607605
        ]
    },
    "2319": {
        "similarity": 0.9958871603012085,
        "body": "    n = len(s)\n    count = 0\n\n    for i in range(n):\n        if s[i] != t[(i + count) % n]:\n            return -1\n\n        if i < n - 1 and s[i+1] == t[i]:\n            count += 1\n            i += 1\n\n    return count\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    print(min_operations(s, t))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9804125428199768,
            0.9947923421859741,
            0.9950754046440125,
            0.9919897317886353,
            0.9953426718711853,
            0.9955542683601379,
            0.9950459003448486,
            0.993519127368927,
            0.9942556023597717,
            0.9885078072547913,
            0.9949554800987244,
            0.9955214262008667,
            0.995427668094635,
            0.9958871603012085,
            0.9955432415008545,
            0.9946925640106201,
            0.9953723549842834,
            0.9919288158416748,
            0.9931417107582092,
            0.9894702434539795
        ]
    },
    "2121": {
        "similarity": 0.9982112050056458,
        "body": "    n, k = map(int, input().split())\n    ai = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n        grades[node] = ai[node]\n        for child in graph[node]:\n            if child != parent:\n                dfs(child, node)\n                grades[node] = min(grades[node], grades[child])\n\n    grades = [0] * n\n    max_grade = 10**9 + 7\n    for i in range(n):\n        if len(graph[i]) > 0:\n            dfs(i)\n            max_grade = min(max_grade, grades[i])\n            grades[i] = max_grade\n\n    print(max_grade)\n\nfind_maximum_grade()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9982112050056458,
            0.996569812297821,
            0.9978638887405396,
            0.9975166320800781,
            0.9981655478477478,
            0.997523844242096,
            0.9971919655799866,
            0.9972497820854187,
            0.9980552196502686,
            0.9961511492729187,
            0.9977716207504272,
            0.9965256452560425,
            0.9974793195724487,
            0.9977666139602661,
            0.9934337139129639,
            0.9981299042701721,
            0.9979599714279175,
            0.9978850483894348,
            0.996955156326294,
            0.9977099895477295
        ]
    },
    "2617": {
        "similarity": 0.9967661499977112,
        "body": "    nights = 0\n    splits = []\n    current_mass = 1\n\n    while current_mass < n:\n        if current_mass * 2 <= n:\n            splits.append(1)\n            current_mass *= 2\n        else:\n            splits.append(0)\n            current_mass += 1\n        nights += 1\n\n    print(nights)\n    print(' '.join(map(str, splits)))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    phoenix_bacteria(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921460747718811,
            0.9959169030189514,
            0.9966583251953125,
            0.9966480731964111,
            0.9965808391571045,
            0.9963417053222656,
            0.9962900280952454,
            0.9955510497093201,
            0.9934971332550049,
            0.9965816140174866,
            0.9950973391532898,
            0.9923468232154846,
            0.9958698153495789,
            0.9964009523391724,
            0.9950788617134094,
            0.9952360391616821,
            0.994785726070404,
            0.9967661499977112,
            0.9934374094009399,
            0.9961402416229248
        ]
    },
    "175": {
        "similarity": 0.9969554543495178,
        "body": "    n, m = map(int, input().split())\n    while n != 0 and m != 0:\n        if n >= 2 * m:\n            n -= 2 * m\n        elif m >= 2 * n:\n            m -= 2 * n\n        else:\n            break\n    print(n, m)\n\nprocess_values()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966393709182739,
            0.9968775510787964,
            0.9961971640586853,
            0.9931676983833313,
            0.9942584037780762,
            0.9964948892593384,
            0.9964282512664795,
            0.9964282512664795,
            0.9964282512664795,
            0.9969444274902344,
            0.9946391582489014,
            0.9968335032463074,
            0.9955232739448547,
            0.9962758421897888,
            0.9937005639076233,
            0.9964948892593384,
            0.9968210458755493,
            0.9964282512664795,
            0.9957564473152161,
            0.9969554543495178
        ]
    },
    "995": {
        "similarity": 0.9966205954551697,
        "body": "    groups = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            group_size = j - i\n            is_perfect_square = all(arr[i:j][k] % (group_size ** 0.5) == 0 for k in range(group_size))\n            if is_perfect_square:\n                groups[group_size - 1] += 1\n    return ' '.join(map(str, groups))\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(count_groups(n, arr))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964370727539062,
            0.9938567280769348,
            0.9960335493087769,
            0.9961572289466858,
            0.9948608875274658,
            0.9955316185951233,
            0.9960556030273438,
            0.9938203692436218,
            0.9965125918388367,
            0.9838263988494873,
            0.9954549074172974,
            0.9954965710639954,
            0.9959875345230103,
            0.9956148862838745,
            0.9966205954551697,
            0.9961945414543152,
            0.9955347776412964,
            0.9949125051498413,
            0.9957109093666077,
            0.9931132793426514
        ]
    },
    "582": {
        "similarity": 0.996468722820282,
        "body": "    n = int(input())\n    ai = list(map(int, input().split()))\n    ti = list(map(int, input().split()))\n\n    max_a = max(ai)\n    time = 0\n\n    for i in range(n):\n        if ai[i] == max_a:\n            time += ti[i]\n            ai[i] -= 1\n            max_a = max(ai)\n\n    print(time)\n\nmin_time()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964461326599121,
            0.9959474205970764,
            0.9937770366668701,
            0.993078351020813,
            0.9949043989181519,
            0.994972825050354,
            0.9964346885681152,
            0.9950551390647888,
            0.9954157471656799,
            0.9950339794158936,
            0.9878746867179871,
            0.9956609010696411,
            0.9945939779281616,
            0.9928797483444214,
            0.9964346885681152,
            0.9939641356468201,
            0.996468722820282,
            0.9926737546920776,
            0.9954214692115784,
            0.9964113831520081
        ]
    },
    "1402": {
        "similarity": 0.9958657026290894,
        "body": "    mod = 10**9 + 7\n    n = int(input())\n    template1 = input()\n    template2 = input()\n\n    ways = [0] * (n+1)\n    ways[0] = 1\n\n    for i in range(1, n+1):\n        if template1[i-1] != '?' and template2[i-1] != '?':\n            continue\n        elif template1[i-1] == '?':\n            for digit in range(9):\n                if i > 1 and digit < int(template2[i-2]):\n                    ways[i] = (ways[i] + ways[i-1]) % mod\n                else:\n                    ways[i] = (ways[i] + ways[i-1]) % mod\n        elif template2[i-1] == '?':\n            for digit in range(9):\n                if i > 1 and digit < int(template1[i-2]):\n                    ways[i] = (ways[i] + ways[i-1]) % mod\n                else:\n                    ways[i] = (ways[i] + ways[i-1]) % mod\n\n    print(ways[n])\n\nsolve_problem()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939010143280029,
            0.9937924742698669,
            0.993709146976471,
            0.9897874593734741,
            0.9932265877723694,
            0.9919753670692444,
            0.9958657026290894,
            0.9955841898918152,
            0.9817519783973694,
            0.9942898154258728,
            0.9934636354446411,
            0.9937236309051514,
            0.9934781789779663,
            0.9928813576698303,
            0.9950398206710815,
            0.9938643574714661,
            0.9919967651367188,
            0.9941485524177551,
            0.9950347542762756,
            0.9954581260681152
        ]
    },
    "1141": {
        "similarity": 0.998980700969696,
        "body": "    n, m = map(int, input().split())\n    s = input()\n    for _ in range(m):\n        l, r, c1, c2 = input().split()\n        l, r = int(l) - 1, int(r)\n        s = ''.join(c if i < l or i > r else c2 for i, c in enumerate(s))\n    print(s)\n\nprocess_string()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9988956451416016,
            0.9983088970184326,
            0.9989284873008728,
            0.9981114268302917,
            0.9977635741233826,
            0.9986435770988464,
            0.9987931847572327,
            0.9989760518074036,
            0.9974736571311951,
            0.9986435770988464,
            0.9984723925590515,
            0.9980445504188538,
            0.998980700969696,
            0.9988777041435242,
            0.998077392578125,
            0.9984422326087952,
            0.9987973570823669,
            0.9989339113235474,
            0.9980430603027344,
            0.998813807964325
        ]
    },
    "2836": {
        "similarity": 0.9985385537147522,
        "body": "    n = int(input())\n    boys = list(map(int, input().split()))\n    a, b = map(int, input().split())\n\n    max_dist = 0\n    girl_name = None\n\n    for x in range(a, b + 1):\n        if x % 2 == 1:\n            dists = [abs(x - boy) for boy in boys]\n            min_dist = min(dists)\n            if min_dist > max_dist:\n                max_dist = min_dist\n                girl_name = x\n\n    print(girl_name)\n\nfind_girl_name()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9985358715057373,
            0.9982337951660156,
            0.9985319375991821,
            0.9982178211212158,
            0.9958192706108093,
            0.9984984397888184,
            0.9933956861495972,
            0.9981332421302795,
            0.9985314607620239,
            0.9983378052711487,
            0.9977590441703796,
            0.9950127005577087,
            0.9984186291694641,
            0.9954161643981934,
            0.9981409311294556,
            0.9975566864013672,
            0.9984186291694641,
            0.9959025979042053,
            0.9983532428741455,
            0.9985385537147522
        ]
    },
    "1109": {
        "similarity": 0.9953886270523071,
        "body": "    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    period = [0] * k\n    changes = 0\n\n    for i in range(n):\n        period[arr[i] - 1] += 1\n\n    if all(x == period[0] for x in period):\n        print(0)\n        return\n\n    for i in range(k):\n        if period[i] != period[0]:\n            changes += abs(period[i] - period[0])\n\n    print(changes)\n\nmin_changes_to_k_periodic()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913682341575623,
            0.9953886270523071,
            0.9937606453895569,
            0.9953324198722839,
            0.9850694537162781,
            0.9918202757835388,
            0.9947140216827393,
            0.9950121641159058,
            0.9928261637687683,
            0.9892507791519165,
            0.9938527345657349,
            0.9924483895301819,
            0.9945744872093201,
            0.99331134557724,
            0.9922392964363098,
            0.9904457926750183,
            0.9939135313034058,
            0.9948438405990601,
            0.9934699535369873,
            0.9945322275161743
        ]
    },
    "2125": {
        "similarity": 0.9957815408706665,
        "body": "    nm = list(map(int, input().split()))\n    grid = [list(input()) for _ in range(nm[0])]\n\n        if x + 2 >= nm[0] or y + 3 >= nm[1]:\n            return False\n        color_a, color_b, color_c = grid[x][y], grid[x+1][y], grid[x+2][y]\n        return color_a != color_b and color_b != color_c\n\n    count = 0\n    for x in range(nm[0] - 2):\n        for y in range(nm[1] - 2):\n            if is_valid(x, y):\n                count += 1\n    print(count)\n\ncount_flags()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957213401794434,
            0.993851900100708,
            0.9955663084983826,
            0.9943315386772156,
            0.9879006147384644,
            0.9938743114471436,
            0.9957815408706665,
            0.9907200336456299,
            0.9956788420677185,
            0.9913600087165833,
            0.9927330017089844,
            0.9937494397163391,
            0.9932172894477844,
            0.993015706539154,
            0.9933300018310547,
            0.9949472546577454,
            0.9934116005897522,
            0.9950577616691589,
            0.9953071475028992,
            0.9946180582046509
        ]
    },
    "1746": {
        "similarity": 0.9971734881401062,
        "body": "    n = int(input())\n    parent = [0] * (n + 1)\n    children = [[] for _ in range(n + 1)]\n    leaf_count = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        p = int(input()) - 1\n        parent[i] = p\n        children[p].append(i)\n\n    for node in range(1, n + 1):\n        if len(children[node]) == 0:\n            leaf_count[parent[node]] += 1\n\n    spruce = True\n    for node in range(2, n + 1):\n        if len(children[node]) > 0 and leaf_count[node] < 3:\n            spruce = False\n\n    print(\"Yes\" if spruce else \"No\")\n\ncheck_spruce()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961515069007874,
            0.9953249096870422,
            0.9968443512916565,
            0.9960033893585205,
            0.9945119619369507,
            0.9946587085723877,
            0.9952011108398438,
            0.9910919070243835,
            0.9962271451950073,
            0.9959560036659241,
            0.9968754649162292,
            0.9971514344215393,
            0.9957347512245178,
            0.9961537718772888,
            0.9965968728065491,
            0.9966650605201721,
            0.9966400861740112,
            0.9948395490646362,
            0.9971734881401062,
            0.9957889914512634
        ]
    },
    "1294": {
        "similarity": 0.9951236248016357,
        "body": "    buttons = set()\n    for i in range(len(s)):\n        if i == 0 or s[i] != s[i - 1]:\n            buttons.add(s[i])\n    return ''.join(sorted(buttons))\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = find_working_buttons()\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9850279092788696,
            0.9934394359588623,
            0.9951236248016357,
            0.9933969378471375,
            0.9916436076164246,
            0.9918398857116699,
            0.9942467212677002,
            0.9947893023490906,
            0.9947091341018677,
            0.9927700757980347,
            0.9935101270675659,
            0.9944679141044617,
            0.9892548322677612,
            0.9948484301567078,
            0.9948209524154663,
            0.9931228160858154,
            0.9896247386932373,
            0.9919835329055786,
            0.9914185404777527,
            0.994421124458313
        ]
    },
    "1159": {
        "similarity": 0.9968537092208862,
        "body": "    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    total_edges = primes[n - 1]\n    edges = []\n    count = 0\n    for i in range(1, n + 1):\n        degree = primes[count]\n        for j in range(i + 1, n + 1):\n            if count < total_edges:\n                edges.append([i, j])\n                count += 1\n            else:\n                break\n        if count == total_edges:\n            break\n    print(total_edges)\n    for edge in edges:\n        print(edge[0], edge[1])\n\nif __name__ == \"__main__\":\n    n = int(input())\n    generate_graph(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962473511695862,
            0.9958745241165161,
            0.9960142374038696,
            0.9967638254165649,
            0.993530809879303,
            0.9965420961380005,
            0.9958087801933289,
            0.9937189817428589,
            0.9936284422874451,
            0.9948403239250183,
            0.9961909055709839,
            0.9947188496589661,
            0.9943209290504456,
            0.9954006671905518,
            0.9959813952445984,
            0.9967201948165894,
            0.9956915974617004,
            0.9949188232421875,
            0.9955508708953857,
            0.9968537092208862
        ]
    },
    "2025": {
        "similarity": 0.9975259900093079,
        "body": "    for _ in range(int(q)):\n        n = int(input())\n        if n == 1 or n % 2 == 0:  # n is not composite\n            print(-1)\n            continue\n\n        count, sum_ = 0, 2\n        while sum_ <= n:\n            if n >= sum_:\n                count += 1\n                n -= sum_\n            else:\n                break\n            sum_ *= 2\n\n        print(count)\n\nmax_composite_summands(input())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974181652069092,
            0.9967617392539978,
            0.9968296885490417,
            0.9968339800834656,
            0.9966395497322083,
            0.9971705079078674,
            0.9969856142997742,
            0.9974865317344666,
            0.9966849088668823,
            0.9966382384300232,
            0.9970716238021851,
            0.9965833425521851,
            0.9970070719718933,
            0.9963487386703491,
            0.9945271015167236,
            0.9965527057647705,
            0.996606707572937,
            0.9975259900093079,
            0.9973834156990051,
            0.9935840964317322
        ]
    },
    "1429": {
        "similarity": 0.9979453086853027,
        "body": "    n, s = map(str, input().split())\n    n = int(n)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            t = s[i - 1:j]\n            if len(set(t)) == 2:\n                complementary = ''.join(sorted(t, reverse=True))\n                if complementary[::-1] == t:\n                    count += 1\n    print(count)\n\ncount_complementary_substrings()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994904100894928,
            0.9946237206459045,
            0.9972275495529175,
            0.9968801736831665,
            0.9972562193870544,
            0.9978278279304504,
            0.9975234866142273,
            0.9958513975143433,
            0.9964976906776428,
            0.9973554015159607,
            0.9977408051490784,
            0.9965950846672058,
            0.9967488050460815,
            0.9976531863212585,
            0.9965533018112183,
            0.9968100190162659,
            0.9979453086853027,
            0.9965322613716125,
            0.9978930950164795,
            0.9974987506866455
        ]
    },
    "1950": {
        "similarity": 0.9971502423286438,
        "body": "    n = int(input())\n    balls = list(map(int, input().split()))\n    penalty = 0\n    for i in range(n):\n        while balls[i] > 1:\n            penalty += balls[i]\n            k = min(3, len([b for b in balls if b > 0]))\n            balls[i] -= k\n            for j in range(k):\n                balls[j] += 1\n    print(penalty)\n\nmin_penalty()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954795837402344,
            0.9957544207572937,
            0.9953908324241638,
            0.9963480234146118,
            0.995361328125,
            0.9903017282485962,
            0.9961176514625549,
            0.9959833025932312,
            0.9970439076423645,
            0.9964134097099304,
            0.9971502423286438,
            0.9956586956977844,
            0.9953510165214539,
            0.9961296916007996,
            0.9941412210464478,
            0.9940853118896484,
            0.9962366819381714,
            0.9939513802528381,
            0.9966061115264893,
            0.9953610301017761
        ]
    },
    "631": {
        "similarity": 0.9978795647621155,
        "body": "    curr_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum += arr[j] / (j + 1)\n    return \"YES\" if curr_sum == m else \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(check_possible(n, m, arr))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976571798324585,
            0.9974726438522339,
            0.9973941445350647,
            0.9906230568885803,
            0.9977750182151794,
            0.9967232942581177,
            0.9970059990882874,
            0.9890864491462708,
            0.9969990253448486,
            0.9968799948692322,
            0.9978795647621155,
            0.9978129863739014,
            0.9975324869155884,
            0.9973267316818237,
            0.9975179433822632,
            0.9958184957504272,
            0.9973598122596741,
            0.9972889423370361,
            0.9963107109069824,
            0.9976244568824768
        ]
    },
    "2480": {
        "similarity": 0.9975522756576538,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    counts = [0] * k\n    curr_sum = 0\n    result = 0\n    for i in range(n):\n        curr_sum += a[i]\n        counts[curr_sum % k] += 1\n        if curr_sum % k == i + 1:\n            result += counts[i + 1] - 1\n        else:\n            result += counts[curr_sum % k]\n    print(result)\n\ncount_subsequences()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928170442581177,
            0.9971747994422913,
            0.9971984028816223,
            0.9955970644950867,
            0.9974202513694763,
            0.9972347617149353,
            0.9958307147026062,
            0.9970744252204895,
            0.9974313378334045,
            0.9971402883529663,
            0.9969462156295776,
            0.9953593015670776,
            0.9932917356491089,
            0.9963804483413696,
            0.9949129819869995,
            0.9969834089279175,
            0.9974955320358276,
            0.9975522756576538,
            0.9973437786102295,
            0.9975493550300598
        ]
    },
    "2363": {
        "similarity": 0.996067225933075,
        "body": "    n = int(input())\n    operations = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        ops = 0\n        if a <= b:\n            ops += abs(a - b)\n        else:\n            ops += abs(b - a) + (a - b)\n        operations.append(ops)\n    print('\\n'.join(map(str, operations)))\n\ncalculate_operations()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945771098136902,
            0.9940587878227234,
            0.9901652336120605,
            0.996067225933075,
            0.9939595460891724,
            0.9940870404243469,
            0.9918817281723022,
            0.994723379611969,
            0.9956077933311462,
            0.9903995394706726,
            0.9938037395477295,
            0.9939322471618652,
            0.9945641756057739,
            0.994685709476471,
            0.9927495718002319,
            0.995720624923706,
            0.9902028441429138,
            0.995758593082428,
            0.9907031059265137,
            0.9934068918228149
        ]
    },
    "909": {
        "similarity": 0.99410480260849,
        "body": "    a = int(input())\n    b = int(input())\n    c = int(input())\n\n    max_value = 0\n\n    for _ in range(2):\n        val1 = a + b * c if _ == 0 else (a * b) + c\n        val2 = ((a + b) * c) if _ == 0 else (a * (b + c))\n        max_value = max(max_value, val1, val2)\n\n    print(max_value)\n\nmax_expression()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9865959882736206,
            0.9876390695571899,
            0.9891287088394165,
            0.9910353422164917,
            0.9905622601509094,
            0.989374041557312,
            0.9912477731704712,
            0.9940527081489563,
            0.9900521636009216,
            0.9915482401847839,
            0.9928970336914062,
            0.994074285030365,
            0.9905467629432678,
            0.9926832318305969,
            0.9914653301239014,
            0.987085223197937,
            0.9919846057891846,
            0.9926832318305969,
            0.9918974041938782,
            0.99410480260849
        ]
    },
    "154": {
        "similarity": 0.9942402243614197,
        "body": "    MOD = 998244353\n    if n % 2 == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(2, n + 1):\n        a, b = b * ((i - 1) // 2) % MOD, (a + b) % MOD\n    return b\n\nn = int(input())\nprint(count_trees(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934582114219666,
            0.9914755821228027,
            0.9918580651283264,
            0.9773483276367188,
            0.9918959736824036,
            0.9920063018798828,
            0.991815447807312,
            0.9900442361831665,
            0.9935170412063599,
            0.9893739819526672,
            0.9914490580558777,
            0.9835097789764404,
            0.9865056872367859,
            0.9907878041267395,
            0.9893861413002014,
            0.9930814504623413,
            0.9942402243614197,
            0.9939793348312378,
            0.9902052879333496,
            0.9940378069877625
        ]
    },
    "39": {
        "similarity": 0.9973170757293701,
        "body": "    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub != sub[::-1]:\n                max_len = max(max_len, len(sub))\n    return max_len\n\nprint(longest_non_palindrome(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970008730888367,
            0.9968892335891724,
            0.9963158965110779,
            0.9945653676986694,
            0.9970670938491821,
            0.9906600117683411,
            0.9966439604759216,
            0.997151255607605,
            0.9956387877464294,
            0.9953711628913879,
            0.9969384074211121,
            0.9938791990280151,
            0.9932401776313782,
            0.995914876461029,
            0.9953139424324036,
            0.9969795942306519,
            0.9973170757293701,
            0.9960720539093018,
            0.996942937374115,
            0.9940087199211121
        ]
    },
    "1885": {
        "similarity": 0.9976436495780945,
        "body": "    groups = 0\n    for i in range(5, n+1):\n        groups += comb(n, i)\n    return groups\n\nprint(count_groups(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973979592323303,
            0.9972895383834839,
            0.9904832243919373,
            0.9966434836387634,
            0.9975457787513733,
            0.9957210421562195,
            0.9962630271911621,
            0.996343731880188,
            0.9961591362953186,
            0.9912083148956299,
            0.9967669248580933,
            0.9976436495780945,
            0.9947921633720398,
            0.9968279600143433,
            0.9973732829093933,
            0.9972547292709351,
            0.9962366819381714,
            0.9972949028015137,
            0.9976436495780945,
            0.9960897564888
        ]
    },
    "1180": {
        "similarity": 0.9972249269485474,
        "body": "MODULO = 10**9 + 7\n\n    ways = [[0] * (k+2) for _ in range(n+1)]\n    ways[0][0] = 1\n\n    for i in range(1, n+1):\n        digit = int(nums[i-1])\n        for j in range(k+2):\n            if j > 0:\n                ways[i][j] += ways[i-1][j-1]\n                ways[i][j] %= MODULO\n            if j < k+1 and i >= digit:\n                ways[i][j+1] += ways[i-digit][j]\n                ways[i][j+1] %= MODULO\n\n    return sum(ways[n]) % MODULO\n\nn, k = map(int, input().split())\nnums = input()\nprint(calculate_sum(n, k, nums))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943851828575134,
            0.9968717694282532,
            0.9961244463920593,
            0.9937049746513367,
            0.9971241354942322,
            0.9969879984855652,
            0.9956318736076355,
            0.9964877963066101,
            0.993200421333313,
            0.996442973613739,
            0.9957389831542969,
            0.9962891340255737,
            0.9970174431800842,
            0.9972249269485474,
            0.9964467287063599,
            0.9949169158935547,
            0.9967027306556702,
            0.9967736601829529,
            0.9956279397010803,
            0.997117817401886
        ]
    },
    "1856": {
        "similarity": 0.9954891204833984,
        "body": "    n = int(input())\n    passwords = [set(input()) for _ in range(n)]\n    visited = [False] * n\n\n        if visited[i]:\n            return\n        visited[i] = True\n        for j in range(n):\n            if passwords[i] & passwords[j]:\n                dfs(j)\n\n    count = 0\n    for i in range(n):\n        dfs(i)\n        if not visited[i]:\n            count += 1\n\n    print(count)\n\nmin_passwords()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9752916097640991,
            0.9953497052192688,
            0.9945853352546692,
            0.9912707805633545,
            0.9942073822021484,
            0.991435706615448,
            0.9930311441421509,
            0.9947289824485779,
            0.9952677488327026,
            0.995275616645813,
            0.9946104288101196,
            0.9936909079551697,
            0.9918818473815918,
            0.99154132604599,
            0.9952746033668518,
            0.9947121143341064,
            0.995252788066864,
            0.9954891204833984,
            0.9906774163246155,
            0.994983971118927
        ]
    },
    "522": {
        "similarity": 0.9962862730026245,
        "body": "    n, f1, f2, f3, c = map(int, input().split())\n    modulo = 10**9 + 7\n    for x in range(4, n + 1):\n        fn = (c ** (2 * x - 6) * f1 * f2 * f3) % modulo\n        print(fn)\n        f1, f2, f3 = f2, f3, fn",
        "result": "timed out",
        "similarities": [
            0.9953855276107788,
            0.9939133524894714,
            0.9918267130851746,
            0.995715320110321,
            0.9959006905555725,
            0.9936263561248779,
            0.9961076378822327,
            0.9962862730026245,
            0.995941162109375,
            0.9946790337562561,
            0.9941833019256592,
            0.9962531924247742,
            0.9960060119628906,
            0.9953814148902893,
            0.9927418231964111,
            0.9952138662338257,
            0.994668185710907,
            0.9909628033638,
            0.9946700930595398,
            0.9948374032974243
        ]
    },
    "1719": {
        "similarity": 0.9968629479408264,
        "body": "    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        dp[i] = (dp[i - 1] * 4) % MOD\n        if i >= 3:\n            dp[i] -= (dp[i - 3] + dp[i - 2] + dp[i - 1]) % MOD\n\n    return dp[n]\n\nimport sys\nn = int(sys.stdin.readline())\nprint(count_strings(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964190125465393,
            0.9964922666549683,
            0.9943094849586487,
            0.9959536194801331,
            0.9958766102790833,
            0.9930591583251953,
            0.9958205223083496,
            0.9943432211875916,
            0.9957939982414246,
            0.9964501261711121,
            0.9965513348579407,
            0.9962750673294067,
            0.9931482076644897,
            0.9923434853553772,
            0.9958269000053406,
            0.9945144653320312,
            0.9968629479408264,
            0.9964256286621094,
            0.9957879781723022,
            0.9952654838562012
        ]
    },
    "1842": {
        "similarity": 0.9964021444320679,
        "body": "import math\n\na, b, c = map(int, input().split())\n\ndiscriminant = b * b - 4 * a * c\n\nif discriminant < 0:\n    raise ValueError(\"No real roots\")\n\nsqrt_discriminant = math.sqrt(discriminant)\n\nroot1 = (-b + sqrt_discriminant) / (2 * a)\nroot2 = (-b - sqrt_discriminant) / (2 * a)\n\nprint(max(root1, root2))\nprint(min(root1, root2))",
        "result": "passed",
        "similarities": [
            0.9962595701217651,
            0.9964021444320679,
            0.9961714744567871,
            0.9909494519233704,
            0.9951914548873901,
            0.9963521361351013,
            0.9962348937988281,
            0.9956883192062378,
            0.9943986535072327,
            0.9941011667251587,
            0.9940218925476074,
            0.994443416595459,
            0.9962338805198669,
            0.9941808581352234,
            0.9962348937988281,
            0.9956899881362915,
            0.9946085214614868,
            0.9944949746131897,
            0.9946085214614868,
            0.9937400817871094
        ]
    },
    "806": {
        "similarity": 0.9959801435470581,
        "body": "    MOD = 10**9 + 7\n    if n == 0 or (r - l + 1) % 3 != 0:\n        return 0\n\n    ways = [0] * (r - l + 2)\n    ways[0] = 1\n\n    for _ in range(1, n+1):\n        for i in range(l, r+2):\n            if i <= r:\n                ways[i] += ways[i-1]\n                ways[i] %= MOD\n            else:\n                break\n\n    return ways[r-l+1]\n\nprint(count_arrays(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956279397010803,
            0.9923064708709717,
            0.9949801564216614,
            0.9945763349533081,
            0.9937354922294617,
            0.9955416321754456,
            0.9939759969711304,
            0.9931426048278809,
            0.9893204569816589,
            0.9943719506263733,
            0.9944648742675781,
            0.9937860369682312,
            0.9924101829528809,
            0.9958114624023438,
            0.9959801435470581,
            0.9935551881790161,
            0.9949511289596558,
            0.9959070086479187,
            0.9935263395309448,
            0.9925817251205444
        ]
    },
    "365": {
        "similarity": 0.9949729442596436,
        "body": "    a = list(map(int, input().split()))\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > x:\n            return \"NO\"\n        elif current_sum == x and i < n - 1:\n            return \"NO\"\n    return \"YES\"\n\nprint(encode_crossword(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949729442596436,
            0.994543194770813,
            0.9928804039955139,
            0.9922286868095398,
            0.9948344826698303,
            0.9916978478431702,
            0.9931801557540894,
            0.9940974712371826,
            0.9901792407035828,
            0.9925611615180969,
            0.9930897951126099,
            0.9939113259315491,
            0.9900079369544983,
            0.9914844036102295,
            0.9906765818595886,
            0.9873687624931335,
            0.9940223693847656,
            0.9928305745124817,
            0.9876513481140137,
            0.992179274559021
        ]
    },
    "1158": {
        "similarity": 0.9969005584716797,
        "body": "    n, k = map(int, input().split())\n    utensils = list(map(int, input().split()))\n    counts = {}\n    for u in utensils:\n        counts[u] = counts.get(u, 0) + 1\n\n    stolen = 0\n    for u in range(1, 101):\n        if u not in counts or counts[u] < k:\n            stolen += min(k, counts.get(u, 0))\n\n    print(stolen)\n\nmin_stolen_utensils()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9909848570823669,
            0.9969005584716797,
            0.9966310262680054,
            0.9934726357460022,
            0.9957981109619141,
            0.9918033480644226,
            0.9952086210250854,
            0.9936925172805786,
            0.9956666231155396,
            0.9954304099082947,
            0.9943045377731323,
            0.9968053698539734,
            0.9949883222579956,
            0.9968401193618774,
            0.9968229532241821,
            0.9958769083023071,
            0.9963518381118774,
            0.9968267679214478,
            0.9951199889183044,
            0.9964398741722107
        ]
    },
    "33": {
        "similarity": 0.9969316124916077,
        "body": "    a1, b1, a2, b2, l, r = map(int, input().split())\n    count = 0\n    for x in range(l, r + 1):\n        k = (x - b1) / a1 if a1 else None\n        l = (x - b2) / a2 if a2 else None\n        if k is not None and l is not None and k == l and k >= 0:\n            count += 1\n    print(count)\n\nfind_count()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969109892845154,
            0.9951581358909607,
            0.9951745867729187,
            0.9944842457771301,
            0.9961599111557007,
            0.9944444298744202,
            0.9947782754898071,
            0.9956512451171875,
            0.9958490133285522,
            0.9964228272438049,
            0.9965645670890808,
            0.9955366849899292,
            0.9955247640609741,
            0.9941512942314148,
            0.9965423941612244,
            0.9953357577323914,
            0.9954206347465515,
            0.9962264895439148,
            0.9969316124916077,
            0.9963111877441406
        ]
    },
    "2498": {
        "similarity": 0.9979659914970398,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for x in range(1, m + 1):\n        if all(x % a_k * 2 == a_k for a_k in a):\n            count += 1\n    print(count)\n\nfind_semi_common_multiples()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979345202445984,
            0.9965661764144897,
            0.9979659914970398,
            0.9978188276290894,
            0.997353732585907,
            0.9971352815628052,
            0.9979282021522522,
            0.9969008564949036,
            0.9971472024917603,
            0.990972638130188,
            0.9973184466362,
            0.9949396848678589,
            0.9974344968795776,
            0.9970516562461853,
            0.9969011545181274,
            0.9978924989700317,
            0.9979493021965027,
            0.9978766441345215,
            0.9962776899337769,
            0.996933102607727
        ]
    },
    "2309": {
        "similarity": 0.9973330497741699,
        "body": "    vowels = set(\"aeiou\")\n    return sum(1 for char in word if char in vowels)\n\n    words.sort()\n    lyrics_count = 0\n    used_words = set()\n\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j]:\n                continue\n\n            vowel_counts = count_vowels(words[i]), count_vowels(words[j])\n            last_vowel_i = next((char for char in reversed(words[i]) if char in \"aeiou\"), None)\n            last_vowel_j = next((char for char in reversed(words[j]) if char in \"aeiou\"), None)\n\n            if vowel_counts == (vowel_counts[1], vowel_counts[0]) and last_vowel_i == last_vowel_j:\n                lyrics_count += 1\n                used_words.add(words[i])\n                used_words.add(words[j])\n\n    return lyrics_count\n\n    n = int(input())\n    words = [input() for _ in range(n)]\n    result = find_lyrics(words)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968468546867371,
            0.9951279163360596,
            0.9968621134757996,
            0.9958710074424744,
            0.9955636262893677,
            0.9963918924331665,
            0.9961944222450256,
            0.9973330497741699,
            0.9969171285629272,
            0.9970808625221252,
            0.9964055418968201,
            0.9951475262641907,
            0.9970924258232117,
            0.9961636066436768,
            0.9964116811752319,
            0.9970341920852661,
            0.9965972900390625,
            0.9964463114738464,
            0.9971761107444763,
            0.9941999316215515
        ]
    },
    "1326": {
        "similarity": 0.9971460103988647,
        "body": "    total = 0\n    for k in range(1, n+1):\n        divisor_count = 0\n        for i in range(1, int(k ** 0.5) + 1):\n            if k % i == 0:\n                divisor_count += 1\n                if i * i != k:\n                    divisor_count += 1\n        total += k * divisor_count\n    print(total)\n\nsum_divisors(int(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954338073730469,
            0.9948192238807678,
            0.9959128499031067,
            0.9965034127235413,
            0.9970375895500183,
            0.9970042705535889,
            0.9966267347335815,
            0.9967809915542603,
            0.9958869814872742,
            0.9967777132987976,
            0.9968135356903076,
            0.995464026927948,
            0.9970474243164062,
            0.9950475096702576,
            0.9968268871307373,
            0.9967771768569946,
            0.9971460103988647,
            0.9944978356361389,
            0.9963347911834717,
            0.9970692992210388
        ]
    },
    "2950": {
        "similarity": 0.9980267286300659,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    charges = 0\n    max_height = max(heights)\n    for i in range(1, max_height + 1):\n        if all(h >= i for h in heights):\n            break\n        charges += 1\n    print(charges)\n\nmin_charges()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979031085968018,
            0.9958666563034058,
            0.9979755878448486,
            0.9969382286071777,
            0.9979977011680603,
            0.997633159160614,
            0.9980267286300659,
            0.9979326128959656,
            0.9948542714118958,
            0.9979065656661987,
            0.9979031085968018,
            0.9944107532501221,
            0.9945113658905029,
            0.9972444176673889,
            0.9979669451713562,
            0.9966461062431335,
            0.9952049255371094,
            0.9947021007537842,
            0.9979761838912964,
            0.9967778921127319
        ]
    },
    "1983": {
        "similarity": 0.9976080060005188,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1]*n\n    max_len = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n        max_len = max(max_len, dp[i])\n\n    print(max_len)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953168630599976,
            0.9976080060005188,
            0.997231125831604,
            0.9964319467544556,
            0.9961405396461487,
            0.9961939454078674,
            0.9953168630599976,
            0.9961245656013489,
            0.9953169822692871,
            0.9953169822692871,
            0.9953169822692871,
            0.9973649382591248,
            0.9953168630599976,
            0.9958648681640625,
            0.9970158934593201,
            0.997218668460846,
            0.9961685538291931,
            0.9953669309616089,
            0.9953280091285706,
            0.9969766736030579
        ]
    },
    "1767": {
        "similarity": 0.9974421262741089,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    max_sum = 0\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            f_a = sum(a[i] | a[j] for i in range(l - 1) for j in range(i + 1, r))\n            f_b = sum(b[i] | b[j] for i in range(l - 1) for j in range(i + 1, r))\n            max_sum = max(max_sum, f_a + f_b)\n\n    print(max_sum)\n\ncalculate_max_sum()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971922039985657,
            0.9960662722587585,
            0.9957935810089111,
            0.996274471282959,
            0.9961321949958801,
            0.9971449971199036,
            0.9958300590515137,
            0.9952264428138733,
            0.995591402053833,
            0.996132493019104,
            0.9935581684112549,
            0.9971776604652405,
            0.9974421262741089,
            0.9970566630363464,
            0.9963600635528564,
            0.9972192049026489,
            0.9974123239517212,
            0.9968258738517761,
            0.9947023987770081,
            0.9966467618942261
        ]
    },
    "2382": {
        "similarity": 0.9970898032188416,
        "body": "import sys\n\n    n = int(input())\n    s = list(map(int, input().split()))\n    slime = [0] * (2 ** n)\n\n        if i >= 2 ** n:\n            return False\n        slime[i] = s[0]\n        return True\n\n    for i in range(1, len(s)):\n        for j in range(i):\n            if slime[j] > s[i]:\n                break\n        else:\n            if not reproduce(i):\n                print('No')\n                sys.exit()\n            s.pop(0)\n\n    print('Yes')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966177940368652,
            0.9963315725326538,
            0.9965153932571411,
            0.9955818057060242,
            0.9942142367362976,
            0.9966661334037781,
            0.9960422515869141,
            0.9962740540504456,
            0.9963722229003906,
            0.9970898032188416,
            0.9966316223144531,
            0.995461106300354,
            0.996374249458313,
            0.9970074892044067,
            0.9962467551231384,
            0.996697187423706,
            0.9968811869621277,
            0.9942378997802734,
            0.9933901429176331,
            0.9955869913101196
        ]
    },
    "3907": {
        "similarity": 0.9971094727516174,
        "body": "    n, m = map(int, input().split())\n    coupons = []\n    for _ in range(m):\n        q, w = map(int, input().split())\n        coupons.append((q, w))\n    coupons.sort()\n    money = 0\n    for i in range(n):\n        if i < len(coupons) and coupons[i][1] > 0:\n            money += coupons[i][1]\n            coupons[i] = (coupons[i][0], coupons[i][1] - 1)\n        else:\n            return \"Invalid input\"\n    print(money)\n\nmax_money()",
        "result": "failed: testcase 0",
        "similarities": [
            0.996900737285614,
            0.9950884580612183,
            0.9954437613487244,
            0.996425211429596,
            0.9956886172294617,
            0.9945038557052612,
            0.9964631795883179,
            0.9951057434082031,
            0.995715320110321,
            0.9971094727516174,
            0.995935320854187,
            0.9939348101615906,
            0.9964304566383362,
            0.9958733320236206,
            0.9967701435089111,
            0.9964196085929871,
            0.991585373878479,
            0.9952033162117004,
            0.9963381886482239,
            0.9957650899887085
        ]
    },
    "3676": {
        "similarity": 0.9944698810577393,
        "body": "    r, c = map(int, input().split())\n    ways = 0\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1:\n                ways += min(j + 1, c - j)\n            elif j == 0 or j == c - 1:\n                ways += min(i + 1, r - i)\n    print(ways)\n\ncount_polygons()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907051920890808,
            0.9927574992179871,
            0.9842814207077026,
            0.9940131306648254,
            0.9908888936042786,
            0.9941006898880005,
            0.9936447143554688,
            0.9940740466117859,
            0.9944698810577393,
            0.9877570271492004,
            0.9934701323509216,
            0.9935958385467529,
            0.9943121075630188,
            0.9943609833717346,
            0.9887731671333313,
            0.9882840514183044,
            0.9943931102752686,
            0.9811704754829407,
            0.9925209879875183,
            0.9941341280937195
        ]
    },
    "3293": {
        "similarity": 0.9976491332054138,
        "body": "    n = int(input())\n    snacks = []\n    for _ in range(n):\n        f, p, m, s = map(int, input().split())\n        snacks.append((f - 1, p, m))\n\n    dp = [0] * n\n    max_gain = 0\n\n    for i in range(n):\n        if i == snacks[i][0]:\n            profit = snacks[i][2] - snacks[i][1]\n        else:\n            profit = snacks[i][1]\n\n        if i > 0 and profit < dp[i-1]:\n            profit += dp[i-1]\n\n        dp[i] = max(dp[i], profit)\n        max_gain = max(max_gain, dp[i])\n\n    print(max_gain)\n\nmax_profit()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968519806861877,
            0.9942064881324768,
            0.9946210980415344,
            0.9968681335449219,
            0.9971315264701843,
            0.996752917766571,
            0.9976491332054138,
            0.995198130607605,
            0.9974840879440308,
            0.9942035675048828,
            0.9973235130310059,
            0.9944218993186951,
            0.9966115355491638,
            0.9975967407226562,
            0.9931321740150452,
            0.9967595338821411,
            0.996956467628479,
            0.9969950318336487,
            0.9957005381584167,
            0.9935641288757324
        ]
    },
    "3587": {
        "similarity": 0.9959279298782349,
        "body": "    n = int(input())\n    taboo = set()\n    for _ in range(n):\n        s = input()\n        taboo.add(s)\n\n    clue = ''\n    while True:\n        clue += '1'\n        if any(clue[i:i+len(t)] == t for t in taboo):\n            break\n\n    print(-1 if len(clue) > 200000 else clue)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916396141052246,
            0.9945825338363647,
            0.9950003623962402,
            0.9950706958770752,
            0.9920099377632141,
            0.9930412769317627,
            0.9914597868919373,
            0.994089663028717,
            0.9959279298782349,
            0.995475172996521,
            0.995163083076477,
            0.9947477579116821,
            0.9918572306632996,
            0.9955143332481384,
            0.9940639138221741,
            0.9927363991737366,
            0.9949023723602295,
            0.9932542443275452,
            0.9939418435096741,
            0.9883990287780762
        ]
    },
    "3530": {
        "similarity": 0.9974914193153381,
        "body": "    n = int(input())\n    coasters = []\n    for _ in range(n):\n        a, b, t = map(int, input().split())\n        coasters.append((a, b, t))\n\n    q = int(input())\n    for _ in range(q):\n        T = int(input())\n\n        total_fun = 0\n        for i, (a, b, t) in enumerate(coasters):\n            k = T // t + 1\n            if f(i, k) <= 0:\n                continue\n            total_fun += f(i, k)\n\n        print(total_fun)\n\n    a_i, b_i, _ = coasters[i]\n    return a_i - (k-1)**2 * b_i\n\nmax_fun()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973747134208679,
            0.9962587952613831,
            0.9974914193153381,
            0.9970982074737549,
            0.9974269866943359,
            0.9933282136917114,
            0.9971040487289429,
            0.9931743144989014,
            0.9968705773353577,
            0.996995210647583,
            0.9957929849624634,
            0.9955306053161621,
            0.9949440360069275,
            0.996784508228302,
            0.9965868592262268,
            0.9973461627960205,
            0.9968581199645996,
            0.9966405630111694,
            0.9963018298149109,
            0.9969431161880493
        ]
    },
    "3900": {
        "similarity": 0.9974429607391357,
        "body": "    n, p = map(int, input().split())\n    suspects = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        x, y = map(int, input().split())\n        suspects[x].append(y)\n        suspects[y].append(x)\n\n        if count >= p:\n            return 1\n        total = 0\n        for child in suspects[node]:\n            if child != parent:\n                total += dfs(child, node, count + 1)\n        return total\n\n    return sum(dfs(i, -1, 0) for i in range(1, n + 1)) // 2\n\ncount_suspect_sets()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970113039016724,
            0.9964096546173096,
            0.9970377683639526,
            0.9963738322257996,
            0.9962479472160339,
            0.9962743520736694,
            0.9958839416503906,
            0.99576336145401,
            0.9931031465530396,
            0.9958913922309875,
            0.9937193989753723,
            0.9972550272941589,
            0.9974429607391357,
            0.9969941973686218,
            0.9968622326850891,
            0.9969000816345215,
            0.9973680377006531,
            0.9958174824714661,
            0.9967491030693054,
            0.9953483939170837
        ]
    },
    "3996": {
        "similarity": 0.9959698915481567,
        "body": "    MOD = 10**9 + 7\n    k = int(input())\n    arr = list(map(int, input().split()))\n    n = 1\n    for i in arr:\n        n *= i\n    p = n % MOD\n    q = pow(3, n, MOD) - 2 * pow(2, n, MOD)\n    gcd_p_q = math.gcd(p, q)\n    p //= gcd_p_q\n    q //= gcd_p_q\n    print(f\"{p} {q}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956400990486145,
            0.9951330423355103,
            0.9935910105705261,
            0.9958924055099487,
            0.9959698915481567,
            0.9956482648849487,
            0.9910169243812561,
            0.9884159564971924,
            0.990482747554779,
            0.9948750734329224,
            0.9949962496757507,
            0.9943849444389343,
            0.9942257404327393,
            0.9937840700149536,
            0.9957247376441956,
            0.994260311126709,
            0.9955182671546936,
            0.9951483011245728,
            0.9958528280258179,
            0.9954286813735962
        ]
    },
    "3276": {
        "similarity": 0.996071994304657,
        "body": "    n, m = map(int, input().split())\n    art = [input() for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if art[i][j] != 'W':\n                break\n        else:\n            continue\n        break\n\n    else:\n        print(\"YES\")\n        return\n\n    for i in range(n - 2):\n        for j in range(m - 2):\n            stamp = [art[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if all(c == 'W' or (c != 'W' and stamp.count(c) >= 1 and stamp.count('W') <= 2) for c in set(stamp)):\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\ncan_reproduce_art()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994462251663208,
            0.9948965311050415,
            0.9950914978981018,
            0.99431312084198,
            0.996071994304657,
            0.9933063983917236,
            0.9951286315917969,
            0.9925559163093567,
            0.9948381185531616,
            0.9959385395050049,
            0.9945580363273621,
            0.9913749694824219,
            0.9919847249984741,
            0.9918556213378906,
            0.9952604174613953,
            0.996019184589386,
            0.9946399331092834,
            0.990260899066925,
            0.9943770170211792,
            0.9933820962905884
        ]
    },
    "3834": {
        "similarity": 0.9969731569290161,
        "body": "    n, m, k = map(int, input().split())\n    grid = [[int(x) for x in input().split()] for _ in range(n)]\n\n        if i < 0 or j < 0 or i >= n or j >= m:\n            return\n        if grid[i][j] == -1:\n            return\n        if grid[i][j] != (grid[0][0] if grid[0][0] else grid[0][1]):\n            return\n        grid[i][j] = -1\n        dfs(i + 1, j)\n        dfs(i - 1, j)\n        dfs(i, j + 1)\n        dfs(i, j - 1)\n\n    changes = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != -1:\n                dfs(i, j)\n                changes += 1\n\n    return min(changes, k) if changes <= k else -1\n\nprint(find_min_changes())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903712272644043,
            0.9965530037879944,
            0.9946940541267395,
            0.9960023164749146,
            0.9961666464805603,
            0.9968686699867249,
            0.9966257810592651,
            0.9957966208457947,
            0.9969731569290161,
            0.9966561198234558,
            0.9954144358634949,
            0.9967441558837891,
            0.9964591860771179,
            0.9954476952552795,
            0.9894660115242004,
            0.9966658353805542,
            0.9954502582550049,
            0.9952192902565002,
            0.9964677095413208,
            0.9951652884483337
        ]
    },
    "3012": {
        "similarity": 0.9952855706214905,
        "body": "    mod = 10**9 + 7\n    total_players = a11 + a12 + a21 + a22\n\n        if i == n:\n            return 1\n        elif moves >= 3 and (i // 3) % 2 != 0:\n            return 0\n        elif j < total_players:\n            count = 0\n            for k in range(total_players):\n                if j != k and k not in [i%total_players, i//total_players]:\n                    count += dp(i+1, k, moves+1)\n                    count %= mod\n            return count\n        else:\n            return 0\n\n    return dp(0, -1, 0)\n\na11, a12, a21, a22, n = map(int, input().split())\nprint(count_sequences(a11, a12, a21, a22, n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945618510246277,
            0.9933772683143616,
            0.9923725128173828,
            0.9942006468772888,
            0.9943923950195312,
            0.9941080808639526,
            0.9925689697265625,
            0.986674964427948,
            0.9939294457435608,
            0.994592547416687,
            0.9944520592689514,
            0.9931048154830933,
            0.994964599609375,
            0.9922818541526794,
            0.993971586227417,
            0.9942510724067688,
            0.9943193197250366,
            0.994602620601654,
            0.9952855706214905,
            0.9940845966339111
        ]
    },
    "3745": {
        "similarity": 0.9969552755355835,
        "body": "    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    s = ['a'] * (n + 1)\n    valid = True\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j != i and 'a' <= s[i] <= 'c' and 'a' <= s[j] <= 'c':\n                if (s[i] == s[j]) or abs(ord(s[i]) - ord(s[j])) == 1:\n                    continue\n                else:\n                    valid = False\n                    break\n\n    print(\"Yes\" if valid else \"No\")\n    if valid:\n        print(''.join(s[1:]))\n\nprocess_graph()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967442750930786,
            0.9945357441902161,
            0.9947041869163513,
            0.9965962767601013,
            0.9939340353012085,
            0.9950069785118103,
            0.9969552755355835,
            0.9948874115943909,
            0.9962182641029358,
            0.9961557984352112,
            0.9938960075378418,
            0.996909499168396,
            0.9963422417640686,
            0.9945612549781799,
            0.9942479729652405,
            0.9960749745368958,
            0.9946522116661072,
            0.9962614178657532,
            0.9941943287849426,
            0.9958301186561584
        ]
    },
    "3028": {
        "similarity": 0.9978299736976624,
        "body": "    board = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        board.append(row)\n\n    moves = []\n    for i in range(1, p * n * m + 1):\n        found_move = False\n        for j in range(n):\n            for k in range(m):\n                if board[j][k] < p and sum(board[x][k] == p - 1 for x in range(n)) == n:\n                    board[j][k] += 1\n                    moves.append((j + 1, k + 1))\n                    found_move = True\n                    break\n            if found_move:\n                break\n\n        if not found_move:\n            return -1\n\n    print(len(moves))\n    for move in moves:\n        print(*move)\n\nprimonimo_game(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969910979270935,
            0.997178852558136,
            0.9964652061462402,
            0.9975011944770813,
            0.9965729117393494,
            0.9976045489311218,
            0.9974145293235779,
            0.9966413378715515,
            0.9978299736976624,
            0.9972695112228394,
            0.9970329999923706,
            0.9969853162765503,
            0.9857264161109924,
            0.9978204369544983,
            0.9974764585494995,
            0.9975250959396362,
            0.9975941181182861,
            0.996927797794342,
            0.9976148009300232,
            0.9974530935287476
        ]
    },
    "3196": {
        "similarity": 0.9963675141334534,
        "body": "    n, m = map(int, input().split())\n    routes = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        routes[a].append(b)\n        routes[b].append(a)\n\n    visited = [False] * (n + 1)\n        if town == n:\n            return 1\n        elif len(routes[town]) == 0 or visited[town]:\n            return 0\n\n        visited[town] = True\n        count = 0\n        for neighbor in routes[town]:\n            count += dfs(neighbor, steps + 1)\n        visited[town] = False\n        return count\n\n    result = dfs(1, 0)\n    if result == float('inf'):\n        print(\"inf\")\n    else:\n        print(result % 10**9)\n\nget_route_count()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959942698478699,
            0.9952791333198547,
            0.9913614988327026,
            0.9793375134468079,
            0.990345299243927,
            0.9955554604530334,
            0.9960784912109375,
            0.9963675141334534,
            0.9961550831794739,
            0.9924213290214539,
            0.995940089225769,
            0.9944295287132263,
            0.9946180582046509,
            0.9961600303649902,
            0.9955641031265259,
            0.9958657026290894,
            0.9953266978263855,
            0.9959577322006226,
            0.9961640238761902,
            0.9954013824462891
        ]
    },
    "3405": {
        "similarity": 0.996608316898346,
        "body": "    results = []\n    for num in range(1, 10**8):\n        str_num = str(num)\n        if int(str_num[1:]) * x == int(str_num[-1] + str_num[:-1]):\n            results.append(num)\n    return results\n\ninput_x = float(input())\nresults = generate_numbers(input_x)\n\nif results:\n    for result in results:\n        print(result)\nelse:\n    print(\"No solution\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925047159194946,
            0.9912537336349487,
            0.9951607584953308,
            0.9941200613975525,
            0.9951073527336121,
            0.9950471520423889,
            0.9959934949874878,
            0.996531069278717,
            0.9928900003433228,
            0.993191659450531,
            0.9947079420089722,
            0.9948112964630127,
            0.9955259561538696,
            0.9945989847183228,
            0.9955309629440308,
            0.9896906614303589,
            0.996608316898346,
            0.9961994886398315,
            0.9948312640190125,
            0.9948818683624268
        ]
    },
    "3126": {
        "similarity": 0.9978272318840027,
        "body": "    n, t = map(int, input().split())\n    positions = list(map(int, input().split()))\n    changes = int(input())\n\n    for _ in range(changes):\n        operation = input()[0]\n\n        if operation == '+':\n            a = int(input())\n            positions.append(a)\n        elif operation == '-':\n            a = int(input())\n            positions.remove(a)\n        else:\n            a = int(input())\n            t = a\n\n    jumps = 0\n    for pos in sorted(positions):\n        jumps += abs(t - pos) + 1\n\n    print(jumps)\n\nchoreograph_dance()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974073171615601,
            0.9966063499450684,
            0.9936985373497009,
            0.9948959350585938,
            0.9969577789306641,
            0.9965797066688538,
            0.9972604513168335,
            0.9961581826210022,
            0.9965808391571045,
            0.9970120787620544,
            0.9972831606864929,
            0.9965221881866455,
            0.9974756836891174,
            0.9954208731651306,
            0.9978272318840027,
            0.9966086149215698,
            0.997532069683075,
            0.9976876974105835,
            0.9969316124916077,
            0.9973417520523071
        ]
    },
    "3279": {
        "similarity": 0.9968118071556091,
        "body": "    n = int(input())\n    rows, cols = [], []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        if sum(row) != 0:\n            rows.append(row)\n    for _ in range(n):\n        col = list(map(int, input().split()))\n        if sum(col) != 0:\n            cols.append(col)\n\n    grid = [['0' for _ in range(n + 1)] for __ in range(n)]\n        nonlocal grid\n        for i, group_size in enumerate(groups):\n            for j in range(group_size):\n                if direction == 'row':\n                    grid[i][j] = '1'\n                else:\n                    grid[j][i] = '1'\n\n    for row_index, row_groups in enumerate(rows):\n        mark_bars(row_groups, 'row')\n    for col_index, col_groups in enumerate(cols):\n        mark_bars(col_groups, 'col')\n\n    print('\\n'.join([''.join(row) for row in grid]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963222146034241,
            0.9962735772132874,
            0.9967077374458313,
            0.9944137930870056,
            0.9958691000938416,
            0.9955235719680786,
            0.9968118071556091,
            0.9921627044677734,
            0.9966254234313965,
            0.9936017394065857,
            0.9960652589797974,
            0.9967737793922424,
            0.995791494846344,
            0.9921808838844299,
            0.9955626130104065,
            0.9964935183525085,
            0.9945309162139893,
            0.9967591166496277,
            0.996107816696167,
            0.9958882927894592
        ]
    },
    "3599": {
        "similarity": 0.9966145753860474,
        "body": "    t, n = map(int, input().split())\n    breaks = list(map(int, input().split()))\n    schedule = [0] * n\n    for i in range(n):\n        while True:\n            if len(schedule) >= 2 and sum(schedule[-2:]) + breaks[i] > t:\n                schedule[-1] += breaks[i]\n            else:\n                schedule.append(breaks[i])\n                break\n    print(*schedule)\n\nschedule_breaks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994796633720398,
            0.9946814179420471,
            0.9950783252716064,
            0.9956787824630737,
            0.9943913817405701,
            0.9940133690834045,
            0.9947925209999084,
            0.9943197965621948,
            0.9956713318824768,
            0.9956145286560059,
            0.9956426024436951,
            0.9938169717788696,
            0.9952695965766907,
            0.9940750002861023,
            0.9952326416969299,
            0.9963607788085938,
            0.9963066577911377,
            0.9966145753860474,
            0.9928315877914429,
            0.9932348132133484
        ]
    },
    "3687": {
        "similarity": 0.9973251223564148,
        "body": "    n, q, s = map(int, input().split())\n    queues = list(map(int, input().split()))\n    sizes = list(map(int, input().split()))\n    windows = []\n    for _ in range(n):\n        d, *a = map(int, input().split())\n        windows.append((d, a))\n\n    data_queues = {i: [] for i in range(1, q + 1)}\n    for sensor, queue in enumerate(queues, start=1):\n        data_queues[queue].append(sensor)\n\n    possible = True\n    for d, data in windows:\n        for sensor in data_queues.keys():\n            if len(data_queues[sensor]) > sizes[sensor - 1]:\n                print(\"impossible\")\n                return\n            while data_queues[sensor] and data >= a[data_queues[sensor][0]]:\n                data -= a[data_queues[sensor][0]]\n                del data_queues[sensor][0]\n        if data > 0:\n            possible = False\n\n    print(\"possible\" if possible else \"impossible\")\n\ncan_transfer_data()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971587657928467,
            0.9965336322784424,
            0.996698260307312,
            0.9941380023956299,
            0.994873583316803,
            0.9948419332504272,
            0.9916507601737976,
            0.9969500303268433,
            0.9967407584190369,
            0.9959204792976379,
            0.996505856513977,
            0.9936652183532715,
            0.9937544465065002,
            0.9968022108078003,
            0.9973251223564148,
            0.9972154498100281,
            0.9963645935058594,
            0.9969579577445984,
            0.9970753192901611,
            0.994160532951355
        ]
    },
    "3864": {
        "similarity": 0.9942064881324768,
        "body": "mod = 998244353\n\nn = int(input())\n\n    res = []\n    for s in range(1, n + 1):\n        exp = (0 + 1 + 0 + 2 + 1 + 3 + 2 + 3) / 8\n        r = (exp * pow(2, mod - 2, mod)) % mod\n        res.append(r)\n    return res\n\nexpectations = expect_black_stones(n)\nfor expectation in expectations:\n    print(expectation)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935101866722107,
            0.9931656718254089,
            0.9926682710647583,
            0.9900546669960022,
            0.9922128319740295,
            0.9877089262008667,
            0.9939314126968384,
            0.9894900918006897,
            0.9925834536552429,
            0.9904676675796509,
            0.9942064881324768,
            0.9935745596885681,
            0.9818506836891174,
            0.9935986399650574,
            0.9837668538093567,
            0.9846639037132263,
            0.9938427805900574,
            0.9931191205978394,
            0.9926335215568542,
            0.9887303709983826
        ]
    },
    "3504": {
        "similarity": 0.9965564608573914,
        "body": "    d, s = map(int, input().split())\n    droplets = [tuple(map(int, input().split())) for _ in range(d)]\n    sensors = sorted([tuple(map(int, input().split())) for _ in range(s)], key=lambda x: (x[2], x[0]))\n\n    disintegration_y = []\n    for droplet_x, droplet_y in droplets:\n        for sensor_x1, sensor_x2, sensor_y in sensors:\n            if sensor_x1 <= droplet_x <= sensor_x2 and sensor_y == droplet_y:\n                disintegration_y.append(sensor_y)\n                break\n        else:\n            disintegration_y.append(0)\n\n    print('\\n'.join(map(str, disintegration_y)))\n\nif __name__ == '__main__':\n    find_antimatter_disintegration()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953934550285339,
            0.9958721995353699,
            0.9938031435012817,
            0.9942570924758911,
            0.9956249594688416,
            0.9925938844680786,
            0.9963039755821228,
            0.9947850108146667,
            0.9960184693336487,
            0.9960082173347473,
            0.9932395815849304,
            0.9965564608573914,
            0.9952886700630188,
            0.9964712858200073,
            0.9964613914489746,
            0.9932087659835815,
            0.9964001178741455,
            0.9963786602020264,
            0.9962337017059326,
            0.9884442090988159
        ]
    },
    "3451": {
        "similarity": 0.9946768879890442,
        "body": "    n, k = map(int, input().split())\n    seq = input()\n    cost = [int(input()) for _ in range(n)]\n    balance, dp, ans = 0, [float('inf')] * (n + 1), float('inf')\n    for i in range(n):\n        if seq[i] == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance >= -k and i <= k:\n            dp[i] = min(dp[i], cost[i])\n            ans = min(ans, dp[i])\n    print(ans if ans < float('inf') else '?')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9891802072525024,
            0.9843839406967163,
            0.9946768879890442,
            0.9921227693557739,
            0.9904536008834839,
            0.994551420211792,
            0.9905263185501099,
            0.991549551486969,
            0.9912477135658264,
            0.9941026568412781,
            0.9896436333656311,
            0.9936169385910034,
            0.9915036559104919,
            0.9910970330238342,
            0.9943401217460632,
            0.9924893975257874,
            0.9907477498054504,
            0.9911602735519409,
            0.9921948313713074,
            0.9921018481254578
        ]
    },
    "3156": {
        "similarity": 0.9972221851348877,
        "body": "n = int(input())\nk = int(input())\n\nstores = {}\nfor _ in range(k):\n    i, s = map(str, input().split())\n    i = int(i)\n    if i not in stores:\n        stores[i] = []\n    stores[i].append(s)\n\nm = int(input())\nitems_bought = []\nfor _ in range(m):\n    items_bought.append(input())\n\ncurrent_store = 0\nprevious_item = None\n\nfor item in items_bought:\n    found = False\n    for i, s in enumerate(stores[current_store]):\n        if s == item:\n            found = True\n            previous_item = item\n            current_store += 1\n            break\n    if not found:\n        print(\"impossible\")\n        break\n\nif current_store < n:\n    print(\"unique\" if previous_item is None else \"ambiguous\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963783621788025,
            0.9946120381355286,
            0.9966012239456177,
            0.9964882731437683,
            0.9967896342277527,
            0.99651038646698,
            0.9971514344215393,
            0.9965565204620361,
            0.9967470765113831,
            0.9966608285903931,
            0.996671199798584,
            0.9954243898391724,
            0.9966569542884827,
            0.996087908744812,
            0.9972221851348877,
            0.9961574077606201,
            0.9948766827583313,
            0.9969589114189148,
            0.9948188662528992,
            0.9891161918640137
        ]
    },
    "3697": {
        "similarity": 0.9954861998558044,
        "body": "import sys\n\n    n, k, m, a = map(int, sys.stdin.readline().split())\n    votes = list(map(int, sys.stdin.readline().split()))\n    votes.sort()\n    outcome = [0] * (n + 1)\n    for i in range(a):\n        if i < k:\n            outcome[votes[i]] = 1\n        elif votes[i - 1] == votes[i]:\n            continue\n        else:\n            outcome[votes[i]] = 2\n    for i in range(1, n + 1):\n        if not outcome[i]:\n            outcome[i] = 3\n    print(*outcome[1:])\n\nelection_outcome()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936128258705139,
            0.9913288950920105,
            0.9952051043510437,
            0.9943077564239502,
            0.9940095543861389,
            0.9944984912872314,
            0.9938045144081116,
            0.989689290523529,
            0.9953388571739197,
            0.9889621734619141,
            0.9941903352737427,
            0.9947992563247681,
            0.9924061298370361,
            0.995381236076355,
            0.993211567401886,
            0.9949571490287781,
            0.9939478039741516,
            0.9954861998558044,
            0.9835183024406433,
            0.9946940541267395
        ]
    },
    "3647": {
        "similarity": 0.9976881146430969,
        "body": "    c, r = map(int, input().split())\n    maze = [list(input()) for _ in range(r)]\n    goal_x, goal_y = next((x, y) for x, y in enumerate(range(c)) if maze[y][x] == 'M')\n    moves = [[-1]*c for _ in range(r)]\n\n        if moves[x][y] != -1:\n            return moves[x][y]\n        if maze[x][y] == '#':\n            return float('inf')\n        if maze[x][y] == '.':\n            moves[x][y] = moves_so_far\n            return moves_so_far\n\n        dx, dy = [-1, 0, 1, 0], [0, -1, 0, 1]\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if maze[nx][ny] != '_':\n                continue\n            new_moves_so_far = dfs(nx, ny, moves_so_far+1)\n            if new_moves_so_far < float('inf'):\n                moves[x][y] = min(moves[x][y], new_moves_so_far) if moves[x][y] != -1 else new_moves_so_far\n\n        return moves[x][y]\n\n    for x in range(c):\n        for y in range(r):\n            dfs(x, y, 0)\n\n    for row in moves:\n        print(*row)\n\nmin_moves()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931992888450623,
            0.9971129894256592,
            0.9968920350074768,
            0.9976359009742737,
            0.9967554211616516,
            0.9966436624526978,
            0.9972315430641174,
            0.9966436624526978,
            0.9959558248519897,
            0.9973935484886169,
            0.9962621331214905,
            0.9969083070755005,
            0.9974094033241272,
            0.9973009824752808,
            0.9970365166664124,
            0.9968205690383911,
            0.9964226484298706,
            0.9976881146430969,
            0.9975702166557312,
            0.9955283999443054
        ]
    },
    "3699": {
        "similarity": 0.9961274862289429,
        "body": "Here is the Python function that follows your specifications:\n\n    bottles = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        bottles.append((x, y))\n\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    adil_path = [a_x, a_y]\n    bera_path = [b_x, b_y]\n\n    for bottle in bottles:\n        d_adil = dist(adil_path[-1], bottle)\n        d_bera = dist(bera_path[-1], bottle)\n\n        if d_adil <= d_bera:\n            adil_path.append(bottle[0])\n            bera_path.append(t_x)\n        else:\n            bera_path.append(bottle[0])\n            adil_path.append(t_x)\n\n    total_distance = sum(dist(path[i-1], path[i]) for i in range(1, len(path)) for path in (adil_path, bera_path))\n\n    return total_distance",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945178627967834,
            0.9951068758964539,
            0.9914443492889404,
            0.9944378733634949,
            0.9937254190444946,
            0.9947132468223572,
            0.9949306845664978,
            0.9956061840057373,
            0.9935216307640076,
            0.9950751066207886,
            0.9947168231010437,
            0.9960840344429016,
            0.9928604960441589,
            0.9936714172363281,
            0.9949736595153809,
            0.9952308535575867,
            0.9935145974159241,
            0.9961274862289429,
            0.9949893951416016,
            0.9947103261947632
        ]
    },
    "3145": {
        "similarity": 0.997633159160614,
        "body": "    count = 0\n    for num in range(a, b + 1):\n        if num % x == 0:\n            digits = str(num)\n            if all(digit in allowed_digits for digit in digits):\n                count += 1\n    return count\n\nx, a, b = map(int, input().split())\nallowed_digits = input()\nprint(count_multiples(x, a, b, allowed_digits))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941180348396301,
            0.9969407916069031,
            0.9969673156738281,
            0.997633159160614,
            0.9959715008735657,
            0.997633159160614,
            0.9954609274864197,
            0.997633159160614,
            0.995322585105896,
            0.997633159160614,
            0.9926027059555054,
            0.9963794350624084,
            0.9973210692405701,
            0.9966416954994202,
            0.9915544390678406,
            0.9958090782165527,
            0.9975244402885437,
            0.9974428415298462,
            0.9960342049598694,
            0.9961146116256714
        ]
    },
    "3795": {
        "similarity": 0.9963451027870178,
        "body": "    n = int(input())\n    d = int(input())\n    e = int(input())\n\n    dollar_bills = [1, 2, 5, 10, 20, 50, 100]\n    euro_bills = [5, 10, 20, 50, 100]\n\n    min_rubles = n\n    for dollars in range(n // d + 1):\n        for euros in range((n - dollars * d) // e + 1):\n            total_rubles = dollars * d + euros * e\n            if total_rubles <= n and total_rubles < min_rubles:\n                min_rubles = total_rubles\n\n    print(min_rubles)",
        "result": "timed out",
        "similarities": [
            0.9956886768341064,
            0.9939099550247192,
            0.9960560202598572,
            0.9963451027870178,
            0.9950857758522034,
            0.9941001534461975,
            0.9945716857910156,
            0.9938181638717651,
            0.9939537048339844,
            0.9935439229011536,
            0.9949212670326233,
            0.9944247007369995,
            0.9953286051750183,
            0.9954710602760315,
            0.9952184557914734,
            0.9923949241638184,
            0.9915285706520081,
            0.9951074719429016,
            0.9960586428642273,
            0.9959025979042053
        ]
    },
    "3353": {
        "similarity": 0.9973291158676147,
        "body": "from collections import deque\n\n    p, r, l = map(int, input().split())\n    graph = [[] for _ in range(r + 2)]\n    for _ in range(l):\n        e1, e2 = map(int, input().split())\n        if e1 != e2:\n            graph[e1].append(e2)\n            graph[e2].append(e1)\n\n    visited = [False] * (r + 2)\n    time = [-1] * (r + 2)\n    queue = deque([-2])\n    while queue:\n        node = queue.popleft()\n        if node != -2 and node != -1:\n            visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                time[neighbor] = time[node] + 1\n                queue.append(neighbor)\n\n    if time[-1] == -1 or p > sum(time[i] != -1 for i in range(r + 2)):\n        print(p)\n    else:\n        print(sum(time[i] for i in range(r + 2) if time[i] != -1))\n\nmin_time_to_cross_river()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964131712913513,
            0.9956915974617004,
            0.9971745014190674,
            0.9956908226013184,
            0.9966311454772949,
            0.9964491128921509,
            0.9956517815589905,
            0.9960321187973022,
            0.9972292184829712,
            0.9968970417976379,
            0.9971585869789124,
            0.9961193799972534,
            0.9970638751983643,
            0.9973291158676147,
            0.9969283938407898,
            0.995941162109375,
            0.997123122215271,
            0.9965565204620361,
            0.9961632490158081,
            0.994899332523346
        ]
    },
    "3065": {
        "similarity": 0.9971249103546143,
        "body": "import sys\n\n    num_nodes = int(input())\n    num_rooms_to_visit = int(input())\n    rooms_to_visit = list(map(int, input().split()))\n    node_neighbors = [[] for _ in range(num_nodes)]\n    for i in range(num_nodes):\n        num_neighbors = int(input())\n        neighbors = list(map(int, input().split()))\n        node_neighbors[i] = neighbors\n\n    current_room = rooms_to_visit[0]\n    chance_of_success = 1.0\n    visited_rooms = set()\n\n    for room in rooms_to_visit:\n        if room not in visited_rooms:\n            visited_rooms.add(room)\n            chance_of_success *= (len(node_neighbors[room]) - 1) / len(node_neighbors[room])\n\n    print(f\"{chance_of_success:.6f}\")\n\ncalculate_chance_of_success()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969461560249329,
            0.9964985251426697,
            0.9954408407211304,
            0.9953398704528809,
            0.995371401309967,
            0.9958044290542603,
            0.994698166847229,
            0.9970936179161072,
            0.9953872561454773,
            0.9961122274398804,
            0.9947713613510132,
            0.9967318177223206,
            0.9964185953140259,
            0.9960985779762268,
            0.9969953298568726,
            0.9969209432601929,
            0.9971249103546143,
            0.9952785968780518,
            0.9970589876174927,
            0.9959475994110107
        ]
    },
    "3250": {
        "similarity": 0.9968870282173157,
        "body": "    m = 1\n    while True:\n        f = sum(((-1)**i)*sum(int(x) for x in str(m + i)) for i in range(d))\n        if f % d == 0:\n            return \"yes\"\n        m += 1\n\nb, d = map(int, input().split())\nprint(is_valid_hack(b, d))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954878091812134,
            0.9945031404495239,
            0.9945356249809265,
            0.9961989521980286,
            0.9956921339035034,
            0.991902232170105,
            0.9968870282173157,
            0.9949420094490051,
            0.9960377216339111,
            0.9956169128417969,
            0.9952049255371094,
            0.9967617392539978,
            0.9959141612052917,
            0.995157778263092,
            0.9954418540000916,
            0.9962059855461121,
            0.9963300824165344,
            0.9955303072929382,
            0.9965905547142029,
            0.9962247610092163
        ]
    },
    "3306": {
        "similarity": 0.9970982074737549,
        "body": "    n, m = map(int, input().split())\n    detectors = []\n    for _ in range(n):\n        p, c = map(int, input().split())\n        detectors.append((p, c))\n\n    detectors.sort(key=lambda x: x[0])\n\n    phone_calls = 0\n    prev_p, prev_c = None, float('inf')\n    for p, c in detectors:\n        if prev_c > c or prev_p < p:\n            phone_calls += 1\n            prev_c = c\n        prev_p = p\n\n    print(phone_calls)\n\nif __name__ == '__main__':\n    min_phone_calls()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963292479515076,
            0.9941819906234741,
            0.9954145550727844,
            0.9964131712913513,
            0.9963996410369873,
            0.9970982074737549,
            0.9942126274108887,
            0.9964084625244141,
            0.9959787130355835,
            0.9968088865280151,
            0.9969478249549866,
            0.9964832663536072,
            0.996344804763794,
            0.9969936013221741,
            0.9951051473617554,
            0.9948172569274902,
            0.9957904815673828,
            0.9968911409378052,
            0.9960730671882629,
            0.9957441091537476
        ]
    },
    "3970": {
        "similarity": 0.9967761635780334,
        "body": "    n, k = map(int, input().split())\n    nums = list(map(int, input().split()))\n    subset = []\n    for num in nums:\n        if not subset or num <= subset[-1]*k:\n            subset.append(num)\n    print(len(subset))\n\nlargest_k_multiple_free_subset()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933840036392212,
            0.996460497379303,
            0.9954565167427063,
            0.9953792095184326,
            0.9964545369148254,
            0.9960675835609436,
            0.9964519143104553,
            0.9949685335159302,
            0.9941665530204773,
            0.9952710866928101,
            0.9963346123695374,
            0.9960373640060425,
            0.990301251411438,
            0.9955724477767944,
            0.9951290488243103,
            0.9927698373794556,
            0.9967761635780334,
            0.9923095703125,
            0.996152400970459,
            0.9966331124305725
        ]
    },
    "3655": {
        "similarity": 0.9981171488761902,
        "body": "    robot_width, robot_height = map(int, input().split())\n    robot_image = [list(map(int, input().split())) for _ in range(robot_height)]\n\n    floor_width, floor_height = map(int, input().split())\n    floor_image = [list(map(int, input().split())) for _ in range(floor_height)]\n\n    best_match_count = 0\n    candidate_locations = []\n\n    for y in range(floor_height - robot_height + 1):\n        for x in range(floor_width - robot_width + 1):\n            match_count = sum(robot_image[i][j] == floor_image[y + i][x + j] for i in range(robot_height) for j in range(robot_width))\n\n            if match_count > best_match_count:\n                best_match_count = match_count\n                candidate_locations = [(x, y)]\n            elif match_count == best_match_count:\n                candidate_locations.append((x, y))\n\n    print(*candidate_locations, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9981171488761902,
            0.9955942034721375,
            0.9978765249252319,
            0.9973433613777161,
            0.9980817437171936,
            0.9960435628890991,
            0.9977867007255554,
            0.9979603290557861,
            0.9979324340820312,
            0.9979324340820312,
            0.9975743889808655,
            0.9978420734405518,
            0.9978120923042297,
            0.9957562685012817,
            0.9981109499931335,
            0.9972850680351257,
            0.9979042410850525,
            0.9963560700416565,
            0.9972150921821594,
            0.9964772462844849
        ]
    },
    "3589": {
        "similarity": 0.9979739785194397,
        "body": "    L, R = map(int, input().split())\n    counts = [0] * 9\n    for x in range(L, R + 1):\n        num = x\n        while num >= 10:\n            product = 1\n            while num > 0 and num % 10 != 0:\n                product *= num % 10\n                num //= 10\n            counts[product] += 1\n    print(*counts)",
        "result": "timed out",
        "similarities": [
            0.9970952868461609,
            0.9970682263374329,
            0.9976906180381775,
            0.9967472553253174,
            0.9968467354774475,
            0.9974833130836487,
            0.997604250907898,
            0.9961844086647034,
            0.997501790523529,
            0.994343638420105,
            0.9975187182426453,
            0.9964920878410339,
            0.9970371127128601,
            0.9975428581237793,
            0.9974730610847473,
            0.9963487386703491,
            0.9979739785194397,
            0.995837390422821,
            0.9969366192817688,
            0.9960965514183044
        ]
    },
    "3257": {
        "similarity": 0.9962824583053589,
        "body": "    sides = list(map(float, input().split()))\n    max_side = max(sides)\n    if max_side <= 2:\n        return -1\n    area = ((max_side * (max_side ** 2)) / (4 * sqrt(3))) ** 2\n    print(\"{:.8f}\".format(area))\n\nfor _ in range(int(input())):\n    calculate_area()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951345324516296,
            0.9938451647758484,
            0.9958208799362183,
            0.9936982989311218,
            0.9949355721473694,
            0.9962538480758667,
            0.9955129027366638,
            0.9933162331581116,
            0.9954904317855835,
            0.9958571195602417,
            0.9962824583053589,
            0.9953323006629944,
            0.9946150779724121,
            0.9947704672813416,
            0.9949859976768494,
            0.9954426288604736,
            0.9960911273956299,
            0.9957680106163025,
            0.9960583448410034,
            0.9955504536628723
        ]
    },
    "3927": {
        "similarity": 0.9966153502464294,
        "body": "import sys\n\n    n = int(input())\n    weights = list(map(int, input().split()))\n    max_weights = 0\n    for k in range(1, len(weights)+1):\n        for m in range(sum(weights), -1, -1):\n            if any(k == sum(subset) and m == sum(subset) for i in range(len(weights)) for subset in itertools.combinations(weights[i+1:], k)):\n                return max_weights\n            max_weights += 1\n    print(max_weights)\n\nfind_max_weights()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995414137840271,
            0.9921396374702454,
            0.9966153502464294,
            0.9914352893829346,
            0.9950804710388184,
            0.994456946849823,
            0.9963696002960205,
            0.992992103099823,
            0.9957950115203857,
            0.9925971627235413,
            0.9944610595703125,
            0.9959115386009216,
            0.9954288005828857,
            0.9957811236381531,
            0.996211588382721,
            0.9934667348861694,
            0.9965006113052368,
            0.9957226514816284,
            0.9956161379814148,
            0.9953147768974304
        ]
    },
    "3319": {
        "similarity": 0.9975786805152893,
        "body": "    import sys\n    read_input = sys.stdin.buffer.readline\n\n    n, nx, ny, nz = map(int, read_input().split())\n    planets = []\n    for _ in range(n):\n        m, x, y, z, vx, vy, vz = map(int, read_input().split())\n        planets.append((m, (x % nx, y % ny, z % nz), (vx % nx, vy % ny, vz % nz)))\n\n    while True:\n        collisions = []\n        for i, (m1, (x1, y1, z1), (vx1, vy1, vz1)) in enumerate(planets):\n            for j, (m2, (x2, y2, z2), (vx2, vy2, vz2)) in enumerate(planets[i + 1:]):\n                if x1 == x2 and y1 == y2 and z1 == z2:\n                    collisions.append((i, i + j + 1))\n        if not collisions:\n            break\n        for i, j in collisions:\n            m = planets[i][0] + planets[j][0]\n            vx = (planets[i][1][0] * planets[i][0] + planets[j][1][0] * planets[j][0]) // m\n            vy = (planets[i][1][1] * planets[i][0] + planets[j][1][1] * planets[j][0]) // m\n            vz = (planets[i][1][2] * planets[i][0] + planets[j][1][2] * planets[j][0]) // m\n            del planets[i], planets[j]\n            planets.append((m, ((vx + vy + vz) % nx, (vy + vz) % ny, vz % nz), (vx % nx, vy % ny, vz % nz)))\n        for i in range(len(planets)):\n            x, y, z = planets[i][1]\n            vx, vy, vz = planets[i][2]\n            planets[i] = (planets[i][0], ((x + vx) % nx, (y + vy) % ny, (z + vz) % nz), (vx % nx, vy % ny, vz % nz))\n\n    print(len(planets))\n    for i, (m, (x, y, z), _) in enumerate(sorted(planets, key=lambda x: (-x[0], x[1]))):\n        print(f\"P{i}: {m} {x} {y} {z}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975548982620239,
            0.9964268207550049,
            0.9973954558372498,
            0.9975786805152893,
            0.9968025088310242,
            0.9962881207466125,
            0.995157778263092,
            0.9964783191680908,
            0.9974883198738098,
            0.9973166584968567,
            0.9972140789031982,
            0.9969234466552734,
            0.9973881244659424,
            0.9966850280761719,
            0.9970731139183044,
            0.9964224100112915,
            0.9962065815925598,
            0.996799886226654,
            0.9928484559059143,
            0.9969472289085388
        ]
    },
    "3009": {
        "similarity": 0.9972591400146484,
        "body": "from sys import stdin\n\n    n = int(stdin.readline())\n    lamps = []\n    for _ in range(n):\n        x, y, e = map(int, stdin.readline().split())\n        lamps.append((x, y, e))\n\n    lamps.sort(key=lambda x: (x[0], x[1]))\n\n    total_pos = total_neg = 0\n    pos_lamps = []\n    neg_lamps = []\n\n    for lamp in lamps:\n        x, y, e = lamp\n        if e > 0:\n            total_pos += e\n            pos_lamps.append((x, y))\n        else:\n            total_neg -= e\n            neg_lamps.append((x, y))\n\n    if total_pos == total_neg:\n        return \"IMPOSSIBLE\"\n\n    min_length = float('inf')\n\n    for i in range(len(pos_lamps) - 1):\n        x1, y1 = pos_lamps[i]\n        for j in range(i + 1, len(pos_lamps)):\n            x2, y2 = pos_lamps[j]\n            length = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n            min_length = min(min_length, length)\n\n    return min_length\n\nprint(calculate_line_length())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952200055122375,
            0.9952670931816101,
            0.9968703389167786,
            0.9968273639678955,
            0.9967623353004456,
            0.9965199828147888,
            0.9972591400146484,
            0.9969884157180786,
            0.9967947602272034,
            0.9952262043952942,
            0.9965164065361023,
            0.9932987093925476,
            0.9920057058334351,
            0.9968436360359192,
            0.9949545860290527,
            0.995633065700531,
            0.9968382120132446,
            0.9971089959144592,
            0.9970865845680237,
            0.9970139265060425
        ]
    },
    "3896": {
        "similarity": 0.9961239695549011,
        "body": "    mod = 10**9 + 7\n    x = input().strip()\n    n = len(x)\n    complexity = 0\n    for i in range(2**n):\n        a, b = i, i ^ int(x, 2)\n        if any((j, k) for j, k in zip(range(a+1, 2**n), reversed(range(b-1, -1)))):\n            complexity += 1\n    print(complexity % mod)\n\ncalculate_complexity()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896379113197327,
            0.9952062368392944,
            0.994674801826477,
            0.9957211017608643,
            0.990554690361023,
            0.9945076704025269,
            0.994708240032196,
            0.9955125451087952,
            0.9961239695549011,
            0.9937892556190491,
            0.9945508241653442,
            0.9943336844444275,
            0.9954961538314819,
            0.9956289529800415,
            0.9872388243675232,
            0.9940590262413025,
            0.9956111907958984,
            0.993094801902771,
            0.9894317984580994,
            0.9947421550750732
        ]
    },
    "3509": {
        "similarity": 0.9979224801063538,
        "body": "    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, t = map(int, input().split())\n        graph[u].append((v, t))\n\n        if node == n:\n            return max(wait_time, a)\n        min_wait = float('inf')\n        for next_node, next_time in graph[node]:\n            if time + next_time > b:\n                continue\n            new_wait_time = dfs(next_node, time + next_time, wait_time)\n            min_wait = min(min_wait, new_wait_time)\n        return min_wait\n\n    print(dfs(1, 0))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960088133811951,
            0.9978210926055908,
            0.9966819286346436,
            0.996590793132782,
            0.9979224801063538,
            0.995875895023346,
            0.997634768486023,
            0.9970715045928955,
            0.9946218729019165,
            0.9970409274101257,
            0.9973192811012268,
            0.9963757395744324,
            0.9977028369903564,
            0.9960614442825317,
            0.996238112449646,
            0.9974836111068726,
            0.9965356588363647,
            0.9966179728507996,
            0.9957124590873718,
            0.9971753358840942
        ]
    },
    "3547": {
        "similarity": 0.9949048757553101,
        "body": "    n = int(input())\n    plots = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, input().split())\n        plots.append(((x1, y1), (x2, y2)))\n    area_set = set()\n    for plot in plots:\n        for x in range(int(plot[0][0]), int(plot[1][0]) + 1):\n            for y in range(int(plot[0][1]), int(plot[1][1]) + 1):\n                area_set.add((x, y))\n    return round(len(area_set) * 2.0 ** 2, 2)\n\nprint(total_area())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937239289283752,
            0.9910860657691956,
            0.9940892457962036,
            0.9940828084945679,
            0.9926580190658569,
            0.9903348684310913,
            0.9891592264175415,
            0.9949048757553101,
            0.9933943748474121,
            0.9925248026847839,
            0.9919747114181519,
            0.9903859496116638,
            0.9927753806114197,
            0.9910565614700317,
            0.9885696768760681,
            0.9910696744918823,
            0.9928346276283264,
            0.9941831827163696,
            0.9903883934020996,
            0.982836902141571
        ]
    },
    "3017": {
        "similarity": 0.9971276521682739,
        "body": "    two_e = int(str(2**e))\n    count = 0\n    for k in range(n + 1):\n        if str(k).count(str(two_e)) > 0:\n            count += 1\n    print(count)\n\n# Read input from stdin\nn, e = map(int, input().split())\ncount_numbers_containing_power_of_two(n, e)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962866902351379,
            0.9970871806144714,
            0.9943620562553406,
            0.9965540170669556,
            0.9955508708953857,
            0.9935168027877808,
            0.9957711100578308,
            0.9961014986038208,
            0.9953227639198303,
            0.9932186603546143,
            0.995633602142334,
            0.994419276714325,
            0.9969574809074402,
            0.9932277202606201,
            0.9970136284828186,
            0.9908121824264526,
            0.9947714805603027,
            0.9971276521682739,
            0.9955610036849976,
            0.9957749247550964
        ]
    },
    "3076": {
        "similarity": 0.9976266622543335,
        "body": "    n, k = map(int, input().split())\n    jewels = []\n    for _ in range(n):\n        s, v = map(int, input().split())\n        jewels.append((s, v))\n\n    dp = [0] * (k + 1)\n    for _, v in sorted(jewels, reverse=True):\n        for i in range(v, k + 1):\n            if dp[i - v] != 0:\n                dp[i] = max(dp[i], dp[i - v] + v)\n\n    print(*dp[:k])\n\nsolve_knapsack()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973499774932861,
            0.9967030882835388,
            0.9956293702125549,
            0.9968159198760986,
            0.9968926310539246,
            0.9957024455070496,
            0.9971221089363098,
            0.997222900390625,
            0.9976266622543335,
            0.9975958466529846,
            0.9954771995544434,
            0.9970311522483826,
            0.9958750009536743,
            0.9969152212142944,
            0.9944990277290344,
            0.9975907206535339,
            0.9973078370094299,
            0.9974793791770935,
            0.9945454001426697,
            0.9942880868911743
        ]
    },
    "3923": {
        "similarity": 0.9964274168014526,
        "body": "    n, a, b = map(int, input().split())\n    p = list(range(n + 1))\n    for i in range(1, n):\n        if i % a == 0:\n            p[i], p[a] = p[a], p[i]\n        elif i % b == 0:\n            p[i], p[b] = p[b], p[i]\n        else:\n            print(-1)\n            return\n    print(*p[1:])\n\nfind_permutation()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936649799346924,
            0.9949491620063782,
            0.9961692690849304,
            0.9937760233879089,
            0.9952641725540161,
            0.9952012896537781,
            0.9877055287361145,
            0.9955328702926636,
            0.9956342577934265,
            0.9935560822486877,
            0.9964274168014526,
            0.9946415424346924,
            0.9962937235832214,
            0.9958214163780212,
            0.9940037131309509,
            0.990631639957428,
            0.9952359795570374,
            0.9923254251480103,
            0.9952316284179688,
            0.993418276309967
        ]
    },
    "3332": {
        "similarity": 0.9978104829788208,
        "body": "    n = int(input())\n    streams = []\n    for i in range(n):\n        s, d, p = map(int, input().split())\n        streams.append((s, d, p))\n\n    streams.sort(key=lambda x: (x[0], -x[2]))\n\n    max_priority = 0\n    current_time = 0\n    stack = []\n\n    for s, d, p in streams:\n        if s >= current_time:\n            while stack and stack[-1] < s:\n                stack.pop()\n            if not stack or stack[-1] != s:\n                stack.append(s)\n                max_priority += p\n\n        current_time = max(current_time, s + d)\n\n    print(max_priority)\n\nmax_priority_streams()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975531697273254,
            0.9969464540481567,
            0.9973306059837341,
            0.9974359273910522,
            0.9954556226730347,
            0.9971997141838074,
            0.9972988963127136,
            0.9976228475570679,
            0.9978104829788208,
            0.9977342486381531,
            0.9976333975791931,
            0.9971534609794617,
            0.9962716698646545,
            0.9952559471130371,
            0.9970294833183289,
            0.9974885582923889,
            0.9947444796562195,
            0.9970539808273315,
            0.9976885914802551,
            0.9941542744636536
        ]
    },
    "3240": {
        "similarity": 0.9970234632492065,
        "body": "import sys\n\nk, v = map(int, sys.stdin.readline().split())\nballots = []\nfor _ in range(v - 1):\n    p, b = map(float, sys.stdin.readline().split())\n    ballots.append((p, b))\n\nmax_expectation = 0\nmy_ballot = 0\n\nfor ballot in range(2**k + 1):\n    expectation = 0\n    for p, b in ballots:\n        if ballot & b == b: # voter casts a ballot and I win this position\n            expectation += p * (ballot >> k) / (1 << k)\n        elif ballot & b != b: # voter doesn't vote/casts fewer ballots than needed to win this position\n            expectation += p * ((ballot + b) >> k) / (1 << k)\n\n    if expectation > max_expectation:\n        max_expectation = expectation\n        my_ballot = ballot\n\nprint(my_ballot)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968440532684326,
            0.9966790080070496,
            0.9939755201339722,
            0.9967193603515625,
            0.9962636232376099,
            0.995212733745575,
            0.9967659711837769,
            0.9963433146476746,
            0.9959245920181274,
            0.9962787628173828,
            0.9966034293174744,
            0.9964316487312317,
            0.9952232241630554,
            0.9955841898918152,
            0.9963002800941467,
            0.9960517883300781,
            0.9970234632492065,
            0.9963158965110779,
            0.9964426755905151,
            0.9964003562927246
        ]
    },
    "3368": {
        "similarity": 0.9968986511230469,
        "body": "    n, m = map(int, input().split())\n    enclosures = {}\n    for _ in range(n):\n        animal_type, num_animals = input().split()[:2]\n        num_animals = int(num_animals)\n        animals_in_enclosure = [input()[i] for i in range(1, len(input()) - num_animals)]\n        enclosures[animal_type] = {'num_animals': num_animals, 'animals_in_enclosure': animals_in_enclosure}\n\n    current_location = ''\n    next_possible_locations = []\n\n    for animal_type, data in enclosures.items():\n        if data['num_animals'] == 0:\n            continue\n        elif data['num_animals'] > len(next_possible_locations):\n            print(\"IMPOSSIBLE\")\n            return\n        else:\n            next_possible_locations.extend([animal for animal in data['animals_in_enclosure'] if animal != current_location])\n\n    if len(next_possible_locations) == 0 and all(data['num_animals'] == 0 for data in enclosures.values()):\n        print(\"FALSE ALARM\")\n    else:\n        print(\"POSSIBLE\")\n\nis_possible()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942518472671509,
            0.9947298765182495,
            0.9952143430709839,
            0.9958522319793701,
            0.9958004355430603,
            0.9945100545883179,
            0.9949478507041931,
            0.9914014935493469,
            0.9963740110397339,
            0.9910112023353577,
            0.9945371747016907,
            0.9962543845176697,
            0.9968986511230469,
            0.9963720440864563,
            0.9966062307357788,
            0.9953241944313049,
            0.9952119588851929,
            0.9945673942565918,
            0.9949638843536377,
            0.9942657351493835
        ]
    },
    "3538": {
        "similarity": 0.9970158338546753,
        "body": "    n, d = map(int, input().split())\n    frogs = []\n    for _ in range(n):\n        l, w, h = map(int, input().split())\n        frogs.append((l, w, h))\n\n    frogs.sort(reverse=True)\n\n    num_frogs_escaped = 0\n    for i in range(n):\n        if frogs[i][0] > d:\n            num_frogs_escaped += 1\n\n        j = i - 1\n        while j >= 0 and frogs[j][2] + frogs[i][0] <= d:\n            if frogs[j][1] + frogs[i][1] <= frogs[j][1]:\n                break\n            num_frogs_escaped += 1\n            j -= 1\n\n    print(num_frogs_escaped)\n\nmax_frogs_escaping()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939627647399902,
            0.9950470328330994,
            0.994647204875946,
            0.9944861531257629,
            0.9970158338546753,
            0.9951635003089905,
            0.9958610534667969,
            0.996110200881958,
            0.9940872192382812,
            0.995509922504425,
            0.9933379292488098,
            0.9955950379371643,
            0.9953068494796753,
            0.995559811592102,
            0.9946425557136536,
            0.9965227246284485,
            0.9941430687904358,
            0.9965632557868958,
            0.9966303110122681,
            0.9942940473556519
        ]
    },
    "3183": {
        "similarity": 0.998295247554779,
        "body": "    n, m, s, t = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v, c, w = map(int, input().split())\n        edges.append((u, v, c, w))\n\n    flow_cost = maximum_flow(edges, s, t)\n    print(f\"{flow_cost[0]} {flow_cost[1]}\")\n\n    n = max(max(u, v) for u, v, _, _ in edges) + 1\n    capacity = [[0] * n for _ in range(n)]\n    cost = [[0] * n for _ in range(n)]\n\n    for u, v, c, w in edges:\n        capacity[u][v] += c\n        cost[u][v] += w\n\n    flow, total_cost = 0, 0\n    parent = [-1] * n\n\n        if u == sink or not visited[u]:\n            return True\n        visited[u] = True\n        for v in range(n):\n            if capacity[u][v] > 0 and parent[v] < 0:\n                parent[v] = u\n                if dfs(v):\n                    return True\n        return False\n\n    while dfs(source):\n        path_flow = float('inf')\n        u = sink\n        while u != source:\n            path_flow = min(path_flow, capacity[parent[u]][u])\n            u = parent[u]\n        flow += path_flow\n        total_cost += path_flow * cost[source][sink]\n\n        u = sink\n        while u != source:\n            capacity[parent[u]][u] -= path_flow\n            capacity[u][parent[u]] += path_flow\n            u = parent[u]\n\n    return flow, total_cost\n\nprocess_input()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9974879026412964,
            0.9982073903083801,
            0.9980155825614929,
            0.998019278049469,
            0.9973785281181335,
            0.9974413514137268,
            0.9979236125946045,
            0.9979709982872009,
            0.9975632429122925,
            0.9981218576431274,
            0.9979017376899719,
            0.9960583448410034,
            0.998295247554779,
            0.9982427358627319,
            0.9976959228515625,
            0.9981446862220764,
            0.9970366954803467,
            0.9967462420463562,
            0.9981435537338257,
            0.9968734383583069
        ]
    },
    "3916": {
        "similarity": 0.9965253472328186,
        "body": "    import sys\n    n = int(input())\n    k_values = list(map(int, input().split()))\n    factorial = [1] * 5001\n    for i in range(2, 5001):\n        factorial[i] = i * factorial[i - 1]\n    min_sum = float('inf')\n    for p in range(n + 1):\n        path_lengths = []\n        for k in k_values:\n            if p < k or k == 0:\n                path_lengths.append(factorial[k])\n            else:\n                path_lengths.append(factorial[k] - factorial[p // factorial[k]])\n        min_sum = min(min_sum, sum(path_lengths))\n    print(min_sum)\n\nfind_min_sum_of_paths()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949601888656616,
            0.9951868653297424,
            0.9958638548851013,
            0.9963802695274353,
            0.9960337281227112,
            0.9839059710502625,
            0.9949442148208618,
            0.9897802472114563,
            0.99396151304245,
            0.994963526725769,
            0.9953561425209045,
            0.9929957389831543,
            0.9958733320236206,
            0.9956107139587402,
            0.9922605752944946,
            0.996288001537323,
            0.9956598877906799,
            0.9965253472328186,
            0.9962670207023621,
            0.9955646991729736
        ]
    },
    "3195": {
        "similarity": 0.9944607615470886,
        "body": "    t_g, t_y, t_r = map(int, input().split())\n    n = int(input())\n    observations = []\n    for _ in range(n):\n        t, c = input().split()\n        t = int(t)\n        observations.append((t, c))\n    t_q, c_q = input().split()\n    t_q = int(t_q)\n\n    cycle_length = t_g + t_y + t_r\n    valid_t = set(range(0, cycle_length))\n\n    for t, c in observations:\n        if c == 'green':\n            valid_t &= set(range(t - t_g % cycle_length, (t - t_g) % cycle_length))\n        elif c == 'yellow':\n            valid_t &= set(range((t - t_y) % cycle_length, (t - t_g - t_y) % cycle_length))\n        else:\n            valid_t &= set(range((t - t_r) % cycle_length, t % cycle_length))\n\n    if t_q in valid_t and c_q == 'green':\n        print(1 / len(valid_t))\n    else:\n        print(0)\n\ncalculate_probability()",
        "result": "failed: testcase 0",
        "similarities": [
            0.990514874458313,
            0.9928392171859741,
            0.992104172706604,
            0.9906222820281982,
            0.9909704327583313,
            0.9926074147224426,
            0.9927369952201843,
            0.9918378591537476,
            0.9944607615470886,
            0.9916458129882812,
            0.9930628538131714,
            0.9935946464538574,
            0.9914442300796509,
            0.9920315146446228,
            0.9909002184867859,
            0.9940729737281799,
            0.9937039613723755,
            0.990588366985321,
            0.9919841289520264,
            0.9941379427909851
        ]
    },
    "3998": {
        "similarity": 0.9964619874954224,
        "body": "    n = int(input())\n    ratings = list(map(int, input().split()))\n\n    max_rating = max(ratings)\n    target_rating = min(max_rating, 100 - sum(ratings))\n\n    matches = []\n    for _ in range(n):\n        party_size = random.randint(2, min(5, n))\n        party_members = sorted(random.sample(range(n), party_size))\n        matches.append(''.join(str(party_member == ratings.index(max_rating)) for party_member in party_members))\n\n        for i in party_members:\n            if ratings[i] > target_rating:\n                ratings[i] -= 1\n\n    print(target_rating)\n    for match in matches:\n        print(match)\n\nbalance_ratings()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914631247520447,
            0.9941115379333496,
            0.9959867596626282,
            0.9912946820259094,
            0.9920802116394043,
            0.9946199059486389,
            0.9944358468055725,
            0.995996356010437,
            0.9924920797348022,
            0.9961000084877014,
            0.9964619874954224,
            0.9949840903282166,
            0.9949281811714172,
            0.9942787885665894,
            0.9962882995605469,
            0.9949679374694824,
            0.9951886534690857,
            0.9912588000297546,
            0.9964128732681274,
            0.9950100779533386
        ]
    },
    "3150": {
        "similarity": 0.9951202869415283,
        "body": "    n = int(input())\n    trenches = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        trenches.append(((x1, y1), (x2, y2)))\n\n        return all(not any(guard[0] <= x <= guard[1][0] and guard[1][1] == y for guard in guards) for _, guards in enumerate(trenches))\n\n    ways = 0\n    for _ in range(n * n * n):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        if can_see(x, y):\n            guards = [(x, y)]\n            if all(can_see((x + dx, y + dy)) for dx in [-1, 0, 1] for dy in [-1, 0, 1]):\n                ways += 1\n\n    print(ways)\n\nif __name__ == '__main__':\n    count_guard_placements()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993967592716217,
            0.9929841756820679,
            0.9922954440116882,
            0.9951202869415283,
            0.9875420331954956,
            0.9851056933403015,
            0.9928691387176514,
            0.9945125579833984,
            0.9948903322219849,
            0.9940665364265442,
            0.9946478009223938,
            0.99237459897995,
            0.9898878335952759,
            0.9934716820716858,
            0.9903303384780884,
            0.993884265422821,
            0.9939762949943542,
            0.9949296712875366,
            0.9939396381378174,
            0.9944887757301331
        ]
    },
    "3566": {
        "similarity": 0.9961276650428772,
        "body": "    n, q = map(int, input().split())\n    huts = list(map(int, input().split()))\n    for _ in range(q):\n        i, x = map(int, input().split())\n        huts[i] = x\n        left = huts[:i]\n        right = huts[i+1:]\n        total_left = sum(left)\n        total_right = sum(right)\n        diff = abs(total_left - total_right)\n        pos = 0\n        while pos < i and diff == abs(total_left - (total_left + huts[pos]) - total_right):\n            pos += 1\n        print(pos)\n\nif __name__ == '__main__':\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958024621009827,
            0.9950953125953674,
            0.9951584339141846,
            0.9935393333435059,
            0.9957129955291748,
            0.994873583316803,
            0.9891427755355835,
            0.9947527647018433,
            0.995029866695404,
            0.9956676959991455,
            0.9961276650428772,
            0.9948969483375549,
            0.9936539530754089,
            0.9922152161598206,
            0.9958116412162781,
            0.9927424192428589,
            0.9948583841323853,
            0.9938836693763733,
            0.9938864707946777,
            0.9946313500404358
        ]
    },
    "3401": {
        "similarity": 0.9967803955078125,
        "body": "import sys\n\n    n, s, t, q = map(int, input().split())\n    hills = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        hills.append((x, y, h))\n    spring_hills = list(map(lambda x: int(x) - 1, input().split()))\n    town_hills = list(map(lambda x: int(x) - 1, input().split()))\n\n        if start == end:\n            return 0\n        for i in range(n):\n            if hills[i][2] >= hills[start][2]:\n                continue\n            path_length = find_path(i, end)\n            if path_length != -1 and path_length + abs(hills[start][2] - hills[i][2]) <= q:\n                return path_length + abs(hills[start][2] - hills[i][2])\n        return -1\n\n    aqueduct_lengths = []\n    for town in town_hills:\n        spring = spring_hills[town]\n        length = find_path(spring, town)\n        if length == -1:\n            print(\"IMPOSSIBLE\")\n            sys.exit()\n        aqueduct_lengths.append(length)\n\n    return sum(aqueduct_lengths)\n\nprint(min_aqueduct_length())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963892698287964,
            0.996366024017334,
            0.9967803955078125,
            0.9955176115036011,
            0.9965978860855103,
            0.9959662556648254,
            0.9916825890541077,
            0.9956344962120056,
            0.9958726167678833,
            0.9959763288497925,
            0.9961254596710205,
            0.9909965395927429,
            0.9962376952171326,
            0.9959088563919067,
            0.991855800151825,
            0.9967167377471924,
            0.9967049360275269,
            0.9966936707496643,
            0.9966769814491272,
            0.9955344796180725
        ]
    },
    "3660": {
        "similarity": 0.9971792101860046,
        "body": "    message = input().strip()\n    n = int(input())\n    stickers = []\n    for _ in range(n):\n        word, cost = input().split()\n        cost = int(cost)\n        stickers.append((word, cost))\n\n    dp = [float('inf')] * (len(message) + 1)\n    dp[0] = 0\n\n    for i in range(1, len(message) + 1):\n        for word, cost in stickers:\n            if message.startswith(word, i - len(word)):\n                if i > len(word):\n                    dp[i] = min(dp[i], dp[i - len(word)] + cost)\n                else:\n                    dp[i] = min(dp[i], dp[i - len(word)] + cost)\n\n    return \"IMPOSSIBLE\" if dp[-1] == float('inf') else str(dp[-1])\n\nprint(find_min_cost())",
        "result": "failed: testcase 0",
        "similarities": [
            0.995570719242096,
            0.9926692843437195,
            0.994657039642334,
            0.9960564374923706,
            0.9968031644821167,
            0.9938058257102966,
            0.9949555993080139,
            0.993973970413208,
            0.9965693950653076,
            0.9955427050590515,
            0.9955155253410339,
            0.9944385886192322,
            0.9935720562934875,
            0.9922573566436768,
            0.9971792101860046,
            0.9971278309822083,
            0.9968204498291016,
            0.9970861673355103,
            0.9958115816116333,
            0.9971285462379456
        ]
    },
    "3721": {
        "similarity": 0.9955496788024902,
        "body": "    n, m, q = map(int, input().split())\n    available_elements = set()\n    for _ in range(q):\n        r, c = map(int, input().split())\n        available_elements.add((r, c))\n\n    elements_to_purchase = 0\n    for r in range(1, n + 1):\n        for c in range(1, m + 1):\n            if (r, c) not in available_elements and ((r - 1, c) in available_elements or (r + 1, c) in available_elements or (r, c - 1) in available_elements or (r, c + 1) in available_elements):\n                elements_to_purchase += 1\n    print(elements_to_purchase)\n\nfind_min_elements_to_purchase()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945405721664429,
            0.9942609071731567,
            0.9934296011924744,
            0.9939942955970764,
            0.992774248123169,
            0.9911316633224487,
            0.9935453534126282,
            0.9871143698692322,
            0.9945510029792786,
            0.9938315153121948,
            0.9951440095901489,
            0.9934979677200317,
            0.9941093325614929,
            0.9936253428459167,
            0.9887731671333313,
            0.993322491645813,
            0.9955496788024902,
            0.9851791262626648,
            0.9912763833999634,
            0.9932634234428406
        ]
    },
    "3811": {
        "similarity": 0.996362566947937,
        "body": "    import sys\n\n    n = int(sys.stdin.readline())\n    pairs = []\n    for _ in range(n):\n        a, b = map(int, sys.stdin.readline().split())\n        pairs.append((a, b))\n\n    max_wcd = 1\n    for i in range(2, min(max(a for a, _ in pairs), max(b for _, b in pairs)) + 1):\n        can_divide_all_pairs = True\n        for a, b in pairs:\n            if a % i != 0 and b % i != 0:\n                can_divide_all_pairs = False\n                break\n        if can_divide_all_pairs:\n            max_wcd = i\n\n    print(max_wcd if max_wcd > 1 else -1)\n\nwcd()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959114789962769,
            0.9952821135520935,
            0.9918399453163147,
            0.996362566947937,
            0.9959208965301514,
            0.9933491945266724,
            0.9933710694313049,
            0.9962375164031982,
            0.9929262399673462,
            0.994945228099823,
            0.9951606392860413,
            0.9953091144561768,
            0.9921784996986389,
            0.9895177483558655,
            0.9925645589828491,
            0.995924711227417,
            0.9951704144477844,
            0.9944847822189331,
            0.9948182702064514,
            0.9957817792892456
        ]
    },
    "3528": {
        "similarity": 0.9969837665557861,
        "body": "    n = int(input())\n    nails = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        nails.append((x, y))\n\n    directions = input()\n    areas = []\n\n    while len(nails) >= 3:\n        # Find the nail to be removed based on direction\n        if directions[0] == 'L':\n            nail_to_remove = min(nails, key=lambda x: x[0])\n        elif directions[0] == 'R':\n            nail_to_remove = max(nails, key=lambda x: x[0])\n        elif directions[0] == 'U':\n            nail_to_remove = max(nails, key=lambda x: x[1])\n        else:\n            nail_to_remove = min(nails, key=lambda x: x[1])\n\n        # Calculate the area of the shape enclosed by the hair band\n        x_coords, y_coords = zip(*nails)\n        leftmost, rightmost = min(x_coords), max(x_coords)\n        topmost, bottommost = max(y_coords), min(y_coords)\n\n        area = 0.5 * abs(leftmost - rightmost) * abs(topmost - bottommost)\n        areas.append(area)\n\n        # Remove the chosen nail from the board\n        nails.remove(nail_to_remove)\n\n        # Update directions and nails list if necessary\n        if len(nails) < 3:\n            break\n        elif directions[0] == 'L':\n            directions = directions[1:]\n        elif directions[0] == 'R':\n            directions = directions[1:]\n            nails.remove(max(nails, key=lambda x: x[0]))\n        elif directions[0] == 'U':\n            directions = directions[1:]\n            nails.remove(max(nails, key=lambda x: x[1]))\n        else:\n            directions = directions[1:]\n            nails.remove(min(nails, key=lambda x: x[1]))\n\n    # Print the areas with one digit after the decimal point\n    for area in areas:\n        print(f\"{area:.1f}\")\n\ncalculate_areas()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949989318847656,
            0.9966848492622375,
            0.9969837665557861,
            0.9962196350097656,
            0.9958999156951904,
            0.9961142539978027,
            0.9965443015098572,
            0.996335506439209,
            0.9959267973899841,
            0.9958016276359558,
            0.9963428378105164,
            0.9958917498588562,
            0.995204508304596,
            0.9967359304428101,
            0.9956251382827759,
            0.993076741695404,
            0.9951986074447632,
            0.9963486194610596,
            0.9953327178955078,
            0.9947142601013184
        ]
    },
    "3890": {
        "similarity": 0.9964954853057861,
        "body": "    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i <= k:\n            dp[i] = (dp[i - 1] + dp[i]) % MOD\n        else:\n            dp[i] = dp[i - 1]\n    return sum(dp[k:]) % MOD\n\nn, k = map(int, input().split())\nprint(solve(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964888691902161,
            0.9960023164749146,
            0.9931819438934326,
            0.9954326152801514,
            0.9956812858581543,
            0.9942395091056824,
            0.9955934286117554,
            0.9932082295417786,
            0.9917841553688049,
            0.9958643913269043,
            0.9942992329597473,
            0.9960054159164429,
            0.9949437379837036,
            0.9964954853057861,
            0.9925171732902527,
            0.9961903095245361,
            0.9949292540550232,
            0.9950047731399536,
            0.9956597685813904,
            0.9953709840774536
        ]
    },
    "3534": {
        "similarity": 0.996738851070404,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    max_streak = 0\n    current_streak = 1\n    k = 2 * 10 ** 9\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_streak += k\n        elif a[i] < a[i - 1]:\n            current_streak -= k\n        else:\n            current_streak = current_streak\n        max_streak = max(max_streak, current_streak)\n\n    print(max_streak)\n    print(k)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965089559555054,
            0.9961289167404175,
            0.9943405985832214,
            0.9935044646263123,
            0.9954167604446411,
            0.9961832761764526,
            0.996738851070404,
            0.9958431720733643,
            0.9942942261695862,
            0.9942552447319031,
            0.9952691793441772,
            0.9965662956237793,
            0.9964168071746826,
            0.9923070669174194,
            0.9954069256782532,
            0.9959055185317993,
            0.9953344464302063,
            0.993421733379364,
            0.9940484762191772,
            0.9959891438484192
        ]
    },
    "3371": {
        "similarity": 0.9970448017120361,
        "body": "    n, c = map(int, input().split())\n    encounters = []\n    for _ in range(c):\n        a, b, y = map(int, input().split())\n        encounters.append((a - 1, b - 1, y))\n    meetings_b4_2008 = set()\n    meetings_after_y = {}\n    for i in range(2007, 1947, -1):\n        for a, b, y in encounters:\n            if y <= i and (a, b) not in meetings_b4_2008:\n                meetings_b4_2008.add((a, b))\n            elif y > i:\n                meetings_after_y[i] = meetings_after_y.get(i, 0) + 1\n        if len(meetings_b4_2008) >= n // 3 and all(x < n // 3 for x in meetings_after_y.values()):\n            print(i)\n            return\n    print(\"Impossible\")\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952813386917114,
            0.9960333108901978,
            0.9954196810722351,
            0.993605375289917,
            0.9960200786590576,
            0.9959036111831665,
            0.9969401955604553,
            0.995449960231781,
            0.9948250651359558,
            0.9936169385910034,
            0.9953667521476746,
            0.9969989657402039,
            0.9970448017120361,
            0.9961483478546143,
            0.9960541129112244,
            0.9945263266563416,
            0.9958100914955139,
            0.9958321452140808,
            0.9957216382026672,
            0.9960183501243591
        ]
    },
    "3621": {
        "similarity": 0.9965338706970215,
        "body": "n = int(input())\ngraph = [list(map(int, input().split())) for _ in range(n)]\nmodulo = 10**9 + 7\n\n    global graph\n    result = 1\n    for neighbor in range(len(graph)):\n        if graph[node][neighbor] == color and neighbor != parent:\n            child_result = dfs(neighbor, color, node)\n            result += child_result\n            result %= modulo\n    return result\n\ntotal_sum = 0\nfor node in range(n):\n    for color in range(1, 301):\n        if graph[node][node] == color:\n            total_sum += dfs(node, color, -1)\n\nprint(total_sum % modulo)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953369498252869,
            0.9947986602783203,
            0.9962537884712219,
            0.9949208498001099,
            0.9950157999992371,
            0.9965338706970215,
            0.996030330657959,
            0.9948981404304504,
            0.9962159991264343,
            0.9951742887496948,
            0.9962056875228882,
            0.9944291710853577,
            0.9931579232215881,
            0.99246746301651,
            0.9961126446723938,
            0.9957900643348694,
            0.9957617521286011,
            0.9951224327087402,
            0.9952057600021362,
            0.9956623911857605
        ]
    },
    "3392": {
        "similarity": 0.9978803396224976,
        "body": "    n = int(input())\n    heights = []\n    growths = []\n\n    for _ in range(n):\n        row_heights = list(map(int, input().split()))\n        heights.append(row_heights)\n\n    for _ in range(n):\n        row_growths = list(map(int, input().split()))\n        growths.append(row_growths)\n\n    max_group_size = 0\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n        nonlocal max_group_size\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return\n        if heights[x][y] != height or visited[x][y]:\n            return\n        visited[x][y] = True\n        group_size += 1\n        for dx, dy in directions:\n            dfs(x + dx, y + dy, height)\n\n    for x in range(n):\n        for y in range(n):\n            visited = [[False] * n for _ in range(n)]\n            group_size = 0\n            dfs(x, y, heights[x][y])\n            max_group_size = max(max_group_size, group_size)\n\n    print(max_group_size)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970833659172058,
            0.9973594546318054,
            0.9975676536560059,
            0.997434139251709,
            0.9970942139625549,
            0.9972776174545288,
            0.997740626335144,
            0.9971888661384583,
            0.9944660067558289,
            0.9950019717216492,
            0.9973321557044983,
            0.9976736307144165,
            0.9960457682609558,
            0.9974448680877686,
            0.9962881207466125,
            0.9953030347824097,
            0.9962760806083679,
            0.9960618615150452,
            0.996435284614563,
            0.9978803396224976
        ]
    },
    "3095": {
        "similarity": 0.9966396689414978,
        "body": "    r, s = map(int, input().split())\n    a = []\n    for _ in range(r):\n        a.append(list(map(int, input().split())))\n\n        return (a[r1][c1] + a[r2][s-1]) <= (a[r1][s-1] + a[r2][c1])\n\n    max_size = 0\n    for i in range(r-1):\n        for j in range(s-1):\n            size = min(i+2, s-j) * min(j+2, r-i)\n            for k in range(size):\n                if not is_cool(a, i, j+k, i+k, j):\n                    break\n            else:\n                max_size = max(max_size, size)\n\n    print(max_size)\n\nmax_cool_submatrix()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949792623519897,
            0.9960366487503052,
            0.9964473247528076,
            0.9941022992134094,
            0.9964533448219299,
            0.9954823851585388,
            0.9940435290336609,
            0.9928151369094849,
            0.99631267786026,
            0.9952919483184814,
            0.9950080513954163,
            0.9963767528533936,
            0.9933965802192688,
            0.9945801496505737,
            0.9944933652877808,
            0.9931755065917969,
            0.9964596629142761,
            0.9953174591064453,
            0.9951320290565491,
            0.9966396689414978
        ]
    },
    "3769": {
        "similarity": 0.9957219362258911,
        "body": "    MOD = int(1e9 + 7)\n    total = pow(p, p, MOD)\n    curr = pow(k, p - 2, MOD)\n    for i in range(2, p):\n        curr = (curr * i) % MOD\n        if curr == 0:\n            break\n    return (total - curr) % MOD\n\np, k = map(int, input().split())\nprint(count_functions(p, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930993914604187,
            0.9931909441947937,
            0.9927684664726257,
            0.9905123710632324,
            0.9953418374061584,
            0.9938777089118958,
            0.9947314858436584,
            0.9916170239448547,
            0.9940565824508667,
            0.9870661497116089,
            0.9939894676208496,
            0.9929783344268799,
            0.9943901896476746,
            0.9911265969276428,
            0.9957219362258911,
            0.9949377179145813,
            0.9901891946792603,
            0.9937692284584045,
            0.9920077919960022,
            0.99468594789505
        ]
    },
    "3563": {
        "similarity": 0.9949764609336853,
        "body": "import sys\n\n    n = int(sys.stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().strip().split())\n        points.append((x, y))\n\n    hull = [points[0]]\n    for i in range(1, len(points)):\n        while len(hull) > 1 and cross(hull[-2], hull[-1], points[i]) <= 0:\n            hull.pop()\n        hull.append(points[i])\n\n    return len(hull)\n\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0])\n\nprint(convex_hull([]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903275370597839,
            0.992743968963623,
            0.9946478605270386,
            0.9945014119148254,
            0.9911131858825684,
            0.9941300749778748,
            0.9935387969017029,
            0.9948453307151794,
            0.9937425255775452,
            0.9919092059135437,
            0.99135822057724,
            0.9915822744369507,
            0.9931045174598694,
            0.9949764609336853,
            0.9942806959152222,
            0.9933650493621826,
            0.9926177859306335,
            0.9926502108573914,
            0.9847102761268616,
            0.9922853708267212
        ]
    },
    "3618": {
        "similarity": 0.9952986836433411,
        "body": "    mod = 998244353\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        dp[i] = (dp[i - 1] * 6) % mod\n        if i >= 2:\n            dp[i] -= ((dp[i - 2] * 3) % mod)\n            dp[i] %= mod\n\n    return dp[n]\n\nprint(count_best_friend_pairs(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939724802970886,
            0.9901064038276672,
            0.9952986836433411,
            0.9950131177902222,
            0.9919279217720032,
            0.9925898313522339,
            0.9841377139091492,
            0.9944658875465393,
            0.9869521260261536,
            0.9921525716781616,
            0.9943273663520813,
            0.9909505248069763,
            0.9892008900642395,
            0.9935126304626465,
            0.9937421083450317,
            0.9923063516616821,
            0.9919486045837402,
            0.9936882853507996,
            0.9939503073692322,
            0.9948019981384277
        ]
    },
    "3830": {
        "similarity": 0.9968621134757996,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        returnable_rooms = 0\n        current_room = 0\n        for i in range(n):\n            if s[i] == '-':\n                continue\n            elif s[i] == '<' and current_room > 0:\n                current_room -= 1\n            elif s[i] == '>' and current_room < n - 1:\n                current_room += 1\n            else:\n                break\n        else:\n            returnable_rooms = 1\n        print(returnable_rooms)\ncount_returnable_rooms()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947319030761719,
            0.996181070804596,
            0.9953943490982056,
            0.9963234663009644,
            0.9966333508491516,
            0.9915277361869812,
            0.9922614693641663,
            0.9968621134757996,
            0.9965303540229797,
            0.994931697845459,
            0.9965696930885315,
            0.9958113431930542,
            0.9965033531188965,
            0.9953275918960571,
            0.9941789507865906,
            0.9949988126754761,
            0.9961889386177063,
            0.9957929849624634,
            0.9957562685012817,
            0.9956590533256531
        ]
    },
    "3912": {
        "similarity": 0.9969087243080139,
        "body": "    n = int(input())\n    s = input()\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n\n    odd_count = sum(v % 2 != 0 for v in char_count.values())\n\n    if odd_count > 1:\n        print(-1)\n        return\n\n    min_palindromes = (n + 1) // 2\n    palindrome_parts = []\n\n    for i in range(0, n, min_palindromes):\n        part = ''\n        j = i\n        while len(part) < min_palindromes:\n            if s[j] not in char_count or char_count[s[j]] == 0:\n                break\n            else:\n                char_count[s[j]] -= 1\n                part += s[j]\n                j -= 1\n        palindrome_parts.append(part)\n\n    print(len(palindrome_parts))\n    print(*palindrome_parts)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994939386844635,
            0.9933214783668518,
            0.9966228008270264,
            0.9946992993354797,
            0.9841241240501404,
            0.9969087243080139,
            0.9959339499473572,
            0.9967701435089111,
            0.9967328906059265,
            0.99651700258255,
            0.9948557019233704,
            0.9966235160827637,
            0.9963041543960571,
            0.9946286082267761,
            0.9955372214317322,
            0.995982825756073,
            0.9955492615699768,
            0.9943391680717468,
            0.9960294961929321,
            0.9954314231872559
        ]
    },
    "3878": {
        "similarity": 0.9981385469436646,
        "body": "    n, m = map(int, input().split())\n    friends = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        friends[u].append(v)\n        friends[v].append(u)\n\n    selected = []\n    steps = 0\n    visited = [False] * (n + 1)\n\n        if visited[node]:\n            return\n        visited[node] = True\n        for friend in friends[node]:\n            dfs(friend)\n\n    while not all(visited):\n        node = next((x for x, v in enumerate(visited) if not v), None)\n        if node is None:\n            break\n        selected.append(node)\n        dfs(node)\n        steps += 1\n\n    print(steps)\n    print(*selected)\n\nmin_steps()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967271685600281,
            0.9972440004348755,
            0.9971222281455994,
            0.997475802898407,
            0.9965043663978577,
            0.9964482188224792,
            0.9969752430915833,
            0.9963454008102417,
            0.997836172580719,
            0.9969109296798706,
            0.9979596734046936,
            0.9978325366973877,
            0.9978794455528259,
            0.9979928731918335,
            0.9970080852508545,
            0.9975340962409973,
            0.9975318908691406,
            0.9981385469436646,
            0.9972809553146362,
            0.9971978068351746
        ]
    },
    "3010": {
        "similarity": 0.9968377947807312,
        "body": "    intersections = set()\n    for _ in range(int(input())):\n        x0, y0, x1, y1 = map(int, input().split())\n        if x0 == x1:\n            continue\n        m = (y1 - y0) / (x1 - x0)\n        b = y0 - m * x0\n        for x in range(min(x0, x1), max(x0, x1) + 1):\n            y = int(m * x + b)\n            intersections.add((x, y))\n    print(len(intersections))\n\ncount_intersections()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944952130317688,
            0.995021402835846,
            0.9958570599555969,
            0.995542049407959,
            0.9949216246604919,
            0.993424654006958,
            0.9957071542739868,
            0.993691623210907,
            0.9968377947807312,
            0.9936527609825134,
            0.993752658367157,
            0.996311604976654,
            0.9958811402320862,
            0.9949399828910828,
            0.9911275506019592,
            0.9958272576332092,
            0.9959191083908081,
            0.9921031594276428,
            0.9957520365715027,
            0.9940693378448486
        ]
    },
    "3068": {
        "similarity": 0.9956005811691284,
        "body": "    n = int(input())\n    suspects = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    hands = [{}, {}]\n    solutions = 0\n\n    for _ in range(n):\n        suspect1, suspect2, player, reply = input().split()\n        hand = hands[int(player) - 1]\n        hand[suspect1] = hand.get(suspect1, 0) + 1\n        hand[suspect2] = hand.get(suspect2, 0) + 1\n\n        if reply == '0':\n            suspects.discard(suspect1)\n            suspects.discard(suspect2)\n\n    for solution in combinations(suspects, 3):\n        valid_solution = True\n        for player in hands:\n            hand_count = sum(player[s] for s in solution)\n            if hand_count < 2 or hand_count > 0 and reply != '1':\n                valid_solution = False\n                break\n        if valid_solution:\n            solutions += 1\n\n    print(solutions)\n\nif __name__ == '__main__':\n    count_admissible_solutions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942968487739563,
            0.9926565289497375,
            0.9955184459686279,
            0.993330180644989,
            0.9948629140853882,
            0.9948009848594666,
            0.9955398440361023,
            0.9938426613807678,
            0.9949612021446228,
            0.9929918050765991,
            0.9914278984069824,
            0.9955946207046509,
            0.9956005811691284,
            0.9949129223823547,
            0.9934228658676147,
            0.99413001537323,
            0.9949117302894592,
            0.9924839735031128,
            0.9936954379081726,
            0.9922417402267456
        ]
    },
    "3030": {
        "similarity": 0.996884286403656,
        "body": "    n = int(input())\n    values = [0] * (n + 1)\n    for i in range(1, n + 1):\n        v, p = map(int, input().split())\n        values[i] = v\n    heap_size = 0\n    for i in range(n, 0, -1):\n        if values[i] > values[values[i]]:\n            values[i], values[p] = values[p], values[i]\n            heap_size += 1\n    print(heap_size)\n\nif __name__ == \"__main__\":\n    max_heap_nodes()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917580485343933,
            0.9964005351066589,
            0.9964966177940369,
            0.9965024590492249,
            0.9943494200706482,
            0.996884286403656,
            0.9963013529777527,
            0.9963077902793884,
            0.9967671632766724,
            0.9948443174362183,
            0.9953173398971558,
            0.993554949760437,
            0.991300106048584,
            0.9964503049850464,
            0.996484637260437,
            0.9937695860862732,
            0.9966586232185364,
            0.9953504800796509,
            0.9948678612709045,
            0.9966177940368652
        ]
    },
    "3630": {
        "similarity": 0.9966685771942139,
        "body": "s1, s2 = input().split()\nmoves = 0\nfor i in range(len(s1)):\n    if s1[i] != s2[i]:\n        if ord(s1[i]) < ord('z') and ord(s2[i]) > ord('a'):\n            moves += ord(s2[i]) - ord(s1[i])\n        elif ord(s1[i]) > ord('a') and ord(s2[i]) < ord('z'):\n            moves += ord(s1[i]) - ord(s2[i])\n        else:\n            moves += 26\nprint(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929448962211609,
            0.9962624311447144,
            0.995508074760437,
            0.9956600069999695,
            0.9966685771942139,
            0.9958512187004089,
            0.9958425164222717,
            0.9953253865242004,
            0.9932261109352112,
            0.995401918888092,
            0.9944666624069214,
            0.9892919659614563,
            0.996532142162323,
            0.9964423179626465,
            0.9961724877357483,
            0.9964382648468018,
            0.9954755902290344,
            0.995429515838623,
            0.9960325956344604,
            0.9964545369148254
        ]
    },
    "3133": {
        "similarity": 0.9958744049072266,
        "body": "    n, a, b = map(int, input().split())\n    intersections = [[] for _ in range(n)]\n    tower_positions = [False] * n\n\n    for i in range(n):\n        l, r, t = map(int, input().split())\n        intersections[i] = (l, r)\n        tower_positions[i] = bool(t)\n\n        if start == a or start == b:\n            return 0\n        left, right = intersections[start]\n        left_path = explore(left, path + [(left, 'L')])\n        right_path = explore(right, path + [(right, 'R')])\n        if tower_positions[left]:\n            return left_path\n        elif tower_positions[right]:\n            return right_path\n        else:\n            return float('inf')\n\n    alice_path = explore(a, [])\n    bob_path = explore(b, [])\n\n    if min(alice_path, bob_path) == float('inf'):\n        print(\"indistinguishable\")\n    else:\n        print(min(alice_path, bob_path))\n\nsolve_intersection_problem()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926679730415344,
            0.9938012957572937,
            0.9948387145996094,
            0.9939306378364563,
            0.9953538775444031,
            0.9918463826179504,
            0.9942755699157715,
            0.9935559630393982,
            0.9958744049072266,
            0.9949216246604919,
            0.9955039024353027,
            0.9946361184120178,
            0.9942052960395813,
            0.9884382486343384,
            0.9951698184013367,
            0.9950015544891357,
            0.9958349466323853,
            0.9917433857917786,
            0.9941853880882263,
            0.995006263256073
        ]
    },
    "3480": {
        "similarity": 0.9971910715103149,
        "body": "    L, D = map(int, input().split())\n    for _ in range(L):\n        line1 = input().strip()\n        durations = list(map(int, input().split()))\n        delay = 0\n        line2 = ''\n        for i, duration in enumerate(durations):\n            if i == 0:\n                delay += duration - D\n            else:\n                delay += duration\n            syllable = line1[i] + '_' * max(0, delay // durations[0])\n            line2 += syllable\n            print(line1)\n            print('=' * len(syllable))\n        print('=' * (len(line2) - 1))\n\nsing_round()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967826008796692,
            0.9967663288116455,
            0.9923733472824097,
            0.9928520917892456,
            0.9953488707542419,
            0.9965983033180237,
            0.9954316020011902,
            0.9950112700462341,
            0.9943850636482239,
            0.9971910715103149,
            0.9948750734329224,
            0.9967111349105835,
            0.9965592622756958,
            0.9965028166770935,
            0.9969494342803955,
            0.9951143860816956,
            0.9962453246116638,
            0.9959504008293152,
            0.9931034445762634,
            0.9967797994613647
        ]
    },
    "3389": {
        "similarity": 0.9969782829284668,
        "body": "    n, k = map(int, input().split())\n    videos = input()\n    clicks = 0\n    prev_type = ''\n    for i in range(n):\n        if videos[i] != prev_type:\n            clicks += 1\n        prev_type = videos[i]\n    print(clicks)\n\nmin_clicks()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969782829284668,
            0.9964293241500854,
            0.9967067241668701,
            0.993843674659729,
            0.994575023651123,
            0.9958811402320862,
            0.9963155388832092,
            0.9969044923782349,
            0.9963774681091309,
            0.9959191679954529,
            0.9965053200721741,
            0.9952627420425415,
            0.9898692965507507,
            0.9961023926734924,
            0.9954206347465515,
            0.9949365854263306,
            0.9958981871604919,
            0.9938121438026428,
            0.9967169761657715,
            0.9927789568901062
        ]
    },
    "3925": {
        "similarity": 0.9974686503410339,
        "body": "    n = len(s)\n    max_len = 0\n    curr_len = 1\n\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n\n    max_len = max(max_len, curr_len)\n\n    return max_len\n\ns = input()\nprint(max_zebra_length(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995999813079834,
            0.9974192380905151,
            0.9971324801445007,
            0.9970317482948303,
            0.9939137697219849,
            0.9966944456100464,
            0.9974686503410339,
            0.9963139891624451,
            0.997200608253479,
            0.9968688488006592,
            0.9973843097686768,
            0.9966079592704773,
            0.9961427450180054,
            0.9943639636039734,
            0.9939970970153809,
            0.9960973858833313,
            0.9964223504066467,
            0.9974657297134399,
            0.9963366985321045,
            0.9948416352272034
        ]
    },
    "3700": {
        "similarity": 0.9983764290809631,
        "body": "    ways = 0\n    for i in range(1, n + 1):\n        if i <= k and k - i < n:\n            ways += 1\n    return ways\n\nn, k = map(int, input().split())\nprint(count_ways(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9983764290809631,
            0.9983534812927246,
            0.9964101910591125,
            0.9981434345245361,
            0.9973911643028259,
            0.9976768493652344,
            0.9957490563392639,
            0.9975069165229797,
            0.9982678294181824,
            0.9977660179138184,
            0.9982653260231018,
            0.996262788772583,
            0.9977555871009827,
            0.9967818260192871,
            0.9981404542922974,
            0.9981781840324402,
            0.9950706362724304,
            0.9960130453109741,
            0.9981741905212402,
            0.9954853057861328
        ]
    },
    "3944": {
        "similarity": 0.9953387379646301,
        "body": "MODULO = 10**9 + 7\n\nn, m, k = map(int, input().split())\n\n    dp = [[[0] * (m + 1) for _ in range(k + 1)] for __ in range(n + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for l in range(k + 1):\n                if i < n:\n                    dp[i + 1][j][l] += dp[i][j][l]\n                    dp[i + 1][j][l] %= MODULO\n                if j < m:\n                    dp[i][j + 1][l] += dp[i][j][l]\n                    dp[i][j + 1][l] %= MODULO\n                if l < k:\n                    dp[i][j][l + 1] += dp[i][j][l]\n                    dp[i][j][l + 1] %= MODULO\n\n    return sum(sum(sum(dp[n])) for n in range(n + 1)) % MODULO\n\nprint(count_patterns(n, m, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922479391098022,
            0.993078351020813,
            0.9945451617240906,
            0.9907829761505127,
            0.9877725839614868,
            0.9928088188171387,
            0.9924924969673157,
            0.9927107095718384,
            0.9944233298301697,
            0.9931747913360596,
            0.993230938911438,
            0.9898099303245544,
            0.9919198751449585,
            0.9925258159637451,
            0.9922716021537781,
            0.9943643808364868,
            0.9934698343276978,
            0.9936646223068237,
            0.9953387379646301,
            0.9937619566917419
        ]
    },
    "3821": {
        "similarity": 0.9941269755363464,
        "body": "import sys\n\nn = int(input())\np = list(map(float, input().split()))\n\nmax_prob = max(p)\nif len([x for x in p if x == max_prob]) > 1:\n    prob = sum(x * (1 - y) for x, y in zip(p, p[1:] + [0]))\nelse:\n    prob = max_prob\nprint(f\"{prob:.12f}\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9941269755363464,
            0.9904500246047974,
            0.9925094246864319,
            0.9937953948974609,
            0.9933903217315674,
            0.9938682913780212,
            0.9934337139129639,
            0.9809781312942505,
            0.9875498414039612,
            0.9868903160095215,
            0.9919686913490295,
            0.9897264242172241,
            0.9933333992958069,
            0.9919691681861877,
            0.9936934113502502,
            0.9876937866210938,
            0.9925497174263,
            0.9915777444839478,
            0.988784670829773,
            0.9898051023483276
        ]
    },
    "3667": {
        "similarity": 0.9971200823783875,
        "body": "    w, p = map(int, input().split())\n    wells = [tuple(map(int, input().split())) for _ in range(w)]\n    pipes = []\n    for _ in range(p):\n        s, x, y = map(int, input().split())\n        start_well = (x, y)\n        end_well = wells[s - 1]\n        pipes.append((start_well, end_well))\n\n    intersections = set()\n    for pipe in pipes:\n        if len(pipe) > 2:\n            print(\"impossible\")\n            return\n        elif len(pipe) == 2 and pipe[0] != pipe[1]:\n            intersections.add(pipe)\n\n    if len(intersections) % 2 == 1:\n        print(\"impossible\")\n    else:\n        print(\"possible\")\n\nverify_cleaning_possible()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970619678497314,
            0.9958968162536621,
            0.9946602582931519,
            0.9961041212081909,
            0.9966979026794434,
            0.9950928092002869,
            0.9968521595001221,
            0.9945078492164612,
            0.9969416260719299,
            0.9971200823783875,
            0.9958885908126831,
            0.9955630302429199,
            0.9954745769500732,
            0.9960152506828308,
            0.9952808022499084,
            0.9961164593696594,
            0.9965676069259644,
            0.996343731880188,
            0.9965800046920776,
            0.994669497013092
        ]
    },
    "3959": {
        "similarity": 0.9972321391105652,
        "body": "    mod = 10**9 + 7\n\n    # Read input\n    n, m = map(int, input().split())\n    gyms = [list(map(int, input().split()))[1:] for _ in range(n)]\n\n    # Count Pokemon types in each gym\n    types_in_gym = []\n    for gym in gyms:\n        type_count = [0] * m\n        for pokemon_type in gym:\n            type_count[pokemon_type - 1] += 1\n        types_in_gym.append(type_count)\n\n    # Check if a valid evolution plan exists\n    valid_plan_found = False\n    for f in permutations(range(m)):\n        if all(sum(gym[i - 1] == f[j] + 1 for j, i in enumerate(f)) == sum(gym) for gym in types_in_gym):\n            valid_plan_found = True\n            break\n\n    # Count distinct evolution plans\n    if not valid_plan_found:\n        return 0\n    else:\n        distinct_plans = set()\n        for f in permutations(range(m)):\n            if all(sum(gym[i - 1] == f[j] + 1 for j, i in enumerate(f)) == sum(gym) for gym in types_in_gym):\n                distinct_plans.add(f)\n        return len(distinct_plans) % mod\n\n# Run the function\nprint(count_evolution_plans())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964991211891174,
            0.9964141845703125,
            0.9965300559997559,
            0.996551513671875,
            0.9962947368621826,
            0.9970899820327759,
            0.9967650175094604,
            0.9965745806694031,
            0.9960439801216125,
            0.9965262413024902,
            0.9968296885490417,
            0.9955530762672424,
            0.9936479330062866,
            0.9965864419937134,
            0.9959769248962402,
            0.996942937374115,
            0.9956910014152527,
            0.9972321391105652,
            0.9967109560966492,
            0.9959496855735779
        ]
    },
    "3692": {
        "similarity": 0.9974884390830994,
        "body": "    n = int(input())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n\n    regions = 1\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            d = ((circles[i][0] - circles[j][0]) ** 2 + (circles[i][1] - circles[j][1]) ** 2) ** 0.5\n            if circles[i][2] <= d <= circles[j][2]:\n                regions += 1\n\n    print(regions)\n\nif __name__ == \"__main__\":\n    count_regions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970210194587708,
            0.9971124529838562,
            0.9961374998092651,
            0.9973119497299194,
            0.997067391872406,
            0.9971367716789246,
            0.9973267316818237,
            0.9967595338821411,
            0.9974576830863953,
            0.9968418478965759,
            0.9971036314964294,
            0.9969388842582703,
            0.9922740459442139,
            0.9946891665458679,
            0.9969536662101746,
            0.9934439659118652,
            0.9960243105888367,
            0.9971741437911987,
            0.9974884390830994,
            0.9860597252845764
        ]
    },
    "3894": {
        "similarity": 0.995155930519104,
        "body": "    a = list(map(int, input().split()))[1:]\n    turn = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            turn += 1\n        elif a[i] > 2 * k:\n            a[i] //= 2\n            turn += 1\n    print(\"Kevin\" if turn % 2 == 0 else \"Nicky\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935056567192078,
            0.9942530393600464,
            0.9939984679222107,
            0.9929978251457214,
            0.995155930519104,
            0.9943487048149109,
            0.9920439720153809,
            0.9951378703117371,
            0.9945324659347534,
            0.9911851286888123,
            0.9947880506515503,
            0.9938108325004578,
            0.9950807690620422,
            0.9942052960395813,
            0.995040774345398,
            0.9939182996749878,
            0.991300106048584,
            0.9914632439613342,
            0.9921202659606934,
            0.9924442768096924
        ]
    },
    "3856": {
        "similarity": 0.9974297285079956,
        "body": "    friends = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        friends.append((w, h))\n    friends.sort()\n    standing = [friend[0] for friend in friends]\n    lying = [friend[1] for friend in friends]\n    max_lying = n // 2\n    min_area = float('inf')\n    for i in range(n + 1):\n        standing_width = sum(standing[:i])\n        if i <= max_lying:\n            lying_width = sum(lying[i:])\n        else:\n            lying_width = sum(sorted(lying[i:], reverse=True)[:max_lying - i + 1])\n        area = (max(standing_width, lying_width)) * max(len(standing), len(lying))\n        min_area = min(min_area, area)\n    print(min_area)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968195557594299,
            0.9953256845474243,
            0.9965348839759827,
            0.996926486492157,
            0.996944010257721,
            0.9965139031410217,
            0.9936408996582031,
            0.9961141347885132,
            0.9963823556900024,
            0.9964253306388855,
            0.9957337975502014,
            0.9974297285079956,
            0.995063304901123,
            0.9966850280761719,
            0.996884822845459,
            0.9969800710678101,
            0.9951456189155579,
            0.996576726436615,
            0.9967278242111206,
            0.997046709060669
        ]
    },
    "3282": {
        "similarity": 0.9970148801803589,
        "body": "    import sys\n    P = int(sys.stdin.readline())\n\n    bills = []\n    for beverage in range(1, P):\n        if any(digit == str(P)[:-i] for digit in str(beverage)):\n            continue\n        main_dish = P - beverage\n        if any(digit == str(P)[:-i] for digit in str(main_dish)):\n            continue\n        bill = sorted([beverage, main_dish])\n        bills.append(bill)\n\n    unique_bills = []\n    for bill in bills:\n        if bill not in unique_bills:\n            unique_bills.append(bill)\n\n    print(len(unique_bills))\n    print('\\n'.join(' '.join(map(str, bill)) for bill in unique_bills[:5000]))\n\nmax_free_desserts()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956392049789429,
            0.9963264465332031,
            0.9963038563728333,
            0.9962106347084045,
            0.9965008497238159,
            0.9960718750953674,
            0.9955217242240906,
            0.9950665831565857,
            0.9950926899909973,
            0.9965251088142395,
            0.9965175986289978,
            0.9960953593254089,
            0.9948131442070007,
            0.9960602521896362,
            0.9932899475097656,
            0.9964109063148499,
            0.9970148801803589,
            0.9970090985298157,
            0.9968088865280151,
            0.9963151812553406
        ]
    },
    "3596": {
        "similarity": 0.9975656270980835,
        "body": "import math\n\n    a, b, c = map(float, input().split())\n    t1, t2, t3, t4 = map(int, input().split())\n    n, k, r, s, l = map(int, input().split())\n\n        return math.gamma(z)\n\n        return 0.5 * (1 - math.exp(-x**2))\n\n        return math.cos(nu * math.acos(x / math.sqrt(1 + x ** 2)))\n\n        return c * ((t1 * gamma(x) + x**(-t2 / t3)) - (bessel_j(k, x)**t4))\n\n    p0 = sum(f(i) / math.factorial(i) for i in range(r + 1))\n    p_n = p0\n    for _ in range(n):\n        p_n = sum(p_n(i) * i**i for i in range(r + _ + 1))\n\n    g = p_s\n    for _ in range(math.deg(g) + 1):\n        g = g.derivative()\n\n    location = (g(l) + l)**2 / math.pi / math.e + 1 / (l + 1)\n    print(round(location, 2))\n\ncalculate_location()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975656270980835,
            0.9967870116233826,
            0.9974043965339661,
            0.9968103170394897,
            0.997189462184906,
            0.9969240427017212,
            0.9963840842247009,
            0.9969261884689331,
            0.9933632612228394,
            0.9972850680351257,
            0.9957166910171509,
            0.9963278770446777,
            0.996384859085083,
            0.9968231916427612,
            0.9958724975585938,
            0.9961990714073181,
            0.9966115355491638,
            0.9970486164093018,
            0.9962981343269348,
            0.9973690509796143
        ]
    },
    "3540": {
        "similarity": 0.997282862663269,
        "body": "    grid = [list(input()) for _ in range(4)]\n    moves = 0\n    for i in range(4):\n        target_row = ['R', 'G', 'B', 'Y'][i]\n        for j in range(4):\n            if grid[i][j] != target_row:\n                moves += abs(j - (grid[i].index(target_row) % 4))\n                    grid[i] = grid[i][1:] + [grid[i][0]]\n    print(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.997282862663269,
            0.9963540434837341,
            0.9950264692306519,
            0.9970723986625671,
            0.995826244354248,
            0.9963773488998413,
            0.996376633644104,
            0.9970069527626038,
            0.9965099692344666,
            0.995034396648407,
            0.9961206316947937,
            0.9968162178993225,
            0.9968315958976746,
            0.9956213235855103,
            0.9963018298149109,
            0.996587872505188,
            0.9967309832572937,
            0.9949085116386414,
            0.9968301057815552,
            0.9952706098556519
        ]
    },
    "3354": {
        "similarity": 0.9953585267066956,
        "body": "    s, r, n, z = map(float, input().split())\n    area_sandwich = math.pi * s ** 2\n    area_pickle = math.pi * r ** 2\n    max_area_pickles = (z / 100) * area_sandwich\n    num_pickles = min(n, int(max_area_pickles / area_pickle))\n    print(num_pickles)\n\nif __name__ == '__main__':\n    calculate_pickles()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918831586837769,
            0.994010329246521,
            0.9926639199256897,
            0.9952968955039978,
            0.9947102069854736,
            0.9924818277359009,
            0.9937224388122559,
            0.9918469190597534,
            0.9953585267066956,
            0.9952238202095032,
            0.991146981716156,
            0.9944859743118286,
            0.9930890798568726,
            0.9936463236808777,
            0.9942590594291687,
            0.9935551881790161,
            0.9947820901870728,
            0.9924477338790894,
            0.9951097369194031,
            0.9922523498535156
        ]
    },
    "3217": {
        "similarity": 0.9948236346244812,
        "body": "    num_cells = int(input())\n    for _ in range(num_cells):\n        x, y, z = map(int, input().split())\n\n    panels = 0\n    min_x, max_x, min_y, max_y, min_z, max_z = float('inf'), float('-inf'), float('inf'), float('-inf'), float('inf'), float('-inf')\n\n    for cell in defective_cells:\n        x, y, z = cell\n        min_x = min(min_x, x)\n        max_x = max(max_x, x)\n        min_y = min(min_y, y)\n        max_y = max(max_y, y)\n        min_z = min(min_z, z)\n        max_z = max(max_z, z)\n\n    panels += (max_x - min_x + 1) * (max_y - min_y + 1) * (max_z - min_z + 1)\n\n    print(panels)\n\ncalculate_panels()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915287494659424,
            0.9919628500938416,
            0.9928867816925049,
            0.9915036559104919,
            0.994006335735321,
            0.9943211078643799,
            0.9936462044715881,
            0.9888913035392761,
            0.9948236346244812,
            0.9908149242401123,
            0.9924722909927368,
            0.9898223876953125,
            0.9942033886909485,
            0.9940206408500671,
            0.9915879964828491,
            0.9897446036338806,
            0.9942163228988647,
            0.994642972946167,
            0.9939523339271545,
            0.991977870464325
        ]
    },
    "3520": {
        "similarity": 0.9975365400314331,
        "body": "import sys\n\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, sys.stdin.readline().split())\n        pills.append((t, x, y))\n\n    curr_time = 0\n    max_age = 0\n    for pill in pills:\n        if pill[0] <= curr_time + c:\n            curr_time += pill[1]\n        else:\n            curr_time = pill[0] - c\n\n    return min(n, curr_time)\n\nprint(max_life(*map(int, sys.stdin.readline().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970283508300781,
            0.9958375692367554,
            0.9963338971138,
            0.9966229796409607,
            0.9927516579627991,
            0.9972932934761047,
            0.9974284768104553,
            0.9967737793922424,
            0.9969149231910706,
            0.9967905282974243,
            0.9959304332733154,
            0.9972111582756042,
            0.996687114238739,
            0.9974927306175232,
            0.9968691468238831,
            0.9975365400314331,
            0.9969038963317871,
            0.9969894289970398,
            0.9929755330085754,
            0.9971520304679871
        ]
    },
    "3475": {
        "similarity": 0.9971634745597839,
        "body": "    t, n = map(int, input().split())\n    transport = []\n    for _ in range(t):\n        d_min, r_max = map(int, input().split())\n        transport.append((d_min, r_max * 0.001))\n\n    points = [tuple(map(int, input().split())) for _ in range(n - 1)]\n\n    switches = []\n    i = 0\n    while i < n - 1:\n        curr_type = None\n        total_dist = 0\n        for j in range(i, n - 1):\n            dist, heading = points[j]\n            if curr_type is None or abs(heading) <= curr_type[1]:\n                total_dist += dist\n                if total_dist >= curr_type[0] if curr_type else 0:\n                    switches.append(j)\n                    break\n            elif j == i:\n                return print(\"IMPOSSIBLE\")\n        i = switches[-1] + 1\n\n    print(len(switches))\n\nfind_switches()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966364502906799,
            0.9958246946334839,
            0.996133029460907,
            0.9964706897735596,
            0.9963459372520447,
            0.9953948855400085,
            0.9950653910636902,
            0.9961603879928589,
            0.996985912322998,
            0.9909462332725525,
            0.9967086315155029,
            0.9949314594268799,
            0.9959120750427246,
            0.9958620667457581,
            0.9971634745597839,
            0.9964328408241272,
            0.9965404868125916,
            0.9950074553489685,
            0.9967253804206848,
            0.9957159757614136
        ]
    },
    "3977": {
        "similarity": 0.9963455200195312,
        "body": "import sys\n\n    n, m, k = map(int, sys.stdin.readline().split())\n    c = list(map(int, sys.stdin.readline().split()))\n    edges = [tuple(map(int, sys.stdin.readline().split())) for _ in range(m)]\n\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    visited = [False] * n\n    max_edges = 0\n\n        nonlocal max_edges\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n            elif c[node] != c[neighbor]:\n                max_edges += 1\n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n\n    print(max_edges)\n\ncount_edges()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955465197563171,
            0.9957570433616638,
            0.99590003490448,
            0.9949905276298523,
            0.9960230588912964,
            0.9948498606681824,
            0.9960905313491821,
            0.9933376312255859,
            0.9949522614479065,
            0.9938502907752991,
            0.995499849319458,
            0.9958558678627014,
            0.9956414103507996,
            0.9947618246078491,
            0.9959620237350464,
            0.9950408935546875,
            0.9961653351783752,
            0.9943566918373108,
            0.9950078725814819,
            0.9963455200195312
        ]
    },
    "3626": {
        "similarity": 0.9974135160446167,
        "body": "    n = int(input())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        rectangles.append((x1, y1, x2, y2))\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if not (rectangles[i][0] <= rectangles[j][0] < rectangles[i][1]) and \\\n               not (rectangles[i][2] >= rectangles[j][2] > rectangles[i][3]):\n                print(1)\n                return\n\n    print(0)\n\ncheck_intersection()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943622946739197,
            0.9971819519996643,
            0.9957210421562195,
            0.9969356060028076,
            0.995243489742279,
            0.9971542358398438,
            0.9974135160446167,
            0.9961004853248596,
            0.9885837435722351,
            0.9963053464889526,
            0.994792640209198,
            0.9966888427734375,
            0.995600163936615,
            0.9972440004348755,
            0.9969698190689087,
            0.9955175518989563,
            0.994846761226654,
            0.9971253275871277,
            0.9970960021018982,
            0.9964881539344788
        ]
    },
    "3584": {
        "similarity": 0.9975971579551697,
        "body": "    n, m, k = map(int, input().split())\n    onions = [tuple(map(int, input().split())) for _ in range(n)]\n    posts = sorted([tuple(map(int, input().split())) for _ in range(m)], key=lambda x: x[0])\n\n        if len(points) < 3:\n            return points\n        hull = []\n        for point in points:\n            while len(hull) > 1 and (point[0] - hull[-2][0]) * (hull[-1][1] - hull[-2][1]) <= (point[1] - hull[-2][1]) * (hull[-1][0] - hull[-2][0]):\n                hull.pop()\n            hull.append(point)\n        return hull\n\n        count = 0\n        for onion in onions:\n            if all(onion[i] <= hull[j][i] for i, j in ((0, 1), (1, -1))) and any(onion[i] > hull[j][i] for i, j in ((0, 1), (1, -1))):\n                count += 1\n        return count\n\n    dp = [0] * (m + 1)\n    for i in range(1, m + 1):\n        hull = convex_hull(posts[:i])\n        while len(hull) > k:\n            hull.pop()\n        dp[i] = max(dp[i], count_protected_onions(hull))\n\n    print(max(dp))\nmax_protectable_onions()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995330810546875,
            0.9962387084960938,
            0.997165858745575,
            0.9969941973686218,
            0.9957417249679565,
            0.9967940449714661,
            0.9967135190963745,
            0.9948810935020447,
            0.9967100024223328,
            0.9967225790023804,
            0.9972788095474243,
            0.9974385499954224,
            0.9970676898956299,
            0.9900974631309509,
            0.9969006776809692,
            0.9975971579551697,
            0.9968340992927551,
            0.9962192177772522,
            0.9971895813941956,
            0.997035801410675
        ]
    },
    "3950": {
        "similarity": 0.9968769550323486,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    segments = [[] for _ in range(n+1)]\n    for i in range(1, q+1):\n        l, r = 0, 0\n        while l < n:\n            if a[l] == i or (l > 0 and a[l-1] != i) or (a[l] == 0 and i <= q):\n                segments[i].append(l)\n                l += 1\n            else:\n                break\n        r = l - 1\n\n    for i in range(1, q+1):\n        if len(segments[i]) < r-i+2:\n            print(\"NO\")\n            return\n\n    result = [0] * n\n    for i in range(1, q+1):\n        for j in segments[i]:\n            result[j-1] = i\n    print(\"YES\")\n    print(*result)\n\nrestore_array()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995916485786438,
            0.9944324493408203,
            0.996641993522644,
            0.9957363605499268,
            0.9967281818389893,
            0.9961676597595215,
            0.9959569573402405,
            0.9968769550323486,
            0.9963294863700867,
            0.9951601624488831,
            0.9961954355239868,
            0.9962483644485474,
            0.9959474205970764,
            0.9957630038261414,
            0.9950109124183655,
            0.9959932565689087,
            0.9961716532707214,
            0.9955781698226929,
            0.9956781268119812,
            0.9960899353027344
        ]
    },
    "3075": {
        "similarity": 0.9981464743614197,
        "body": "    n, g = map(int, input().split())\n    stations = []\n    for _ in range(n):\n        d, c = map(int, input().split())\n        stations.append((d, c))\n\n    curr_gas = 0\n    total_cost = 0\n    for i in range(n):\n        if curr_gas < stations[i][0]:\n            print(\"cancel road trip\")\n            return\n        needed_gas = min(stations[i][0] - curr_gas, g)\n        curr_gas += needed_gas\n        total_cost += needed_gas * stations[i][1]\n\n    print(total_cost)\n\nmin_gas_cost()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9980728030204773,
            0.9980195760726929,
            0.9979400634765625,
            0.9981259107589722,
            0.9981464743614197,
            0.9978610873222351,
            0.9974083304405212,
            0.9967657327651978,
            0.9974875450134277,
            0.9977734088897705,
            0.9980788230895996,
            0.9978708028793335,
            0.9981107115745544,
            0.9971691966056824,
            0.9967209696769714,
            0.9978901743888855,
            0.9954880475997925,
            0.9979516863822937,
            0.9976845979690552,
            0.997564435005188
        ]
    },
    "3711": {
        "similarity": 0.9965073466300964,
        "body": "    cuts = min(k // 2, n - 1)\n    if cuts > k or cuts < 0:\n        return -1\n    area = m * (n - cuts)\n    return area\n\nn, m, k = map(int, input().split())\nprint(max_chocolate_area(n, m, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945600628852844,
            0.9962366819381714,
            0.9927777647972107,
            0.9949889779090881,
            0.9913758039474487,
            0.9926074147224426,
            0.9949920177459717,
            0.9965073466300964,
            0.995879054069519,
            0.9953932762145996,
            0.9953243732452393,
            0.9963569641113281,
            0.9916197061538696,
            0.9955072999000549,
            0.9961401224136353,
            0.995650053024292,
            0.9940344095230103,
            0.9927306771278381,
            0.9905492663383484,
            0.9961710572242737
        ]
    }
}