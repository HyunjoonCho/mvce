{
    "4693": {
        "similarity": 0.994785487651825,
        "body": "A, B = map(int, input().split())\nprint('error' if A + B >= 10 else str(A + B))",
        "result": "passed",
        "similarities": [
            0.9890086650848389,
            0.9945203065872192,
            0.9945433735847473,
            0.9941862225532532,
            0.9942742586135864,
            0.9895550608634949,
            0.994785487651825,
            0.9940082430839539,
            0.9945203065872192,
            0.9941862225532532,
            0.9942742586135864,
            0.9945203065872192,
            0.9907529950141907,
            0.9942742586135864,
            0.9942741394042969,
            0.9925570487976074,
            0.9947696328163147,
            0.9947696328163147,
            0.9945203065872192,
            0.9947696328163147
        ]
    },
    "4077": {
        "similarity": 0.9954500794410706,
        "body": "    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    cnt = [0] * 200005\n    for x in a:\n        if x < m: cnt[x] += 1\n        elif x == m: cnt[x] += 2\n        else: cnt[x] += 1\n\n    ans = 0\n    sum_ = 0\n    i = 0\n    while i <= n-1:\n        if a[i] < m and sum_ + cnt[a[i]] >= (n-i):\n            ans += (sum_+cnt[a[i]]) - (n-i)\n        elif a[i] == m and sum_+cnt[a[i]-1]+2 >= (n-i):\n            ans += (sum_+cnt[a[i]-1]+2) - (n-i)\n        else:\n            ans += 0\n        i = i + cnt[a[i]] if a[i] != m else i + 2\n\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926300048828125,
            0.9946977496147156,
            0.9939262866973877,
            0.994516909122467,
            0.992625892162323,
            0.9913910627365112,
            0.9928905963897705,
            0.9951647520065308,
            0.992512583732605,
            0.9954500794410706,
            0.9864524006843567,
            0.9943165183067322,
            0.9916775226593018,
            0.9949213266372681,
            0.9944085478782654,
            0.9950882792472839,
            0.9938048124313354,
            0.9940540790557861,
            0.9875506162643433,
            0.9948281049728394
        ]
    },
    "4006": {
        "similarity": 0.9972050189971924,
        "body": "    while x > 9 and str(x).count('0') > 0:\n        x = int(str(x).rstrip('0'))\n    return x\n\nn = int(input())\ns = set()\nwhile n not in s:\n    s.add(n)\n    n = f(n)\nprint(len(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965853691101074,
            0.9969851970672607,
            0.9969595074653625,
            0.9924919009208679,
            0.9970258474349976,
            0.9971982836723328,
            0.9970330595970154,
            0.995633065700531,
            0.9970258474349976,
            0.9963895678520203,
            0.9966386556625366,
            0.9971584677696228,
            0.9951180815696716,
            0.9972050189971924,
            0.9971626996994019,
            0.9961166381835938,
            0.9934319257736206,
            0.9951013326644897,
            0.9966465830802917,
            0.9947461485862732
        ]
    },
    "4556": {
        "similarity": 0.9972568154335022,
        "body": "s = input()\nprint(s[0] + chr(ord(s[1]) - 32) + 'C')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964050650596619,
            0.9967271685600281,
            0.9972568154335022,
            0.9970917105674744,
            0.9969215393066406,
            0.9971233010292053,
            0.995789110660553,
            0.9971233010292053,
            0.9971629977226257,
            0.9972180128097534,
            0.9971814751625061,
            0.9971315264701843,
            0.9929136037826538,
            0.9969215393066406,
            0.9972180128097534,
            0.9958465099334717,
            0.9948639273643494,
            0.9939378499984741,
            0.9972568154335022,
            0.989520251750946
        ]
    },
    "4571": {
        "similarity": 0.9945370554924011,
        "body": "    N, M = map(int, input().split())\n    t = (M * 1900) // (1 + 2**N)\n    for i in range(1, N+1):\n        t += i * (1900 * 2**(i-1)) / (2 ** i)\n    print(int(t))\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9893244504928589,
            0.9913856983184814,
            0.9897883534431458,
            0.9939322471618652,
            0.9908009767532349,
            0.9940320253372192,
            0.9918251037597656,
            0.9869403839111328,
            0.9945370554924011,
            0.9937840700149536,
            0.9889718890190125,
            0.9937422871589661,
            0.9907991290092468,
            0.9937039613723755,
            0.9920806884765625,
            0.9936162233352661,
            0.991788387298584,
            0.9905206561088562,
            0.9884399771690369,
            0.9852308034896851
        ]
    },
    "4019": {
        "similarity": 0.9973171949386597,
        "body": "import sys\n\n    n, m, D = map(int, input().split())\n    edges = []\n    adj = [[] for _ in range(n)]\n    used_edges = set()\n    for i in range(m):\n        u, v = map(lambda x: int(x) - 1, input().split())\n        if not (u,v) in used_edges and not (v,u) in used_edges:\n            edges.append((u, v))\n            adj[u].append(v)\n            adj[v].append(u)\n            used_edges.add((u,v))\n\n    p = [None]*n\n    parent = [-1]*n\n\n    stack = [(0, 0)]\n    while len(stack) > 0:\n        u, par = stack.pop()\n        if p[u] is not None:\n            continue\n        p[u] = par\n        for v in adj[u]:\n            if v != par and parent[v] == -1:\n                parent[v] = u\n                stack.append((v, u))\n\n    edges.sort(key=lambda x: (x[0], x[1]))\n    ans = []\n    deg_1 = 0\n\n    for e in edges:\n        if p[e[0]] is not None and p[e[0]] == e[1]:\n            continue\n        elif p[e[1]] is not None and p[e[1]] == e[0]:\n            continue\n        else:\n            deg_1 += 1\n            ans.append((e[0], e[1]))\n    if deg_1 < D:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for u, v in ans:\n            print(u+1, v+1)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961807727813721,
            0.9972516894340515,
            0.9936320781707764,
            0.9962998628616333,
            0.9968600869178772,
            0.9962117075920105,
            0.9972901940345764,
            0.9970030784606934,
            0.9971672892570496,
            0.9971224069595337,
            0.9972718954086304,
            0.9970800280570984,
            0.9965890645980835,
            0.9969633221626282,
            0.99705970287323,
            0.9971761107444763,
            0.9970414042472839,
            0.9973171949386597,
            0.9946249127388,
            0.9971540570259094
        ]
    },
    "4265": {
        "similarity": 0.9926917552947998,
        "body": "from collections import Counter\n\ns = input()\nt = input()\n\nsc = Counter(s)\ntc = Counter(t)\n\ndiff = 0\nfor c in sc:\n    if sc[c] != tc[c]:\n        diff += abs(sc[c] - tc[c])\n\nprint(diff // 2 + diff % 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9901117086410522,
            0.9917528033256531,
            0.9920350909233093,
            0.9887881278991699,
            0.9912500977516174,
            0.9842074513435364,
            0.9896535277366638,
            0.9873997569084167,
            0.9914939403533936,
            0.9873997569084167,
            0.9878755211830139,
            0.9911523461341858,
            0.987791895866394,
            0.9917722940444946,
            0.9923167824745178,
            0.9920720458030701,
            0.9913262724876404,
            0.9926917552947998,
            0.9914440512657166,
            0.9925864338874817
        ]
    },
    "4657": {
        "similarity": 0.9968633055686951,
        "body": "    pre = [0]\n    for i in range(1, n+1):\n        pre.append(pre[-1] + a[i-1] & 1)\n    suf = [(0, 0)]\n    for i in range(n, 0, -1):\n        if suf[-1][0]:\n            suf.append((suf[-1][1], i))\n        else:\n            suf.append((i, i))\n    b, c = k % 2, (k-1) // 2\n    ans = []\n    for i in range(1, n+1):\n        if pre[i] == 1:\n            if b and suf[-c][0] >= i:\n                suf.pop()\n                b -= 1\n            else:\n                return 'NO'\n        elif not pre[i]:\n            if c < len(suf) - 1 and suf[c + 1][0] <= i:\n                c += 1\n                ans.append(i)\n    return 'YES\\n' + ' '.join(map(str, reversed(ans)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968633055686951,
            0.9955677390098572,
            0.9865778684616089,
            0.9965874552726746,
            0.9966493844985962,
            0.995365560054779,
            0.9963606595993042,
            0.9936861991882324,
            0.9965768456459045,
            0.9962209463119507,
            0.9966742992401123,
            0.9956673383712769,
            0.9962422251701355,
            0.9954946637153625,
            0.9958832263946533,
            0.9965605735778809,
            0.996088445186615,
            0.9968109130859375,
            0.9960406422615051,
            0.9962438344955444
        ]
    },
    "4599": {
        "similarity": 0.9957674741744995,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    return sum(a[::2]) - sum(a[1::2])\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.994128406047821,
            0.9953127503395081,
            0.9943662881851196,
            0.9941161274909973,
            0.9955407977104187,
            0.9942982196807861,
            0.9945666790008545,
            0.9844363331794739,
            0.9950180053710938,
            0.9929255247116089,
            0.994692862033844,
            0.9939771294593811,
            0.9916658997535706,
            0.9952470660209656,
            0.995131254196167,
            0.9957674741744995,
            0.9913058280944824,
            0.9846481680870056,
            0.995131254196167,
            0.9936894178390503
        ]
    },
    "4774": {
        "similarity": 0.9959931969642639,
        "body": "import sys\n\na, b, c, d = map(int, input().split())\n\nops = ['+', '-', '*', '/']\nvalid_exprs = []\n\nfor o1 in ops:\n    for o2 in ops:\n        if o1 == '/' and o2 == '/':\n            continue\n        try:\n            if eval(f'{a} {o1} {b} = {c} {o2} {d}') or eval(f'{a} {o1} {b} = {c} {o2} 0') or eval(f'0 {o1} {b} = {c} {o2} {d}') or eval(f'{a} {o2} {b} = {c} {o1} {d}'):\n                valid_exprs.append(f'{a} {o1} {b} = {c} {o2} {d}')\n        except ZeroDivisionError:\n            pass\n\nif not valid_exprs:\n    print('problems ahead')\nelse:\n    for expr in sorted(valid_exprs):\n        print(expr)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939787983894348,
            0.9935097098350525,
            0.9942924976348877,
            0.9945580363273621,
            0.9888855814933777,
            0.9951528310775757,
            0.9928707480430603,
            0.9952676892280579,
            0.9894488453865051,
            0.9937121868133545,
            0.9945146441459656,
            0.9951383471488953,
            0.9948939085006714,
            0.9951171875,
            0.9943311810493469,
            0.9959931969642639,
            0.9953479766845703,
            0.9923956990242004,
            0.9947099089622498,
            0.9846835732460022
        ]
    },
    "4851": {
        "similarity": 0.995682954788208,
        "body": "    while True:\n        n += 1\n        if sum(int(digit) for digit in str(n)) * (n % sum(int(digit) for digit in str(n))) == n:\n            return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946945905685425,
            0.9929630756378174,
            0.9946679472923279,
            0.9955171346664429,
            0.9935091733932495,
            0.995117723941803,
            0.9945089221000671,
            0.9947540163993835,
            0.9945089221000671,
            0.9939078092575073,
            0.9946717619895935,
            0.9945089221000671,
            0.9950411915779114,
            0.9939078092575073,
            0.9945089221000671,
            0.9949764609336853,
            0.9946945905685425,
            0.9954129457473755,
            0.995682954788208,
            0.9945089221000671
        ]
    },
    "4655": {
        "similarity": 0.9915636777877808,
        "body": "    m = max(a, b)\n    n = min(a, b)\n    x = max(m + c // 2 - n, 0)\n    y = (c + n - m) // 2\n    return max(x, y)\n\nq = int(input())\nfor _ in range(q):\n    a, b, c = map(int, input().split())\n    print(calc_max_candies(a, b, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9802764058113098,
            0.986361563205719,
            0.9873806834220886,
            0.9858610033988953,
            0.9848679900169373,
            0.9907901287078857,
            0.9911999106407166,
            0.9856085777282715,
            0.9887157082557678,
            0.9890657663345337,
            0.9887456297874451,
            0.9900201559066772,
            0.9895192384719849,
            0.9881150126457214,
            0.9845188856124878,
            0.9915636777877808,
            0.989284336566925,
            0.9812890291213989,
            0.98595130443573,
            0.9898009300231934
        ]
    },
    "4132": {
        "similarity": 0.9953545928001404,
        "body": "    total = sum(A)\n    A.sort(reverse=True)\n    for i in range(len(A) - 1):\n        if A[i] > total - A[-1]:\n            return A[i]\n    return A[0]\n\nN = int(input())\nA = list(map(int, input().split()))\nprint(fight(A))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926322102546692,
            0.9947096109390259,
            0.9904273152351379,
            0.9944679141044617,
            0.9936918020248413,
            0.9937642812728882,
            0.9931763410568237,
            0.9869691729545593,
            0.9927000999450684,
            0.9948684573173523,
            0.9867715239524841,
            0.9946604371070862,
            0.9837546944618225,
            0.9949389100074768,
            0.9936153888702393,
            0.9936308860778809,
            0.9940920472145081,
            0.9953545928001404,
            0.9913185834884644,
            0.993373692035675
        ]
    },
    "4085": {
        "similarity": 0.9973027110099792,
        "body": "    if n <= 1: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    if (d[0] != 2 or is_prime(d[0])):\n        print(-1)\n    else:\n        ans = None\n        for i in range(1, len(d)):\n            x = d[i]\n            y = d[i-1]\n            if not is_prime(y):\n                if (x * y) % d[i] == 0 and (d[i]*(y+1)) // x == n:\n                    ans = x * y\n        print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948294758796692,
            0.9963001608848572,
            0.9950276613235474,
            0.9947200417518616,
            0.997096598148346,
            0.9966555237770081,
            0.9962541460990906,
            0.9964706301689148,
            0.9963003396987915,
            0.9936466217041016,
            0.9947593212127686,
            0.9964343905448914,
            0.9973027110099792,
            0.9964780211448669,
            0.9959955811500549,
            0.9953982830047607,
            0.9969362020492554,
            0.9966769814491272,
            0.9955146312713623,
            0.994327962398529
        ]
    },
    "4399": {
        "similarity": 0.9928695559501648,
        "body": "    if 'A' in S and 'B' in S:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9895771741867065,
            0.9897649884223938,
            0.9909144043922424,
            0.9928695559501648,
            0.9921181201934814,
            0.9895771741867065,
            0.9902443289756775,
            0.9917995929718018,
            0.9908109307289124,
            0.9895772337913513,
            0.9895772337913513,
            0.992517352104187,
            0.9904714822769165,
            0.9895768761634827,
            0.9928695559501648,
            0.9906080961227417,
            0.982507586479187,
            0.9919540286064148,
            0.9928509593009949,
            0.9915571808815002
        ]
    },
    "4999": {
        "similarity": 0.9967491030693054,
        "body": "    steps = 0\n    while a != b:\n        if a % 2 == 0:\n            a >>= 1\n        else:\n            a += 1\n        steps += 1\n    return steps\n\na, b = map(int, input().split())\nprint(min_operations(a, b))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953664541244507,
            0.9956068992614746,
            0.995041012763977,
            0.9948421120643616,
            0.9937517046928406,
            0.9954404234886169,
            0.9943971037864685,
            0.9916062951087952,
            0.9953351616859436,
            0.9953615069389343,
            0.9967491030693054,
            0.9954732656478882,
            0.9954515695571899,
            0.9958022236824036,
            0.9954850077629089,
            0.9959436655044556,
            0.9965158700942993,
            0.9958828687667847,
            0.9958839416503906,
            0.9948448538780212
        ]
    },
    "4727": {
        "similarity": 0.9972801208496094,
        "body": "grid = [list(map(int, input().split())) for _ in range(4)]\ndirection = int(input())\n    new_grid = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        pos = 0\n        for j in range(4):\n            if grid[i][j] != 0:\n                new_grid[i][pos] = grid[i][j]\n                pos += 1\n        new_grid[i] = new_grid[i][:pos]\n    for i in range(4):\n        for j in range(3):\n            if new_grid[i][j] == new_grid[i][j+1]:\n                new_grid[i][j] *= 2\n                new_grid[i].pop(j+1)\n                new_grid[i].insert(j+1, 0)\n    return new_grid\n\n    if direction == 0:\n        for row in grid:\n            merged_row = merge(row)\n            row[:] = merged_row\n        for i in range(4):\n            pos = 0\n            for j in range(4):\n                if grid[i][j] != 0:\n                    if pos > 0 and grid[i][pos-1] == 0:\n                        pos -= 1\n                    grid[i][pos] = grid[i][j]\n                    pos += 1\n            while pos < 4:\n                grid[i].insert(pos, 0)\n                pos += 1\n    elif direction == 1:\n        new_grid = [[grid[j][i] for j in range(4)] for i in range(4)]\n        for row in new_grid:\n            merged_row = merge(row)\n            row[:] = merged_row\n        for i in range(4):\n            pos = 0\n            for j in range(4):\n                if new_grid[i][j] != 0:\n                    if pos > 0 and new_grid[i][pos-1] == 0:\n                        pos -= 1\n                    new_grid[i][pos] = new_grid[i][j]\n                    pos += 1\n            while pos < 4:\n                new_grid[i].insert(pos, 0)\n                pos += 1\n        for i in range(4):\n            for j in range(4):\n                grid[j][i] = new_grid[i][j]\n\n    elif direction == 2:\n        for row in grid:\n            merged_row = merge(row[::-1])\n            row[:] = merged_row[::-1]\n        for i in range(4):\n            pos = 0\n            for j in range(4):\n                if grid[i][j] != 0:\n                    if pos > 0 and grid[i][pos-1] == 0:\n                        pos -= 1\n                    grid[i][pos] = grid[i][j]\n                    pos += 1\n            while pos < 4:\n                grid[i].insert(pos, 0)\n                pos += 1\n\n    elif direction == 3:\n        new_grid = [[grid[j][i] for j in range(4)] for i in range(4)]\n        for row in new_grid:\n            merged_row = merge(row[::-1])\n            row[:] = merged_row[::-1]\n        for i in range(4):\n            pos = 0\n            for j in range(4):\n                if new_grid[i][j] != 0:\n                    if pos > 0 and new_grid[i][pos-1] == 0:\n                        pos -= 1\n                    new_grid[i][pos] = new_grid[i][j]\n                    pos += 1\n            while pos < 4:\n                new_grid[i].insert(pos, 0)\n                pos += 1\n        for i in range(4):\n            for j in range(4):\n                grid[j][i] = new_grid[i][j]\n\nmove(grid, direction)\nfor row in grid:\n    print(*row)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950588941574097,
            0.9960340261459351,
            0.9957458972930908,
            0.9955966472625732,
            0.9964331388473511,
            0.9965482354164124,
            0.9964905977249146,
            0.9925581216812134,
            0.9962347149848938,
            0.9964580535888672,
            0.9957313537597656,
            0.9966332316398621,
            0.996487557888031,
            0.9972801208496094,
            0.9956052899360657,
            0.9970870018005371,
            0.9970861673355103,
            0.9963038563728333,
            0.9943779706954956,
            0.996497631072998
        ]
    },
    "4906": {
        "similarity": 0.9954788088798523,
        "body": "m = input()\nif m[0] == 'E':\n    message, = m.split(' ', 1)\n    encoded_message = ''\n    i = 0\n    while i < len(message):\n        if i + 1 < len(message) and message[i] == message[i+1]:\n            count = 0\n            while i + 1 < len(message) and message[i] == message[i+1]:\n                i += 1\n                count += 1\n            encoded_message += message[i] + str(count)\n        else:\n            encoded_message += message[i]\n            i += 1\n    print(encoded_message)\nelif m[0] == 'D':\n    message, = m.split(' ', 1)\n    decoded_message = ''\n    i = 0\n    while i < len(message):\n        if i + 1 < len(message) and message[i+1].isdigit():\n            count = int(message[i+1])\n            decoded_message += message[i] * count\n            i += 2\n        else:\n            decoded_message += message[i]\n            i += 1\n    print(decoded_message)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906798005104065,
            0.9951838254928589,
            0.9938069581985474,
            0.9943352937698364,
            0.9800205230712891,
            0.9932705760002136,
            0.9949864745140076,
            0.9954547882080078,
            0.9944365620613098,
            0.9931045174598694,
            0.9950944781303406,
            0.9952629804611206,
            0.9926629662513733,
            0.995400071144104,
            0.9921886324882507,
            0.9933630228042603,
            0.9933841228485107,
            0.9954788088798523,
            0.9947350025177002,
            0.9947920441627502
        ]
    },
    "4011": {
        "similarity": 0.9963968396186829,
        "body": "    ans = list(str(x))\n    for i in range(9):\n        if m[i+1] != 0: ans = [m[i+1]] + ans[:i]\n    return int(''.join(ans))\n\nn = input()\na = input()\nm = map(int, input().split())\nma = float('-inf')\nfor t in range(2**10):\n    b = list(a)\n    if bin(t).count('1') > 3:\n        continue\n    for i in range(9):\n        if (t >> i) & 1: b = [m[i+1]] + b[:i]\n    ma = max(ma, f(int(''.join(b)), m))\nprint(ma)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960646629333496,
            0.9930549263954163,
            0.9961692690849304,
            0.9963968396186829,
            0.9941655397415161,
            0.9943461418151855,
            0.9950124621391296,
            0.9939535856246948,
            0.9960756897926331,
            0.9942061901092529,
            0.9946300983428955,
            0.9912473559379578,
            0.9950995445251465,
            0.9961832165718079,
            0.9948690533638,
            0.9950959086418152,
            0.9945658445358276,
            0.9949831962585449,
            0.9940496683120728,
            0.9932988882064819
        ]
    },
    "4099": {
        "similarity": 0.9957267642021179,
        "body": "    N, K, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    if sum(A) + M <= N * K:\n        return -1\n    return max(0, (M*N-sum(A))//N+1)\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955083131790161,
            0.9957267642021179,
            0.9941833019256592,
            0.9955881834030151,
            0.9955735802650452,
            0.9951071739196777,
            0.9946132302284241,
            0.9952248334884644,
            0.9943475127220154,
            0.9951047301292419,
            0.9938532114028931,
            0.9948956370353699,
            0.9935120344161987,
            0.995108962059021,
            0.9915239214897156,
            0.9815352559089661,
            0.9900028109550476,
            0.9951284527778625,
            0.9939681887626648,
            0.9939934611320496
        ]
    },
    "4465": {
        "similarity": 0.9989632964134216,
        "body": "A, B = map(int, input().split())\nprint(A * B - 2 - 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9976022839546204,
            0.9974216818809509,
            0.9989632964134216,
            0.9974216818809509,
            0.9988867044448853,
            0.9988867044448853,
            0.9989632964134216,
            0.9988867044448853,
            0.9989632964134216,
            0.9989632964134216,
            0.997210681438446,
            0.9989632964134216,
            0.9981825947761536,
            0.9988867044448853,
            0.9988867044448853,
            0.9989632964134216,
            0.9969053864479065,
            0.9974216818809509,
            0.9988867044448853,
            0.9980692863464355
        ]
    },
    "4315": {
        "similarity": 0.9995243549346924,
        "body": "import math\nR = float(input())\nprint(2 * math.pi * R)",
        "result": "passed",
        "similarities": [
            0.9995243549346924,
            0.999256432056427,
            0.9995243549346924,
            0.9995115995407104,
            0.9995243549346924,
            0.9995243549346924,
            0.9995243549346924,
            0.9995074272155762,
            0.9995243549346924,
            0.9995243549346924,
            0.9995243549346924,
            0.9994614124298096,
            0.9995074272155762,
            0.9982022643089294,
            0.9973554015159607,
            0.9973554015159607,
            0.9995074272155762,
            0.9995243549346924,
            0.9995243549346924,
            0.9995243549346924
        ]
    },
    "4633": {
        "similarity": 0.9943061470985413,
        "body": "    while True:\n        d = sum(int(c) for c in str(n))\n        if d <= s: return n - n % 1\n        n += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921128153800964,
            0.9937995076179504,
            0.9922214150428772,
            0.9883543252944946,
            0.9923023581504822,
            0.9940924644470215,
            0.9923023581504822,
            0.9879817962646484,
            0.9943061470985413,
            0.9912492632865906,
            0.9915300607681274,
            0.988776445388794,
            0.9923298358917236,
            0.9923023581504822,
            0.9922214150428772,
            0.9932773113250732,
            0.9882915019989014,
            0.9932163953781128,
            0.9909912943840027,
            0.9918303489685059
        ]
    },
    "4734": {
        "similarity": 0.9954565167427063,
        "body": "    if Y.endswith('ex'):\n        return Y + P\n    elif Y[-1] in 'aeiou':\n        return Y[:-1] + 'ex' + P\n    elif Y[-1] == 'e':\n        return Y + 'x' + P\n    else:\n        raise ValueError(\"Invalid input\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940024018287659,
            0.9950477480888367,
            0.9873736500740051,
            0.9943476319313049,
            0.9948903322219849,
            0.9940271973609924,
            0.9948865175247192,
            0.9948151111602783,
            0.9944612383842468,
            0.9954565167427063,
            0.9882623553276062,
            0.9935144186019897,
            0.9954408407211304,
            0.9939286112785339,
            0.9939925670623779,
            0.9933986663818359,
            0.9873946309089661,
            0.9949443340301514,
            0.9954390525817871,
            0.9929293394088745
        ]
    },
    "4229": {
        "similarity": 0.9960151314735413,
        "body": "    N = int(input())\n    ans = 0\n    cnt = 0\n    for i in range(1, N+1):\n        if i % 15 == 0:\n            ans += i\n            cnt += 1\n        elif i % 3 == 0 and i % 5 != 0:\n            ans += i\n            cnt += 1\n        elif i % 3 != 0 and i % 5 == 0:\n            ans += i\n            cnt += 1\n    print(ans - (cnt * 14) // 15)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995682954788208,
            0.99202960729599,
            0.9957777261734009,
            0.9944297671318054,
            0.99334716796875,
            0.9956035614013672,
            0.9937191009521484,
            0.9925699830055237,
            0.9955463409423828,
            0.9944909811019897,
            0.995299220085144,
            0.9939943552017212,
            0.9945017099380493,
            0.993105947971344,
            0.9958092570304871,
            0.9933432340621948,
            0.9920092225074768,
            0.9916892051696777,
            0.9960151314735413,
            0.995096743106842
        ]
    },
    "4321": {
        "similarity": 0.9974983930587769,
        "body": "    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968521595001221,
            0.9971209168434143,
            0.9964702129364014,
            0.9964092969894409,
            0.9972520470619202,
            0.9913996458053589,
            0.9971598386764526,
            0.9974983930587769,
            0.9917426109313965,
            0.9958845376968384,
            0.9969545006752014,
            0.9928613305091858,
            0.9969545006752014,
            0.9966866374015808,
            0.9959426522254944,
            0.9962488412857056,
            0.9974263906478882,
            0.996988832950592,
            0.9968333840370178,
            0.9969545006752014
        ]
    },
    "4503": {
        "similarity": 0.9966409802436829,
        "body": "    H, N = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    used = set()\n    for i in range(N):\n        if H <= 0:\n            break\n        if A[i] not in used:\n            used.add(A[i])\n            H -= A[i]\n    print('Yes' if H <= 0 else 'No')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960049986839294,
            0.994197428226471,
            0.9966232776641846,
            0.9931094646453857,
            0.9950061440467834,
            0.9947892427444458,
            0.9961134195327759,
            0.9919254779815674,
            0.9966409802436829,
            0.9951133728027344,
            0.9964982867240906,
            0.9965033531188965,
            0.9965258240699768,
            0.9958507418632507,
            0.9964395761489868,
            0.995880126953125,
            0.9921819567680359,
            0.9955235719680786,
            0.9948652386665344,
            0.9947795867919922
        ]
    },
    "4855": {
        "similarity": 0.9972441792488098,
        "body": "    return -(-a // b)\n\nA, I = map(int, input().split())\nprint(ceil_div(I * A, 100) - A)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965974688529968,
            0.996164858341217,
            0.9894234538078308,
            0.9937767386436462,
            0.9866158366203308,
            0.9969984292984009,
            0.9968584179878235,
            0.9968022108078003,
            0.9969527721405029,
            0.9970096945762634,
            0.9970787763595581,
            0.9969416260719299,
            0.9969416260719299,
            0.9918169975280762,
            0.9972441792488098,
            0.9920458793640137,
            0.9954380393028259,
            0.9937132000923157,
            0.9969984292984009,
            0.9971036314964294
        ]
    },
    "4704": {
        "similarity": 0.9948522448539734,
        "body": "    N = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 2:\n        return abs(a[0] - a[1])\n    mini = float('inf')\n    for i in range(1, N):\n        mini = min(mini, sum(a[:i]) - sum(a[i:]))\n    print(mini)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.990184485912323,
            0.9944524168968201,
            0.9935032725334167,
            0.9840511679649353,
            0.9907417297363281,
            0.9916268587112427,
            0.9927580952644348,
            0.9937601685523987,
            0.9923505187034607,
            0.9893495440483093,
            0.9948522448539734,
            0.9938539266586304,
            0.9947577118873596,
            0.9902570843696594,
            0.9940370321273804,
            0.9920969605445862,
            0.9882659912109375,
            0.9936086535453796,
            0.992933452129364,
            0.9899832010269165
        ]
    },
    "4829": {
        "similarity": 0.9968838095664978,
        "body": "a, b = map(int, input().split())\nif a == 0 and b == 0:\n    print(\"Not a moose\")\nelif a == b:\n    print(f\"Even {a + b}\")\nelse:\n    print(f\"Odd {(max(a, b) * 2)}\")",
        "result": "passed",
        "similarities": [
            0.9949324727058411,
            0.9966005086898804,
            0.9957900047302246,
            0.9965221285820007,
            0.9947891235351562,
            0.9927322864532471,
            0.9965543150901794,
            0.9963343739509583,
            0.9952923655509949,
            0.9957727193832397,
            0.9902375936508179,
            0.9968838095664978,
            0.9955771565437317,
            0.9965924024581909,
            0.9946576356887817,
            0.9962493777275085,
            0.9965221285820007,
            0.9961037039756775,
            0.995847225189209,
            0.9799934029579163
        ]
    },
    "4730": {
        "similarity": 0.9968221783638,
        "body": "    n = int(input())\n    s = input()\n    d = {'(': ')', '[': ']', '{': '}'}\n    q = []\n    for i in range(n):\n        if s[i] in d:\n            q.append((s[i], i))\n        elif s[i] in d.values() or s[i].isspace():\n            continue\n        else:\n            if not q or s[i] != d[q.pop()[0]]:\n                print(s[i], q[-1][1])\n                return\n    if len(q) > 0:\n        print(d[q[-1][0]], q[-1][1])\n    else:\n        print('ok so far')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959191679954529,
            0.9941380023956299,
            0.9968221783638,
            0.9962805509567261,
            0.995497465133667,
            0.9941470623016357,
            0.9948806762695312,
            0.9964563250541687,
            0.9959319233894348,
            0.9962344169616699,
            0.9944504499435425,
            0.9934136271476746,
            0.9961951375007629,
            0.9960481524467468,
            0.9958078265190125,
            0.9959335327148438,
            0.9940028190612793,
            0.9954192638397217,
            0.9966590404510498,
            0.9928692579269409
        ]
    },
    "4729": {
        "similarity": 0.9935392141342163,
        "body": "P = input().split()[0]\nM = input()\nvalid = True\ni = 0\nfor c in P:\n    while i < len(M) and M[i] != c:\n        i += 1\n    if i == len(M):\n        valid = False\n        break\n    i += 1\nprint('PASS' if valid else 'FAIL')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922952055931091,
            0.9934704303741455,
            0.992653489112854,
            0.991654634475708,
            0.9918555021286011,
            0.9927586317062378,
            0.993027925491333,
            0.9902737140655518,
            0.9894894957542419,
            0.9930638670921326,
            0.9897680878639221,
            0.9935392141342163,
            0.9920734763145447,
            0.9930928945541382,
            0.9856065511703491,
            0.993108868598938,
            0.9893707633018494,
            0.9922218322753906,
            0.991128146648407,
            0.9902191162109375
        ]
    },
    "4582": {
        "similarity": 0.99456787109375,
        "body": "a = input()\nb = input()\n\nif a == b:\n    if a == 'H':\n        print('H')\n    else:\n        print('D')\nelse:\n    print('H' if b == 'H' else 'D')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9884135723114014,
            0.9924181699752808,
            0.9913309216499329,
            0.9918060302734375,
            0.9894539713859558,
            0.9926339983940125,
            0.9938173890113831,
            0.9854921102523804,
            0.9905156493186951,
            0.9900031685829163,
            0.9923268556594849,
            0.992745578289032,
            0.9929560422897339,
            0.9929752349853516,
            0.99456787109375,
            0.9896368980407715,
            0.9931709170341492,
            0.9925426840782166,
            0.9914026856422424,
            0.9912462830543518
        ]
    },
    "4910": {
        "similarity": 0.9959076642990112,
        "body": "    categories = {}\n    for _ in range(int(input())):\n        category = input()\n        if category not in categories:\n            categories[category] = 1\n        else:\n            categories[category] += 1\n    maxCount = max(categories.values())\n    return sorted([c for c, count in categories.items() if count == maxCount])\n\nprint('\\n'.join(mostLikelyCategory()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941147565841675,
            0.9935734272003174,
            0.9939073324203491,
            0.9959076642990112,
            0.9936567544937134,
            0.9920781850814819,
            0.9952940940856934,
            0.9912049174308777,
            0.9940049052238464,
            0.9943467974662781,
            0.9954454302787781,
            0.9931418895721436,
            0.9925668835639954,
            0.994391679763794,
            0.9952921867370605,
            0.9929925203323364,
            0.9926659464836121,
            0.9949584603309631,
            0.9946450591087341,
            0.9950618743896484
        ]
    },
    "4323": {
        "similarity": 0.9969651103019714,
        "body": "    a.sort(key=lambda x: -x[0])\n    ans = 0\n    s = sum(x[0] for x in a)\n    if s > m:\n        return -1\n    for i in range(n-1,-1,-1):\n        if a[i][0]-a[i][1]+(n-i)>ans:\n            ans = a[i][0]-a[i][1]+(n-i)\n            s -= a[i][0] - a[i][1]\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969651103019714,
            0.9959891438484192,
            0.9957385659217834,
            0.9951720833778381,
            0.9949201345443726,
            0.9946618676185608,
            0.9962844848632812,
            0.9962517619132996,
            0.9964291453361511,
            0.9962894320487976,
            0.9959949851036072,
            0.9965824484825134,
            0.9959406852722168,
            0.9967594146728516,
            0.9964997172355652,
            0.9962270855903625,
            0.9962098002433777,
            0.9967946410179138,
            0.996558427810669,
            0.9949910044670105
        ]
    },
    "4626": {
        "similarity": 0.9879197478294373,
        "body": "    d = abs(a - b) + abs(a - c) + abs(b - c)\n    return min(d, 2 * min(min(a, b), min(b, c)) + 2 * max(max(a, b), max(b, c)) - a - b - c)\n\nq = int(input())\nfor _ in range(q):\n    a, b, c = map(int, input().split())\n    print(solve(a, b, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9454202055931091,
            0.9492269158363342,
            0.98729407787323,
            0.9806879758834839,
            0.9837709069252014,
            0.9853590130805969,
            0.9841551780700684,
            0.9876624941825867,
            0.9822114706039429,
            0.9867760539054871,
            0.9755169749259949,
            0.9764912128448486,
            0.9879197478294373,
            0.980316698551178,
            0.9867804646492004,
            0.9822764992713928,
            0.9857293963432312,
            0.9802535176277161,
            0.9874452352523804,
            0.9814102053642273
        ]
    },
    "4400": {
        "similarity": 0.991300106048584,
        "body": "    S = input()\n    return max(0, S.count('R') - S.count('S'))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907066822052002,
            0.9735051989555359,
            0.9703552722930908,
            0.9849674105644226,
            0.990767240524292,
            0.9899260997772217,
            0.989719569683075,
            0.9907066822052002,
            0.9873725771903992,
            0.9905339479446411,
            0.9740672707557678,
            0.9901424050331116,
            0.9878573417663574,
            0.991300106048584,
            0.9899260997772217,
            0.9849674105644226,
            0.9899260997772217,
            0.9899260997772217,
            0.989719569683075,
            0.9805341958999634
        ]
    },
    "4794": {
        "similarity": 0.994888424873352,
        "body": "r, c = map(int, input().split())\nparking_map = [list(input()) for _ in range(r)]\npossible_parking_spaces = [[0]*5 for _ in range(5)]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking_map[i][j] != '#' and parking_map[i][j+1] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i][j+1] == 'X':\n                possible_parking_spaces[0][2] += 1\n            else:\n                possible_parking_spaces[0][3] += 1\n\n        if parking_map[i][j] != '#' and parking_map[i+1][j] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i+1][j] == 'X':\n                possible_parking_spaces[2][0] += 1\n            else:\n                possible_parking_spaces[3][0] += 1\n\n        if parking_map[i][j] != '#' and parking_map[i][j+1] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i][j+1] == 'X':\n                possible_parking_spaces[0][2] += 1\n            else:\n                possible_parking_spaces[0][3] += 1\n\n        if parking_map[i][j] != '#' and parking_map[i+1][j] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i+1][j] == 'X':\n                possible_parking_spaces[2][0] += 1\n            else:\n                possible_parking_spaces[3][0] += 1\n\n        if parking_map[i][j] != '#' and parking_map[i][j+1] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i][j+1] == 'X':\n                possible_parking_spaces[1][1] += 1\n            else:\n                possible_parking_spaces[4][0] += 1\n\n        if parking_map[i][j] != '#' and parking_map[i+1][j] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i+1][j] == 'X':\n                possible_parking_spaces[3][1] += 1\n            else:\n                possible_parking_spaces[4][0] += 1\n\n        if i < r - 2 and j < c - 2 and parking_map[i][j] != '#' and parking_map[i+1][j] != '#' \\\n                and parking_map[i+2][j] != '#' and parking_map[i+2][j+1] != '#':\n            possible_parking_spaces[4][4] += 1\n\n        if i < r - 2 and j < c - 2 and parking_map[i][j] != '#' and parking_map[i+1][j+1] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i+1][j+1] == 'X':\n                possible_parking_spaces[3][2] += 1\n            else:\n                possible_parking_spaces[4][0] += 1\n\n        if i < r - 2 and j < c - 2 and parking_map[i][j+1] != '#' and parking_map[i+1][j] != '#':\n            if parking_map[i][j+1] == 'X' or parking_map[i+1][j] == 'X':\n                possible_parking_spaces[3][2] += 1\n            else:\n                possible_parking_spaces[4][0] += 1\n\n        if i < r - 2 and j < c - 2 and parking_map[i][j] != '#' and parking_map[i+2][j] != '#':\n            if parking_map[i][j] == 'X' or parking_map[i+2][j] == 'X':\n                possible_parking_spaces[2][3] += 1\n            else:\n                possible_parking_spaces[0][3] += 1\n\n        if i < r - 2 and j < c - 2 and parking_map[i][j+1] != '#' and parking_map[i+2][j+1] != '#':\n            if parking_map[i][j+1] == 'X' or parking_map[i+2][j+1] == 'X':\n                possible_parking_spaces[2][3] += 1\n            else:\n                possible_parking_spaces[0][3] += 1\n\nfor space in possible_parking_spaces:\n    print(space[0])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948464632034302,
            0.9940356016159058,
            0.9923304319381714,
            0.9932289123535156,
            0.994888424873352,
            0.9930180907249451,
            0.9920709729194641,
            0.9898948669433594,
            0.9900667071342468,
            0.9929256439208984,
            0.9944368600845337,
            0.9947452545166016,
            0.9932284951210022,
            0.9937446117401123,
            0.9940820336341858,
            0.9939185976982117,
            0.9947447776794434,
            0.9947279691696167,
            0.994239330291748,
            0.9943169355392456
        ]
    },
    "4096": {
        "similarity": 0.9941164255142212,
        "body": "    n = len(a)\n    a.sort(reverse=True)\n\n    s = 0\n    for i in range(n):\n        s += max(0, a[i] - i - 1)\n        if s >= m:\n            return i + 1\n    return -1\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nprint(f(a, m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933391213417053,
            0.9884000420570374,
            0.9938565492630005,
            0.9851285219192505,
            0.9901884198188782,
            0.9940440654754639,
            0.9927970767021179,
            0.9928542971611023,
            0.9921151995658875,
            0.9879663586616516,
            0.9884384870529175,
            0.9926013946533203,
            0.9941164255142212,
            0.9937604665756226,
            0.9926528930664062,
            0.9897685647010803,
            0.9845513105392456,
            0.9911525249481201,
            0.9933879375457764,
            0.9931766986846924
        ]
    },
    "4530": {
        "similarity": 0.9956892132759094,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        cnt[x] = cnt.get(x, 0) + 1\n    s = set(a)\n    ans = 0\n    u = len(s)\n    for i in range(u):\n        v = (u - i) // 2\n        if i <= v and (n - sum(1 for x in a if cnt[x] == 1)) >= v:\n            ans = max(ans, v + i)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951460957527161,
            0.9943634867668152,
            0.9937321543693542,
            0.9931949973106384,
            0.987074613571167,
            0.9910269379615784,
            0.9936391115188599,
            0.9956497550010681,
            0.9950770139694214,
            0.9942851066589355,
            0.9941565990447998,
            0.9946724772453308,
            0.9953628182411194,
            0.9956892132759094,
            0.9925930500030518,
            0.9947975873947144,
            0.9905706644058228,
            0.9940026998519897,
            0.995376467704773,
            0.9903353452682495
        ]
    },
    "4724": {
        "similarity": 0.994788408279419,
        "body": "R = float(input())\nG = float(input())\nprint(2*G - R)",
        "result": "passed",
        "similarities": [
            0.9923444986343384,
            0.9918993711471558,
            0.9899538159370422,
            0.9947584271430969,
            0.9947584271430969,
            0.9947584271430969,
            0.9901811480522156,
            0.990502119064331,
            0.9901811480522156,
            0.9933865070343018,
            0.984054684638977,
            0.9904955625534058,
            0.994788408279419,
            0.9910119771957397,
            0.9937483072280884,
            0.9945995807647705,
            0.9936982989311218,
            0.9805614948272705,
            0.9936532378196716,
            0.9941325187683105
        ]
    },
    "4276": {
        "similarity": 0.9976991415023804,
        "body": "N, T = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(N)]\nroutes.sort(key=lambda x: x[1])\n\nfor c, t in routes:\n    if t <= T:\n        print(c)\n        break\nelse:\n    print(\"TLE\")",
        "result": "failed: testcase 2",
        "similarities": [
            0.9972158074378967,
            0.9971124529838562,
            0.9973598122596741,
            0.9967615008354187,
            0.9976991415023804,
            0.9947335124015808,
            0.9972708821296692,
            0.997594952583313,
            0.9972542524337769,
            0.9973945617675781,
            0.997461199760437,
            0.9965848326683044,
            0.9975258708000183,
            0.9960954785346985,
            0.9950330853462219,
            0.9958981871604919,
            0.9971987009048462,
            0.9976015686988831,
            0.9954358339309692,
            0.9936900734901428
        ]
    },
    "4708": {
        "similarity": 0.9969881772994995,
        "body": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprint(x * min(k, n) + y * max(n - k, 0))",
        "result": "passed",
        "similarities": [
            0.9962244629859924,
            0.9960140585899353,
            0.9945022463798523,
            0.9960917234420776,
            0.9961531758308411,
            0.9964066743850708,
            0.9939761161804199,
            0.9965308308601379,
            0.9963996410369873,
            0.9957762360572815,
            0.9959236979484558,
            0.9969881772994995,
            0.9962244629859924,
            0.9963718056678772,
            0.995615541934967,
            0.9967884421348572,
            0.9957653880119324,
            0.9959604144096375,
            0.9960474967956543,
            0.9960921406745911
        ]
    },
    "4396": {
        "similarity": 0.9976528882980347,
        "body": "N = int(input())\nyen_total = 0.0\nfor _ in range(N):\n    x, u = input().split()\n    if u == 'JPY':\n        yen_total += float(x)\n    else:\n        yen_total += float(x) * 380000.0\nprint(yen_total)",
        "result": "passed",
        "similarities": [
            0.9970808625221252,
            0.9973579049110413,
            0.997627854347229,
            0.9971120953559875,
            0.9971524477005005,
            0.9972098469734192,
            0.9969753623008728,
            0.9972005486488342,
            0.9975216388702393,
            0.9962742328643799,
            0.9971461892127991,
            0.996213436126709,
            0.9973483681678772,
            0.9973214864730835,
            0.9972386956214905,
            0.9976528882980347,
            0.9973483681678772,
            0.9971948266029358,
            0.9968519806861877,
            0.9970486164093018
        ]
    },
    "4155": {
        "similarity": 0.9967398643493652,
        "body": "n = int(input())\nh = list(map(int, input().split()))\nmax_h = [0] * n\nans = 0\nfor i in range(n):\n    max_h[i] = h[i]\n    for j in range(i - 1, -1, -1):\n        if h[j] >= max_h[j]:\n            max_h[j] = h[j]\n    ans = max(ans, max(max_h))\nprint(ans)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9961967468261719,
            0.9884725213050842,
            0.9948660135269165,
            0.9919925332069397,
            0.9960458874702454,
            0.9894985556602478,
            0.9966616630554199,
            0.9950574636459351,
            0.9933807253837585,
            0.9959929585456848,
            0.9959251284599304,
            0.9966910481452942,
            0.9954508543014526,
            0.9965198040008545,
            0.9949971437454224,
            0.9961733818054199,
            0.9944452047348022,
            0.9947672486305237,
            0.9963245391845703,
            0.9967398643493652
        ]
    },
    "4557": {
        "similarity": 0.9959104657173157,
        "body": "A, B, X = map(int, input().split())\nprint('YES' if A <= X <= A + B else 'NO')",
        "result": "passed",
        "similarities": [
            0.9858647584915161,
            0.9955039620399475,
            0.995514452457428,
            0.9899576902389526,
            0.9944964051246643,
            0.9884794354438782,
            0.9958283305168152,
            0.9959104657173157,
            0.9958283305168152,
            0.9905983805656433,
            0.9959104657173157,
            0.9959104657173157,
            0.9958283305168152,
            0.9948443174362183,
            0.9959104657173157,
            0.9949299693107605,
            0.9959104657173157,
            0.9959104657173157,
            0.9859617352485657,
            0.9928151369094849
        ]
    },
    "4930": {
        "similarity": 0.9975162148475647,
        "body": "    vowels = 'aeiou'\n    words = sentence.split()\n    decoded_words = []\n    for word in words:\n        new_word = ''\n        i = 0\n        while i < len(word):\n            if word[i] in vowels:\n                new_word += word[i] + 'p' + word[i]\n                i += 2\n            else:\n                new_word += word[i]\n                i += 1\n        decoded_words.append(new_word)\n    return ' '.join(decoded_words)\n\nprint(decode_sentence(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955886006355286,
            0.9875907897949219,
            0.9974944591522217,
            0.9957508444786072,
            0.9970958232879639,
            0.997506320476532,
            0.9962189197540283,
            0.9972531199455261,
            0.9973578453063965,
            0.9974632263183594,
            0.9962363243103027,
            0.9973829388618469,
            0.9962252378463745,
            0.9790657758712769,
            0.9973569512367249,
            0.9972718954086304,
            0.9975162148475647,
            0.9961240887641907,
            0.9974837303161621,
            0.9960883259773254
        ]
    },
    "4715": {
        "similarity": 0.9978097677230835,
        "body": "a, b, c = map(int, input().split())\nprint(len(set([a, b, c])))",
        "result": "passed",
        "similarities": [
            0.9957295656204224,
            0.9978097677230835,
            0.9955067038536072,
            0.9972500205039978,
            0.9978097677230835,
            0.9978097677230835,
            0.9978097677230835,
            0.9978097677230835,
            0.9978097677230835,
            0.9960843324661255,
            0.9978097677230835,
            0.9978097677230835,
            0.992927074432373,
            0.9972500205039978,
            0.9978097677230835,
            0.9958061575889587,
            0.9937792420387268,
            0.9954831004142761,
            0.9978097677230835,
            0.9949393272399902
        ]
    },
    "4008": {
        "similarity": 0.9975524544715881,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    used = [0] * 5001\n    colors = [-1] * n\n    count = 0\n    for i in range(n):\n        if not used[a[i]]:\n            j = 1\n            while j <= k and not used[a[i]*j]:\n                used[a[i]*j] = 1\n                colors[i] = j\n                j += 1\n            count += 1\n        else:\n            for j in range(1, k+1):\n                if not used[a[i]*j]:\n                    used[a[i]*j] = 1\n                    colors[i] = j\n                    break\n    if count == n and max(colors) <= k:\n        print('YES')\n        print(*colors)\n    else: print('NO')\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955340027809143,
            0.9974743723869324,
            0.9974550008773804,
            0.9974961876869202,
            0.9953570365905762,
            0.9967859983444214,
            0.9972359538078308,
            0.9963060617446899,
            0.9971432089805603,
            0.9959987998008728,
            0.9954901337623596,
            0.9969815611839294,
            0.9966486692428589,
            0.9967944622039795,
            0.9950487017631531,
            0.9969831109046936,
            0.9975524544715881,
            0.9971064329147339,
            0.9943928122520447,
            0.9962655305862427
        ]
    },
    "4257": {
        "similarity": 0.9996191263198853,
        "body": "A, B = map(int, input().split())\nprint(A * B)",
        "result": "passed",
        "similarities": [
            0.9996191263198853,
            0.9995457530021667,
            0.9996191263198853,
            0.9996191263198853,
            0.9996191263198853,
            0.9996191263198853,
            0.9996191263198853,
            0.9996191263198853,
            0.9996191263198853,
            0.9970486164093018,
            0.9996191263198853,
            0.9969454407691956,
            0.9996191263198853,
            0.9995457530021667,
            0.9995457530021667,
            0.9995457530021667,
            0.9996191263198853,
            0.9996191263198853,
            0.9995457530021667,
            0.9996191263198853
        ]
    },
    "4584": {
        "similarity": 0.9957454204559326,
        "body": "    N = int(input())\n    A = list(map(int, input().split()))\n    adj_list = [[] for _ in range(N+1)]\n    count = [0] * (N+1)\n    for i in range(2, N+1):\n        adj_list[A[i-2]].append(i)\n    stack = []\n    stack.append((1, 0))\n    while stack:\n        node, flag = stack.pop()\n        if flag == 1:\n            count[node] += len(adj_list[node])\n            for child in adj_list[node]:\n                stack.append((child, 0))\n        else:\n            for child in adj_list[node]:\n                stack.append((child, 1))\n    print(*count[1:])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911165833473206,
            0.9956660270690918,
            0.9951000213623047,
            0.9923192262649536,
            0.9924623370170593,
            0.9934291839599609,
            0.9919341206550598,
            0.9937806725502014,
            0.9923701286315918,
            0.9936515688896179,
            0.9904622435569763,
            0.9938458800315857,
            0.9957058429718018,
            0.9936007261276245,
            0.9875508546829224,
            0.9936671257019043,
            0.9952250123023987,
            0.9957454204559326,
            0.9926988482475281,
            0.9943652749061584
        ]
    },
    "4195": {
        "similarity": 0.9939151406288147,
        "body": "D, N = map(int, input().split())\nif D == 0:\n    print(N)\nelse:\n    ans = []\n    for i in range(1 << 99):\n        ans.append(i * 100**min(D, 2))\n    print(sorted(ans)[N-1])",
        "result": "timed out",
        "similarities": [
            0.9880111217498779,
            0.9894090294837952,
            0.9933454394340515,
            0.9895020723342896,
            0.9915832877159119,
            0.9922441244125366,
            0.9918742775917053,
            0.9905704855918884,
            0.9939151406288147,
            0.9844414591789246,
            0.9859211444854736,
            0.9865360260009766,
            0.9876801371574402,
            0.9936944246292114,
            0.9922658801078796,
            0.9932007193565369,
            0.9927902221679688,
            0.9938489198684692,
            0.9886901378631592,
            0.990911602973938
        ]
    },
    "4176": {
        "similarity": 0.9941108226776123,
        "body": "    A, B = map(int, input().split())\n    return max(A * ((B + A - 1) // A), B * ((A + B - 1) // B))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9904688000679016,
            0.9908888936042786,
            0.9941108226776123,
            0.9879409670829773,
            0.9924508333206177,
            0.9940086007118225,
            0.9851417541503906,
            0.9934747815132141,
            0.9934899210929871,
            0.9900973439216614,
            0.9919211864471436,
            0.988987147808075,
            0.9919455647468567,
            0.9936821460723877,
            0.9891989827156067,
            0.9914101958274841,
            0.9803270101547241,
            0.9925618767738342,
            0.9900060892105103,
            0.9868250489234924
        ]
    },
    "4166": {
        "similarity": 0.9958204030990601,
        "body": "    N, M = map(int, input().split())\n    digits = [list(map(int, input().split())) for _ in range(M)]\n    digits.sort(key=lambda x: -x[0])\n    num = ['0'] * N\n    for s, c in digits:\n        num[s-1] = str(c)\n    ans = int(''.join(num))\n    print(ans if ans < 10**N else -1)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927922487258911,
            0.9924551248550415,
            0.9944052696228027,
            0.99169921875,
            0.9958204030990601,
            0.9953020811080933,
            0.9934861063957214,
            0.9943140745162964,
            0.9940623044967651,
            0.9950848817825317,
            0.9942838549613953,
            0.9923164248466492,
            0.9950489401817322,
            0.9952992796897888,
            0.9951591491699219,
            0.9950770139694214,
            0.9949393272399902,
            0.9939987063407898,
            0.9931727051734924,
            0.994988203048706
        ]
    },
    "4827": {
        "similarity": 0.994659423828125,
        "body": "    if n < 10:\n        words = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n        return words[n]\n    elif n < 20 or n == 10:\n        words = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n        return words[n-10]\n    else:\n        tens, ones = divmod(n, 10)\n        if ones == 0:\n            return num_to_words(tens*10) + \"zero\"\n        else:\n            return num_to_words(tens*10) + num_to_words(ones)\n\n    words = s.split()\n    for i in range(len(words)):\n        if words[i] == \"$\":\n            words[i] = str(num_to_words(int(words[len(words)-1])))\n            words.pop()\n            break\n    return ' '.join(words)\n\nn = int(input())\nsentence = []\nfor _ in range(n):\n    sentence.append(input())\n\nprint(to_words(' '.join(sentence)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934470653533936,
            0.9935692548751831,
            0.9926159381866455,
            0.9919214844703674,
            0.9901372194290161,
            0.9942987561225891,
            0.994659423828125,
            0.994232177734375,
            0.9938145875930786,
            0.9909481406211853,
            0.9938502907752991,
            0.9927868247032166,
            0.9904283285140991,
            0.9928889274597168,
            0.9937552213668823,
            0.9932424426078796,
            0.9939141869544983,
            0.9894957542419434,
            0.9928625226020813,
            0.9935640096664429
        ]
    },
    "4871": {
        "similarity": 0.9923017621040344,
        "body": "    n = len(scores)\n    group_score = sum(s * (4/5)**i / 5 for i, s in enumerate(scores))\n    return group_score\n\n    n = len(scores)\n    total_g = 0\n    for i in range(n):\n        scores_no_i = scores[:i] + scores[i+1:]\n        total_g += calculate_group_score(scores_no_i) * (4/5)**i\n    avg_g = total_g / n\n    return avg_g\n\nn = int(input())\nscores = [int(input()) for _ in range(n)]\ngroup_score = calculate_group_score(scores)\navg_g = average_g_scores(scores)\n\nprint(group_score)\nprint(avg_g)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9908804893493652,
            0.987122118473053,
            0.9849546551704407,
            0.9912118315696716,
            0.9902341961860657,
            0.986637532711029,
            0.9796469807624817,
            0.9888075590133667,
            0.9923017621040344,
            0.9842990040779114,
            0.9891726970672607,
            0.9784837365150452,
            0.9864208102226257,
            0.9886162281036377,
            0.9857169985771179,
            0.9917601346969604,
            0.9916636943817139,
            0.9871296286582947,
            0.9902711510658264,
            0.9902751445770264
        ]
    },
    "4148": {
        "similarity": 0.9956698417663574,
        "body": "n = int(input())\ns = input()\nresult = ''.join(chr((ord(c) - ord('A') + n) % 26 + ord('A')) for c in s)\nprint(result)",
        "result": "passed",
        "similarities": [
            0.9956698417663574,
            0.9905070066452026,
            0.9930402040481567,
            0.9918836355209351,
            0.9946216940879822,
            0.9915982484817505,
            0.9945433735847473,
            0.9946216940879822,
            0.9918246865272522,
            0.9916440844535828,
            0.9945433735847473,
            0.9916440844535828,
            0.9931750893592834,
            0.9955300092697144,
            0.9919700622558594,
            0.9927085041999817,
            0.9945433735847473,
            0.9930756092071533,
            0.9945433735847473,
            0.9945433735847473
        ]
    },
    "4316": {
        "similarity": 0.994973361492157,
        "body": "    s = set(S)\n    return len(s) == 2 and all(S.count(c) == 2 for c in s)\n\nS = input()\nprint('Yes' if check(S) else 'No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915266633033752,
            0.9929382801055908,
            0.9937536120414734,
            0.9921842813491821,
            0.9945963621139526,
            0.9945084452629089,
            0.992775559425354,
            0.9944151043891907,
            0.9885850548744202,
            0.9936839938163757,
            0.992883563041687,
            0.9929382801055908,
            0.9940988421440125,
            0.9934121370315552,
            0.9899287819862366,
            0.9901464581489563,
            0.994973361492157,
            0.9891244769096375,
            0.9947983622550964,
            0.9948573708534241
        ]
    },
    "4397": {
        "similarity": 0.999869704246521,
        "body": "n, i = map(int, input().split())\nprint(n - i + 1)",
        "result": "passed",
        "similarities": [
            0.999839186668396,
            0.999839186668396,
            0.9998695850372314,
            0.9998695850372314,
            0.999869704246521,
            0.999839186668396,
            0.999869704246521,
            0.999839186668396,
            0.9998695850372314,
            0.9998695850372314,
            0.9998695850372314,
            0.999839186668396,
            0.9986720681190491,
            0.999839186668396,
            0.999869704246521,
            0.999869704246521,
            0.999869704246521,
            0.999869704246521,
            0.999839186668396,
            0.9998695850372314
        ]
    },
    "4180": {
        "similarity": 0.995003342628479,
        "body": "N = int(input())\nprint(N - (N // 1000) * 1000)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911509156227112,
            0.9946388602256775,
            0.9883858561515808,
            0.9916876554489136,
            0.9931391477584839,
            0.9946388602256775,
            0.994415283203125,
            0.995003342628479,
            0.991615891456604,
            0.9930669069290161,
            0.995003342628479,
            0.9932623505592346,
            0.9885165691375732,
            0.9908772706985474,
            0.9946388602256775,
            0.9949467182159424,
            0.9946388602256775,
            0.991615891456604,
            0.995003342628479,
            0.9949600100517273
        ]
    },
    "4907": {
        "similarity": 0.9982731342315674,
        "body": "n = int(input())\nif n % 2 == 0:\n    print('Bob')\nelse:\n    print('Alice', 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9981535077095032,
            0.9973235726356506,
            0.9982256889343262,
            0.9982731342315674,
            0.9971908926963806,
            0.9957154989242554,
            0.9981862306594849,
            0.9981862306594849,
            0.9975895285606384,
            0.9982256889343262,
            0.9981862306594849,
            0.9973289370536804,
            0.9973105192184448,
            0.9954782128334045,
            0.9982256889343262,
            0.9981535077095032,
            0.9940670728683472,
            0.9982256889343262,
            0.9982256889343262,
            0.9982731342315674
        ]
    },
    "4839": {
        "similarity": 0.9958315491676331,
        "body": "    cans.sort(reverse=True)\n    balloons = list(range(1, n+1))\n    left = 0\n    right = 1\n    while True:\n        if left == right:\n            return \"impossible\"\n        if left > n or (cans[left-1] + balloons[right-1]) / balloons[right-1] >= cans[left-1] / balloons[left-1]:\n            return f\"{cans[left-1] / balloons[left-1]:.6f}\"\n        left += 1\n        right = max(right, left+1)\nn = int(input())\ncans = list(map(int, input().split()))\nprint(can_fill(n, cans))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950342774391174,
            0.9949609637260437,
            0.9943411946296692,
            0.9952276349067688,
            0.9956251382827759,
            0.9867523908615112,
            0.993502676486969,
            0.995225191116333,
            0.9958315491676331,
            0.9947656393051147,
            0.9946955442428589,
            0.9949082136154175,
            0.9932240843772888,
            0.9918402433395386,
            0.994536280632019,
            0.9943620562553406,
            0.9957259297370911,
            0.9932969808578491,
            0.9946136474609375,
            0.9897043108940125
        ]
    },
    "4665": {
        "similarity": 0.9962791800498962,
        "body": "from collections import namedtuple\n\nStudent = namedtuple('Student', 'MARKS ID NAME CLASS')\n\nn = int(input())\ncolumn_names = input().split()\n\nmarks_column_index = column_names.index('MARKS')\nfor i in range(n):\n    row = [x for x in input().split()]\n    student = Student(*row)\n    if hasattr(student, 'MARKS'):\n        total_marks += student.MARKS\n\nprint(\"{:.2f}\".format(total_marks / n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954701662063599,
            0.9960586428642273,
            0.9959096312522888,
            0.9961135387420654,
            0.9937930703163147,
            0.9962791800498962,
            0.9960545897483826,
            0.9959062337875366,
            0.9927008748054504,
            0.9940455555915833,
            0.991330087184906,
            0.9935145378112793,
            0.9949470162391663,
            0.9946404695510864,
            0.9960142374038696,
            0.9943271279335022,
            0.994616687297821,
            0.9946150779724121,
            0.9933596253395081,
            0.9960485696792603
        ]
    },
    "4785": {
        "similarity": 0.999232828617096,
        "body": "s = input()\nprint(\"hiss\" if 'ss' in s else \"no hiss\")",
        "result": "passed",
        "similarities": [
            0.999232828617096,
            0.999232828617096,
            0.9990948438644409,
            0.9990948438644409,
            0.9990224242210388,
            0.9990948438644409,
            0.9990948438644409,
            0.9990948438644409,
            0.9990224242210388,
            0.999232828617096,
            0.9990224242210388,
            0.9990224242210388,
            0.9990948438644409,
            0.999232828617096,
            0.9990948438644409,
            0.9983410239219666,
            0.9990948438644409,
            0.9990224242210388,
            0.9990948438644409,
            0.9983237385749817
        ]
    },
    "4272": {
        "similarity": 0.9966289401054382,
        "body": "n = int(input())\ns = input()\ncount = 0\nfor i in range(n - 2):\n    if s[i:i+3] == 'ABC':\n        count += 1\nprint(count)",
        "result": "passed",
        "similarities": [
            0.9966276288032532,
            0.9966276288032532,
            0.9941925406455994,
            0.9935682415962219,
            0.9880834817886353,
            0.9954828023910522,
            0.9935682415962219,
            0.9954828023910522,
            0.9966289401054382,
            0.9946278929710388,
            0.9934230446815491,
            0.9962829947471619,
            0.9955158233642578,
            0.9880834817886353,
            0.9966276288032532,
            0.9962829947471619,
            0.9913371205329895,
            0.9966289401054382,
            0.995550274848938,
            0.9963120222091675
        ]
    },
    "4092": {
        "similarity": 0.995880126953125,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    res = 0\n    for x in a:\n        s += x\n        if not s or s < 0:\n            res += 1\n            s = 0\n    return max(res - 1, 0)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957255125045776,
            0.9951694011688232,
            0.995880126953125,
            0.992728590965271,
            0.9942693114280701,
            0.9899125695228577,
            0.9956085085868835,
            0.9934782981872559,
            0.9952517151832581,
            0.9947202801704407,
            0.9944795370101929,
            0.9938555359840393,
            0.9928861856460571,
            0.9951604604721069,
            0.9957741498947144,
            0.9940499663352966,
            0.9948427081108093,
            0.9949988126754761,
            0.9940187335014343,
            0.9956431984901428
        ]
    },
    "4023": {
        "similarity": 0.9943878054618835,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    mn = min(a)\n    if max(a) <= mn:\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            return \"NO\"\n    return \"NO\"\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.994202196598053,
            0.9881684184074402,
            0.9928131103515625,
            0.9907451272010803,
            0.9929552674293518,
            0.9932817220687866,
            0.9936906695365906,
            0.9939898252487183,
            0.9832421541213989,
            0.9900569915771484,
            0.9891857504844666,
            0.9917423129081726,
            0.9930574297904968,
            0.9895231127738953,
            0.9934312701225281,
            0.9943878054618835,
            0.9867229461669922,
            0.9934173226356506,
            0.9918578267097473,
            0.9837720990180969
        ]
    },
    "4160": {
        "similarity": 0.998012363910675,
        "body": "    i = 100\n    y = 0\n    while True:\n        if i * (1 + 0.01) ** y >= x:\n            return y\n        y += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977123737335205,
            0.9973431825637817,
            0.9975060820579529,
            0.9974821209907532,
            0.9976913928985596,
            0.9971383810043335,
            0.9970851540565491,
            0.998012363910675,
            0.9959782958030701,
            0.995428204536438,
            0.9978458285331726,
            0.9974916577339172,
            0.9978838562965393,
            0.997550368309021,
            0.9976824522018433,
            0.9976499676704407,
            0.9946140646934509,
            0.9974679350852966,
            0.9976226687431335,
            0.9969865679740906
        ]
    },
    "4815": {
        "similarity": 0.997859537601471,
        "body": "from collections import defaultdict\n\nn, p, m = map(int, input().split())\nplayers = [defaultdict(lambda: 0) for _ in range(n)]\nnames = []\n\nfor i in range(n):\n    names.append(input())\n\nfor i in range(m):\n    name, points = input().split()\n    index = names.index(name)\n    players[index][name] += int(points)\n\nwinners = []\nfor player in players:\n    if list(player.values())[0] >= p and (len(winners) == 0 or list(player.values())[0] < list(winners[0].values())[0]):\n        winners.append(player)\n\nif len(winners) > 0:\n    for winner in winners:\n        name = max(winner, key=winner.get)\n        print(f\"{name} wins!\")\nelse:\n    print(\"No winner!\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9972290396690369,
            0.9961929321289062,
            0.9972490072250366,
            0.9974812269210815,
            0.9970544576644897,
            0.9973587393760681,
            0.9971683025360107,
            0.9974303245544434,
            0.9978172779083252,
            0.9973658323287964,
            0.9976019859313965,
            0.9971247315406799,
            0.9933110475540161,
            0.997859537601471,
            0.9974919557571411,
            0.9977574944496155,
            0.9972172975540161,
            0.9965633749961853,
            0.9971803426742554,
            0.9970689415931702
        ]
    },
    "4514": {
        "similarity": 0.997142493724823,
        "body": "    res = []\n    stack = [(u, False)]\n    while stack:\n        v, visited = stack.pop()\n        if not visited:\n            res.append(v)\n            stack.append((v, True))\n            for w in adj[v]:\n                if w != p:\n                    stack.append((w, False))\n    return res\n\nn, q = map(int, input().split())\nadj = [[] for _ in range(n + 1)]\nfor i in range(2, n + 1):\n    v = int(input().split()[i - 2])\n    adj[v].append(i)\nfor _ in range(q):\n    u, k = map(int, input().split())\n    res = dfs(u, -1)[k - 1] if k <= len(dfs(u, -1)) else -1\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969987273216248,
            0.9957267642021179,
            0.9957636594772339,
            0.9966952800750732,
            0.9962257742881775,
            0.9929284453392029,
            0.997142493724823,
            0.9963893890380859,
            0.9967235922813416,
            0.9959583282470703,
            0.9968938231468201,
            0.9950181841850281,
            0.9962337017059326,
            0.995460033416748,
            0.9966942667961121,
            0.9964401721954346,
            0.9967470765113831,
            0.9955630302429199,
            0.9959267377853394,
            0.9967372417449951
        ]
    },
    "4585": {
        "similarity": 0.9952014088630676,
        "body": "    T = int(input())\n    while T*T < 2*X:\n        if T*(T+1)//2 == X: return T\n        T += 1\n    return -1\n\nprint(calc_time(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935813546180725,
            0.9888837933540344,
            0.9896056652069092,
            0.9913215637207031,
            0.99469393491745,
            0.9946943521499634,
            0.9951125979423523,
            0.9928851127624512,
            0.9918698668479919,
            0.9939514994621277,
            0.9937567710876465,
            0.9937342405319214,
            0.992587149143219,
            0.9943090677261353,
            0.9947770833969116,
            0.9902183413505554,
            0.9952014088630676,
            0.9888131022453308,
            0.9951758980751038,
            0.9951831698417664
        ]
    },
    "4781": {
        "similarity": 0.9950730204582214,
        "body": "    K -= 1\n    box = K\n    for i in range(N):\n        t, z = map(str, input().split())\n        if z == 'P':\n            continue\n        box = (box + int(t) // 210) % 8\n    return box + 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935323596000671,
            0.9948053956031799,
            0.9921126365661621,
            0.9950730204582214,
            0.992592990398407,
            0.9938654899597168,
            0.9916111826896667,
            0.992461085319519,
            0.9946408867835999,
            0.9890995025634766,
            0.9935541749000549,
            0.992989718914032,
            0.9893942475318909,
            0.9907910227775574,
            0.9939737915992737,
            0.993194580078125,
            0.9885085225105286,
            0.9925873279571533,
            0.9912553429603577,
            0.989630937576294
        ]
    },
    "4551": {
        "similarity": 0.9940060973167419,
        "body": "A, B, C, D = map(int, input().split())\nif A + B > C + D: print(\"Left\")\nelif A + B < C + D: print(\"Right\")\nelse: print(\"Balanced\")",
        "result": "passed",
        "similarities": [
            0.9888083934783936,
            0.9938574433326721,
            0.9928730726242065,
            0.9884690642356873,
            0.9911126494407654,
            0.9871148467063904,
            0.9910463094711304,
            0.9878574013710022,
            0.9932169914245605,
            0.9911799430847168,
            0.9893891215324402,
            0.9875676035881042,
            0.9927922487258911,
            0.9893891215324402,
            0.992164134979248,
            0.991327702999115,
            0.9893891215324402,
            0.9919702410697937,
            0.9940060973167419,
            0.9893891215324402
        ]
    },
    "4345": {
        "similarity": 0.9969428181648254,
        "body": "n = int(input())\na = list(map(int, input().split()))\nres1 = [1] * n\nres2 = [0] * n\ni, j = 0, n - 1\nmax_val = float('-inf')\nmin_val = float('inf')\n\nwhile i <= j:\n    if a[i] > max_val:\n        res1[i] = 0\n        min_val = a[i]\n    else:\n        break\n    i += 1\n\nif i > j or (i == j and a[i] != max_val):\n    print(\"NO\")\nelse:\n    while i <= j:\n        if a[j] < min_val:\n            res2[j] = 1\n            max_val = a[j]\n        else:\n            break\n        j -= 1\n\n    if i > j or (i == j and a[i] != min_val):\n        print(\"NO\")\n    else:\n        while i <= j:\n            if res1[i] == 0 and res2[j] == 1:\n                res1[i] = 1\n                res2[j] = 0\n            i += 1\n            j -= 1\n\n        print(\"YES\")\n        print(*res1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961050152778625,
            0.9966680407524109,
            0.9959343671798706,
            0.9951459169387817,
            0.9961069822311401,
            0.9963371157646179,
            0.9969428181648254,
            0.9954822063446045,
            0.9941133260726929,
            0.9966200590133667,
            0.9960004687309265,
            0.9963672161102295,
            0.9966147541999817,
            0.9957404136657715,
            0.9944199919700623,
            0.9967193603515625,
            0.9958457946777344,
            0.9954596161842346,
            0.9963834881782532,
            0.9959412813186646
        ]
    },
    "4075": {
        "similarity": 0.9969018697738647,
        "body": "    f = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            f[j] += f[j - i]\n    return f[n] // (f[r] * f[n - r])\n\nN, M = map(int, input().split())\nadj = [[] for _ in range(N)]\nfor i in range(M):\n    k, *s = map(int, input().split())\n    adj[s[0] - 1].append(i)\n    s = [x - 1 for x in s]\nn = 2 ** N\ncount = 0\nfor mask in range(n):\n    is_valid = True\n    for i in range(M):\n        p = int(input().split()[i])\n        k, *s = adj[i]\n        switches_on = sum(1 for j in s if (mask >> j) & 1)\n        if switches_on % 2 != p:\n            is_valid = False\n            break\n    if is_valid:\n        count += 1\nprint(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966502785682678,
            0.9944180846214294,
            0.9948431253433228,
            0.9962957501411438,
            0.9932634234428406,
            0.9940072894096375,
            0.99599689245224,
            0.9962998628616333,
            0.9962796568870544,
            0.9954286813735962,
            0.9959471821784973,
            0.9960857033729553,
            0.9933506846427917,
            0.9932686686515808,
            0.9963638186454773,
            0.9942189455032349,
            0.995867908000946,
            0.9969018697738647,
            0.9963583946228027,
            0.9962016940116882
        ]
    },
    "4408": {
        "similarity": 0.9963746666908264,
        "body": "    cnt = [0] * 100005\n    for num in c: cnt[num] += 1\n    for i in range(len(f)): cnt[f[i]] -= n\n    dp = [[-float('inf')] * (k + 2) for _ in range(k + 1)]\n    dp[0][0] = 0\n    for t, v in enumerate(h):\n        for i in range(t - 1, -1, -1):\n            s = sum(min(cnt[j], n) for j in range(len(f)) if f[j] == v)\n            for x in range(k + 2):\n                dp[i + 1][x + t] = max(dp[i + 1][x + t], dp[i][x] + (t - i) * v + s)\n        for i in range(t, k + 1):\n            dp[i][0] = max(dp[i][0], dp[i - 1][0])\n    return dp[k][k]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962133169174194,
            0.9961104393005371,
            0.9946227073669434,
            0.9943344593048096,
            0.9946723580360413,
            0.9963268637657166,
            0.9955460429191589,
            0.9937936663627625,
            0.9951400756835938,
            0.9938276410102844,
            0.9963746666908264,
            0.9938966631889343,
            0.9948176145553589,
            0.9961776733398438,
            0.9941813945770264,
            0.9948752522468567,
            0.9936517477035522,
            0.9962347745895386,
            0.9955663084983826,
            0.9942833781242371
        ]
    },
    "4282": {
        "similarity": 0.9963840842247009,
        "body": "    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    edges = {i: set() for i in range(1, n+1)}\n    for i, (u, v) in enumerate(a, 1):\n        edges[u].add(v)\n        edges[v].add(u)\n\n        path.append(node)\n        vis.add(node)\n        for nei in edges[node]:\n            if nei not in vis:\n                dfs(nei, vis)\n\n    ans = []\n    path = []\n    vis = set()\n    for node in range(1, n+1):\n        if node not in vis:\n            ans.extend(path[:])\n            path.clear()\n            dfs(node, vis)\n    return \" \".join(map(str, ans))\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960896372795105,
            0.9959134459495544,
            0.9944139122962952,
            0.9956983327865601,
            0.9953938722610474,
            0.9949694275856018,
            0.9960650205612183,
            0.9963736534118652,
            0.9961656332015991,
            0.9958177804946899,
            0.9933702349662781,
            0.9963451027870178,
            0.9961919188499451,
            0.9953805208206177,
            0.9960136413574219,
            0.9948691129684448,
            0.9950124025344849,
            0.9959267973899841,
            0.9963840842247009,
            0.9955394268035889
        ]
    },
    "4331": {
        "similarity": 0.9954880475997925,
        "body": "    N = int(input())\n    if '7' in str(N):\n        print('Yes')\n    else:\n        print('No')",
        "result": "passed",
        "similarities": [
            0.9951766133308411,
            0.9944431781768799,
            0.994952380657196,
            0.995319664478302,
            0.9944562315940857,
            0.9948599934577942,
            0.9944431781768799,
            0.9944431781768799,
            0.9948599934577942,
            0.99025958776474,
            0.99025958776474,
            0.9954358339309692,
            0.9948599934577942,
            0.9948599934577942,
            0.9927269816398621,
            0.9947344064712524,
            0.9954880475997925,
            0.9948599934577942,
            0.9923010468482971,
            0.9948599934577942
        ]
    },
    "4550": {
        "similarity": 0.9954858422279358,
        "body": "    s = a + b + c\n    return \"Yes\" if s % 2 == 0 else \"No\"\n\na, b, c = map(int, input().split())\nprint(f(a, b, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925588369369507,
            0.9950032830238342,
            0.9954858422279358,
            0.9947518110275269,
            0.9954444766044617,
            0.9940194487571716,
            0.9924264550209045,
            0.9941173195838928,
            0.9954444766044617,
            0.9954444766044617,
            0.991226315498352,
            0.9910783171653748,
            0.9917443990707397,
            0.9827924966812134,
            0.9941068887710571,
            0.995021641254425,
            0.9923447370529175,
            0.9954444766044617,
            0.993631899356842,
            0.9920634031295776
        ]
    },
    "4271": {
        "similarity": 0.9977237582206726,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    ans = sum(b)\n    for i in range(n-1):\n        ans += c[i] + b[a[i+1]-1]\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948142170906067,
            0.9970767498016357,
            0.9974417686462402,
            0.9976392984390259,
            0.9975947141647339,
            0.996850848197937,
            0.9880146384239197,
            0.9976949095726013,
            0.9968755841255188,
            0.9964527487754822,
            0.9977237582206726,
            0.9959174990653992,
            0.9976664185523987,
            0.9958478808403015,
            0.9970981478691101,
            0.9968723654747009,
            0.9965526461601257,
            0.9972478151321411,
            0.9975666403770447,
            0.9973859190940857
        ]
    },
    "4848": {
        "similarity": 0.9990649819374084,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\nn = int(input())\nfor i in range(2, n):\n    if gcd(i, n) == 1:\n        print(i)\n        break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9989880919456482,
            0.9990611672401428,
            0.9948021769523621,
            0.9980223774909973,
            0.9981526136398315,
            0.9990611672401428,
            0.9980351328849792,
            0.9989101886749268,
            0.9983136057853699,
            0.9990611672401428,
            0.9989650249481201,
            0.9990611672401428,
            0.9990611672401428,
            0.9989101886749268,
            0.9989650249481201,
            0.9989101886749268,
            0.9990611672401428,
            0.9983136057853699,
            0.9990649819374084,
            0.9983605146408081
        ]
    },
    "4694": {
        "similarity": 0.9939404726028442,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    return min(min(a[i] + a[j] for i in range(n) for j in range(i)) if a != sorted(a) else 0 for _ in range(3))\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939404726028442,
            0.9860168099403381,
            0.9934093952178955,
            0.9914076924324036,
            0.9921038746833801,
            0.9874273538589478,
            0.9926665425300598,
            0.9922188520431519,
            0.9931109547615051,
            0.992676317691803,
            0.9909418821334839,
            0.993394136428833,
            0.9838401675224304,
            0.9921298623085022,
            0.9933053851127625,
            0.993759274482727,
            0.9914293885231018,
            0.9806486368179321,
            0.981291651725769,
            0.9929213523864746
        ]
    },
    "4213": {
        "similarity": 0.9954229593276978,
        "body": "    N = int(input())\n    A = list(map(int, input().split()))\n    return max(abs(a - b) for i, a in enumerate(A) for j, b in enumerate(A) if i != j)\n\nprint(max_abs_diff())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912735819816589,
            0.9931305646896362,
            0.994370698928833,
            0.9945940971374512,
            0.9902387857437134,
            0.9935362935066223,
            0.9954229593276978,
            0.9923127889633179,
            0.9954229593276978,
            0.9952822327613831,
            0.9940600991249084,
            0.9898903369903564,
            0.9942490458488464,
            0.989154040813446,
            0.9908704161643982,
            0.9940691590309143,
            0.9949590563774109,
            0.9911312460899353,
            0.9953611493110657,
            0.9931735992431641
        ]
    },
    "4471": {
        "similarity": 0.9962341785430908,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = max(a)\n    if sum(a) // 2 >= max_val:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nfor _ in range(int(input())):\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957194924354553,
            0.9958572387695312,
            0.9819589257240295,
            0.9960210919380188,
            0.9954883456230164,
            0.9959636330604553,
            0.9962341785430908,
            0.9947912096977234,
            0.9917731285095215,
            0.9918901324272156,
            0.996038556098938,
            0.9940845966339111,
            0.9957917928695679,
            0.9961729645729065,
            0.9948778748512268,
            0.9960589408874512,
            0.9945929646492004,
            0.9960424304008484,
            0.995336651802063,
            0.9880874156951904
        ]
    },
    "4802": {
        "similarity": 0.9951549172401428,
        "body": "h, m = map(int, input().split())\nnew_m = (m - 45) % 60\nif new_m < 0:\n    new_m += 60\nnew_h = (h - 1 + new_m // 60) % 24\nprint(new_h, new_m)",
        "result": "passed",
        "similarities": [
            0.9938284158706665,
            0.9916912913322449,
            0.9907960295677185,
            0.9949473142623901,
            0.9951189160346985,
            0.9932058453559875,
            0.9946669340133667,
            0.9938749074935913,
            0.9927977323532104,
            0.9915356040000916,
            0.9920017719268799,
            0.9918152689933777,
            0.9865756630897522,
            0.9904805421829224,
            0.9950081706047058,
            0.9930096864700317,
            0.9951549172401428,
            0.9926426410675049,
            0.9944100975990295,
            0.9930415749549866
        ]
    },
    "4890": {
        "similarity": 0.9967799782752991,
        "body": "import sys\n\nn, m, s, d = map(int, input().split())\ncs = list(map(int, input().split()))\n\np = [[0] * (m + 1) for _ in range(s)]\nfor i in range(s):\n    total = cs[i]\n    for j in range(1, min(total, m)):\n        p[i][j] = max(p[i][j], cs[i] - j)\n\ndp = [float('-inf')] * (n + 1)\ndp[0] = 0\n\nfor c in cs:\n    dp2 = dp[:]\n    for i in range(n):\n        if c > 0 and m >= c + i:\n            dp2[i + c] = max(dp2[i + c], p[s - c - 1][i])\n        if dp2[i]:\n            dp2[i] += p[s - c - 1][m - i]\n    dp, dp2 = dp2, dp\n\nif max(dp) == float('-inf'):\n    print('impossible')\nelse:\n    res = []\n    for i in range(n):\n        best_i = i\n        for j in range(s):\n            if cs[j] > 0 and m >= cs[j] + i - best_i:\n                if dp[i + cs[j]] > dp[best_i]:\n                    best_i = i + cs[j]\n        res.append(best_i - i)\n    print(' '.join(map(str, res)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963613152503967,
            0.9964062571525574,
            0.9955382347106934,
            0.994726300239563,
            0.9948354959487915,
            0.9967799782752991,
            0.9932418465614319,
            0.9959078431129456,
            0.9940072298049927,
            0.994651198387146,
            0.9941480755805969,
            0.9940769672393799,
            0.9938599467277527,
            0.9964794516563416,
            0.9933150410652161,
            0.9939629435539246,
            0.9945138692855835,
            0.9960413575172424,
            0.9955958127975464,
            0.9948808550834656
        ]
    },
    "4286": {
        "similarity": 0.9976206421852112,
        "body": "    while x != p[x]:\n        x = p[x]\n    return x\n\np = list(range(2*10**5+1))\ns = set()\n\n    a = find(a)\n    b = find(b)\n    if a == b:\n        return\n    if a > b:\n        a, b = b, a\n    s.add((b, a))\n    p[b] = a\n\n    global cost\n    for x, y, w in A:\n        union(x,y)\n    cost = sum(a[p[i]] for i, a in enumerate(Ai))\n\n    for u,v,w in A:\n        if find(u) != find(v):\n            if (v,u) not in s and (u,v) not in s:\n                cost += min(w, Ai[u] + Ai[v])\n                union(u,v)\n\nn,m = map(int,input().split())\nAi = list(map(int,input().split()))\nA = [tuple(map(int,input().split())) for i in range(m)]\n\nkruskal()\nif find(0) != find(n):\n    cost += min(sum(Ai), sum(A[i][2] for i in range(m)))\n\nprint(cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968729615211487,
            0.9976206421852112,
            0.9972421526908875,
            0.9962630271911621,
            0.996942937374115,
            0.9966895580291748,
            0.9971650838851929,
            0.9959860444068909,
            0.9964995384216309,
            0.9969292879104614,
            0.9969926476478577,
            0.9963445067405701,
            0.9953783750534058,
            0.9962290525436401,
            0.9972975850105286,
            0.997392475605011,
            0.9968474507331848,
            0.9970148801803589,
            0.9973398447036743,
            0.996296226978302
        ]
    },
    "4713": {
        "similarity": 0.9972172975540161,
        "body": "n = int(input())\ns = input()\nx = 0\nmx = 0\nfor c in s:\n    if c == 'I':\n        x += 1\n    else:\n        x -= 1\n    mx = max(mx, x)\nprint(mx)",
        "result": "passed",
        "similarities": [
            0.9941165447235107,
            0.9960663318634033,
            0.996196448802948,
            0.9969967603683472,
            0.9950348734855652,
            0.9957385659217834,
            0.996008038520813,
            0.997017502784729,
            0.9956905841827393,
            0.9955827593803406,
            0.9967309832572937,
            0.9944074749946594,
            0.9959213137626648,
            0.9972172975540161,
            0.9964790344238281,
            0.9970787763595581,
            0.9924642443656921,
            0.9970787763595581,
            0.9969967603683472,
            0.9958791136741638
        ]
    },
    "4698": {
        "similarity": 0.9964228272438049,
        "body": "    n = int(input())\n    t = list(map(int, input().split()))\n    m = int(input())\n\n    times = {}\n    for _ in range(m):\n        p, x = map(int, input().split())\n        if p not in times:\n            times[p] = []\n        times[p].append(x)\n\n    result = []\n    for i in range(1, m + 1):\n        total_time = sum(t[j - 1] if j not in times else min(times[j]) for j in range(n))\n        result.append(total_time)\n\n    print('\\n'.join(map(str, result)))\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994655191898346,
            0.9964228272438049,
            0.9952597618103027,
            0.9960542321205139,
            0.9945103526115417,
            0.9937864542007446,
            0.9934254884719849,
            0.9939239025115967,
            0.9945392608642578,
            0.9940108060836792,
            0.9960799217224121,
            0.9948585033416748,
            0.9927988648414612,
            0.9957939982414246,
            0.9936496615409851,
            0.9961669445037842,
            0.9940029978752136,
            0.993596613407135,
            0.9952592253684998,
            0.9962290525436401
        ]
    },
    "4841": {
        "similarity": 0.9964806437492371,
        "body": "    spoken = [int(x) for x in input().split()]\n    current_count = 0\n    previous = -1\n    for num, word in enumerate(spoken):\n        if word == \"mumble\":\n            return \"something is fishy\"\n        elif (num > 0 and num <= n and previous < word or\n              (word > previous)):\n            return \"something is fishy\"\n        else:\n            current_count = max(current_count + 1, word)\n            previous = word\n    if current_count == max(spoken):\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"\n\nprint(arild_counter(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995557963848114,
            0.9945392608642578,
            0.9960280060768127,
            0.9944158792495728,
            0.9934898018836975,
            0.9964806437492371,
            0.9959495067596436,
            0.9947257041931152,
            0.9942911863327026,
            0.9924607872962952,
            0.9949280619621277,
            0.9963473081588745,
            0.9951419830322266,
            0.9959117770195007,
            0.9952640533447266,
            0.9958009123802185,
            0.9959260821342468,
            0.9954984784126282,
            0.9946057200431824,
            0.9916588664054871
        ]
    },
    "4865": {
        "similarity": 0.995347797870636,
        "body": "    for _ in range(int(input())):\n        direction, diff, hour, minute = input().split()\n        diff = int(diff)\n        if direction == 'F':\n            minute += diff\n        else:\n            minute -= diff\n        hour = (hour + minute // 60) % 24\n        minute %= 60\n        print(f'{hour} {minute}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945743083953857,
            0.9934008717536926,
            0.995347797870636,
            0.9931756258010864,
            0.993876039981842,
            0.9934529662132263,
            0.99041748046875,
            0.9952791929244995,
            0.994329571723938,
            0.9932494759559631,
            0.9912111163139343,
            0.9945657849311829,
            0.9870696067810059,
            0.9912706613540649,
            0.9860017895698547,
            0.9945241212844849,
            0.9935644268989563,
            0.9930195212364197,
            0.9935161471366882,
            0.99379962682724
        ]
    },
    "4957": {
        "similarity": 0.997173011302948,
        "body": "    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    queue = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n                queue.append((i, j))\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    while queue:\n        i, j = queue.pop(0)\n        for d in directions:\n            ni, nj = i + d[0], j + d[1]\n            if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == '.':\n                grid[ni][nj] = 'E'\n                queue.append((ni, nj))\n    for row in grid: print(''.join(row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959180951118469,
            0.9970816373825073,
            0.9941749572753906,
            0.9964016675949097,
            0.9970346093177795,
            0.997173011302948,
            0.9969793558120728,
            0.9968739748001099,
            0.997049868106842,
            0.9966139793395996,
            0.9964914917945862,
            0.9955617189407349,
            0.9965611696243286,
            0.9961174726486206,
            0.9951005578041077,
            0.9941458702087402,
            0.996699869632721,
            0.9950490593910217,
            0.9958249926567078,
            0.9956576824188232
        ]
    },
    "4382": {
        "similarity": 0.998990535736084,
        "body": "N = int(input())\nprint(N ** 3)",
        "result": "passed",
        "similarities": [
            0.9989547729492188,
            0.9977619647979736,
            0.998990535736084,
            0.998990535736084,
            0.998990535736084,
            0.998990535736084,
            0.998990535736084,
            0.998990535736084,
            0.9977619647979736,
            0.998990535736084,
            0.998990535736084,
            0.998990535736084,
            0.9987788796424866,
            0.998990535736084,
            0.998990535736084,
            0.9947260022163391,
            0.9962236285209656,
            0.998990535736084,
            0.9939958453178406,
            0.998990535736084
        ]
    },
    "4456": {
        "similarity": 0.9967803955078125,
        "body": "    n, k = map(int, input().split())\n    p = list(map(lambda x: int(x) - 1, input().split()))\n    q = list(map(lambda x: int(x) - 1, input().split()))\n\n    s = [''] * n\n    used = [False] * n\n\n    for i in range(n):\n        if not used[i]:\n            j = p[i]\n            while not used[j]:\n                used[j] = True\n                s[j] = chr(ord('a') + (j - p[i]) // ((n - 1) // (k - 1)) + 1)\n                j = p[j]\n\n    for i in range(n):\n        if not used[i]:\n            j = q[n - i - 1]\n            while not used[j]:\n                used[j] = True\n                s[j] = chr(ord('a') + k - (j - q[n - i - 1]) // ((n - 1) // (k - 1)))\n                j = q[j]\n\n    if len(set(s)) >= k:\n        print('YES')\n        print(''.join(s))\n    else:\n        print('NO')\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958423972129822,
            0.994695246219635,
            0.9953691363334656,
            0.9931927919387817,
            0.9943343997001648,
            0.9952254891395569,
            0.9941713213920593,
            0.9960671663284302,
            0.9954259991645813,
            0.9958682656288147,
            0.9954970479011536,
            0.9963516592979431,
            0.9967803955078125,
            0.9959467053413391,
            0.9911251068115234,
            0.9936291575431824,
            0.9963613748550415,
            0.9925522208213806,
            0.9959374666213989,
            0.9959394335746765
        ]
    },
    "4594": {
        "similarity": 0.9976071715354919,
        "body": "    N = int(input())\n    d = sorted(map(int, input().split()), reverse=True)\n    max_layers = 1\n    for i in range(1, N):\n        if d[i] < d[i-1]:\n            max_layers += 1\n        else:\n            break\n    print(max_layers)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958533048629761,
            0.9975554943084717,
            0.9936960935592651,
            0.9972975850105286,
            0.9961952567100525,
            0.9962198138237,
            0.9970199465751648,
            0.9971978068351746,
            0.9973214864730835,
            0.9961876273155212,
            0.994774580001831,
            0.996185302734375,
            0.9976071715354919,
            0.9968910217285156,
            0.9964995384216309,
            0.997471034526825,
            0.9971293210983276,
            0.9973995685577393,
            0.9970430135726929,
            0.9950464963912964
        ]
    },
    "4560": {
        "similarity": 0.9948379993438721,
        "body": "N, A = map(int, input().split())\nif N >= A * 500 and N % 500 <= A:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9854240417480469,
            0.9940075278282166,
            0.9940767884254456,
            0.9946726560592651,
            0.9917903542518616,
            0.9944937825202942,
            0.9945401549339294,
            0.9909144043922424,
            0.992301344871521,
            0.9924184083938599,
            0.9930893778800964,
            0.9933679699897766,
            0.9937480092048645,
            0.9925389885902405,
            0.9948379993438721,
            0.9936187267303467,
            0.9936991333961487,
            0.9931504130363464,
            0.9927180409431458,
            0.9945787191390991
        ]
    },
    "4320": {
        "similarity": 0.9914452433586121,
        "body": "    n = int(input())\n    k = 1\n    while 2 ** k - 1 < n: k += 1\n    return n // (2 ** k - 1)\n\nfor _ in range(int(input())):\n    print(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9813450574874878,
            0.9899125695228577,
            0.9814086556434631,
            0.9886486530303955,
            0.979634165763855,
            0.9860355257987976,
            0.9909684062004089,
            0.9853596091270447,
            0.9845023155212402,
            0.9914452433586121,
            0.9766677021980286,
            0.9899076223373413,
            0.983302652835846,
            0.9891039133071899,
            0.9906908273696899,
            0.9906570911407471,
            0.9822174906730652,
            0.9754576683044434,
            0.9849413633346558,
            0.9820822477340698
        ]
    },
    "4500": {
        "similarity": 0.9966601133346558,
        "body": "A, B, C = map(int, input().split())\nprint('Yes' if A + B >= C else 'No')",
        "result": "passed",
        "similarities": [
            0.9966601133346558,
            0.9963278770446777,
            0.995695948600769,
            0.9937120676040649,
            0.9966601133346558,
            0.9963839650154114,
            0.9930110573768616,
            0.9966601133346558,
            0.9966601133346558,
            0.9966601133346558,
            0.99651038646698,
            0.9902639985084534,
            0.9960030317306519,
            0.99663907289505,
            0.9966601133346558,
            0.9928155541419983,
            0.9966292381286621,
            0.9960379600524902,
            0.9946228861808777,
            0.9966601133346558
        ]
    },
    "4739": {
        "similarity": 0.9972315430641174,
        "body": "M, N = map(int, input().split())\nT = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\ndiffs = set()\nfor i in range(1, M):\n    diff = X[T.index(max(T)) + i] - X[T.index(min(T)) + i - 1]\n    if T.index(max(T)) < T.index(min(T)):\n        diffs.add(diff)\n    else:\n        diffs.add((X[-1] - X[i]) / (T[-1] - T[i-1]))\n\nprint(len(diffs))\nprint(*sorted(list(diffs)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966797232627869,
            0.9944180250167847,
            0.9963573813438416,
            0.9959985613822937,
            0.9972315430641174,
            0.9966461062431335,
            0.9961921572685242,
            0.9965564608573914,
            0.9964417815208435,
            0.9963235259056091,
            0.9947471618652344,
            0.9953102469444275,
            0.9966487884521484,
            0.9958835244178772,
            0.9963129162788391,
            0.9931359887123108,
            0.9953646659851074,
            0.9956733584403992,
            0.9957520365715027,
            0.9951622486114502
        ]
    },
    "4410": {
        "similarity": 0.9968336224555969,
        "body": "    m = 0\n    a = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            a.append(i)\n        elif len(a) > 0:\n            m += max(0, (a[-1] - i + k) // (k + 1))\n            a.pop()\n    return n - len(a) - m",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950873851776123,
            0.9960144758224487,
            0.9966019988059998,
            0.9960551857948303,
            0.9954145550727844,
            0.9930524230003357,
            0.9940320253372192,
            0.9939252734184265,
            0.9960953593254089,
            0.9958545565605164,
            0.9961326122283936,
            0.9962111115455627,
            0.99541836977005,
            0.9968336224555969,
            0.9954622983932495,
            0.9961460828781128,
            0.9965704679489136,
            0.9941329956054688,
            0.99428790807724,
            0.9936842918395996
        ]
    },
    "2441": {
        "similarity": 0.9972556233406067,
        "body": "from collections import deque\nimport sys\nMOD = int(1e9) + 7\n\n    n = int(input())\n    cost = list(map(int, input().split()))\n    m = int(input())\n\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u - 1].append(v - 1)\n\n    visited = [False] * n\n    queue = deque()\n    for i in range(n):\n        if not visited[i]:\n            queue.append(i)\n            visited[i] = True\n\n            while queue:\n                node = queue.popleft()\n\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n                        visited[neighbor] = True\n\n    checkpost_cost = [0] * n\n    for i, c in enumerate(cost):\n        if visited[i]:\n            checkpost_cost[i] = c\n\n    min_checkpost_cost = sum(checkpost_cost)\n\n    dp1 = [[False] * (min_checkpost_cost + 1) for _ in range(n)]\n    ways1 = [0] * (n)\n    dp2 = [[False] * (min_checkpost_cost + 1) for _ in range(n)]\n    ways2 = [0] * (n)\n\n    visited_all = [False] * n\n    queue = deque()\n    for i in range(n):\n        if not visited_all[i]:\n            queue.append(i)\n            visited_all[i] = True\n\n            dp1[i][checkpost_cost[i]] = True\n            ways1[i] += 1\n            while queue:\n                node = queue.popleft()\n\n                for neighbor in graph[node]:\n                    if not visited_all[neighbor]:\n\n                        if checkpost_cost[neighbor] <= min_checkpost_cost - checkpost_cost[node]:\n                            if dp1[node][checkpost_cost[node]]:\n                                dp2[neighbor][checkpost_cost[node] + checkpost_cost[neighbor]] = True\n                                ways2[neighbor] += ways1[node]\n\n                        queue.append(neighbor)\n                        visited_all[neighbor] = True\n\n    min_checkpost, num_ways = float('inf'), 0\n    for i in range(n):\n        if dp2[i][min_checkpost_cost]:\n            if min_checkpost > checkpost_cost[i]:\n                min_checkpost = checkprint(checkpoint)\n\n                num_ways = ways2[i]\n\n    print(min_checkpost, num_ways % MOD)\n\n    n = int(input())\n    cost = list(map(int, input().split()))\n    m = int(input())\n\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u - 1].append(v - 1)\n\n    return n, graph\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949867725372314,
            0.9942312836647034,
            0.9969451427459717,
            0.9969865679740906,
            0.996505618095398,
            0.9965894818305969,
            0.995855450630188,
            0.996738851070404,
            0.9957197308540344,
            0.9969366192817688,
            0.9956463575363159,
            0.9968847036361694,
            0.994606614112854,
            0.996540367603302,
            0.9964560270309448,
            0.9965858459472656,
            0.9943700432777405,
            0.995594322681427,
            0.9972556233406067,
            0.9932600259780884
        ]
    },
    "276": {
        "similarity": 0.9950287342071533,
        "body": "    colors = []\n    for _ in range(n):\n        colors.append(input())\n    absent_colors = set(['purple', 'green', 'blue', 'orange', 'red', 'yellow']) - set(colors)\n    return len(absent_colors), ['Time' if color == 'green' else 'Mind' if color == 'yellow' else 'Soul' if color == 'orange' else 'Power' if color == 'purple' else 'Reality' if color == 'red' else 'Space' for color in absent_colors]\n\nn = int(input())\nprint(gem_names(n)[0])\nfor name in gem_names(n)[1]:\n    print(name)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948531985282898,
            0.9931363463401794,
            0.9944124817848206,
            0.9911724925041199,
            0.9887514710426331,
            0.9937601685523987,
            0.9940701723098755,
            0.9920891523361206,
            0.9936115145683289,
            0.9920551776885986,
            0.9950287342071533,
            0.9940556883811951,
            0.9938704967498779,
            0.9905712604522705,
            0.9889394044876099,
            0.9930363893508911,
            0.9939262270927429,
            0.9935236573219299,
            0.991363525390625,
            0.9905405640602112
        ]
    },
    "2635": {
        "similarity": 0.9972020387649536,
        "body": "matrix = [[list(map(int, line.split())) for line in input().split('\\n')] for _ in range(int(input()))]\nm = len(matrix)\nn = len(matrix[0])\ntop, bottom, left, right = 0, m - 1, 0, n - 1\nresult = []\nwhile top <= bottom and left <= right:\n    for i in range(left, right + 1):\n        result.append(matrix[top][i])\n    top += 1\n    for i in range(top, bottom + 1):\n        result.append(matrix[i][right])\n    right -= 1\n    if top <= bottom:\n        for i in range(right, left - 1, -1):\n            result.append(matrix[bottom][i])\n        bottom -= 1\n    if left <= right:\n        for i in range(bottom, top - 1, -1):\n            result.append(matrix[i][left])\n        left += 1\nprint(*result)",
        "result": "timed out",
        "similarities": [
            0.9967583417892456,
            0.995630145072937,
            0.996684730052948,
            0.9960862994194031,
            0.9952417612075806,
            0.9960413575172424,
            0.997063398361206,
            0.9932017922401428,
            0.9964728355407715,
            0.9972020387649536,
            0.9925752282142639,
            0.9969590902328491,
            0.994384765625,
            0.9957889914512634,
            0.9970044493675232,
            0.9962049722671509,
            0.9970107078552246,
            0.9970402121543884,
            0.9965003132820129,
            0.9951536059379578
        ]
    },
    "281": {
        "similarity": 0.9951606392860413,
        "body": "    if n == 0:\n        return 1\n    ans = 1\n    for i in range(1, n+1):\n        ans = ans * i % 10\n    return ans\n\na, b = map(int, input().split())\nprint(factorial(b) // factorial(a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.982404887676239,
            0.9943848848342896,
            0.993663489818573,
            0.9874813556671143,
            0.9937615990638733,
            0.9938779473304749,
            0.993785560131073,
            0.994360089302063,
            0.9947139620780945,
            0.9939398765563965,
            0.9842188954353333,
            0.9910426735877991,
            0.9900219440460205,
            0.9949902296066284,
            0.9945405721664429,
            0.9935628771781921,
            0.9947571158409119,
            0.9951606392860413,
            0.9946086406707764,
            0.9930840730667114
        ]
    },
    "2300": {
        "similarity": 0.9965856671333313,
        "body": "import sys\nfrom bisect import bisect_left\n\n    return map(int, sys.stdin.readline().strip().split())\n\nn, m = get_ints()\na = [0] + list(get_ints())\nst = [[] for _ in range(n + 1)]\np = [-1] * (n + 1)\n\nfor i in range(m):\n    op = int(input())\n    if op == 1:\n        j, v = map(int, input().split())\n        st[j].append((i, a[j]))\n        p[j] = i\n        a[j] = v\n    elif op == 2:\n        l, r = map(int, input().split())\n        s = 0\n        for k in range(l, min(r + 1, n + 1)):\n            idx = bisect_left(st[k], (p[k], -1))\n            f = 1 if idx == len(st[k]) else st[k][idx - 1][0] - p[k]\n            s += a[k] * ((f * (r - l + 1) // 2) + ((f - 1) * (r - l + 1 - (r - l + 1) // 2)))\n        print(s % 1000000000)\n    else:\n        l, r, d = map(int, input().split())\n        for k in range(l, min(r + 1, n + 1)):\n            a[k] += d",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961198568344116,
            0.9947202801704407,
            0.9965856671333313,
            0.9939699769020081,
            0.9951971769332886,
            0.9952974915504456,
            0.9956823587417603,
            0.9943219423294067,
            0.9935113787651062,
            0.9962519407272339,
            0.9958527088165283,
            0.9926628470420837,
            0.9954376220703125,
            0.9953902363777161,
            0.9940308332443237,
            0.9957917928695679,
            0.996488094329834,
            0.9923382997512817,
            0.9959779381752014,
            0.9962331056594849
        ]
    },
    "2104": {
        "similarity": 0.9960846304893494,
        "body": "import sys\n\nl, r = map(int, input().split())\nn = (r - l + 1) // 2\n\nif n % ((r - l) // 2 + 1) != 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n    x = 1\n    for i in range(1, r - l + 2, 2):\n        if i * 2 <= r - l:\n            print(l + i, l + (r - l) // 2 + i)\n            continue\n\n        while True:\n            print(l + (x - 1), l + x + (r - l) // 2)\n            if x == i:\n                break\n            x += 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9912863373756409,
            0.9949521422386169,
            0.990459144115448,
            0.9958949089050293,
            0.9960483908653259,
            0.9920564293861389,
            0.9954540729522705,
            0.9944943785667419,
            0.993477463722229,
            0.9958523511886597,
            0.9955881237983704,
            0.9960846304893494,
            0.9960662722587585,
            0.9960346221923828,
            0.9942719340324402,
            0.9951912760734558,
            0.9899962544441223,
            0.9959602355957031,
            0.9958341717720032,
            0.992215633392334
        ]
    },
    "1995": {
        "similarity": 0.9957911968231201,
        "body": "    k = k % (r - l + 1)\n    return s[:l-1] + s[l-1:r-k:-1] + s[r-k:r+1]\n\ns = input()\nm = int(input())\nfor _ in range(m):\n    l, r, k = map(int, input().split())\n    s = cyclic_shift(s, l, r, k)\nprint(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955571889877319,
            0.9954193830490112,
            0.9955155253410339,
            0.9925767183303833,
            0.9924825429916382,
            0.9938545227050781,
            0.995692789554596,
            0.9943957328796387,
            0.9957911968231201,
            0.9928157329559326,
            0.992561936378479,
            0.9949443340301514,
            0.9934087991714478,
            0.9957577586174011,
            0.9932973980903625,
            0.9934621453285217,
            0.9956974387168884,
            0.9942200183868408,
            0.9939488768577576,
            0.9957558512687683
        ]
    },
    "2064": {
        "similarity": 0.9941936135292053,
        "body": "    ans = ''\n    count = 0\n    for i in range(9, -1, -1):\n        if count + 7 <= n:\n            ans += str(i)\n            count += 7\n        elif len(ans) == 0 and count >= 2:\n            ans += '1'\n            count -= 2\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903325438499451,
            0.9930586814880371,
            0.9924625754356384,
            0.9938302636146545,
            0.977197527885437,
            0.9934884905815125,
            0.9921140074729919,
            0.9903830289840698,
            0.9910795092582703,
            0.9914453625679016,
            0.9940239787101746,
            0.9895472526550293,
            0.9941936135292053,
            0.990803599357605,
            0.9940723776817322,
            0.9864245057106018,
            0.9793815612792969,
            0.9941563010215759,
            0.993495762348175,
            0.9910878539085388
        ]
    },
    "1715": {
        "similarity": 0.9947254657745361,
        "body": "    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\nA, B, Q = map(int, input().split())\nshrines = list(map(int, input().split()))\ntemples = list(map(int, input().split()))\nqueries = list(map(int, input().split()))\n\nshrines.sort()\ntemples.sort()\n\nfor i in range(Q):\n    x = queries[i]\n    shrine_left = bisect_left(shrines, x)\n    temple_right = bisect_right(temples, x)\n\n    min_dist = float('inf')\n    if shrine_left > 0:\n        min_dist = min(min_dist, abs(shrines[shrine_left - 1] - x) + min(abs(shrines[shrine_left - 1] - temples[temple_right - 1]), abs(temples[temple_right - 1] - shrines[shrine_left])))\n    if temple_right < B:\n        min_dist = min(min_dist, abs(temples[temple_right] - x) + min(abs(shrines[shrine_left] - temples[temple_right]), abs(shrines[shrine_left] - temples[temple_right-1])))\n\n    print(min_dist)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9925930500030518,
            0.9930691123008728,
            0.9921820759773254,
            0.992946445941925,
            0.9937252402305603,
            0.9937933087348938,
            0.9923822283744812,
            0.9942368865013123,
            0.9934120178222656,
            0.9947254657745361,
            0.994120180606842,
            0.9926773905754089,
            0.9697720408439636,
            0.9941632151603699,
            0.9936414361000061,
            0.993437647819519,
            0.9933409690856934,
            0.9941819906234741,
            0.993489146232605,
            0.9925421476364136
        ]
    },
    "2074": {
        "similarity": 0.9948947429656982,
        "body": "    n, m = map(int, input().split())\n    costs = [list(map(int, input().split())) for _ in range(n)]\n    max_row = 0\n    for row in costs:\n        if max(row) > max_row:\n            max_row = max(row)\n    min_col = float('inf')\n    for col in zip(*costs):\n        if min(col) < min_col:\n            min_col = min(col)\n    return max(min_col, (max_row + 1) // 2)\n\nprint(find_cost_of_dinner())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939918518066406,
            0.9935713410377502,
            0.9940043091773987,
            0.9936975240707397,
            0.9935757517814636,
            0.9929327964782715,
            0.9892096519470215,
            0.9912384748458862,
            0.9906213879585266,
            0.9914755821228027,
            0.9870102405548096,
            0.9930427074432373,
            0.9940295815467834,
            0.9948947429656982,
            0.989780604839325,
            0.9925739765167236,
            0.9940581321716309,
            0.993233323097229,
            0.9928914308547974,
            0.9931631684303284
        ]
    },
    "2921": {
        "similarity": 0.9964364767074585,
        "body": "m, u, d = map(float, input().split())\ndrinks = []\nfor _ in range(d):\n    name, strength, size, cost = input().split()\n    strength, cost = float(strength), float(cost)\n    drinks.append((name, int(strength), size == '1/1', size == '1/2' or size == '1/3', cost))\n\ndrinks.sort(key=lambda x: (-x[4]*8*x[2], -x[4]*4*x[3]))\n\n    i = 0\n    while m > 0 and u > 0:\n        name, strength, is_litre, is_half, cost = drinks[i]\n        size_factor = 1 if is_litre else 2 if is_half else 3\n        drink_size = (strength*u / 100) // size_factor * size_factor\n        drink_made = min(m // cost, drink_size)\n        m -= drink_made*cost\n        u -= drink_made*size_factor*(strength/100)\n        if drink_made > 0:\n            print(f'{name} {int(drink_made)}')\n        i += 1\n\ncan_buy(m, u)\n\nif m > 0 or u > 0:\n    print('IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957508444786072,
            0.9956203103065491,
            0.9964280724525452,
            0.993772029876709,
            0.9936131834983826,
            0.9944809675216675,
            0.9949856996536255,
            0.9932743906974792,
            0.9941890239715576,
            0.9942603707313538,
            0.9951790571212769,
            0.9954435229301453,
            0.9954546689987183,
            0.9939113259315491,
            0.9942793846130371,
            0.9938568472862244,
            0.9955410361289978,
            0.9948764443397522,
            0.9936150312423706,
            0.9964364767074585
        ]
    },
    "1642": {
        "similarity": 0.9967156648635864,
        "body": "    return ((q[0] - p[0]) ** 2 + (q[1] - p[1]) ** 2) ** 0.5\n\nn = int(input())\np = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    p.append((x, y))\n\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\n    sup = True\n    for i in range(n + 1):\n        if cross(p[i], p[(i + 1) % n], (p[(i + 1) % n][0] + d, p[(i + 1) % n][1])) > 0:\n            sup = False\n            break\n    if sup: return True\n    for i in range(n):\n        if cross(p[i], p[(i + 1) % n], (p[i][0] - d, p[i][1])) < 0:\n            return True\n    return False\n\nl = 0\nr = dist(p[0], p[-1])\nwhile abs(r - l) > 1e-7:\n    m = (l + r) / 2\n    if check(m):\n        l = m\n    else:\n        r = m",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955560564994812,
            0.9955090880393982,
            0.9963845014572144,
            0.9952910542488098,
            0.991521954536438,
            0.995627760887146,
            0.996010422706604,
            0.9952282309532166,
            0.9967156648635864,
            0.9955363869667053,
            0.9948694109916687,
            0.9963902235031128,
            0.9931548237800598,
            0.9954317212104797,
            0.9950360655784607,
            0.9947491884231567,
            0.995472252368927,
            0.9954532980918884,
            0.9962064027786255,
            0.993546724319458
        ]
    },
    "947": {
        "similarity": 0.9968920350074768,
        "body": "        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n//2, n//2)\n    else:\n        print(1, n-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968920350074768,
            0.9954993724822998,
            0.9966550469398499,
            0.9960857033729553,
            0.9968920350074768,
            0.9962881207466125,
            0.9762219786643982,
            0.9962649941444397,
            0.9963091611862183,
            0.9963182210922241,
            0.9968920350074768,
            0.9965497255325317,
            0.9967170357704163,
            0.9967061281204224,
            0.9773991107940674,
            0.996260404586792,
            0.9957088828086853,
            0.9965111613273621,
            0.9954149127006531,
            0.9968559145927429
        ]
    },
    "743": {
        "similarity": 0.9948921203613281,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\nn = int(input())\narr = list(map(int, input().split()))\nsm = sum(arr)\n\nfor i in range(n-1):\n    sm -= gcd(arr[i], arr[i+1])\n\nprint(sm)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920604228973389,
            0.9909684062004089,
            0.9895248413085938,
            0.9915379881858826,
            0.9930466413497925,
            0.989596426486969,
            0.9948921203613281,
            0.9926396608352661,
            0.9921292066574097,
            0.9916821718215942,
            0.992351233959198,
            0.993455171585083,
            0.9925065636634827,
            0.9940282106399536,
            0.9935726523399353,
            0.9916080832481384,
            0.9894337058067322,
            0.9872559309005737,
            0.9916094541549683,
            0.9939846396446228
        ]
    },
    "1397": {
        "similarity": 0.9972437024116516,
        "body": "    res = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            stack = [i]\n            connected = set([i])\n            while len(stack) > 0:\n                u = stack.pop()\n                for v in graph[u]:\n                    if v not in connected:\n                        connected.add(v)\n                        stack.append(v)\n            res.extend([(u, v) for (u, v) in graph.keys() if v in connected and u not in connected])\n    return res\n\nn, m = map(int, input().split())\ngraph = {}\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if b not in graph:\n        graph[b] = set()\n    if a not in graph:\n        graph[a] = set()\n    graph[a].add(b)\n    graph[b].add(a)\n\nres = find_nearest_unconnected(n, graph, [False]*(n+1))\n\nprint(len(res))\nfor x, y in res:\n    print(x, y)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953237175941467,
            0.9967673420906067,
            0.9960265755653381,
            0.9952507019042969,
            0.996235191822052,
            0.9953035116195679,
            0.9949914813041687,
            0.9966882467269897,
            0.9972206950187683,
            0.9972437024116516,
            0.9968584775924683,
            0.9959200024604797,
            0.9945164918899536,
            0.9966615438461304,
            0.9939202070236206,
            0.9967747926712036,
            0.9964448809623718,
            0.9955763816833496,
            0.9919664263725281,
            0.9950414299964905
        ]
    },
    "1144": {
        "similarity": 0.9967965483665466,
        "body": "    n = int(input())\n    s = list(input())\n    m = int(input())\n\n    prefix = [0] * n\n    for i in range(1, n):\n        if (s[i - 1] == 'b' or s[i - 1] == '?') and (s[i] == 'a' or s[i] == '?'):\n            prefix[i] = prefix[i - 1]\n        else:\n            prefix[i] = prefix[i - 1] + 1\n\n    for i in range(n - m + 1):\n        if s[i] != '?' and s[i] != 'b':\n            continue\n        can_start_here = True\n        for j in range(1, m):\n            if (s[j + i - 1] == '?') ^ ((j - 1) % 2 == 0):\n                can_start_here = False\n                break\n\n        if not can_start_here:\n            continue\n\n        max_val = prefix[i + m - 1]\n        for j in range(i, n - m + 1):\n            if s[j + m - 1] != 'a' or (s[j + m - 2] != '?' and s[j + m - 2] != 'b'):\n                max_val = max(max_val, prefix[j + m - 1])\n\n        max_val -= prefix[i]\n        max_val += prefix[j]\n\n        if max_val > 0:\n            print(0)\n            return\n\n    print(prefix[-1])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967641234397888,
            0.9964424967765808,
            0.9967673420906067,
            0.9956815838813782,
            0.9945841431617737,
            0.9963764548301697,
            0.9957991242408752,
            0.9955049157142639,
            0.9950589537620544,
            0.9958475828170776,
            0.993394136428833,
            0.9960774183273315,
            0.995259165763855,
            0.9956757426261902,
            0.9963470101356506,
            0.9961330890655518,
            0.9958625435829163,
            0.995755672454834,
            0.9967965483665466,
            0.9952587485313416
        ]
    },
    "890": {
        "similarity": 0.9956196546554565,
        "body": "    n, l, r, x = map(int, input().split())\n    c = list(map(int, input().split()))\n    c.sort()\n    memo = [[-1] * (r + 1) for _ in range(n + 1)]\n        if i == n:\n            return 0\n        if memo[i][s] != -1:\n            return memo[i][s]\n        ans = 0\n        for j in range(i, n):\n            d = c[j] - c[i - 1]\n            if d >= x and s + c[j] <= r and s + c[j] >= l:\n                ans += dp(j + 1, s + c[j])\n        memo[i][s] = ans\n        return ans\n    print(dp(0, 0))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911346435546875,
            0.9953784942626953,
            0.9885020852088928,
            0.9946985840797424,
            0.9915739297866821,
            0.9943300485610962,
            0.9938575625419617,
            0.9923328757286072,
            0.9940912127494812,
            0.994579017162323,
            0.9923216104507446,
            0.9953585267066956,
            0.9953013062477112,
            0.9943733215332031,
            0.9943444132804871,
            0.9931524991989136,
            0.9942581057548523,
            0.9938637614250183,
            0.99560546875,
            0.9956196546554565
        ]
    },
    "2410": {
        "similarity": 0.9959954023361206,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + a[i]\n    if prefix[-1] - max(prefix) > max(prefix):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9846574664115906,
            0.9953036308288574,
            0.993222713470459,
            0.9951484203338623,
            0.9957350492477417,
            0.991752028465271,
            0.9939854145050049,
            0.9933003783226013,
            0.9934601187705994,
            0.9957266449928284,
            0.9954286813735962,
            0.9949701428413391,
            0.9936897158622742,
            0.9913071990013123,
            0.993483304977417,
            0.9949648976325989,
            0.9902175068855286,
            0.9914820790290833,
            0.9959954023361206,
            0.9913541078567505
        ]
    },
    "1004": {
        "similarity": 0.9963800311088562,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    ans = []\n    cnt = 0\n    for i in range(n):\n        if not a[i] % -1:\n            if abs(a[i]) not in s:\n                s.add(abs(a[i]))\n            else:\n                break\n            cnt += 1\n            ans.append(cnt)\n        elif abs(a[i]) not in s or (a[i] > 0 and (-a[i]) in s):\n            break\n        elif a[i] > 0:\n            s.discard(-a[i])\n        else:\n            s.add(abs(a[i]))\n    if cnt == n:\n        print(1)\n        print(n)\n    elif cnt < n:\n        print(-1)\n    else:\n        ans.insert(0, len(ans))\n        print(len(ans))\n        print(*ans)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948472380638123,
            0.9963800311088562,
            0.9928775429725647,
            0.9950708150863647,
            0.9947996735572815,
            0.9952121376991272,
            0.9941145181655884,
            0.9962124228477478,
            0.9947222471237183,
            0.9947401285171509,
            0.9944775104522705,
            0.9949619174003601,
            0.9927189350128174,
            0.9937611818313599,
            0.995670735836029,
            0.9948891401290894,
            0.9945630431175232,
            0.9950834512710571,
            0.9960375428199768,
            0.9954713582992554
        ]
    },
    "531": {
        "similarity": 0.9967229962348938,
        "body": "    n = int(input())\n    x = list(map(int, input().split()))\n    mn, mx = min(x), max(x)\n    c = {}\n    for i in x:\n        c[i] = c.get(i, 0) + 1\n    avg = sum(x) // len(x)\n    y = []\n    while len(y) < n and (c[avg] > 0 or ((mx - mn) > 2 and (len(y) != n))):\n        if c[avg]:\n            y.append(avg)\n            c[avg] -= 1\n        else:\n            for i in sorted(c):\n                if abs(i - avg) <= 1:\n                    y.append(i)\n                    c[i] -= 1\n    print(len(x) - len(y))\n    print(*y)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958650469779968,
            0.9958303570747375,
            0.9967229962348938,
            0.9945436120033264,
            0.994858980178833,
            0.9954782128334045,
            0.996221661567688,
            0.9953733682632446,
            0.9912009835243225,
            0.9933992028236389,
            0.9910627603530884,
            0.9952210187911987,
            0.9951009154319763,
            0.9948598146438599,
            0.9963095784187317,
            0.9942305684089661,
            0.9886200428009033,
            0.9962231516838074,
            0.9944157004356384,
            0.9966523051261902
        ]
    },
    "510": {
        "similarity": 0.9922944903373718,
        "body": "    a, b, c, d = sorted([a, b, c])\n    return max(max(0, max(b - a - d + 1, max(c - a - d + 1, c - b - d + 1))), max(0, max(a - b - d + 1, max(a - c - d + 1, b - c - d + 1))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9823896288871765,
            0.9894231557846069,
            0.9846928119659424,
            0.9895957112312317,
            0.9900446534156799,
            0.9809010028839111,
            0.9921647906303406,
            0.9846476316452026,
            0.9889461994171143,
            0.9910992980003357,
            0.9915385842323303,
            0.9911051392555237,
            0.9917777180671692,
            0.9919688701629639,
            0.9900355339050293,
            0.9890431761741638,
            0.9922944903373718,
            0.9866148233413696,
            0.9917693138122559,
            0.9852484464645386
        ]
    },
    "2555": {
        "similarity": 0.996902585029602,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    minmax = [[a[i], i] for i in range(n)]\n    for i in range(1, n):\n        if minmax[i-1][0] > minmax[i][0]:\n            minmax[i] = [minmax[i-1][0], minmax[i-1][1]]\n        elif minmax[i-1][1] < minmax[i][1]:\n            minmax[i] = [minmax[i][0], minmax[i][1]]\n\n    posl, posr = [-1]*n, [-1]*n\n    for i in range(q):\n        l, r = map(int, input().split())\n        l -= 1; r -= 1\n\n        pl = max(posl[l], l)\n        pr = max(posr[r], r)\n\n        if posl[l] == l:\n            posmaxl = minmax[pl][0]\n        else:\n            posmaxl = a[min(max(l, posl[l]))]\n\n        if posr[r] == r:\n            posmaxr = minmax[pr][0]\n        else:\n            posmaxr = a[max(r, posr[r])]\n\n        posl[l], posr[r] = max(posl[l], r), max(posr[r], l)\n\n        res = 0 if (posmaxl + posmaxr) % 2 == 1 else -(posmaxl + posmaxr)\n        print(max(0, res))\n\n    pl, pr = -1, -1\n    res = 0\n    for i in range(n):\n        if max(pl, i) > pr:\n            res += a[i]\n        elif max(i, pr) > pl:\n            res -= a[i]\n\n        pl, pr = max(pl, i), max(pr, i)\n\n    print(max(0, res))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963244199752808,
            0.9958253502845764,
            0.9961440563201904,
            0.9960834980010986,
            0.9932673573493958,
            0.9951135516166687,
            0.9960200786590576,
            0.9937422871589661,
            0.9958730340003967,
            0.9964753985404968,
            0.9963487386703491,
            0.9965242147445679,
            0.996598482131958,
            0.9961369037628174,
            0.9964800477027893,
            0.9963025450706482,
            0.995040774345398,
            0.996902585029602,
            0.9968420267105103,
            0.9923892617225647
        ]
    },
    "324": {
        "similarity": 0.9955690503120422,
        "body": "    i = 2\n    while True:\n        a, b = pow(2, i), pow(2, i - n)\n        if a % b != 0 or b % a != 0:\n            i += 1\n            continue\n        print(a, b)\n        break\n\nn = int(input())\nsolve(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955690503120422,
            0.9950040578842163,
            0.9943475127220154,
            0.9923729300498962,
            0.994412899017334,
            0.9895746111869812,
            0.9943913221359253,
            0.9953030943870544,
            0.991245687007904,
            0.9939978718757629,
            0.9952922463417053,
            0.9936085939407349,
            0.9888687133789062,
            0.9944396018981934,
            0.9952710866928101,
            0.9954962730407715,
            0.9941518902778625,
            0.9943159222602844,
            0.9953121542930603,
            0.9952415823936462
        ]
    },
    "2912": {
        "similarity": 0.9949336051940918,
        "body": "    n = int(input())\n    s = [input() for _ in range(n)]\n    p = list(range(n))\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        p[a] = p[b]\n        s[p[a]] += s[p[b]]\n        p[b] = -1\n    ans = ''\n    for i in p:\n        if i != -1:\n            ans = s[i]\n    print(ans)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9905582070350647,
            0.9936298727989197,
            0.9939611554145813,
            0.994107186794281,
            0.9892339110374451,
            0.9859455823898315,
            0.9879491925239563,
            0.9904487133026123,
            0.9904972910881042,
            0.9940488934516907,
            0.9918915629386902,
            0.9949336051940918,
            0.9923307299613953,
            0.9902905821800232,
            0.9924978017807007,
            0.9931068420410156,
            0.9817201495170593,
            0.9916135668754578,
            0.9928095936775208,
            0.9885297417640686
        ]
    },
    "9": {
        "similarity": 0.995087206363678,
        "body": "    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for i in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        if abs(x1 - x2) + abs(y1 - y2) == 1:\n            sofas.append((x1, y1, x2, y2))\n    cl, cr, ct, cb = map(int, input().split())\n    for i in range(d):\n        found = True\n        x1, y1, x2, y2 = sofas[i]\n        if (cl != -1 and count(sofas, x1+1, y1) > cl) or \\\n           (cr != -1 and count(sofas, x2-1, y2) < cr) or \\\n           (ct != -1 and count(sofas, x1, y1+1) > ct) or \\\n           (cb != -1 and count(sofas, x2, y2-1) < cb):\n            found = False\n        if found:\n            return i + 1\n    return -1\n\n    for sofa in sofas:\n        if abs(x - sofa[0]) == 1 or abs(y - sofa[1]) == 1:\n            return -1\n    return sum(1 for sofa in sofas if abs(x - sofa[2]) + abs(y - sofa[3]) == 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918616414070129,
            0.9898667931556702,
            0.9902511239051819,
            0.9916682839393616,
            0.9940820336341858,
            0.9930049777030945,
            0.9933323264122009,
            0.9920374155044556,
            0.9925854206085205,
            0.9943127036094666,
            0.9930427074432373,
            0.995087206363678,
            0.994065523147583,
            0.9946495890617371,
            0.9931283593177795,
            0.9937626719474792,
            0.9912458658218384,
            0.9802395701408386,
            0.9938409924507141,
            0.9901761412620544
        ]
    },
    "249": {
        "similarity": 0.9949691295623779,
        "body": "    n, l, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n        for i in range(n):\n            if a[i] + x <= l:\n                j = bisect.bisect_left(a, a[i] + x)\n                if j > i and a[j] - a[i] == x:\n                    return True\n        return False\n\n    if has(y) or has(x):\n        print(0)\n        return\n    posx = 1e9\n    posy = 1e9\n    for i in range(n, l + 2):\n        if has(i - a[n]) and (i - a[n] < x or posx > i - a[n]):\n            posx = i - a[n]\n        if has(i - a[0]) and (i - a[0] < y or posy > i - a[0]):\n            posy = i - a[0]\n\n    print(2)\n    print(posx, posy)\n\nimport bisect\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936119914054871,
            0.992336094379425,
            0.9943519234657288,
            0.9948428273200989,
            0.9874365925788879,
            0.9947899580001831,
            0.9941576719284058,
            0.9915733337402344,
            0.9939014315605164,
            0.993220865726471,
            0.9947102069854736,
            0.9940000772476196,
            0.9927360415458679,
            0.9876399636268616,
            0.9942940473556519,
            0.9929014444351196,
            0.9939687848091125,
            0.9913343191146851,
            0.9949691295623779,
            0.991745114326477
        ]
    },
    "2999": {
        "similarity": 0.9966737031936646,
        "body": "n, s = map(int, input().split())\nparticipants = {}\n\nfor _ in range(n):\n    name, bet = input().split()\n    participants[name] = int(bet)\n\n    max_bid = 0\n    for bid in participants.values():\n        if bid > max_bid:\n            max_bid = bid\n    return max_bid\n\nmax_bid = get_max_bid(participants)\n\ngroups = {}\nfor participant, bid in participants.items():\n    new_group = False\n    if bid == max_bid or (bid < max_bid and max_bid * 2 <= s):\n        for group, total_bid in groups.items():\n            total_bid += bid\n            if total_bid == s:\n                groups[group].append(participant)\n                new_group = True\n        if not new_group:\n            groups[participant] = [participant]\n\ncount = sum(1 for value in groups.values() if len(value) > 1)\n\nprint(count)\n\nfor group in groups:\n    if len(groups[group]) > 1:\n        for participant in groups[group]:\n            print(participant)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944827556610107,
            0.995845377445221,
            0.9963151812553406,
            0.9933527708053589,
            0.9960322976112366,
            0.9924922585487366,
            0.9943448305130005,
            0.993649959564209,
            0.9956466555595398,
            0.9948846101760864,
            0.994595468044281,
            0.994723379611969,
            0.9953452944755554,
            0.9966737031936646,
            0.9956221580505371,
            0.9928492307662964,
            0.9948856830596924,
            0.9965510964393616,
            0.9916335940361023,
            0.9926050901412964
        ]
    },
    "2239": {
        "similarity": 0.9962221384048462,
        "body": "    for i in range(1, x + 1):\n        if sum(min(i % 6 + 2, 7) for _ in range(i)) == x:\n            return i\n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954277873039246,
            0.9930428266525269,
            0.9957308769226074,
            0.9906206727027893,
            0.9889331459999084,
            0.9950369000434875,
            0.9958409667015076,
            0.9954344034194946,
            0.9932824969291687,
            0.9932698607444763,
            0.994860827922821,
            0.9923723340034485,
            0.995514452457428,
            0.9962221384048462,
            0.9887574911117554,
            0.9946963787078857,
            0.9950287342071533,
            0.9957237243652344,
            0.9948093891143799,
            0.994316816329956
        ]
    },
    "2615": {
        "similarity": 0.9970539808273315,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n    d = {2: 0, 3: 0, 5: 0}\n    i = 2\n    while x > 1:\n        if x % i == 0:\n            d[i] += 1\n            x //= i\n        else:\n            i += 1\n    ans = 1\n    for p in d:\n        cnt = [0] * (d[p] + 1)\n        cnt[0] = 1\n        for j in range(1, d[p]):\n            if cnt[j - 1] == 0: continue\n            k = 1\n            while k <= d[p] and cnt[k] == 0:\n                cnt[k] = gcd(cnt[j - 1], k)\n                k += 1\n        ans += sum(1 for j in range(d[p] + 1) if cnt[j] == 1)\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(f(n))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951170682907104,
            0.9959283471107483,
            0.9964939951896667,
            0.9958614706993103,
            0.9942597150802612,
            0.9954367280006409,
            0.9965599775314331,
            0.9934535622596741,
            0.9947458505630493,
            0.9968318939208984,
            0.9954990744590759,
            0.9970539808273315,
            0.9969428181648254,
            0.9962794780731201,
            0.9962712526321411,
            0.9950066804885864,
            0.9958226084709167,
            0.9968400597572327,
            0.9963247179985046,
            0.9966910481452942
        ]
    },
    "2542": {
        "similarity": 0.9955729246139526,
        "body": "    n = len(s)\n    if n == 1: return 0\n    left = s[:n//2]\n    right = s[n//2:]\n    cnt = 0\n    for i in range(min(n//2, n//2 + 1)):\n        if left[i] != right[-i-1]:\n            cnt += 1\n    return cnt\n\nfor _ in range(int(input())):\n    print(len(input()) - max(0, s_good(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920110106468201,
            0.9949497580528259,
            0.9950586557388306,
            0.9942356944084167,
            0.9933778643608093,
            0.993619441986084,
            0.9949970245361328,
            0.9955729246139526,
            0.9853357076644897,
            0.9944267272949219,
            0.9951711893081665,
            0.9915036559104919,
            0.9943956136703491,
            0.9937984347343445,
            0.986343264579773,
            0.9874727129936218,
            0.9938673973083496,
            0.995103120803833,
            0.9940125346183777,
            0.9935590028762817
        ]
    },
    "511": {
        "similarity": 0.995733380317688,
        "body": "    while b:\n        a, b = b, a % b\n    return a\n\nx, y = map(int, input().split())\nwhile y:\n    x, y = y, x % gcd(x, y)\nprint(x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9903931021690369,
            0.9923344850540161,
            0.9918748736381531,
            0.9948399066925049,
            0.992457926273346,
            0.994046688079834,
            0.9946654438972473,
            0.9928687214851379,
            0.9909799695014954,
            0.995733380317688,
            0.9948621988296509,
            0.9920166730880737,
            0.9943455457687378,
            0.9925203919410706,
            0.9950891733169556,
            0.9930353760719299,
            0.9936330914497375,
            0.9947368502616882,
            0.9947131276130676,
            0.9927513003349304
        ]
    },
    "1409": {
        "similarity": 0.9941574931144714,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    total = sum(a)\n    teams = 0\n    for i in range(n):\n        if a[i] >= k:\n            teams += (a[i] - k + 2) // 3\n    print(min(teams, total // 3))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922609925270081,
            0.9908202290534973,
            0.9910578727722168,
            0.9889174103736877,
            0.9933186769485474,
            0.99267578125,
            0.992976725101471,
            0.9931493997573853,
            0.9936045408248901,
            0.9914101362228394,
            0.9881619811058044,
            0.9918299317359924,
            0.9933022856712341,
            0.9930052757263184,
            0.9814479351043701,
            0.9922835826873779,
            0.9831677675247192,
            0.9941574931144714,
            0.9883738160133362,
            0.9880169630050659
        ]
    },
    "2274": {
        "similarity": 0.9966904520988464,
        "body": "    visited = [[0]*m for _ in range(n)]\n    ans = 0\n        if i < n-1 and g[i+1][j] == 'D' and not visited[i+1][j]:\n            visited[i+1][j] = 1\n            dfs(i+1,j,k)\n        elif j < m-1 and g[i][j+1] == 'R' and not visited[i][j+1]:\n            visited[i][j+1] = 1\n            dfs(i,j+1,k)\n    for i in range(n):\n        for j in range(m):\n            if (i,j) != (n-1,m-1):\n                visited[i][j] = 0\n                ans += g[i][j] != 'C'\n                dfs(i,j,visited)\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n,m = map(int,input().split())\n    g = [list(input()) for _ in range(n)]\n    print(f(n,m,g))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966904520988464,
            0.9949937462806702,
            0.994726300239563,
            0.9932070374488831,
            0.9965469241142273,
            0.9962724447250366,
            0.9942638874053955,
            0.9952394366264343,
            0.994623601436615,
            0.9954565763473511,
            0.9957675933837891,
            0.9961361289024353,
            0.9944179058074951,
            0.9963814616203308,
            0.9964017271995544,
            0.995905339717865,
            0.9964528679847717,
            0.9951375722885132,
            0.9913080334663391,
            0.9963380098342896
        ]
    },
    "2420": {
        "similarity": 0.9962823987007141,
        "body": "    x, y = map(int, input().split())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    points.sort()\n    ans = 0\n    lx, ly = -r, -r\n    for i in range(n):\n        if abs(points[i][0] - x) + abs(points[i][1] - y) <= r:\n            if points[i][0] < lx or points[i][0] == lx and points[i][1] > ly:\n                ans += 1\n                lx, ly = points[i]\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962823987007141,
            0.9946726560592651,
            0.9952980875968933,
            0.9929355978965759,
            0.994940996170044,
            0.9931615591049194,
            0.9953733682632446,
            0.9954860210418701,
            0.9959788918495178,
            0.995491623878479,
            0.9958874583244324,
            0.9954677224159241,
            0.9941074252128601,
            0.9948464632034302,
            0.9942523837089539,
            0.9956960082054138,
            0.9960840940475464,
            0.9949951171875,
            0.9955624938011169,
            0.9920822978019714
        ]
    },
    "1267": {
        "similarity": 0.9954754710197449,
        "body": "    m = max(a)\n    ways = [0] * (m + 1)\n    ways[0] = 2 ** n\n    for i in range(m, 0, -1):\n        ways[i] = ways[i+1]\n        count = sum(1 for j in a if j >= i)\n        ways[i] += 2 ** (count-1) - 1\n    return ways[1]\n\nn = int(input())\na = list(map(int, input().split()))\nprint(f(n, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936648011207581,
            0.9954549074172974,
            0.9938718676567078,
            0.9951071739196777,
            0.9942163228988647,
            0.9938631653785706,
            0.9939155578613281,
            0.995462954044342,
            0.9941410422325134,
            0.9917292594909668,
            0.989601731300354,
            0.9954754710197449,
            0.9901089072227478,
            0.9941006898880005,
            0.9946648478507996,
            0.9946845173835754,
            0.9901153445243835,
            0.9946090579032898,
            0.9951320290565491,
            0.9946919679641724
        ]
    },
    "2356": {
        "similarity": 0.9954316020011902,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    p = sorted((x, i) for i, x in enumerate(a))\n    a.sort(key=lambda x: x - p[0][0])\n    if len(set(x - (i+1) for i, x in enumerate(a))) == n:\n        print(n)\n    else:\n        for x, i in p:\n            a[i] = x\n        print(*a)\n\nfor _ in range(int(input())):\n    f()",
        "result": "failed: testcase 0",
        "similarities": [
            0.993741512298584,
            0.9943922758102417,
            0.9924901723861694,
            0.9927099943161011,
            0.9812101125717163,
            0.9945744872093201,
            0.9928464293479919,
            0.9946726560592651,
            0.9954316020011902,
            0.9942864179611206,
            0.995336651802063,
            0.9926225543022156,
            0.9931926727294922,
            0.9938778281211853,
            0.9921417236328125,
            0.9938058257102966,
            0.9947505593299866,
            0.9877700805664062,
            0.990378737449646,
            0.9832561016082764
        ]
    },
    "108": {
        "similarity": 0.9952996969223022,
        "body": "    t = ''\n    i = 0\n    for c in s:\n        while i < 26 and chr(i+97) != c:\n            t += chr(i+97)\n            i += 1\n        if ord(c) > i:\n            return -1\n        i = max(ord(c), i)\n    return ''.join(t + (s[i:] or ''))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936738610267639,
            0.9932466149330139,
            0.9949798583984375,
            0.9931369423866272,
            0.9830018281936646,
            0.9928798675537109,
            0.9947330355644226,
            0.992832601070404,
            0.992172122001648,
            0.9874898195266724,
            0.9933988451957703,
            0.9952996969223022,
            0.9936596751213074,
            0.9940757751464844,
            0.9946674704551697,
            0.991542398929596,
            0.9935426115989685,
            0.9950441122055054,
            0.9914342164993286,
            0.9895108938217163
        ]
    },
    "1833": {
        "similarity": 0.9960011839866638,
        "body": "    p = 10**9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n+1)\n    for i in range(n):\n        if a[i] % (i+1) == 0:\n            b[i+1] += 1\n        for j in range(i+1, n+1):\n            if (j-1) // a[i] > 0 and a[j-1] % j == 0:\n                b[j] = (b[j] + b[(j-1)//a[i]]) % p\n    print(sum(b[1:]) % p)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927000999450684,
            0.9935302734375,
            0.994703471660614,
            0.9936413168907166,
            0.9942507743835449,
            0.9957887530326843,
            0.9943336844444275,
            0.9923170208930969,
            0.9947651624679565,
            0.9948338866233826,
            0.9946907758712769,
            0.9958990216255188,
            0.9901968240737915,
            0.9937400817871094,
            0.9907146096229553,
            0.9928551912307739,
            0.9847972393035889,
            0.9930959343910217,
            0.9960011839866638,
            0.995121419429779
        ]
    },
    "2324": {
        "similarity": 0.9961346983909607,
        "body": "    n = len(s)\n    dp = [[0] * 2 for _ in range(n)]\n    ans = [0] * n\n    for i in range(n):\n        if s[i] == s[0]:\n            dp[i][1] += 1\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if s[j:i+1] == s[i-j:j:-1]:\n                dp[i][1] += dp[j-1][1]\n            elif s[j:i+1] != s[i-j:j:-1] and i > j:\n                dp[i][0] += 1\n        ans[i] = (dp[i][0] + 2 * dp[i][1])\n    print(*ans)\n\ns = input()\npalindromic_characteristics(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942904114723206,
            0.9924338459968567,
            0.9953424334526062,
            0.995988130569458,
            0.9960113167762756,
            0.9945571422576904,
            0.9961346983909607,
            0.9943466186523438,
            0.995816707611084,
            0.9910649657249451,
            0.9949896931648254,
            0.9937103986740112,
            0.9957752227783203,
            0.9940664172172546,
            0.9954593181610107,
            0.9885799884796143,
            0.9958420991897583,
            0.9947009682655334,
            0.9918447732925415,
            0.9940470457077026
        ]
    },
    "2372": {
        "similarity": 0.9972183108329773,
        "body": "import sys\nfrom collections import deque\n\nH, W = map(int, input().split())\nch, cw = map(lambda x: int(x) - 1, input().split())\ndh, dw = map(lambda x: int(x) - 1, input().split())\n\ngrid = []\nfor _ in range(H):\n    grid.append(input().strip())\n\n    visited = [[False]*W for _ in range(H)]\n    dist = [[float('inf')]*W for _ in range(H)]\n    queue = deque([(ch, cw, -1)])\n\n    while queue:\n        x, y, d = queue.popleft()\n        if (x, y) == (dh, dw):\n            return d\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < H and 0 <= ny < W and not grid[nx][ny] == '#' and not visited[nx][ny]:\n                queue.append((nx, ny, d))\n                visited[nx][ny] = True\n                dist[nx][ny] = d\n\n        for i in range(-2, 3):\n            for j in range(-2, 3):\n                nx, ny = x + i, y + j\n                if 0 <= nx < H and 0 <= ny < W and not grid[nx][ny] == '#' and dist[nx][ny] > d + 1:\n                    queue.append((nx, ny, d + 1))\n                    visited[nx][ny] = True\n                    dist[nx][ny] = d + 1\n\n    return -1\n\nprint(bfs())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971733093261719,
            0.9972183108329773,
            0.99667888879776,
            0.9971644878387451,
            0.9948623180389404,
            0.9968568682670593,
            0.995635986328125,
            0.9956933856010437,
            0.9966428875923157,
            0.9970981478691101,
            0.9957042336463928,
            0.9956157207489014,
            0.9961406588554382,
            0.9958469867706299,
            0.9965448975563049,
            0.9966848492622375,
            0.9966935515403748,
            0.9969627261161804,
            0.9948198199272156,
            0.9967154264450073
        ]
    },
    "1984": {
        "similarity": 0.9977353811264038,
        "body": "from collections import defaultdict\n\n    n, m, k, w = map(int, input().split())\n    levels = [input().strip() for _ in range(k)]\n    diffs = [[defaultdict(lambda: float('inf')) for _ in range(k)] for __ in range(k)]\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            diff = sum([c0 != c1 if c0 != '.' else 0 for c0, c1 in zip(levels[i], levels[j])])\n            diffs[i][j] = diffs[j][i] = (diff * w, i)\n            for x in range(k):\n                diff_x_j = sum([c0 != c1 if c0 != '.' else 0 for c0, c1 in zip(levels[x], levels[j])])\n                diffs[i][x] = min(diffs[i][x], ((diff + diff_x_j) * w, j))\n\n    dp = [float('inf')] * k\n    dp[0] = 0\n    path = [-1] * k\n\n    for i in range(1, k):\n        for prev, val in enumerate(dp):\n            new_dp = float('inf')\n            min_diff = diffs[i][prev][0]\n            if min_diff < new_dp:\n                new_dp = min_diff + (i - 1) * w\n                path[i] = i\n            elif diffs[i][prev][1] == prev:\n                diff, prev_prev = diffs[i][prev]\n                new_dp = min(new_dp, val + diff)\n        dp[i] = new_dp\n\n    print(dp[-1])\n\n    cur = k - 1\n    while cur >= 0:\n        if path[cur] != cur and path[cur] != -1:\n            prev = path[cur]\n            diff, prev_prev = diffs[prev][cur]\n            print(cur + 1, prev + 1)\n            if cur > 0 and dp[cur] == diff + (cur - 1) * w:\n                path[cur - 1] = prev\n        else:\n            print(cur + 1, 0)\n        cur -= 1\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977353811264038,
            0.9974272847175598,
            0.996060848236084,
            0.9972994923591614,
            0.9971126914024353,
            0.9972111582756042,
            0.9966081380844116,
            0.9969643950462341,
            0.997454822063446,
            0.9971046447753906,
            0.9968728423118591,
            0.995651364326477,
            0.9962008595466614,
            0.9971775412559509,
            0.9969154000282288,
            0.9965450167655945,
            0.9976553916931152,
            0.9969369769096375,
            0.9971524477005005,
            0.9975487589836121
        ]
    },
    "1253": {
        "similarity": 0.9937682151794434,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    for i in range(n):\n        if i < n - 1 and a[i] < 0:\n            continue\n        if k > 0:\n            a[i] *= -1\n            k -= 1\n    print(sum(a))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.984928548336029,
            0.9788739085197449,
            0.9907079935073853,
            0.9931480288505554,
            0.9913284182548523,
            0.989425778388977,
            0.9901334643363953,
            0.9929793477058411,
            0.9900444746017456,
            0.9928088784217834,
            0.989597499370575,
            0.9924443960189819,
            0.9919053912162781,
            0.9924775958061218,
            0.9912624359130859,
            0.9900330305099487,
            0.9910715222358704,
            0.9711686968803406,
            0.9937682151794434,
            0.9910736083984375
        ]
    },
    "523": {
        "similarity": 0.9954057335853577,
        "body": "    n, m = map(int, input().split())\n    s = [input() for _ in range(n)]\n    s.sort(key=lambda x: (x[m//2] if m % 2 else x[:m//2 + 1]), reverse=True)\n    ans = ''\n    l, r = 0, n-1\n    while l < r:\n        if s[l][:m//2+1] == s[r][-m//2-1:]:\n            ans += s[l] + s[r]\n            l += 1\n            r -= 1\n        else:\n            ans += s[r]\n            r -= 1\n    ans += ''.join(s[l:r+1][::-1])\n    print(len(ans))\n    if len(ans) > 0: print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939301013946533,
            0.9915128946304321,
            0.9922487139701843,
            0.9954057335853577,
            0.9903517365455627,
            0.9925761818885803,
            0.9952188730239868,
            0.9940087199211121,
            0.9930996298789978,
            0.9947390556335449,
            0.9941759705543518,
            0.9951218962669373,
            0.9952759146690369,
            0.9947341084480286,
            0.9919087290763855,
            0.9936379790306091,
            0.9947782754898071,
            0.9943453073501587,
            0.9892383217811584,
            0.9939663410186768
        ]
    },
    "2934": {
        "similarity": 0.9958365559577942,
        "body": "    res = 1\n    while n > 0:\n        if n % 2 == 1: res = (res * x) % 1000000007\n        x = (x * x) % 1000000007\n        n //= 2\n    return res\n\nN = int(input())\nM = int(input())\n\nif N > M:\n    N, M = M, N\n\nf = [[0] * (M + 1) for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n    f[i][1] = 2\nfor j in range(1, M + 1):\n    f[1][j] = 1\n\nfor i in range(2, N + 1):\n    for j in range(2, M + 1):\n        if i % 2 == 0 and (M - j) % 2 == 0:\n            f[i][j] += modpow(M - j + 1, i // 2)\n        f[i][j] = (f[i][j] + f[i-1][j]) % 1000000007\nprint(f[N][M])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953731894493103,
            0.9947207570075989,
            0.9951047301292419,
            0.9946666359901428,
            0.9955173134803772,
            0.9941874146461487,
            0.9950675964355469,
            0.9948373436927795,
            0.9915671348571777,
            0.9953318238258362,
            0.9944673776626587,
            0.9923230409622192,
            0.9955856204032898,
            0.9910941123962402,
            0.9951164722442627,
            0.9866859316825867,
            0.9958365559577942,
            0.9953503012657166,
            0.9956067800521851,
            0.9936074018478394
        ]
    },
    "1745": {
        "similarity": 0.9947279095649719,
        "body": "        return 0 <= x < n and 0 <= y < m and grid[x][y] == '.'\n\n        if turns > 2:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        if grid[x][y] != '*':\n            return 0\n        ans = 0\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                grid[x][y] = '.'\n                ans += dfs(nx, ny, turns + (dx == -1 or dy == -1))\n                grid[x][y] = '*'\n        return ans\n\n    for i in range(n):\n        for j in range(m):\n            if is_valid(i, j) and (i == 0 or j == 0):\n                grid[i][j] = '.'\n                dfs(i, j, False)\n                grid[i][j] = '.'\n\n    total_ways = sum(dfs(i, j, False) for i in range(n) for j in range(m))\n    return total_ways",
        "result": "failed: testcase 0",
        "similarities": [
            0.992295503616333,
            0.9936407208442688,
            0.9944893717765808,
            0.9934539794921875,
            0.9943082928657532,
            0.9935551881790161,
            0.9938979744911194,
            0.9931025505065918,
            0.9947279095649719,
            0.9943025708198547,
            0.9945302605628967,
            0.9817821979522705,
            0.9884750247001648,
            0.9872276782989502,
            0.9934366941452026,
            0.9891760945320129,
            0.9946693778038025,
            0.9940271973609924,
            0.9933184385299683,
            0.9942015409469604
        ]
    },
    "1422": {
        "similarity": 0.996009349822998,
        "body": "    w = list(map(int, weights))\n    if '11' not in ''.join(map(str, w)) or '00' not in ''.join(map(str, w)):\n        return \"NO\"\n    w = w + [0] * (10 - len(w))\n    ans = []\n    for i in range(m):\n        if i % 2:\n            j = max(enumerate(w), key=lambda x: x[1])[0]\n            if ans and ans[-1] == j:\n                while j == w[j]:\n                    j = (j + 1) % len(w)\n            ans.append(j)\n            w[j] -= 1\n        else:\n            j = max(enumerate(w), key=lambda x: -x[1])[0]\n            if not ans or ans[-1] == j:\n                while j == w[j]:\n                    j = (j + 1) % len(w)\n            ans.append(j)\n            w[j] -= 1\n    return \"YES\\n\" + ' '.join(map(str, ans))\n\nm = int(input())\nprint(solve(input(), m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948445558547974,
            0.9946363568305969,
            0.9954233765602112,
            0.9935678243637085,
            0.9949056506156921,
            0.99355548620224,
            0.994823157787323,
            0.9941498637199402,
            0.9955348968505859,
            0.991648256778717,
            0.9957423806190491,
            0.9949813485145569,
            0.996009349822998,
            0.9959186911582947,
            0.9956857562065125,
            0.9958478212356567,
            0.9921373128890991,
            0.9948710203170776,
            0.9949816465377808,
            0.9935441613197327
        ]
    },
    "1763": {
        "similarity": 0.9933475852012634,
        "body": "    h = sorted(map(int, input().split()))\n    n = len(h)\n    avg = sum(h) // n\n    rem = sum(abs(x - avg) for x in h)\n\n    res = 0\n    mx = max(h)\n    for i in range(n):\n        if h[i] < mx:\n            res += (mx - h[i]) * A + min((mx - h[i]), rem) * M\n\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923978447914124,
            0.9933091402053833,
            0.9888530373573303,
            0.9895778298377991,
            0.9931043386459351,
            0.9923270344734192,
            0.9930188059806824,
            0.990090012550354,
            0.9831504821777344,
            0.9868631958961487,
            0.9831576943397522,
            0.9906100034713745,
            0.9757457375526428,
            0.9923679232597351,
            0.9921166300773621,
            0.9886425733566284,
            0.9811635613441467,
            0.9882597923278809,
            0.9933475852012634,
            0.9923962354660034
        ]
    },
    "974": {
        "similarity": 0.9969241619110107,
        "body": "    n = int(input())\n    add_stack = []\n    rem_q = []\n\n    for _ in range(2 * n):\n        op, *rest = input().split()\n        if op == \"add\":\n            x = int(rest[0])\n            while rem_q and rem_q[-1] < x:\n                add_stack.append(rem_q.pop())\n            rem_q.append(x)\n            add_stack.extend(reversed(add_stack[:len(add_stack) - len(rem_q)]))\n        else:\n            if not rem_q:\n                continue\n            rem_q.remove(int(rest[0]))\n\n    return len(add_stack)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916322827339172,
            0.9951300621032715,
            0.9968958497047424,
            0.9953325986862183,
            0.9963706135749817,
            0.9922248721122742,
            0.996680498123169,
            0.9968264698982239,
            0.9966862201690674,
            0.9961949586868286,
            0.9948033690452576,
            0.9967659711837769,
            0.9955775737762451,
            0.996160089969635,
            0.9948824644088745,
            0.9968277812004089,
            0.9955488443374634,
            0.9966443777084351,
            0.9969241619110107,
            0.9948802590370178
        ]
    },
    "2343": {
        "similarity": 0.9962866902351379,
        "body": "    if 2**n < n + 1 or k > n * (n - 1) // 2:\n        return \"NO\"\n    else:\n        return str(min(2**(n-k), n))\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    print(get_val(n, k))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9844154715538025,
            0.9940800070762634,
            0.9946718811988831,
            0.9960293173789978,
            0.9937692284584045,
            0.9951591491699219,
            0.9962506890296936,
            0.995177149772644,
            0.9915891885757446,
            0.9961365461349487,
            0.9922045469284058,
            0.9943832755088806,
            0.9916704893112183,
            0.9953151345252991,
            0.9957514405250549,
            0.994933009147644,
            0.9962866902351379,
            0.9950074553489685,
            0.9951756000518799,
            0.9948890209197998
        ]
    },
    "627": {
        "similarity": 0.9953014850616455,
        "body": "    n = int(input())\n    s = input()\n    if len(set(s)) == 1:\n        return s[:-1] if len(s) > 1 else ''\n    mn = min(s)\n    idn = -1\n    for i in range(n):\n        if s[i] == mn:\n            idn = i\n            break\n    return ''.join(sorted(s[:idn]+s[idn+1:])) if len(set(s))>1 or idn != n-1 else s[:-1]\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9923557639122009,
            0.9855071902275085,
            0.992824375629425,
            0.9953014850616455,
            0.9940482974052429,
            0.9904727935791016,
            0.9919639229774475,
            0.994364321231842,
            0.9950897097587585,
            0.9923288226127625,
            0.9934614300727844,
            0.9892023205757141,
            0.9945806264877319,
            0.9949052929878235,
            0.994136393070221,
            0.9932319521903992,
            0.9931973814964294,
            0.9932377338409424,
            0.9941174387931824,
            0.9938402771949768
        ]
    },
    "1655": {
        "similarity": 0.9959322214126587,
        "body": "    n = int(input())\n    L = list(map(int, input().split()))\n    dead = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + L[i] > n:\n            continue\n        for j in range(i - 1, max(-1, i - L[i])):\n            dead[j] = 1\n    return sum(1 for x in dead if not x)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946537017822266,
            0.9959322214126587,
            0.9945376515388489,
            0.995600163936615,
            0.9912205934524536,
            0.9955701231956482,
            0.9949961304664612,
            0.9945401549339294,
            0.992816150188446,
            0.9911423921585083,
            0.9945132732391357,
            0.9920849204063416,
            0.9956613183021545,
            0.9915204644203186,
            0.9946820139884949,
            0.9945222735404968,
            0.9910979270935059,
            0.9943130016326904,
            0.9955701231956482,
            0.9903229475021362
        ]
    },
    "2124": {
        "similarity": 0.9969735741615295,
        "body": "import sys\n\n    unknown = 0\n    recovered = {}\n    for i in range(len(messages)):\n        if len(usernames) == 1:\n            return \"Impossible\"\n        sender = None\n        if messages[i].startswith('?'):\n            sender = 'user' + str(unknown)\n            unknown += 1\n        else:\n            user, text = messages[i].split(':')\n            if user in recovered and not any(word.lower() == user.lower() for word in text.split()):\n                continue\n            sender = user\n\n        if i > 0 and messages[i-1].startswith('?') or (messages[i-1].startswith(sender) and messages[i-1] != '?'):\n            return \"Impossible\"\n\n        recovered[sender] = True\n\n    output = []\n    for message in messages:\n        if not message.startswith('?'):\n            user, text = message.split(':')\n            output.append(user + ':' + text)\n    return '\\n'.join(output)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    usernames = input().split()\n    m = int(input())\n    messages = [input() for _ in range(m)]\n    print(recover_senders(n, usernames, messages))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961481690406799,
            0.9965187907218933,
            0.9932225942611694,
            0.9963220357894897,
            0.9966336488723755,
            0.9966135621070862,
            0.9963619112968445,
            0.996091365814209,
            0.9962344169616699,
            0.9961950182914734,
            0.9956488609313965,
            0.9964330792427063,
            0.9964342713356018,
            0.9967407584190369,
            0.9963167905807495,
            0.9966546297073364,
            0.9911113381385803,
            0.9949612021446228,
            0.9966155886650085,
            0.9969735741615295
        ]
    },
    "1093": {
        "similarity": 0.9962255358695984,
        "body": "    heights = [0] * m\n    for i in range(n - 1, 0, -1):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                heights[j] += 1\n    return heights\n\n    n, m = map(int, input().split())\n    global matrix\n    matrix = [list(input()) for _ in range(n)]\n    heights = max_heights(n, m)\n    max_ascent = 0\n    max_descent = 0\n    for i in range(m - 1):\n        if heights[i + 1] > heights[i]:\n            max_ascent = max(max_ascent, heights[i + 1] - heights[i])\n        elif heights[i + 1] < heights[i]:\n            max_descent = max(max_descent, heights[i] - heights[i + 1])\n    print(max_ascent, max_descent)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932273030281067,
            0.9934316873550415,
            0.9962255358695984,
            0.9948734641075134,
            0.9948348999023438,
            0.993871808052063,
            0.9941239953041077,
            0.9946969747543335,
            0.9953215718269348,
            0.9962112307548523,
            0.993333637714386,
            0.9960309863090515,
            0.9928279519081116,
            0.9841704368591309,
            0.9952957034111023,
            0.9957257509231567,
            0.993596613407135,
            0.9938121438026428,
            0.9958091378211975,
            0.9954057335853577
        ]
    },
    "899": {
        "similarity": 0.9966275095939636,
        "body": "import sys\nfrom typing import List\n\n    dist = [[float('inf')] * N for _ in range(N)]\n    for i in range(N):\n        dist[i][i] = 0\n    for a, b, c in edges:\n        dist[a-1][b-1] = min(dist[a-1][b-1], c)\n        dist[b-1][a-1] = min(dist[b-1][a-1], c)\n\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    count = 0\n    for a, b, c in edges:\n        if dist[a-1][b-1] == c:\n            count += 1\n\n    return len(edges) - count\n\nN, M = map(int, input().split())\nedges = []\nfor _ in range(M):\n    a, b, c = map(int, input().split())\n    edges.append([a, b, c])\n\nprint(floyd(N, edges))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942626953125,
            0.9942434430122375,
            0.9955835938453674,
            0.994503915309906,
            0.995490312576294,
            0.9956954121589661,
            0.9957087635993958,
            0.9960449934005737,
            0.9958503246307373,
            0.9896342754364014,
            0.9961639046669006,
            0.9966275095939636,
            0.9936637878417969,
            0.9961410164833069,
            0.996096670627594,
            0.9935129880905151,
            0.9960224628448486,
            0.9907394051551819,
            0.993800699710846,
            0.9961439371109009
        ]
    },
    "551": {
        "similarity": 0.9958651661872864,
        "body": "    n = int(input())\n    y = list(map(int, input().split()))\n    cnt = [0] * 2\n    max_y = max(y)\n    for i in range(n):\n        if y[i] == max_y:\n            cnt[1] += 1\n        elif y[i] < max_y:\n            cnt[0] += 1\n    print(\"Yes\" if min(cnt) >= 1 else \"No\")\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955205321311951,
            0.991752028465271,
            0.9947964549064636,
            0.9947336912155151,
            0.9926986694335938,
            0.9927161335945129,
            0.9949716329574585,
            0.9955366253852844,
            0.9929822683334351,
            0.995429515838623,
            0.9955897927284241,
            0.9900799989700317,
            0.993636965751648,
            0.9939737915992737,
            0.9935174584388733,
            0.9931285381317139,
            0.9933744072914124,
            0.9958651661872864,
            0.9921584725379944,
            0.9948481321334839
        ]
    },
    "1772": {
        "similarity": 0.9941627979278564,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    odd_count = sum(1 for x in a if x % 2 != 0)\n    even_count = n - odd_count\n    return min(odd_count // 3 * 2 + (odd_count % 3 > 0), even_count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9892868399620056,
            0.9941627979278564,
            0.9924693703651428,
            0.9930219054222107,
            0.9937164187431335,
            0.9901624917984009,
            0.9930608868598938,
            0.9893201589584351,
            0.9930362701416016,
            0.9935292601585388,
            0.9731802940368652,
            0.9898820519447327,
            0.9888073801994324,
            0.9844886660575867,
            0.990323543548584,
            0.9911661744117737,
            0.9883968830108643,
            0.9915215373039246,
            0.9908118844032288,
            0.9936325550079346
        ]
    },
    "1339": {
        "similarity": 0.9973892569541931,
        "body": "    n = int(input())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r, i + 1))\n    segments.sort(key=lambda x: (x[0], -x[1]))\n    ans = None\n    prev_r = float('-inf')\n    for i, (_, r, num) in enumerate(segments):\n        if r > prev_r:\n            ans = num\n            prev_r = r\n    print(ans if ans else -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958024621009827,
            0.9964278340339661,
            0.9968541860580444,
            0.9969382882118225,
            0.9971075654029846,
            0.9952307343482971,
            0.9973892569541931,
            0.9941650032997131,
            0.9955272674560547,
            0.9950678944587708,
            0.9940785765647888,
            0.9970719218254089,
            0.9959615468978882,
            0.9956263303756714,
            0.9963314533233643,
            0.9936061501502991,
            0.9968440532684326,
            0.9957482218742371,
            0.9973885416984558,
            0.9967769980430603
        ]
    },
    "440": {
        "similarity": 0.9952810406684875,
        "body": "    n = int(input())\n    s = input()\n    i = 0\n    while i < n - 1:\n        if s[i] in 'aeiouy' and s[i + 1] in 'aeiouy':\n            j = i\n            while j > 0 and s[j] not in 'aeiouy':\n                j -= 1\n            if j == -1 or s[j + 1] not in 'aeiouy':\n                return None\n            del s[i]\n            n -= 1\n            break\n        i += 1\n    print(''.join(s[:n]))\n\ncorrect_word()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920693635940552,
            0.993548572063446,
            0.9949430227279663,
            0.9939444661140442,
            0.9940280914306641,
            0.9952810406684875,
            0.9855097532272339,
            0.993203341960907,
            0.991957426071167,
            0.9931482076644897,
            0.993804931640625,
            0.9924843311309814,
            0.9933449625968933,
            0.9943509697914124,
            0.9926477074623108,
            0.9945955872535706,
            0.9933408498764038,
            0.9910021424293518,
            0.9933086037635803,
            0.9947349429130554
        ]
    },
    "2801": {
        "similarity": 0.9963142275810242,
        "body": "    import math\n    n = len(graph)\n    max_value = [0] * n\n    parent = [-1] * n\n    queue = []\n    visited = [False] * n\n    queue.append(0)\n    visited[0] = True\n\n    for k in range(n):\n        while queue:\n            node = queue.pop()\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    max_value[neighbor] = max(max_value[node], values[neighbor])\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n                    visited[neighbor] = True\n\n    total_satisfaction = 0\n    current_node = n - 1\n    while current_node != 0:\n        total_satisfaction += max_value[current_node] * (1 / math.pow(2, parent[current_node]))\n        current_node = parent[current_node]\n    return total_satisfaction + values[0]\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nvalues = list(map(int, input().split()))\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n\nprint(bfs(graph, values))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930549263954163,
            0.990270733833313,
            0.9958513975143433,
            0.9938493967056274,
            0.9951990842819214,
            0.9944263100624084,
            0.9963142275810242,
            0.9954381585121155,
            0.993626058101654,
            0.9943366050720215,
            0.9959785342216492,
            0.99200040102005,
            0.9956769347190857,
            0.9923768639564514,
            0.9942917227745056,
            0.9942731261253357,
            0.99468994140625,
            0.9945163726806641,
            0.9940988421440125,
            0.9929799437522888
        ]
    },
    "2749": {
        "similarity": 0.9965469837188721,
        "body": "H, W = map(int, input().split())\nN = int(input())\na = list(map(int, input().split()))\ncolors = [[0]*W for _ in range(H)]\n\nfor i in range(N):\n    for j in range(a[i]):\n        color = i + 1\n        found = False\n        for x in range(H):\n            if not found:\n                for y in range(W):\n                    if colors[x][y] == 0:\n                        colors[x][y] = color\n                        found = True\n\ncolors[0][0], colors[H-1][W-1] = 2, 2\nfor i in range(H-1):\n    colors[i+1][0] = (colors[i][0] + 1) % N + 1\nfor j in range(W-1):\n    colors[H-1][j+1] = (colors[H-1][j] + 1) % N + 1\n\nfor row in colors:\n    print(' '.join(map(str, row)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965469837188721,
            0.9959473013877869,
            0.9956676959991455,
            0.9953309893608093,
            0.9944499135017395,
            0.9937129616737366,
            0.9946824908256531,
            0.9956327676773071,
            0.9960983991622925,
            0.9945913553237915,
            0.9951708912849426,
            0.9962529540061951,
            0.9960106611251831,
            0.9961842894554138,
            0.9943897724151611,
            0.9951012134552002,
            0.9947350025177002,
            0.9884262084960938,
            0.9948106408119202,
            0.9949496388435364
        ]
    },
    "2319": {
        "similarity": 0.9968761801719666,
        "body": "    n = int(input())\n    s = input()\n    t = input()\n\n    if s == t: return 0\n    for i in range(n):\n        if s[i:] + s[:i] == t:\n            return (n - i) % n\n\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948428273200989,
            0.9901340007781982,
            0.9961236715316772,
            0.995837390422821,
            0.9948626160621643,
            0.9949283599853516,
            0.9961678385734558,
            0.9958560466766357,
            0.9963772296905518,
            0.9949870705604553,
            0.996667742729187,
            0.9968761801719666,
            0.9957259297370911,
            0.9901307821273804,
            0.9949597716331482,
            0.9965549111366272,
            0.9961722493171692,
            0.995837390422821,
            0.9954465627670288,
            0.9964739084243774
        ]
    },
    "2121": {
        "similarity": 0.9971049427986145,
        "body": "    global k, ans\n    min_val = a[node]\n    for nei in adj[node]:\n        if nei != parent:\n            min_val = min(min_val, dfs(nei, node))\n    return min_val\n\nn, k = map(int, input().split())\na = [0] + list(map(int, input().split()))\nadj = [[] for _ in range(n+1)]\nfor i in range(n-1):\n    u, v = map(int, input().split())\n    adj[u].append(v)\n    adj[v].append(u)\n\nans = 0\nfor root in range(1, n+1):\n    a[0] = float('inf')\n    dfs(root, -1)\n    ans = max(ans, min(a[0], k))\n\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971049427986145,
            0.9967774152755737,
            0.9953805208206177,
            0.9953685402870178,
            0.9963154196739197,
            0.9967306852340698,
            0.995751142501831,
            0.9951658844947815,
            0.9959226846694946,
            0.9968340992927551,
            0.9967139363288879,
            0.9955440163612366,
            0.992803692817688,
            0.9962319135665894,
            0.9935430288314819,
            0.9938442707061768,
            0.9949032664299011,
            0.9961926341056824,
            0.9962514638900757,
            0.9957269430160522
        ]
    },
    "2617": {
        "similarity": 0.9966149926185608,
        "body": "    if n == 0: return [0]\n    d = 1\n    s = 1\n    while s < n:\n        d += 1\n        s *= 2\n    if (s - n) % 2 != 0 or (n + 1) // 2 > s: return [-1]\n    c = []\n    for i in range(d-1, 0, -1):\n        t = min(2 ** (i - 1), (n + 1) // 2)\n        n -= t\n        c.append(t)\n        if n == 0: break\n    return [d] + c\n\nt = int(input())\nfor _ in range(t):\n    print(' '.join(map(str, f(int(input())))))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954066276550293,
            0.9957221150398254,
            0.995731770992279,
            0.9888384938240051,
            0.9960340261459351,
            0.9966149926185608,
            0.9936579465866089,
            0.9962896108627319,
            0.9962553977966309,
            0.9963940978050232,
            0.9957749247550964,
            0.9958308339118958,
            0.9931917786598206,
            0.9961727857589722,
            0.9964859485626221,
            0.9958319664001465,
            0.9917246103286743,
            0.9955726265907288,
            0.994652509689331,
            0.9935047626495361
        ]
    },
    "175": {
        "similarity": 0.9952695965766907,
        "body": "    a, b = map(int, input().split())\n    while a != 0 and b != 0:\n        if a >= 2 * b: a -= 2 * b\n        elif b >= 2 * a: b -= 2 * a\n        else: break\n    print(a, b)",
        "result": "timed out",
        "similarities": [
            0.990507960319519,
            0.9952695965766907,
            0.9941051006317139,
            0.994797945022583,
            0.9937289357185364,
            0.9928677082061768,
            0.9900733828544617,
            0.9923198223114014,
            0.9905996918678284,
            0.9926621317863464,
            0.9940223693847656,
            0.9905996918678284,
            0.9929997324943542,
            0.9940525889396667,
            0.9933610558509827,
            0.9899217486381531,
            0.9951873421669006,
            0.9952153563499451,
            0.9942566752433777,
            0.9948922991752625
        ]
    },
    "995": {
        "similarity": 0.9964479207992554,
        "body": "    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    pows = set()\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        f = prime_factors(a[i - 1])\n        c = 1\n        for v in f.values():\n            if v % 2:\n                c *= pow(f.keys()[list(f.values()).index(v)], v - 1)\n        pows.add(c)\n    for i in range(1, n + 1):\n        ans[i] += sum([p <= i and i - p < len(pows) for p in pows])\n        for j in range(i):\n            ans[i] += ans[j]\n    print(*ans[1:])\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.994745135307312,
            0.9934259653091431,
            0.9954063296318054,
            0.9956817626953125,
            0.9913789629936218,
            0.9946321249008179,
            0.9952003359794617,
            0.9954127073287964,
            0.9960548877716064,
            0.995339035987854,
            0.9964479207992554,
            0.9949930310249329,
            0.9948174357414246,
            0.99603271484375,
            0.9961748719215393,
            0.994899332523346,
            0.9949682354927063,
            0.9957305788993835,
            0.9957020282745361,
            0.9962736368179321
        ]
    },
    "582": {
        "similarity": 0.9961792826652527,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    s = sorted(zip(a, t))\n    cnt = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i][0] != s[i - 1][0]:\n            cnt = 1\n        else:\n            cnt += 1\n        ans += max(cnt * s[i][1] - (cnt - 1) * s[i - 1][1], 0)\n    return ans\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946985840797424,
            0.9906183481216431,
            0.9935297966003418,
            0.9918443560600281,
            0.9954506754875183,
            0.9949007630348206,
            0.9927465319633484,
            0.9885227084159851,
            0.9914286732673645,
            0.9927730560302734,
            0.9936631917953491,
            0.9953908324241638,
            0.991513729095459,
            0.9961792826652527,
            0.995996356010437,
            0.9943530559539795,
            0.9947839379310608,
            0.9932879209518433,
            0.9934214353561401,
            0.9936667084693909
        ]
    },
    "1402": {
        "similarity": 0.9960049986839294,
        "body": "    res = 1\n    while b > 0:\n        if b & 1: res = (res * a) % m\n        a = (a * a) % m; b >>= 1\n    return res\n\nm = int(1e9 + 7)\nn = int(input())\ns, t = input(), input()\ndp = [[0] * (10 ** n) for _ in range(n + 1)]\n\nfor i in range(n):\n    if s[i] == '?':\n        if t[i] != '?': continue\n        for j in dp[i]:\n            for k in range(10):\n                u, v = j + k, (j + k * modpow(10, n - i)) % (10 ** n)\n                dp[i + 1][u] += 1; dp[i + 1][v] -= 1\n        continue\n\n    if t[i] == '?':\n        for j in range(10):\n            u = dp[i].index(j) + j * modpow(10, n - i)\n            v = (j + u) % (10 ** n)\n            dp[i + 1][u] += 1; dp[i + 1][v] -= 1\n        continue\n\n    if s[i] > t[i]:\n        for j in range(10):\n            u, v = dp[i].index(j), (j * modpow(10, n - i)) % (10 ** n)\n            if u < v:\n                dp[i + 1][u] += 1; dp[i + 1][v] -= 1\n        continue\n\n    if s[i] < t[i]:\n        for j in range(10):\n            u = dp[i].index(j) + j * modpow(10, n - i)\n            v = (j * modpow(10, n - i)) % (10 ** n)\n            dp[i + 1][u] += 1; dp[i + 1][v] -= 1\n        continue\n\n    u = 0\n    for j in range(n):\n        if s[j] != t[j]: u |= 2 ** (ord(t[j]) - ord('0'))\n\n    for j in dp[i]:\n        v = (j + u * modpow(10, n - i)) % (10 ** n)\n        dp[i + 1][v] += 1\n\nfor d in dp[n]:\n    print((sum(d) % m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929725527763367,
            0.9878783226013184,
            0.9957894086837769,
            0.9950464963912964,
            0.9951725006103516,
            0.9949455261230469,
            0.9958243370056152,
            0.9954370260238647,
            0.9957410097122192,
            0.9952394366264343,
            0.9951440691947937,
            0.9952643513679504,
            0.9914091229438782,
            0.9948328733444214,
            0.9955668449401855,
            0.9944263100624084,
            0.9952804446220398,
            0.9949965476989746,
            0.9960049986839294,
            0.9946008324623108
        ]
    },
    "1141": {
        "similarity": 0.9985972046852112,
        "body": "n, m = map(int, input().split())\ns = list(input())\n\nfor _ in range(m):\n    l, r, c1, c2 = input().split()\n    for i in range(l - 1, r):\n        if s[i] == c1:\n            s[i] = c2\n\nprint(''.join(s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.998587965965271,
            0.9985972046852112,
            0.9958673119544983,
            0.9958673119544983,
            0.998587965965271,
            0.998587965965271,
            0.998587965965271,
            0.9968047142028809,
            0.998587965965271,
            0.9980825185775757,
            0.9967361092567444,
            0.9970076680183411,
            0.998587965965271,
            0.9937878847122192,
            0.998587965965271,
            0.9969620108604431,
            0.998587965965271,
            0.9983651041984558,
            0.9983567595481873,
            0.998587965965271
        ]
    },
    "2836": {
        "similarity": 0.9951170086860657,
        "body": "    N = int(input())\n    boys = list(map(int, input().split()))\n    A, B = map(int, input().split())\n    bestAns = 0\n    for i in range(A, B + 1):\n        if i % 2 == 1:\n            distance = float('inf')\n            for boy in boys:\n                distance = min(distance, abs(i - boy))\n            if distance > bestAns:\n                bestAns = distance\n    if A <= bestAns*2 < B:\n        print(A + (bestAns*2 - A) % 2)\n    else:\n        print(B - (B-bestAns*2) % 2)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9944606423377991,
            0.9940658211708069,
            0.9947252869606018,
            0.9874218702316284,
            0.9926728010177612,
            0.9931108355522156,
            0.9913814067840576,
            0.9923624992370605,
            0.9894007444381714,
            0.9882499575614929,
            0.9911487102508545,
            0.993212878704071,
            0.9900317788124084,
            0.994254469871521,
            0.9900904297828674,
            0.9945530295372009,
            0.9923056364059448,
            0.9885388612747192,
            0.9935038685798645,
            0.9951170086860657
        ]
    },
    "1109": {
        "similarity": 0.9913392663002014,
        "body": "    s = [0] * 2\n    for x in a: s[x - 1] += 1\n    b = n // k\n    return max(max(s) * b - min(s) * b, abs(s[0] - s[1]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9828431010246277,
            0.9879622459411621,
            0.9897996187210083,
            0.975767970085144,
            0.9866728782653809,
            0.9891670942306519,
            0.9913257956504822,
            0.9859042167663574,
            0.9899693727493286,
            0.989920973777771,
            0.9658854603767395,
            0.9855358600616455,
            0.9895692467689514,
            0.9899286031723022,
            0.9913392663002014,
            0.9889743328094482,
            0.9902293682098389,
            0.987433671951294,
            0.9906915426254272,
            0.9764465689659119
        ]
    },
    "2125": {
        "similarity": 0.9950782656669617,
        "body": "    s = [list(input()) for _ in range(n)]\n    r = 0\n    for h1 in range(1, n):\n        for c1 in range(m):\n            if s[h1-1][c1] != s[h1][c1]: break\n        else: continue\n        h2 = h3 = h1\n        while h2 < n and s[h2][c1] == s[h1][c1]:\n            h2 += 1\n        for h in range(h1+1, h2):\n            if s[h-1][c1] != s[h][c1]: break\n        else:\n            h3 = max(h3, h)\n            c2 = -1\n            while c2 < m and s[h1][c2] == s[h2][c2]:\n                c2 += 1\n            for c in range(c1+1, c2):\n                if s[h1][c] != s[h2][c]: break\n            else:\n                r += (h3 - h1 + 1) * (c2 - c1)\n    return r",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932733178138733,
            0.9935423135757446,
            0.9938533306121826,
            0.9945301413536072,
            0.9880234599113464,
            0.9949288964271545,
            0.9945325255393982,
            0.9919496178627014,
            0.9922410249710083,
            0.9936715960502625,
            0.9936671853065491,
            0.9937334656715393,
            0.9932939410209656,
            0.9949873089790344,
            0.9948468804359436,
            0.9919135570526123,
            0.9948257803916931,
            0.9950782656669617,
            0.9950307607650757,
            0.9909827709197998
        ]
    },
    "1746": {
        "similarity": 0.9966607689857483,
        "body": "    leaves = 0\n    for v in G[u]:\n        if v != par:\n            nleaves = dfs(v, u)\n            if nleaves > 0:\n                leaves += 1\n    if par == -1 and leaves < 3:\n        return False\n    return leaves\n\nn = int(input())\nG = [[] for _ in range(n + 1)]\nfor _ in range(n - 1):\n    p = int(input()) - 1\n    G[p].append(_ + 1)\nprint('Yes' if dfs(0, -1) else 'No')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965669512748718,
            0.9957472085952759,
            0.9940212965011597,
            0.993293046951294,
            0.9958042502403259,
            0.9957658648490906,
            0.9944072365760803,
            0.9954179525375366,
            0.9957026243209839,
            0.9966607689857483,
            0.9945992231369019,
            0.9949163198471069,
            0.9953080415725708,
            0.9937447905540466,
            0.9959772229194641,
            0.9950330853462219,
            0.9947229027748108,
            0.9962123036384583,
            0.9955263733863831,
            0.9954878091812134
        ]
    },
    "1294": {
        "similarity": 0.9952664971351624,
        "body": "    malfunctioning = set()\n    for c in s:\n        if s.count(c * 2) == len(s):\n            malfunctioning.add(c)\n    return \"\".join(sorted(set(s) - malfunctioning))\n\nt = int(input())\nfor _ in range(t):\n    print(check_buttons(input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942050576210022,
            0.9917935729026794,
            0.9939255118370056,
            0.994160532951355,
            0.9945588707923889,
            0.9939461946487427,
            0.9866432547569275,
            0.9929754137992859,
            0.9941356182098389,
            0.9952664971351624,
            0.9920200705528259,
            0.9918574094772339,
            0.9931338429450989,
            0.9937250018119812,
            0.9941199421882629,
            0.9945957660675049,
            0.9904240965843201,
            0.9935015439987183,
            0.993751049041748,
            0.9950633645057678
        ]
    },
    "1159": {
        "similarity": 0.9977051615715027,
        "body": "    if n <= 1: return False\n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: return False\n    return True\n\nn = int(input())\nfor m in range(min(n*(n-1)//4, 10000), 1, -1):\n    if not is_prime(m): continue\n    degs = [0] * (n+1)\n    edges = []\n    for i in range(2, n+1):\n        j = m // (i-1) + 1\n        while len(edges) < m and is_prime(j-i+1) and j <= n:\n            if not is_prime(degs[j]): break\n            for k in range(i, j): \n                if degs[k] != i-1: continue\n                edges.append((k,j))\n                degs[k] += 1; degs[j] += 1\n                if len(edges) == m: break\n            j = (j - i + 2) * 2 - 2\n        if len(edges) == m: \n            print(m)\n            for e in edges: print(*e)\n            exit(0)\nprint(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914279580116272,
            0.9971641898155212,
            0.9968622922897339,
            0.9973198771476746,
            0.9973395466804504,
            0.9977051615715027,
            0.9964883923530579,
            0.9971315264701843,
            0.9961515069007874,
            0.9960919618606567,
            0.9975945353507996,
            0.9966520071029663,
            0.9974076151847839,
            0.9965148568153381,
            0.9972774386405945,
            0.9974068999290466,
            0.9970714449882507,
            0.9964480996131897,
            0.9966434836387634,
            0.996634840965271
        ]
    },
    "2025": {
        "similarity": 0.9926472902297974,
        "body": "    if n == 1: return -1\n    for k in range(4, n + 1, 2): # only even numbers\n        c = 0\n        while n > 0:\n            n -= k\n            c += 1\n            if n < 0: break\n        if n == 0: return c\n\nfor _ in range(int(input())):\n    print(f(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9773637056350708,
            0.9924497008323669,
            0.992477297782898,
            0.9903853535652161,
            0.9925326108932495,
            0.9923161268234253,
            0.9741339683532715,
            0.9852216839790344,
            0.991102397441864,
            0.9926472902297974,
            0.9925679564476013,
            0.9854559898376465,
            0.9908314943313599,
            0.9914738535881042,
            0.9918632507324219,
            0.9914952516555786,
            0.9880321025848389,
            0.9883453249931335,
            0.9734772443771362,
            0.9923794269561768
        ]
    },
    "1429": {
        "similarity": 0.9959449768066406,
        "body": "    n = int(input())\n    s = input()\n    cnt = [[0]*4 for _ in range(n+1)]\n    tot = 0\n    for i, c in enumerate(s):\n        if c == 'A': cnt[i][0] += 1\n        elif c == 'T': cnt[i][1] += 1\n        elif c == 'C': cnt[i][2] += 1\n        else: cnt[i][3] += 1\n        for j in range(4):\n            if (j != 0 and j != 1) or (j != 2 and j != 3): tot += cnt[i][j]*(cnt[i][j^2]^n-i)\n    print(tot)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9901657104492188,
            0.9954691529273987,
            0.9959449768066406,
            0.9956454038619995,
            0.9953780174255371,
            0.9946630597114563,
            0.9908103942871094,
            0.9914625287055969,
            0.9941834211349487,
            0.9951536059379578,
            0.9947053790092468,
            0.992251455783844,
            0.9940555095672607,
            0.994218111038208,
            0.9939199090003967,
            0.9952395558357239,
            0.9949208498001099,
            0.9938241839408875,
            0.993548572063446,
            0.9941970705986023
        ]
    },
    "1950": {
        "similarity": 0.9950900673866272,
        "body": "    a.sort()\n    s = sum(a)\n    if n == 1: return a[0]\n    dp = [float('inf')] * (s + 1)\n    dp[a[0]] = a[0]\n    for i in range(1, n):\n        for j in range(s - a[i], a[i] - 1, -1):\n            v = min(dp[j - a[i]], max(dp.get(j - a[i] * 2, float('inf')), dp.get(j - a[i] * 3, float('inf')))) + a[i]\n            if j >= a[i]: v = min(v, dp[j])\n            dp[j] = v\n    return dp[s]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924567341804504,
            0.994529128074646,
            0.9920152425765991,
            0.9942469596862793,
            0.9933931231498718,
            0.9900223612785339,
            0.9950900673866272,
            0.9899442791938782,
            0.9910049438476562,
            0.9947931170463562,
            0.9856392741203308,
            0.9926990866661072,
            0.9912928342819214,
            0.9923475980758667,
            0.9919862151145935,
            0.9936293363571167,
            0.9938700795173645,
            0.9938029050827026,
            0.9885651469230652,
            0.9889699220657349
        ]
    },
    "631": {
        "similarity": 0.9959309101104736,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1] / i\n    s = sum(prefix_sum)\n    if round(s) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nfor _ in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949575066566467,
            0.9951153993606567,
            0.9927788972854614,
            0.9958606362342834,
            0.9943334460258484,
            0.9953880310058594,
            0.992612361907959,
            0.9944590330123901,
            0.9936007261276245,
            0.9943601489067078,
            0.9945996999740601,
            0.9912553429603577,
            0.9935101270675659,
            0.9831459522247314,
            0.9910546541213989,
            0.995924174785614,
            0.9912400841712952,
            0.995590329170227,
            0.9953387379646301,
            0.9959309101104736
        ]
    },
    "2480": {
        "similarity": 0.9973169565200806,
        "body": "    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = 0\n    for i in range(N):\n        s = 0\n        for j in range(i, N):\n            s += A[j]\n            if s % K == (j - i + 1) and i != j:\n                res += 1\n            elif s % K == (j - i + 1) and i == j:\n                res += 1\n    print(res)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967082142829895,
            0.9966300129890442,
            0.9949148893356323,
            0.9960123300552368,
            0.997067928314209,
            0.9970819354057312,
            0.9950080513954163,
            0.9949294924736023,
            0.996582567691803,
            0.9973169565200806,
            0.9968338012695312,
            0.9951443076133728,
            0.9946876168251038,
            0.9923390746116638,
            0.9965727925300598,
            0.9968538880348206,
            0.9971554279327393,
            0.9939500689506531,
            0.9957407712936401,
            0.9948276877403259
        ]
    },
    "2363": {
        "similarity": 0.9973357319831848,
        "body": "    ops = 0\n    while a != b:\n        if a > b: a -= b\n        else: b -= a\n        ops += 1\n    return ops\n\nn = int(input())\nfor _ in range(n): print(f(*map(int, input().split())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960429668426514,
            0.996982991695404,
            0.996811032295227,
            0.9973140358924866,
            0.9973123669624329,
            0.9968079924583435,
            0.9970552325248718,
            0.9970541596412659,
            0.9973357319831848,
            0.9950854778289795,
            0.9968709349632263,
            0.9970031380653381,
            0.9967833161354065,
            0.9953553080558777,
            0.9969339966773987,
            0.9972752928733826,
            0.994028627872467,
            0.9945933818817139,
            0.9934263825416565,
            0.9941518902778625
        ]
    },
    "909": {
        "similarity": 0.995206356048584,
        "body": "    return max((a+b)*c, a*(b+c), a*b*c, a+(b*c))\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(max_expression(a, b, c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938244223594666,
            0.994165301322937,
            0.991113543510437,
            0.9866734743118286,
            0.9927456378936768,
            0.9865214824676514,
            0.9938687086105347,
            0.995206356048584,
            0.9895331859588623,
            0.9913478493690491,
            0.9940572381019592,
            0.9932569265365601,
            0.9930079579353333,
            0.9936906695365906,
            0.9913478493690491,
            0.9942817687988281,
            0.9947841167449951,
            0.99416583776474,
            0.9878795146942139,
            0.9940394163131714
        ]
    },
    "154": {
        "similarity": 0.9942446351051331,
        "body": "    if n == 1: return 1\n    return (p - n * modinv(p % n, n) % p) % p\n\nmod = 998244353\nMAXN = 10**6 + 5\ndp = [0] * MAXN\nf = [0] * MAXN\ng = [0] * MAXN\n\nn = int(input())\n\nfor l in range(1, n+1):\n    for r in range(l, n+1):\n        if (l+r) % 2 == 0: continue\n        mid = (l + r) // 2\n        k = mid - l + 1\n        dp[r] += f[k-1] * g[mid-l]\n        dp[r] %= mod\n\nfor i in range(1, n+1):\n    if i % 4 == 0 or i % 4 == 3: continue\n    f[i//2+1] = (f[i//2 + 1] + modinv(i+1, mod) * f[i//2]) % mod\n\nfor i in range(n//2 + 1, n+1):\n    if i % 2 != 0: g[i] = 1\n    else: g[i] = (g[i-1] + g[i+1]) % mod\n\nprint((dp[n] * 2) % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.985483705997467,
            0.9913705587387085,
            0.9913981556892395,
            0.9937329888343811,
            0.9940998554229736,
            0.9926273226737976,
            0.9925063252449036,
            0.9875303506851196,
            0.9933552145957947,
            0.9900709390640259,
            0.9938657879829407,
            0.9942446351051331,
            0.9933558106422424,
            0.9905175566673279,
            0.9917458295822144,
            0.9920941591262817,
            0.9904797077178955,
            0.992072582244873,
            0.9916427135467529,
            0.993007242679596
        ]
    },
    "39": {
        "similarity": 0.9963616132736206,
        "body": "    max_len = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substr = s[i:j]\n            if substr != substr[::-1]:\n                max_len = max(max_len, len(substr))\n    return max_len",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960131645202637,
            0.9879776835441589,
            0.9949089884757996,
            0.9958611726760864,
            0.9956399202346802,
            0.9949701428413391,
            0.9963616132736206,
            0.9948640465736389,
            0.9956857562065125,
            0.9945194125175476,
            0.9955409169197083,
            0.9957690238952637,
            0.9920223951339722,
            0.9962608218193054,
            0.9945854544639587,
            0.9953497648239136,
            0.9957137107849121,
            0.9930673837661743,
            0.9939486980438232,
            0.9917839765548706
        ]
    },
    "1885": {
        "similarity": 0.9962150454521179,
        "body": "    f = 1\n    for i in range(1, r+1):\n        f *= n-i+1\n        f /= i\n    return int(f)\n\nn = int(input())\nprint(ncr(n, 5) + ncr(n, 6) + ncr(n, 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950178265571594,
            0.9937168955802917,
            0.9959113597869873,
            0.9955940246582031,
            0.9917159676551819,
            0.9959104657173157,
            0.9953215718269348,
            0.993098795413971,
            0.9886393547058105,
            0.989990234375,
            0.9944842457771301,
            0.9962150454521179,
            0.996109127998352,
            0.9933537840843201,
            0.9937167763710022,
            0.9952787160873413,
            0.9962003827095032,
            0.9961007833480835,
            0.9891919493675232,
            0.9922190308570862
        ]
    },
    "1180": {
        "similarity": 0.9962124228477478,
        "body": "    n, k = map(int, input().split())\n    s = input()\n    mod = 10**9 + 7\n    if k == 0:\n        ans = int(s.replace('0', ''))\n        return str(ans % mod)\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    dp[0][0] = 1\n    sign = [1, -1]\n    for i in range(1, n):\n        num = int(s[i])\n        for j in range(min(i, k), 0, -1):\n            dp[j][i] += dp[j-1][i-1]*num + dp[j][i-1]*sign[j]*(10**((i-j)//2))\n            dp[j][i] %= mod\n    ans = 0\n    for i in range(min(k+1, n)):\n        ans += (dp[i][-1]%mod)*int(s[:i].lstrip('0') or 0)\n        ans %= mod\n    return str(ans % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962124228477478,
            0.9949930906295776,
            0.9958080649375916,
            0.9920068979263306,
            0.9961082339286804,
            0.9938417673110962,
            0.9950461983680725,
            0.9957477450370789,
            0.9939998984336853,
            0.9922736287117004,
            0.9948981404304504,
            0.9957526326179504,
            0.9947242736816406,
            0.9948531985282898,
            0.9936459064483643,
            0.995227038860321,
            0.9960069060325623,
            0.9952529072761536,
            0.9944074749946594,
            0.9946891665458679
        ]
    },
    "1856": {
        "similarity": 0.9951679706573486,
        "body": "    n = int(input())\n    a = set()\n    pw = {}\n    for i in range(n):\n        s = input()\n        if s not in a:\n            t = set(s)\n            for j in a:\n                t |= j\n            pw[t] = (s, 1)\n            a.add(s)\n        else:\n            pw[a[s]] = (s, pw[a[s]][1] + 1)\n    ans = 0\n    for i in a:\n        if pw[i][1] == 1: ans += 1\n        else: break\n    print(ans)\n\nf()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922742247581482,
            0.9942370057106018,
            0.9858220815658569,
            0.9936083555221558,
            0.9885894656181335,
            0.9917030334472656,
            0.9907208681106567,
            0.9951679706573486,
            0.994666576385498,
            0.9945875406265259,
            0.9932498931884766,
            0.9951120018959045,
            0.9944685697555542,
            0.9929155111312866,
            0.9916456937789917,
            0.9926851391792297,
            0.9914962649345398,
            0.9934812784194946,
            0.9932172894477844,
            0.9949673414230347
        ]
    },
    "522": {
        "similarity": 0.9957429766654968,
        "body": "    res=f1*f2*f3\n    for i in range(4,n+1):\n        res=(c*(res%MOD))**2%MOD*m[i]%MOD\n    return res\n\nn,c,f1,f2,f3=map(int,input().split())\nMOD=10**9+7\nm=[0]*(n+1)\nm[1]=f1%m\nm[2]=f2%m\nm[3]=f3%m\nprint(fp(f1,f2,f3,c,n,m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930160045623779,
            0.9944641590118408,
            0.9950447082519531,
            0.9942293763160706,
            0.9920007586479187,
            0.9925190806388855,
            0.9940332174301147,
            0.9926155805587769,
            0.993560791015625,
            0.9954455494880676,
            0.9936872720718384,
            0.988463282585144,
            0.9869027733802795,
            0.9921921491622925,
            0.9951396584510803,
            0.9938955903053284,
            0.9954009056091309,
            0.9947766065597534,
            0.9957429766654968,
            0.9935800433158875
        ]
    },
    "1719": {
        "similarity": 0.9943414926528931,
        "body": "    res = 1\n    while n > 0:\n        if n % 2 == 1: res = (res * a) % p\n        n //= 2; a = (a * a) % p\n    return res\n\nM = 10**9 + 7\n\n    N = int(input())\n    dp = [[0] * (N+3) for _ in range(5)]\n    dp[0][1] = 4\n    for i in range(2, N+1):\n        dp[0][i] = modpow(4, i-1, M)\n        dp[1][i] = (modpow(3, i-2, M) * 3 - dp[0][i]) % M\n        dp[2][i] = (modpow(3, i-2, M) * 2 + dp[0][i] + dp[1][i]) % M\n        dp[3][i] = (dp[0][i] + modpow(3, i-2, M)) % M\n\n    print((dp[0][N] + dp[1][N] + dp[2][N] + dp[3][N]) % M)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924608469009399,
            0.9925529360771179,
            0.9868341088294983,
            0.993485689163208,
            0.9905015826225281,
            0.9921118021011353,
            0.9923605918884277,
            0.9801368713378906,
            0.9932923913002014,
            0.9907935261726379,
            0.9898653626441956,
            0.9925437569618225,
            0.992685854434967,
            0.9866917133331299,
            0.9943414926528931,
            0.9895471334457397,
            0.989432692527771,
            0.9909848570823669,
            0.9885173439979553,
            0.9876992106437683
        ]
    },
    "1842": {
        "similarity": 0.9976078867912292,
        "body": "import math\n\na, b, c = map(float, input().split())\nx1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\nx2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\nprint(max(x1, x2))\nprint(min(x1, x2))",
        "result": "passed",
        "similarities": [
            0.9972237348556519,
            0.995188295841217,
            0.9965968728065491,
            0.9960834383964539,
            0.9966511130332947,
            0.9948325157165527,
            0.9954880475997925,
            0.9964722394943237,
            0.996184229850769,
            0.9973025321960449,
            0.9972612261772156,
            0.9956472516059875,
            0.9969934225082397,
            0.997131884098053,
            0.9971466064453125,
            0.9970088601112366,
            0.9967185854911804,
            0.9972749352455139,
            0.9976078867912292,
            0.9960152506828308
        ]
    },
    "806": {
        "similarity": 0.9961932301521301,
        "body": "    return a if b == 0 else gcd(b,a%b)\n\n    return pow(a,(p-2),p)\n\nn, l, r = map(int, input().split())\nmod = 10**9 + 7\nif (r - l + 1) % 3:\n    print(0)\nelse:\n    dp = [0] * 3\n    dp[(r-l+1)%3] = n\n    for i in range(r-1, l-1, -1):\n        cur = (i%3 - (l%3)*2) % 3\n        if not cur: continue\n        new = [0] * 3\n        inv = inverse((r-i+1)//(mod*3), mod)\n        new[0] += dp[cur]*inv*(i-l+1)%mod\n        new[(cur+1)%3] += dp[cur]*(n-1)*inv*(i-l+1)%mod\n        new[(cur-1)%3] += dp[cur]*(r-i)*(i-l+1)%mod*inv\n        dp = new\n    print(sum(dp) % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994870662689209,
            0.9935356974601746,
            0.9947945475578308,
            0.9906394481658936,
            0.9942789673805237,
            0.9933965802192688,
            0.9956205487251282,
            0.9905688762664795,
            0.9961932301521301,
            0.9957693815231323,
            0.9955912232398987,
            0.9944189190864563,
            0.9934007525444031,
            0.9943264722824097,
            0.9956603646278381,
            0.9941202402114868,
            0.9949666857719421,
            0.9946183562278748,
            0.9954286217689514,
            0.9940173625946045
        ]
    },
    "365": {
        "similarity": 0.9969071745872498,
        "body": "    segments = [0] * (n + 1)\n    for i in range(1, n + 1):\n        segments[i] = segments[i - 1] + a[i - 1]\n    if segments[-1] != x:\n        return 'NO'\n    if len(set(a)) > 1 or any(a.count(x) > 1 for x in set(a)):\n        return 'NO'\n    if n == 1 and a[0] == x:\n        return 'YES'\n    return 'NO'\n\nn, x = map(int, input().split())\na = list(map(int, input().split()))\nprint(f(n, x, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995263934135437,
            0.9952567219734192,
            0.9938448667526245,
            0.9969071745872498,
            0.9965667724609375,
            0.9940656423568726,
            0.9966270327568054,
            0.9943673014640808,
            0.9950941205024719,
            0.9968780875205994,
            0.9968679547309875,
            0.9952782392501831,
            0.9954699277877808,
            0.9956554770469666,
            0.9955954551696777,
            0.9960426688194275,
            0.9967067241668701,
            0.9957100749015808,
            0.995827317237854,
            0.9952446818351746
        ]
    },
    "1158": {
        "similarity": 0.9962212443351746,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = {}\n    for x in a:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n    max_freq = max(freq.values()) // k + (max_freq % k > 0)\n    stolen = sum(max(0, f - (f // max_freq) * max_freq) for f in freq.values())\n    return n - stolen",
        "result": "failed: testcase 0",
        "similarities": [
            0.9844995141029358,
            0.9949861168861389,
            0.9916616678237915,
            0.9955283999443054,
            0.9926060438156128,
            0.9948702454566956,
            0.995941162109375,
            0.9951176047325134,
            0.9955558776855469,
            0.9942051768302917,
            0.9900015592575073,
            0.9955329895019531,
            0.9962212443351746,
            0.9940860271453857,
            0.9954816699028015,
            0.994657039642334,
            0.9931922554969788,
            0.9885987043380737,
            0.9945037364959717,
            0.9950001239776611
        ]
    },
    "33": {
        "similarity": 0.9952830076217651,
        "body": "a1, b1, a2, b2, L, R = map(int, input().split())\ndiff = abs(a1 - a2)\nans = 0\nfor d in range(diff + 1):\n    if (b2 - b1) % diff == 0:\n        c = (b2 - b1) // diff\n        min_k = max(0, (L - c) // a1 - (d // a1))\n        max_k = ((R - c) // a1) - (d // a1)\n        ans += max_k - min_k + 1\nprint(ans)",
        "result": "timed out",
        "similarities": [
            0.9940597414970398,
            0.9935173392295837,
            0.9952830076217651,
            0.9908152222633362,
            0.989213764667511,
            0.9949682354927063,
            0.9903945922851562,
            0.9950577616691589,
            0.9928085207939148,
            0.994258463382721,
            0.9951494932174683,
            0.9894118309020996,
            0.9950083494186401,
            0.9919634461402893,
            0.9878419637680054,
            0.9941394329071045,
            0.9945791959762573,
            0.9900189638137817,
            0.9924892783164978,
            0.9940426349639893
        ]
    },
    "2498": {
        "similarity": 0.9960513710975647,
        "body": "    while b: a, b = b, a % b\n    return a\n\nN, M = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        x = gcd(a[i], a[j])\n        while x <= M:\n            ans += min(M // x - x, (x-2) // 2)\n            x *= 2\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9894345998764038,
            0.9929919838905334,
            0.9956362843513489,
            0.9928281903266907,
            0.9948617219924927,
            0.9944503307342529,
            0.9928713440895081,
            0.9949612021446228,
            0.9960513710975647,
            0.9942905306816101,
            0.9936975240707397,
            0.994735836982727,
            0.99566650390625,
            0.9935542941093445,
            0.9948582053184509,
            0.9948949217796326,
            0.993743896484375,
            0.9880296587944031,
            0.9893930554389954,
            0.9941611886024475
        ]
    },
    "2309": {
        "similarity": 0.9970064759254456,
        "body": "class Word:\n        self.vowels = [0] * 5\n        for c in s:\n            if 'a' <= c <= 'z':\n                i = ord(c) - ord('a')\n                self.vowels[i] += 1\n        self.last_vowel_idx = max(range(5), key=lambda i: self.vowels[i])\n\n        return f'{s} [{self.vowels}]'\n\nwords = []\nn = int(input())\nfor _ in range(n):\n    s = input()\n    words.append(Word(s))\n\nwords.sort(key=lambda w: (w.vowels[0], -w.vowels[1]))\n\n    if w1.vowels[1] != w2.vowels[1]:\n        return False\n    if w1.last_vowel_idx != w2.last_vowel_idx:\n        return False\n    return True\n\npairs = {}\nfor w1 in words:\n    for w2 in words:\n        if w1 is w2 or not possible(w1, w2):\n            continue\n        pair_key = tuple(sorted([w1.vowels[0], w2.vowels[0]]))\n        if pair_key not in pairs:\n            pairs[pair_key] = []\n        pairs[pair_key].append((w1, w2))\n\ncnt = 0\nres = []\nfor pair_key in sorted(pairs.keys()):\n    pair = pairs[pair_key]\n    for i in range(len(pair)):\n        first_w1, first_w2 = pair[i]\n        sec_w1, sec_w2 = pair[(i + 1) % len(pair)]\n        if first_w1.vowels[0] == sec_w1.vowels[0]:\n            cnt += 1\n            res.append(f'{first_w1} {sec_w1}')\n            res.append(f'{first_w2} {sec_w2}')\n\nprint(cnt)\nfor l in res:\n    print(l)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963036775588989,
            0.9967139363288879,
            0.9956480264663696,
            0.9946711659431458,
            0.9970064759254456,
            0.9962493777275085,
            0.9962777495384216,
            0.9967043995857239,
            0.9961933493614197,
            0.9959420561790466,
            0.9953380227088928,
            0.9951595664024353,
            0.9954109191894531,
            0.9936577677726746,
            0.9961527585983276,
            0.9967736005783081,
            0.9936328530311584,
            0.9953597187995911,
            0.9938467144966125,
            0.9966041445732117
        ]
    },
    "1326": {
        "similarity": 0.9980741739273071,
        "body": "    c = 0\n    d = int(x ** 0.5) + 1\n    for i in range(1, d):\n        if x % i == 0:\n            c += 2 if i * i != x else 1\n    return c\n\nN = int(input())\nans = sum(k * f(k) for k in range(1, N + 1))\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973962903022766,
            0.9978101849555969,
            0.9979515075683594,
            0.9942226409912109,
            0.9970544576644897,
            0.9966930747032166,
            0.9960102438926697,
            0.9973423480987549,
            0.9966410398483276,
            0.9980741739273071,
            0.9978451132774353,
            0.9945425987243652,
            0.9979309439659119,
            0.9975396990776062,
            0.9963458180427551,
            0.9963525533676147,
            0.9968273639678955,
            0.9979344606399536,
            0.9975311160087585,
            0.9976535439491272
        ]
    },
    "2950": {
        "similarity": 0.9952540993690491,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    max_heights = sorted(heights)\n    total_heights = sum(heights)\n    charges = 0\n    i = len(max_heights) - 1\n    while total_heights > 0:\n        if total_heights <= max_heights[i]:\n            charges += 1\n            break\n        total_heights -= max_heights[i]\n        charges += 1\n        i -= 1\n    return charges",
        "result": "failed: testcase 0",
        "similarities": [
            0.984078586101532,
            0.9928446412086487,
            0.9915042519569397,
            0.994626522064209,
            0.9884260296821594,
            0.9949249625205994,
            0.988724946975708,
            0.9952540993690491,
            0.9928197264671326,
            0.9944311380386353,
            0.9943843483924866,
            0.9914666414260864,
            0.9949682950973511,
            0.995125412940979,
            0.9937061667442322,
            0.9899957776069641,
            0.9946953654289246,
            0.9945283532142639,
            0.9919543862342834,
            0.9928452372550964
        ]
    },
    "1983": {
        "similarity": 0.9888108968734741,
        "body": "    n = int(input())\n    a = sorted(map(int, input().split()))\n    b = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            b += 1\n    return b + (n * (b - 1))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9876384735107422,
            0.9866706728935242,
            0.9888108968734741,
            0.9482580423355103,
            0.9841687083244324,
            0.9482580423355103,
            0.9834948182106018,
            0.9816228747367859,
            0.9886050820350647,
            0.9872003197669983,
            0.9884651899337769,
            0.9856655597686768,
            0.9804564118385315,
            0.9838070273399353,
            0.9821279644966125,
            0.984963595867157,
            0.9835852384567261,
            0.9866728782653809,
            0.9869927167892456,
            0.9597417116165161
        ]
    },
    "1767": {
        "similarity": 0.9973788857460022,
        "body": "    res = x[l]\n    for i in range(l + 1, r + 1):\n        res |= x[i]\n    return res\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nsma = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    sma[i] = max(sma[i + 1], a[i])\n\n smb = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    smb[i] = max(smb[i + 1], b[i])\n\nmax_sum = 0\nfor l in range(n):\n    for r in range(l, n):\n        max_sum = max(max_sum, f(a, l, r) + f(b, l, r))\n\nprint(max_sum)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956877827644348,
            0.9961097240447998,
            0.9956886172294617,
            0.9968412518501282,
            0.9966599345207214,
            0.9962233304977417,
            0.9919320344924927,
            0.99724280834198,
            0.9952200651168823,
            0.9972395896911621,
            0.9973281025886536,
            0.9917643666267395,
            0.9973788857460022,
            0.9973480105400085,
            0.9972553253173828,
            0.9969484210014343,
            0.997088611125946,
            0.9970346093177795,
            0.9909101128578186,
            0.9946426749229431
        ]
    },
    "2382": {
        "similarity": 0.9960519671440125,
        "body": "    S = sorted(S)\n    A = [0] * (10 ** 9 + 1)\n    for i in range(2 ** N):\n        if i < len(S) and S[i] == S[i-1]:\n            k = 1\n        else:\n            while i > 0 and S[i] != S[i - 1]:\n                k *= 2\n                i -= 1\n            k += 1\n        for j in range(k):\n            A[S[i]] += 1\n    return 'Yes' if all(a <= b for a, b in zip(A, [A[0] << i for i in range(N)])) else 'No'\n\nn = int(input())\nS = list(map(int, input().split()))\nprint(f(n, S))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927068948745728,
            0.9948704242706299,
            0.9960519671440125,
            0.9958488345146179,
            0.9955574870109558,
            0.9941757917404175,
            0.994962215423584,
            0.9920152425765991,
            0.9931455850601196,
            0.9958814382553101,
            0.995999813079834,
            0.988833487033844,
            0.9949286580085754,
            0.9922494292259216,
            0.9931727051734924,
            0.9936903715133667,
            0.9912981986999512,
            0.9945685863494873,
            0.9958475232124329,
            0.9918484091758728
        ]
    },
    "3907": {
        "similarity": 0.9966232180595398,
        "body": "    mp = {}\n    for i in range(m):\n        q, w = map(int, input().split())\n        if q not in mp: mp[q] = 0\n        mp[q] += w\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for x in set(a):\n        p = mp[x]\n        i = a.index(x)\n        for j in range(i, n-1):\n            if abs(a[j+1]-a[j]) == 1:\n                continue\n            else:\n                p -= min(p, mp[a[j+1]])\n                del mp[a[j+1]]\n        ans += max(0, p)\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946802854537964,
            0.9951387643814087,
            0.9932395815849304,
            0.9938679933547974,
            0.9911676049232483,
            0.991306722164154,
            0.9960361123085022,
            0.9957514405250549,
            0.9962366819381714,
            0.9952100515365601,
            0.9963417053222656,
            0.9958627820014954,
            0.9945571422576904,
            0.9960960745811462,
            0.9966232180595398,
            0.9954390525817871,
            0.9940077066421509,
            0.994247317314148,
            0.9955900311470032,
            0.9952687621116638
        ]
    },
    "3676": {
        "similarity": 0.9939227104187012,
        "body": "    if R == 1 and C == 1:\n        return 1\n    total = 0\n    for i in range(1, min(R,C) + 1):\n        total += (min(R-2*i+1, C-i+1)**2 - (C-2*i+1)**2) // 4\n    return total + 1\n\nR, C = map(int, input().split())\nprint(solve(R, C))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9908859133720398,
            0.989341139793396,
            0.9933789968490601,
            0.9925928711891174,
            0.9861316680908203,
            0.9914268851280212,
            0.9912667870521545,
            0.9925613403320312,
            0.9893057942390442,
            0.9802362322807312,
            0.9811248779296875,
            0.9908691048622131,
            0.9930307269096375,
            0.9920539855957031,
            0.9931722283363342,
            0.9912599325180054,
            0.9881393313407898,
            0.9939227104187012,
            0.9937919974327087,
            0.993395984172821
        ]
    },
    "3293": {
        "similarity": 0.9955173134803772,
        "body": "    return snps[i][0]\n\nn = int(input())\nsnps = [list(map(int, input().split())) for _ in range(n)]\nmxdiff = 0\nfor i in range(n):\n    p1 = -10**9\n    p2 = 0\n    for j in range(n):\n        if snps[j][3] > 0 and f(j, snps) == i + 1:\n            p1 = max(p1, snps[j][2] - snps[j][1])\n            p2 += (snps[j][2] - snps[j][1]) * snps[j][3]\n    mxdiff = max(mxdiff, p2 + p1)\nprint(mxdiff)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951607584953308,
            0.9940863251686096,
            0.9897587299346924,
            0.9955173134803772,
            0.9941886067390442,
            0.9907172322273254,
            0.9944811463356018,
            0.99429851770401,
            0.9929946064949036,
            0.9931693077087402,
            0.9905329346656799,
            0.9950932860374451,
            0.9941033720970154,
            0.994012713432312,
            0.9932214617729187,
            0.9953383207321167,
            0.9946737885475159,
            0.991752028465271,
            0.9931531548500061,
            0.9870008230209351
        ]
    },
    "3587": {
        "similarity": 0.9967595338821411,
        "body": "import sys\n\nN = int(input())\ntaboo = [input() for _ in range(N)]\n\n    max_len = 0\n    res = \"\"\n    for i in range(2**20):\n        s = bin(i)[2:].zfill(20)\n        ok = True\n        for taboo_str in taboo:\n            if taboo_str in s:\n                ok = False\n                break\n        if ok and len(s) > max_len:\n            max_len = len(s)\n            res = s\n\n    return res if max_len < 20 else \"-1\"\n\nprint(longest_string())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955764412879944,
            0.9957835674285889,
            0.9947550892829895,
            0.9929105043411255,
            0.9955945611000061,
            0.9953316450119019,
            0.9955992698669434,
            0.9933546185493469,
            0.9951657652854919,
            0.9931014180183411,
            0.9945164918899536,
            0.9967595338821411,
            0.9956820607185364,
            0.9955373406410217,
            0.9911025166511536,
            0.9950369000434875,
            0.9953303337097168,
            0.9960180521011353,
            0.9966040253639221,
            0.9941006898880005
        ]
    },
    "3530": {
        "similarity": 0.9968127012252808,
        "body": "N = int(input())\ncoasters = []\nfor _ in range(N):\n    a, b, t = map(int, input().split())\n    coaters.append((a, -b, t))\nQ = int(input())\ntimes = []\ntotal_fun = [0] * (Q + 1)\nfor q in range(Q):\n    times.append(int(input()))\n    for i in range(N):\n        a, b, t = coaters[i]\n        k = min(times[q] // t, total_fun[q] // (-b))\n        fun = a - (k-1)**2 * b\n        if fun <= 0:\n            continue\n        total_fun[q+1] = max(total_fun[q+1], total_fun[q] + fun)\nprint(*total_fun[1:], sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950774312019348,
            0.9963176250457764,
            0.9965097308158875,
            0.9963346719741821,
            0.9950202107429504,
            0.9965618848800659,
            0.9951352477073669,
            0.9949597120285034,
            0.9962030053138733,
            0.995430588722229,
            0.9919576048851013,
            0.9958425760269165,
            0.9956530332565308,
            0.9958239197731018,
            0.9966729879379272,
            0.9961889386177063,
            0.9911636710166931,
            0.9961513876914978,
            0.9942217469215393,
            0.9968127012252808
        ]
    },
    "3900": {
        "similarity": 0.9958091378211975,
        "body": "    return map(int, input().split())\n\nn, p = get_input()\nsuspects = []\nfor _ in range(n):\n    x, y = get_input()\n    suspects.append((x - 1, y - 1))\n\ntotal = n * (n - 1) // 2\nfor i in range(n):\n    for j in range(i + 1, n):\n        agree_with_i, agree_with_j = False, False\n        for x, y in suspects:\n            if x == i or y == i: agree_with_i = True\n            if x == j or y == j: agree_with_j = True\n        total -= int(agree_with_i and not agree_with_j) + int(not agree_with_i and agree_with_j)\nif p > n - p: p, n - p = n - p, p\nfor i in range(n):\n    for j in range(i + 1, n):\n        agree_with_i, agree_with_j = False, False\n        for x, y in suspects:\n            if x == i or y == i: agree_with_i = True\n            if x == j or y == j: agree_with_j = True\n        total += int(agree_with_i and agree_with_j >= p)\nprint(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937330484390259,
            0.9958091378211975,
            0.9952545166015625,
            0.9955427050590515,
            0.9935818910598755,
            0.9954104423522949,
            0.9927846193313599,
            0.995676577091217,
            0.9903266429901123,
            0.9943878054618835,
            0.9955283999443054,
            0.9919365644454956,
            0.9947688579559326,
            0.9952985048294067,
            0.9925230741500854,
            0.9951777458190918,
            0.9945080280303955,
            0.9894077777862549,
            0.9952489733695984,
            0.9936225414276123
        ]
    },
    "3996": {
        "similarity": 0.9971568584442139,
        "body": "    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n\nMOD = 10**9 + 7\ninv = lambda a: pow(a, MOD - 2, MOD)\n\nk = int(input())\nfactors = find_factors(int(input().split()[0]))\nfor num in input().split():\n    factors.extend(find_factors(int(num)))\nres = 1\np = 1\nq = 1\nfor f in set(factors):\n    p *= pow(f, 1, MOD)\n    q *= pow(2 * (f - 1), 1, MOD)\np %= MOD\nq %= MOD\nprint(p, \"/\", q)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965577721595764,
            0.9960008263587952,
            0.9962126016616821,
            0.9960426688194275,
            0.9966398477554321,
            0.9971568584442139,
            0.995673418045044,
            0.9970558881759644,
            0.9962033033370972,
            0.9946809411048889,
            0.9970251321792603,
            0.9965420961380005,
            0.9961891174316406,
            0.9963515400886536,
            0.994242250919342,
            0.9960311055183411,
            0.9966222643852234,
            0.9963831901550293,
            0.9957162737846375,
            0.996151864528656
        ]
    },
    "3276": {
        "similarity": 0.9973336458206177,
        "body": "    directions = [(0, -1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    painted = [[False]*m for _ in range(n)]\n\n        return 0 <= x < n and 0 <= y < m\n\n        if not is_valid(x, y) or painted[x][y]:\n            return\n        painted[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and board[nx][ny] != c:\n                return False\n        for i in range(x, x+3):\n            for j in range(y, y+3):\n                board[i][j] = c\n\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] not in ['R', 'G', 'B']:\n                continue\n            for dx in range(2):\n                for dy in range(2):\n                    paint(i-dx, j-dy, board[i][j])\n    return all(cell in ['R', 'G', 'B'] or cell == 'W' for row in board for cell in row)\n\nn, m = map(int, input().split())\nboard = [list(input()) for _ in range(n)]\nprint('YES' if can_paint(n, m, board) else 'NO')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969683289527893,
            0.9959697723388672,
            0.9967818260192871,
            0.9970425963401794,
            0.9962678551673889,
            0.9964783191680908,
            0.9946141839027405,
            0.9950954914093018,
            0.9964274168014526,
            0.9958940744400024,
            0.9956157207489014,
            0.9965181946754456,
            0.9973336458206177,
            0.9957539439201355,
            0.9968850016593933,
            0.9963340759277344,
            0.9972624778747559,
            0.9959286451339722,
            0.9942144155502319,
            0.9961367249488831
        ]
    },
    "3834": {
        "similarity": 0.9970733523368835,
        "body": "from collections import deque\n\nn, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\n    q = deque([(i, j)])\n    a[i][j] = 0\n    while q:\n        i, j = q.popleft()\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < m and a[x][y] == 1:\n                q.append((x, y))\n                a[x][y] = 0\n    return True\n\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1 and bfs(i, j):\n                cnt += 1\n                k -= 1\n                if k < 0:\n                    return False\n    return True\n\nif check():\n    total = sum(row.count(1) for row in a)\n    print(max(total - k * 2, 0))\nelse:\n    print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961170554161072,
            0.9958847761154175,
            0.9967736601829529,
            0.9967164397239685,
            0.9957422018051147,
            0.9962719678878784,
            0.9944924116134644,
            0.9929443001747131,
            0.995233416557312,
            0.9935547709465027,
            0.9934442639350891,
            0.9957644939422607,
            0.9963475465774536,
            0.9957726001739502,
            0.9970733523368835,
            0.9960164427757263,
            0.9964545369148254,
            0.9940167665481567,
            0.9961860179901123,
            0.9954996705055237
        ]
    },
    "3012": {
        "similarity": 0.9959178566932678,
        "body": "    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = (res * a) % mod\n        a = (a * a) % mod\n        b //= 2\n    return res\n\nM = 10**9 + 7\nn, m, n1, m1, N = map(int, input().split())\n\nf = [[0] * (N+3) for _ in range(6)]\nf[0][0] = 1\nfor i in range(N):\n    for j in range(5):\n        for k in range(i, -1, -1):\n            if f[j][k]:\n                if k < i:\n                    f[(j+2)%4][(i-1-k)*m + (k*min(n,m) + n-m)] += f[j][k]\n                    f[(j+2)%4][(i-1-k)*m + (k*min(n,m) + n-m)] %= M\n                elif j % 2 == k % 2:\n                    if i < N-3 and k < i-3:\n                        f[0][(N-1-i-3-k)*n1 + (k*min(m1,n1) + m1-n1)] += mod_pow(n,m,M) * mod_pow(min(n,m),i-k,M) % M\n                        f[0][(N-1-i-3-k)*n1 + (k*min(m1,n1) + m1-n1)] %= M\n                    elif k == i:\n                        f[j][(i+1)*m] += mod_pow(n,m,M)\n                        f[j][(i+1)*m] %= M\n                else:\n                    f[(j+2)%4][i*m + k*min(m,n) + m-n] += mod_pow(min(m,n),k,M)\n                    f[(j+2)%4][i*m + k*min(m,n) + m-n] %= M\n\nans = (f[0][-1]*n1)%M\nfor i in range(4):\n    ans += (f[i][-1]*m1)%M\nprint(ans%M)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949184060096741,
            0.9942610859870911,
            0.9941742420196533,
            0.995461106300354,
            0.9941757917404175,
            0.9944796562194824,
            0.9936375021934509,
            0.9954873919487,
            0.994839608669281,
            0.9951755404472351,
            0.9927042722702026,
            0.9926978945732117,
            0.9944230914115906,
            0.9896806478500366,
            0.9930676817893982,
            0.9950369000434875,
            0.9959178566932678,
            0.994911789894104,
            0.9939538836479187,
            0.9929788708686829
        ]
    },
    "3745": {
        "similarity": 0.9963173270225525,
        "body": "    n, m = map(int, input().split())\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * n\n\n        if color[node] != -1:\n            return color[node] == c\n        for neighbor in adj[node]:\n            if not dfs(neighbor, 'a' if c == 'c' else chr(ord(c) + 1)):\n                return False\n        color[node] = c\n        return True\n\n    ok = all(dfs(node, 'a') for node in range(n))\n    ans = [''] * n\n    for i in range(n):\n        if color[i] == -1:\n            continue\n        ans[i] = 'abc'[color[i]]\n\n    print('Yes' if ok else 'No')\n    if ok:\n        print(''.join(ans))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940006136894226,
            0.9961480498313904,
            0.9946011900901794,
            0.9959005117416382,
            0.995913565158844,
            0.9953121542930603,
            0.9950087666511536,
            0.9963173270225525,
            0.994297444820404,
            0.9953088164329529,
            0.9952671527862549,
            0.9839670062065125,
            0.9957426190376282,
            0.9951284527778625,
            0.9952777028083801,
            0.9959011077880859,
            0.9956309795379639,
            0.9927586913108826,
            0.9961816072463989,
            0.9941030144691467
        ]
    },
    "3028": {
        "similarity": 0.9968549609184265,
        "body": "from collections import deque\n\n    if n * m == p: return [p] * n * m\n\n        val = board[row][col]\n        diff = (val - 1) % p + 1\n        for i in range(n):\n            board[i][col] += diff\n        for j in range(m):\n            board[row][j] += diff\n        return [diff]\n\n    visited = set()\n    queue = deque([(0, tuple(tuple(row) for row in board)))])\n\n    while queue:\n        moves = 0\n        cur_moves = []\n        state = queue.popleft()\n\n        if tuple(tuple(x % p + 1 for x in row) for row in state[2]) == (p,) * n:\n            return [moves] + sum(cur_moves, [])\n\n        visited.add(state)\n        new_board = list(state[2])\n        max_diff = max(max(row) for row in new_board)\n\n        if max_diff < p and tuple(tuple(x % p + 1 for x in row) for row in state[2]) not in visited:\n            queue.append((moves, state[0], tuple(tuple(x % p + 1 for x in row) for row in new_board)))\n\n        for i in range(n):\n            for j in range(m):\n                if max_diff < board[i][j]:\n                    diff = get_diff(i, j)\n                    moves += sum(diff)\n                    cur_moves.append(diff)\n\n    return [-1]\n\nn, m, p = map(int, input().split())\nboard = []\nfor _ in range(n):\n    row = list(map(int, input().split()))\n    board.append(row)\n\nprint(len(solve(n, m, p, board)))\nprint(*solve(n, m, p, board)[1:])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966656565666199,
            0.9965204000473022,
            0.9963985085487366,
            0.9966337084770203,
            0.9947668313980103,
            0.9957699179649353,
            0.9934754967689514,
            0.9968549609184265,
            0.9956877827644348,
            0.9964049458503723,
            0.9959565997123718,
            0.9964388012886047,
            0.9961099028587341,
            0.9961298704147339,
            0.9957644939422607,
            0.9954032897949219,
            0.9949425458908081,
            0.9965134859085083,
            0.9964234232902527,
            0.9965093731880188
        ]
    },
    "3196": {
        "similarity": 0.9970040917396545,
        "body": "from collections import deque, defaultdict\n\nn, m = map(int, input().split())\ngraph = defaultdict(list)\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n\n    visited = [False] * (n + 1)\n    queue = deque([(1, -1)])\n    parent = [-1] * (n + 1)\n    while queue:\n        node, par = queue.popleft()\n        if not visited[node]:\n            visited[node] = True\n            for nei in graph[node]:\n                if parent[nei] == -1:\n                    parent[nei] = node\n                    queue.append((nei, node))\n                elif parent[nei] != node:\n                    return False\n    return True\n\nif bfs():\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        if graph[i]:\n            dp[i] = sum(dp[j] for j in graph[i])\n    print(sum(dp) % (10**9))\nelse:\n    print('inf')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950692057609558,
            0.9953658580780029,
            0.9940633177757263,
            0.9952483177185059,
            0.994834303855896,
            0.9968122243881226,
            0.9970040917396545,
            0.9936890006065369,
            0.9967448711395264,
            0.9969253540039062,
            0.9954394102096558,
            0.9955334067344666,
            0.9949129819869995,
            0.9958269000053406,
            0.9916287660598755,
            0.9938571453094482,
            0.9941932559013367,
            0.9953647255897522,
            0.9961314797401428,
            0.9964393973350525
        ]
    },
    "3405": {
        "similarity": 0.9961937665939331,
        "body": "    return int(str(n)[0])\n\n    if str(int(d)).zfill(length) == str(d):\n        return int(d)\n    else:\n        return None\n\n    ans = []\n    for i in range(1, 10**8):\n        digits = [int(j) for j in list(str(i))]\n        target_digit = n_to_digit(float(x))\n        if len(digits) >= len(str(target_digit)):\n            target_digits = [target_digit] + [None]*(len(digits)-1)\n            if digits == target_digits:\n                ans.append(i)\n    return sorted(ans)\n\nx = float(input())\nif work(x):\n    print('\\n'.join(map(str, work(x))))\nelse:\n    print('No solution')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951061606407166,
            0.9922208189964294,
            0.9910550713539124,
            0.9961937665939331,
            0.9958463311195374,
            0.9956352114677429,
            0.9960768818855286,
            0.9953755736351013,
            0.995070219039917,
            0.9930747151374817,
            0.9946535229682922,
            0.9925504326820374,
            0.9927518963813782,
            0.9945273399353027,
            0.9953332543373108,
            0.9945360422134399,
            0.9952930808067322,
            0.9938929677009583,
            0.9934992790222168,
            0.9953590035438538
        ]
    },
    "3126": {
        "similarity": 0.9968898296356201,
        "body": "    frogs = list(sorted(set(p)))\n    max_pos = max(frogs)\n    new_t = min(t, max_pos)\n\n    res = 0\n    for i in range(len(frogs)):\n        if frogs[i] <= new_t:\n            res += (frogs[i] - (i + 1)) * (i + 2)\n        else:\n            break\n\n    return str(res) \n\nn, t = map(int, input().split())\np = list(map(int, input().split()))\n\nfor _ in range(int(input())):\n    op = input().split()\n    if op[0] == '+':\n        p.append(int(op[1]))\n    elif op[0] == '-':\n        p.remove(int(op[1]))\n    else:\n        t = int(op[1])\n\n    print(f(n, t, p))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995829164981842,
            0.9941926598548889,
            0.9947875142097473,
            0.9946221113204956,
            0.9956977367401123,
            0.995908260345459,
            0.9949431419372559,
            0.9948762655258179,
            0.9964577555656433,
            0.9960629343986511,
            0.9967344403266907,
            0.9917512536048889,
            0.995569109916687,
            0.9956779479980469,
            0.9966450929641724,
            0.9968898296356201,
            0.9964010119438171,
            0.9942339658737183,
            0.995949923992157,
            0.9960431456565857
        ]
    },
    "3279": {
        "similarity": 0.9965149760246277,
        "body": "    f = [1]\n    for i in range(1, n + 1):\n        f.append(f[-1] * i)\n    return f[n] // f[r] // f[n - r]\n\nn = int(input())\nrows = []\nfor _ in range(n):\n    rows.append(list(map(int, input().split())))\ncolumns = []\nfor _ in range(n):\n    columns.append(list(map(int, input().split())))\n\n    total = 0\n    for i, num in enumerate(row):\n        if i > 0 and row[i] != row[i - 1]:\n            total += nCr(num + total, num)\n        elif i == 0:\n            total += num\n    return total <= n\n\n    result = [[0] * (n + 1) for _ in range(n)]\n    for i in range(n):\n        row = rows[i]\n        if not row or row[0] == 0:\n            continue\n        if check(row):\n            prev = 0\n            for j, num in enumerate(row):\n                result[i][prev + num - 1] = 1\n                prev += num\n    for i in range(n):\n        column = columns[i]\n        if not column or column[0] == 0:\n            continue\n        if check(column[::-1]):\n            prev = 0\n            for j, num in enumerate(column[::-1]):\n                result[prev + num - 1][i] = 1\n                prev += num\n    return \"\\n\".join(\" \".join(map(str, row)) for row in result)\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955055117607117,
            0.995672345161438,
            0.995743989944458,
            0.9931259155273438,
            0.9932435750961304,
            0.9957030415534973,
            0.9959883689880371,
            0.9960378408432007,
            0.9943514466285706,
            0.9964196085929871,
            0.9962449669837952,
            0.9948055148124695,
            0.9962955117225647,
            0.9962579607963562,
            0.9955852031707764,
            0.9955636262893677,
            0.9957472085952759,
            0.9941402077674866,
            0.9965149760246277,
            0.9950348734855652
        ]
    },
    "3599": {
        "similarity": 0.9952856302261353,
        "body": "import heapq\nfrom sys import stdin, stdout\n\nT, N = map(int, stdin.readline().split())\nbreaks = list(map(int, stdin.readline().split()))\n\npq = [(0, i) for i in range(N)]\nheapq.heapify(pq)\n\nans = [0] * N\n\ntime = 0\nfor t in range(T):\n    while pq and pq[0][0] <= time:\n        _, i = heapq.heappop(pq)\n        ans[i] = t\n        if len(pq) < 3:\n            heapq.heappush(pq, (t + breaks[i], i))\n    for _, i in pq:\n        heapq.heappush(pq, (i + breaks[i], i))\n\nfor i in ans:\n    stdout.write(str(i) + ' ')",
        "result": "timed out",
        "similarities": [
            0.9949138164520264,
            0.990431547164917,
            0.9937834739685059,
            0.9913269877433777,
            0.9940101504325867,
            0.9943560361862183,
            0.9933674335479736,
            0.9949952960014343,
            0.9952480792999268,
            0.9951289296150208,
            0.9916553497314453,
            0.9898511171340942,
            0.9950879812240601,
            0.9941219687461853,
            0.9899969696998596,
            0.9889706969261169,
            0.9928886890411377,
            0.9952856302261353,
            0.9937035441398621,
            0.9940487742424011
        ]
    },
    "3687": {
        "similarity": 0.9964643120765686,
        "body": "    n,q,s = map(int,input().split())\n    q_to_s = list(map(int,input().split()))\n    c = [0] + list(map(int,input().split()))\n    d = []\n    for i in range(n):\n        temp = list(map(int,input().split()))[1:]\n        d.append(temp)\n    q_space = [c[i] - sum(d[i]) for i in range(q)]\n    downlink = 0\n    for window in d:\n        downlink += max(0,min(sum(window),window[0]))\n        space_needed = sum(max(0,ci - wi) for ci,wi in zip(c,q_space))\n        if space_needed > downlink: return \"impossible\"\n        for i,sensor in enumerate(q_to_s):\n            q_space[sensor-1] -= max(0,window[i])\n    return \"possible\"\n\nprint(f())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949378967285156,
            0.9960777759552002,
            0.9917685985565186,
            0.9942490458488464,
            0.9955201745033264,
            0.9959648847579956,
            0.9949823021888733,
            0.9937043786048889,
            0.9958126544952393,
            0.9951077699661255,
            0.9946363568305969,
            0.9951667785644531,
            0.9951541423797607,
            0.9955494403839111,
            0.9960057139396667,
            0.9957405924797058,
            0.9949281811714172,
            0.9906416535377502,
            0.9957548379898071,
            0.9964643120765686
        ]
    },
    "3864": {
        "similarity": 0.9923459887504578,
        "body": "    if not b:\n        return 1\n    sqrt = pow(a, b // 2)\n    res = (sqrt * sqrt) % MOD\n    if b & 1:\n        res = (res * a) % MOD\n    return res\n\nMOD = 998244353\nn = int(input())\nfor s in range(1, n + 1):\n    ans = pow(3, s - 1)\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9914922118186951,
            0.9648409485816956,
            0.9891345500946045,
            0.9921900033950806,
            0.9912643432617188,
            0.9776476621627808,
            0.9908013939857483,
            0.9901056885719299,
            0.9864116311073303,
            0.9880067706108093,
            0.9898697733879089,
            0.987729549407959,
            0.9912782907485962,
            0.9923459887504578,
            0.9907400012016296,
            0.9917925596237183,
            0.9918329119682312,
            0.9920061826705933,
            0.9865490794181824,
            0.9909826517105103
        ]
    },
    "3504": {
        "similarity": 0.9958602786064148,
        "body": "    D, S = map(int, input().split())\n    sensors = []\n    for _ in range(S):\n        x1, x2, y = map(int, input().split())\n        sensors.append([x1, x2, y])\n    droplets = []\n    for _ in range(D):\n        x, y = map(int, input().split())\n        droplets.append((x, y))\n\n        s = next((s for s in sensors if s[0] <= x <= s[1]), None)\n        return (s[2], s) if s else None\n\n    result = []\n    for d in droplets:\n        i = get_intersect(sensors, d[0])\n        if i is not None:\n            _, s = i\n            sensors.remove(s)\n            result.append(s[2])\n        else:\n            result.append(0)\n\n    print(*result, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953252673149109,
            0.9956311583518982,
            0.9946208000183105,
            0.9950670003890991,
            0.9953884482383728,
            0.9950577616691589,
            0.993800699710846,
            0.9927288889884949,
            0.9953324198722839,
            0.9937840700149536,
            0.9941228628158569,
            0.9888859987258911,
            0.993861973285675,
            0.9932166934013367,
            0.9935917258262634,
            0.9958602786064148,
            0.9948353171348572,
            0.9932566285133362,
            0.9923734068870544,
            0.9942053556442261
        ]
    },
    "3451": {
        "similarity": 0.996415913105011,
        "body": "import sys\n\n    n, k = map(int, input().split())\n    seq = input()\n    costs = [int(input()) for _ in range(n)]\n    opening_costs, closing_costs = [], []\n    balance = sum(1 if c == '(' else -1 for c in seq)\n\n    for i in range(n):\n        cost = costs[i]\n        if seq[i] == '(':\n            opening_costs.append((balance, cost))\n        else:\n            closing_costs.append((-balance, cost))\n\n    opening_costs.sort(key=lambda x: (x[0], x[1]))\n    closing_costs.sort(key=lambda x: (-x[0], -x[1]))\n\n    for i in range(min(k+1, len(opening_costs))):\n        balance += opening_costs[i][0]\n        costs[i] = opening_costs[i][1]\n\n    for i in range(min(k, len(closing_costs))):\n        balance -= closing_costs[i][0]\n        costs[n - 1 - i] = closing_costs[i][1]\n\n    if balance == 0:\n        return '?'\n    elif k >= abs(balance):\n        sum_of_effort = 2 * (10**20)\n        for i in range(min(k+1, len(opening_costs))):\n            sum_of_effort = min(sum_of_effort, opening_costs[i][1])\n        for j in range(min(k, len(closing_costs))):\n            sum_of_effort = min(sum_of_effort, closing_costs[j][1])\n        return str(sum_of_effort)\n    else:\n        return '?'\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931568503379822,
            0.9960238933563232,
            0.9940778613090515,
            0.995794415473938,
            0.996143639087677,
            0.9960030317306519,
            0.9958248138427734,
            0.9937639832496643,
            0.9914137125015259,
            0.9950394034385681,
            0.9955886006355286,
            0.9961186647415161,
            0.9931733012199402,
            0.996415913105011,
            0.9953851103782654,
            0.9945411682128906,
            0.9956384301185608,
            0.9963971376419067,
            0.9963224530220032,
            0.9963778257369995
        ]
    },
    "3156": {
        "similarity": 0.9963523745536804,
        "body": "    store_map = {}\n    for k in range(K):\n        store_map[k] = set()\n        for _ in range(1):\n            i, s = map(str.strip, input().split())\n            i = int(i)\n            store_map[i].add(s)\n\n    N = int(input())\n    path = [None]*N\n        if k == -1:\n            return True\n        for item in store_map[k]:\n            next_k = items.index(item, k+1) if item in items[k+1:] else float('inf')\n            if next_k != float('inf') and (path[next_k] is None or dfs(next_k)):\n                path[k] = item\n                return True\n        return False\n\n    for k in range(N):\n        if not dfs(k):\n            print(\"impossible\")\n            return\n    items_equal_path = items == [path[k] for k in range(N)]\n    count_store_path = len([k for k in range(N) if path[k] is not None])\n    print(\"unique\" if items_equal_path and count_store_path == 1 else \"ambiguous\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959498047828674,
            0.9958757162094116,
            0.9945863485336304,
            0.9955000877380371,
            0.9937238097190857,
            0.9950157999992371,
            0.9961957335472107,
            0.9963523745536804,
            0.993198573589325,
            0.9959550499916077,
            0.9960184693336487,
            0.9958293437957764,
            0.9962828755378723,
            0.994006335735321,
            0.9941565990447998,
            0.9959841370582581,
            0.9923985004425049,
            0.9949879050254822,
            0.9946889281272888,
            0.9957175850868225
        ]
    },
    "3697": {
        "similarity": 0.9959439039230347,
        "body": "    n, k, m, a = map(int, input().split())\n    last_votes = [0] * (n + 1)\n    candidates_votes = [[] for _ in range(n + 1)]\n    g = list(map(int, input().split()))\n    for i, x in enumerate(g):\n        last_votes[x] = m - a + i\n        candidates_votes[x].append(i)\n\n    results = [3] * (n + 1)\n    elected = []\n    for x in range(1, n + 1):\n        if len(candidates_votes[x]) >= k:\n            results[x] = 1\n        else:\n            sorted_candidates = sorted(candidates_votes[x], key=lambda y: last_votes[y])\n            if sum([len(y) for y in candidates_votes[z] if z != x]) < k - len(sorted_candidates):\n                results[x] = 2\n\n    return ' '.join(map(str, [x if x <= n else 0 for x in results[1:n + 1]]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948861002922058,
            0.995555579662323,
            0.9950752258300781,
            0.9956709146499634,
            0.9936137795448303,
            0.9939829111099243,
            0.9950686097145081,
            0.9959439039230347,
            0.9953027367591858,
            0.9958787560462952,
            0.9945247173309326,
            0.9847032427787781,
            0.9923801422119141,
            0.9918749928474426,
            0.995194673538208,
            0.9948666095733643,
            0.9948554039001465,
            0.9959401488304138,
            0.9942663908004761,
            0.9943013787269592
        ]
    },
    "3647": {
        "similarity": 0.9975383281707764,
        "body": "from collections import deque\n\n    R, C = len(maze), len(maze[0])\n    visited = [[float('inf')] * C for _ in range(R)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    queue = deque([(r, c, 0)])\n    visited[r][c] = 0\n\n    while queue:\n        x, y, dist = queue.popleft()\n        if maze[x][y] == 'M':\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if (0 <= nx < R) and (0 <= ny < C) and maze[nx][ny] != '#':\n                if maze[nx][ny] == '_':\n                    queue.append((nx, ny, dist + 1))\n                    visited[nx][ny] = -1\n                elif visited[nx][ny] > dist + 1:\n                    visited[nx][ny] = dist + 1\n                    queue.append((nx, ny, dist + 1))\n\n    return\n\n    R, C = map(int, input().split())\n    maze = [list(input()) for _ in range(R)]\n\n    for r in range(R):\n        for c in range(C):\n            if maze[r][c] != '#':\n                bfs(r, c, maze)\n\n    for row in visited:\n        print(*[1 + v if v > 0 else -1 for v in row])\n\nC = int(input())\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955950379371643,
            0.9975383281707764,
            0.9969278573989868,
            0.9974557161331177,
            0.9954231977462769,
            0.9969906210899353,
            0.995975911617279,
            0.9949651956558228,
            0.9962655901908875,
            0.9968481659889221,
            0.9968665242195129,
            0.9965682029724121,
            0.9971668720245361,
            0.9972991943359375,
            0.9966302514076233,
            0.9960313439369202,
            0.9966974854469299,
            0.9961263537406921,
            0.9961195588111877,
            0.995972216129303
        ]
    },
    "3699": {
        "similarity": 0.9953745603561401,
        "body": "import sys\nimport math\nfrom collections import defaultdict, deque\n\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\n    ax, ay, bx, by, tx, ty = map(int, input().split())\n    n = int(input())\n    bottles = [tuple(map(int, input().split())) for _ in range(n)]\n    used = defaultdict(bool)\n    adj = [(ax, ay), (bx, by)]\n\n    for x, y in bottles:\n        if not used[(x,y)]:\n            adj.append((x, y))\n            used[(x,y)] = True\n\n    adj.sort(key=lambda x: math.hypot(x[0]-tx, x[1]-ty))\n\n    ans = 0\n    while len(adj) > 2:\n        curr = adj.pop()\n        for i in range(len(adj)-1):\n            dx1, dy1 = curr[0] - adj[i][0], curr[1] - adj[i+1][1]\n            dx2, dy2 = curr[0] - adj[i+1][0], curr[1] - adj[i][1]\n            if math.hypot(dx1, dy1) > math.hypot(dx2, dy2):\n                dx, dy = dx1, dy1\n            else:\n                dx, dy = dx2, dy2\n\n            ans += 2 * math.hypot(abs(dx), abs(dy))\n        ans += math.hypot(curr[0]-tx, curr[1]-ty) * 2\n\n    while len(adj) > 1:\n        curr = adj.pop()\n        for i in range(len(adj)-1):\n            dx1, dy1 = curr[0] - adj[i][0], curr[1] - adj[i+1][1]\n            dx2, dy2 = curr[0] - adj[i+1][0], curr[1] - adj[i][1]\n            if math.hypot(dx1, dy1) > math.hypot(dx2, dy2):\n                dx, dy = dx1, dy1\n            else:\n                dx, dy = dx2, dy2\n\n            ans += 2 * math.hypot(abs(dx), abs(dy))\n        ans += math.hypot(curr[0]-tx, curr[1]-ty)\n\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934461712837219,
            0.9942167401313782,
            0.9902948141098022,
            0.9943860769271851,
            0.9906498789787292,
            0.9949025511741638,
            0.9950258135795593,
            0.9949194192886353,
            0.9913042187690735,
            0.9953745603561401,
            0.9926581382751465,
            0.9949196577072144,
            0.9932869672775269,
            0.9918745160102844,
            0.9931514263153076,
            0.9939917325973511,
            0.9929606914520264,
            0.9951221942901611,
            0.9948002696037292,
            0.9943841695785522
        ]
    },
    "3145": {
        "similarity": 0.9952636361122131,
        "body": "X, A, B = map(int, input().split())\ndigits = set(input())\n\n    return all(digit in num for digit in digits)\n\ncount = 0\nfor i in range(A, B+1):\n    if i % X == 0 and is_allowed(str(i)):\n        count += 1\n\nprint(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952636361122131,
            0.9947382211685181,
            0.9921778440475464,
            0.9943749308586121,
            0.9871880412101746,
            0.9940444827079773,
            0.9943270683288574,
            0.987790048122406,
            0.9940941333770752,
            0.9931780099868774,
            0.9941997528076172,
            0.9938033223152161,
            0.988694429397583,
            0.9950146079063416,
            0.9940848350524902,
            0.9945889711380005,
            0.9900816082954407,
            0.994118332862854,
            0.9946714639663696,
            0.9932287931442261
        ]
    },
    "3795": {
        "similarity": 0.9939916729927063,
        "body": "    r = 0\n    for i in range(200//e + 1):\n        for j in range(100//d + 1):\n            if n >= i * e + j * d:\n                n -= i * e + j * d\n                if n % (i+j) == 0: r = max(r, n // (i+j))\n    return r",
        "result": "failed: testcase 0",
        "similarities": [
            0.992031991481781,
            0.9927914142608643,
            0.9858511090278625,
            0.9923669695854187,
            0.9920586943626404,
            0.9914663434028625,
            0.9929124712944031,
            0.9935004711151123,
            0.9928011894226074,
            0.9932805299758911,
            0.9939916729927063,
            0.9896131753921509,
            0.9812852144241333,
            0.9938384890556335,
            0.992763102054596,
            0.9922993183135986,
            0.9926133751869202,
            0.984848141670227,
            0.9883073568344116,
            0.9917082786560059
        ]
    },
    "3353": {
        "similarity": 0.9975829720497131,
        "body": "    import sys\n    from collections import deque\n\n    graph = [[] for _ in range(R+2)]\n    for _ in range(L):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (R + 2)\n    queue = deque([(0, -2, False, 0)])\n    while queue:\n        boulder, person, on_right, time = queue.popleft()\n        if not visited[boulder]:\n            visited[boulder] = True\n            for next_boulder in graph[boulder]:\n                if (next_boulder == -1 or visited[next_boulder]) and not on_right:\n                    continue\n                queue.append((next_boulder, person, next_boulder == -1, time + 2))\n        elif next_boulder == -1:\n            queue.append((boulder, person, True, time))\n\n    if not any(not v for v in visited):\n        ans = 0\n        while queue:\n            boulder, _, on_right, time = queue.popleft()\n            ans += max(0, (time + P - 1) // P)\n        print(ans)\n    else:\n        n_left_behind = P - sum(not v for v in visited[1:-2])\n        print(n_left_behind)\n\nf(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968101382255554,
            0.996945858001709,
            0.9972100853919983,
            0.9973241686820984,
            0.996907114982605,
            0.9972233176231384,
            0.9933386445045471,
            0.9971044659614563,
            0.9975273013114929,
            0.9965852499008179,
            0.994870662689209,
            0.9971843361854553,
            0.9975829720497131,
            0.9967183470726013,
            0.9966635704040527,
            0.9970828890800476,
            0.9975230693817139,
            0.9971877932548523,
            0.9965674877166748,
            0.9970602989196777
        ]
    },
    "3065": {
        "similarity": 0.9960666298866272,
        "body": "import sys\n\nn = int(input())\nl = int(input())\ncaptain = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(n):\n    neighbors = list(map(int, input().split()))[1:]\n    g[i].extend(neighbors)\n\n    visited = [False] * n\n    dist = [float('inf')] * n\n    dist[start] = 0\n    queue = [[start]]\n    while queue:\n        path = queue.pop(0)\n        node = path[-1]\n        if not visited[node]:\n            visited[node] = True\n            for neighbor in g[node]:\n                new_path = list(path)\n                new_path.append(neighbor)\n                queue.append(new_path)\n                dist[neighbor] = min(dist[neighbor], 2 * len(path) - 1)\n    return dist\n\ndist = bfs(captain[0])\nprob = 1\nfor i in range(l - 1):\n    prob *= (2 * dist[captain[i + 1]] - dist[captain[i]]) ** (-1)\nprint(prob)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928767681121826,
            0.9960471987724304,
            0.9951021075248718,
            0.9948388338088989,
            0.9954132437705994,
            0.995390772819519,
            0.9859916567802429,
            0.9945971965789795,
            0.9960666298866272,
            0.9943464398384094,
            0.9919621348381042,
            0.9935211539268494,
            0.9957578778266907,
            0.9957990050315857,
            0.9958704710006714,
            0.9952824115753174,
            0.9949193596839905,
            0.995557963848114,
            0.9948228597640991,
            0.9946864247322083
        ]
    },
    "3250": {
        "similarity": 0.9960481524467468,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\nb, d = map(int, input().split())\nif pow(b, -1, d) == pow(1, -1, d):\n    print('yes')\nelse:\n    print('no')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955485463142395,
            0.9912928342819214,
            0.9917951822280884,
            0.9906820058822632,
            0.9909089803695679,
            0.9957731366157532,
            0.9959421753883362,
            0.9960074424743652,
            0.9913551807403564,
            0.995625376701355,
            0.9948948621749878,
            0.9948071837425232,
            0.9957758188247681,
            0.9951806664466858,
            0.9960481524467468,
            0.9946172833442688,
            0.9877989888191223,
            0.9952390789985657,
            0.9957445859909058,
            0.9893261790275574
        ]
    },
    "3306": {
        "similarity": 0.9962979555130005,
        "body": "    N, M = map(int, input().split())\n    detectors = []\n    for _ in range(N):\n        p, c = map(int, input().split())\n        detectors.append((p, c))\n    detectors.sort(key=lambda x: (x[0], -x[1]))\n    calls = [0] * (M + 1)\n    res = 0\n    i = 0\n    while i < N:\n        p, c = detectors[i]\n        left_calls = max(calls[p-1] - calls[0], 0)\n        right_calls = max(calls[M] - calls[p+1], 0)\n        res += left_calls + right_calls\n        calls[p] = c\n        i += 1\n    print(res)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943628907203674,
            0.9959584474563599,
            0.9962979555130005,
            0.9961258769035339,
            0.9954349398612976,
            0.9934654235839844,
            0.9958889484405518,
            0.9953964948654175,
            0.9924744367599487,
            0.9933546185493469,
            0.9941678643226624,
            0.9957429766654968,
            0.9956675171852112,
            0.9931807518005371,
            0.9959554076194763,
            0.9959315061569214,
            0.9943872094154358,
            0.9956886172294617,
            0.9953189492225647,
            0.9870169758796692
        ]
    },
    "3970": {
        "similarity": 0.9960993528366089,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set(a)\n    ans = 0\n    for x in sorted(s):\n        if not (x * k) in s:\n            s.discard(x * k)\n            ans += 1\n    return ans",
        "result": "failed: testcase 0",
        "similarities": [
            0.993827223777771,
            0.9947389364242554,
            0.9921512603759766,
            0.9948971271514893,
            0.9933731555938721,
            0.9940343499183655,
            0.993202805519104,
            0.9953538775444031,
            0.9905245900154114,
            0.9956933259963989,
            0.9944726824760437,
            0.9921084046363831,
            0.9952531456947327,
            0.9941503405570984,
            0.9960993528366089,
            0.9957106709480286,
            0.9941392540931702,
            0.9956620931625366,
            0.9923072457313538,
            0.9913259744644165
        ]
    },
    "3655": {
        "similarity": 0.9969367980957031,
        "body": "import sys\n\nw, h = map(int, input().split())\nrobot_img = []\nfor _ in range(h):\n    row = list(map(int, input().split()))\n    robot_img.append(row)\n\nfloor_w, floor_h = map(int, input().split())\n\n    overlap = [min(x, y) for x, y in zip(floor_row, robot_row)]\n    return sum(1 for x, y in zip(overlap, robot_row) if x == y)\n\nfloor_img = []\nfor _ in range(floor_h):\n    row = list(map(int, input().split()))\n    floor_img.append(row)\n\ncandidate_locations = []\n\nfor x in range(max(w - 1, 0), min(floor_w - w + 1, 0) + 1):\n    for y in range(max(h - 1, 0), min(floor_h - h + 1, 0) + 1):\n        similarity = sum(get_overlap_similarity(row[y:], robot_row)\n                         for row, robot_row in zip(floor_img[x:], robot_img))\n        if similarity > sum(x[1] for x in candidate_locations) or not candidate_locations:\n            candidate_locations.append((x, y))\n\nprint('\\n'.join(f'{x} {y}' for x, y in sorted(candidate_locations)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936392903327942,
            0.9969367980957031,
            0.994788408279419,
            0.9934736490249634,
            0.9966518878936768,
            0.9968587756156921,
            0.9952201843261719,
            0.992698073387146,
            0.996027410030365,
            0.9952352643013,
            0.9956812858581543,
            0.9954255819320679,
            0.9938840270042419,
            0.9959214925765991,
            0.9953035116195679,
            0.9962285757064819,
            0.996337890625,
            0.9953104257583618,
            0.9948039650917053,
            0.9953906536102295
        ]
    },
    "3589": {
        "similarity": 0.9974087476730347,
        "body": "    while x > 9:\n        res = 1\n        tmp = x\n        while tmp:\n            res *= tmp % 10\n            tmp //= 10\n        x = res\n    return x\n\nL, R = map(int, input().split())\nans = [0]*9\nfor x in range(L, R+1):\n    ans[f(x)] += 1\nprint(*ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971373677253723,
            0.9971474409103394,
            0.997105062007904,
            0.9971766471862793,
            0.9972584247589111,
            0.9950141906738281,
            0.996982991695404,
            0.9959863424301147,
            0.9968255758285522,
            0.9943901896476746,
            0.9937238097190857,
            0.9958363771438599,
            0.9969893097877502,
            0.9956340789794922,
            0.996776282787323,
            0.9918004274368286,
            0.9941272735595703,
            0.9968057870864868,
            0.9974087476730347,
            0.9966189861297607
        ]
    },
    "3257": {
        "similarity": 0.9948192238807678,
        "body": "    a, b, c = map(float, input().split())\n    s = (a + b + c) / 2\n    area = (-s*(s-a)*(s-b)*(s-c))**0.5\n    if 1 <= abs(a-b) <= 100 and 1 <= abs(b-c) <= 100 and a+b+c == 3*s:\n        return round(area, 6)\n    else:\n        return -1\n\nprint(carpet_area())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946147799491882,
            0.9925283193588257,
            0.9940090179443359,
            0.9946961998939514,
            0.9920726418495178,
            0.9945122599601746,
            0.9948192238807678,
            0.9925312399864197,
            0.9945369362831116,
            0.9919108152389526,
            0.9942460656166077,
            0.9905734658241272,
            0.9901838898658752,
            0.9876468181610107,
            0.9888632893562317,
            0.994110107421875,
            0.9947586059570312,
            0.9946479797363281,
            0.984411358833313,
            0.9941906332969666
        ]
    },
    "3927": {
        "similarity": 0.9953383207321167,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    counts = {}\n    for x in a:\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n    max_mass = max(counts.keys())\n    pairs = [(i, j) for i in range(1, n+1) for j in range(i+1, n+1)]\n    max_k = 0\n    for pair in pairs:\n        k = counts[pair[0]] + counts[pair[1]]\n        if k > max_k and (pair[0] + pair[1]) % 2 == 0:\n            max_k = k\n    if sum(counts.values()) - max_k >= 2:\n        return sum(counts.values())\n    for x in range(1, max_mass+1):\n        if counts[x] > 0 and (sum(counts.keys()) - x) % 2 == 0:\n            return max(max_k + 1, counts[x])\n    return max_k",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939143657684326,
            0.9950500130653381,
            0.9942066669464111,
            0.9923803210258484,
            0.994114100933075,
            0.9927968382835388,
            0.9953383207321167,
            0.9945874810218811,
            0.9941643476486206,
            0.9888489246368408,
            0.9918660521507263,
            0.9952427744865417,
            0.9951161742210388,
            0.9891223907470703,
            0.9926292300224304,
            0.9890627861022949,
            0.9854379296302795,
            0.9878628253936768,
            0.9940782785415649,
            0.9916809797286987
        ]
    },
    "3319": {
        "similarity": 0.9959364533424377,
        "body": "    import sys\n    n, nx, ny, nz = map(int, input().split())\n    planets = []\n    for i in range(n):\n        m, x, y, z, vx, vy, vz = map(int, input().split())\n        planets.append((m, (x, y, z), (vx, vy, vz)))\n    times = 1\n    last_collision = None\n    while True:\n        planetoids = {}\n        for i, p in enumerate(planets):\n            x, y, z = p[1]\n            vx, vy, vz = p[2]\n            new_x, new_y, new_z = (x + vx) % nx, (y + vy) % ny, (z + vz) % nz\n            if new_x == 0: new_x += nx; new_y %= ny; new_z %= nz\n            if (new_x, new_y, new_z) not in planetoids:\n                planetoids[(new_x, new_y, new_z)] = i\n            else:\n                px1, py1, pz1 = planets[planetoids[(new_x, new_y, new_z)]] [1]\n                vx1, vy1, vz1 = planets[planetoids[(new_x, new_y, new_z)]] [2]\n                m1 = planets[planetoids[(new_x, new_y, new_z)]] [0]\n                p.append((m1 + p[0], (int(((px1 + vx1) + (x + vx)) / 2),\n                                    int(((py1 + vy1) + (y + vy)) / 2),\n                                    int(((pz1 + vz1) + (z + vz)) / 2)),\n                            ((vx1 + (x + vx)) // 2, (vy1 + (y + vy)) // 2,\n                             (vz1 + (z + vz)) // 2)))\n                last_collision = times\n                del planets[planetoids[(new_x, new_y, new_z)]]\n        if not planetoids:\n            break\n        planets.extend(list(planetoids.values()))\n        for p in planets: p[0] += sum(p[0] for p in planets) - n * (times + 1)\n        times += 1\n    max_mass = sorted([p[0] for p in sorted(planets, key=lambda x: (x[0], x[1][0]))])[::-1]\n    output = []\n    cnt = 0\n    for m in max_mass:\n        for i, p in enumerate(sorted(planets, key=lambda x: (x[0], x[1][0]))):\n            if p[0] == m:\n                cnt += 1\n                output.append(f'P{i}: {m} {\" \".join(map(str, p[1]))} {\" \".join(map(str, p[2]))}')\n    print(cnt)\n    print('\\n'.join(output))\n\nnum_planets()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949174523353577,
            0.9913454651832581,
            0.9946491718292236,
            0.9948118925094604,
            0.9957237243652344,
            0.9959364533424377,
            0.994914710521698,
            0.9905134439468384,
            0.9957320690155029,
            0.9941051006317139,
            0.9909390211105347,
            0.9953113198280334,
            0.9952760338783264,
            0.9959022402763367,
            0.989044189453125,
            0.9931002259254456,
            0.9939545392990112,
            0.9937280416488647,
            0.9951573610305786,
            0.9937025308609009
        ]
    },
    "3009": {
        "similarity": 0.9966837167739868,
        "body": "import sys\nfrom collections import defaultdict, deque\nimport math\n\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n    N = int(input())\n    lamps = []\n    for i in range(N):\n        x, y, e = map(int, input().split())\n        lamps.append((x, y, e))\n    pos_energy = sum(e for _, _, e in lamps if e > 0)\n    neg_energy = sum(e for _, _, e in lamps if e < 0)\n\n    if abs(pos_energy - neg_energy) > 1e-6:\n        print(\"IMPOSSIBLE\")\n        return\n\n    adj = defaultdict(list)\n    for i, (x1, y1, e1) in enumerate(lamps):\n        for j, (x2, y2, e2) in enumerate(lamps[i+1:], start=i+1):\n            if (e1 > 0 and e2 < 0) or (e1 < 0 and e2 > 0):\n                adj[i].append(j)\n                adj[j].append(i)\n\n    used = [False] * N\n    dp = [[float('inf')] * N for _ in range(N)]\n    queue = deque([(0, float('inf'), (0, -1))])\n    while queue:\n        u, d, p = queue.popleft()\n        if used[u]:\n            continue\n        used[u] = True\n        for v in adj[u]:\n            x1, y1 = lamps[u][0:2]\n            x2, y2 = lamps[v][0:2]\n            c1 = (x1 + 1e-6, y1 + 1e-6)\n            c2 = (x2 - 1e-6, y2 - 1e-6)\n            if dist(c1, p) <= d or dist(c2, p) <= d:\n                dp[u][v] = min(dp[u][v], abs(x1 - x2) + abs(y1 - y2))\n                queue.append((v, d, (x1, y1)))\n    ans = float('inf')\n    for i in range(N):\n        for j in adj[i]:\n            if used[j]:\n                ans = min(ans, dp[i][j])\n    print(round(ans * 1000) / 1000)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.995921790599823,
            0.9960450530052185,
            0.9942082762718201,
            0.9966837167739868,
            0.9959849119186401,
            0.9962061643600464,
            0.9939482808113098,
            0.9950391054153442,
            0.9959114789962769,
            0.9961785078048706,
            0.9962413311004639,
            0.9954543113708496,
            0.9949886798858643,
            0.9957018494606018,
            0.9962003827095032,
            0.9874180555343628,
            0.9941024780273438,
            0.9947672486305237,
            0.9956094622612,
            0.9956355690956116
        ]
    },
    "3896": {
        "similarity": 0.9950910806655884,
        "body": "    n = len(x)\n    MOD = 1000000007\n    ans = 0\n    for i in range(1, n):\n        if x[i-1] == '1':\n            ans -= (2**(n-i) - 2**(i-1)) * (2**(i-1))\n        else:\n            ans += 2**(n-i)\n    return ans % MOD",
        "result": "failed: testcase 0",
        "similarities": [
            0.994419515132904,
            0.9936006665229797,
            0.9919706583023071,
            0.9931644797325134,
            0.9950910806655884,
            0.9920828938484192,
            0.993755042552948,
            0.9943749308586121,
            0.9944000244140625,
            0.9926354289054871,
            0.9895820617675781,
            0.9898802042007446,
            0.9945863485336304,
            0.9932218194007874,
            0.9747536182403564,
            0.9943357110023499,
            0.994101881980896,
            0.9942613840103149,
            0.9924702048301697,
            0.9947565793991089
        ]
    },
    "3509": {
        "similarity": 0.9977734088897705,
        "body": "import heapq\nimport sys\n\n    n = len(graph)\n    dist = [float('inf')] * (n + 1)\n    prev = [None] * (n + 1)\n\n    dist[0] = 0\n    pq = [(0, 0)]\n\n    while pq:\n        d, u = heapq.heappop(pq)\n\n        if d > dist[u]:\n            continue\n\n        for v, w in graph[u]:\n            new_dist = d + w\n            if new_dist < dist[v]:\n                dist[v] = new_dist\n                prev[v] = u\n                heapq.heappush(pq, (new_dist, v))\n\n    return dist[1:], prev[1:]\n\n    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n\n    graph2 = [[[] for _ in range(n + 1)] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph2[u][v].append(w)\n\n    dist1, prev1 = dijkstra(graph2)\n    dist2, prev2 = dijkstra(graph2[::-1])\n\n    a = min(a, b)\n    ans = float('inf')\n    for i in range(n):\n        d1 = dist1[i]\n        d2 = dist2[n - 1] + (a - d1) / 2\n        if d2 <= b:\n            ans = min(ans, n * d2)\n\n    print(int(ans))\n\ngraph = [[] for _ in range(100005)]\nsolve(graph)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975165128707886,
            0.997511088848114,
            0.9960726499557495,
            0.9970704913139343,
            0.9973582029342651,
            0.9966127276420593,
            0.9977734088897705,
            0.9975246787071228,
            0.9972807168960571,
            0.9966992735862732,
            0.9966920614242554,
            0.9976166486740112,
            0.996269941329956,
            0.9976293444633484,
            0.9973958730697632,
            0.9975787997245789,
            0.9976535439491272,
            0.9970619082450867,
            0.9966402649879456,
            0.9966661334037781
        ]
    },
    "3547": {
        "similarity": 0.9934524893760681,
        "body": "    x1 = max(a[0], b[0])\n    y1 = max(a[1], b[1])\n    x2 = min(a[2], b[2])\n    y2 = min(a[3], b[3])\n\n    if x2 > x1 and y2 > y1:\n        return (x2 - x1) * (y2 - y1)\n    else:\n        return 0\n\nn = int(input())\nplots = []\n\nfor _ in range(n):\n    plots.append(tuple(map(float, input().split())))\n\nactual_area = 0\nfor plot in plots:\n    actual_area += (plot[2] - plot[0]) * (plot[3] - plot[1])\n    for other_plot in plots[:plots.index(plot)]:\n        if intersect_area(plot, other_plot):\n            actual_area -= intersect_area(plot, other_plot)\n\nprint(f'{actual_area:.2f}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927369952201843,
            0.9885618090629578,
            0.989227294921875,
            0.9933158755302429,
            0.9928311705589294,
            0.9914413094520569,
            0.989113986492157,
            0.9875680804252625,
            0.991709291934967,
            0.9896567463874817,
            0.9917737245559692,
            0.9887281060218811,
            0.9840003848075867,
            0.9880714416503906,
            0.9918290972709656,
            0.9913080930709839,
            0.9934524893760681,
            0.9876277446746826,
            0.9832292795181274,
            0.9916070699691772
        ]
    },
    "3017": {
        "similarity": 0.9931746125221252,
        "body": "    return (n != 0) and ((n & (n - 1)) == 0)\n\n    power = 2 ** e\n    max_len = len(str(power))\n    cnt = 0\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if str(i) not in [str(j) for j in range(10)]:\n            continue\n        idx = n // i - 1\n        while idx >= 0 and str(power) not in str(idx * i):\n            idx -= 1\n\n        cnt += idx // i + 1\n\n    return cnt",
        "result": "failed: testcase 0",
        "similarities": [
            0.9780540466308594,
            0.9882699847221375,
            0.990104079246521,
            0.9866803884506226,
            0.9924203753471375,
            0.9875815510749817,
            0.9915633201599121,
            0.9914716482162476,
            0.990384578704834,
            0.9926167726516724,
            0.9914804100990295,
            0.9872269034385681,
            0.9895927309989929,
            0.9927185773849487,
            0.9931746125221252,
            0.9915320873260498,
            0.9859892129898071,
            0.9876631498336792,
            0.9889737367630005,
            0.9930518269538879
        ]
    },
    "3076": {
        "similarity": 0.9966358542442322,
        "body": "    jewels = []\n    for _ in range(n):\n        s, v = map(int, input().split())\n        jewels.append((s, v))\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if jewels[i-1][0] <= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-jews[i-1][0]] + jewels[i-1][1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return ' '.join(map(str, [dp[n][i] for i in range(1, k+1)]))\n\nknapSack(*map(int, input().split()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896426796913147,
            0.9959017038345337,
            0.9953978657722473,
            0.9966358542442322,
            0.9960004091262817,
            0.9959929585456848,
            0.9961817860603333,
            0.9960679411888123,
            0.9955259561538696,
            0.9961142539978027,
            0.9964210391044617,
            0.9959069490432739,
            0.9960445761680603,
            0.9946581125259399,
            0.9934815764427185,
            0.9963981509208679,
            0.9943200945854187,
            0.9934797883033752,
            0.9965952038764954,
            0.995267391204834
        ]
    },
    "3923": {
        "similarity": 0.997164785861969,
        "body": "    while b:\n        a, b = b, a % b\n    return a\n\nN, A, B = map(int, input().split())\nif abs(A - B) > 1 or min(A, B) == N:\n    print(-1)\nelse:\n        if i in (A, B): return i\n        for x in (A, B)[::-1]:\n            v = P[i]\n            while f(v) != x: v = P[v]\n            P[i] = v; return v\n\n    A, B = min(A, B), max(A, B)\n    P = list(range(N, 0, -1))\n    for i in range(2 * N):\n        if i % 2 == 0 and f(i) != (A + B - 1) // 2: break\n        elif i % 2 == 1 and f(i) != A: break\n    else:\n        print(*P)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959728717803955,
            0.9961283802986145,
            0.9963809847831726,
            0.9953049421310425,
            0.9969884157180786,
            0.9947116374969482,
            0.9957464337348938,
            0.9962907433509827,
            0.9949739575386047,
            0.99327552318573,
            0.9963653087615967,
            0.9966798424720764,
            0.997164785861969,
            0.9962001442909241,
            0.9966099262237549,
            0.9934309124946594,
            0.9962103962898254,
            0.9961788654327393,
            0.9951429963111877,
            0.9953076243400574
        ]
    },
    "3332": {
        "similarity": 0.9961585998535156,
        "body": "    streams = []\n    for i in range(n):\n        s, d, p = map(int, input().split())\n        streams.append((s, d, p))\n    end_streams = [(t + d, 0, t + d) for t, _, _ in sorted(streams)]\n    end_streams.sort()\n    stack = []\n    max_priority = 0\n    current_priority = 0\n    for time, priority, end_time in end_streams:\n        while stack and stack[-1] <= time:\n            current_max = max(current_priority, max_priority)\n            max_priority = max(max_priority, current_max - (current_priority - stack.pop()))\n            current_priority -= stack.pop()\n        if stack:\n            _, t, _ = end_streams[end_streams.index((time, priority, end_time)) + 1]\n            while stack and stack[-1] > t:\n                stack.pop()\n        stack.append(time)\n        current_priority += priority\n        max_priority = max(max_priority, current_priority)\n    return max_priority\n\nprint(f(int(input())))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9932602643966675,
            0.9961585998535156,
            0.9960909485816956,
            0.9954088926315308,
            0.9935804605484009,
            0.9915528893470764,
            0.9959124326705933,
            0.9958491325378418,
            0.9922674298286438,
            0.9960988759994507,
            0.9947449564933777,
            0.9956049919128418,
            0.9959333539009094,
            0.9930139780044556,
            0.9950001239776611,
            0.9953113198280334,
            0.9911009073257446,
            0.9959076642990112,
            0.9960475564002991,
            0.994042158126831
        ]
    },
    "3240": {
        "similarity": 0.9965198040008545,
        "body": "k, v = map(int, input().split())\nprobabilities = []\nballots = []\n\nfor _ in range(v - 1):\n    p, b = map(int, input().split())\n    probabilities.append(p)\n    ballots.append(b)\n\n    expected_positions = 0\n    for i in range(v - 1):\n        if (probabilities[i] * 2 ** i) > ballot:\n            expected_positions += 0\n        else:\n            expected_positions += (ballots[i] & (2 ** (k - (i + 1)))) != 0\n    return expected_positions\n\nmax_expected = 0\nresult = 0\n\nfor b in range(2 ** k):\n    expected = calculate_expected_positions(b)\n    if expected > max_expected:\n        max_expected = expected\n        result = b\n\nprint(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943564534187317,
            0.9953269958496094,
            0.9952317476272583,
            0.9961720705032349,
            0.9957131147384644,
            0.9952699542045593,
            0.9960586428642273,
            0.9950963258743286,
            0.994826078414917,
            0.9953790307044983,
            0.995695948600769,
            0.9965198040008545,
            0.9953591227531433,
            0.9878411889076233,
            0.9937888979911804,
            0.9960013031959534,
            0.993560791015625,
            0.9960925579071045,
            0.9931150674819946,
            0.9963431358337402
        ]
    },
    "3368": {
        "similarity": 0.9969297647476196,
        "body": "from collections import defaultdict, deque\n\nn, m = map(int, input().split())\ngraph = defaultdict(list)\nanimal_enclosures = {}\nfor i in range(n):\n    animal, count = input().split()\n    count = int(count)\n    animal_enclosures[animal] = set(input().split()[1:])\n    for j in range(i + 1, n):\n        other_animal, other_count = input().split()\n        other_count = int(other_count)\n        if count:\n            for k in range(count):\n                graph[i].append(j)\n                graph[j].append(i)\n\n        for k in range(other_count):\n            other_animal_type = input().split()[1]\n            if animal_enclosures[other_animal] & animal_enclosures[animal]:\n                graph[i].append(j)\n                graph[j].append(i)\n\nvisited = [False] * n\nfor start_node in range(n):\n    if not visited[start_node]:\n        queue = deque([start_node])\n        while queue:\n            current_node = queue.popleft()\n            for neighbor in graph[current_node]:\n                if animal_enclosures[list(animal_enclosures.keys())[current_node]] & animal_enclosures[\n                        list(animal_enclosures.keys())[neighbor]]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n\nif all(visited):\n    print(\"IMPOSSIBLE\")\nelse:\n    print(\"POSSIBLE\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965521097183228,
            0.9958404898643494,
            0.9955458641052246,
            0.9963315725326538,
            0.9947313070297241,
            0.9951578378677368,
            0.9967786073684692,
            0.9962860941886902,
            0.9969297647476196,
            0.9952414631843567,
            0.9951149821281433,
            0.9967639446258545,
            0.9951539635658264,
            0.9965497851371765,
            0.9940210580825806,
            0.9966587424278259,
            0.9937424063682556,
            0.9963193535804749,
            0.9951614737510681,
            0.9955219626426697
        ]
    },
    "3538": {
        "similarity": 0.995397686958313,
        "body": "    for f in other_frogs:\n        if f[0] + f[2] > depth:\n            return True\n        elif f[1] >= frog[1]:\n            continue\n        else:\n            if f[2] + (f[0] + frog[2]) > depth:\n                return True\n\n    return False\n\n    can_save = [False]*len(frogs)\n    for i in range(len(frogs)):\n        if frogs[i][0] >= depth:\n            can_save[i] = True\n        else:\n            for j in range(len(frogs)):\n                if not can_save[j]:\n                    if can_escape(frogs[i], depth, [frogs[k] for k in range(len(frogs)) if k != i and k != j]):\n                        can_save[i] = True\n\n    return sum(1 for b in can_save if b)\n\nn, d = map(int, input().split())\nfrogs = []\nfor _ in range(n):\n    l, w, h = map(int, input().split())\n    frogs.append([l, w, h])\n\nprint(escape(d, frogs))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930857419967651,
            0.9943086504936218,
            0.9935701489448547,
            0.9919216632843018,
            0.9927031993865967,
            0.9935348033905029,
            0.9948033094406128,
            0.9953199625015259,
            0.9946061968803406,
            0.9936637878417969,
            0.9947419762611389,
            0.9867160320281982,
            0.9946116209030151,
            0.9889194369316101,
            0.9905552268028259,
            0.9947839975357056,
            0.9952812194824219,
            0.9942039847373962,
            0.995397686958313,
            0.994464099407196
        ]
    },
    "3183": {
        "similarity": 0.9975965619087219,
        "body": "import sys\n\nclass Edge:\n        self.u = u\n        self.v = v\n        self.c = c\n        self.w = w\n        self.rev = None\n\n    for e in edges:\n        adj[e.u].append((e.v, e.c, e.w))\n        e.rev = len(adj[e.u]) - 1\n        adj[e.v].append((e.u, 0, -e.w))\n\n    dist = [float('inf')] * n\n    dist[s] = 0\n\n    for _ in range(n):\n        for u in range(n):\n            for v, c, w in adj[u]:\n                if dist[u] + w < dist[v] and c:\n                    dist[v] = min(dist[v], dist[u] + w)\n\n    return dist\n\n    flow, cost = 0, 0\n    while True:\n        dist = bellman_ford(adj, s)\n        if dist[t] == float('inf'):\n            break\n        for u in range(n):\n            adj[u][adj[u].index((t, float('inf'), -dist[t]))] = (t, float('inf'), 0)\n\n        pq = []\n        for u in range(s + 1, t):\n            if dist[u] < dist[t]:\n                for v, c, w in adj[u]:\n                    if dist[u] + w == dist[v] and c:\n                        pq.append((u, v, min(c, float('inf'))))\n\n        while True:\n            try:\n                u, v, delta = heappop(pq)\n                if not delta or adj[u][adj[u].index((v, 0, -dist[t]))][2]:\n                    continue\n                flow += delta\n                cost += delta * dist[v]\n                adj[u][adj[u].index((v, 0, -dist[t]))] = (v, delta, -dist[v])\n                adj[v][adj[v].index((u, float('inf'), dist[v]))][1] -= delta\n\n                for i in range(len(pq) - 1, -1, -1):\n                    u2, v2, delta2 = pq[i]\n                    if not delta2 or adj[u2][adj[u2].index((v2, 0, -dist[t]))][2]:\n                        continue\n                    if min(adj[v2][adj[v2].index((u2, float('inf'), dist[v2]))][1], delta) == delta2:\n                        heappop(pq)\n            except IndexError:\n                break\n\n    return flow, cost\n\nn, m, s, t = map(int, input().split())\nedges = [Edge(*map(int, input().split())) for _ in range(m)]\nadj = [[] for _ in range(n)]\nadd_edge(adj, edges)\nflow, cost = min_cost_max_flow(adj, s, t)\nprint(flow, cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966021180152893,
            0.9965199828147888,
            0.9970387816429138,
            0.9973781108856201,
            0.9975013732910156,
            0.9965824484825134,
            0.9975965619087219,
            0.9959983825683594,
            0.9972042441368103,
            0.9962959289550781,
            0.9968428611755371,
            0.9974035024642944,
            0.9966195821762085,
            0.997350811958313,
            0.9971598386764526,
            0.9975088238716125,
            0.9959728121757507,
            0.9964766502380371,
            0.9967036247253418,
            0.9953097105026245
        ]
    },
    "3916": {
        "similarity": 0.9964138865470886,
        "body": "import sys\nfrom collections import defaultdict\n\nN = 5001\nprime = [0] * N\nfactors = [[] for _ in range(N)]\nfor i in range(2, N):\n    if prime[i]:\n        continue\n    for j in range(i, N, i):\n        prime[j] = i\n        factors[j].append(i)\n\nn = int(input())\nnodes = list(map(int, input().split()))\nd = defaultdict(lambda : 0)\nqueue = []\nfor k in nodes:\n    while k > 1:\n        p = prime[k]\n        d[p] += 1\n        while k % p == 0: k //= p\n    if not queue or max(queue) < k:\n        queue.append(k)\n\nwhile queue:\n    u = queue.pop()\n    for p in factors[u]:\n        v = u // p\n        d[p] += d[u]\n        if v and (not queue or max(queue) < v):\n            queue.append(v)\nprint(sum(d.values()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953952431678772,
            0.9955376386642456,
            0.995824933052063,
            0.9934867024421692,
            0.9956464171409607,
            0.9957972168922424,
            0.9938801527023315,
            0.9916258454322815,
            0.995151937007904,
            0.9941182732582092,
            0.9954189658164978,
            0.9957640767097473,
            0.9898088574409485,
            0.9958240985870361,
            0.9964138865470886,
            0.9943695068359375,
            0.9955007433891296,
            0.9955108165740967,
            0.9931228160858154,
            0.9958229064941406
        ]
    },
    "3195": {
        "similarity": 0.9971891641616821,
        "body": "from math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 998244353\nINF = float('inf')\n\n    T_g, T_y, T_r = map(int, input().split())\n    n = int(input())\n    times = []\n    colors = []\n\n    for _ in range(n):\n        t, c = input().split()\n        times.append(int(t))\n        colors.append(c)\n\n    last_t = max(times[-1] - (T_g + T_y + T_r), 0)\n    L = len(times) - 1\n    first_occurrences = [last_t]\n\n    for i in range(L):\n        t = times[i]\n        if colors[i] == 'green':\n            first_occurrences.append(t % (T_g + T_y + T_r))\n        elif colors[i] == 'yellow':\n            first_occurrences.append((t - T_g) % (T_y + T_r))\n        else:\n            first_occurrences.append((t - T_g - T_y) % (T_r))\n\n    t_q, c_q = input().split()\n    t_q = int(t_q)\n\n    if t_q < times[0] or t_q > last_t:\n        print(0)\n        return\n\n    cycle_start = t_q % (T_g + T_y + T_r)\n    if cycle_start not in first_occurrences:\n        print(0)\n        return\n\n    total_cycles = len(times) - 1\n    index = first_occurrences.index(cycle_start)\n\n    green_cyc, yellow_cyc, red_cyc = False, False, False\n    if colors[index] == 'green':\n        green_cyc = True\n    elif colors[index] == 'yellow':\n        yellow_cyc = True\n    else:\n        red_cyc = True\n\n    if t_q < times[0]:\n        return 0\n\n    green_times = []\n    yellow_times = []\n    red_times = []\n\n    for i in range(index + 1, L):\n        if colors[i] == 'green':\n            green_times.append(times[i])\n        elif colors[i] == 'yellow':\n            yellow_times.append(times[i])\n        else:\n            red_times.append(times[i])\n\n    green_cycles = len(green_times)\n    yellow_cycles = len(yellow_times)\n    red_cycles = len(red_times)\n\n    prob_green = 0\n    prob_yellow = 0\n    prob_red = 0\n\n    if green_cyc and yellow_cyc and red_cyc:\n        prob_green = green_cycles / total_cycles\n        prob_yellow = yellow_cycles / (total_cycles - green_cycles)\n        prob_red = red_cycles / (total_cycles - green_cycles - yellow_cycles)\n\n    elif green_cyc:\n        prob_green = green_cycles / total_cycles\n\n    elif yellow_cyc and red_cyc:\n        prob_yellow = yellow_cycles / (total_cycles - red_cycles)\n        prob_red = red_cycles / (total_cycles - yellow_cycles)\n\n    t_start = cycle_start\n    if c_q == 'green':\n        if t_start > T_g:\n            if green_cyc:\n                prob_green -= 1/(T_g + T_y + T_r) * green_cycles\n            elif yellow_cyc and red_cyc:\n                prob_yellow -= (1/T_y + 1/T_r)*yellow_cycles\n                prob_red -= 1/T_r*red_cycles\n\n        else:\n            if green_cyc:\n                prob_green += 1/(T_g + T_y + T_r) * green_cycles\n            elif yellow_cyc and red_cyc:\n                prob_yellow += (1/T_y + 1/T_r)*yellow_cycles\n                prob_red += 1/T_r*red_cycles\n\n    elif c_q == 'yellow':\n        if t_start > T_g + T_y:\n            if yellow_cyc and red_cyc:\n                prob_yellow -= 1/T_r * yellow_cycles\n                prob_red -= 1/T_r * red_cycles\n            elif green_cyc:\n                prob_green -= (1/T_g + 1/T_y) * green_cycles\n\n        else:\n            if yellow_cyc and red_cyc:\n                prob_yellow += 1/T_r * yellow_cycles\n                prob_red += 1/T_r * red_cycles\n            elif green_cyc:\n                prob_green += (1/T_g + 1/T_y) * green_cycles\n\n    elif c_q == 'red':\n        if t_start > T_g + T_y + T_r:\n            if red_cyc and yellow_cyc:\n                prob_red -= 1/(T_y + T_r) * red_cycles\n                prob_yellow -= (1/T_r + 1/T_y)*yellow_cycles\n            elif green_cyc:\n                prob_green -= (1/T_g + 1/T_y + 1/T_r) * green_cycles\n\n        else:\n            if red_cyc and yellow_cyc:\n                prob_red += 1/(T_y + T_r) * red_cycles\n                prob_yellow += (1/T_r + 1/T_y)*yellow_cycles\n            elif green_cyc:\n                prob_green += (1/T_g + 1/T_y + 1/T_r) * green_cycles\n\n    ans = max(0, min(prob_green, 1))\n    print(format(ans, '.10f'))\n\nif __name__ == '__main__':\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949706196784973,
            0.9971891641616821,
            0.9949033856391907,
            0.9966673851013184,
            0.9962068200111389,
            0.9958751201629639,
            0.9952617287635803,
            0.9965502023696899,
            0.9954947233200073,
            0.9957586526870728,
            0.9961355328559875,
            0.9949609637260437,
            0.9969111084938049,
            0.9965114593505859,
            0.9965429902076721,
            0.996282696723938,
            0.996742844581604,
            0.9953835010528564,
            0.9948350787162781,
            0.9962611794471741
        ]
    },
    "3998": {
        "similarity": 0.9961423277854919,
        "body": "    n = int(input())\n    ratings = list(map(int, input().split()))\n    max_rating = 100 if any(r > 0 for r in ratings) else 0\n    matches = []\n    while True:\n        changed = False\n        for size in range(2, min(n, 5)):\n            pool = [i for i in range(size, n + 1)]\n            rating_diff = max(ratings[i - 1] - ratings[pool[0] - 1] for i in range(1, size + 1))\n            if rating_diff > 0:\n                changed = True\n                matches.append(pool)\n                for j in pool:\n                    ratings[j - 1] -= rating_diff\n        max_rating = min(max(ratings), max_rating)\n        if not changed:\n            break\n    final_ratings = [max(max_rating, r) for r in ratings]\n    print(final_ratings[0])\n    print(len(matches))\n    for pool in matches:\n        group_size = len(pool)\n        result_str = ''.join('1' if i % group_size == 0 else '0' for i in range(n))\n        for j in pool:\n            result_str = result_str[:j - 1] + '0' + result_str[j:]\n        print(result_str)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936841726303101,
            0.9948279857635498,
            0.9931654930114746,
            0.9957709908485413,
            0.9947479963302612,
            0.9959365725517273,
            0.9956269860267639,
            0.9952560067176819,
            0.9950135946273804,
            0.9958052635192871,
            0.9954932332038879,
            0.9908112287521362,
            0.994789719581604,
            0.9961423277854919,
            0.9927404522895813,
            0.9950238466262817,
            0.9949319958686829,
            0.9954107403755188,
            0.9943726062774658,
            0.9943459033966064
        ]
    },
    "3150": {
        "similarity": 0.9967130422592163,
        "body": "from sys import stdin\nN = int(stdin.readline())\ntrenches = [list(map(int, stdin.readline().split())) for _ in range(N)]\nx1s, x2s = set(), set()\ny1s, y2s = set(), set()\nfor x1, y1, x2, y2 in trenches:\n    if x1 == x2: y1s.add(x1)\n    else: x1s.add((x1, y1)), x2s.add((x2, y2))\nways = 0\nseen = {}\nfor i in range(len(trenches)):\n    for j in range(i + 1, len(trenches)):\n        dx = trenches[j][0] - trenches[i][0]\n        dy = trenches[j][1] - trenches[i][1]\n        if (dx, dy) not in seen:\n            g = 0\n            x = max(min(x1s, x2s))\n            for p in [x1s, x2s]:\n                if x in p: g += 1; break\n            y = max(min(y1s, y2s))\n            for p in [y1s, y2s]:\n                if y in p: g += 1; break\n            seen[(dx, dy)] = g == 2\n        if not seen[(dx, dy)]: continue\n        ways += sum(trenches[k][0] <= trenches[i][0] < trenches[j][0] or \n                    trenches[k][0] >= trenches[i][0] > trenches[j][0]\n                   for k in range(len(trenches)))\nprint(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965906739234924,
            0.996596097946167,
            0.9964935779571533,
            0.9948889017105103,
            0.9950814843177795,
            0.9960801005363464,
            0.996474027633667,
            0.9957484006881714,
            0.994304358959198,
            0.9961391091346741,
            0.9967130422592163,
            0.9944517016410828,
            0.9957715272903442,
            0.9964571595191956,
            0.9961472749710083,
            0.9932717084884644,
            0.9962649345397949,
            0.9956952333450317,
            0.9957329630851746,
            0.9961609244346619
        ]
    },
    "3566": {
        "similarity": 0.9963880777359009,
        "body": "    total = sum(a)\n    left = [0] * n\n    for i in range(1, n):\n        left[i] = left[i - 1] + (total - a[i]) - a[i - 1]\n    min_diff = float('inf')\n    result = 0\n    for i in range(n - 1):\n        diff = abs(left[i] - (left[-1] - left[i]))\n        if diff < min_diff:\n            min_diff = diff\n            result = i + 1\n    return result\n\nn, q = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    i, x = map(int, input().split())\n    a[i] = x\n    print(get_optimal_position(n, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958764910697937,
            0.9947239756584167,
            0.9956838488578796,
            0.9955929517745972,
            0.994059145450592,
            0.9953774213790894,
            0.9917414784431458,
            0.9963880777359009,
            0.9913157224655151,
            0.995162844657898,
            0.9947786927223206,
            0.9937546253204346,
            0.9928575754165649,
            0.9963431358337402,
            0.9953665733337402,
            0.9959791898727417,
            0.9916098713874817,
            0.9941109418869019,
            0.9957809448242188,
            0.9946194887161255
        ]
    },
    "3401": {
        "similarity": 0.9974586963653564,
        "body": "from heapq import heappop, heappush\nimport sys\nsys.setrecursionlimit(10**6)\n\n    dist = [1e9] * n\n    queue = [(0, start)]\n    visited = set()\n    \n    while queue:\n        d, u = heappop(queue)\n        \n        if u in visited: continue\n        visited.add(u)\n        \n        for v, w in adj[u]:\n            if v not in visited and dist[v] > dist[u] + w:\n                dist[v] = dist[u] + w\n                heappush(queue, (dist[v], v))\n\nn, s, t, q = map(int, input().split())\nhills = [list(map(int, input().split())) for _ in range(n)]\nsprings = list(map(int, input().split()))\ntowns = list(map(int, input().split()))\n\nadj = [[] for _ in range(n+1)]\n\nfor i, (x, y, h) in enumerate(hills):\n    for j, (a, b, c) in enumerate(hills):\n        if i != j:\n            dx, dy = a - x, b - y\n            dist = abs(dx) + abs(dy)\n            adj[i].append((j, min(abs(c-h), q-dist)))\n            adj[j].append((i, min(abs(c-h), q-dist)))\n\nspring_town_dist = [[1e9] * (n+1) for _ in range(n+1)]\nfor i in range(1, n+1):\n    dijkstra(i)\n\nmin_len = 1e9\nfor i in range(t, s+t):\n    town_idx = towns[i-t-1]\n    spring_idx = springs[t-i-1]\n    \n    if spring_town_dist[spring_idx][town_idx] == 1e9: continue\n    \n    min_len = min(min_len, spring_town_dist[spring_idx][town_idx])\n\nif min_len >= 1e9:\n    print(\"IMPOSSIBLE\")\nelse:\n    print(min_len)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972767233848572,
            0.9963400959968567,
            0.9972403645515442,
            0.9963892102241516,
            0.9974048137664795,
            0.9966737627983093,
            0.9953161478042603,
            0.9967424273490906,
            0.9972254037857056,
            0.9966607689857483,
            0.9955706596374512,
            0.9973359704017639,
            0.9974586963653564,
            0.9961984753608704,
            0.9970086812973022,
            0.9945833086967468,
            0.9967229962348938,
            0.9970625042915344,
            0.996629536151886,
            0.9957100749015808
        ]
    },
    "3660": {
        "similarity": 0.9966654777526855,
        "body": "    n = len(s)\n    memo = {}\n        if i == len(m): return 0\n        key = (i, prev)\n        if key in memo: return memo[key]\n        res = float('inf')\n        for j in range(n):\n            if m[i:i+len(s[j])] == s[j]:\n                if not prev or j != prev:\n                    res = min(res, s[j][1] + dp(i+len(s[j]), j))\n        memo[key] = res\n        return res\n\n    ans = dp(0)\n    return 'IMPOSSIBLE' if ans >= float('inf') else ans\n\nm = input()\nn = int(input())\ns = [input().split() for _ in range(n)]\nprint(f(m, s))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963197112083435,
            0.9942029714584351,
            0.994118332862854,
            0.9956551790237427,
            0.9938002228736877,
            0.9960630536079407,
            0.9950433373451233,
            0.9966210126876831,
            0.9937501549720764,
            0.9945592284202576,
            0.996394693851471,
            0.9965088367462158,
            0.9952826499938965,
            0.9959679841995239,
            0.9965752363204956,
            0.9947031736373901,
            0.9922983050346375,
            0.9966654777526855,
            0.9939707517623901,
            0.9956249594688416
        ]
    },
    "3721": {
        "similarity": 0.9966164827346802,
        "body": "    present = set()\n    for _ in range(q):\n        r, c = map(int, input().split())\n        present.add((r-1, c-1))\n    \n    adj_list = [[set() for _ in range(m)] for _ in range(n)]\n    all_elements = set()\n    for r in range(1, n+1):\n        for c in range(1, m+1):\n            if (r-1, c-1) not in present:\n                all_elements.add((r-1, c-1))\n    \n    for r1 in range(n):\n        for c1 in range(m):\n            for r2 in range(r1+1, n):\n                for c2 in range(c1+1, m):\n                    if (r1, c1) in present and (r2, c1) in present and \\\n                       (r2, c2) not in present:\n                        adj_list[r1][c1].add((r2, c2))\n    \n    cover = set()\n    q = list(all_elements)\n    while q:\n        r0, c0 = q.pop(0)\n        if (r0, c0) in all_elements and len(adj_list[r0][c0]) == 4:\n            v1, v2, v3, v4 = adj_list[r0][c0]\n            cover.add((r0, c0))\n            if v1 not in present: q.append(v1)\n            if v2 not in present: q.append(v2)\n            if v3 not in present: q.append(v3)\n        else:\n            for neigh in adj_list[r0][c0]:\n                if (neigh not in present and neigh not in cover):\n                    r, c = neigh\n                    all_elements.remove(neigh)\n                    if len(adj_list[r][c]) == 4:\n                        v1, v2, v3, v4 = adj_list[r][c]\n                        cover.add((r0, c0))\n                        if v1 not in present: q.append(v1)\n                        if v2 not in present: q.append(v2)\n                        if v3 not in present: q.append(v3)\n                    else:\n                        cover.add(neigh)\n\n    return len(all_elements)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957172870635986,
            0.9953873157501221,
            0.996092677116394,
            0.9965643882751465,
            0.9933076500892639,
            0.9952467083930969,
            0.9945793151855469,
            0.9961697459220886,
            0.996367335319519,
            0.9965914487838745,
            0.9950525164604187,
            0.9950273633003235,
            0.9947449564933777,
            0.9955328106880188,
            0.9966164827346802,
            0.996240496635437,
            0.9964113831520081,
            0.9952119588851929,
            0.9959324598312378,
            0.9964190125465393
        ]
    },
    "3811": {
        "similarity": 0.9971611499786377,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a\n\nn = int(input())\npairs = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    pairs.append((x, y))\n\nans = -1\nfor i in range(2, 10**9 + 3):\n    valid = all(i % max(pair[0], pair[1]) == 0 for pair in pairs)\n    if valid:\n        ans = max(ans, i)\n\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957369565963745,
            0.9946573972702026,
            0.9947766661643982,
            0.9953567981719971,
            0.9970996379852295,
            0.9967674612998962,
            0.9924947023391724,
            0.9951468110084534,
            0.9935103058815002,
            0.9965822100639343,
            0.995841383934021,
            0.9959254860877991,
            0.9959678649902344,
            0.9965510964393616,
            0.9961483478546143,
            0.9966858625411987,
            0.9969543814659119,
            0.9971611499786377,
            0.9966073632240295,
            0.9955592751502991
        ]
    },
    "3528": {
        "similarity": 0.9941514730453491,
        "body": "    n = int(input())\n    nails = [tuple(map(int, input().split())) for _ in range(n)]\n    order = list(input())\n\n    areas = []\n    curr_area = 0\n    stack = [(nails[0][0], nails[0][1])]\n\n    for next_nail_idx in range(2, n):\n        nail = nails[next_nail_idx]\n        if (order[next_nail_idx - 2] == 'L' and nail[0] < min(x for x, y in stack)) or \\\n           (order[next_nail_idx - 2] == 'R' and nail[0] > max(x for x, y in stack)) or \\\n           (order[next_nail_idx - 2] == 'U' and nail[1] > max(y for x, y in stack)) or \\\n           (order[next_nail_idx - 2] == 'D' and nail[1] < min(y for x, y in stack)):\n            while len(stack) >= 2:\n                prev_x, prev_y = stack.pop()\n                curr_area -= prev_x * nails[next_nail_idx][1] - prev_y * nails[next_nail_idx][0]\n                curr_area += abs((prev_x - nails[next_nail_idx][0]) * (prev_y - nail[1]))\n            stack.append(nails[next_nail_idx])\n        areas.append(curr_area)\n\n    return '\\n'.join(f'{area:.1f}' for area in areas[:-1])\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9928209185600281,
            0.9933672547340393,
            0.9941514730453491,
            0.9932610392570496,
            0.9930452108383179,
            0.9918872714042664,
            0.9927011728286743,
            0.9907758831977844,
            0.9904899597167969,
            0.9923132061958313,
            0.992244303226471,
            0.9927641153335571,
            0.9930283427238464,
            0.9925384521484375,
            0.9923267364501953,
            0.9695286154747009,
            0.9933935403823853,
            0.9928902387619019,
            0.9899934530258179,
            0.9934676289558411
        ]
    },
    "3890": {
        "similarity": 0.9953771829605103,
        "body": "    res = 1\n    while b > 0:\n        if b % 2 == 1: res = (res * a) % mod\n        b //= 2\n        a = (a * a) % mod\n    return res\n\nn, k = map(int, input().split())\nif n <= k:\n    print(modpow(k-1, n*k - n + 1))\nelse:\n    ans = 0\n    for i in range(1, k):\n        ans += (modpow(i, n) * modpow(k-i, n)) % mod\n    print((ans * pow(k-1, n*n-1)) % mod)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942945241928101,
            0.994120180606842,
            0.9938892722129822,
            0.9877467751502991,
            0.9953771829605103,
            0.9932865500450134,
            0.9853568077087402,
            0.9949180483818054,
            0.9945170879364014,
            0.9919873476028442,
            0.9854102730751038,
            0.9907248616218567,
            0.9946197867393494,
            0.992760419845581,
            0.9932062029838562,
            0.9922624826431274,
            0.9945281147956848,
            0.9922789335250854,
            0.9941478371620178,
            0.9934669137001038
        ]
    },
    "3534": {
        "similarity": 0.9956267476081848,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    ans, k = 1, 0\n    for inc in range(1, 2 * 10**9):\n        cnt = 1\n        prev = a[0]\n        for i in range(1, n):\n            if a[i] == prev:\n                cnt += 1\n                continue\n            diff = abs(a[i] - prev)\n            step = min(diff, inc) if a[i] > prev else max(-diff, -inc)\n            prev += step\n            if prev == a[i]:\n                cnt += 1\n        ans, k = max(ans, cnt), inc if ans == cnt else k\n    print(ans)\n    print(k)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956267476081848,
            0.994663417339325,
            0.9946414828300476,
            0.992611825466156,
            0.9947248697280884,
            0.9956091642379761,
            0.9931979775428772,
            0.9948435425758362,
            0.9942104816436768,
            0.993423342704773,
            0.9946654438972473,
            0.9945194721221924,
            0.9931154847145081,
            0.9945176839828491,
            0.9945257902145386,
            0.9876022338867188,
            0.9913500547409058,
            0.9920975565910339,
            0.9926823973655701,
            0.9922326803207397
        ]
    },
    "3371": {
        "similarity": 0.9961616396903992,
        "body": "    pairs = {}\n    for a, b, y in edges:\n        if (a, b) not in pairs:\n            pairs[(a, b)] = y\n    return pairs\n\nn, c = map(int, input().split())\nedges = [list(map(int, input().split())) for _ in range(c)]\npairs = get_pairs(n, edges)\n\nyear_to_count = {}\nfor a, b, y in edges:\n    year_to_count[y] = year_to_count.get(y, 0) + 1\nif not year_to_count:\n    print('Impossible')\nelse:\n    min_year = min(year_to_count.keys())\n    max_year = max(year_to_count.keys())\n\n    for year in range(min_year, max_year + 1):\n        part1 = set()\n        part2 = set()\n\n        for a, b, y in edges:\n            if y < year:\n                part1.add((a - 1) * (b - 1))\n            else:\n                part2.add((a - 1) * (b - 1))\n\n        if len(part1) <= n // 3 and len(part2) <= n // 3:\n            print(year)\n            break\n    else:\n        print('Impossible')",
        "result": "failed: testcase 0",
        "similarities": [
            0.995597243309021,
            0.9961010813713074,
            0.9961616396903992,
            0.9959003329277039,
            0.9960376620292664,
            0.9946807026863098,
            0.9960809350013733,
            0.9943601489067078,
            0.9954320192337036,
            0.9957690834999084,
            0.9952384829521179,
            0.9960289001464844,
            0.9953787922859192,
            0.9960523843765259,
            0.9829736351966858,
            0.9958396553993225,
            0.9959036111831665,
            0.9950494170188904,
            0.9937304258346558,
            0.9941384196281433
        ]
    },
    "3621": {
        "similarity": 0.997199296951294,
        "body": "    if not y: return 1\n    res = modpow(x*x%mod,y>>1)\n    if y&1: res *= x\n    return res%mod\n\n    n = int(input())\n    a = [list(map(int,input().split())) for _ in range(n)]\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(300, -1, -1):\n        b = []\n        cnt = [[0]*301 for _ in range(n+1)]\n        maxs = [0]*(n+1)\n        for j in range(n):\n            for k in range(j+1,n):\n                if a[j][k] == i:\n                    if not maxs[j]:\n                        maxs[j], maxs[k] = 1, 1\n                    else: cnt[maxs[j]][i]+=1\n\n        res = 0\n        for j in range(2**n):\n            tmp = 1\n            for k in range(n):\n                if (j>>k)&1:\n                    tmp *= maxs[k+1]\n            for k in range(i+1):\n                res += modpow(tmp,cnt[j][k])\n        ans += res\n    print(ans%mod)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969525933265686,
            0.9968193769454956,
            0.9924055337905884,
            0.9969614744186401,
            0.9961292743682861,
            0.9968145489692688,
            0.9956703186035156,
            0.9962064623832703,
            0.9954685568809509,
            0.995371401309967,
            0.9957350492477417,
            0.9955248832702637,
            0.9957508444786072,
            0.9969721436500549,
            0.9963736534118652,
            0.9966546893119812,
            0.9949210286140442,
            0.997199296951294,
            0.9920953512191772,
            0.9968850016593933
        ]
    },
    "3392": {
        "similarity": 0.9958704710006714,
        "body": "    parent = [[i for i in range(N*N)] for _ in range(N*N)]\n    rank = [1]*N*N\n        if parent[i] != i:\n            parent[i] = find(parent[i])\n        return parent[i]\n        pi = find(i)\n        pj = find(j)\n        if pi == pj: return False\n        if rank[pi] < rank[pj]: parent[pi] = pj\n        elif rank[pi] > rank[pj]: parent[pj] = pi\n        else:\n            parent[pj] = pi\n            rank[pi] += 1\n        return True\n\n        return abs(h[i]-h[j])/v[j]+abs(j%N-i%N)/v[j]+abs(j//N-i//N)/v[j]\n\n    vis = [False]*N*N\n    for i in range(N):\n        for j in range(N):\n            if not vis[i*N+j]:\n                vis[i*N+j] = True\n                q = [[i*N+j]]\n                while q:\n                    cur = q.pop()\n                    for x, y in [(1,0),(-1,0),(0,1),(0,-1)]:\n                        nx, ny = cur//N+x, cur%N+y\n                        if 0 <= nx < N and 0 <= ny < N and dist(cur, nx*N+ny) == int(dist(cur, nx*N+ny)) and not vis[nx*N+ny]:\n                            vis[nx*N+ny] = True\n                            q.append(nx*N+ny)\n                count = [1]\n                for k in range(N*N):\n                    if find(k) == cur:\n                        union(cur, k)\n                        count[0] += 1\n                print(max(count))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953343272209167,
            0.9951704144477844,
            0.9955223798751831,
            0.9958704710006714,
            0.9943922162055969,
            0.9957776665687561,
            0.9956053495407104,
            0.9936226606369019,
            0.9952854514122009,
            0.9952496886253357,
            0.995574951171875,
            0.9944683909416199,
            0.9926537871360779,
            0.9926104545593262,
            0.993691086769104,
            0.9948878884315491,
            0.9924479126930237,
            0.9951927065849304,
            0.9922689199447632,
            0.9946678876876831
        ]
    },
    "3095": {
        "similarity": 0.9964565634727478,
        "body": "    if len(matrix) < r or len(matrix[0]) < s:\n        return False\n    return matrix[0][0] + matrix[r-1][s-1] <= matrix[0][s-1] + matrix[r-1][0]\n\n    R, S = len(matrix), len(matrix[0])\n    for r in range(2, R+1):\n        for s in range(2, S+1):\n            if not is_cool(matrix, r, s):\n                return False\n    return True\n\n    ans = 0\n    R, S = len(matrix), len(matrix[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    for i in range(R):\n        for j in range(S):\n            if is_extremely_cool(matrix[i:][j:]):\n                ans = max(ans, R-i+S-j)\n    return ans\n\nR, S = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(R)]\nprint(max_elements(matrix))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949377179145813,
            0.9948708415031433,
            0.9964357614517212,
            0.9957448840141296,
            0.9962041974067688,
            0.9954213500022888,
            0.9905821084976196,
            0.9946673512458801,
            0.9944717288017273,
            0.9959608316421509,
            0.9953948855400085,
            0.9951898455619812,
            0.9950019717216492,
            0.9953362345695496,
            0.9953476786613464,
            0.9964565634727478,
            0.9945971965789795,
            0.9956476092338562,
            0.9961886405944824,
            0.9928377866744995
        ]
    },
    "3769": {
        "similarity": 0.9950559735298157,
        "body": "    while b: a, b = b, a % b\n    return a\n\np, k = map(int, input().split())\nmod = 10 ** 9 + 7\nif gcd(p, k) == p:\n    print(1)\nelse:\n    ans = pow(k, p - 1, mod) * pow(gcd(p, k), (p - 1) // gcd(p, k), mod) % mod\n    for g in range(1, p):\n        if g != 0 and (g * k) % p == 1:\n            ans = (ans + pow(k, g, mod)) % mod\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9788288474082947,
            0.9938385486602783,
            0.9935996532440186,
            0.9922347664833069,
            0.9950559735298157,
            0.9945809245109558,
            0.9927580952644348,
            0.9886260032653809,
            0.9941089153289795,
            0.9900703430175781,
            0.9943439960479736,
            0.9945917725563049,
            0.9927191734313965,
            0.9939987063407898,
            0.9933775067329407,
            0.993245005607605,
            0.9942229390144348,
            0.9923726320266724,
            0.9932365417480469,
            0.9937725067138672
        ]
    },
    "3563": {
        "similarity": 0.997471272945404,
        "body": "    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0\n    elif val > 0:\n        return 1\n    else:\n        return 2\n\n    n = len(points)\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) == 2:\n                q = i\n        p = q\n        if p == l:\n            break\n    return len(hull)\n\nn = int(input().split()[0])\nholes = list(map(int, input().split()))[1:]\nnum_holes = (n * 2)\ncoords = [(i % num_holes, i // num_holes) for i in range(num_holes)]\nprint(convex_hull(coords))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973072409629822,
            0.996751606464386,
            0.9971696138381958,
            0.9960357546806335,
            0.9964771270751953,
            0.9961244463920593,
            0.9964423179626465,
            0.997471272945404,
            0.9961950182914734,
            0.9970619082450867,
            0.9967188835144043,
            0.9970018267631531,
            0.9954647421836853,
            0.9971429705619812,
            0.9876421689987183,
            0.9961664080619812,
            0.9972590208053589,
            0.993979811668396,
            0.997086763381958,
            0.996277391910553
        ]
    },
    "3618": {
        "similarity": 0.9952302575111389,
        "body": "    MOD = 998244353\n    res = 1\n    while exp > 0:\n        if exp % 2 == 1: res = (res * base) % MOD\n        base = (base * base) % MOD\n        exp //= 2\n    return res\n\nn = int(input())\ndp = [0] * (10 ** n)\nfor i in range(9, 10 ** n):\n    for j in range(10):\n        if j != 1 or i // 10 == 9: dp[i + j] += 1\nprint((modpow(2, n) - dp[10 ** n]) % 998244353)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942012429237366,
            0.9949921369552612,
            0.9929207563400269,
            0.9924201965332031,
            0.9943200349807739,
            0.9898114800453186,
            0.992529034614563,
            0.9944173693656921,
            0.991023600101471,
            0.9947026968002319,
            0.9872905611991882,
            0.9900683164596558,
            0.9948130249977112,
            0.9943498373031616,
            0.9952302575111389,
            0.9913378357887268,
            0.9925298094749451,
            0.9876267313957214,
            0.9940834045410156,
            0.9937213063240051
        ]
    },
    "3830": {
        "similarity": 0.9927493929862976,
        "body": "    n = int(input())\n    s = input()\n    count = 0\n    bad = False\n    for i in range(n):\n        if s[i] == '>':\n            bad |= not count\n        elif s[i] == '<':\n            bad |= count\n        else:\n            count ^= 1\n    print(count + (not bad) * n)\n\nfor _ in range(int(input())):\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9854664206504822,
            0.9857711791992188,
            0.9808682799339294,
            0.9916995167732239,
            0.990871012210846,
            0.9922227263450623,
            0.9898656606674194,
            0.9916905760765076,
            0.9897993803024292,
            0.9907026886940002,
            0.9927493929862976,
            0.9918273091316223,
            0.9898756146430969,
            0.9915998578071594,
            0.9919126629829407,
            0.9921959638595581,
            0.9878686666488647,
            0.9796344637870789,
            0.9791821837425232,
            0.9864208698272705
        ]
    },
    "3912": {
        "similarity": 0.9969896078109741,
        "body": "from collections import Counter\n\nn = int(input())\ns = input()\ncounts = Counter(s)\neven = n % 2 == 0\nmin_len = even * len(counts) if counts.most_common(1)[0][1] % 2 == 0 else (len(counts) + 1) // 2 * 2\n\nans = []\ncur_idx = 0\nwhile cur_idx < n:\n    max_reach = cur_idx + min_len - 1\n    if max_reach >= n:\n        ans.append(s[cur_idx:])\n        break\n    else:\n        next_char = s[cur_idx]\n        for i in range(min_len - 1, 0, -2):\n            if not (cur_idx + i <= max_reach) or s[cur_idx + i] != next_char:\n                continue\n            cur_idx += i\n\n        ans.append(s[cur_idx:max_reach+1][::-1])\n        cur_idx = max_reach + 1\n\nprint(len(ans))\nprint(' '.join(ans))",
        "result": "timed out",
        "similarities": [
            0.9959461688995361,
            0.9967474937438965,
            0.9966848492622375,
            0.9964718222618103,
            0.9953863024711609,
            0.9958616495132446,
            0.9964302778244019,
            0.9964209198951721,
            0.9963250756263733,
            0.9947709441184998,
            0.9938303232192993,
            0.9965236186981201,
            0.996968150138855,
            0.9959636330604553,
            0.9958192706108093,
            0.9969896078109741,
            0.9956861138343811,
            0.995834231376648,
            0.9960771799087524,
            0.9943405985832214
        ]
    },
    "3878": {
        "similarity": 0.9971018433570862,
        "body": "    edges = set((u - 1, v - 1) for u, v in u_v)\n    visited = [0] * n\n    steps = []\n    for i in range(22):\n        max_degree = 0\n        max_node = None\n        for j in range(n):\n            if visited[j]:\n                continue\n            degree = sum(1 for k in range(n) if (j, k) in edges or (k, j) in edges)\n            if degree > max_degree:\n                max_degree = degree\n                max_node = j\n        steps.append(max_node + 1)\n        visited[max_node] = 1\n        for x, y in ((x, y) if x < y else (y, x) for x, y in edges if not visited[x]):\n            if x == max_node or y == max_node:\n                edges.remove((x, y))\n                edges.add((x, y))\n    print(len(steps))\n    print(*steps)\n\nn, m = map(int, input().split())\nu_v = [tuple(map(int, input().split())) for _ in range(m)]\nf(n, m, u_v)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996820330619812,
            0.99651038646698,
            0.9966744184494019,
            0.9951774477958679,
            0.9959738850593567,
            0.9964895844459534,
            0.9961329102516174,
            0.996669590473175,
            0.9962167143821716,
            0.9964758157730103,
            0.9971018433570862,
            0.9960127472877502,
            0.9955999255180359,
            0.9963547587394714,
            0.9962372183799744,
            0.9954829812049866,
            0.9967619180679321,
            0.9968839883804321,
            0.9969199299812317,
            0.9934872388839722
        ]
    },
    "3010": {
        "similarity": 0.9955679178237915,
        "body": "from collections import defaultdict\nimport sys\n\nn = int(input())\npoints = set()\nintersections = defaultdict(int)\n\nfor _ in range(n):\n    x0, y0, x1, y1 = map(int, input().split())\n    slope1 = (x1 - x0) * 1.0 / (y1 - y0) if y0 != y1 else float('inf')\n    for i in range(_ + 1, n):\n        xi, yi, xi1, yi1 = map(int, input().split())\n        slope2 = (xi1 - xi) * 1.0 / (yi1 - yi) if yi != yi1 else float('inf')\n\n        denominator = slope1 - slope2\n        if denominator == 0:\n            continue\n\n        intersection_x = (slope2 * x0 - slope1 * xi + y0 - yi) / denominator\n        intersection_y = slope1 * (intersection_x - x0) + y0\n\n        points.add((int(intersection_x), int(intersection_y)))\n        intersections[(int(intersection_x), int(intersection_y))] += 1\n\nans = len(points)\nif ans != n:\n    for point, count in intersections.items():\n        if count > 1:\n            ans -= 1\nprint(ans) if ans != n else print(-1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922276735305786,
            0.9942640066146851,
            0.9944660663604736,
            0.9932665824890137,
            0.9929459095001221,
            0.9942456483840942,
            0.9951663017272949,
            0.9946991801261902,
            0.9955679178237915,
            0.99258953332901,
            0.9950429201126099,
            0.9937795400619507,
            0.9953956604003906,
            0.9947148561477661,
            0.993719220161438,
            0.9942517876625061,
            0.9944002032279968,
            0.9930521249771118,
            0.9946674704551697,
            0.987998366355896
        ]
    },
    "3068": {
        "similarity": 0.9950596690177917,
        "body": "    from itertools import combinations\n    N = int(input())\n    if not N: return print(2600)\n    suspects = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    for _ in range(N):\n        a, b, p, r = input().split()\n        suspect_pairs = [(a, b), (b, a)]\n        suspects.discard(a)\n        suspects.discard(b)\n        for s1, s2 in suspect_pairs:\n            if s1 not in suspects or s2 not in suspects: continue\n            s = {s1, s2}\n            suspects -= s\n            x = set(p * ' ') - s\n            y = set(suspects) & s\n            if r == 0 and (x | y): suspects |= x; suspects -= y\n            elif r == 2: suspects &= x\n    ans = len(list(combinations(sorted(suspects), 3)))\n    print(ans)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9764291644096375,
            0.9945605397224426,
            0.9919505715370178,
            0.9942719340324402,
            0.9942106008529663,
            0.9945474863052368,
            0.9934666156768799,
            0.9920383095741272,
            0.9931882619857788,
            0.9938530325889587,
            0.9945428967475891,
            0.9944391846656799,
            0.9935939311981201,
            0.9920347332954407,
            0.9939045310020447,
            0.9929516315460205,
            0.993100106716156,
            0.9943674802780151,
            0.9950596690177917,
            0.9913563132286072
        ]
    },
    "3030": {
        "similarity": 0.9964778423309326,
        "body": "import sys\n\nn = int(input())\ntree = [[] for _ in range(n)]\nfor i in range(n):\n    v, p = map(int, input().split())\n    tree[p].append(i)\n\n    if node >= n:\n        return 0\n    ans = 0\n    for child in tree[node]:\n        if child != parent and v[child] < v[node]:\n            ans += dfs(child, node)\n    return max(ans + 1, dfs(node + 1, -1))\n\nans = dfs(0)\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9881697297096252,
            0.9959970116615295,
            0.9951878786087036,
            0.9948872923851013,
            0.9947421550750732,
            0.9942777752876282,
            0.9953650236129761,
            0.9927970767021179,
            0.9964778423309326,
            0.9947298765182495,
            0.9918195605278015,
            0.9961644411087036,
            0.9956793785095215,
            0.9921440482139587,
            0.9956247210502625,
            0.9933443665504456,
            0.9956722259521484,
            0.9938898682594299,
            0.993894100189209,
            0.9946887493133545
        ]
    },
    "3630": {
        "similarity": 0.992946207523346,
        "body": "s1, s2 = input().split()\nn = len(s1)\nm = 0\n\n    global m\n    if i >= n:\n        return m\n    if s1[i] == s2[i]:\n        return get_cost(i + 1)\n    c1 = 26 - (ord(s1[i]) - ord('a'))\n    c2 = ord(s2[i]) - ord('a')\n    if i > 0 and s2[i-1] != 'z' and s1[i-1] == s2[i-1]:\n        m += min(c1, c2)\n        return get_cost(i + 1)\n    if i < n and s1[i+1] != 'a' and s2[i+1] == s2[i]+1:\n        m += abs(c1-c2)\n        return get_cost(i + 2)\n    return min(min(c1, c2) + get_cost(i + 1), get_cost(i + 1) + abs(c1-c2))\n\nprint(get_cost(0))",
        "result": "failed: testcase 0",
        "similarities": [
            0.992946207523346,
            0.9903293251991272,
            0.9902289509773254,
            0.9923036694526672,
            0.9910774230957031,
            0.9874342679977417,
            0.9899224042892456,
            0.991295576095581,
            0.9922055602073669,
            0.9898314476013184,
            0.9898853302001953,
            0.9921126961708069,
            0.9887524843215942,
            0.9913661479949951,
            0.9918811321258545,
            0.9913491010665894,
            0.9889920949935913,
            0.9903542399406433,
            0.9890990257263184,
            0.9907805919647217
        ]
    },
    "3133": {
        "similarity": 0.9968273639678955,
        "body": "n, a, b = map(int, input().split())\nedges = []\ntower_a, tower_b = None, None\nfor i in range(n):\n    l, r, t = map(int, input().split())\n    edges.append((l, r))\n    if t:\n        if i == a: tower_a = True\n        if i == b: tower_b = True\n\nif (tower_a and not tower_b) or (not tower_a and tower_b):\n    print(0)\nelif tower_a != tower_b:\n    print('indistinguishable')\nelse:\n    visited = set()\n    queue = [(a, 0)]\n    while queue:\n        u, turns = queue.pop(0)\n        if u in visited: continue\n        visited.add(u)\n        if edges[u][0] == b or edges[u][1] == b:\n            print(turns)\n            break\n        queue.extend([(edges[u][0], turns + 1), (edges[u][1], turns + 1)])\n    else:\n        print('indistinguishable')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959375262260437,
            0.9918906688690186,
            0.9966493248939514,
            0.9968273639678955,
            0.9960255026817322,
            0.9953372478485107,
            0.9964552521705627,
            0.996222734451294,
            0.9946005940437317,
            0.9967211484909058,
            0.9962812066078186,
            0.994881808757782,
            0.9959090352058411,
            0.9967308044433594,
            0.9956902861595154,
            0.9957374930381775,
            0.9962846636772156,
            0.9948344826698303,
            0.9966906309127808,
            0.996097981929779
        ]
    },
    "3480": {
        "similarity": 0.9975226521492004,
        "body": "    L, D = map(int, input().split())\n    first_voice_lines = []\n    second_voice_times = []\n    for _ in range(L):\n        line = list(input().replace(' ', '_'))\n        times = list(map(int, input().split()))\n        first_voice_lines.append(line)\n        second_voice_times.append(times)\n    max_time = 0\n    current_line_index = [0] * L\n    active_second_voice = [[] for _ in range(L)]\n    result = []\n    for i, line in enumerate(first_voice_lines):\n        current_max_time = 0\n        for j, (syl, t) in enumerate(zip(line, second_voice_times[i])):\n            k = D + j - current_line_index[i]\n            if k >= 1 and k <= max(t, max_time):\n                active_second_voice[i].append((k, syl))\n                current_max_time = max(current_max_time, k)\n        result.append(' '.join(line) + '=')\n        max_time = max(max_time, sum(second_voice_times[i]))\n        result.append(' ' * (current_max_time - D // 2) + '_'.join(s for _, s in active_second_voice[i]) + '=')\n    if current_line_index[0] < len(first_voice_lines[0]):\n        print(' ' * (D // 2) + '/=')\n    for line in result:\n        print(line)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965914487838745,
            0.9974393248558044,
            0.9957508444786072,
            0.9971467852592468,
            0.9959807991981506,
            0.9973935484886169,
            0.9964430928230286,
            0.9974530935287476,
            0.996210515499115,
            0.9969290494918823,
            0.9975226521492004,
            0.9971472024917603,
            0.9963220357894897,
            0.9958399534225464,
            0.9968833923339844,
            0.9973775148391724,
            0.997417151927948,
            0.9972871541976929,
            0.9949684143066406,
            0.9950608015060425
        ]
    },
    "3389": {
        "similarity": 0.9948409199714661,
        "body": "    counts = {}\n    for t in types: counts[t] = 1 + counts.get(t, 0)\n    groups = len(counts) * [0]\n    i, m = 0, 0\n    while i < n:\n        if i == 0 or types[i - 1] != types[i]:\n            for j in range(m, len(groups)):\n                groups[j] += 1 + counts[types[i]]\n                i += 1\n            m = max(m, len(groups))\n        else: i += 1\n    return m - 1\n\nn, k = map(int, input().split())\nprint(f(n, input()))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937499165534973,
            0.9925350546836853,
            0.9947052001953125,
            0.9948199391365051,
            0.9912568926811218,
            0.9850437641143799,
            0.9935526847839355,
            0.9925567507743835,
            0.9943287372589111,
            0.9943570494651794,
            0.9935958385467529,
            0.9940844178199768,
            0.9945060610771179,
            0.9943699240684509,
            0.9944873452186584,
            0.9934554696083069,
            0.9851903319358826,
            0.9948409199714661,
            0.9926521182060242,
            0.9936805367469788
        ]
    },
    "3925": {
        "similarity": 0.9950563311576843,
        "body": "    n = len(s)\n    a, b = 0, 0\n    for i in range(n):\n        if s[i] == 'b':\n            a += 1\n        else:\n            b += 1\n        a = max(a, b)\n    c = [0]\n    for i in range(1, n - 1):\n        if s[i - 1] != s[i + 1]:\n            c.append(c[-1] + 2)\n        elif (s[i - 1] == 'b' and s[i + 1] == 'w') or (s[i - 1] == 'w' and s[i + 1] == 'b'):\n            if i > 0 and i < n - 2:\n                c.append(c[-1] + 1)\n        else:\n            c.append(0)\n    return max(a, b, max(c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927878379821777,
            0.99344402551651,
            0.9872431755065918,
            0.9946422576904297,
            0.9866708517074585,
            0.989571213722229,
            0.9931976199150085,
            0.9926091432571411,
            0.9948438405990601,
            0.9947252869606018,
            0.9894611835479736,
            0.9908086061477661,
            0.9950563311576843,
            0.9927824139595032,
            0.9939485788345337,
            0.9939890503883362,
            0.9927383065223694,
            0.9944215416908264,
            0.9938080310821533,
            0.9887277483940125
        ]
    },
    "3700": {
        "similarity": 0.9934423565864563,
        "body": "    n, k = map(int, input().split())\n    if 2 <= n <= k <= 2 * n - 2:\n        c = int((k * (k + 1) // 2 - n * (n - 1) // 2) / n)\n        return str(c if c >= 1 else 0)\n    return \"0\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9878846406936646,
            0.9912284016609192,
            0.9805914163589478,
            0.9900631308555603,
            0.9901033639907837,
            0.9897693991661072,
            0.9921274781227112,
            0.9916924834251404,
            0.9931203126907349,
            0.9822838306427002,
            0.989479660987854,
            0.9933292865753174,
            0.9922686219215393,
            0.9913106560707092,
            0.9929801821708679,
            0.9934423565864563,
            0.9909248352050781,
            0.990730881690979,
            0.9914600253105164,
            0.9872235059738159
        ]
    },
    "3944": {
        "similarity": 0.9958845376968384,
        "body": "    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = (res * a) % M\n        a = (a * a) % M\n        b //= 2\n    return res\n\nM = 10**9 + 7\nN, M, K = map(int, input().split())\nans = 0\nfor i in range(1, N+1):\n    for j in range(1, M+1):\n        for l in range(1, K+1):\n            x = 3 * (l + modpow(27, i-1, M) * (j + modpow(27, N-i, M)))\n            ans += x\nprint(ans % M)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951130747795105,
            0.9923394918441772,
            0.9914263486862183,
            0.9917515516281128,
            0.9933332204818726,
            0.9952070116996765,
            0.9954078197479248,
            0.9958845376968384,
            0.9937340617179871,
            0.9924696087837219,
            0.9933564066886902,
            0.9931198954582214,
            0.9920686483383179,
            0.9921504855155945,
            0.9920667409896851,
            0.9954493641853333,
            0.9952399730682373,
            0.9925682544708252,
            0.9948658347129822,
            0.9932542443275452
        ]
    },
    "3821": {
        "similarity": 0.9933009743690491,
        "body": "    n = int(input())\n    friends = sorted(map(float, input().split()))\n    max_prob = 0\n    for i in range(1, n):\n        prob = sum(friends[:i]) * (1 - sum(friends[i:]))\n        if prob > max_prob:\n            max_prob = prob\n    return format(max_prob, \".9f\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907261729240417,
            0.9920646548271179,
            0.9885725975036621,
            0.9917006492614746,
            0.9933009743690491,
            0.9888418316841125,
            0.9909355640411377,
            0.9918638467788696,
            0.9922397136688232,
            0.9915699362754822,
            0.9916968941688538,
            0.9918195605278015,
            0.9835255146026611,
            0.9926364421844482,
            0.9920106530189514,
            0.9904507994651794,
            0.9851236939430237,
            0.9861763715744019,
            0.9913186430931091,
            0.9870983958244324
        ]
    },
    "3667": {
        "similarity": 0.9968896508216858,
        "body": "    graph = [[] for _ in range(w + p)]\n    for s, x, y in pipes:\n        graph[s-1].append((x, y))\n    return graph\n\n    if i not in visited:\n        visited.add(i)\n        for neighbor in graph[i]:\n            if neighbor[0] in visited and neighbor != robots[i]:\n                return False\n            elif neighbor[0] not in visited:\n                robots[i] = neighbor\n                if not dfs(graph, neighbor[0], visited, robots):\n                    return False\n    return True\n\n    w, p = map(int, input().split())\n    wells = []\n    pipes = []\n    for _ in range(w):\n        x, y = map(int, input().split())\n        wells.append((x, y))\n    for _ in range(p):\n        s, x, y = map(int, input().split())\n        wells[s-1][0] += 1\n        wells[s-1][1] += 1\n        pipes.append([s-1, x, y])\n    graph = get_graph(w, p)\n    robots = [None]*w\n    for i in range(w):\n        if dfs(graph, i, set(), robots):\n            continue\n        else:\n            print(\"impossible\")\n            return\n    visited = set()\n    for i in range(w):\n        if wells[i] not in visited:\n            if not dfs(graph, i, visited, robots):\n                print(\"impossible\")\n                return\n    print(\"possible\")\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964131712913513,
            0.994421124458313,
            0.9965020418167114,
            0.9960525035858154,
            0.9968896508216858,
            0.9959328174591064,
            0.9960528016090393,
            0.9948136210441589,
            0.9946776032447815,
            0.9955193400382996,
            0.98848956823349,
            0.995776355266571,
            0.9966141581535339,
            0.9962998628616333,
            0.9955739378929138,
            0.9955930113792419,
            0.9964802265167236,
            0.9965943098068237,
            0.9964026212692261,
            0.9939325451850891
        ]
    },
    "3959": {
        "similarity": 0.996992826461792,
        "body": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\n    n, m = map(int, input().split())\n    d = [defaultdict(int) for _ in range(n)]\n    cnt = [0] * (m + 1)\n    for i in range(n):\n        g = int(input().split()[0])\n        a = list(map(int, input().split()))\n        for j in range(g):\n            x = a[j]\n            d[i][x] += 1\n            cnt[x] += 1\n\n    M = pow(10, 9) + 7\n    fac = [1] * (m + 1)\n    invf = [1] * (m + 1)\n    for i in range(2, m + 1):\n        fac[i] = (fac[i - 1] * i) % M\n        invf[i] = pow(fac[i], M - 2, M)\n\n        return ((fac[a] * invf[b]) % M * invf[a - b]) % M\n\n    same = [0] * (m + 1)\n    for i in range(1, m + 1):\n        same[i] = cnt[i]\n        for j in range(n):\n            same[i] -= d[j][i]\n\n    ans = 1\n    rem = sum(same[1:])\n    for x in same[1:]:\n        if x:\n            ans *= c(x, rem)\n            ans %= M\n            rem -= x\n\n    print(ans)\n\nmain()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926159381866455,
            0.996985912322998,
            0.9968869090080261,
            0.996992826461792,
            0.9956415295600891,
            0.9960243105888367,
            0.996429443359375,
            0.9965819120407104,
            0.9959214925765991,
            0.9933881163597107,
            0.9967526793479919,
            0.9962397217750549,
            0.9921033978462219,
            0.9938820600509644,
            0.9945045113563538,
            0.9964246153831482,
            0.9961715340614319,
            0.9958736896514893,
            0.9966201782226562,
            0.9968441724777222
        ]
    },
    "3692": {
        "similarity": 0.9961094260215759,
        "body": "    return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n\n    dx = abs(c1[0] - c2[0])\n    dy = abs(c1[1] - c2[1])\n    return dist(c1, c2) <= (c1[2] + c2[2]) / 2 and dx < (c1[2] + c2[2])\n\n    for i in range(len(regions)):\n        if regions[i][0] == x and regions[i][1] == y:\n            return i\n    return -1\n\nn = int(input())\nregions = []\nfor _ in range(n):\n    x, y, r = map(int, input().split())\n    regions.append([x, y, r])\n\n    for region in regions:\n        if dist(region[:2], [x, y]) <= region[2]:\n            return True\n    return False\n\nregions.sort(key=lambda x: x[2], reverse=True)\n\nans = 1\nfor i in range(len(regions)):\n    for j in range(i + 1, len(regions)):\n        if overlap(regions[i], regions[j]):\n            ans += 1\n\nx, y = regions[-1][0], regions[-1][1]\nif not is_inside(x + 1, y):\n    ans += 1\nprint(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959893822669983,
            0.9947788119316101,
            0.9947307109832764,
            0.9957024455070496,
            0.9936314821243286,
            0.9906015992164612,
            0.9955024719238281,
            0.9950075745582581,
            0.9926470518112183,
            0.9951333403587341,
            0.9955356121063232,
            0.9922910928726196,
            0.9938313364982605,
            0.9950143098831177,
            0.9953657388687134,
            0.9921700358390808,
            0.9946475625038147,
            0.9942211508750916,
            0.9961094260215759,
            0.9952779412269592
        ]
    },
    "3894": {
        "similarity": 0.9956251382827759,
        "body": "    b = set()\n    for i in range(n):\n        while a[i] > 1:\n            if a[i] % 2 == 0:\n                b.add(a[i])\n                a[i] //= 2\n            else:\n                break\n    s = sum(1 for x in a if x > 1)\n    t = sum(x - 1 for x in a if x > 1) + len(b)\n    return \"Nicky\" if (s + k * len(b)) % 2 == 0 and t % 2 else \"Kevin\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(f(n, k, a))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9939182996749878,
            0.990333080291748,
            0.9925788044929504,
            0.9876335859298706,
            0.9948312640190125,
            0.9931524395942688,
            0.9928209185600281,
            0.9897330403327942,
            0.9947119355201721,
            0.9924325346946716,
            0.9941402077674866,
            0.9934465289115906,
            0.9945012927055359,
            0.9950742125511169,
            0.9950556755065918,
            0.9930936694145203,
            0.9953203797340393,
            0.9956251382827759,
            0.9951792359352112,
            0.9955659508705139
        ]
    },
    "3856": {
        "similarity": 0.9965543150901794,
        "body": "    friends = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        friends.append((w * h, w, h))\n    friends.sort(key=lambda x: (x[0], -x[1]))\n    area = 0\n    on_ground = n // 2\n    for i in range(on_ground):\n        width, height = friends[i][1:]\n        area += width * height\n    for i in range(n - on_ground):\n        width, height = friends[n - on_ground + i][1:]\n        max_height = max(area + width * height, area)\n        area = max_height\n    return area",
        "result": "failed: testcase 0",
        "similarities": [
            0.9916050434112549,
            0.9942834973335266,
            0.9957157969474792,
            0.9956653118133545,
            0.9955945611000061,
            0.9965543150901794,
            0.9946101307868958,
            0.9949767589569092,
            0.996029794216156,
            0.9946573376655579,
            0.9945650696754456,
            0.9945321679115295,
            0.9954081177711487,
            0.9932594299316406,
            0.9961764812469482,
            0.9947888255119324,
            0.9962746500968933,
            0.9948499798774719,
            0.9949088096618652,
            0.9938286542892456
        ]
    },
    "3282": {
        "similarity": 0.996318519115448,
        "body": "    P = int(input())\n    count = 0\n    bills = set()\n    for b in range(1, P + 1):\n        for m in range(b + 1, P + 1):\n            if len(set(str(b)) | set(str(m))) == len(str(b)) + len(str(m)):\n                continue\n            total = b + m\n            if total <= P and str(total) not in (str(b) + str(m), str(m) + str(b)):\n                bill = tuple(sorted((b, m)))\n                if bill not in bills:\n                    bills.add(bill)\n                    count += 1\n    print(count)\n    for b, m in sorted(list(bills))[:5000]:\n        print(b, m)\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950103759765625,
            0.9946724772453308,
            0.9941153526306152,
            0.9922335743904114,
            0.9961823225021362,
            0.9954237937927246,
            0.996318519115448,
            0.9949802756309509,
            0.9925230145454407,
            0.9956682920455933,
            0.9938490986824036,
            0.9923180341720581,
            0.9941239953041077,
            0.9923776388168335,
            0.9938464760780334,
            0.9951170682907104,
            0.9955083131790161,
            0.9951918721199036,
            0.9958903789520264,
            0.9939519166946411
        ]
    },
    "3596": {
        "similarity": 0.9972295165061951,
        "body": "from math import gamma, erf, exp, log, sin, cos, pi, factorial\nimport sys\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\n\nn, k, r, s, l = map(int, input().split())\n\n    return (c / (gamma(t1 + 1) * pi ** ((t2 - 1) / t2))) * (\n        gamma(t1 + 1) * x**t1 +\n        (log(erf(t3*x)) ** (1/t2)) +\n        (-gamma(k + 1)*x**k)**(1/t4)\n    )\n\n    p = [0]*(r+1)\n    for i in range(r+1):\n        if i == 0:\n            p[i] = f(0)\n        else:\n            p[i] = (f(i) - sum([p[j]/factorial(i-j)*i**j for j in range(i)]))/factorial(i)\n\n    return [sum(p[:i+1]*x**i for i in range(r+1))]\n\n    pn = P(x, r)\n    pn2 = [0]*(r+n+1)\n    for i in range(n+r+1):\n        if i < len(pn):\n            pn2[i] = pn[i]\n        else:\n            pn2[i] = 0\n    return sum([pn2[i]*x**i for i in range(n+r+1)])\n\n    p = Pn(x, r, n)\n    return [sum([p[i]*(r+i)*x**(i-1) for i in range(1,r+n+1)])]\n\nprint(((g(l+1, r, s)(s+1)+l)**2/pi + 1/(l+1))\n      ,end='', file=sys.stderr)\n\nans = ((g(l+1, r, s)(s+1)+l)**2/pi + 1/(l+1))\nprint('%.5f' % ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996837317943573,
            0.9972018003463745,
            0.9970166087150574,
            0.9972295165061951,
            0.9942578673362732,
            0.9964998960494995,
            0.9969026446342468,
            0.996677577495575,
            0.9968924522399902,
            0.9966054558753967,
            0.9970297813415527,
            0.9956343770027161,
            0.996628999710083,
            0.9958227276802063,
            0.9960642457008362,
            0.9961491823196411,
            0.9965609312057495,
            0.9967866539955139,
            0.9971480965614319,
            0.9910448789596558
        ]
    },
    "3540": {
        "similarity": 0.9932979941368103,
        "body": "    return [list(input()) for _ in range(4)]\n\ns = get_input()\nstart = \"RGBY\"\ncurr = ''.join([''.join([c for c in r if c != start[i] ]) for i, r in enumerate(s)])\n\n    moves = 0\n    for x in c:\n        while 'R' in x or 'B' in x:\n            x = x.replace('R', '', 1), x.replace('B', '', 1)\n            moves += 1\n        if len(x) > 2: return float('inf')\n    return moves\n\n    curr = s\n    cost_ = { ''.join([c for c in r if c != 'RGBY'[i] ]) : i for i, r in enumerate(curr) }\n    if cost_('') < 4: return 0\n    res = float('inf')\n    for i in range(4):\n        for j in range(i + 1, 4):\n            res = min(res, cost_(curr[i]) + cost_(curr[j]) + (abs(j - i) * 2))\n            if curr[i] > curr[j]: curr[i], curr[j] = curr[j], curr[i]\n    return res\n\nprint(solve())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9894651174545288,
            0.9896734952926636,
            0.9925815463066101,
            0.9927175641059875,
            0.9905772805213928,
            0.9867355823516846,
            0.9886389374732971,
            0.9696334004402161,
            0.9921170473098755,
            0.9924755096435547,
            0.9905859231948853,
            0.9917203187942505,
            0.9915687441825867,
            0.992302656173706,
            0.9907674193382263,
            0.9932485818862915,
            0.9932979941368103,
            0.9898388385772705,
            0.9924545288085938,
            0.9925230145454407
        ]
    },
    "3354": {
        "similarity": 0.9955436587333679,
        "body": "import math\n\ns, r = map(float, input().split())\nn, z = map(int, input().split())\n\nmax_area = s ** 2 * (z / 100)\narea_per_pickle = math.pi * r ** 2\n\nnum_pickles = min(n, math.floor(math.sqrt(max_area / area_per_pickle)))\nprint(num_pickles)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995353102684021,
            0.9950513243675232,
            0.9951010346412659,
            0.9796102643013,
            0.9942939281463623,
            0.9949776530265808,
            0.9937193989753723,
            0.9932196736335754,
            0.9939928650856018,
            0.9955436587333679,
            0.9930756092071533,
            0.9929553866386414,
            0.9954749941825867,
            0.9950577616691589,
            0.9943894147872925,
            0.9954615235328674,
            0.994256854057312,
            0.9953998923301697,
            0.9948030114173889,
            0.9954203367233276
        ]
    },
    "3217": {
        "similarity": 0.9931413531303406,
        "body": "    n = int(input())\n    cells = []\n    for _ in range(n):\n        x, y, z = map(int, input().split())\n        cells.append((x, y, z))\n    min_x, max_x, min_y, max_y, min_z, max_z = float('inf'), float('-inf'), float('inf'), float('-inf'), float('inf'), float('-inf')\n    for x, y, z in cells:\n        min_x, max_x = min(min_x, x), max(max_x, x)\n        min_y, max_y = min(min_y, y), max(max_y, y)\n        min_z, max_z = min(min_z, z), max(max_z, z)\n    return 2 * (max_x - min_x + 1) + 2 * (max_y - min_y + 1) + 2 * (max_z - min_z + 1) - n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9884549379348755,
            0.9926745891571045,
            0.9832578301429749,
            0.9889018535614014,
            0.9931413531303406,
            0.9890428185462952,
            0.992053210735321,
            0.9885739684104919,
            0.9905145764350891,
            0.9925914406776428,
            0.9898552298545837,
            0.9907486438751221,
            0.9876888990402222,
            0.9919597506523132,
            0.9874923229217529,
            0.9899036884307861,
            0.9925265908241272,
            0.9906243085861206,
            0.9886235594749451,
            0.9868228435516357
        ]
    },
    "3520": {
        "similarity": 0.9954748749732971,
        "body": "    n, p, c = map(int, input().split())\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n    pills.sort()\n\n    dp = [[-float('inf')] * (n + 1) for _ in range(p)]\n\n        return a if a > b else b\n\n    t = 0\n    for i in range(len(pills)):\n        t2, x, y = pills[i]\n        for j in range(t - c, n):\n            dp[i][j + 1] = max(dp[i][j + 1], max_val(dp[i-1][max(j-y, t)], (j + 1) * y / x + min(max_val((t2 - t) * y/x, j), max_val(dp[i-1][max(j-c-y, t)], j + c)) * x))\n        for j in range(n):\n            dp[i][j] = max(dp[i][j], dp[i-1][j])\n\n    print(max(dp[-1]))\n\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937189221382141,
            0.9914541840553284,
            0.9949484467506409,
            0.9924094676971436,
            0.9924467206001282,
            0.9918997883796692,
            0.9922826886177063,
            0.9952800273895264,
            0.9942672252655029,
            0.9952139854431152,
            0.9909342527389526,
            0.9939193725585938,
            0.9954748749732971,
            0.9951145648956299,
            0.9952051043510437,
            0.9938185811042786,
            0.993759274482727,
            0.9928677082061768,
            0.9943524599075317,
            0.9925571084022522
        ]
    },
    "3475": {
        "similarity": 0.9972949624061584,
        "body": "    t, n = map(int, input().split())\n    dmin = [0] * t\n    a = [0] * t\n    for i in range(t):\n        dmin[i], a[i] = map(int, input().split())\n    distances = []\n    headings = []\n    for i in range(n - 1):\n        di, hi = map(float, input().split())\n        distances.append(di)\n        headings.append(hi)\n\n    dp = [[float('inf')] * t for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(t):\n            if dp[i - 1][j] == float('inf'):\n                continue\n            for k in range(t):\n                distance = distances[i - 2]\n                heading = headings[i - 2]\n                if k != j and abs(heading) <= a[k] / 1000:\n                    total_distance = dp[i - 1][j] + distance\n                    if total_distance >= dmin[k]:\n                        dp[i][k] = min(dp[i][k], dp[i - 1][j] + 1)\n\n    for i in range(t):\n        if dp[n][i] != float('inf'):\n            return str(i)\n    return 'IMPOSSIBLE'\n\nprint(transportation_switching_scheme())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965817332267761,
            0.996673583984375,
            0.9969691038131714,
            0.9957351684570312,
            0.9950442910194397,
            0.9970978498458862,
            0.9965530037879944,
            0.996488094329834,
            0.9967171549797058,
            0.9972949624061584,
            0.9961444735527039,
            0.9963556528091431,
            0.9967280030250549,
            0.9950472116470337,
            0.9941574931144714,
            0.9961449503898621,
            0.9966134428977966,
            0.9970689415931702,
            0.9968254566192627,
            0.9966614246368408
        ]
    },
    "3977": {
        "similarity": 0.9943211078643799,
        "body": "    n, m, k = map(int, input().split())\n    gov = set(map(int, input().split()))\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    adj = [[] for _ in range(n + 1)]\n\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    res = 0\n    for i in gov:\n        for j in gov:\n            if i != j and (i, j) not in edges and (j, i) not in edges:\n                res += 1\n\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936544299125671,
            0.9930385947227478,
            0.984272837638855,
            0.9941846132278442,
            0.9938682913780212,
            0.9918152689933777,
            0.9918068647384644,
            0.9897441864013672,
            0.9927560687065125,
            0.9936451315879822,
            0.9900053143501282,
            0.9764085412025452,
            0.9907459616661072,
            0.9923965930938721,
            0.9938783049583435,
            0.9943211078643799,
            0.9934577941894531,
            0.9926294088363647,
            0.9914685487747192,
            0.9932419657707214
        ]
    },
    "3626": {
        "similarity": 0.9946686625480652,
        "body": "    n = len(rects)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            x1, y1, x2, y2 = rects[i]\n            a1, b1, a2, b2 = rects[j]\n            if max(x1, a1) < min(x2, a2) and max(y1, b1) < min(y2, b2):\n                return 1\n    return 0\n\nn = int(input())\nrects = []\nfor _ in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    rects.append((x1, y1, x2, y2))\n\nprint(rect_intersect(rects))",
        "result": "failed: testcase 0",
        "similarities": [
            0.994006335735321,
            0.9943012595176697,
            0.9930669069290161,
            0.9946686625480652,
            0.9864817261695862,
            0.9920789003372192,
            0.9901279807090759,
            0.9927381277084351,
            0.9939765930175781,
            0.9945128560066223,
            0.9943992495536804,
            0.9920761585235596,
            0.9925390481948853,
            0.9929389953613281,
            0.9943445920944214,
            0.9911231994628906,
            0.9855574369430542,
            0.9923597574234009,
            0.9945540428161621,
            0.9866357445716858
        ]
    },
    "3584": {
        "similarity": 0.9972512125968933,
        "body": "    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\n    n = len(points)\n    if n < 3:\n        raise ValueError(\"Convex hull not possible with less than 3 points\")\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    q = 0\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) > 0:\n                q = i\n\n        p = q\n        if p == l:\n            break\n\n    return hull\n\nN, M, K = map(int, input().split())\nonions = [tuple(map(int, input().split())) for _ in range(N)]\nposts = [tuple(map(int, input().split())) for _ in range(M)]\n\nhull = convex_hull(posts)\n\nmax_protected = 0\nfor i in range(len(hull)):\n    protected = 0\n    for onion in onions:\n        left = (hull[i][1] - onion[1]) * (onion[0] - hull[(i+1)%len(hull)][0])\n        right = (hull[i][0] - onion[0]) * (onion[1] - hull[(i+1)%len(hull)][1])\n        if left < 0 or right > 0:\n            continue\n        protected += 1\n    max_protected = max(max_protected, protected + min(K, len(onions)))\n\nprint(max_protected)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967448711395264,
            0.997100830078125,
            0.9956328868865967,
            0.9958403706550598,
            0.9963911771774292,
            0.9971223473548889,
            0.9960227012634277,
            0.9945766925811768,
            0.995930552482605,
            0.9964598417282104,
            0.9965434074401855,
            0.9967548847198486,
            0.9963117837905884,
            0.9961949586868286,
            0.996408998966217,
            0.9972512125968933,
            0.9941388368606567,
            0.9970012307167053,
            0.9970588684082031,
            0.9953755736351013
        ]
    },
    "3950": {
        "similarity": 0.9974087476730347,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    pos = [[] for _ in range(q+1)]\n    cover = [0] * (n + 1)\n    cnt = [0] * (q + 1)\n    for i, v in enumerate(a):\n        if not v:\n            continue\n        cover[i] = 1\n        pos[v].append(i)\n        cnt[v] += 1\n\n    seg = []\n    for i in range(1, q+1):\n        if not cnt[i]:\n            continue\n        cur = len(pos[i]) - 1\n        l = max(0, i-cnt[i]+1)\n        while l <= cur and not cover[pos[i][l]]:\n            l += 1\n        r = min(len(pos[i]), cur)\n        while r >= l and not cover[pos[i][r]]:\n            r -= 1\n        if l > cur or r < l:\n            return \"NO\"\n        seg.append((pos[i][l], pos[i][r]))\n    for i in range(1, n+1):\n        for q in seg:\n            if i >= q[0] and i <= q[1]:\n                cover[i] = 1\n                break\n        else:\n            return \"NO\"\n    ans = [0] * (n + 1)\n    for s in seg:\n        for i in range(s[0], s[1]+1):\n            if not ans[i]:\n                ans[i] = len(seg) + 1\n                cover[i] = 1\n        cnt[s[0]] -= 1\n        while cnt[s[0]]:\n            cur = s[1]\n            while True:\n                pos[s[0]][cur] = -1\n                if not cover[pos[s[0]][cur]]:\n                    break\n                cur -= 1\n            cnt[s[0]] -= 1\n    for i, v in enumerate(a):\n        if ans[i]:\n            continue\n        for s in seg:\n            if i >= s[0] and i <= s[1]:\n                ans[i] = len(seg) + 1\n                break\n        else:\n            return \"NO\"\n    print(\"YES\")\n    print(*ans[1:])\n\nif __name__ == \"__main__\":\n    solve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910678863525391,
            0.996478259563446,
            0.9956398010253906,
            0.9934515953063965,
            0.9969533681869507,
            0.9971608519554138,
            0.9958668947219849,
            0.9971138834953308,
            0.9932481050491333,
            0.997344970703125,
            0.9970363974571228,
            0.9969207644462585,
            0.9971693158149719,
            0.996856689453125,
            0.9974087476730347,
            0.9972126483917236,
            0.9951207041740417,
            0.9959341287612915,
            0.9973549246788025,
            0.9968879222869873
        ]
    },
    "3075": {
        "similarity": 0.9961563944816589,
        "body": "import heapq\nn, g = map(int, input().split())\nstations = []\nfor i in range(n):\n    d, c = map(int, input().split())\n    stations.append([d, c])\n\ninf = float('inf')\ndp = [0] * n\nlast_fill = 0\n\nfor i in range(1, n):\n    if dp[i-1] == inf:\n        continue\n    dist_to_refuel = max(0, stations[i][0] - last_fill)\n    amount_of_gas_needed = (stations[i][0] - last_fill) // g\n    heapq.heappush(stations[i-1:i+1], [-c * amount_of_gas_needed for c in range(dist_to_refuel, dist_to_refuel + min(g, stations[i][0] - last_fill))])\n\n    if i < n - 1:\n        dp[i] = inf\n    else:\n        dp[i] = sum(-h for h in heapq.nsmallest(min(n, g), stations[max(last_fill, 0):i+1)))\n\n    last_fill = max(stations[i][0], last_fill)\n\nif dp[-1] != inf and dp[-1] <= stations[n-1][0]:\n    print(dp[-1])\nelse:\n    print('cancel road trip')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922225475311279,
            0.9955209493637085,
            0.9958077669143677,
            0.9933214783668518,
            0.9961479902267456,
            0.9961563944816589,
            0.9947565793991089,
            0.9933441877365112,
            0.9953488707542419,
            0.99602210521698,
            0.9939926862716675,
            0.9957634806632996,
            0.9934354424476624,
            0.9947298765182495,
            0.9957000613212585,
            0.9915540814399719,
            0.991706132888794,
            0.9938894510269165,
            0.9942731261253357,
            0.9926924705505371
        ]
    },
    "3711": {
        "similarity": 0.9971763491630554,
        "body": "n, m, k = map(int, input().split())\nif min(n, m) < k or max(n, m) == 1:\n    print(-1)\nelse:\n    if k % 2 == 0:\n        print(min(1, (k // 2 - 1) * n * m + n * m))\n    else:\n        print((k // 2) * min(n, m) ** 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993220865726471,
            0.9971147179603577,
            0.9964181780815125,
            0.9971592426300049,
            0.9966919422149658,
            0.9967978596687317,
            0.9969339966773987,
            0.9962490797042847,
            0.9931771159172058,
            0.992667555809021,
            0.9961352348327637,
            0.9971763491630554,
            0.9947314858436584,
            0.9957666993141174,
            0.9954396486282349,
            0.9940747618675232,
            0.9964386820793152,
            0.9942476153373718,
            0.9944654703140259,
            0.9971098899841309
        ]
    }
}