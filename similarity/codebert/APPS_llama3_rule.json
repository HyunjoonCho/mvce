{
    "4693": {
        "similarity": 0.9966065287590027,
        "body": "    a = int(input())\n    b = int(input())\n    total = a + b\n    if total <= 10:\n        print(total)\n    else:\n        print('error')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961905479431152,
            0.9962246417999268,
            0.9926528930664062,
            0.9959405660629272,
            0.9961826801300049,
            0.994263231754303,
            0.9962246417999268,
            0.9944114685058594,
            0.9944667816162109,
            0.9962244629859924,
            0.9965285062789917,
            0.9965622425079346,
            0.9965285062789917,
            0.9943450093269348,
            0.9962244629859924,
            0.9919629693031311,
            0.9966065287590027,
            0.9962244629859924,
            0.9699052572250366,
            0.9942498803138733
        ]
    },
    "4077": {
        "similarity": 0.997988760471344,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for l in range(n):\n        for r in range(l+1, n+1):\n            temp = sorted(a[l:r+1])\n            if temp[len(temp)//2] == m:\n                count += 1\n    print(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967259764671326,
            0.9895356893539429,
            0.9976290464401245,
            0.9975528717041016,
            0.9969472289085388,
            0.9948254823684692,
            0.9952620267868042,
            0.997825026512146,
            0.9973961710929871,
            0.9978706240653992,
            0.997988760471344,
            0.9965054392814636,
            0.9978204369544983,
            0.9979004263877869,
            0.9977197051048279,
            0.9955505728721619,
            0.9907312989234924,
            0.9975488781929016,
            0.9978671073913574,
            0.9977443218231201
        ]
    },
    "4006": {
        "similarity": 0.9966098666191101,
        "body": "    reachable = set()\n    for _ in range(n + 1):\n        temp = str(n)\n        while '0' in temp:\n            temp = temp.replace('0', '', 1)\n        reachable.add(int(temp) if temp else 1)\n        n = int(temp) if temp else 1\n    return len(reachable)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959231019020081,
            0.996085524559021,
            0.9940778017044067,
            0.9956673383712769,
            0.9927619099617004,
            0.9946336150169373,
            0.9957840442657471,
            0.9933399558067322,
            0.9930415153503418,
            0.9951232075691223,
            0.9957742094993591,
            0.9962366819381714,
            0.9964700937271118,
            0.9954159259796143,
            0.9954836964607239,
            0.99529629945755,
            0.9966098666191101,
            0.9954516887664795,
            0.9946104288101196,
            0.9933632612228394
        ]
    },
    "4556": {
        "similarity": 0.9938424825668335,
        "body": "    s = input().split()[2]\n    x = s[0].upper()\n    return \"A\" + x + \"C\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938047528266907,
            0.9929869771003723,
            0.9928943514823914,
            0.9901671409606934,
            0.993500292301178,
            0.9924237132072449,
            0.9936748147010803,
            0.9929317831993103,
            0.9936748147010803,
            0.9885404706001282,
            0.9906935691833496,
            0.9936748147010803,
            0.9938424825668335,
            0.9936748147010803,
            0.9894170165061951,
            0.988289475440979,
            0.9936748147010803,
            0.9928082823753357,
            0.9892570972442627,
            0.9879873394966125
        ]
    },
    "4571": {
        "similarity": 0.9953383207321167,
        "body": "    n, m = map(int, input().split())\n    total_time = 0\n    for i in range(1, m + 1):\n        total_time += i * 1900 / (2 ** i)\n    print(int(total_time))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953383207321167,
            0.9917464852333069,
            0.9829999208450317,
            0.9935120940208435,
            0.9944295287132263,
            0.9899327158927917,
            0.9938713908195496,
            0.9930667877197266,
            0.9932546019554138,
            0.9951061606407166,
            0.9928438067436218,
            0.994026780128479,
            0.9952216148376465,
            0.9876222014427185,
            0.994124174118042,
            0.9940285086631775,
            0.9876824617385864,
            0.9945480227470398,
            0.9944014549255371,
            0.9947170615196228
        ]
    },
    "4019": {
        "similarity": 0.9975327253341675,
        "body": "    n, m, D = map(int, input().split())\n    parent = {}\n    for i in range(1, n+1):\n        parent[i] = i\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        if parent[u] > parent[v]:\n            u, v = v, u\n        edges.append((u, v))\n    used_edges = set()\n    tree_edges = []\n    while len(tree_edges) < n - 1:\n        for edge in edges:\n            if edge[0] == 1 and edge[1] not in used_edges and parent[edge[0]] != parent[edge[1]]:\n                tree_edges.append(edge)\n                used_edges.add(edge[0])\n                used_edges.add(edge[1])\n                break\n    print(\"YES\" if len(tree_edges) == n - 1 else \"NO\")\n    for edge in tree_edges:\n        print(*edge)",
        "result": "timed out",
        "similarities": [
            0.9947134256362915,
            0.9953968524932861,
            0.9965199828147888,
            0.9967911243438721,
            0.9972152709960938,
            0.9968187212944031,
            0.9944376945495605,
            0.9971187114715576,
            0.9973686933517456,
            0.9953224658966064,
            0.9973745942115784,
            0.9967420697212219,
            0.9961903095245361,
            0.9954530000686646,
            0.9961804747581482,
            0.9967356324195862,
            0.9966364502906799,
            0.997369647026062,
            0.9975327253341675,
            0.9968120455741882
        ]
    },
    "4265": {
        "similarity": 0.9993425011634827,
        "body": "    S = input().strip()\n    T = input().strip()\n    operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n    print(operations)",
        "result": "passed",
        "similarities": [
            0.9993425011634827,
            0.9993425011634827,
            0.9985128045082092,
            0.9993425011634827,
            0.9993425011634827,
            0.9990806579589844,
            0.9993425011634827,
            0.9992216229438782,
            0.998823344707489,
            0.998823344707489,
            0.9993425011634827,
            0.9988052845001221,
            0.9990035891532898,
            0.9992216229438782,
            0.9993425011634827,
            0.9992216229438782,
            0.9959637522697449,
            0.998823344707489,
            0.9985128045082092,
            0.9987528920173645
        ]
    },
    "4657": {
        "similarity": 0.9946554899215698,
        "body": "    s = sum(a)\n    if s % 2 == 0:\n        return \"NO\"\n    \n    odd_sum = False\n    for i in range(k-1, -1, -1):\n        total = sum(a[:i+1])\n        if total % 2 != 0:\n            odd_sum = True\n            break\n    \n    if not odd_sum:\n        return \"NO\"\n    \n    return \"YES\" + \"\\n\" + str(list(range(1, n+1)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9938636422157288,
            0.9946554899215698,
            0.9886418581008911,
            0.98430997133255,
            0.9943309426307678,
            0.9945295453071594,
            0.9907870888710022,
            0.9944002032279968,
            0.9935364127159119,
            0.989780604839325,
            0.9896590709686279,
            0.9928164482116699,
            0.993792712688446,
            0.9935715198516846,
            0.9879212975502014,
            0.9916629791259766,
            0.9932729005813599,
            0.9943194389343262,
            0.9945672750473022,
            0.9909581542015076
        ]
    },
    "4599": {
        "similarity": 0.9956153035163879,
        "body": "    n = int(input())\n    cards = list(map(int, input().split()))\n    alice_score = 0\n    bob_score = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_score += cards[i]\n        else:\n            bob_score += cards[i]\n    print(alice_score - bob_score)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9926791787147522,
            0.9946495890617371,
            0.9946829080581665,
            0.9946682453155518,
            0.991959810256958,
            0.9941579699516296,
            0.9956153035163879,
            0.993967592716217,
            0.9956153035163879,
            0.9937570691108704,
            0.9912659525871277,
            0.9935223460197449,
            0.9946164488792419,
            0.979386568069458,
            0.9936791658401489,
            0.9896081686019897,
            0.9948914051055908,
            0.9948471784591675,
            0.9947242736816406,
            0.9950250387191772
        ]
    },
    "4774": {
        "similarity": 0.9962112903594971,
        "body": "    a, b, c, d = map(int, input().split())\n    for op1 in ['+', '-', '*', '/']:\n        for op2 in ['+', '-', '*', '/']:\n            if op1 == '/' and c % d != 0:\n                continue\n            result = eval(f'{a} {op1} {b} {op2} {c} {d}')\n            if a + b - c - d == result:\n                print(f'{a} {op1} {b} = {c} {op2} {d}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943815469741821,
            0.994498610496521,
            0.9943287372589111,
            0.9942289590835571,
            0.991752028465271,
            0.9940534830093384,
            0.9957761168479919,
            0.9949167966842651,
            0.9862152934074402,
            0.9954077005386353,
            0.9939340353012085,
            0.9945289492607117,
            0.9962112903594971,
            0.9952892661094666,
            0.9953981041908264,
            0.9949489235877991,
            0.9953614473342896,
            0.9944990277290344,
            0.9948180317878723,
            0.9958011507987976
        ]
    },
    "4851": {
        "similarity": 0.9962579607963562,
        "body": "import math\n\n    n = int(input())\n    i = n + 1\n    while True:\n        digit_sum = sum(int(digit) for digit in str(i))\n        if i % digit_sum == 0:\n            break\n        i += 1\n    print(i)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959337115287781,
            0.9945935010910034,
            0.9863791465759277,
            0.9958256483078003,
            0.9943879842758179,
            0.9935766458511353,
            0.9946680665016174,
            0.9957665205001831,
            0.9950988292694092,
            0.994910717010498,
            0.9962005615234375,
            0.9957366585731506,
            0.9951764941215515,
            0.9946783185005188,
            0.9938707947731018,
            0.9893495440483093,
            0.9962579607963562,
            0.9959337115287781,
            0.9937487244606018,
            0.995245099067688
        ]
    },
    "4655": {
        "similarity": 0.9955894351005554,
        "body": "    q = int(input())\n    for _ in range(q):\n        a, b, c = map(int, input().split())\n        ab = min(a, b)\n        ac = min(a, c)\n        bc = min(b, c)\n        print(min(ab + bc, ac) // 2 * 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953035116195679,
            0.9946646690368652,
            0.9955894351005554,
            0.9937725067138672,
            0.9943755269050598,
            0.9914200305938721,
            0.9946985840797424,
            0.9932937622070312,
            0.991229236125946,
            0.9917365908622742,
            0.9925292134284973,
            0.9947100281715393,
            0.9904494881629944,
            0.9950354695320129,
            0.9950875043869019,
            0.9949314594268799,
            0.9857015013694763,
            0.9952392578125,
            0.9926902651786804,
            0.9946139454841614
        ]
    },
    "4132": {
        "similarity": 0.9943586587905884,
        "body": "import sys\n    n = int(input())\n    healths = list(map(int, input().split()))\n    for _ in range(n-1):\n        max_health = 0\n        target = None\n        for i in range(len(healths)):\n            if healths[i] > max_health:\n                max_health = healths[i]\n                target = i\n        healths[target] -= max_health\n    print(min(healths))",
        "result": "timed out",
        "similarities": [
            0.9923930764198303,
            0.9891530275344849,
            0.9932679533958435,
            0.9922505617141724,
            0.994006335735321,
            0.9825317859649658,
            0.9932885766029358,
            0.989884614944458,
            0.9938282370567322,
            0.9943586587905884,
            0.9938743114471436,
            0.985775887966156,
            0.988910973072052,
            0.9904924035072327,
            0.9901460409164429,
            0.9928488731384277,
            0.9899502992630005,
            0.9923004508018494,
            0.9923669099807739,
            0.9940515160560608
        ]
    },
    "4085": {
        "similarity": 0.9974042773246765,
        "body": "import sys\n\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        min_x = -1\n        for x in range(2, 10**6 + 1):\n            if all(x // d in divisors for d in divisors) and (x not in divisors or x == min(divisors)):\n                if min_x == -1:\n                    min_x = x\n                elif x < min_x:\n                    min_x = x\n        print(min_x)",
        "result": "timed out",
        "similarities": [
            0.9952390789985657,
            0.9957966208457947,
            0.9958477020263672,
            0.9963720440864563,
            0.9968191385269165,
            0.9959059357643127,
            0.9966641664505005,
            0.9972076416015625,
            0.9952613711357117,
            0.9966923594474792,
            0.9968107342720032,
            0.9955410361289978,
            0.9959483742713928,
            0.9958475828170776,
            0.9968160390853882,
            0.9971253275871277,
            0.996525228023529,
            0.9974042773246765,
            0.995597243309021,
            0.9959833025932312
        ]
    },
    "4399": {
        "similarity": 0.9927225708961487,
        "body": "has_a_b = input()\nconnected = False\nfor i in range(3):\n    if has_a_b[i] == 'A':\n        for j in range(i+1, 3):\n            if has_a_b[j] == 'B':\n                connected = True\n                break\nif connected:\n    print('Yes')\nelse:\n    print('No')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9909704327583313,
            0.9921426177024841,
            0.9802951812744141,
            0.9886910319328308,
            0.992179274559021,
            0.9897710084915161,
            0.9917759299278259,
            0.9900779724121094,
            0.9914305806159973,
            0.9906539916992188,
            0.9767187833786011,
            0.9774828553199768,
            0.9786387085914612,
            0.9905475974082947,
            0.9922870993614197,
            0.9896992444992065,
            0.9904802441596985,
            0.989599347114563,
            0.9927225708961487,
            0.9917162656784058
        ]
    },
    "4999": {
        "similarity": 0.9964496493339539,
        "body": "import math\n\n    diff = abs(b - a)\n    operations = 0\n\n    for i in range(diff + 1):\n        if a <= b:\n            break\n        a += 1\n        operations += 1\n        while a % 2 == 0:\n            a //= 2\n            operations += 1\n\n    return operations",
        "result": "failed: testcase 0",
        "similarities": [
            0.995164155960083,
            0.9949873089790344,
            0.9942675232887268,
            0.9927629232406616,
            0.9905961751937866,
            0.9964496493339539,
            0.9959100484848022,
            0.995216965675354,
            0.9949816465377808,
            0.995966374874115,
            0.9953244924545288,
            0.9959691762924194,
            0.9947544932365417,
            0.9927643537521362,
            0.9963264465332031,
            0.9925338625907898,
            0.9961692690849304,
            0.9911607503890991,
            0.9946480989456177,
            0.9885151386260986
        ]
    },
    "4727": {
        "similarity": 0.996931791305542,
        "body": "import sys\n\n    grid = [[int(cell) for cell in line.split()] for line in [sys.stdin.readline()[:-1] for _ in range(4)]]\n    new_grid = [[0 for _ in range(4)] for _ in range(4)]\n    \n    if direction == 0:  # left\n        for j in range(4):\n            i, val = next(((i, val) for i, val in enumerate(grid[j]) if val > 0), (None, None))\n            while i < 4 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i][j]\n                i += 1\n        for j in range(4):\n            for i in range(3, -1, -1):\n                if grid[i][j] == 0:\n                    i -= 1\n            while i > 0 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i-1][j]\n                i -= 1\n    \n    elif direction == 1:  # up\n        for j in range(4):\n            for i in range(3, -1, -1):\n                if grid[i][j] > 0:\n                    new_grid[i][j] = grid[i][j]\n                    while i > 0 and grid[i-1][j] == 0:\n                        i -= 1\n        for j in range(4):\n            for i in range(3, -1, -1):\n                if grid[i][j] == 0:\n                    i -= 1\n            while i > 0 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i-1][j]\n                i -= 1\n    \n    elif direction == 2:  # right\n        for j in range(3, -1, -1):\n            i, val = next(((i, val) for i, val in enumerate(grid[j]) if val > 0), (None, None))\n            while j < 4 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i][j]\n                j += 1\n        for j in range(3, -1, -1):\n            for i in range(4):\n                if grid[i][j] == 0:\n                    j -= 1\n            while j > 0 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i][j-1]\n                j -= 1\n    \n    elif direction == 3:  # down\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if grid[i][j] > 0:\n                    new_grid[i][j] = grid[i][j]\n                    while j > 0 and grid[i][j-1] == 0:\n                        j -= 1\n        for i in range(4):\n            for j in range(3, -1, -1):\n                if grid[i][j] == 0:\n                    j -= 1\n            while j > 0 and grid[i][j] > 0:\n                new_grid[i][j] = grid[i][j-1]\n                j -= 1\n    \n    for i in range(4):\n        for j in range(4):\n            if grid[i][j] == grid[i+1][j]:\n                grid[i][j] += grid[i+1][j]\n                grid[i+1][j] = 0\n            elif grid[i][j] > 0 and sum(grid[i]) < 2048:\n                new_grid[i][j] = grid[i][j]\n    \n    for i in range(4):\n        for j in range(4):\n            if new_grid[i][j] > 0:\n                print(f\"{new_grid[i][j]:d} \", end='')\n            else:\n                print(\"0 \", end='')\n        print()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954428672790527,
            0.9963342547416687,
            0.9928526878356934,
            0.9944437742233276,
            0.9968292117118835,
            0.9966199994087219,
            0.9961056113243103,
            0.9965677857398987,
            0.994096577167511,
            0.9959405660629272,
            0.9963748455047607,
            0.9959664940834045,
            0.9960058331489563,
            0.9946569204330444,
            0.9959643483161926,
            0.9964244365692139,
            0.996931791305542,
            0.9966771006584167,
            0.9931850433349609,
            0.9960458874702454
        ]
    },
    "4906": {
        "similarity": 0.9977082014083862,
        "body": "    mode = input().strip()[0]\n    \n    if mode == 'E':\n        message = input().strip()\n        encoded_message = ''\n        i = 0\n        while i < len(message):\n            count = 1\n            while i + 1 < len(message) and message[i] == message[i+1]:\n                i += 1\n                count += 1\n            encoded_message += str(count) + message[i]\n            i += 1\n        print(encoded_message)\n    elif mode == 'D':\n        message = input().strip()\n        decoded_message = ''\n        i = 0\n        while i < len(message):\n            count = int(message[i])\n            for _ in range(count):\n                decoded_message += message[i+1]\n            i += 2\n        print(decoded_message)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968988299369812,
            0.9959549307823181,
            0.99724280834198,
            0.9966894388198853,
            0.9966137409210205,
            0.9969843626022339,
            0.995011568069458,
            0.9974689483642578,
            0.9973368644714355,
            0.9958319664001465,
            0.9976511597633362,
            0.9970486164093018,
            0.9965912699699402,
            0.9955291748046875,
            0.9977082014083862,
            0.9973502159118652,
            0.9972952008247375,
            0.9973408579826355,
            0.9968661069869995,
            0.994166910648346
        ]
    },
    "4011": {
        "similarity": 0.9966373443603516,
        "body": "    n = int(input())\n    a = str(input()).ljust(n, '0')\n    f = [int(i) for i in input().split()]\n    \n    max_val = 0\n    for i in range(1 << n):\n        t = ''\n        for j in range(n):\n            if (i >> j) & 1:\n                t += str(f[int(a[j])])\n            else:\n                t += a[j]\n        max_val = max(max_val, int(t))\n    \n    print(max_val)",
        "result": "timed out",
        "similarities": [
            0.9962363839149475,
            0.9960054159164429,
            0.9953113198280334,
            0.9966373443603516,
            0.9935451149940491,
            0.9951761364936829,
            0.9952217936515808,
            0.995078444480896,
            0.9952729940414429,
            0.9959662556648254,
            0.9935901165008545,
            0.9948409199714661,
            0.9957261681556702,
            0.9905109405517578,
            0.9919081330299377,
            0.9925593137741089,
            0.9961616396903992,
            0.9946162700653076,
            0.9959903359413147,
            0.9954071044921875
        ]
    },
    "4099": {
        "similarity": 0.9955774545669556,
        "body": "    N, K, M = map(int, input().split())\n    total_score = sum(map(int, input().split()))\n    needed_avg = M * (N)\n    remaining_score = needed_avg - total_score\n    if remaining_score > 0:\n        print(remaining_score)\n    else:\n        print(-1)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9950788617134094,
            0.9913318157196045,
            0.9902151823043823,
            0.992172360420227,
            0.9939180612564087,
            0.9947317242622375,
            0.9940085411071777,
            0.9948883056640625,
            0.9948118329048157,
            0.9948348999023438,
            0.9951041340827942,
            0.9929282665252686,
            0.9934690594673157,
            0.9952989220619202,
            0.992591142654419,
            0.9951412677764893,
            0.9947773814201355,
            0.9955774545669556,
            0.9897595643997192,
            0.9807909727096558
        ]
    },
    "4465": {
        "similarity": 0.9959120750427246,
        "body": "    a = int(input())\n    b = int(input())\n    total_area = a * b\n    road_area = 2 * (a + b)\n    farm_area = total_area - road_area\n    print(int(farm_area))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940003752708435,
            0.9927325248718262,
            0.9942161440849304,
            0.9925657510757446,
            0.9959120750427246,
            0.9938948750495911,
            0.9954348206520081,
            0.9956489205360413,
            0.9919142723083496,
            0.9958060383796692,
            0.9954703450202942,
            0.992915689945221,
            0.992915689945221,
            0.993807852268219,
            0.9955693483352661,
            0.9926543831825256,
            0.992915689945221,
            0.9916263222694397,
            0.995762050151825,
            0.9904608726501465
        ]
    },
    "4315": {
        "similarity": 0.9955724477767944,
        "body": "import math\n\n    R = int(input())\n    circumference = 2 * math.pi * R\n    print(f\"{circumference:.2f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946333169937134,
            0.9933895468711853,
            0.984246015548706,
            0.9955724477767944,
            0.9942428469657898,
            0.9950810670852661,
            0.9940934777259827,
            0.994831919670105,
            0.9917744398117065,
            0.9953911304473877,
            0.995417058467865,
            0.9885852336883545,
            0.9934757947921753,
            0.9939077496528625,
            0.9883127808570862,
            0.9949318766593933,
            0.9951409101486206,
            0.9942008852958679,
            0.9917744398117065,
            0.9906492829322815
        ]
    },
    "4633": {
        "similarity": 0.9975159168243408,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        moves = 0\n        while True:\n            sum_digits = sum(int(digit) for digit in str(n))\n            if sum_digits <= s:\n                break\n            n += 1\n            moves += 1\n        print(moves)",
        "result": "timed out",
        "similarities": [
            0.9946443438529968,
            0.997156023979187,
            0.9889506101608276,
            0.9919562935829163,
            0.9961510896682739,
            0.993060290813446,
            0.9970924258232117,
            0.9973235130310059,
            0.997352123260498,
            0.9948095083236694,
            0.9941560626029968,
            0.9974294900894165,
            0.9967520833015442,
            0.9967140555381775,
            0.9967978596687317,
            0.9969554543495178,
            0.9974828958511353,
            0.9972622394561768,
            0.9971044659614563,
            0.9975159168243408
        ]
    },
    "4734": {
        "similarity": 0.9966270327568054,
        "body": "    if y[-1] == 'e':\n        return y + 'x' + p\n    for i in range(len(y) - 1, -1, -1):\n        if y[i] in 'aeiou':\n            break\n    if y.endswith('ex'):\n        return y + p\n    return y[:-1] + 'ex' + p",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937561750411987,
            0.9966270327568054,
            0.9937561750411987,
            0.9913963675498962,
            0.9964043498039246,
            0.9951829314231873,
            0.9959654808044434,
            0.9948247671127319,
            0.9955494403839111,
            0.9957687258720398,
            0.9954342246055603,
            0.9965607523918152,
            0.9958240985870361,
            0.9958494305610657,
            0.9950754046440125,
            0.996494472026825,
            0.9867311716079712,
            0.9964366555213928,
            0.9962617754936218,
            0.9897797107696533
        ]
    },
    "4229": {
        "similarity": 0.9951884746551514,
        "body": "    n = int(input())\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += 0\n        elif i % 3 == 0:\n            total += 0\n        elif i % 5 == 0:\n            total += 0\n        else:\n            total += i",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942132830619812,
            0.9951884746551514,
            0.9949384927749634,
            0.9951884746551514,
            0.9942536950111389,
            0.994669497013092,
            0.9944130778312683,
            0.9910891652107239,
            0.9951884746551514,
            0.9948402047157288,
            0.9657532572746277,
            0.9935907125473022,
            0.994056224822998,
            0.9933992028236389,
            0.9918962121009827,
            0.9912552237510681,
            0.9943570494651794,
            0.9939067363739014,
            0.9946063160896301,
            0.9951884746551514
        ]
    },
    "4321": {
        "similarity": 0.998357355594635,
        "body": "    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.99823397397995,
            0.9948238730430603,
            0.9977715015411377,
            0.998357355594635,
            0.998357355594635,
            0.998357355594635,
            0.998357355594635,
            0.9946748614311218,
            0.998357355594635,
            0.9983378052711487,
            0.998357355594635,
            0.9978668093681335,
            0.998357355594635,
            0.9935713410377502,
            0.9983378052711487,
            0.998357355594635,
            0.997787594795227,
            0.9946748614311218,
            0.9982339143753052,
            0.9952741265296936
        ]
    },
    "4503": {
        "similarity": 0.9975634217262268,
        "body": "    H, N = map(int, input().split())\n    A = list(map(int, input().split()))\n    used_moves = set()\n    for i in range(N):\n        while H > 0 and i not in used_moves:\n            H -= A[i]\n            used_moves.add(i)\n        if H <= 0:\n            print(\"Yes\")\n            return\n    print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9958485960960388,
            0.9961778521537781,
            0.9967197775840759,
            0.997024655342102,
            0.9962020516395569,
            0.9961417317390442,
            0.9966150522232056,
            0.9963170289993286,
            0.9975634217262268,
            0.9965055584907532,
            0.996984601020813,
            0.9954153299331665,
            0.9970999360084534,
            0.9969835877418518,
            0.9964366555213928,
            0.9970777630805969,
            0.9972880482673645,
            0.9956456422805786,
            0.9888544678688049,
            0.9970929026603699
        ]
    },
    "4855": {
        "similarity": 0.9933118224143982,
        "body": "    A, I = map(int, input().split())\n    citations = round(A * I)\n    for i in range(citations + 1):\n        if i / A >= I:\n            return i",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920936226844788,
            0.9900256991386414,
            0.9853631854057312,
            0.9831972718238831,
            0.992222011089325,
            0.9898356199264526,
            0.9920861124992371,
            0.9917417764663696,
            0.9900954365730286,
            0.9933118224143982,
            0.9875704050064087,
            0.9835121631622314,
            0.9924680590629578,
            0.9916442036628723,
            0.9915646910667419,
            0.9909312725067139,
            0.9876388907432556,
            0.99288409948349,
            0.9922256469726562,
            0.9886217713356018
        ]
    },
    "4704": {
        "similarity": 0.9956147074699402,
        "body": "    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    s, r = 0, sum(a[-n+1:])\n    for i in range(n//2):\n        if abs(s + a[i]) - r <= abs(s) - r:\n            break\n        s += a[i]\n    print(abs(s) - r)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9931359887123108,
            0.9951611757278442,
            0.9950768351554871,
            0.9956147074699402,
            0.9953864216804504,
            0.9876835346221924,
            0.9953343272209167,
            0.9945560097694397,
            0.9950402975082397,
            0.9906778931617737,
            0.9951015114784241,
            0.9863988757133484,
            0.9846816658973694,
            0.9952532052993774,
            0.9946847558021545,
            0.9946736693382263,
            0.9933683276176453,
            0.9955130219459534,
            0.9946523904800415,
            0.9954591393470764
        ]
    },
    "4829": {
        "similarity": 0.9983671307563782,
        "body": "    left, right = map(int, input().split())\n    if left == 0 or right == 0:\n        print(\"Not a moose\")\n    elif left > right:\n        print(f\"Odd {2*left}\")\n    else:\n        print(f\"Even {(left+right)}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979566335678101,
            0.9975315928459167,
            0.9982923269271851,
            0.997952401638031,
            0.9978599548339844,
            0.9982964396476746,
            0.9973925352096558,
            0.9953914284706116,
            0.9983046650886536,
            0.997460126876831,
            0.9977927207946777,
            0.9983671307563782,
            0.9973074197769165,
            0.9973298907279968,
            0.9978294372558594,
            0.9978294372558594,
            0.9978156685829163,
            0.9968833923339844,
            0.9976738691329956,
            0.998096764087677
        ]
    },
    "4730": {
        "similarity": 0.9973465800285339,
        "body": "    length = int(input())\n    line = input()\n    stack = []\n    for i in range(length):\n        char = line[i]\n        if char in ['(', '[', '{']:\n            stack.append((char, i))\n        elif char in [')', ']', '}']:\n            if not stack or (stack[-1][0] != '(' and stack[-1][0] != '[' and stack[-1][0] != '{'):\n                print(f\"{char} {stack[-1][1]}\")\n                return\n            stack.pop()\n    if stack:\n        print(f\"{stack[0][0]} {stack[0][1]}\")\n    else:\n        print(\"ok so far\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.995867908000946,
            0.9953686594963074,
            0.9972356557846069,
            0.9964594841003418,
            0.9966619610786438,
            0.9956635236740112,
            0.9954500794410706,
            0.9961459636688232,
            0.996997058391571,
            0.9970827698707581,
            0.9965426921844482,
            0.9973465800285339,
            0.9959028363227844,
            0.996863603591919,
            0.9949498772621155,
            0.9919338226318359,
            0.9951299428939819,
            0.9972144961357117,
            0.9968928098678589,
            0.9967061877250671
        ]
    },
    "4729": {
        "similarity": 0.9955586791038513,
        "body": "    password = input().upper()\n    message = input().upper()\n    for i in range(len(message)):\n        found = False\n        for char in password:\n            while True:\n                if message[i:].startswith(char):\n                    i += len(char) - 1\n                    found = True\n                    break\n                if message[i].notinalowercase(char) and message[i] < char:\n                    break\n        if not found:\n            return 'FAIL'\n    return 'PASS'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955586791038513,
            0.9937063455581665,
            0.9948776960372925,
            0.9948151111602783,
            0.9950592517852783,
            0.9935368299484253,
            0.9953600168228149,
            0.9929097890853882,
            0.995090901851654,
            0.9936317801475525,
            0.9945729970932007,
            0.9945471882820129,
            0.988134503364563,
            0.9872578978538513,
            0.9925163984298706,
            0.9950017333030701,
            0.9829221367835999,
            0.9893251061439514,
            0.993662416934967,
            0.9901145100593567
        ]
    },
    "4582": {
        "similarity": 0.9949387311935425,
        "body": "    a = input().strip()\n    b = input().strip()\n    if a == 'H':\n        if b == 'H':\n            print('H')\n        else:\n            print('D')\n    else:\n        if b == 'H':\n            print('D')\n        else:\n            print('H')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926180839538574,
            0.9945504069328308,
            0.9915626049041748,
            0.994748055934906,
            0.994114339351654,
            0.9949387311935425,
            0.9927592277526855,
            0.9949387311935425,
            0.9926297068595886,
            0.9796729683876038,
            0.9935020804405212,
            0.9931068420410156,
            0.9944183826446533,
            0.9923171997070312,
            0.9943564534187317,
            0.9947479963302612,
            0.994171142578125,
            0.9921981692314148,
            0.9845559000968933,
            0.9906988739967346
        ]
    },
    "4910": {
        "similarity": 0.9950957298278809,
        "body": "import sys\n\n    N = int(input())\n    categories = set()\n    for _ in range(N):\n        category = input().strip().lower()\n        categories.add(category)\n    \n    winners = list(categories)\n    winners.sort()\n    \n    print(*winners, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947308301925659,
            0.9862558245658875,
            0.9874140024185181,
            0.9926471710205078,
            0.9894298911094666,
            0.9936853051185608,
            0.9917309284210205,
            0.9950522184371948,
            0.993558406829834,
            0.9903319478034973,
            0.9950957298278809,
            0.992624819278717,
            0.9897447824478149,
            0.9940144419670105,
            0.9936606884002686,
            0.9923387169837952,
            0.9947810173034668,
            0.9920430779457092,
            0.9904202818870544,
            0.9925079345703125
        ]
    },
    "4323": {
        "similarity": 0.9962860941886902,
        "body": "    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort(key=lambda x: x[1])\n    count = 0\n    total_size = 0\n    for size, compressed_size in a:\n        if total_size + size > m or total_size + compressed_size <= m:\n            count += 1\n            total_size += size\n        else:\n            return \"-1\"\n    return str(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956603050231934,
            0.9929153323173523,
            0.9943438172340393,
            0.985207200050354,
            0.9962860941886902,
            0.9949650168418884,
            0.9942615032196045,
            0.9945658445358276,
            0.9946086406707764,
            0.99578857421875,
            0.994887113571167,
            0.9936928153038025,
            0.9951112866401672,
            0.9953149557113647,
            0.995208740234375,
            0.9856794476509094,
            0.9957619905471802,
            0.9952968955039978,
            0.9943809509277344,
            0.9950941801071167
        ]
    },
    "4626": {
        "similarity": 0.9942940473556519,
        "body": "    q = int(input())\n    for _ in range(q):\n        a, b, c = sorted(map(int, input().split()))\n        if a == b and b == c:\n            print(0)\n        elif a == b or a == c:\n            print(abs(b - c))\n        else:\n            print(abs(a - b) + abs(a - c) + abs(b - c))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9905622601509094,
            0.9940472841262817,
            0.9866461753845215,
            0.9916358590126038,
            0.9934198260307312,
            0.9911472797393799,
            0.9921535849571228,
            0.9920433759689331,
            0.9911788105964661,
            0.9941783547401428,
            0.9930543303489685,
            0.9837354421615601,
            0.9913575053215027,
            0.9908869862556458,
            0.9929763674736023,
            0.9925300478935242,
            0.9851760864257812,
            0.9890161752700806,
            0.9877747297286987,
            0.9942940473556519
        ]
    },
    "4400": {
        "similarity": 0.9986652731895447,
        "body": "rainy_days = 0\nmax_rainy_days = 0\nfor day in input():\n    if day == 'R':\n        rainy_days += 1\n        max_rainy_days = max(max_rainy_days, rainy_days)\n    else:\n        rainy_days = 0\nprint(max_rainy_days)",
        "result": "passed",
        "similarities": [
            0.9954146146774292,
            0.9972643852233887,
            0.9984613060951233,
            0.9986652731895447,
            0.9980034232139587,
            0.9978922605514526,
            0.9986652731895447,
            0.9982962608337402,
            0.9982008934020996,
            0.9981705546379089,
            0.9978039264678955,
            0.9984871745109558,
            0.997833251953125,
            0.9986652731895447,
            0.9983587861061096,
            0.997458815574646,
            0.9981169700622559,
            0.9979625344276428,
            0.998339831829071,
            0.9965466856956482
        ]
    },
    "4794": {
        "similarity": 0.9962061643600464,
        "body": "    R, C = map(int, input().split())\n    parking_map = [list(input()) for _ in range(R)]\n    \n    total_spaces = 0\n    spaces_zero = 0\n    spaces_one = 0\n    spaces_two = 0\n    spaces_three = 0\n    spaces_four = 0\n\n    for i in range(R):\n        for j in range(C):\n            if parking_map[i][j] == '.':\n                total_spaces += 1\n                for k in range(i+2, min(R, i+3)):\n                    for col in range(j+2, min(C, j+3)):\n                        if parking_map[k][col] != '#':\n                            if (i+2 > k or i+2 < k-2) and (j+2 > col or j+2 < col-2):\n                                if k-i == 1 and col-j == 1:\n                                    spaces_zero += 1\n                                elif k-i == 1 and col-j <= 1:\n                                    spaces_one += 1\n                                elif k-i <= 1 and col-j == 1:\n                                    spaces_two += 1\n                                elif k-i <= 1 and col-j <= 1:\n                                    if k-i == 2 and col-j == 2:\n                                        spaces_three += 1\n                                    else:\n                                        spaces_four += 1\n\n    print(spaces_zero)\n    print(spaces_one)\n    print(spaces_two)\n    print(spaces_three)\n    print(spaces_four)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946336150169373,
            0.9949053525924683,
            0.9954853057861328,
            0.9942501783370972,
            0.9939814209938049,
            0.9953268766403198,
            0.9895089864730835,
            0.9929474592208862,
            0.9950475096702576,
            0.9875901937484741,
            0.993362307548523,
            0.9947455525398254,
            0.9959063529968262,
            0.9948699474334717,
            0.9949511289596558,
            0.9932132363319397,
            0.9959793090820312,
            0.9951320290565491,
            0.994053304195404,
            0.9962061643600464
        ]
    },
    "4096": {
        "similarity": 0.9961387515068054,
        "body": "import sys\n\n    m, n = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    days = 1\n    written_pages = 0\n    \n    for i in range(n):\n        written_pages += min(a[i], m - written_pages)\n        if written_pages == m:\n            break\n        days += 1\n    \n    if written_pages < m:\n        sys.stdout.write('-1\\n')\n    else:\n        sys.stdout.write(str(days) + '\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9902036786079407,
            0.996051013469696,
            0.9941604137420654,
            0.9961387515068054,
            0.9946842193603516,
            0.9957547783851624,
            0.9944377541542053,
            0.995766282081604,
            0.9949907064437866,
            0.9947218894958496,
            0.9952622652053833,
            0.995223879814148,
            0.9951358437538147,
            0.9959574341773987,
            0.9932790994644165,
            0.9960780739784241,
            0.9927046895027161,
            0.9953706860542297,
            0.99468994140625,
            0.991434633731842
        ]
    },
    "4530": {
        "similarity": 0.9966468811035156,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        skills = list(set(map(int, input().split())))\n        skills.sort()\n        max_team_size = 0\n        for team_size in range(n // 2 + 1):\n            if len(skills[:team_size]) == team_size and (n - team_size) % team_size == 0:\n                max_team_size = team_size\n                break\n        print(max_team_size)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958981871604919,
            0.9963283538818359,
            0.9961289167404175,
            0.9966468811035156,
            0.9955766797065735,
            0.9949406385421753,
            0.9961204528808594,
            0.9953862428665161,
            0.9935158491134644,
            0.9952672719955444,
            0.9960153698921204,
            0.9917749166488647,
            0.9919301271438599,
            0.988388180732727,
            0.9937256574630737,
            0.9960833191871643,
            0.9917458295822144,
            0.9961349368095398,
            0.9959015250205994,
            0.9949959516525269
        ]
    },
    "4724": {
        "similarity": 0.9942195415496826,
        "body": "R = float(input())\nG = float(input())\n\nP = ((3 * R) + G) / 2\n\nprint(P)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921170473098755,
            0.9932562112808228,
            0.9931004047393799,
            0.9828308820724487,
            0.9938534498214722,
            0.989704430103302,
            0.9940586090087891,
            0.9907260537147522,
            0.9936226606369019,
            0.9936619997024536,
            0.9936226606369019,
            0.9941115379333496,
            0.9928880333900452,
            0.9939125776290894,
            0.9904903769493103,
            0.9892459511756897,
            0.989467442035675,
            0.9933578372001648,
            0.9942195415496826,
            0.9918929934501648
        ]
    },
    "4276": {
        "similarity": 0.9949654936790466,
        "body": "min_cost = None\nmax_time = None\n\nfor _ in range(int(input())): \n    cost, time_in_minutes = map(int, input().split())\n    if max_time is None or time_in_minutes <= max_time:\n        max_time = time_in_minutes\n        min_cost = cost\n    elif time_in_minutes > T and (min_cost is None or cost < min_cost):\n        min_cost = cost\n\nif min_cost is None:\n    print('TLE')\nelse:\n    print(min_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942944049835205,
            0.9940147399902344,
            0.9939278364181519,
            0.9928727746009827,
            0.9848875999450684,
            0.9926902651786804,
            0.994404137134552,
            0.9939225912094116,
            0.9880675077438354,
            0.9942079186439514,
            0.9930914044380188,
            0.9939878582954407,
            0.9935786724090576,
            0.9939720630645752,
            0.9926902651786804,
            0.9939427971839905,
            0.9922595620155334,
            0.9926772713661194,
            0.9949654936790466,
            0.9947658181190491
        ]
    },
    "4708": {
        "similarity": 0.9923215508460999,
        "body": "my_function = def my_function():\n    N, K, X, Y = map(int, input().split())\n    total = 0\n    for i in range(N):\n        if i < K:\n            total += X\n        else:\n            total += Y\n    print(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9910090565681458,
            0.9910439848899841,
            0.989732563495636,
            0.9826043844223022,
            0.990331768989563,
            0.9826472401618958,
            0.9897140860557556,
            0.9784906506538391,
            0.9907991290092468,
            0.9910306334495544,
            0.9916235208511353,
            0.9837012887001038,
            0.9822303652763367,
            0.9923215508460999,
            0.9909415245056152,
            0.9921999573707581,
            0.9905056357383728,
            0.9905809164047241,
            0.9900044798851013,
            0.9905315041542053
        ]
    },
    "4396": {
        "similarity": 0.9949055910110474,
        "body": "    n = int(input())\n    total_yen = 0\n    for _ in range(n):\n        x, u = map(str.split, [input().strip().split()])\n        if u[1] == 'BTC':\n            total_yen += float(x[0]) * 380000.0\n        else:\n            total_yen += int(x[0])\n    print(total_yen)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9832143187522888,
            0.9939093589782715,
            0.9939834475517273,
            0.9949055910110474,
            0.9947478771209717,
            0.9947877526283264,
            0.9948582053184509,
            0.9924013018608093,
            0.9829064607620239,
            0.9889864921569824,
            0.9947877526283264,
            0.9944534301757812,
            0.9824758768081665,
            0.9947110414505005,
            0.9946381449699402,
            0.9942365884780884,
            0.9941181540489197,
            0.9804956316947937,
            0.9938011169433594,
            0.9929505586624146
        ]
    },
    "4155": {
        "similarity": 0.9965095520019531,
        "body": "    n = int(input())\n    heights = list(map(int, input().split()))\n    operations = 0\n    for i in range(1, n+1):\n        last_height = 0\n        for j in range(i, n+1):\n            if heights[j] < heights[i]:\n                break\n            last_height = heights[j]\n        operations += (last_height - heights[i-1]) // 2 + 1 if last_height > heights[i-1] else 0\n    print(operations)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942444562911987,
            0.9942267537117004,
            0.993320643901825,
            0.9962900876998901,
            0.9947673678398132,
            0.9965095520019531,
            0.9957562685012817,
            0.9944853782653809,
            0.9948384165763855,
            0.9926782846450806,
            0.9848425984382629,
            0.9958081841468811,
            0.9954125285148621,
            0.9951478838920593,
            0.9925177693367004,
            0.9959840178489685,
            0.9904307126998901,
            0.994852602481842,
            0.9907342195510864,
            0.9956600666046143
        ]
    },
    "4557": {
        "similarity": 0.9967416524887085,
        "body": "    A, B, X = map(int, input().split())\n    if X <= A and X <= 100:\n        if A + B >= X:\n            print('YES')\n        else:\n            print('NO')",
        "result": "failed: testcase 0",
        "similarities": [
            0.989296555519104,
            0.9961974620819092,
            0.9909581542015076,
            0.9959888458251953,
            0.9960107207298279,
            0.9963250756263733,
            0.9941407442092896,
            0.9950429201126099,
            0.9956809878349304,
            0.9899494647979736,
            0.9963288903236389,
            0.9963250756263733,
            0.9953398704528809,
            0.9954483509063721,
            0.9946837425231934,
            0.9921371340751648,
            0.9962789416313171,
            0.9931092858314514,
            0.9946538209915161,
            0.9967416524887085
        ]
    },
    "4930": {
        "similarity": 0.9964196085929871,
        "body": "    sentence = input()\n    decoded_sentence = \"\"\n    for char in sentence:\n        if char.lower() in 'aeiou':\n            decoded_sentence += char + 'p' + char\n        else:\n            decoded_sentence += char\n    print(decoded_sentence)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953364133834839,
            0.9954848289489746,
            0.9949702024459839,
            0.9944142699241638,
            0.9951786398887634,
            0.9943981170654297,
            0.9932923913002014,
            0.9918534159660339,
            0.9953322410583496,
            0.993966281414032,
            0.9947581887245178,
            0.9951321482658386,
            0.9917349815368652,
            0.9964196085929871,
            0.9906793832778931,
            0.9951701164245605,
            0.9939318299293518,
            0.9954131245613098,
            0.9951733946800232,
            0.9958500266075134
        ]
    },
    "4715": {
        "similarity": 0.9924395680427551,
        "body": "color_count = set()\nfor _ in range(3):\n    a, b, c = map(int, input().split())\n    color_count.add(a)\n    color_count.add(b)\n    color_count.add(c)\n\nprint(len(color_count))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9889472126960754,
            0.9914760589599609,
            0.9924341440200806,
            0.9750930666923523,
            0.9912495017051697,
            0.9831462502479553,
            0.9908303022384644,
            0.9915367960929871,
            0.9924395680427551,
            0.9901530742645264,
            0.9920749664306641,
            0.9922710061073303,
            0.9750930666923523,
            0.9924341440200806,
            0.9924061298370361,
            0.9912316203117371,
            0.9881063103675842,
            0.9874787926673889,
            0.9871774911880493,
            0.9859539866447449
        ]
    },
    "4008": {
        "similarity": 0.9974516034126282,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if len(set(a)) < k:\n        return \"NO\"\n    \n    coloring = [0] * n\n    for i in range(n):\n        for j in range(k):\n            if sum(1 for x in range(j+1) if coloring[x]) < a[i]:\n                coloring[i] = j + 1\n                break\n    \n    print(\"YES\")\n    for c in coloring:\n        print(c, end=' ')\n    print()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9924188256263733,
            0.9948232769966125,
            0.9961279034614563,
            0.9952170848846436,
            0.9940038919448853,
            0.9974516034126282,
            0.9966737031936646,
            0.9962328672409058,
            0.9970278739929199,
            0.9940593242645264,
            0.9967014789581299,
            0.9954164624214172,
            0.9961887001991272,
            0.9960387349128723,
            0.9963884949684143,
            0.9971172213554382,
            0.996964693069458,
            0.9969587922096252,
            0.9970842003822327,
            0.9972199201583862
        ]
    },
    "4257": {
        "similarity": 0.9920963644981384,
        "body": "    a = int(input())\n    b = int(input())\n    product = 1\n    for _ in range(a):\n        product *= b\n    print(product)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9797050356864929,
            0.990954577922821,
            0.9920631051063538,
            0.9809677004814148,
            0.9920963644981384,
            0.9759188294410706,
            0.98740154504776,
            0.989800214767456,
            0.988349199295044,
            0.9913370013237,
            0.988349199295044,
            0.9908701181411743,
            0.9919854998588562,
            0.9774932861328125,
            0.9825037717819214,
            0.9909660220146179,
            0.9868860840797424,
            0.9900581240653992,
            0.9909660816192627,
            0.9880507588386536
        ]
    },
    "4584": {
        "similarity": 0.9927703738212585,
        "body": "    N = int(input())\n    A = [0] + [int(x) for x in input().split()]\n    subordinates = [0] * (N + 1)\n    for i in range(2, N + 1):\n        subordinates[A[i]] += 1\n    for i in range(1, N + 1):\n        print(subordinates[i])",
        "result": "failed: testcase 0",
        "similarities": [
            0.978733479976654,
            0.989517092704773,
            0.9927703738212585,
            0.9925491809844971,
            0.9880573153495789,
            0.9925481081008911,
            0.992631196975708,
            0.9924442768096924,
            0.9923201203346252,
            0.9925915598869324,
            0.9794692993164062,
            0.9892377257347107,
            0.9786017537117004,
            0.9803959727287292,
            0.9792757630348206,
            0.9910135865211487,
            0.9894605278968811,
            0.9905557036399841,
            0.9874756336212158,
            0.9873480796813965
        ]
    },
    "4195": {
        "similarity": 0.9951062798500061,
        "body": "    d, n = map(int, input().split())\n    i = 1\n    count = 0\n    while True:\n        if i % (10 ** d) == 0:\n            count += 1\n            if count == n:\n                print(i)\n                return\n\nfor _ in range(100):\n    find_nth_smallest()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9915995597839355,
            0.9889650940895081,
            0.9937999248504639,
            0.9925334453582764,
            0.9941461682319641,
            0.9894534945487976,
            0.9943450093269348,
            0.9933050274848938,
            0.990710437297821,
            0.9941120147705078,
            0.9941567182540894,
            0.9928989410400391,
            0.9947361350059509,
            0.9740279316902161,
            0.9947413206100464,
            0.9940775632858276,
            0.9947644472122192,
            0.9947742819786072,
            0.9924575686454773,
            0.9951062798500061
        ]
    },
    "4176": {
        "similarity": 0.9934388995170593,
        "body": "    A, B = map(int, input().split())\n    min_pieces = max(A, B)\n    for _ in range(min_pieces + 1):\n        if A % (_ + 1) == 0 and B % (_ + 1) == 0:\n            print(_ + 1)\n            return",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927601218223572,
            0.9862101674079895,
            0.992467999458313,
            0.9863247275352478,
            0.9931932091712952,
            0.9934388995170593,
            0.9926095604896545,
            0.9868579506874084,
            0.9898850321769714,
            0.9892588257789612,
            0.9821767210960388,
            0.9859291911125183,
            0.9807887077331543,
            0.9925097227096558,
            0.9880227446556091,
            0.9926060438156128,
            0.9924879670143127,
            0.9932854175567627,
            0.9913227558135986,
            0.9931932091712952
        ]
    },
    "4166": {
        "similarity": 0.996599018573761,
        "body": "    n, m = map(int, input().split())\n    num = [0] * (n + 1)\n    for i in range(m):\n        digit_index, value = map(int, input().split())\n        if value > 9:\n            return -1\n        for j in range(n, digit_index - 1, -1):\n            num[j] += 10 ** (j - digit_index + 1) * value\n    return sum(num)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959794282913208,
            0.993141770362854,
            0.996599018573761,
            0.9960076212882996,
            0.9957286715507507,
            0.9965780973434448,
            0.9964398741722107,
            0.9960030317306519,
            0.9934009909629822,
            0.9915023446083069,
            0.9961022138595581,
            0.9956150054931641,
            0.9959841370582581,
            0.9949963092803955,
            0.9963704943656921,
            0.9955351948738098,
            0.9954733848571777,
            0.9942867159843445,
            0.9956814646720886,
            0.995591402053833
        ]
    },
    "4827": {
        "similarity": 0.9936487078666687,
        "body": "    n = int(input())\n    words = []\n    for _ in range(n):\n        word = input()\n        if word == '$':\n            break\n        words.append(word)\n    total_letters = sum(len(word) for word in words)\n    named_number = ''\n    hundreds = total_letters // 100\n    if hundreds:\n        named_number += 'onehundred' if hundreds == 1 else f'twohundred{fifty if (total_letters - (hundreds * 100)) // 10 < 2 else \"\"}'\n        named_number += 'ninety' if (total_letters - (hundreds * 100)) % 10 == 9 else ''\n    tens = (total_letters - hundreds * 100) // 10\n    if tens:\n        named_number += f'twenty' if tens == 2 else f'thirty' if tens == 3 else f'forty' if tens == 4 else f'fifty' if tens == 5 else f'sixty' if tens == 6 else f'seventy' if tens == 7 else f'eighty' if tens == 8 else f'ninety'\n        ones = (total_letters - hundreds * 100 - tens * 10) % 10\n        named_number += 'one' if ones == 1 else f'two' if ones == 2 else f'three' if ones == 3 else f'four' if ones == 4 else f'five' if ones == 5 else f'six' if ones == 6 else f'seven' if ones == 7 else f'eight' if ones == 8 else f'nine'\n    print(f\"{words[0]} {' '.join(words[1:-1])} {named_number} letters\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934545755386353,
            0.9929147958755493,
            0.9917044639587402,
            0.9896997213363647,
            0.9936487078666687,
            0.991128146648407,
            0.9821377992630005,
            0.9918640851974487,
            0.9917879700660706,
            0.992273211479187,
            0.9915847778320312,
            0.9906899333000183,
            0.9928940534591675,
            0.9915801882743835,
            0.9751846194267273,
            0.9909502267837524,
            0.9928638339042664,
            0.9882631897926331,
            0.9910804629325867,
            0.9918064475059509
        ]
    },
    "4871": {
        "similarity": 0.9954480528831482,
        "body": "import math\n\n    n = int(input())\n    scores = []\n    for _ in range(n):\n        scores.append(int(input()))\n    scores.sort(reverse=True)\n    \n    current_score = sum(score * (4/5)**i / 5 for i, score in enumerate(scores))\n    average_g_i = sum((score / (4/5)**i) for i, score in enumerate(scores)) / n\n    \n    print(\"{:.6f}\".format(current_score))\n    print(\"{:.12f}\".format(average_g_i))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9947709441184998,
            0.9953633546829224,
            0.9952121376991272,
            0.9935459494590759,
            0.9906086325645447,
            0.9944004416465759,
            0.9933781027793884,
            0.995051920413971,
            0.9887405037879944,
            0.9946075081825256,
            0.9948998689651489,
            0.9953795075416565,
            0.9891232848167419,
            0.9900285601615906,
            0.9917144775390625,
            0.9947466850280762,
            0.9874996542930603,
            0.9952213168144226,
            0.9900262951850891,
            0.9954480528831482
        ]
    },
    "4148": {
        "similarity": 0.9967071413993835,
        "body": "    n = int(input())\n    s = input()\n    result = ''\n    for c in s:\n        if ord(c) + n <= ord('Z'):\n            result += chr(ord(c) + n)\n        else:\n            result += chr(ord('A') + (n - 26))\n    print(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935402274131775,
            0.9956154227256775,
            0.9958403706550598,
            0.995307207107544,
            0.9960439801216125,
            0.9965001344680786,
            0.996015727519989,
            0.9938932657241821,
            0.9944168925285339,
            0.9961863160133362,
            0.9957765340805054,
            0.9953097105026245,
            0.9959906339645386,
            0.9940553307533264,
            0.9957605004310608,
            0.9936156272888184,
            0.9919599294662476,
            0.9963178038597107,
            0.9967071413993835,
            0.9958152770996094
        ]
    },
    "4316": {
        "similarity": 0.99591463804245,
        "body": "    s = input()\n    count = {}\n    for c in s:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    kinds = len(count)\n    if kinds == 2 and all(v == 2 for v in count.values()):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "passed",
        "similarities": [
            0.9931585192680359,
            0.9943674206733704,
            0.9950426816940308,
            0.9951412081718445,
            0.9941290020942688,
            0.9936248660087585,
            0.9819219708442688,
            0.9957900047302246,
            0.9953345060348511,
            0.99591463804245,
            0.9939845204353333,
            0.9941980242729187,
            0.9880684614181519,
            0.9948034882545471,
            0.9897889494895935,
            0.9946768879890442,
            0.9955134987831116,
            0.9957499504089355,
            0.9955644011497498,
            0.9943288564682007
        ]
    },
    "4397": {
        "similarity": 0.9938238263130188,
        "body": "    N, i = map(int, input().split())\n    j = N - i + 1\n    print(j)",
        "result": "passed",
        "similarities": [
            0.9881094694137573,
            0.9936164021492004,
            0.9938238263130188,
            0.9931102395057678,
            0.9936162829399109,
            0.9906634092330933,
            0.9938238263130188,
            0.9936162829399109,
            0.9881094694137573,
            0.9938238263130188,
            0.9824594259262085,
            0.9880048036575317,
            0.9938238263130188,
            0.9820833802223206,
            0.9867154955863953,
            0.9881094694137573,
            0.9871916770935059,
            0.9903393983840942,
            0.9936164021492004,
            0.9904246926307678
        ]
    },
    "4180": {
        "similarity": 0.9964209198951721,
        "body": "    n = int(input())\n    my_var = 0\n    for i in range(n//1000):\n        my_var += 1000\n    if n > my_var:\n        change = n - my_var\n    else:\n        change = n\n    print(change)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953325986862183,
            0.9960630536079407,
            0.9945175647735596,
            0.9947562217712402,
            0.9907480478286743,
            0.9958462119102478,
            0.9884080290794373,
            0.9952111840248108,
            0.9945421814918518,
            0.9964209198951721,
            0.9950342774391174,
            0.994820237159729,
            0.9918190836906433,
            0.9943822622299194,
            0.9953240156173706,
            0.9936547875404358,
            0.9963802695274353,
            0.9934541583061218,
            0.9947013854980469,
            0.9952571392059326
        ]
    },
    "4907": {
        "similarity": 0.9945835471153259,
        "body": "    if n <= 3:\n        return \"Alice\", 1\n    for i in range(2, int((n+1)/2)):\n        if n - i <= i:\n            return \"Alice\", i\n    return \"Bob\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921320676803589,
            0.9901217222213745,
            0.9917404055595398,
            0.9945835471153259,
            0.9899201989173889,
            0.9944530129432678,
            0.9943367838859558,
            0.9899671673774719,
            0.9923355579376221,
            0.9938069581985474,
            0.9943267703056335,
            0.992764949798584,
            0.9902672171592712,
            0.9944871664047241,
            0.9940305352210999,
            0.9911742806434631,
            0.9779366254806519,
            0.9938609600067139,
            0.9918626546859741,
            0.9942333698272705
        ]
    },
    "4839": {
        "similarity": 0.9952183961868286,
        "body": "    canisters = [0] + sorted([canister for canister in canister_amounts])\n    balloon_sizes = list(range(1, n+1))\n    \n    min_fraction = 1\n    for balloon_size in balloon_sizes:\n        for i in range(len(canisters) - 1):\n            if canisters[i] >= balloon_size:\n                canisters[i] -= balloon_size\n                break\n        else:\n            return \"impossible\"\n        fraction = balloon_size / (canister_amounts[-1] + sum(range(1, balloon_size+1)))\n        min_fraction = min(min_fraction, fraction)\n    return str(min_fraction)",
        "result": "failed: testcase 0",
        "similarities": [
            0.994126558303833,
            0.9933967590332031,
            0.9951705932617188,
            0.9928377866744995,
            0.9931132793426514,
            0.9904937744140625,
            0.9909987449645996,
            0.9936887621879578,
            0.9922956228256226,
            0.9923309683799744,
            0.9920722842216492,
            0.9944512248039246,
            0.9946582317352295,
            0.9928699135780334,
            0.9932568073272705,
            0.9936005473136902,
            0.9926832914352417,
            0.9952183961868286,
            0.9942142367362976,
            0.9939881563186646
        ]
    },
    "4665": {
        "similarity": 0.996670663356781,
        "body": "import collections\nnamedtuple = collections.namedtuple\n\n    column_names = tuple(input().split())\n    row_data = [input().split() for _ in range(int(input()))]\n    Marks = namedtuple('Marks', 'id mark name class')\n    total_mark = 0\n    for row in row_data:\n        student_marks = Marks(*row)\n        total_mark += int(student_marks.mark)\n    print(format(total_mark / len(row_data), '.2f'))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959061145782471,
            0.9961333870887756,
            0.994168758392334,
            0.9950190186500549,
            0.9960528016090393,
            0.9933515191078186,
            0.996670663356781,
            0.9950765371322632,
            0.9960319995880127,
            0.9955689311027527,
            0.9960728883743286,
            0.995915949344635,
            0.9929771423339844,
            0.9936525225639343,
            0.9959885478019714,
            0.994523823261261,
            0.995329737663269,
            0.9959559440612793,
            0.9947296977043152,
            0.9937017560005188
        ]
    },
    "4785": {
        "similarity": 0.9964883923530579,
        "body": "    s = input()\n    for char in s:\n        if char == 's' and s.index('s') < len(s) - 1 and s[s.index('s')+1] == 's':\n            print(\"hiss\")\n            return\n    print(\"no hiss\")",
        "result": "passed",
        "similarities": [
            0.9964883923530579,
            0.9963943362236023,
            0.9936354756355286,
            0.9962995648384094,
            0.9960004687309265,
            0.995095431804657,
            0.985474169254303,
            0.9961000084877014,
            0.9937177896499634,
            0.981685221195221,
            0.9962204694747925,
            0.9959629774093628,
            0.9962204694747925,
            0.9874292016029358,
            0.9957661032676697,
            0.9936052560806274,
            0.9939430952072144,
            0.9954800009727478,
            0.9963215589523315,
            0.9958041310310364
        ]
    },
    "4272": {
        "similarity": 0.997666597366333,
        "body": "    n = int(input())\n    s = input().upper()\n    abc_count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            abc_count += 1\n    print(abc_count)",
        "result": "passed",
        "similarities": [
            0.9944259524345398,
            0.9972349405288696,
            0.9976328611373901,
            0.9952550530433655,
            0.9975267052650452,
            0.9976328611373901,
            0.9976328611373901,
            0.9976567029953003,
            0.9974328875541687,
            0.9976602792739868,
            0.9972968101501465,
            0.9976602792739868,
            0.9861089587211609,
            0.997666597366333,
            0.9967466592788696,
            0.9975401163101196,
            0.9853234887123108,
            0.9975968599319458,
            0.9976567029953003,
            0.9976567029953003
        ]
    },
    "4092": {
        "similarity": 0.9954527616500854,
        "body": "    n = len(a)\n    res = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum == 0:\n            res += 1\n        elif curr_sum < 0 <= curr_sum + a[i]:\n            res += 1\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954527616500854,
            0.9935044646263123,
            0.9953727722167969,
            0.9950539469718933,
            0.9905361533164978,
            0.9931483268737793,
            0.9933110475540161,
            0.9923951029777527,
            0.9909987449645996,
            0.9915134310722351,
            0.9920561909675598,
            0.9927137494087219,
            0.9947367310523987,
            0.9862309694290161,
            0.9948068261146545,
            0.9917512536048889,
            0.9936487078666687,
            0.9948011636734009,
            0.993861973285675,
            0.9948169589042664
        ]
    },
    "4023": {
        "similarity": 0.9953929781913757,
        "body": "    n = int(input())\n    heights = [int(i) for i in input().split()]\n    max_height = max(heights)\n    min_height = min(heights)\n    if min_height == max_height:\n        return \"YES\"\n    min_diff = abs(min_height - max_height)\n    for i in range(n):\n        diff = abs(heights[i] - heights[(i + 1) % n])\n        if diff > min_diff:\n            return \"NO\"\n    return \"YES\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.989904522895813,
            0.9948350787162781,
            0.9943132996559143,
            0.989730715751648,
            0.9948099851608276,
            0.9938329458236694,
            0.9941118955612183,
            0.9920143485069275,
            0.9931315183639526,
            0.9908768534660339,
            0.9930762052536011,
            0.9941965341567993,
            0.9952662587165833,
            0.9929054975509644,
            0.9937537312507629,
            0.9882278442382812,
            0.9949415326118469,
            0.9935498833656311,
            0.9894762635231018,
            0.9953929781913757
        ]
    },
    "4160": {
        "similarity": 0.9961107969284058,
        "body": "    x = int(input())\n    year = 0\n    balance = 100\n    while True:\n        year += 1\n        balance += (balance * 1) // 100\n        if balance >= x:\n            print(year)\n            break",
        "result": "passed",
        "similarities": [
            0.9925561547279358,
            0.9951958060264587,
            0.9950774312019348,
            0.9954185485839844,
            0.9950692057609558,
            0.9954057335853577,
            0.9938840270042419,
            0.9951806664466858,
            0.9678378105163574,
            0.99163419008255,
            0.9953992962837219,
            0.9956537485122681,
            0.9961107969284058,
            0.9934287071228027,
            0.995019793510437,
            0.994544267654419,
            0.9955587983131409,
            0.9958111643791199,
            0.9953173398971558,
            0.9955878257751465
        ]
    },
    "4815": {
        "similarity": 0.9984797239303589,
        "body": "    n, p, m = map(int, input().split())\n    players = {}\n    for _ in range(n):\n        name = input()\n        players[name] = 0\n    for _ in range(m):\n        name, points = input().split()\n        if name not in players:\n            continue\n        players[name] += int(points)\n    winners = []\n    for player, score in players.items():\n        if score >= p:\n            print(f\"{player} wins!\")\n            winners.append(player)\n    if len(winners) == 0:\n        print(\"No winner!\")",
        "result": "passed",
        "similarities": [
            0.998225748538971,
            0.9983389973640442,
            0.9982050657272339,
            0.9968594908714294,
            0.9981819987297058,
            0.9982916116714478,
            0.9983484148979187,
            0.9966278076171875,
            0.9968515038490295,
            0.9981752634048462,
            0.9979506134986877,
            0.9961079359054565,
            0.9980559945106506,
            0.9968159198760986,
            0.9984797239303589,
            0.9983636736869812,
            0.997798502445221,
            0.9924284219741821,
            0.9982327818870544,
            0.9982125163078308
        ]
    },
    "4514": {
        "similarity": 0.9968028664588928,
        "body": "    officers = [0] * (n + 1)\n    for i in range(2, n + 1):\n        officers[i] = list(range(i)).index(queries[1][i - 1])\n    result = []\n    for u, k in queries:\n        current = u\n        sequence = []\n        while True:\n            for i in range(current * 2, n + 1):\n                if officers[i] < len(sequence):\n                    current = i\n                    break\n            else:\n                break\n            sequence.append(current)\n        result.append(sequence[k - 1]) if k <= len(sequence) else print(-1)\n    return '\\n'.join(map(str, result))",
        "result": "failed: testcase 0",
        "similarities": [
            0.992978572845459,
            0.9945365786552429,
            0.9964473247528076,
            0.9962783455848694,
            0.9960417747497559,
            0.9948399066925049,
            0.9958491921424866,
            0.9961140155792236,
            0.9950671792030334,
            0.9952551126480103,
            0.9964617490768433,
            0.9966989159584045,
            0.9956167340278625,
            0.9968028664588928,
            0.9965591430664062,
            0.9942701458930969,
            0.9962494373321533,
            0.9939171671867371,
            0.9958251118659973,
            0.9965566396713257
        ]
    },
    "4585": {
        "similarity": 0.9902801513671875,
        "body": "    X = int(input())\n    time = 0\n    for i in range(1, X+1):\n        if X % i == 0:\n            time = i\n            break\n    print(time)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9737139344215393,
            0.9794096946716309,
            0.9902801513671875,
            0.9872175455093384,
            0.9894078969955444,
            0.9834343791007996,
            0.9789729118347168,
            0.990092933177948,
            0.9849770069122314,
            0.9895145297050476,
            0.9901209473609924,
            0.9894078969955444,
            0.9783329367637634,
            0.981899082660675,
            0.9831934571266174,
            0.9902072548866272,
            0.9791815876960754,
            0.9896812438964844,
            0.9798284769058228,
            0.9892764091491699
        ]
    },
    "4781": {
        "similarity": 0.9954339265823364,
        "body": "    players = [i for i in range(1, 9)]\n    K -= 1\n    for _ in range(N):\n        time, answer = int(input()), input().strip()\n        if answer == 'T':\n            K = (K + 1) % 8\n        elif answer == 'P':\n            continue\n    return str(players[K] + 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.992710292339325,
            0.9948710203170776,
            0.9939669370651245,
            0.9924944639205933,
            0.9934707283973694,
            0.9954339265823364,
            0.9937198162078857,
            0.9947736859321594,
            0.9933845400810242,
            0.993147611618042,
            0.9940193891525269,
            0.9927444458007812,
            0.991515040397644,
            0.9931595325469971,
            0.9940077066421509,
            0.9895150065422058,
            0.97989422082901,
            0.9943993091583252,
            0.9854721426963806,
            0.9933391213417053
        ]
    },
    "4551": {
        "similarity": 0.9943546652793884,
        "body": "    A, B, C, D = map(int, input().split())\n    if A + B > C + D:\n        print(\"Left\")\n    elif A + B == C + D:\n        print(\"Balanced\")\n    else:\n        print(\"Right\")",
        "result": "passed",
        "similarities": [
            0.9942753314971924,
            0.9942927360534668,
            0.9875850677490234,
            0.9920257925987244,
            0.9928604960441589,
            0.9753588438034058,
            0.9943536520004272,
            0.991926372051239,
            0.9907505512237549,
            0.9926904439926147,
            0.9939701557159424,
            0.9943536520004272,
            0.9894883036613464,
            0.9924583435058594,
            0.9943546652793884,
            0.9918460845947266,
            0.9943383932113647,
            0.9790281057357788,
            0.9912641644477844,
            0.9942784905433655
        ]
    },
    "4345": {
        "similarity": 0.9974640607833862,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if not increasing or a[i] > increasing[-1]:\n            increasing.append(a[i])\n        elif not decreasing or a[i] < decreasing[-1]:\n            decreasing.append(a[i])\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    res = [0]*n\n    for i in range(n):\n        if a[i] in increasing:\n            res[i] = 0\n        elif a[i] in decreasing:\n            res[i] = 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965814352035522,
            0.9949943423271179,
            0.9972450137138367,
            0.9967369437217712,
            0.9943225383758545,
            0.9930773377418518,
            0.9973012208938599,
            0.9920541644096375,
            0.9968606233596802,
            0.9971712827682495,
            0.9970214366912842,
            0.9972367882728577,
            0.9949427247047424,
            0.9970155358314514,
            0.995391845703125,
            0.9969398975372314,
            0.994563639163971,
            0.9968600869178772,
            0.9974640607833862,
            0.9966963529586792
        ]
    },
    "4075": {
        "similarity": 0.9969123005867004,
        "body": "    n, m = map(int, input().split())\n    switch_states = []\n    for _ in range(m):\n        k, *switches = map(int, input().split())\n        switch_states.append((k, switches))\n    on_count = [0] * (n + 1)\n    result = 0\n    for _, switches in switch_states:\n        for switch in switches:\n            on_count[switch] += 1\n    for bulb in range(m):\n        p = int(input())\n        if (on_count[sum(switches)] % 2 == p) and all(on_count[s] <= p or on_count[s] % 2 != p for s in switches):\n            result += 1\n    print(result)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966350197792053,
            0.9956008791923523,
            0.9963428974151611,
            0.9962567687034607,
            0.9963216185569763,
            0.9963393211364746,
            0.9926785230636597,
            0.9969123005867004,
            0.9960376620292664,
            0.994545578956604,
            0.9911159873008728,
            0.9960949420928955,
            0.9967542886734009,
            0.9957035779953003,
            0.9948734641075134,
            0.9963951110839844,
            0.9908532500267029,
            0.9903379678726196,
            0.996293306350708,
            0.9959204792976379
        ]
    },
    "4408": {
        "similarity": 0.9965571165084839,
        "body": "    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    favorite_numbers = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n    card_count = [0] * (k + 1)\n    for i in range(k * n):\n        for j in range(n):\n            if cards[i] == favorite_numbers[j]:\n                card_count[card_count[-1]] += 1\n    total_joy = 0\n    for t in range(1, k + 1):\n        total_joy += min(card_count[:t], default=0) * joy_levels[t - 1]\n    print(total_joy)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959084391593933,
            0.9959824085235596,
            0.9961485862731934,
            0.996329665184021,
            0.9937657713890076,
            0.9954619407653809,
            0.9963444471359253,
            0.9893422722816467,
            0.9958773255348206,
            0.9940645098686218,
            0.9964525103569031,
            0.9941605925559998,
            0.9964447021484375,
            0.9962077736854553,
            0.97946697473526,
            0.9938647747039795,
            0.9965571165084839,
            0.9961885213851929,
            0.9934205412864685,
            0.9921613335609436
        ]
    },
    "4282": {
        "similarity": 0.9949607849121094,
        "body": "    p = [i+1 for i in range(n)]\n    for i in range(n):\n        if a[i][0] == 1:\n            p[p.index(a[i][1])] = 1\n            break\n    for _ in range(n-1):\n        for i in range(n):\n            if p[i] == 1:\n                p[i:] = p[i:][::-1]\n                p[i:i+2] = [p[i], 1]\n                p[i+1] = 1\n                break\n    return ' '.join(str(x) for x in p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941999316215515,
            0.9945827126502991,
            0.9936229586601257,
            0.9900476336479187,
            0.9938929677009583,
            0.9894475340843201,
            0.9949263334274292,
            0.9934953451156616,
            0.9880240559577942,
            0.993524432182312,
            0.9905071258544922,
            0.9945706725120544,
            0.9948316812515259,
            0.99442058801651,
            0.9949607849121094,
            0.994892954826355,
            0.9931867718696594,
            0.9927938580513,
            0.9929301738739014,
            0.9937339425086975
        ]
    },
    "4331": {
        "similarity": 0.9973821043968201,
        "body": "    n = int(input())\n    str_n = str(n)\n    for i in range(3):\n        if str_n[i] == '7':\n            print('Yes')\n            return\n    print('No')",
        "result": "passed",
        "similarities": [
            0.9967131614685059,
            0.9965338706970215,
            0.9970004558563232,
            0.9906999468803406,
            0.9965469837188721,
            0.9972680807113647,
            0.9920405149459839,
            0.9971070885658264,
            0.9973821043968201,
            0.9973612427711487,
            0.9972546100616455,
            0.99615478515625,
            0.9939830303192139,
            0.9971548318862915,
            0.9973139762878418,
            0.9959357380867004,
            0.9968494772911072,
            0.9969586730003357,
            0.9939093589782715,
            0.9962375164031982
        ]
    },
    "4550": {
        "similarity": 0.9971969127655029,
        "body": "import sys\n\n    a, b, c = map(int, sys.stdin.readline().split())\n    total_candies = a + b + c\n    if total_candies % 2 == 0:\n        print('Yes')\n    else:\n        print('No')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9971807599067688,
            0.9952688813209534,
            0.9971969127655029,
            0.9964587688446045,
            0.9921437501907349,
            0.9965288043022156,
            0.9965469241142273,
            0.9968459606170654,
            0.9965131878852844,
            0.9961198568344116,
            0.994858980178833,
            0.9962399005889893,
            0.993539035320282,
            0.9968587160110474,
            0.9943417906761169,
            0.9967960715293884,
            0.9962824583053589,
            0.9968069791793823,
            0.997158944606781,
            0.9964278340339661
        ]
    },
    "4271": {
        "similarity": 0.9961382150650024,
        "body": "    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))[:-1]\n    \n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += b[a[i] - 1]\n        else:\n            total += b[a[i] - 1] + c[i - 1]\n    \n    print(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9812752604484558,
            0.995398759841919,
            0.9961382150650024,
            0.9951567649841309,
            0.9944855570793152,
            0.9946189522743225,
            0.9961169362068176,
            0.9954026937484741,
            0.9956336617469788,
            0.9957464337348938,
            0.9926013946533203,
            0.9940387606620789,
            0.9940890073776245,
            0.9946504235267639,
            0.990012526512146,
            0.9949638247489929,
            0.9946790933609009,
            0.9930694103240967,
            0.9927020072937012,
            0.9950509667396545
        ]
    },
    "4848": {
        "similarity": 0.9955554604530334,
        "body": "    for m in range(2, n):\n        if all(k*k > m for k in range(1, int(m**0.5) + 1)):\n            return m\n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9917904734611511,
            0.9935221672058105,
            0.9919831156730652,
            0.9948275685310364,
            0.9919831156730652,
            0.9924958944320679,
            0.9928584694862366,
            0.9924212098121643,
            0.9929649829864502,
            0.993779718875885,
            0.9917227029800415,
            0.994492769241333,
            0.9954022169113159,
            0.9908894300460815,
            0.9955554604530334,
            0.9925147891044617,
            0.9954053163528442,
            0.9919831156730652,
            0.9934218525886536,
            0.9905251264572144
        ]
    },
    "4694": {
        "similarity": 0.9966626763343811,
        "body": "import sys\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    min_dis = 0\n    for i in range(N):\n        total_dis = sum(abs(a[i] - ai) for ai in a)\n        if i > 0:\n            total_dis -= abs(a[i-1] - a[0])\n        if total_dis < min_dis or not min_dis:\n            min_dis = total_dis\n    print(min_dis)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964969158172607,
            0.9966626763343811,
            0.9946978688240051,
            0.995993971824646,
            0.9953649640083313,
            0.9966434836387634,
            0.9947198629379272,
            0.9961778521537781,
            0.9960630536079407,
            0.9878082275390625,
            0.9964282512664795,
            0.9959904551506042,
            0.995175838470459,
            0.9949625134468079,
            0.9962796568870544,
            0.992531418800354,
            0.9955821633338928,
            0.996273934841156,
            0.9954156279563904,
            0.9945863485336304
        ]
    },
    "4213": {
        "similarity": 0.9968492388725281,
        "body": "import sys\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n    print(max_diff)",
        "result": "passed",
        "similarities": [
            0.9952650666236877,
            0.9962899088859558,
            0.9942741394042969,
            0.9955429434776306,
            0.9962136149406433,
            0.9955466389656067,
            0.9963498711585999,
            0.9968492388725281,
            0.9964033365249634,
            0.9938184022903442,
            0.9960897564888,
            0.9964797496795654,
            0.99660724401474,
            0.9936646223068237,
            0.9956072568893433,
            0.9915014505386353,
            0.9964979290962219,
            0.9943323731422424,
            0.9942657351493835,
            0.9967088103294373
        ]
    },
    "4471": {
        "similarity": 0.9964774250984192,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(n):\n            if any(j > 0 for j in a):\n                break\n        else:\n            print(\"YES\")\n        print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926082491874695,
            0.9951207041740417,
            0.995741605758667,
            0.9954109191894531,
            0.9964774250984192,
            0.9914496541023254,
            0.9949160218238831,
            0.9947565793991089,
            0.9953729510307312,
            0.9915103912353516,
            0.9931442141532898,
            0.9946343302726746,
            0.9954881072044373,
            0.994404673576355,
            0.9940508604049683,
            0.9901589751243591,
            0.9945807456970215,
            0.9929118752479553,
            0.9958711862564087,
            0.9945273399353027
        ]
    },
    "4802": {
        "similarity": 0.9959600567817688,
        "body": "hour, minute = map(int, input().split())\n\nfor _ in range(2):\n    if minute <= 14:\n        minute += 60\n        hour -= 1\n    else:\n        minute -= 15\n\nprint(hour, minute)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959281086921692,
            0.9855471253395081,
            0.9954704642295837,
            0.9942177534103394,
            0.9912434816360474,
            0.9954280853271484,
            0.9946764707565308,
            0.9958561658859253,
            0.9934220910072327,
            0.9939599633216858,
            0.9942177534103394,
            0.9911711812019348,
            0.9933401346206665,
            0.9959600567817688,
            0.9959281086921692,
            0.9890134930610657,
            0.9949060082435608,
            0.9959281086921692,
            0.9951221346855164,
            0.995566725730896
        ]
    },
    "4890": {
        "similarity": 0.9958584308624268,
        "body": "    slots = [c_i for c_i in map(int, input().split())]\n    placed = [0] * s\n    cold_slots = sum(1 for c in slots if c < d)\n    optimal_cold = min(cold_slots, m)\n    remaining_students = m - optimal_cold\n    for i in range(s):\n        if remaining_students > 0 and cold_slots + placed[i] < d:\n            placed[i] += min(d - (cold_slots + placed[i]), remaining_students)\n            remaining_students -= min(d - (cold_slots + placed[i]), remaining_students)\n    return ' '.join(map(str, placed))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9946625232696533,
            0.9942014813423157,
            0.9950021505355835,
            0.9920302033424377,
            0.9942221641540527,
            0.9958584308624268,
            0.9943745136260986,
            0.9956556558609009,
            0.9950238466262817,
            0.9946959614753723,
            0.9957539439201355,
            0.9939145445823669,
            0.9956997632980347,
            0.9928632974624634,
            0.9937402009963989,
            0.9945064187049866,
            0.9919919371604919,
            0.9937215447425842,
            0.9954279661178589,
            0.9935529828071594
        ]
    },
    "4286": {
        "similarity": 0.995902419090271,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    special_offers = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        special_offers.append((x, y, w))\n    \n    max_a = max(a)\n    min_cost = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] <= max_a:\n                cost = sum(a[:i]) + sum(a[i+1:j]) + a[i] + a[j]\n                min_cost = min(min_cost, cost)\n    \n    for offer in special_offers:\n        x, y, w = offer\n        if a[x-1] + a[y-1] <= max_a and w < min_cost:\n            min_cost = w\n    \n    print(min_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9889729022979736,
            0.9952015280723572,
            0.9957686066627502,
            0.9946191906929016,
            0.9958267211914062,
            0.9952505230903625,
            0.9945710897445679,
            0.9948453307151794,
            0.995358943939209,
            0.994909405708313,
            0.9939754009246826,
            0.995902419090271,
            0.9930155873298645,
            0.9950404763221741,
            0.9907365441322327,
            0.995639979839325,
            0.9949764609336853,
            0.9881830811500549,
            0.9954352378845215,
            0.9929068684577942
        ]
    },
    "4713": {
        "similarity": 0.9959244132041931,
        "body": "    n = int(input())\n    s = input()\n    x = 0\n    for i in range(n):\n        if s[i] == 'I':\n            x += 1\n        elif s[i] == 'D':\n            x -= 1\n    print(max(x, 0))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956145286560059,
            0.9950959086418152,
            0.9950163960456848,
            0.9927573204040527,
            0.9750068187713623,
            0.9959244132041931,
            0.9950224161148071,
            0.9950765371322632,
            0.9949132204055786,
            0.9956321716308594,
            0.9950485229492188,
            0.9957558512687683,
            0.9944624900817871,
            0.9932761192321777,
            0.9952097535133362,
            0.9941571950912476,
            0.9955077171325684,
            0.9948843121528625,
            0.9955847859382629,
            0.9958975911140442
        ]
    },
    "4698": {
        "similarity": 0.9959788918495178,
        "body": "    n = int(input())\n    times = list(map(int, input().split()))\n    m = int(input())\n    problems = []\n    for _ in range(m):\n        p, x = map(int, input().split())\n        problems.append((p, x))\n    total_times = [sum(t for _, t in zip(range(n+1), times))]\n\n    for drink in range(1, m+1):\n        stimulated_times = [x if i == p else t for i, (p, t) in enumerate(problems)]\n        total_time = sum(stimulated_times)\n        total_times.append(total_time)\n\n    print(*total_times, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955910444259644,
            0.9944126009941101,
            0.988582193851471,
            0.9954448342323303,
            0.993580162525177,
            0.9907939434051514,
            0.9889769554138184,
            0.9959788918495178,
            0.9928660988807678,
            0.9952579140663147,
            0.9955125451087952,
            0.9941248893737793,
            0.9940289855003357,
            0.9957567453384399,
            0.9957559704780579,
            0.9936503171920776,
            0.9946469068527222,
            0.9932146668434143,
            0.9955874085426331,
            0.994648277759552
        ]
    },
    "4841": {
        "similarity": 0.9962592124938965,
        "body": "    bites = [int(input()) for _ in range(n)]\n    prev_count = 0\n    is_sensible = True\n    for bite in bites:\n        if bite == \"mumble\":\n            is_sensible = False\n        elif bite <= prev_count + 1 and bite >= prev_count:\n            prev_count += 1\n        else:\n            is_sensible = False\n    print(\"makes sense\" if is_sensible else \"something is fishy\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960070252418518,
            0.9953258037567139,
            0.9962592124938965,
            0.9933385252952576,
            0.9953820109367371,
            0.9954805970191956,
            0.9931678771972656,
            0.9952857494354248,
            0.9960084557533264,
            0.9960153698921204,
            0.9773637652397156,
            0.9959293007850647,
            0.9954701662063599,
            0.9936051964759827,
            0.9950804710388184,
            0.9949157238006592,
            0.9953354597091675,
            0.9935732483863831,
            0.9929472208023071,
            0.9958930015563965
        ]
    },
    "4865": {
        "similarity": 0.9966334104537964,
        "body": "    for _ in range(n):\n        direction, minutes, hour, minute = map(int, input().split())\n        if direction == 1:\n            new_minute = (minute + minutes) % 60\n            new_hour = (hour + (minutes // 60)) % 24\n        else:\n            new_minute = (minute - minutes) % 60\n            new_hour = (hour - ((-minutes) // 60)) % 24\n        print(f\"{new_hour} {new_minute}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951625466346741,
            0.9965009093284607,
            0.994006335735321,
            0.9965484142303467,
            0.9950624108314514,
            0.9956600666046143,
            0.9954494833946228,
            0.9962288737297058,
            0.9872613549232483,
            0.9963757395744324,
            0.9966334104537964,
            0.9871602654457092,
            0.993495523929596,
            0.9964438080787659,
            0.9963616728782654,
            0.9965352416038513,
            0.996229887008667,
            0.9960817098617554,
            0.995522141456604,
            0.9917156100273132
        ]
    },
    "4957": {
        "similarity": 0.9966830015182495,
        "body": "    grid = [list(input().strip()) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                place_shop = True\n                for x in range(max(0, i-1), min(n, i+2)):\n                    for y in range(max(0, j-1), min(m, j+2)):\n                        if grid[x][y] != '.' and (abs(x-i) + abs(y-j)) <= 1:\n                            place_shop = False\n                            break\n                if place_shop:\n                    grid[i][j] = 'E'\n    \n    for row in grid:\n        print(''.join(row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963517785072327,
            0.9952356219291687,
            0.9966830015182495,
            0.9962212443351746,
            0.9950898885726929,
            0.995963454246521,
            0.9929995536804199,
            0.9959532022476196,
            0.996272623538971,
            0.9958852529525757,
            0.992010235786438,
            0.9937427043914795,
            0.9965705871582031,
            0.9966248273849487,
            0.9950236082077026,
            0.9941480755805969,
            0.9949597120285034,
            0.9929795861244202,
            0.9966055154800415,
            0.9955413341522217
        ]
    },
    "4382": {
        "similarity": 0.9976887106895447,
        "body": "    N = int(input())\n    total_passwords = 1\n    for i in range(3):\n        total_passwords *= (N + 1)\n    print(total_passwords)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972596764564514,
            0.9962866902351379,
            0.9961634278297424,
            0.9942877888679504,
            0.9976335167884827,
            0.9949368834495544,
            0.9973229169845581,
            0.9961413145065308,
            0.9964644908905029,
            0.9969954490661621,
            0.9971081614494324,
            0.9963983297348022,
            0.9976887106895447,
            0.9973114728927612,
            0.997635006904602,
            0.9971415996551514,
            0.9975606799125671,
            0.9973233938217163,
            0.9976887106895447,
            0.9976312518119812
        ]
    },
    "4456": {
        "similarity": 0.9948175549507141,
        "body": "    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n\n    for i in range(n):\n        if p[i] > p[(i+1)%n]:\n            p[i], p[(i+1)%n] = p[(i+1)%n], p[i]\n        if q[i] > q[(i+1)%n]:\n            q[i], q[(i+1)%n] = q[(i+1)%n], q[i]\n\n    distinct_chars = set()\n    for i in range(n):\n        if chr((p[i]-1)%26 + 97) not in distinct_chars:\n            distinct_chars.add(chr((p[i]-1)%26 + 97))\n        if len(distinct_chars) >= k:\n            break\n\n    s = ''\n    for i in range(n):\n        s += chr((q[i]-1)%26 + 97)\n\n    print('YES')\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9823380708694458,
            0.9930494427680969,
            0.9882388710975647,
            0.9926169514656067,
            0.9948175549507141,
            0.9921722412109375,
            0.9934132099151611,
            0.9925755858421326,
            0.9942638278007507,
            0.9936167001724243,
            0.9940581321716309,
            0.9881356954574585,
            0.9913638234138489,
            0.9934138059616089,
            0.9941864013671875,
            0.9929378032684326,
            0.9940402507781982,
            0.9937214255332947,
            0.9919737577438354,
            0.9934840202331543
        ]
    },
    "4594": {
        "similarity": 0.996618390083313,
        "body": "    n = int(input())\n    diameter_sizes = []\n    for _ in range(n):\n        diameter_sizes.append(int(input()))\n    layers = 1\n    prev_diameter = diameter_sizes[0]\n    for current_diameter in diameter_sizes[1:]:\n        if current_diameter > prev_diameter:\n            layers += 1\n        prev_diameter = current_diameter\n    print(layers)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993808925151825,
            0.9949575662612915,
            0.996618390083313,
            0.996515154838562,
            0.9939645528793335,
            0.993812084197998,
            0.9949923157691956,
            0.9950196146965027,
            0.9966142773628235,
            0.9965431094169617,
            0.9955106973648071,
            0.9936879873275757,
            0.9960361123085022,
            0.9962821006774902,
            0.9938225150108337,
            0.9959584474563599,
            0.9944167137145996,
            0.9964738488197327,
            0.9936521649360657,
            0.9806179404258728
        ]
    },
    "4560": {
        "similarity": 0.996638834476471,
        "body": "    n = int(input())\n    a = int(input())\n    for i in range(n//500+1):\n        remaining = n - 500*i\n        if remaining <= a:\n            for j in range(remaining):\n                if j >= a:\n                    return 'No'\n            return 'Yes'\n    return 'No'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966129660606384,
            0.9961678385734558,
            0.9942541718482971,
            0.9944504499435425,
            0.9946946501731873,
            0.9964957237243652,
            0.995827317237854,
            0.9962881803512573,
            0.9929271340370178,
            0.996057391166687,
            0.9961409568786621,
            0.996638834476471,
            0.9930749535560608,
            0.9965215921401978,
            0.9941442608833313,
            0.9965957999229431,
            0.9950043559074402,
            0.9958333373069763,
            0.993996262550354,
            0.9900538921356201
        ]
    },
    "4320": {
        "similarity": 0.9982109069824219,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        x = 1\n        k = 2\n        total = 0\n        while True:\n            for i in range(k):\n                if total + (2**i * x) > n:\n                    break\n            else:\n                print(x)\n                break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975493550300598,
            0.9970209002494812,
            0.9969112873077393,
            0.9979997277259827,
            0.9979073405265808,
            0.997962236404419,
            0.9969265460968018,
            0.9982109069824219,
            0.9981645345687866,
            0.996942400932312,
            0.9975793957710266,
            0.9975306987762451,
            0.9959477782249451,
            0.9976711273193359,
            0.9980978965759277,
            0.9980305433273315,
            0.9975984692573547,
            0.9967734813690186,
            0.9975766539573669,
            0.9971842765808105
        ]
    },
    "4500": {
        "similarity": 0.9960266947746277,
        "body": "    a_yen, b_yen, cost = map(int, input().split())\n    total_wealth = a_yen + b_yen\n    if total_wealth <= cost:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951933026313782,
            0.9954807758331299,
            0.9947132468223572,
            0.9949874877929688,
            0.9951326251029968,
            0.9910426735877991,
            0.9959869384765625,
            0.9934799671173096,
            0.9947240948677063,
            0.9955695271492004,
            0.9950780272483826,
            0.9954295754432678,
            0.9960189461708069,
            0.9946230053901672,
            0.9948428273200989,
            0.9952640533447266,
            0.9956072568893433,
            0.9960266947746277,
            0.9947518706321716,
            0.9959540367126465
        ]
    },
    "4739": {
        "similarity": 0.9978916645050049,
        "body": "    M, N = map(int, input().split())\n    times = list(map(int, input().split()))\n    distances = list(map(int, input().split()))\n\n    speeds = set()\n    for i in range(M - 1):\n        time_diff = times[i + 1] - times[i]\n        speed = (distances[i + 1] - distances[i]) / time_diff\n        speeds.add(speed)\n\n    if len(speeds) == 0:\n        print(0)\n        return\n\n    print(len(speeds))\n\n    for i in range(M - 1):\n        distance = (distances[i + 1] - distances[i])\n        for speed in sorted(list(speeds)):\n            if distance / speed <= times[i + 1] - times[i]:\n                print(distance // speed, end=' ')\n                break",
        "result": "failed: testcase 2",
        "similarities": [
            0.9945791363716125,
            0.9948338270187378,
            0.9968482851982117,
            0.9967460632324219,
            0.9977575540542603,
            0.996792733669281,
            0.9969193339347839,
            0.9973965883255005,
            0.9963330626487732,
            0.9974389672279358,
            0.9975674152374268,
            0.9963918328285217,
            0.9971638917922974,
            0.9977716207504272,
            0.9974046349525452,
            0.9974120259284973,
            0.9975117444992065,
            0.9978916645050049,
            0.9975365400314331,
            0.9972885847091675
        ]
    },
    "4410": {
        "similarity": 0.9968817830085754,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        free_tables = 0\n        for i in range(n):\n            if s[i] == '0':\n                left = max(0, i-k)\n                right = min(n-1, i+k+1)\n                if all(s[j] == '0' for j in range(left, right)):\n                    free_tables += 1\n        print(free_tables)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961687326431274,
            0.995042085647583,
            0.9958584308624268,
            0.9939153790473938,
            0.9942479729652405,
            0.9961541891098022,
            0.9887297749519348,
            0.9958751201629639,
            0.9967580437660217,
            0.9968817830085754,
            0.993503987789154,
            0.9963314533233643,
            0.993727445602417,
            0.9964215159416199,
            0.9965086579322815,
            0.9958615899085999,
            0.9965021014213562,
            0.9963859915733337,
            0.9967876076698303,
            0.9930227398872375
        ]
    },
    "2441": {
        "similarity": 0.996791660785675,
        "body": "    n = int(input())\n    cost = list(map(int, input().split()))\n    m = int(input())\n    roads = []\n    for _ in range(m):\n        road = list(map(int, input().split()))\n        roads.append(road)\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i):\n            if j + 1 not in [u for u, v in roads] or i + 1 not in [v for u, v in roads]:\n                dp[i][i+1] = min(dp[i][i+1], cost[i])\n    total_cost = 0\n    ways = 0\n    for i in range(n):\n        if not any(dp[j][i+1] for j in range(i)):\n            total_cost += cost[i]\n            ways += 1\n    print(total_cost, ways % 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957128167152405,
            0.9960660338401794,
            0.9920281767845154,
            0.989785373210907,
            0.9962403178215027,
            0.9958154559135437,
            0.9943225383758545,
            0.993556559085846,
            0.9954372048377991,
            0.9950131773948669,
            0.9954034090042114,
            0.9960948824882507,
            0.9960513710975647,
            0.9958161115646362,
            0.9956849813461304,
            0.9907324910163879,
            0.995919406414032,
            0.9957360625267029,
            0.9953520894050598,
            0.996791660785675
        ]
    },
    "276": {
        "similarity": 0.9965904951095581,
        "body": "    n = int(input())\n    colors = [input().strip() for _ in range(n)]\n    absent_names = ['Time', 'Space']\n    \n    if 'red' not in colors:\n        absent_names.append('Reality')\n    if 'purple' not in colors:\n        absent_names.append('Power')\n    if 'yellow' not in colors:\n        absent_names.append('Mind')\n    if 'orange' not in colors:\n        absent_names.append('Soul')\n    \n    print(len(absent_names))\n    for name in absent_names:\n        print(name)",
        "result": "failed: testcase 2",
        "similarities": [
            0.9938141703605652,
            0.9962843060493469,
            0.9964156150817871,
            0.9956956505775452,
            0.9954645037651062,
            0.9960539937019348,
            0.9950686097145081,
            0.9938226342201233,
            0.9961461424827576,
            0.9955273866653442,
            0.9965904951095581,
            0.9947656393051147,
            0.99564129114151,
            0.9954966306686401,
            0.9955325722694397,
            0.9959614276885986,
            0.9818944334983826,
            0.9955843687057495,
            0.9945909380912781,
            0.9963667988777161
        ]
    },
    "2635": {
        "similarity": 0.9970873594284058,
        "body": "    if not matrix or not matrix[0]:\n        return []\n    m, n = len(matrix), len(matrix[0])\n    top, bottom, left, right = 0, m-1, 0, n-1\n    result = []\n    while True:\n        for i in range(left, right+1):\n            result.append(matrix[top][i])\n        if (top == bottom):\n            break\n        for i in range(top, bottom):\n            result.append(matrix[i][right])\n        if (left == right):\n            break\n        for i in range(right, left-1, -1):\n            result.append(matrix[bottom][i])\n        if (top == bottom):\n            break\n        for i in range(bottom, top+1, -1):\n            result.append(matrix[i][left])\n        return result",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970873594284058,
            0.9946767687797546,
            0.996722400188446,
            0.9956965446472168,
            0.9943769574165344,
            0.9937629699707031,
            0.9964159727096558,
            0.9950485229492188,
            0.9953787922859192,
            0.997044026851654,
            0.9966063499450684,
            0.9960561394691467,
            0.9963874816894531,
            0.9944311380386353,
            0.9967440366744995,
            0.9970157146453857,
            0.9963101744651794,
            0.9958500266075134,
            0.996904194355011,
            0.9831802248954773
        ]
    },
    "281": {
        "similarity": 0.9952571392059326,
        "body": "import math\n\n    a, b = map(int, input().split())\n    count = 0\n    for i in range(a, b + 1):\n        if i <= 0:\n            total = 1\n        else:\n            total = 1\n            for j in range(2, i + 1):\n                total *= j\n        count += (total // math.factorial(i)) % 10\n\n    return count",
        "result": "timed out",
        "similarities": [
            0.9940261840820312,
            0.9924731254577637,
            0.9926267862319946,
            0.9927057027816772,
            0.9934142231941223,
            0.9923584461212158,
            0.9932551383972168,
            0.994430661201477,
            0.9937688708305359,
            0.9949553608894348,
            0.9950505495071411,
            0.9943156838417053,
            0.985296368598938,
            0.9922423362731934,
            0.9916074872016907,
            0.9951240420341492,
            0.9952571392059326,
            0.9951795339584351,
            0.9951515197753906,
            0.9945042133331299
        ]
    },
    "2300": {
        "similarity": 0.9984050393104553,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    for _ in range(m):\n        op_type = int(input())\n        if op_type == 1:\n            x, v = map(int, input().split())\n            a[x] = v\n        elif op_type == 2:\n            l, r = map(int, input().split())\n            total = sum(a[i] for i in range(l, r+1))\n            print(total % 10**9)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9977338910102844,
            0.9961593151092529,
            0.9984050393104553,
            0.998253583908081,
            0.9982839226722717,
            0.9978153109550476,
            0.9983091950416565,
            0.997227132320404,
            0.9983407855033875,
            0.9979052543640137,
            0.9954106211662292,
            0.9980534315109253,
            0.9976335167884827,
            0.9974955320358276,
            0.9980844259262085,
            0.9980689883232117,
            0.9980002045631409,
            0.996038556098938,
            0.9978790283203125,
            0.9971094727516174
        ]
    },
    "2104": {
        "similarity": 0.9974658489227295,
        "body": "    l, r = map(int, input().split())\n    if (r - l) % 2 == 1:\n        return \"NO\"\n    pairs = []\n    for i in range(l, r + 1):\n        is_first = True\n        for j in range(i - 1, l - 1, -1):\n            if (i - j) % 2 == 0 and (j - l) % 4 == 0:\n                pairs.append((i, j))\n                is_first = False\n                break\n        if is_first:\n            pairs.append((i, i + 1))\n    print(\"YES\")\n    for pair in pairs:\n        print(*pair)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957807660102844,
            0.996474027633667,
            0.9968630075454712,
            0.9962639212608337,
            0.9962256550788879,
            0.996895968914032,
            0.9956151247024536,
            0.9969063997268677,
            0.9953415393829346,
            0.9944534301757812,
            0.9968998432159424,
            0.9971182942390442,
            0.9967177510261536,
            0.9946865439414978,
            0.9972278475761414,
            0.9948903322219849,
            0.9949478507041931,
            0.9974658489227295,
            0.9961431622505188,
            0.9962301850318909
        ]
    },
    "1995": {
        "similarity": 0.9973877668380737,
        "body": "    s = input()\n    m = int(input())\n    for _ in range(m):\n        l, r, k = map(int, input().split())\n        temp = s[l-1:r]\n        s = s[:l-1] + temp[-k:] + temp[:-k]\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995488703250885,
            0.9967906475067139,
            0.997328519821167,
            0.9969097971916199,
            0.9967309832572937,
            0.9966326355934143,
            0.9954773783683777,
            0.9971230030059814,
            0.9966354370117188,
            0.9948194622993469,
            0.9936947226524353,
            0.9963035583496094,
            0.996915340423584,
            0.9973877668380737,
            0.9946513772010803,
            0.996368408203125,
            0.9942044615745544,
            0.9954773783683777,
            0.9943692088127136,
            0.9923489093780518
        ]
    },
    "2064": {
        "similarity": 0.9962282776832581,
        "body": "    max_num = 0\n    for i in range(10):\n        num_str = ''\n        for j in range(len(str(i))):\n            if j < i:\n                num_str += '1'\n            else:\n                num_str += '0'\n        max_num = max(max_num, int(num_str))\n    print(max_num)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9945632815361023,
            0.9946281313896179,
            0.9957159161567688,
            0.9951195120811462,
            0.9942452311515808,
            0.9950976967811584,
            0.9954455494880676,
            0.9938774108886719,
            0.9962282776832581,
            0.995979905128479,
            0.9956842064857483,
            0.9955282807350159,
            0.9955874085426331,
            0.9951533079147339,
            0.9931622743606567,
            0.995218813419342,
            0.9907986521720886,
            0.9951913952827454,
            0.9933587312698364,
            0.9960694909095764
        ]
    },
    "1715": {
        "similarity": 0.9959664940834045,
        "body": "    A, B, Q = map(int, input().split())\n    shrines = sorted([int(input()) for _ in range(A)])\n    temples = sorted([int(input()) for _ in range(B)])\n    x = [int(input()) for _ in range(Q)]\n    min_distances = []\n    \n    for xi in x:\n        left, right = 0, max(shrines) + max(temples)\n        while left <= right:\n            mid = (left + right) // 2\n            if mid > xi: right = mid - 1\n            else: left = mid + 1\n            \n        for shrine in shrines:\n            if shrine >= xi and (shrines[0] == shrine or shrine < left):\n                min_distance = abs(shrine - xi)\n                break\n        else:\n            for temple in temples:\n                if temple >= xi and (temples[0] == temple or temple < left):\n                    min_distance = abs(temple - xi)\n                    break\n        \n        min_distances.append(min_distance)\n\n    print(*min_distances, sep='\\n')",
        "result": "timed out",
        "similarities": [
            0.9939945936203003,
            0.9945590496063232,
            0.9949629902839661,
            0.9957847595214844,
            0.9923110008239746,
            0.9916510581970215,
            0.9929625988006592,
            0.9958763122558594,
            0.9913091063499451,
            0.9941235780715942,
            0.9936404824256897,
            0.9936618804931641,
            0.9935073852539062,
            0.9946080446243286,
            0.9938706159591675,
            0.9959664940834045,
            0.9952747821807861,
            0.9932287335395813,
            0.9957528710365295,
            0.9958558678627014
        ]
    },
    "2074": {
        "similarity": 0.9963592886924744,
        "body": "my_function = []\n    n, m = map(int, input().split())\n    costs = [list(map(int, input().split())) for _ in range(n)]\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(m):\n            cost = min(costs[i])\n            if cost < min_cost:\n                min_cost = cost\n    print(min_cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952878355979919,
            0.9953703880310059,
            0.9891263246536255,
            0.9958423972129822,
            0.996343731880188,
            0.9949695467948914,
            0.9957727193832397,
            0.9952222108840942,
            0.9763051271438599,
            0.9963176250457764,
            0.9956167936325073,
            0.9962243437767029,
            0.9957505464553833,
            0.9952617287635803,
            0.9960588216781616,
            0.9963592886924744,
            0.9954129457473755,
            0.9960381388664246,
            0.9961980581283569,
            0.9962694048881531
        ]
    },
    "2921": {
        "similarity": 0.9962192177772522,
        "body": "    drinks = []\n    for _ in range(d):\n        name, strength, size, cost = input().split()\n        strength = int(strength)\n        if size == '1/3':\n            size_value = 0.33\n        elif size == '1/2':\n            size_value = 0.5\n        else:\n            size_value = 1\n        drinks.append((name, strength, size_value, float(cost)))\n    for name, strength, size_value, cost in drinks:\n        if m >= cost and u >= (strength / 100) * size_value:\n            m -= cost\n            u -= (strength / 100) * size_value\n            print(f\"{name} {int(size_value * (u / ((strength / 100) * size_value)))}\")\n    if m > 0 or u > 0:\n        print(\"IMPOSSIBLE\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962192177772522,
            0.9937077760696411,
            0.9805413484573364,
            0.9950395822525024,
            0.9948808550834656,
            0.9945597648620605,
            0.9945765137672424,
            0.9943845868110657,
            0.9958622455596924,
            0.9957506060600281,
            0.9958974123001099,
            0.995181143283844,
            0.9956510663032532,
            0.9959941506385803,
            0.9944387674331665,
            0.9934319257736206,
            0.9952178001403809,
            0.99505615234375,
            0.9960857033729553,
            0.994073748588562
        ]
    },
    "1642": {
        "similarity": 0.9964388608932495,
        "body": "import math\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    max_d = 0\n    for i in range(1, n):\n        x1, y1 = points[0]\n        x2, y2 = points[i]\n        for j in range(i+1, n):\n            x3, y3 = points[j]\n            d = ((x2-x1)*(y3-y1) - (x3-x1)*(y2-y1)) / (max(abs(x2-x1), abs(x3-x1)))\n            if d > max_d:\n                max_d = d\n    return min(max_d, 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943996071815491,
            0.9960296154022217,
            0.9954493641853333,
            0.9915534853935242,
            0.9908049702644348,
            0.994574785232544,
            0.9958086609840393,
            0.9946272969245911,
            0.9964388608932495,
            0.9955994486808777,
            0.992401123046875,
            0.9955739378929138,
            0.9919760823249817,
            0.9951539635658264,
            0.9933246970176697,
            0.9941846132278442,
            0.9950692057609558,
            0.9956053495407104,
            0.9921148419380188,
            0.9941274523735046
        ]
    },
    "947": {
        "similarity": 0.9958717226982117,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = 1\n        b = n - 1\n        lcm = b\n        while True:\n            if n % (a + b) == 0 and (n // (a + b)) * (a + b) == n:\n                break\n            a += 1\n        print(a, b)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9933383464813232,
            0.9936457276344299,
            0.995845377445221,
            0.9938366413116455,
            0.9940087199211121,
            0.9913029074668884,
            0.9940232038497925,
            0.9939324259757996,
            0.993216872215271,
            0.9951810240745544,
            0.9948137998580933,
            0.9931286573410034,
            0.9915589094161987,
            0.9945999979972839,
            0.9958717226982117,
            0.9956313967704773,
            0.9909586906433105,
            0.9942823052406311,
            0.9938626885414124,
            0.9948182702064514
        ]
    },
    "743": {
        "similarity": 0.993297278881073,
        "body": "import sys\n\n    n = int(input())\n    numbers = [int(num) for num in input().split()]\n    for _ in range(n-1):\n        for i in range(1, n):\n            if numbers[0] > numbers[i]:\n                numbers[0] -= numbers[i]\n                break\n    return sum(numbers)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9921735525131226,
            0.9872134327888489,
            0.993018627166748,
            0.9913994669914246,
            0.9805395007133484,
            0.988927960395813,
            0.9905692934989929,
            0.9895317554473877,
            0.9836365580558777,
            0.9892215728759766,
            0.9903414845466614,
            0.993297278881073,
            0.9928660988807678,
            0.9875745177268982,
            0.9866925477981567,
            0.9805115461349487,
            0.9891175627708435,
            0.9927965402603149,
            0.9906747937202454,
            0.9889813661575317
        ]
    },
    "1397": {
        "similarity": 0.9961841106414795,
        "body": "    n, m = map(int, input().split())\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    s = 0\n    visited = set()\n    for i in range(1, n + 1):\n        if i not in visited:\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                if node not in visited:\n                    visited.add(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n\n    print(len(visited) - 1)\n    for i, j in zip(*[set((i, j) for i in range(1, n + 1) for j in set(graph[i]) if i != j)]):\n        if (i, j) not in [(a, b) for a, b in zip(*[map(int, input().split()) for _ in range(m)])]:\n            print(i, j)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961841106414795,
            0.9951722025871277,
            0.9931955933570862,
            0.9951071739196777,
            0.9942653179168701,
            0.9786510467529297,
            0.9954867362976074,
            0.9954185485839844,
            0.9936511516571045,
            0.9947913289070129,
            0.99462890625,
            0.9950504302978516,
            0.9949706196784973,
            0.9943048357963562,
            0.9943984150886536,
            0.9952097535133362,
            0.9954894185066223,
            0.9954391121864319,
            0.9942823648452759,
            0.9955748319625854
        ]
    },
    "1144": {
        "similarity": 0.9936254620552063,
        "body": "    n = int(input())\n    s = input()\n    m = int(input())\n    \n    replacements = 0\n    for i in range(n - m + 1):\n        if '?' not in s[i:i+m]:\n            continue\n        for j in range(m):\n            if (j % 2 == 0 and s[i+j] != 'b') or (j % 2 == 1 and s[i+j] != 'a'):\n                replacements += 1\n                break\n    \n    print(replacements)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9933339357376099,
            0.9906215667724609,
            0.9906633496284485,
            0.987160861492157,
            0.9903831481933594,
            0.990482747554779,
            0.9923874735832214,
            0.9934818148612976,
            0.9922473430633545,
            0.9935823082923889,
            0.9920602440834045,
            0.9936254620552063,
            0.9807305932044983,
            0.9907971620559692,
            0.9930922985076904,
            0.9933640360832214,
            0.9894223809242249,
            0.9933693408966064,
            0.9879264831542969,
            0.9817642569541931
        ]
    },
    "890": {
        "similarity": 0.9974783062934875,
        "body": "    n, l, r, x = map(int, input().split())\n    difficulties = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_difficulty = sum(difficulties[i:j+1])\n            difficulty_range = max(difficulties[i:j+1]) - min(difficulties[i:j+1])\n            if l <= total_difficulty <= r and x <= difficulty_range:\n                count += 1\n    print(count)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9958651661872864,
            0.9959172606468201,
            0.9936793446540833,
            0.9970528483390808,
            0.9959325194358826,
            0.996536374092102,
            0.996427059173584,
            0.9942355155944824,
            0.9960539937019348,
            0.9962037801742554,
            0.9970725178718567,
            0.996906578540802,
            0.9973210692405701,
            0.9924501180648804,
            0.9973393678665161,
            0.9924266338348389,
            0.9966149926185608,
            0.9955137372016907,
            0.9974783062934875,
            0.9969403147697449
        ]
    },
    "2410": {
        "similarity": 0.9980764985084534,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        sum_yasser = sum(a)\n        sum_adel = 0\n        for i in range(1, n+1):\n            sum_adel += a[i-1]\n            if sum_yasser <= sum_adel:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9979281425476074,
            0.9979230165481567,
            0.9978730082511902,
            0.995430588722229,
            0.9978325366973877,
            0.9968962669372559,
            0.9980764985084534,
            0.9978489279747009,
            0.9979714155197144,
            0.9927303791046143,
            0.9953727722167969,
            0.9965687990188599,
            0.9979993104934692,
            0.9972211122512817,
            0.9980151653289795,
            0.9979786276817322,
            0.9941595196723938,
            0.9968673586845398,
            0.9960058331489563,
            0.9971821308135986
        ]
    },
    "1004": {
        "similarity": 0.9972267150878906,
        "body": "    n = int(input())\n    events = [int(x) for x in input().split()]\n    days = []\n    day = []\n    for event in events:\n        if not day or event < 0 and -event <= len(day):\n            day.append(event)\n        else:\n            if day:\n                days.append(len(day))\n            day = [event]\n    if day:\n        days.append(len(day))\n    if len(days) == 1:\n        print(-1)\n    else:\n        print(len(days), end='\\n')\n        print(*days, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.997006893157959,
            0.9935085773468018,
            0.9947725534439087,
            0.993732750415802,
            0.9958847761154175,
            0.9952083230018616,
            0.9969131946563721,
            0.9965838193893433,
            0.995031476020813,
            0.9972267150878906,
            0.9948737621307373,
            0.995734453201294,
            0.9955589175224304,
            0.9951513409614563,
            0.9968886971473694,
            0.9969465136528015,
            0.9963139891624451,
            0.9955529570579529,
            0.9963366985321045,
            0.9943687319755554
        ]
    },
    "531": {
        "similarity": 0.9961732625961304,
        "body": "    n = int(input())\n    x_values = [int(x) for x in input().split()]\n    max_x = max(x_values)\n    min_x = min(x_values)\n    avg_x = sum(x_values) // n\n    avg_y = avg_x\n    equal_count = 0\n    y_values = []\n    \n    for x in x_values:\n        if x == avg_x or abs(x - avg_y) <= 2:\n            y_values.append(avg_y)\n            avg_y -= (avg_y - min_x) // (n - 1)\n            equal_count += 1\n        else:\n            y_values.append(min_x + (max_x - min_x) // (n - 1))\n    \n    print(equal_count)\n    print(' '.join(map(str, y_values)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926939606666565,
            0.993996262550354,
            0.9873985648155212,
            0.9957018494606018,
            0.9904320240020752,
            0.9939069151878357,
            0.9923229217529297,
            0.9939359426498413,
            0.9951940774917603,
            0.9955018758773804,
            0.9943597912788391,
            0.9878262281417847,
            0.9956024885177612,
            0.99432772397995,
            0.9961732625961304,
            0.9927212595939636,
            0.9939203858375549,
            0.9956056475639343,
            0.9924318194389343,
            0.9960066080093384
        ]
    },
    "510": {
        "similarity": 0.9912147521972656,
        "body": "    a, b, c, d = map(int, input().split())\n    duration = 0\n    for _ in range(max(a, b, c)):\n        if a <= b + d - 1:\n            a += 1\n        elif b <= c + d - 1:\n            b += 1\n        else:\n            c += 1\n        duration += 1\n    return duration",
        "result": "timed out",
        "similarities": [
            0.9337312579154968,
            0.9892922639846802,
            0.9898977875709534,
            0.9879770874977112,
            0.9883995056152344,
            0.9897927045822144,
            0.9812939167022705,
            0.9905816316604614,
            0.9911280274391174,
            0.9895016551017761,
            0.989982008934021,
            0.990558922290802,
            0.9875718951225281,
            0.9855204224586487,
            0.9895764589309692,
            0.9889966249465942,
            0.9877070188522339,
            0.9912147521972656,
            0.9646211862564087,
            0.987445056438446
        ]
    },
    "2555": {
        "similarity": 0.9965158104896545,
        "body": "    for _ in range(t):\n        n, q = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = [i for i in range(1, n+1)]\n        strength = 0\n        for op in range(q):\n            l, r = map(int, input().split())\n            if l > r:\n                l, r = r, l\n            b[l-1], b[r-1] = b[r-1], b[l-1]\n            new_strength = sum((-1)**i*a[b[i-1]] for i in range(1, len(b)))\n            print(strength, end=' ')\n            strength = new_strength\n        print(strength)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963459372520447,
            0.9951551556587219,
            0.9965158104896545,
            0.9964398741722107,
            0.993558406829834,
            0.9936378002166748,
            0.9947436451911926,
            0.9945260882377625,
            0.995019793510437,
            0.9953765869140625,
            0.9943150877952576,
            0.9943851828575134,
            0.9943535327911377,
            0.9961954355239868,
            0.9921451210975647,
            0.996152400970459,
            0.9962792992591858,
            0.9945143461227417,
            0.9957407712936401,
            0.9963698983192444
        ]
    },
    "324": {
        "similarity": 0.9961718320846558,
        "body": "import math\n\n    for a in range(2, n + 1):\n        for b in range(a - n, a + 1):\n            if all(i <= math.sqrt(b) for i in range(2, int(math.sqrt(b)) + 1)):\n                if b > 1 and a % b != 0:\n                    print(a, b)\n                    return",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945688843727112,
            0.9910718202590942,
            0.9955942034721375,
            0.9938585162162781,
            0.9961481690406799,
            0.9942494630813599,
            0.9957783222198486,
            0.9950650930404663,
            0.9944575428962708,
            0.9952858686447144,
            0.9944349527359009,
            0.9957775473594666,
            0.9960764050483704,
            0.9934517741203308,
            0.9951726198196411,
            0.9953900575637817,
            0.9933788180351257,
            0.9943801760673523,
            0.9961718320846558,
            0.9950846433639526
        ]
    },
    "2912": {
        "similarity": 0.9981843829154968,
        "body": "    n = int(input())\n    strings = [input() for _ in range(n)]\n    operations = []\n    for _ in range(n - 1):\n        a, b = map(int, input().split())\n        if len(strings[b]) > 0:\n            strings[a] += strings[b]\n            strings[b] = \"\"\n    return strings[-1]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9981843829154968,
            0.9978715777397156,
            0.9973728656768799,
            0.9959638714790344,
            0.9979491829872131,
            0.9966455101966858,
            0.9981077909469604,
            0.9950749278068542,
            0.9979144930839539,
            0.9973843097686768,
            0.9953402280807495,
            0.9962509870529175,
            0.9973843097686768,
            0.9963077902793884,
            0.9979329705238342,
            0.9979268908500671,
            0.9979268908500671,
            0.9952960014343262,
            0.9976322650909424,
            0.9981207847595215
        ]
    },
    "9": {
        "similarity": 0.9960801005363464,
        "body": "    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    \n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n    \n    for i in range(d):\n        left = any(x <= sofas[j][0] for j in range(i)) and not any(soapas[k][0] < x for k in range(i+1))\n        right = any(x >= sofas[j][2] for j in range(i)) and not any(soapas[k][2] > x for k in range(i+1))\n        top = any(y <= sofas[j][1] for j in range(i)) and not any(soapas[k][1] < y for k in range(i+1))\n        bottom = any(y >= sofas[j][3] for j in range(i)) and not any(soapas[k][3] > y for k in range(i+1))\n\n        if left == cnt_l and right == cnt_r and top == cnt_t and bottom == cnt_b:\n            return i + 1\n    \n    return -1\n\nprint(find_sofa())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9919702410697937,
            0.9952474236488342,
            0.995785653591156,
            0.9951993227005005,
            0.9959735870361328,
            0.9948071837425232,
            0.9928802847862244,
            0.9960801005363464,
            0.9958161115646362,
            0.9954966306686401,
            0.993553876876831,
            0.9941692352294922,
            0.9926069378852844,
            0.9951671957969666,
            0.9935964345932007,
            0.9955007433891296,
            0.9957291483879089,
            0.9947965741157532,
            0.9939149618148804,
            0.9949015378952026
        ]
    },
    "249": {
        "similarity": 0.9962109327316284,
        "body": "    n, l, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    v = 0\n    for i in range(1, len(a)):\n        if abs(a[i] - a[0]) > x and abs(a[i] - a[-1]) > y:\n            v += 1\n        elif a[i] - a[0] > x or a[-1] - a[i] > y:\n            break\n    \n    print(v, end=' ')\n    \n    for _ in range(v):\n        print(int((x + y) / 2), end=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959584474563599,
            0.9951716065406799,
            0.9902653098106384,
            0.9939665794372559,
            0.9943130016326904,
            0.9958914518356323,
            0.9958410859107971,
            0.9954467415809631,
            0.9941173195838928,
            0.9931203126907349,
            0.9955908060073853,
            0.9953607320785522,
            0.9931897521018982,
            0.9950083494186401,
            0.9950313568115234,
            0.9953903555870056,
            0.9962109327316284,
            0.9889209270477295,
            0.9958337545394897,
            0.9932397603988647
        ]
    },
    "2999": {
        "similarity": 0.9975295066833496,
        "body": "    n, s = map(int, input().split())\n    participants = {}\n    for _ in range(n):\n        t, b = input().split()\n        b = int(b)\n        if b not in participants:\n            participants[b] = [t]\n        else:\n            participants[b].append(t)\n\n    total = 0\n    winners = []\n    for amount in sorted(participants.keys(), reverse=True):\n        total += amount\n        if total >= s:\n            winners.extend(participants[amount])\n            break\n\n    print(len(winners))\n    for winner in winners:\n        print(winner)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957062602043152,
            0.9961313009262085,
            0.9956466555595398,
            0.996955394744873,
            0.9969369769096375,
            0.9974043965339661,
            0.9914781451225281,
            0.9973903298377991,
            0.9941421151161194,
            0.9950802326202393,
            0.9933628439903259,
            0.9970028400421143,
            0.9972512125968933,
            0.9975295066833496,
            0.9950802326202393,
            0.9963728189468384,
            0.9954069256782532,
            0.9973978996276855,
            0.9963133931159973,
            0.9959999918937683
        ]
    },
    "2239": {
        "similarity": 0.997111976146698,
        "body": "    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        roll = 0\n        while True:\n            points = sum(min(7, i+1) for i in range(x))\n            if points == x:\n                break\n            roll += 1\n        print(roll)",
        "result": "timed out",
        "similarities": [
            0.995914876461029,
            0.997111976146698,
            0.9968065023422241,
            0.9892725944519043,
            0.995082437992096,
            0.9963825941085815,
            0.9936718344688416,
            0.9969269633293152,
            0.9961923360824585,
            0.9961062073707581,
            0.9963628053665161,
            0.9965234994888306,
            0.9962947368621826,
            0.9960443377494812,
            0.9970963001251221,
            0.9963890910148621,
            0.9967218041419983,
            0.9937898516654968,
            0.9952923655509949,
            0.9959273338317871
        ]
    },
    "2615": {
        "similarity": 0.9966633319854736,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        count = 0\n        k1 = 0\n        k2 = 0\n        k3 = 0\n        i = 2\n        while i <= n:\n            if n % i == 0 and n // i > 1:\n                if i == 2:\n                    k1 += n // i\n                elif i == 3:\n                    k2 += n // i\n                else:\n                    k3 += n // i\n            i += 1\n        for k in range(1, min(k1 + 1, k2 + 1, k3 + 1)):\n            if k % (k1 // k) == 0 and k % (k2 // k) == 0 and k % (k3 // k) == 0:\n                count += 1\n        print(count)",
        "result": "timed out",
        "similarities": [
            0.9959260821342468,
            0.9965187907218933,
            0.9923619627952576,
            0.9906818866729736,
            0.9965257048606873,
            0.9966633319854736,
            0.9940145611763,
            0.9949017763137817,
            0.9942799806594849,
            0.9947085976600647,
            0.9945456981658936,
            0.9928499460220337,
            0.9963516592979431,
            0.9962379336357117,
            0.994883120059967,
            0.9950238466262817,
            0.9960196614265442,
            0.9954241514205933,
            0.9945400953292847,
            0.9957339763641357
        ]
    },
    "2542": {
        "similarity": 0.9972256422042847,
        "body": "    t = int(input())\n    for _ in range(t):\n        s = str(input())\n        erase_count = 0\n        left_shift = s[1:]\n        right_shift = s[-1] + s[:-1]\n        while not left_shift == right_shift:\n            if left_shift < right_shift:\n                left_shift += s[0]\n            else:\n                right_shift = right_shift[-1] + right_shift[:-1]\n            erase_count += 1\n        print(erase_count)",
        "result": "timed out",
        "similarities": [
            0.9954858422279358,
            0.9913589954376221,
            0.9960532784461975,
            0.9969432353973389,
            0.9968829154968262,
            0.9972256422042847,
            0.9961636066436768,
            0.9971894025802612,
            0.9968458414077759,
            0.993598461151123,
            0.9927803874015808,
            0.997157633304596,
            0.996311604976654,
            0.9959134459495544,
            0.9950206279754639,
            0.9967285990715027,
            0.9959156513214111,
            0.997028648853302,
            0.9951364398002625,
            0.9969123005867004
        ]
    },
    "511": {
        "similarity": 0.9972164630889893,
        "body": "import math\n\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n    result = 0\n    for i in range(y + 1):\n        if i == 0:\n            result = 0\n        else:\n            result = 1 + gcd(x, i)\n    return result",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953998923301697,
            0.9964853525161743,
            0.9958122968673706,
            0.9952262043952942,
            0.9952289462089539,
            0.9953491687774658,
            0.9963485598564148,
            0.9946685433387756,
            0.9972164630889893,
            0.9912462830543518,
            0.9948495626449585,
            0.9939890503883362,
            0.9964853525161743,
            0.9971073865890503,
            0.9960082173347473,
            0.9959640502929688,
            0.9946492910385132,
            0.996688723564148,
            0.9964010119438171,
            0.996160626411438
        ]
    },
    "1409": {
        "similarity": 0.99383544921875,
        "body": "    students = [int(input()) for _ in range(n)]\n    count = 0\n    for i in range(5 - k + 1):\n        unique_students = set()\n        for j in range(i, n - 2):\n            if students[j] >= k:\n                unique_students.add(students[j])\n                students[j] -= 1\n                if len(unique_students) == 3:\n                    count += 1\n    return count",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918346405029297,
            0.9886760711669922,
            0.9794718027114868,
            0.992554247379303,
            0.9932885766029358,
            0.9928731322288513,
            0.9914054870605469,
            0.9904500246047974,
            0.9881117939949036,
            0.991935133934021,
            0.9893276691436768,
            0.99359530210495,
            0.9910332560539246,
            0.9932425618171692,
            0.9912946820259094,
            0.9933072328567505,
            0.99383544921875,
            0.9678353071212769,
            0.9932243227958679,
            0.9931138753890991
        ]
    },
    "2274": {
        "similarity": 0.995955228805542,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        directions = [list(input()) for _ in range(n)]\n        changed = 0\n        for i in range(n-1):\n            for j in range(m):\n                if (i+1 == n and j+1 < m) or (j+1 >= m):\n                    continue\n                if directions[i][j] == 'D' and directions[i+1][j] != 'R':\n                    changed += 1\n        print(changed)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930120706558228,
            0.9921439290046692,
            0.994176983833313,
            0.995955228805542,
            0.995410144329071,
            0.9952318072319031,
            0.9933016896247864,
            0.9878172874450684,
            0.9948128461837769,
            0.9934772849082947,
            0.993892252445221,
            0.9945812225341797,
            0.9937642812728882,
            0.9943824410438538,
            0.9915005564689636,
            0.9952191114425659,
            0.9918602705001831,
            0.9938820600509644,
            0.9920071959495544,
            0.9924089312553406
        ]
    },
    "2420": {
        "similarity": 0.9961410164833069,
        "body": "    n, r = map(int, input().split())\n    covered = 0\n    max_covered = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        for i in range(-r, r+1):\n            for j in range(-r, r+1):\n                if abs(x-i) + abs(y-j) <= r:\n                    covered += 1\n        max_covered = max(max_covered, covered)\n    print(max_covered)",
        "result": "timed out",
        "similarities": [
            0.9860861897468567,
            0.9961410164833069,
            0.9953729510307312,
            0.9920677542686462,
            0.9946297407150269,
            0.9934192299842834,
            0.9934395551681519,
            0.9950326681137085,
            0.9899687767028809,
            0.9955112934112549,
            0.9954565167427063,
            0.9951972961425781,
            0.9940933585166931,
            0.9928919076919556,
            0.9956252574920654,
            0.9937393069267273,
            0.995483934879303,
            0.9934428334236145,
            0.9957614541053772,
            0.9936408996582031
        ]
    },
    "1267": {
        "similarity": 0.9961006045341492,
        "body": "    n = int(input())\n    scores = list(map(int, input().split()))\n    \n    awarded = False\n    for i in range(n):\n        if scores[i] > 0:\n            awarded = True\n            break\n    \n    ways = 1\n    for score in set(scores):\n        if score > 0 and not awarded:\n            ways *= sum(1 for s in scores if s >= score)\n    \n    print(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.993953287601471,
            0.9945905804634094,
            0.9930958151817322,
            0.995766818523407,
            0.9958499073982239,
            0.9952181577682495,
            0.9927529692649841,
            0.9951151609420776,
            0.9957156181335449,
            0.9937029480934143,
            0.9949017763137817,
            0.9941784739494324,
            0.9954961538314819,
            0.9900739789009094,
            0.9931910634040833,
            0.9938504099845886,
            0.9949640035629272,
            0.9961006045341492,
            0.9910241961479187,
            0.9947879314422607
        ]
    },
    "2356": {
        "similarity": 0.9975816607475281,
        "body": "    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if j - a[j] == i - a[i]:\n                return False\n    return True\n\nn = int(input())\nfor _ in range(n):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    while not is_good_array(a):\n        a = sorted(a)\n        if a[0] == 1:\n            a.reverse()\n        else:\n            break\n    print(' '.join(map(str, a)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970028400421143,
            0.9975816607475281,
            0.9973364472389221,
            0.9966862201690674,
            0.9967926740646362,
            0.9962611794471741,
            0.997363269329071,
            0.9958058595657349,
            0.9971944093704224,
            0.9974637627601624,
            0.9963949918746948,
            0.9960796236991882,
            0.9969033002853394,
            0.9944111704826355,
            0.9970265626907349,
            0.9967701435089111,
            0.9963937401771545,
            0.996504545211792,
            0.9973873496055603,
            0.9924986958503723
        ]
    },
    "108": {
        "similarity": 0.9956094026565552,
        "body": "    s = input()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    moves_made = 0\n    new_s = ''\n    for char in s:\n        while char < alphabet[moves_made % len(alphabet)]:\n            new_s += chr(ord(char) + 1)\n            moves_made += 1\n        new_s += char\n    if set(new_s).issubset(set(alphabet)):\n        print(new_s)\n    else:\n        print('-1')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9907248616218567,
            0.9932812452316284,
            0.9949164390563965,
            0.9956094026565552,
            0.9950938820838928,
            0.9941526651382446,
            0.9932993650436401,
            0.9942620992660522,
            0.9944251179695129,
            0.9927228689193726,
            0.9951022267341614,
            0.994057297706604,
            0.9954547882080078,
            0.9938763976097107,
            0.9879378080368042,
            0.9912784099578857,
            0.9953207969665527,
            0.9953824281692505,
            0.9951282143592834,
            0.995563805103302
        ]
    },
    "1833": {
        "similarity": 0.9970431923866272,
        "body": "    n = int(input())\n    a = [int(i) for i in input().split()]\n    MOD = 10**9 + 7\n    ans = 1\n    for i in range(2, n+1):\n        curr_count = 0\n        for j in range(n-i+1):\n            if a[j] % i == 0:\n                curr_count += 1\n        ans *= (curr_count + 1)\n        ans %= MOD\n    print(ans)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945090413093567,
            0.9943858981132507,
            0.9967090487480164,
            0.9966685771942139,
            0.9970431923866272,
            0.9958146810531616,
            0.996189534664154,
            0.99051433801651,
            0.9965357780456543,
            0.9959236979484558,
            0.9966852068901062,
            0.9964981079101562,
            0.9967332482337952,
            0.9922583699226379,
            0.9926106333732605,
            0.9949384927749634,
            0.9962461590766907,
            0.9950386881828308,
            0.9965927004814148,
            0.9939645528793335
        ]
    },
    "2324": {
        "similarity": 0.9964358806610107,
        "body": "    s = input()\n    n = len(s)\n    result = [0] * (n + 1)\n\n    for i in range(n):\n        half_len = min(i // 2, n - i - 1)\n        for j in range(half_len):\n            left_half = s[j:i//2+j]\n            right_half = s[i//2+j:]\n            if left_half == left_half[::-1] and right_half == right_half[::-1]:\n                k = len(left_half) + 1\n                result[k] += 1\n\n    for i in range(n, -1, -1):\n        print(result[i], end=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952188730239868,
            0.9950338006019592,
            0.9960290193557739,
            0.9964358806610107,
            0.9956303834915161,
            0.9944544434547424,
            0.9895276427268982,
            0.9933521151542664,
            0.9936364889144897,
            0.9903655648231506,
            0.9960545301437378,
            0.994663655757904,
            0.9961578845977783,
            0.9932062029838562,
            0.9960494041442871,
            0.9952680468559265,
            0.9895723462104797,
            0.9939121603965759,
            0.9959559440612793,
            0.9922896027565002
        ]
    },
    "2372": {
        "similarity": 0.9978906512260437,
        "body": "    h, w = map(int, input().split())\n    ch, cw = map(int, input().split())\n    dh, dw = map(int, input().split())\n    maze = [list(input()) for _ in range(h)]\n    \n    visited = [[False]*w for _ in range(h)]\n    queue = [(ch-1, cw-1, 0)]  # (row, col, moves)\n    \n    while queue:\n        row, col, moves = queue.pop(0)\n        \n        if row == dh-1 and col == dw-1:\n            return moves\n        \n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = row+dr, col+dc\n            \n            if 0 <= nr < h and 0 <= nc < w and maze[nr][nc] == '.' and not visited[nr][nc]:\n                visited[nr][nc] = True\n                queue.append((nr, nc, moves+1))\n                \n    return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9963728189468384,
            0.9973251223564148,
            0.9867210388183594,
            0.9978906512260437,
            0.9960927367210388,
            0.9964776635169983,
            0.9977808594703674,
            0.9970076680183411,
            0.9977378845214844,
            0.9969710111618042,
            0.9973229765892029,
            0.9972391724586487,
            0.9975066184997559,
            0.9967319369316101,
            0.9969868063926697,
            0.9974921345710754,
            0.9962393045425415,
            0.9976230263710022,
            0.9973047971725464,
            0.9968549013137817
        ]
    },
    "1984": {
        "similarity": 0.9972377419471741,
        "body": "    levels = [list(input().strip()) for _ in range(k)]\n    traffic = 0\n    previous_level = None\n    level_order = []\n    \n    for i in range(k):\n        current_level = tuple(''.join(level) for level in zip(*levels[i]))\n        if previous_level is not None:\n            diff_size = sum(cell1 != cell2 for cell1, cell2 in zip(current_level, previous_level))\n            traffic += len(str(len(current_level))) + w * (diff_size + 1)\n        else:\n            traffic += n * m\n        level_order.append(i if previous_level is not None else 0)\n        previous_level = current_level\n    \n    print(traffic)\n    \n    for i in range(k):\n        print(f'{i+1} {level_order[i]}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957954287528992,
            0.9972377419471741,
            0.9968163371086121,
            0.9957747459411621,
            0.9942221641540527,
            0.9961145520210266,
            0.9962198138237,
            0.9948413372039795,
            0.9966826438903809,
            0.9970934987068176,
            0.9911079406738281,
            0.9968587160110474,
            0.9951714277267456,
            0.9956871867179871,
            0.9948076009750366,
            0.997031569480896,
            0.9927915334701538,
            0.9965519309043884,
            0.9964452385902405,
            0.9961925148963928
        ]
    },
    "1253": {
        "similarity": 0.9970949292182922,
        "body": "    n, k = map(int, input().split())\n    incomes = list(map(int, input().split()))\n    total_income = sum(incomes)\n    for _ in range(k):\n        max_val = 0\n        for i in range(1, n):\n            if incomes[i-1] > 0 and incomes[i] < 0:\n                max_val = max(max_val, incomes[i])\n                break\n        if max_val:\n            total_income -= 2 * max_val\n    return total_income",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969690442085266,
            0.9952852129936218,
            0.9968355894088745,
            0.996296226978302,
            0.9968593120574951,
            0.9970949292182922,
            0.9956005811691284,
            0.9959551095962524,
            0.99663907289505,
            0.9960399270057678,
            0.9964607954025269,
            0.9939998984336853,
            0.9954591393470764,
            0.9930567741394043,
            0.9963422417640686,
            0.9966424703598022,
            0.9959443807601929,
            0.9935113787651062,
            0.9968640208244324,
            0.9970534443855286
        ]
    },
    "523": {
        "similarity": 0.9965852499008179,
        "body": "    n, m = map(int, input().split())\n    strings = [input().strip() for _ in range(n)]\n    \n    max_length = 0\n    longest_palindrome = ''\n    \n    for i in range(1 << n):\n        palindrome = ''.join([s for j, s in enumerate(strings) if (i & (1 << j)) > 0])\n        reversed_palindrome = palindrome[::-1]\n        \n        if palindrome == reversed_palindrome:\n            length = len(palindrome)\n            if length > max_length:\n                max_length = length\n                longest_palindrome = palindrome\n    \n    print(max_length)\n    print(longest_palindrome)",
        "result": "timed out",
        "similarities": [
            0.9940583109855652,
            0.9957191348075867,
            0.9928407073020935,
            0.9931213855743408,
            0.9924226999282837,
            0.9960041046142578,
            0.9944504499435425,
            0.9933935403823853,
            0.994318425655365,
            0.9945915937423706,
            0.9932457804679871,
            0.9949657917022705,
            0.9964007139205933,
            0.9927657246589661,
            0.9965852499008179,
            0.9956305623054504,
            0.9955762624740601,
            0.9961727857589722,
            0.9953926801681519,
            0.9958192706108093
        ]
    },
    "2934": {
        "similarity": 0.9959452748298645,
        "body": "    N, M = map(int, input().split())\n    total = 0\n    for m in range(M // N + 1):\n        n = M - m * N\n        if n % 2 == 0:\n            total += (m + 1) * (n // 2 + 1)\n        else:\n            total += (m + 1) * (n // 2 + 1) + m + 1\n    print(total % 1000000009)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954563975334167,
            0.992673397064209,
            0.9954145550727844,
            0.994846761226654,
            0.9950280785560608,
            0.9936944842338562,
            0.9940200448036194,
            0.9954431653022766,
            0.9941392540931702,
            0.9940826892852783,
            0.9944723844528198,
            0.9888819456100464,
            0.9956548810005188,
            0.9926721453666687,
            0.9926965832710266,
            0.9959452748298645,
            0.9907276034355164,
            0.9951173067092896,
            0.9918864369392395,
            0.9945008158683777
        ]
    },
    "1745": {
        "similarity": 0.9969817996025085,
        "body": "    n, m = map(int, input().split())\n    city_map = [list(input()) for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    pipes = set()\n    \n        if x < 0 or x >= n or y < 0 or y >= m:\n            return\n        if city_map[x][y] == '#':\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if (nx, ny) not in pipes and city_map[nx][ny] == '.':\n                city_map[x][y] = '*'\n                dfs(nx, ny)\n    \n        for i in range(n):\n            for j in range(m):\n                if city_map[i][j] == '*':\n                    has_two_sides = False\n                    for dx, dy in directions:\n                        nx, ny = i + dx, j + dy\n                        if (0 <= nx < n and 0 <= ny < m) and city_map[nx][ny] == '*':\n                            has_two_sides = True\n                            break\n                    if not has_two_sides:\n                        return False\n        return True\n    \n    for x in range(n):\n        for y in range(m):\n            if city_map[x][y] == '.':\n                dfs(x, y)\n    \n    valid_pipes = set()\n    for _ in range(2**((n-1)*(m-1))):\n        pipe = []\n        for i in range(n):\n            for j in range(m):\n                if (i < 1 or j < 1) and city_map[i][j] == '*':\n                    pipe.append((i, j))\n        \n        if is_valid_pipe():\n            valid_pipes.add(tuple(sorted(pipe)))\n    \n    print(len(valid_pipes))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9940782785415649,
            0.9964306354522705,
            0.9961219429969788,
            0.9960315227508545,
            0.9958012104034424,
            0.9956259727478027,
            0.9969802498817444,
            0.9964469075202942,
            0.9965186715126038,
            0.9966944456100464,
            0.9937368631362915,
            0.9962756633758545,
            0.9929932355880737,
            0.9940362572669983,
            0.9969817996025085,
            0.9958889484405518,
            0.9958162903785706,
            0.9951437711715698,
            0.9961955547332764,
            0.9950495362281799
        ]
    },
    "1422": {
        "similarity": 0.9947475790977478,
        "body": "    weights_available = [i for i in range(1, 11) if input().count('1') >= i]\n    m = int(input())\n    \n    for i in range(m):\n        left_sum = right_sum = 0\n        for j in range(i % 2, len(weights_available), 2):\n            if i % 2 == 0:\n                left_sum += weights_available[j]\n            else:\n                right_sum += weights_available[j]\n        \n        if left_sum <= right_sum:\n            print(\"NO\")\n            return\n        \n    print(\"YES\")\n    for i in range(m):\n        if i % 2 == 0:\n            print(weights_available[i], end=' ')\n        else:\n            print(10 - weights_available[i], end=' ')\n    print()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945266246795654,
            0.9933038353919983,
            0.9927042126655579,
            0.9932230710983276,
            0.9910491108894348,
            0.9903700947761536,
            0.9916669130325317,
            0.9938923716545105,
            0.9925108551979065,
            0.9939209818840027,
            0.982653796672821,
            0.994390606880188,
            0.9923286437988281,
            0.9904544353485107,
            0.9927445650100708,
            0.9946007132530212,
            0.9938685894012451,
            0.9854118824005127,
            0.9947475790977478,
            0.9927453398704529
        ]
    },
    "1763": {
        "similarity": 0.996834397315979,
        "body": "    N, A, R, M = map(int, input().split())\n    heights = list(map(int, input().split()))\n    \n    max_height = max(heights)\n    total_cost = 0\n    for _ in range(max_height):\n        for i in range(N):\n            if heights[i] > 0:\n                heights[i] -= 1\n                total_cost += M\n        for i in range(N - 1, -1, -1):\n            if heights[i] < max_height:\n                heights[i] += 1\n                total_cost += A\n    return total_cost",
        "result": "timed out",
        "similarities": [
            0.9921488761901855,
            0.9951527118682861,
            0.9963183999061584,
            0.9961040019989014,
            0.9966699481010437,
            0.9953937530517578,
            0.9960620403289795,
            0.9953393340110779,
            0.9955808520317078,
            0.9951447248458862,
            0.9958460927009583,
            0.9967197775840759,
            0.9945734143257141,
            0.992925226688385,
            0.9958506226539612,
            0.996834397315979,
            0.9896916747093201,
            0.9957574605941772,
            0.9959489703178406,
            0.9941112995147705
        ]
    },
    "974": {
        "similarity": 0.9908573031425476,
        "body": "    n = int(input())\n    added_boxes = []\n    for _ in range(n):\n        command = input().split()\n        if command[0] == \"add\":\n            x = int(command[1])\n            added_boxes.append(x)\n        else:\n            if not added_boxes:\n                return -1\n            removed_box = added_boxes.pop()\n            while removed_box > len(added_boxes):\n                for _ in range(len(added_boxes) - 1, -1, -1):\n                    added_boxes[_] += 1\n                break\n    return -1\n\nmin_reorder_commands()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9504690766334534,
            0.9896759390830994,
            0.9904939532279968,
            0.9900229573249817,
            0.9854658842086792,
            0.9898649454116821,
            0.9868060946464539,
            0.9504690766334534,
            0.9890974760055542,
            0.986720860004425,
            0.982414960861206,
            0.9891422986984253,
            0.9734511375427246,
            0.9900016784667969,
            0.9905425906181335,
            0.9872991442680359,
            0.9898470640182495,
            0.9900131225585938,
            0.9881547689437866,
            0.9908573031425476
        ]
    },
    "2343": {
        "similarity": 0.9965435862541199,
        "body": "import math\n\n    if k % 2 == 1:\n        return False\n    for _ in range(k // 2):\n        n = int(math.pow(2, math.floor(math.log2(n)) + 1))\n    return True\n\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if check_happiness(n, k):\n        print(\"YES\", math.floor(math.log2(2**n)))\n    else:\n        print(\"NO\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950758218765259,
            0.994315505027771,
            0.9958889484405518,
            0.9960252642631531,
            0.9957003593444824,
            0.9955540895462036,
            0.9960587024688721,
            0.9962465167045593,
            0.9963692426681519,
            0.9938213229179382,
            0.9951268434524536,
            0.9922334551811218,
            0.9932736754417419,
            0.9941434264183044,
            0.9959003925323486,
            0.9957166910171509,
            0.9965435862541199,
            0.9955812096595764,
            0.995355486869812,
            0.9911963939666748
        ]
    },
    "627": {
        "similarity": 0.9957290291786194,
        "body": "    n = int(input())\n    s = input().lower()\n    min_s = s\n    for i in range(n):\n        t = s[:i] + s[i+1:]\n        if t <= min_s:\n            min_s = t\n    print(min_s)",
        "result": "passed",
        "similarities": [
            0.9946296215057373,
            0.9945947527885437,
            0.9924435019493103,
            0.9957290291786194,
            0.9926601052284241,
            0.9918701648712158,
            0.994498610496521,
            0.9912442564964294,
            0.9953639507293701,
            0.9952822327613831,
            0.9953328371047974,
            0.9954405426979065,
            0.9954405426979065,
            0.9938390851020813,
            0.9928110241889954,
            0.9944877624511719,
            0.9925280213356018,
            0.9953711628913879,
            0.9952257871627808,
            0.994910717010498
        ]
    },
    "1655": {
        "similarity": 0.9975835680961609,
        "body": "    n = int(input())\n    L = list(map(int, input().split()))\n    alive = n\n    for i in range(n-1, -1, -1):\n        for j in range(i-L[i], i):\n            if 0 <= j < i:\n                alive -= 1\n    print(alive)",
        "result": "timed out",
        "similarities": [
            0.9968700408935547,
            0.9962276816368103,
            0.9961971640586853,
            0.9959888458251953,
            0.9959210753440857,
            0.9962963461875916,
            0.9967169761657715,
            0.9972724914550781,
            0.9969860911369324,
            0.9975388050079346,
            0.9964833855628967,
            0.9962752461433411,
            0.9959873557090759,
            0.9964515566825867,
            0.9975835680961609,
            0.993934154510498,
            0.9966625571250916,
            0.9967673420906067,
            0.9965011477470398,
            0.9961094260215759
        ]
    },
    "2124": {
        "similarity": 0.9982167482376099,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        users = [input().split()[0] for _ in range(n)]\n        m = int(input())\n        messages = []\n        prev_user = None\n        for _ in range(m):\n            line = input()\n            if ':' in line:\n                user, text = line.split(':', 1)\n                if user != '?' and (user == prev_user or any(user.lower() in message.text for message in messages)):\n                    print(\"Impossible\")\n                    return\n                messages.append((user, text.strip()))\n                prev_user = user\n            else:\n                messages.append(('', line.strip()))\n        if prev_user is not None:\n            for i, (user, _) in enumerate(messages):\n                if user == '':\n                    messages[i] = (prev_user, _)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972743988037109,
            0.9973612427711487,
            0.9971923828125,
            0.9967256188392639,
            0.9979382753372192,
            0.9980024099349976,
            0.9981385469436646,
            0.9964242577552795,
            0.9971534609794617,
            0.9972885847091675,
            0.9977473020553589,
            0.9979866743087769,
            0.9972872734069824,
            0.9980063438415527,
            0.9982167482376099,
            0.9981909394264221,
            0.9980358481407166,
            0.9975489377975464,
            0.9973069429397583,
            0.9973628520965576
        ]
    },
    "1093": {
        "similarity": 0.9972026348114014,
        "body": "    n, m = map(int, input().split())\n    height_map = []\n    for _ in range(n):\n        row = list(input())\n        height_map.append(row)\n\n    max_ascent = 0\n    max_descent = 0\n    last_peak_height = 0\n\n    for i in range(m):\n        current_height = sum(1 for y in height_map if y[i] == '*')\n        ascent = current_height - last_peak_height\n        descent = last_peak_height - current_height\n        if ascent > max_ascent:\n            max_ascent = ascent\n        if descent > max_descent:\n            max_descent = descent\n        last_peak_height = current_height\n\n    print(max_ascent, max_descent)",
        "result": "failed: testcase 3",
        "similarities": [
            0.9916597008705139,
            0.996334969997406,
            0.9966527223587036,
            0.9957926869392395,
            0.99688321352005,
            0.9960328340530396,
            0.996230959892273,
            0.996353030204773,
            0.9960044026374817,
            0.993213951587677,
            0.9967095255851746,
            0.9945487976074219,
            0.9967802166938782,
            0.9965320229530334,
            0.9972026348114014,
            0.9936670064926147,
            0.9936954975128174,
            0.9968386292457581,
            0.9971026182174683,
            0.9959009885787964
        ]
    },
    "899": {
        "similarity": 0.9968974590301514,
        "body": "    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        if a < b:\n            a, b = b, a\n        edges.append((a, b, c))\n    count = 0\n    for i in range(len(edges)):\n        for j in range(i+1, len(edges)):\n            shortest_path_length = float('inf')\n            visited = [False] * (n + 1)\n            queue = [(1, 0)]  # (vertex, distance)\n            while queue:\n                vertex, dist = queue.pop(0)\n                if vertex == edges[j][0]:\n                    shortest_path_length = min(shortest_path_length, dist)\n                    break\n                for edge in edges:\n                    if not visited[edge[0]] and edge[1] == vertex:\n                        visited[edge[0]] = True\n                        queue.append((edge[0], dist + edge[2]))\n            if shortest_path_length > edges[i][2]:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9968974590301514,
            0.9965272545814514,
            0.9847029447555542,
            0.9945818185806274,
            0.9964491128921509,
            0.9955990314483643,
            0.995925784111023,
            0.9966608285903931,
            0.9958879351615906,
            0.9968342185020447,
            0.9965189099311829,
            0.9957510232925415,
            0.9962732195854187,
            0.9938232898712158,
            0.9963327646255493,
            0.9957996010780334,
            0.9960052371025085,
            0.9962865114212036,
            0.9923003315925598,
            0.9964897632598877
        ]
    },
    "551": {
        "similarity": 0.9934495687484741,
        "body": "    y_coords = [int(i) for i in input().split()]\n    y_coords.sort()\n    \n    has_split = False\n    for i in range(len(y_coords)):\n        if y_coords[i] - y_coords[0] > 0:\n            has_split = True\n            break\n    \n    if not has_split and len(set(y_coords)) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9900094270706177,
            0.99005526304245,
            0.992252767086029,
            0.9824060201644897,
            0.9933499693870544,
            0.9932132363319397,
            0.9924674034118652,
            0.9893983602523804,
            0.9897137880325317,
            0.9929080605506897,
            0.993405818939209,
            0.9915179014205933,
            0.9934495687484741,
            0.9884876608848572,
            0.9911958575248718,
            0.9819290637969971,
            0.9886638522148132,
            0.9873785972595215,
            0.9854976534843445,
            0.9904569387435913
        ]
    },
    "1772": {
        "similarity": 0.9878557324409485,
        "body": "import sys\n\n    n = int(input())\n    flowers = list(map(int, input().split()))\n    flowers.sort()\n    large_bouquets = 0\n    i = 0\n    for _ in range(n):\n        while i < n - 1 and flowers[i] + flowers[i+1] <= 10**6:\n            i += 1\n        if i >= n // 2:\n            large_bouquets += 1\n        i += 1\n    print(large_bouquets)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9807520508766174,
            0.9810325503349304,
            0.9826102256774902,
            0.9780122637748718,
            0.9865367412567139,
            0.9708969593048096,
            0.9798080921173096,
            0.9866881966590881,
            0.9833859801292419,
            0.9877334237098694,
            0.9818155169487,
            0.976185142993927,
            0.9822106957435608,
            0.9878557324409485,
            0.9800140857696533,
            0.9814754128456116,
            0.9864881634712219,
            0.9851791262626648,
            0.9864405393600464,
            0.9785205721855164
        ]
    },
    "1339": {
        "similarity": 0.9977003335952759,
        "body": "    n = int(input())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    covering_segment = -1\n    for i in range(n):\n        is_covered = True\n        for j in range(n):\n            if i != j and not (segments[i][0] <= segments[j][0] <= segments[j][1] <= segments[i][1]):\n                is_covered = False\n                break\n        if is_covered:\n            covering_segment = i + 1\n            break\n    \n    print(covering_segment)",
        "result": "passed",
        "similarities": [
            0.9976447224617004,
            0.9970110654830933,
            0.9958008527755737,
            0.9956745505332947,
            0.9975782036781311,
            0.9974222779273987,
            0.9887687563896179,
            0.9959933757781982,
            0.9975457787513733,
            0.9973883628845215,
            0.9959363341331482,
            0.997054934501648,
            0.9973445534706116,
            0.9973088502883911,
            0.9967390298843384,
            0.9974313378334045,
            0.9972497820854187,
            0.9977003335952759,
            0.9972243905067444,
            0.9923444390296936
        ]
    },
    "440": {
        "similarity": 0.9968031048774719,
        "body": "    n = int(input())\n    s = input().strip()\n    vowels = 'aeiouy'\n    i = 0\n    while True:\n        if i >= len(s) - 1:\n            break\n        if s[i] in vowels and i + 1 < len(s) and s[i+1] in vowels:\n            s = s[:i] + s[i+2:]\n            i -= 1\n        i += 1\n    print(s)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951409101486206,
            0.9964274168014526,
            0.9961832761764526,
            0.993351399898529,
            0.9957143068313599,
            0.9956469535827637,
            0.9957289695739746,
            0.9964052438735962,
            0.9958696961402893,
            0.9938597679138184,
            0.9948806762695312,
            0.9961692690849304,
            0.9949856996536255,
            0.9968031048774719,
            0.99567049741745,
            0.9967476725578308,
            0.9863854646682739,
            0.9921053647994995,
            0.9967573285102844,
            0.9948969483375549
        ]
    },
    "2801": {
        "similarity": 0.9968942403793335,
        "body": "    n, m = map(int, input().split())\n    satisfaction = [0] + list(map(int, input().split()))\n    connections = []\n    for _ in range(m):\n        s, t = map(int, input().split())\n        connections.append((s, t))\n    visited = [False] * (n + 1)\n    max_satisfaction = 0\n    for i in range(n):\n        total_satisfaction = 0\n        current_satisfaction = satisfaction[i]\n        k = 1\n        for j in reversed(range(i)):\n            if not visited[j]:\n                break\n            visited[j] = True\n            current_satisfaction += satisfaction[j] / (2 ** (k - 1))\n            total_satisfaction = max(total_satisfaction, current_satisfaction)\n            k += 1\n        print(total_satisfaction)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960039854049683,
            0.9952734112739563,
            0.989801824092865,
            0.9966713786125183,
            0.9963720440864563,
            0.9946348071098328,
            0.995814859867096,
            0.9948236346244812,
            0.9885392785072327,
            0.9961902499198914,
            0.9966938495635986,
            0.9962758421897888,
            0.9941418170928955,
            0.9965974688529968,
            0.9965938925743103,
            0.9956269860267639,
            0.995875895023346,
            0.9958720803260803,
            0.9968942403793335,
            0.9962636232376099
        ]
    },
    "2749": {
        "similarity": 0.9970163106918335,
        "body": "    h, w = map(int, input().split())\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert sum(a) == h * w\n    for i in range(n):\n        a[i] = min(h, a[i])\n    res = [['' for _ in range(w)] for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            color = 0\n            for k in range(n):\n                if a[k] > 0:\n                    a[k] -= 1\n                    res[i][j] = str(k + 1)\n                    break",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953500032424927,
            0.9931391477584839,
            0.995635986328125,
            0.9940141439437866,
            0.9958893656730652,
            0.9959464073181152,
            0.9964840412139893,
            0.9966333508491516,
            0.9949044585227966,
            0.9950373768806458,
            0.9954060912132263,
            0.9957294464111328,
            0.9964633584022522,
            0.996376633644104,
            0.9940788149833679,
            0.9934003949165344,
            0.996915340423584,
            0.9945116639137268,
            0.9970163106918335,
            0.993739664554596
        ]
    },
    "2319": {
        "similarity": 0.9969691038131714,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input().strip()\n        t = input().strip()\n        operations = 0\n        for i in range(n):\n            if s[i:] != t[i:]:\n                break\n            for j in range(i, n - 1):\n                if s[j + 1:] == t[i:]:\n                    operations += 2\n                    break\n            else:\n                continue\n        print(operations if operations < n else -1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9837634563446045,
            0.9950836896896362,
            0.9949303865432739,
            0.9956292510032654,
            0.9942942261695862,
            0.9953447580337524,
            0.9969691038131714,
            0.9962514638900757,
            0.9958484172821045,
            0.9952747821807861,
            0.995169997215271,
            0.9942233562469482,
            0.9952902793884277,
            0.9962477684020996,
            0.9951843619346619,
            0.9964579343795776,
            0.9966870546340942,
            0.9947699308395386,
            0.9959920644760132,
            0.9955630302429199
        ]
    },
    "2121": {
        "similarity": 0.9974084496498108,
        "body": "    n, k = map(int, input().split())\n    times = list(map(int, input().split()))\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    max_grade = 0\n    for root in range(1, n + 1):\n        visited = [False] * (n + 1)\n        min_time = float('inf')\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                min_time = min(min_time, times[node - 1])\n                for neighbor in edges:\n                    if neighbor[0] == node:\n                        stack.append(neighbor[1])\n                    elif neighbor[1] == node:\n                        stack.append(neighbor[0])\n        max_grade = max(max_grade, min_time)\n\n    print(max_grade)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958174824714661,
            0.9972227215766907,
            0.9968717694282532,
            0.9966802000999451,
            0.9972306489944458,
            0.9959433674812317,
            0.9962322115898132,
            0.9954189658164978,
            0.9965866804122925,
            0.9963477253913879,
            0.9944532513618469,
            0.9970289468765259,
            0.994219958782196,
            0.9972054362297058,
            0.9974084496498108,
            0.9963940978050232,
            0.9953204989433289,
            0.9967988729476929,
            0.9937559366226196,
            0.9956528544425964
        ]
    },
    "2617": {
        "similarity": 0.9972345232963562,
        "body": "    t = int(input())\n    for _ in range(t):\n        n, days = 0, 0\n        mass = [1]\n        while True:\n            for i, m in enumerate(mass):\n                if m > 2:\n                    mass.append(m // 2)\n                    mass.append(m // 2)\n                    mass[i] = 0\n                    break\n            else:\n                continue\n            days += 1\n            mass = [m + 1 for m in mass]\n        if sum(mass) != n:\n            print(-1)\n        else:\n            print(days)\n            print(' '.join(map(str, mass)))\nsolve()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966493844985962,
            0.9960084557533264,
            0.9920555949211121,
            0.9967011213302612,
            0.9961731433868408,
            0.9930225014686584,
            0.9964131712913513,
            0.996171236038208,
            0.9957842826843262,
            0.9965335726737976,
            0.9958164095878601,
            0.9967360496520996,
            0.9954591393470764,
            0.9943093061447144,
            0.9956974387168884,
            0.9969645142555237,
            0.9972345232963562,
            0.9958980083465576,
            0.9954621195793152,
            0.994928240776062
        ]
    },
    "175": {
        "similarity": 0.9978932738304138,
        "body": "    a, b = map(int, input().split())\n    while True:\n        if a == 0 or b == 0:\n            break\n        elif a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n    print(a, b)",
        "result": "timed out",
        "similarities": [
            0.997624933719635,
            0.9977082014083862,
            0.997401773929596,
            0.9971811175346375,
            0.9977082014083862,
            0.9958309531211853,
            0.997624933719635,
            0.9959548115730286,
            0.9965133666992188,
            0.9953127503395081,
            0.997401773929596,
            0.9969213604927063,
            0.9973680377006531,
            0.9974334239959717,
            0.9978932738304138,
            0.9962690472602844,
            0.9935314655303955,
            0.997624933719635,
            0.9970629811286926,
            0.9900758862495422
        ]
    },
    "995": {
        "similarity": 0.9975191354751587,
        "body": "    n = int(input())\n    A = list(map(int, input().split()))\n    groups = [0] * (n + 1)\n    \n    for k in range(1, n + 1):\n        min_product = float('inf')\n        group_count = 0\n        left = right = 0\n        \n        for i in range(n):\n            while right < n and min_product > A[right] ** 2:\n                right += 1\n            \n            if right - left <= k:\n                min_product = min(min_product, A[left:right + 1].pop(0) ** 2)\n                group_count += 1\n                left += 1\n        \n        groups[k] = group_count",
        "result": "failed: testcase 0",
        "similarities": [
            0.996802806854248,
            0.9968424439430237,
            0.9975191354751587,
            0.9969412088394165,
            0.9971550703048706,
            0.9959427714347839,
            0.9969554543495178,
            0.99660724401474,
            0.996945858001709,
            0.9963182210922241,
            0.9948045611381531,
            0.9969772696495056,
            0.9957080483436584,
            0.9968462586402893,
            0.9975166320800781,
            0.9944177865982056,
            0.9947330951690674,
            0.9971923828125,
            0.9956684112548828,
            0.9973829388618469
        ]
    },
    "582": {
        "similarity": 0.9955767393112183,
        "body": "    a = [int(input()) for _ in range(n)]\n    t = [int(input()) for _ in range(n)]\n    m = max(a)\n    res = 0\n    for i in range(1, n):\n        if a[i] == a[0]:\n            res += min(t[j] for j in range(n) if a[j] != a[0])\n    return res",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936971068382263,
            0.9938432574272156,
            0.9931727051734924,
            0.9939364194869995,
            0.9915385842323303,
            0.992917537689209,
            0.9925971031188965,
            0.9947632551193237,
            0.9954737424850464,
            0.9955767393112183,
            0.9921358823776245,
            0.9932821393013,
            0.9953480958938599,
            0.9946174621582031,
            0.9942575693130493,
            0.9939538240432739,
            0.9949620962142944,
            0.9929605722427368,
            0.9929980039596558,
            0.9938133955001831
        ]
    },
    "1402": {
        "similarity": 0.9955320954322815,
        "body": "    s = list(s)\n    w = list(w)\n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            break\n    for j in range(i+1, n):\n        if w[j] == '?':\n            break\n    for i in range(i+1, n):\n        for k in range(10):\n            s_copy = list(s)\n            w_copy = list(w)\n            flag = False\n            for j in range(n):\n                if s_copy[j] == '?' and w_copy[j] != str(k):\n                    flag = True\n                    break\n            if not flag:\n                count += 1\n    return count % 1000000007",
        "result": "failed: testcase 0",
        "similarities": [
            0.9826039671897888,
            0.9943995475769043,
            0.9939048290252686,
            0.9922958016395569,
            0.9955320954322815,
            0.9943864941596985,
            0.9949374198913574,
            0.992456316947937,
            0.9945691823959351,
            0.9948971271514893,
            0.9954989552497864,
            0.9949277639389038,
            0.9929996132850647,
            0.9938834309577942,
            0.9943219423294067,
            0.9945634603500366,
            0.9921519756317139,
            0.9953877329826355,
            0.9943677186965942,
            0.9938237071037292
        ]
    },
    "1141": {
        "similarity": 0.9987210035324097,
        "body": "    n, m = map(int, input().split())\n    s = input()\n    for _ in range(m):\n        l, r, c1, c2 = input().split()\n        l, r = int(l), int(r)\n        for i in range(l-1, r):\n            if s[i] == c1:\n                s = s[:i] + c2 + s[i+1:]\n    print(s)",
        "result": "passed",
        "similarities": [
            0.9978941679000854,
            0.9985970258712769,
            0.9985970258712769,
            0.9987210035324097,
            0.9985970258712769,
            0.9983029961585999,
            0.9979537129402161,
            0.9964528679847717,
            0.9976392388343811,
            0.9964830279350281,
            0.9985970258712769,
            0.9986895322799683,
            0.9986656904220581,
            0.9985970258712769,
            0.9963698387145996,
            0.9983029961585999,
            0.9983029961585999,
            0.9970381855964661,
            0.9987210035324097,
            0.9967745542526245
        ]
    },
    "2836": {
        "similarity": 0.9958208203315735,
        "body": "import sys\n\n    N = int(input())\n    boy_names = [int(x) for x in input().split()]\n    A, B = map(int, input().split())\n\n    max_distance = 0\n    girl_name = 0\n    for i in range(A, B+1):\n        if i % 2 != 0:\n            distance = float('inf')\n            for boy_name in boy_names:\n                distance = min(distance, abs(i - boy_name))\n            if distance > max_distance:\n                max_distance = distance\n                girl_name = i\n\n    print(girl_name)",
        "result": "failed: testcase 2",
        "similarities": [
            0.9958208203315735,
            0.9941726326942444,
            0.9665501117706299,
            0.9948131442070007,
            0.9949557781219482,
            0.993996262550354,
            0.9957794547080994,
            0.9949663877487183,
            0.994292140007019,
            0.9948919415473938,
            0.9941482543945312,
            0.9938681721687317,
            0.9942374229431152,
            0.9927573800086975,
            0.9909927248954773,
            0.9949499368667603,
            0.9928672313690186,
            0.9932729005813599,
            0.9938924908638,
            0.9941761493682861
        ]
    },
    "1109": {
        "similarity": 0.9956496357917786,
        "body": "    n, k = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    changes = 0\n    for i in range(k):\n        if sum(a[i::k]) % 2 != a[i]:\n            changes += n // k - sum(a[i::k]) // 2\n    print(changes)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9950105547904968,
            0.9945951700210571,
            0.9942572712898254,
            0.9956496357917786,
            0.9953127503395081,
            0.9948252439498901,
            0.9953452944755554,
            0.9925712943077087,
            0.9877763390541077,
            0.9952312111854553,
            0.9950059652328491,
            0.994799792766571,
            0.9945957660675049,
            0.9936007261276245,
            0.9938074350357056,
            0.9941074848175049,
            0.9946850538253784,
            0.994209885597229,
            0.9947758913040161,
            0.994820773601532
        ]
    },
    "2125": {
        "similarity": 0.9963559508323669,
        "body": "    n, m = map(int, input().split())\n    flags = 0\n    for i in range(n - 2):\n        for j in range(m - 2):\n            top_color = set()\n            middle_color = set()\n            bottom_color = set()\n            for k in range(3):\n                top_color.add(input()[j:j+1])\n                middle_color.add(input()[i+k,j:j+1])\n                bottom_color.add(input()[i+n-1,k+m-1])\n            if top_color != middle_color and middle_color != bottom_color:\n                flags += 1\n    print(flags)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961734414100647,
            0.9923880696296692,
            0.9956346154212952,
            0.9962282776832581,
            0.9937183856964111,
            0.9958878755569458,
            0.9948607087135315,
            0.9947788715362549,
            0.9950928092002869,
            0.9956647157669067,
            0.9931275248527527,
            0.9928120374679565,
            0.9958322644233704,
            0.9945643544197083,
            0.9952768087387085,
            0.9927118420600891,
            0.9963559508323669,
            0.9902575612068176,
            0.9958032369613647,
            0.994791567325592
        ]
    },
    "1746": {
        "similarity": 0.9979069232940674,
        "body": "    n = int(input())\n    parent = [0] * (n + 1)\n    for i in range(n - 1):\n        p, c = map(int, input().split())\n        parent[c] = p\n    is_spruce = True\n    leaf_count = 0\n    for v in range(2, n + 1):\n        if parent[v] == 0:\n            if leaf_count < 3:\n                is_spruce = False\n            break\n        leaf_count += 1\n    print(\"Yes\" if is_spruce else \"No\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960712790489197,
            0.9977183938026428,
            0.9966540932655334,
            0.9975873231887817,
            0.9978436231613159,
            0.9964238405227661,
            0.9951810240745544,
            0.9965134859085083,
            0.9966539144515991,
            0.989947497844696,
            0.9972501397132874,
            0.9979069232940674,
            0.9974067211151123,
            0.995550274848938,
            0.9973615407943726,
            0.9978436827659607,
            0.9978804588317871,
            0.9977716207504272,
            0.9967965483665466,
            0.9976909160614014
        ]
    },
    "1294": {
        "similarity": 0.9967318177223206,
        "body": "    t = int(input())\n    for _ in range(t):\n        s = input()\n        res = ''\n        for c in set(s):\n            count = s.count(c)\n            if count % 2 == 0:\n                res += c\n        print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9966124296188354,
            0.994246244430542,
            0.9950436949729919,
            0.9955323934555054,
            0.9967318177223206,
            0.995803952217102,
            0.9958148002624512,
            0.9933995604515076,
            0.9960858225822449,
            0.9929687976837158,
            0.9958635568618774,
            0.9966235756874084,
            0.9953709840774536,
            0.996444582939148,
            0.9958924651145935,
            0.9793461561203003,
            0.9966355562210083,
            0.9897868633270264,
            0.9956123232841492,
            0.9943931102752686
        ]
    },
    "1159": {
        "similarity": 0.9964470267295837,
        "body": "import sys\n    if n < 3 or n > 1000:\n        return -1\n    \n    for prime_edge_count in range(2, int((n*(n-1))/2)):\n        if all(prime_edge_count % i for i in range(2, int(prime_edge_count**0.5) + 1)) and all((prime_edge_count > (n*(n-3))/2) or n <= 4):\n            break\n    else:\n        return -1\n    \n    edges = []\n    degrees = [0] * n\n    for edge_count in range(2, prime_edge_count+1):\n        if all(edge_count % i for i in range(2, int(edge_count**0.5) + 1)):\n            break\n    else:\n        return -1\n    \n    for vertex in range(n):\n        while degrees[vertex] < edge_count and len(edges) < prime_edge_count:\n            for other_vertex in range(vertex+1, n):\n                if not (vertex == other_vertex or tuple(sorted((vertex, other_vertex))) in edges):\n                    edges.append(tuple(sorted((vertex, other_vertex))))\n                    break\n    print(prime_edge_count)\n    for edge in edges:\n        print(*edge)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958409667015076,
            0.9962674975395203,
            0.995405912399292,
            0.9941865801811218,
            0.9963672161102295,
            0.9950919151306152,
            0.9942183494567871,
            0.9949541687965393,
            0.9939451813697815,
            0.9960631132125854,
            0.9930319786071777,
            0.9953600168228149,
            0.9961084127426147,
            0.98443204164505,
            0.9954213500022888,
            0.9964306354522705,
            0.9964470267295837,
            0.995566725730896,
            0.9958657026290894,
            0.9954697489738464
        ]
    },
    "2025": {
        "similarity": 0.9988293051719666,
        "body": "    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        count = 0\n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                n //= i\n                count += 1\n            i += 1\n        if n > 1:\n            count += 1\n        print(count or -1)",
        "result": "failed: testcase 1",
        "similarities": [
            0.9985398054122925,
            0.9984771609306335,
            0.9978015422821045,
            0.9987335205078125,
            0.9978423118591309,
            0.998789370059967,
            0.9979488849639893,
            0.9978015422821045,
            0.9978015422821045,
            0.9976798892021179,
            0.9985966086387634,
            0.9984679222106934,
            0.9985769391059875,
            0.9958460927009583,
            0.998789370059967,
            0.9988293051719666,
            0.9988293051719666,
            0.998789370059967,
            0.9978015422821045,
            0.9982675313949585
        ]
    },
    "1429": {
        "similarity": 0.9956592917442322,
        "body": "    N = int(input())\n    S = input()\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            T = S[i:j]\n            complementary_permutations = {'AT': 'TA', 'CG': 'GC'}\n            found_complementary = False\n            for k in range(len(T)):\n                if (T[k] + complementary_permutations[T[k]][0]) not in S or (T[k] + complementary_permutations[T[k]][1]) not in S:\n                    break\n            else:\n                found_complementary = True\n            if T and found_complementary:\n                count += 1\n    print(count)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9920551776885986,
            0.9907519817352295,
            0.993686854839325,
            0.9939866662025452,
            0.9952620267868042,
            0.9914240837097168,
            0.9947766661643982,
            0.9950617551803589,
            0.9950621724128723,
            0.9900882244110107,
            0.9944736957550049,
            0.9956246614456177,
            0.9946954846382141,
            0.9952854514122009,
            0.993245005607605,
            0.9950758218765259,
            0.9915538430213928,
            0.9956592917442322,
            0.9940162301063538,
            0.9893514513969421
        ]
    },
    "1950": {
        "similarity": 0.9933851957321167,
        "body": "import sys\n\n    n = int(input())\n    balls = [int(x) for x in input().split()]\n    \n    total_penalty = 0\n    previous_turns = 0\n    \n    for _ in range(n):\n        total_penalty += max(balls)\n        previous_turns = sum(1 for count in balls if count > 0)\n        \n        for i in range(previous_turns):\n            balls[balls.index(max(balls))] -= 1\n            \n    return total_penalty",
        "result": "failed: testcase 0",
        "similarities": [
            0.9926759004592896,
            0.9930402040481567,
            0.9932907819747925,
            0.9864377379417419,
            0.9928581714630127,
            0.9933851957321167,
            0.9897846579551697,
            0.9933101534843445,
            0.9926912188529968,
            0.9933421611785889,
            0.9764569997787476,
            0.9915367960929871,
            0.9907506704330444,
            0.9879556894302368,
            0.9923790693283081,
            0.9919453859329224,
            0.9906944632530212,
            0.9930624961853027,
            0.9925115704536438,
            0.9878610372543335
        ]
    },
    "631": {
        "similarity": 0.9973910450935364,
        "body": "    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            total += a[j] / j\n        if abs(total - m) > 1e-6:\n            print(\"NO\")\n            return\n    print(\"YES\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969490766525269,
            0.997100830078125,
            0.9972463250160217,
            0.9964489340782166,
            0.9972582459449768,
            0.9973910450935364,
            0.9912631511688232,
            0.9966763257980347,
            0.9966923594474792,
            0.996001124382019,
            0.996335506439209,
            0.9955979585647583,
            0.9971254467964172,
            0.9930512309074402,
            0.9970954060554504,
            0.996881902217865,
            0.9969968199729919,
            0.9914985299110413,
            0.9957696795463562,
            0.9968383312225342
        ]
    },
    "2480": {
        "similarity": 0.9982143044471741,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        sum_val = 0\n        for j in range(i, n):\n            sum_val += a[j]\n            if sum_val % k == j - i + 1:\n                count += 1\n    print(count)",
        "result": "passed",
        "similarities": [
            0.9981334209442139,
            0.9968446493148804,
            0.9977101683616638,
            0.9982072710990906,
            0.9981809854507446,
            0.9924989342689514,
            0.997623860836029,
            0.9967697858810425,
            0.9978541135787964,
            0.9973158836364746,
            0.9969719648361206,
            0.9964276552200317,
            0.997840166091919,
            0.9957687854766846,
            0.9979788064956665,
            0.993178129196167,
            0.9979394674301147,
            0.9976304769515991,
            0.9982143044471741,
            0.996892511844635
        ]
    },
    "2363": {
        "similarity": 0.9993874430656433,
        "body": "    n = int(input())\n    for _ in range(n):\n        a, b = map(int, input().split())\n        operations = 0\n        while a > 0 and b > 0:\n            if a <= b:\n                b -= a\n            else:\n                a -= b\n            operations += 1\n        print(operations)",
        "result": "timed out",
        "similarities": [
            0.9993874430656433,
            0.9993436932563782,
            0.9993874430656433,
            0.9993436932563782,
            0.994617760181427,
            0.9992491006851196,
            0.9993874430656433,
            0.9992178082466125,
            0.9993436932563782,
            0.9993436932563782,
            0.998336672782898,
            0.9993086457252502,
            0.9993874430656433,
            0.9984151124954224,
            0.9984120726585388,
            0.999359130859375,
            0.9993436932563782,
            0.9993874430656433,
            0.9993874430656433,
            0.9989041090011597
        ]
    },
    "909": {
        "similarity": 0.9921440482139587,
        "body": "    a = int(input())\n    b = int(input())\n    c = int(input())\n    max_val = 0\n    for op in ['+', '*']:\n        for p1, p2, p3 in [(a, b, c), (a, c, b)]:\n            if op == '+':\n                val = p1 + p2 * p3\n            else:\n                val = p1 * (p2 + p3)\n            max_val = max(max_val, val)\n    print(max_val)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9855456352233887,
            0.990151047706604,
            0.9914013743400574,
            0.99010169506073,
            0.9897752404212952,
            0.9915651082992554,
            0.9871399402618408,
            0.9868560433387756,
            0.9913558959960938,
            0.9828627705574036,
            0.982413649559021,
            0.9881998300552368,
            0.9914065003395081,
            0.9906319379806519,
            0.9846349954605103,
            0.9921440482139587,
            0.9909610748291016,
            0.9902920126914978,
            0.9908314943313599,
            0.9920014142990112
        ]
    },
    "154": {
        "similarity": 0.9956386089324951,
        "body": "    MOD = 998244353\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            dp[0][i] = 1\n        else:\n            dp[1][i] = 1\n    for i in range(2, n // 2 + 1):\n        for j in range(i * 2, n + 1):\n            if (j - i) % 2 == 0:\n                dp[1][j] += dp[0][i]\n                dp[0][j] = dp[1][i]\n            else:\n                dp[0][j] += dp[1][i]\n                dp[1][j] = dp[0][i]\n    return (dp[1][n] + dp[0][n]) % MOD",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950332641601562,
            0.9956386089324951,
            0.9947393536567688,
            0.9946598410606384,
            0.9943722486495972,
            0.9849022626876831,
            0.9932319521903992,
            0.995310366153717,
            0.9941896200180054,
            0.9932751059532166,
            0.9918742775917053,
            0.9938081502914429,
            0.9939213991165161,
            0.9937461018562317,
            0.9897158741950989,
            0.9917436242103577,
            0.9897108674049377,
            0.9911537170410156,
            0.9866243600845337,
            0.994729220867157
        ]
    },
    "39": {
        "similarity": 0.9978927969932556,
        "body": "    max_length = 0\n    for l in range(len(s)):\n        for r in range(l + 1, len(s) + 1):\n            substring = s[l:r]\n            if not is_palindrome(substring):\n                max_length = max(max_length, r - l)\n    print(max_length)\n\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            return False\n    return True",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961398243904114,
            0.9973135590553284,
            0.9970304369926453,
            0.9974361062049866,
            0.9974168539047241,
            0.9970915913581848,
            0.9943978190422058,
            0.9971753358840942,
            0.9975794553756714,
            0.9967544078826904,
            0.9978927969932556,
            0.9964615702629089,
            0.997789204120636,
            0.9963861107826233,
            0.9971379637718201,
            0.9969946146011353,
            0.9941456317901611,
            0.9973617196083069,
            0.9974802136421204,
            0.9959388375282288
        ]
    },
    "1885": {
        "similarity": 0.9973357319831848,
        "body": "    n = int(input())\n    total = 1\n    for i in range(5, min(n+1, 8)):\n        total *= i\n        for j in range(i-4, -1, -1):\n            total += 1\n    print(total)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9972526431083679,
            0.9916844964027405,
            0.9957649111747742,
            0.9973166584968567,
            0.996826171875,
            0.9962376952171326,
            0.9946032166481018,
            0.995039165019989,
            0.9973357319831848,
            0.9971857666969299,
            0.9973166584968567,
            0.9960152506828308,
            0.9969149231910706,
            0.9952059388160706,
            0.9967309832572937,
            0.9939627647399902,
            0.9967339038848877,
            0.9957009553909302,
            0.9913603067398071,
            0.9942290782928467
        ]
    },
    "1180": {
        "similarity": 0.9975616335868835,
        "body": "    n, k = map(int, input().split())\n    s = str(input())\n    total = 0\n    for i in range(k + 1):\n        left, right = '', ''\n        for j in range(n - (k - i)):\n            left += s[j]\n        if i > 0:\n            for j in range(1, n - k + i):\n                right += s[n - k + i + j - 1]\n        total += int(left + '' + right)\n    print(total % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967950582504272,
            0.9975226521492004,
            0.9972522258758545,
            0.9967812299728394,
            0.9964926838874817,
            0.9975616335868835,
            0.9954689741134644,
            0.9959226846694946,
            0.996099054813385,
            0.9967149496078491,
            0.9975246787071228,
            0.9972018003463745,
            0.9970201253890991,
            0.9956333041191101,
            0.9957049489021301,
            0.997192919254303,
            0.9957288503646851,
            0.9955659508705139,
            0.9953047037124634,
            0.9968314170837402
        ]
    },
    "1856": {
        "similarity": 0.9948808550834656,
        "body": "    n = int(input())\n    passwords = []\n    for _ in range(n):\n        password = input().strip()\n        passwords.append(set(password))\n    \n    min_passwords = 0\n    seen = set()\n    for password in passwords:\n        if not any(p.issubset(seen) for p in passwords):\n            seen = password\n            min_passwords += 1\n    \n    print(min_passwords)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9843112826347351,
            0.9944480061531067,
            0.9895089864730835,
            0.9900255799293518,
            0.9905158877372742,
            0.9883515238761902,
            0.9942377209663391,
            0.9948143362998962,
            0.9942039847373962,
            0.9928622841835022,
            0.9937784075737,
            0.9926159381866455,
            0.9919713735580444,
            0.9942552447319031,
            0.991193950176239,
            0.9942743182182312,
            0.9866494536399841,
            0.9948808550834656,
            0.9933198690414429,
            0.9946046471595764
        ]
    },
    "522": {
        "similarity": 0.9966741800308228,
        "body": "import math\n\n    n, f1, f2, f3, c = map(int, input().split())\n    ans = 1\n    for i in range(4, n+1):\n        ans *= (c**(2*i-6)) % (10**9+7)\n        if i > 3:\n            ans %= (f1 * f2 * f3 * c**(2*(i-4)-12)) % (10**9+7)\n    print(ans)",
        "result": "timed out",
        "similarities": [
            0.9966273903846741,
            0.9938212037086487,
            0.9956895709037781,
            0.995699942111969,
            0.9966741800308228,
            0.9931317567825317,
            0.992915689945221,
            0.9959989786148071,
            0.9922615885734558,
            0.9959203004837036,
            0.9961451292037964,
            0.993996262550354,
            0.9965008497238159,
            0.9959680438041687,
            0.9960504174232483,
            0.9961612224578857,
            0.9951264262199402,
            0.9941633939743042,
            0.9963139891624451,
            0.9939348101615906
        ]
    },
    "1719": {
        "similarity": 0.9929125905036926,
        "body": "    MOD = 10**9 + 7\n    dp = [0] * (N + 1)\n    dp[0] = 4\n    for i in range(1, N + 1):\n        dp[i] = (dp[i - 1] * 4) % MOD\n        if i >= 3:\n            dp[i] -= (dp[i - 3] * 2) % MOD\n    print(dp[N])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929125905036926,
            0.9928387999534607,
            0.9896221160888672,
            0.9916332960128784,
            0.9915151000022888,
            0.9927853941917419,
            0.9922987222671509,
            0.9882184267044067,
            0.9903092980384827,
            0.991381824016571,
            0.9780535697937012,
            0.9874488711357117,
            0.9896756410598755,
            0.9914452433586121,
            0.9813246726989746,
            0.9897324442863464,
            0.9895276427268982,
            0.9846404194831848,
            0.9911916851997375,
            0.9877102375030518
        ]
    },
    "1842": {
        "similarity": 0.9966364502906799,
        "body": "import math\n\n    a, b, c = map(int, input().split())\n    d = math.sqrt(b**2 - 4*a*c)\n    root1 = (-b + d) / (2 * a)\n    root2 = (-b - d) / (2 * a)\n    print(max(root1, root2))\n    print(min(root1, root2))",
        "result": "passed",
        "similarities": [
            0.9956536889076233,
            0.9959174990653992,
            0.9914998412132263,
            0.9964500069618225,
            0.9948268532752991,
            0.9949816465377808,
            0.9966364502906799,
            0.9948810935020447,
            0.9962840676307678,
            0.9956536889076233,
            0.9955633282661438,
            0.9964288473129272,
            0.9927181601524353,
            0.9951868653297424,
            0.9922785758972168,
            0.9939176440238953,
            0.994114100933075,
            0.9957849383354187,
            0.994309663772583,
            0.9964467287063599
        ]
    },
    "806": {
        "similarity": 0.9966235756874084,
        "body": "    n, l, r = map(int, input().split())\n    res = 0\n    for i in range(l, r+1):\n        if (i*(n+1)//2) % 3 == 0:\n            res += 1\n    print(res % (10**9 + 7))",
        "result": "timed out",
        "similarities": [
            0.9963718056678772,
            0.9953303933143616,
            0.99619060754776,
            0.9917213916778564,
            0.9966235756874084,
            0.996486246585846,
            0.9960299134254456,
            0.9959838390350342,
            0.9963310956954956,
            0.9949008822441101,
            0.9870960712432861,
            0.9941112399101257,
            0.9958406686782837,
            0.9926203489303589,
            0.9964083433151245,
            0.9956423044204712,
            0.9959112405776978,
            0.9931710958480835,
            0.9960748553276062,
            0.996189534664154
        ]
    },
    "365": {
        "similarity": 0.9974650144577026,
        "body": "    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(1, a[i]):\n            if (x - j) % (a[i] + j) != 0:\n                count += 1\n                break\n    if count > 0 or len(a) < n:\n        print('NO')\n    else:\n        print('YES')",
        "result": "failed: testcase 1",
        "similarities": [
            0.9964911937713623,
            0.9963341951370239,
            0.9958397746086121,
            0.9967649579048157,
            0.997389554977417,
            0.9971504211425781,
            0.9959304332733154,
            0.9974098205566406,
            0.9969741702079773,
            0.997443675994873,
            0.9966233968734741,
            0.9931367635726929,
            0.9960452914237976,
            0.9971970319747925,
            0.9974533915519714,
            0.9935949444770813,
            0.9961492419242859,
            0.9974650144577026,
            0.9972095489501953,
            0.9967944622039795
        ]
    },
    "1158": {
        "similarity": 0.9949044585227966,
        "body": "    n, k = map(int, input().split())\n    utensils = list(map(int, input().split()))\n    utensil_count = {}\n    for utensil in utensils:\n        if utensil not in utensil_count:\n            utensil_count[utensil] = 1\n        else:\n            utensil_count[utensil] += 1\n    return sum(count - k for count in utensil_count.values())",
        "result": "failed: testcase 0",
        "similarities": [
            0.9896255135536194,
            0.9901458621025085,
            0.9949044585227966,
            0.9913303852081299,
            0.9889520406723022,
            0.9935044646263123,
            0.9911039471626282,
            0.9900447726249695,
            0.9945762157440186,
            0.992297351360321,
            0.9930480122566223,
            0.9934282898902893,
            0.9918004870414734,
            0.987322986125946,
            0.9948394298553467,
            0.993963360786438,
            0.9907047748565674,
            0.99193274974823,
            0.9914673566818237,
            0.9935518503189087
        ]
    },
    "33": {
        "similarity": 0.9957480430603027,
        "body": "    a1, b1, a2, b2, L, R = map(int, input().split())\n    count = 0\n    for k in range((R - b1) // a1 + 1):\n        for l in range((L - b2) // a2 + 1):\n            x = a1 * k + b1\n            if L <= x <= R and x == a2 * l + b2:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9936282634735107,
            0.9936529397964478,
            0.9953615069389343,
            0.9953915476799011,
            0.9937229156494141,
            0.993475079536438,
            0.9919753074645996,
            0.9948212504386902,
            0.995452880859375,
            0.9939140677452087,
            0.9938585162162781,
            0.9933189749717712,
            0.9939551949501038,
            0.9884383678436279,
            0.9956046938896179,
            0.9932856559753418,
            0.9957480430603027,
            0.994827151298523,
            0.9944769144058228,
            0.9956046938896179
        ]
    },
    "2498": {
        "similarity": 0.9980322122573853,
        "body": "    n, m = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    count = 0\n    for i in range(1, m+1):\n        is_semi_common_multiple = False\n        for j in range(n):\n            p = int((i / (a[j] // 2)) - 0.5)\n            if p * a[j] == i:\n                is_semi_common_multiple = True\n                break\n        if is_semi_common_multiple:\n            count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9978037476539612,
            0.9980322122573853,
            0.9977246522903442,
            0.9979087710380554,
            0.9945520162582397,
            0.9977957010269165,
            0.996554434299469,
            0.9968093037605286,
            0.9962888956069946,
            0.9966191053390503,
            0.99627286195755,
            0.997840166091919,
            0.9974724650382996,
            0.9974573850631714,
            0.9963284730911255,
            0.9976586699485779,
            0.9977838397026062,
            0.9959203600883484,
            0.9965192079544067,
            0.9975122213363647
        ]
    },
    "2309": {
        "similarity": 0.9973582029342651,
        "body": "    n = int(input())\n    words = [input().strip().lower() for _ in range(n)]\n    vowels = 'aeiou'\n    beautiful_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            lyric1 = ' '.join([words[i], words[j]])\n            lyric2 = ' '.join([words[k], words[l]] for k in range(j+1) for l in range(k+1))\n            if sorted(lyric1.count(vowel) for vowel in vowels) == [words[i].count(vowel) for vowel in vowels] and \\\n               sorted(lyric2.count(vowel) for vowel in vowels) == [words[j].count(vowel) for vowel in vowels]:\n                if all(lyric1[-len(word):][-1] == lyric2[-len(word):][-1] for word in words[i:j+1]):\n                    beautiful_count += 1\n    print(beautiful_count)\n    for _ in range(beautiful_count):\n        lyric = ''\n        i, j = 0, 0\n        while len(lyric) < 2:\n            if len(words[i]) + len(words[j]) > 20:\n                i += 1\n                continue\n            lyric += ' '.join([words[i], words[j]]) + '\\n'\n            i, j = j, (j+1)%n\n        print(lyric[:-1])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967917203903198,
            0.9973408579826355,
            0.995406985282898,
            0.9973582029342651,
            0.9972142577171326,
            0.9959905743598938,
            0.9970381855964661,
            0.9961034059524536,
            0.9961100220680237,
            0.9956729412078857,
            0.9958025217056274,
            0.994787335395813,
            0.9945600628852844,
            0.9963489174842834,
            0.9965133666992188,
            0.9966073632240295,
            0.9961194396018982,
            0.9966267943382263,
            0.9967406392097473,
            0.996387779712677
        ]
    },
    "1326": {
        "similarity": 0.996697187423706,
        "body": "    N = int(input())\n    total = 0\n    for k in range(1, N + 1):\n        divisor_count = 1\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                if i * i != k:\n                    divisor_count += 2\n                else:\n                    divisor_count += 1\n        total += k * (divisor_count)\n    print(total)",
        "result": "timed out",
        "similarities": [
            0.996697187423706,
            0.9959775805473328,
            0.9962059855461121,
            0.9961090087890625,
            0.9955762624740601,
            0.9930749535560608,
            0.9849973917007446,
            0.9941034913063049,
            0.9940009117126465,
            0.9912353157997131,
            0.9935104250907898,
            0.995752215385437,
            0.9943993091583252,
            0.9959664940834045,
            0.9961875081062317,
            0.994540274143219,
            0.9955919981002808,
            0.9951182007789612,
            0.9958122968673706,
            0.9961643218994141
        ]
    },
    "2950": {
        "similarity": 0.9958553314208984,
        "body": "    heights = [int(input()) for _ in range(n)]\n    total_floors = sum(heights)\n    charges = 0\n    current_height = 1\n    for height in sorted(heights, reverse=True):\n        if height <= current_height:\n            charges += 1\n            while heights[heights.index(current_height)] == current_height:\n                current_height -= 1\n        else:\n            total_floors -= (current_height + 1)\n        if not total_floors:\n            break\n    return charges",
        "result": "failed: testcase 0",
        "similarities": [
            0.990523099899292,
            0.9954001903533936,
            0.9890695214271545,
            0.9945237040519714,
            0.9898983836174011,
            0.9948754906654358,
            0.9923795461654663,
            0.9943928122520447,
            0.9951083660125732,
            0.9954097270965576,
            0.9950551390647888,
            0.9958553314208984,
            0.9955679178237915,
            0.9947899580001831,
            0.9943856000900269,
            0.9948183298110962,
            0.9942795634269714,
            0.9953984618186951,
            0.9943689107894897,
            0.9946835041046143
        ]
    },
    "1983": {
        "similarity": 0.9955102801322937,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if a[i] > a[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        print(max(dp))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9905532002449036,
            0.9933154582977295,
            0.9955102801322937,
            0.9922528862953186,
            0.990596354007721,
            0.9937654733657837,
            0.9922631978988647,
            0.9927822947502136,
            0.9881151914596558,
            0.9954709410667419,
            0.9953469038009644,
            0.9943684339523315,
            0.9941229820251465,
            0.9942235350608826,
            0.9910105466842651,
            0.9940184354782104,
            0.9941276907920837,
            0.993117094039917,
            0.9955102801322937,
            0.9925767779350281
        ]
    },
    "1767": {
        "similarity": 0.996891438961029,
        "body": "    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    max_sum = 0\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            cur_sum = 0\n            for i in range(l - 1, r):\n                cur_sum += a[i] | b[i]\n            max_sum = max(max_sum, cur_sum)\n    return max_sum",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964766502380371,
            0.9917128682136536,
            0.9927017688751221,
            0.9951469302177429,
            0.9955161213874817,
            0.9941560626029968,
            0.9966623187065125,
            0.9933292865753174,
            0.9958599805831909,
            0.9953848123550415,
            0.995747447013855,
            0.9963905811309814,
            0.9952729940414429,
            0.994896650314331,
            0.996891438961029,
            0.9961646199226379,
            0.9948045611381531,
            0.9942426085472107,
            0.9967971444129944,
            0.9964128732681274
        ]
    },
    "2382": {
        "similarity": 0.9950703978538513,
        "body": "    N = int(input())\n    S = list(map(int, input().split()))\n    healths = [4]\n    \n    for _ in range(1, N):\n        for h in range(10**9 + 1):\n            if all(h < s for s in S):\n                break\n        healths.append(h)\n        \n    return 'Yes' if set(healths) == set(S) else 'No'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9941225647926331,
            0.993021547794342,
            0.9856218099594116,
            0.9945626854896545,
            0.9937250018119812,
            0.9946038126945496,
            0.9856380820274353,
            0.9932267069816589,
            0.9919387698173523,
            0.9935876727104187,
            0.993283748626709,
            0.9873149394989014,
            0.9950703978538513,
            0.994825541973114,
            0.9871854186058044,
            0.9914263486862183,
            0.991523027420044,
            0.9931216835975647,
            0.9945884346961975,
            0.9935626983642578
        ]
    },
    "3907": {
        "similarity": 0.9963218569755554,
        "body": "    q_w = []\n    for _ in range(m):\n        q, w = map(int, input().split())\n        q_w.append((q, w))\n    q_set = set([i[0] for i in q_w])\n    max_payment = 0\n    for i in range(1, n+1):\n        for j in range(i-1, -1, -1):\n            if j not in q_set:\n                break\n            max_payment += min(i-j, j)\n    return max_payment",
        "result": "failed: testcase 0",
        "similarities": [
            0.9949796795845032,
            0.9949513673782349,
            0.990320086479187,
            0.9934706687927246,
            0.994998037815094,
            0.9959906339645386,
            0.9954948425292969,
            0.9941383004188538,
            0.995599627494812,
            0.9941969513893127,
            0.995002269744873,
            0.9903245568275452,
            0.9928918480873108,
            0.9905232787132263,
            0.9963218569755554,
            0.9941424131393433,
            0.9940184354782104,
            0.9952154755592346,
            0.9954794645309448,
            0.9922210574150085
        ]
    },
    "3676": {
        "similarity": 0.9945642352104187,
        "body": "    ways = 0\n    for r in range(1, R+1):\n        for c in range(1, C+1):\n            if r == 1 or c == 1:\n                ways += 1\n            else:\n                ways += r + c - 2\n    return ways",
        "result": "failed: testcase 0",
        "similarities": [
            0.9878014326095581,
            0.9920617938041687,
            0.9920365214347839,
            0.9938820600509644,
            0.9916170835494995,
            0.9854493737220764,
            0.9933703541755676,
            0.9929934144020081,
            0.9945642352104187,
            0.9888597130775452,
            0.9942917227745056,
            0.992207407951355,
            0.9903131127357483,
            0.9922183156013489,
            0.9935724139213562,
            0.9934485554695129,
            0.9942309856414795,
            0.9909805655479431,
            0.9936550855636597,
            0.9934931397438049
        ]
    },
    "3293": {
        "similarity": 0.9965721964836121,
        "body": "    n = int(input())\n    total_profit = 0\n    \n    for _ in range(n):\n        f, p, m, s = map(int, input().split())\n        for _ in range(s):\n            if p < m:\n                total_profit += m - p\n            break",
        "result": "failed: testcase 0",
        "similarities": [
            0.996321439743042,
            0.9946818351745605,
            0.9965721964836121,
            0.9952061176300049,
            0.9907680153846741,
            0.990716814994812,
            0.9960473775863647,
            0.9946345090866089,
            0.9946161508560181,
            0.9952326416969299,
            0.9962143301963806,
            0.9965404868125916,
            0.995405912399292,
            0.9963286519050598,
            0.9960432648658752,
            0.9963708519935608,
            0.9957722425460815,
            0.9962927103042603,
            0.9962667226791382,
            0.9950790405273438
        ]
    },
    "3587": {
        "similarity": 0.9962388873100281,
        "body": "    N = int(input())\n    taboo_strings = [input().encode() for _ in range(N)]\n    \n    max_length = 0\n    longest_clue = b''\n    \n    for length in range(1, 200000):\n        clue = (b'0' * length).encode()\n        \n        if all(clue.find(t) == -1 for t in taboo_strings):\n            if len(clue) > max_length:\n                max_length = len(clue)\n                longest_clue = clue\n        \n    return str(longest_clue.decode()) if max_length else '-1'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9906755089759827,
            0.9947671294212341,
            0.9921537041664124,
            0.9953069090843201,
            0.9916066527366638,
            0.9955950379371643,
            0.9943597912788391,
            0.9962388873100281,
            0.9955162405967712,
            0.9916688203811646,
            0.9956104755401611,
            0.9934586882591248,
            0.9956068992614746,
            0.9957394003868103,
            0.9947962760925293,
            0.9958343505859375,
            0.9895995259284973,
            0.9949579834938049,
            0.9960230588912964,
            0.9953252077102661
        ]
    },
    "3530": {
        "similarity": 0.997821033000946,
        "body": "    N = int(input())\n    a_coeffs = []\n    b_coeffs = []\n    for _ in range(N):\n        ai, bi, ti = map(int, input().split())\n        a_coeffs.append(ai)\n        b_coeffs.append(bi)\n\n    Q = int(input())\n    for q in range(Q):\n        T = int(input())\n        total_fun = 0\n        for i in range(N):\n            k = T // ti + (T % ti > 0)\n            fun = a_coeffs[i] - (k-1)**2 * b_coeffs[i]\n            if fun <= 0:\n                break\n            total_fun += fun\n        print(total_fun)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973546266555786,
            0.9972676634788513,
            0.9977509379386902,
            0.9956845641136169,
            0.9974564909934998,
            0.9977627992630005,
            0.9974873065948486,
            0.9962612986564636,
            0.9978181719779968,
            0.995575487613678,
            0.9964749217033386,
            0.9975553750991821,
            0.9944588541984558,
            0.997821033000946,
            0.9958650469779968,
            0.9974878430366516,
            0.9975578188896179,
            0.9975716471672058,
            0.9956616759300232,
            0.9959222078323364
        ]
    },
    "3900": {
        "similarity": 0.995819091796875,
        "body": "    n, p = map(int, input().split())\n    combos = set()\n    for _ in range(n):\n        x, y = map(int, input().split())\n        for i in range(1, n + 1):\n            if i != x and i != y:\n                for j in range(i + 1, n + 1):\n                    if j != i and j != x and j != y:\n                        combos.add(frozenset([i, j]))\n    return len({frozenset(sorted(c)) for c in combos})",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956877827644348,
            0.992114245891571,
            0.9954499006271362,
            0.9958164691925049,
            0.993249773979187,
            0.9931774139404297,
            0.995658278465271,
            0.9946672320365906,
            0.990649402141571,
            0.9938282370567322,
            0.992148756980896,
            0.9955322742462158,
            0.9953404664993286,
            0.995819091796875,
            0.9941204786300659,
            0.9935120940208435,
            0.9950175881385803,
            0.9956522583961487,
            0.9956002831459045,
            0.9934827089309692
        ]
    },
    "3996": {
        "similarity": 0.9965014457702637,
        "body": "    p = 1\n    for i in range(2, k + 1):\n        p *= (a[i - 1] % 2) + 1\n    q = 1\n    middle_a = a[k // 2]\n    for i in range(k + 1, 0, -1):\n        if a[i - 1] == middle_a:\n            q *= 2\n            break\n    return f\"{p % (10**9 + 7)}/{q % (10**9 + 7)}\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950036406517029,
            0.9965014457702637,
            0.9959415793418884,
            0.9944624900817871,
            0.9918434023857117,
            0.995875895023346,
            0.9960864186286926,
            0.9956229329109192,
            0.9899954795837402,
            0.9962175488471985,
            0.9949830770492554,
            0.9960375428199768,
            0.9957759380340576,
            0.9948489665985107,
            0.996271014213562,
            0.9944124817848206,
            0.9956499338150024,
            0.9957379698753357,
            0.9940348267555237,
            0.9964975118637085
        ]
    },
    "3276": {
        "similarity": 0.9960594177246094,
        "body": "    N, M = map(int, input().split())\n    colors = []\n    for _ in range(N):\n        row = input()\n        if len(row) != M:\n            return \"NO\"\n        colors.append(list(row))\n    for i in range(N-2):\n        for j in range(M-2):\n            if set(colors[i][j:j+3]) == {'W'} or set(colors[i][j:j+3]) == {'R', 'G', 'B'}:\n                return \"NO\"\n    return \"YES\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955149292945862,
            0.992724597454071,
            0.990932047367096,
            0.9928984642028809,
            0.9942240715026855,
            0.9960594177246094,
            0.9958779215812683,
            0.9956914782524109,
            0.9955549836158752,
            0.9933810830116272,
            0.9950975179672241,
            0.9956286549568176,
            0.9951340556144714,
            0.9950489401817322,
            0.9958215355873108,
            0.9925133585929871,
            0.9924647808074951,
            0.9956870079040527,
            0.9945483803749084,
            0.9924882650375366
        ]
    },
    "3834": {
        "similarity": 0.9967127442359924,
        "body": "    a = [list(map(int, input().split())) for _ in range(n)]\n    changed = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                adjacent_ones = 0\n                for x in range(max(0, i-1), min(n, i+2)):\n                    for y in range(max(0, j-1), min(m, j+2)):\n                        if (x != i or y != j) and a[x][y] == 1:\n                            adjacent_ones += 1\n                if adjacent_ones > 4:\n                    changed += 1\n    if changed <= k:\n        return changed\n    else:\n        return -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958911538124084,
            0.9951449036598206,
            0.9962716698646545,
            0.9959558248519897,
            0.9945309162139893,
            0.9946039915084839,
            0.9956450462341309,
            0.9951962828636169,
            0.9945321679115295,
            0.9943487048149109,
            0.9967127442359924,
            0.9958903789520264,
            0.9941229820251465,
            0.9936150312423706,
            0.9954420328140259,
            0.9944146871566772,
            0.9954960346221924,
            0.995877742767334,
            0.9931278228759766,
            0.9934176206588745
        ]
    },
    "3012": {
        "similarity": 0.9938796162605286,
        "body": "    a11, a12, a21, a22, N = map(int, input().split())\n    A = set(range(a11 + a12))\n    B = set(range(a21 + a22))\n    res = 1\n    for _ in range(N):\n        if res & 1:\n            A, B = B, A\n        else:\n            B -= {A.pop()}\n        res <<= 1\n    return pow(res, -N % res, 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9935216307640076,
            0.9895839691162109,
            0.9931982159614563,
            0.9919429421424866,
            0.9938796162605286,
            0.9860553741455078,
            0.9934177398681641,
            0.9926742911338806,
            0.9916218519210815,
            0.993454098701477,
            0.9907222390174866,
            0.992429256439209,
            0.980840265750885,
            0.9938445091247559,
            0.9872452616691589,
            0.9935601949691772,
            0.9909272789955139,
            0.9934526085853577,
            0.9929594993591309,
            0.9911984801292419
        ]
    },
    "3745": {
        "similarity": 0.9960238933563232,
        "body": "    n = int(input())\n    m = int(input())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    \n        return (c1 == 'a' and c2 == 'b') or (c1 == 'b' and c2 == 'c')\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i, j) not in edges:\n                continue\n            c1 = chr(ord('a') + i - 1)\n            c2 = chr(ord('a') + j - 1)\n            if not is_adjacent(c1, c2):\n                return \"No\"\n    return \"Yes\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960238933563232,
            0.9928103089332581,
            0.9947676658630371,
            0.9941251873970032,
            0.9935461282730103,
            0.9934579133987427,
            0.9949597120285034,
            0.9927986860275269,
            0.9955727458000183,
            0.9948086142539978,
            0.9950328469276428,
            0.995161235332489,
            0.9948834776878357,
            0.9949066042900085,
            0.9932893514633179,
            0.9820714592933655,
            0.993211030960083,
            0.9925224781036377,
            0.9936810731887817,
            0.9951983094215393
        ]
    },
    "3028": {
        "similarity": 0.9974134564399719,
        "body": "    n, m, p = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    \n        for i in range(n):\n            for j in range(m):\n                if board[i][j] < p:\n                    return False\n        return True\n\n    moves = 0\n    while not is_win(board):\n        max_value = -1\n        max_row = -1\n        max_col = -1\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] < p and board[i][j] > max_value:\n                    max_value = board[i][j]\n                    max_row = i\n                    max_col = j\n        if max_row == -1 or max_col == -1:\n            return str(-1)\n        \n        for _ in range(p):\n            board[max_row][_] = (board[max_row][_]+1)%p\n            board[_][max_col] = (board[_][max_col]+1)%p\n        moves += 1\n\n    print(moves)\n    result_board = [[0]*m for _ in range(n)]\n    i, j = 0, 0\n    while not is_win(board):\n        max_value = -1\n        max_row = -1\n        max_col = -1\n        for k in range(p*m*n):\n            if board[k//m][k%m] < p and board[k//m][k%m] > max_value:\n                max_value = board[k//m][k%m]\n                max_row = k//m\n                max_col = k%m\n        result_board[i][j] = max_k\n        i += 1\n    for row in result_board:\n        print(*row)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9895600080490112,
            0.9946134686470032,
            0.9970185160636902,
            0.9967425465583801,
            0.9959879517555237,
            0.9971669912338257,
            0.9966728091239929,
            0.997371256351471,
            0.9974134564399719,
            0.9968019723892212,
            0.996245265007019,
            0.995655357837677,
            0.9972404837608337,
            0.9964910745620728,
            0.9963545799255371,
            0.9964059591293335,
            0.9967525005340576,
            0.996465265750885,
            0.9956441521644592,
            0.9960182905197144
        ]
    },
    "3196": {
        "similarity": 0.9971359968185425,
        "body": "    N, M = map(int, input().split())\n    roads = {}\n    for _ in range(M):\n        A, B = map(int, input().split())\n        if A not in roads:\n            roads[A] = set()\n        if B not in roads:\n            roads[B] = set()\n        roads[A].add(B)\n        roads[B].add(A)\n\n    visited = [False] * (N + 1)\n    routes = 0\n\n        nonlocal routes\n        if node == 2:\n            global routes\n            routes += 1\n            return\n        for neighbor in roads.get(node, []):\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                dfs(neighbor, path + [node])\n                visited[neighbor] = False\n\n    visited[1] = True\n    dfs(1, [])\n    print(routes)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9953296184539795,
            0.997040331363678,
            0.9969228506088257,
            0.9958303570747375,
            0.9958752989768982,
            0.9962329864501953,
            0.9966006875038147,
            0.9947726726531982,
            0.9960626363754272,
            0.9965057373046875,
            0.9958915710449219,
            0.9971359968185425,
            0.9960178732872009,
            0.9949333071708679,
            0.9928048849105835,
            0.9966546297073364,
            0.9966983795166016,
            0.9966562986373901,
            0.9961833953857422,
            0.9958618879318237
        ]
    },
    "3405": {
        "similarity": 0.9956801533699036,
        "body": "    result = []\n    for i in range(10**7):\n        num = str(i)\n        if len(num) > 8:\n            continue\n        if round(float(str(int(num[0])) * X)) == int(num) * X:\n            result.append(int(num))\n    if not result:\n        print(\"No solution\")\n    else:\n        for n in sorted(result):\n            print(n)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930189251899719,
            0.9933602213859558,
            0.9946949481964111,
            0.9947704672813416,
            0.9937368035316467,
            0.9942641258239746,
            0.995197594165802,
            0.9953147768974304,
            0.9950750470161438,
            0.9901928305625916,
            0.9937433004379272,
            0.9936586022377014,
            0.9939965605735779,
            0.9925228953361511,
            0.9943105578422546,
            0.9939982891082764,
            0.9956801533699036,
            0.9950141906738281,
            0.9889150857925415,
            0.9931179881095886
        ]
    },
    "3126": {
        "similarity": 0.9959302544593811,
        "body": "    n, t = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = int(input())\n    for _ in range(c):\n        cmd = input().strip()\n        if cmd.startswith('t'):\n            t = int(cmd.split()[1])\n        elif cmd.startswith('+'):\n            p.append(int(cmd[2:]))\n            p.sort()\n        else:\n            p.remove(int(cmd[2:]))\n\n        jumps = 0\n        for i in range(len(p)):\n            jumps += (i // (i + 1) + 1)\n        print(jumps)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9868341088294983,
            0.9945285320281982,
            0.9952192902565002,
            0.9948347806930542,
            0.9944518208503723,
            0.9951885938644409,
            0.993029773235321,
            0.9944090843200684,
            0.9955941438674927,
            0.9912094473838806,
            0.9955542683601379,
            0.9959302544593811,
            0.9957972168922424,
            0.9943442940711975,
            0.9914873838424683,
            0.994232177734375,
            0.994140625,
            0.9950336813926697,
            0.9954489469528198,
            0.9938380718231201
        ]
    },
    "3279": {
        "similarity": 0.9962112307548523,
        "body": "import sys\n\n    vertical = [list(input().split()) for _ in range(n)]\n    horizontal = [list(input().split()) for _ in range(n)]\n\n    solution = [['0' for _ in range(n+1)] for _ in range(n)]\n    for i, row in enumerate(vertical):\n        for j, group in enumerate(map(int, row)):\n            if group > 0:\n                for k in range(1, group+1):\n                    if k < len(row) and (k == 0 or row[k-1] == '0') and (k == len(row)-1 or row[k] == '0'):\n                        solution[i][j] = '1'\n                        break\n\n    for i, col in enumerate(map(int, input().split())):\n        if col > 0:\n            for k in range(1, col+1):\n                if k < len(horizontal) and (k == 0 or horizontal[k-1][i] == '0') and (k == len(horizontal)-1 or horizontal[k][i] == '0'):\n                    solution[i][n] = '1'\n                    break\n\n    for row in solution:\n        print(''.join(row))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961973428726196,
            0.993143618106842,
            0.9929425120353699,
            0.9954449534416199,
            0.9948132038116455,
            0.9946036338806152,
            0.9953660368919373,
            0.9962112307548523,
            0.9941510558128357,
            0.9945756196975708,
            0.9910792112350464,
            0.9953101277351379,
            0.9956088066101074,
            0.9961318969726562,
            0.9921450614929199,
            0.9955891370773315,
            0.9933639168739319,
            0.9958087801933289,
            0.9957951307296753,
            0.9948732256889343
        ]
    },
    "3599": {
        "similarity": 0.9971092939376831,
        "body": "    T, N = map(int, input().split())\n    breaks = list(map(int, input().split()))\n    on_stage = [0] * N\n    for i in range(T):\n        two_off = False\n        for j in range(N):\n            if on_stage[j] < breaks[j]:\n                on_stage[j] += 1\n            else:\n                if any([on_stage[k] > 2 and k != j for k in range(N)]):\n                    break\n                on_stage[j] = 0\n        print(*on_stage, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968739748001099,
            0.9943714141845703,
            0.9956685304641724,
            0.9966468811035156,
            0.9958504438400269,
            0.9961167573928833,
            0.9955798983573914,
            0.9959943890571594,
            0.9965924620628357,
            0.9947088956832886,
            0.9964938759803772,
            0.9957808256149292,
            0.9962567687034607,
            0.9971092939376831,
            0.9951266050338745,
            0.995182454586029,
            0.9917559623718262,
            0.9961140155792236,
            0.9946786761283875,
            0.996010959148407
        ]
    },
    "3687": {
        "similarity": 0.9976309537887573,
        "body": "import sys\n\n    n, q, s = map(int, input().split())\n    queue_sizes = list(map(int, input().split()))\n    sensor_queues = list(map(int, input().split()))\n\n    for _ in range(n):\n        window_data, *sensor_data = map(int, input().split())\n        available_data = window_data\n        for i in range(s):\n            if sensor_queues[i] > 0 and available_data >= sensor_data[i]:\n                queue_sizes[sensor_queues[i] - 1] -= sensor_data[i]\n                available_data -= sensor_data[i]\n            else:\n                return \"impossible\"\n\n    return \"possible\" if all(size == 0 for size in queue_sizes) else \"impossible\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9975317120552063,
            0.9974731802940369,
            0.9970305562019348,
            0.9969391226768494,
            0.9966921806335449,
            0.9966245293617249,
            0.9960650205612183,
            0.9947375059127808,
            0.9964244365692139,
            0.9976309537887573,
            0.9971229434013367,
            0.9973495006561279,
            0.9969875812530518,
            0.9967442750930786,
            0.9974088072776794,
            0.9968878030776978,
            0.9938350319862366,
            0.9949660897254944,
            0.9965086579322815,
            0.9971960783004761
        ]
    },
    "3864": {
        "similarity": 0.9939888715744019,
        "body": "import math\n\n    n = int(input())\n    total_black_stones = sum([0, 1, 0, 2, 1, 3, 2, 3]) / 8\n    r = math.pow(2, round(total_black_stones))\n    print(int(r) % 998244353)\n",
        "result": "timed out",
        "similarities": [
            0.9899777173995972,
            0.9915382266044617,
            0.9875665307044983,
            0.9897239208221436,
            0.993800938129425,
            0.9856115579605103,
            0.9936505556106567,
            0.9794896841049194,
            0.9879279136657715,
            0.9928276538848877,
            0.9878010153770447,
            0.993290364742279,
            0.9898871183395386,
            0.9881870746612549,
            0.9886766672134399,
            0.9929623007774353,
            0.9901153445243835,
            0.9939888715744019,
            0.993120014667511,
            0.9923194050788879
        ]
    },
    "3504": {
        "similarity": 0.9978828430175781,
        "body": "    D, S = map(int, input().split())\n    sensors = []\n    for _ in range(S):\n        x1, x2, y = map(int, input().split())\n        sensors.append((x1, x2, y))\n    droplets = []\n    for _ in range(D):\n        x, y = map(int, input().split())\n        droplets.append((x, y))\n    \n    result = []\n    for d in droplets:\n        hit = False\n        for s in sensors:\n            if s[0] <= d[0] <= s[1]:\n                result.append(s[2])\n                hit = True\n                break\n        if not hit:\n            result.append(0)\n    \n    print(*result, sep='\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9971483945846558,
            0.9977592825889587,
            0.9977118968963623,
            0.997554361820221,
            0.9967727661132812,
            0.9958349466323853,
            0.9962780475616455,
            0.997745931148529,
            0.9977507591247559,
            0.9978455901145935,
            0.9960466623306274,
            0.992181658744812,
            0.9958031177520752,
            0.9974230527877808,
            0.9971426725387573,
            0.9951597452163696,
            0.9978828430175781,
            0.9963164329528809,
            0.9972853660583496,
            0.9976921081542969
        ]
    },
    "3451": {
        "similarity": 0.9955641031265259,
        "body": "    s = list(s)\n    effort = 0\n    open_parens = 0\n    for i in range(1, n):\n        if s[i] == '(':\n            open_parens += 1\n        else:\n            open_parens -= 1\n        if abs(open_parens) > k:\n            return '?'\n        effort += [int(input()) for _ in range(n)][i]\n    if open_parens > 0 and k % 2 == 1 or open_parens < 0 and k % 2 == 0:\n        return '?'\n    if k >= abs(open_parens):\n        return int(effort)\n    return '?'",
        "result": "failed: testcase 0",
        "similarities": [
            0.9911418557167053,
            0.9821913838386536,
            0.9952049255371094,
            0.9946337342262268,
            0.9955155253410339,
            0.9953970909118652,
            0.9950501322746277,
            0.993326723575592,
            0.9903188943862915,
            0.9942823648452759,
            0.994054913520813,
            0.9941789507865906,
            0.9941468834877014,
            0.9927071332931519,
            0.9927675127983093,
            0.9955641031265259,
            0.9911559224128723,
            0.9952017068862915,
            0.9926559925079346,
            0.9935379028320312
        ]
    },
    "3156": {
        "similarity": 0.9964547753334045,
        "body": "    N = int(input())\n    K = int(input())\n    stores = {}\n    for _ in range(K):\n        store_index, item_name = map(str, input().split())\n        if store_index not in stores:\n            stores[store_index] = set()\n        stores[store_index].add(item_name)\n    \n    M = int(input())\n    items = [input() for _ in range(M)]\n    \n    for i in range(M-1):\n        item1 = items[i]\n        item2 = items[i+1]\n        found = False\n        for store_index, items_in_store in stores.items():\n            if item1 in items_in_store and item2 in items_in_store:\n                print(\"ambiguous\")\n                return\n        if not any(item1 in items_in_store and item2 not in items_in_store for items_in_store in stores.values()):\n            print(\"impossible\")\n            return\n    print(\"unique\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957006573677063,
            0.9947299957275391,
            0.9955954551696777,
            0.9963053464889526,
            0.9923039674758911,
            0.9947502017021179,
            0.9949515461921692,
            0.9955598711967468,
            0.9951934814453125,
            0.9910367727279663,
            0.9956266283988953,
            0.9964547753334045,
            0.9951943755149841,
            0.996325671672821,
            0.9844235777854919,
            0.9939073324203491,
            0.9950938820838928,
            0.996161699295044,
            0.9956032633781433,
            0.9936891794204712
        ]
    },
    "3697": {
        "similarity": 0.9967579245567322,
        "body": "    n, k, m, a = map(int, input().split())\n    votes = list(map(int, input().split()))\n    \n    outcomes = []\n    for i in range(1, n + 1):\n        outcome = 3\n        if sum(votes[j] * (i == g_j) for j, g_j in enumerate(votes)) >= k:\n            outcome = 1\n        elif any(g_j > i for g_j in votes):\n            outcome = 2\n        outcomes.append(outcome)\n\n    return '\\n'.join(map(str, outcomes))",
        "result": "failed: testcase 0",
        "similarities": [
            0.995816171169281,
            0.9958058595657349,
            0.9938730001449585,
            0.9960007071495056,
            0.9951205253601074,
            0.9904839396476746,
            0.9950043559074402,
            0.9962542653083801,
            0.9965296387672424,
            0.9953516721725464,
            0.994734525680542,
            0.9957687854766846,
            0.9967579245567322,
            0.9962636828422546,
            0.9937599897384644,
            0.9937921166419983,
            0.9963417053222656,
            0.9960774183273315,
            0.9963009357452393,
            0.9963355660438538
        ]
    },
    "3647": {
        "similarity": 0.9980857372283936,
        "body": "    C, R = map(int, input().split())\n    maze = [list(input()) for _ in range(R)]\n    goal_x, goal_y = None, None\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == 'M':\n                goal_x, goal_y = j, i\n                break\n        if goal_x is not None:\n            break\n\n    min_moves = [[0]*C for _ in range(R)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n    queue = [(goal_y, goal_x, 0)]\n\n    while queue:\n        y, x, count = queue.pop(0)\n        if min_moves[y][x] > count or min_moves[y][x] == -1:\n            for dx, dy in moves:\n                ny, nx = y + dy, x + dx\n                if (0 <= ny < R) and (0 <= nx < C):\n                    if maze[ny][nx] == '#':\n                        break\n                    elif maze[ny][nx] == '_':\n                        queue.append((ny, nx, count + 1))\n                    else:\n                        min_moves[ny][nx] = count + 1\n                        queue.append((ny, nx, count + 1))\n                else:\n                    break\n\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == '_':\n                for dx, dy in moves:\n                    ny, nx = i + dy, j + dx\n                    if (0 <= ny < R) and (0 <= nx < C):\n                        if maze[ny][nx] == 'M':\n                            min_moves[i][j] = count + 1\n                            break\n                    else:\n                        break\n\n    for line in min_moves:\n        print(' '.join(map(str, line)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973105192184448,
            0.9977487325668335,
            0.9972933530807495,
            0.9977789521217346,
            0.9976732134819031,
            0.9978048205375671,
            0.9980642199516296,
            0.996701717376709,
            0.9978776574134827,
            0.9975939393043518,
            0.9978469014167786,
            0.9967821836471558,
            0.9977743029594421,
            0.9972637891769409,
            0.9976752400398254,
            0.9974240660667419,
            0.9972136616706848,
            0.9976498484611511,
            0.9980857372283936,
            0.9961667656898499
        ]
    },
    "3699": {
        "similarity": 0.9965078234672546,
        "body": "import math\n\n    a_x, a_y, b_x, b_y, t_x, t_y = map(int, input().split())\n    n = int(input())\n    bottles = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        bottles.append((x, y))\n    adil_dist = 0\n    for bottle in bottles:\n        dx = abs(bottle[0] - a_x)\n        dy = abs(bottle[1] - a_y)\n        adil_dist += math.sqrt(dx**2 + dy**2) if (a_x != t_x or a_y != t_y) else 0\n    bera_dist = 0\n    for bottle in bottles:\n        dx = abs(bottle[0] - b_x)\n        dy = abs(bottle[1] - b_y)\n        bera_dist += math.sqrt(dx**2 + dy**2) if (b_x != t_x or b_y != t_y) else 0\n    print(adil_dist + bera_dist)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9965078234672546,
            0.9944959878921509,
            0.992473304271698,
            0.9935117959976196,
            0.9949526786804199,
            0.995089590549469,
            0.9958516359329224,
            0.9943175911903381,
            0.9943366050720215,
            0.9943581819534302,
            0.9943128824234009,
            0.995175302028656,
            0.9937732219696045,
            0.9928795695304871,
            0.9933708906173706,
            0.9937077760696411,
            0.9942011833190918,
            0.9960985779762268,
            0.995655357837677,
            0.9949228167533875
        ]
    },
    "3145": {
        "similarity": 0.9968003630638123,
        "body": "    x, a, b = map(int, input().split())\n    allowed_digits = set(input())\n    count = 0\n    for i in range(a, b + 1):\n        if all(str(digit) in str(i) for digit in allowed_digits):\n            if i % x == 0:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9968003630638123,
            0.9947260618209839,
            0.9939993023872375,
            0.9931262135505676,
            0.9954656362533569,
            0.9955697655677795,
            0.9962602257728577,
            0.9940599203109741,
            0.9938719868659973,
            0.9951035380363464,
            0.9928150177001953,
            0.9944779276847839,
            0.9935846924781799,
            0.9954270124435425,
            0.9959317445755005,
            0.9951142072677612,
            0.9959501028060913,
            0.996770977973938,
            0.9963477253913879,
            0.9936846494674683
        ]
    },
    "3795": {
        "similarity": 0.9937523603439331,
        "body": "    bills = [1, 2, 5, 10, 20, 50, 100]\n    euro_bills = [5, 10, 20, 50, 100, 200]\n    \n    for dollar_bill in sorted(bills, reverse=True):\n        while n >= d * dollar_bill:\n            n -= d * dollar_bill\n            break\n    \n    for euro_bill in sorted(euro_bills, reverse=True):\n        while n >= e * euro_bill:\n            n -= e * euro_bill\n            break\n    \n    return n",
        "result": "failed: testcase 0",
        "similarities": [
            0.9937523603439331,
            0.9899986982345581,
            0.9916268587112427,
            0.9934136271476746,
            0.9926000833511353,
            0.9919068217277527,
            0.9911123514175415,
            0.9902406334877014,
            0.9902144074440002,
            0.9921308159828186,
            0.9925796985626221,
            0.9898369312286377,
            0.9879123568534851,
            0.9915335774421692,
            0.989643394947052,
            0.9906694293022156,
            0.9924044609069824,
            0.9900972247123718,
            0.9925073385238647,
            0.9925776124000549
        ]
    },
    "3353": {
        "similarity": 0.9972083568572998,
        "body": "import sys\n\n    P, R, L = map(int, [line.strip().split()[0] for line in sys.stdin.readlines()[:-1]])\n    graph = {}\n    for _ in range(L):\n        E1, E2 = map(int, input().strip().split())\n        if E1 not in graph:\n            graph[E1] = []\n        if E2 not in graph:\n            graph[E2] = []\n        graph[E1].append(E2)\n        graph[E2].append(E1)\n    visited = [False] * (R + 3)\n    queue = [(0, 0)]  # total time and current position\n    people_crossed = 0\n    while queue:\n        time, pos = queue.pop(0)\n        if not visited[pos]:\n            visited[pos] = True\n            for neighbor in graph.get(pos, []):\n                queue.append((time + 1, neighbor))\n            if pos == -1:  # reached the right bank\n                people_crossed += 1\n                if people_crossed >= P:\n                    break\n    return time if people_crossed >= P else P - people_crossed",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964284300804138,
            0.9961966276168823,
            0.9962196350097656,
            0.996107816696167,
            0.996468722820282,
            0.9942243695259094,
            0.9960991740226746,
            0.9945017099380493,
            0.9963145852088928,
            0.996543288230896,
            0.9967303276062012,
            0.9957613945007324,
            0.9969014525413513,
            0.9972083568572998,
            0.9969863891601562,
            0.9893704652786255,
            0.9958587288856506,
            0.9963672161102295,
            0.9957749247550964,
            0.9970055818557739
        ]
    },
    "3065": {
        "similarity": 0.9961690306663513,
        "body": "    N = int(input())\n    L = int(input())\n    walk_path = list(map(int, input().split()))\n    neighbours = [[] for _ in range(N)]\n    for i in range(N):\n        n = int(input())\n        neighbours[i] = list(map(int, input().split()))[1:]\n    \n    total_rooms = 0\n    for i in range(L):\n        room_number = walk_path[i]\n        total_rooms += len(neighbours[room_number])\n    \n    probability = (2 ** (total_rooms - L)) / (2 ** N)\n    print(probability)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956346154212952,
            0.9940860271453857,
            0.9957542419433594,
            0.9954336881637573,
            0.9961287975311279,
            0.9952263236045837,
            0.9920076131820679,
            0.9957633018493652,
            0.9961690306663513,
            0.9953948855400085,
            0.9954031109809875,
            0.9960483908653259,
            0.9932445883750916,
            0.9875730276107788,
            0.9941807985305786,
            0.9900597333908081,
            0.9941084980964661,
            0.9931531548500061,
            0.9927689433097839,
            0.9957727193832397
        ]
    },
    "3250": {
        "similarity": 0.9954856038093567,
        "body": "    b, d = map(int, input().split())\n    for m in range(1, 64):\n        if f(b, m, d) % d == 0:\n            return \"yes\"\n    return \"no\"\n\n    a = 0\n    while n > 0:\n        a = a * b + n % b\n        n //= b\n    return (a // (b ** m)) - ((a // (b ** (m + 1))) * (b ** m))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9880557656288147,
            0.9910388588905334,
            0.9944310784339905,
            0.9940894246101379,
            0.9946561455726624,
            0.9952203631401062,
            0.9952337145805359,
            0.9924285411834717,
            0.9952318072319031,
            0.9906346201896667,
            0.9881616234779358,
            0.9925765991210938,
            0.9944799542427063,
            0.9949751496315002,
            0.9943897128105164,
            0.9952248334884644,
            0.9947052001953125,
            0.9847077131271362,
            0.9954856038093567,
            0.9940071105957031
        ]
    },
    "3306": {
        "similarity": 0.9958800077438354,
        "body": "    N, M = map(int, input().split())\n    calls = []\n    for _ in range(N):\n        P, C = map(int, input().split())\n        if P <= M // 2:\n            calls.append(C)\n        else:\n            calls.append(0)\n    return sum(sorted(calls, reverse=True)[:M//2])",
        "result": "failed: testcase 0",
        "similarities": [
            0.9948632121086121,
            0.9941338300704956,
            0.9944695234298706,
            0.9955105185508728,
            0.9932327270507812,
            0.9915008544921875,
            0.9957404136657715,
            0.9949082732200623,
            0.9803311228752136,
            0.9930229187011719,
            0.9958800077438354,
            0.9927394390106201,
            0.9958534240722656,
            0.9955689311027527,
            0.9952904582023621,
            0.9925531148910522,
            0.9950190186500549,
            0.9928701519966125,
            0.9937736392021179,
            0.9938804507255554
        ]
    },
    "3970": {
        "similarity": 0.99724942445755,
        "body": "    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    res = 0\n    cur_multiple = -1\n    for num in arr:\n        if num > cur_multiple * k:\n            res += 1\n            cur_multiple = num\n    print(res)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957277178764343,
            0.9971797466278076,
            0.9964936971664429,
            0.9966517090797424,
            0.9958927631378174,
            0.9967498779296875,
            0.9954482913017273,
            0.9970606565475464,
            0.9971216917037964,
            0.9962488412857056,
            0.9966832399368286,
            0.9959737062454224,
            0.9964756369590759,
            0.99724942445755,
            0.9971739053726196,
            0.9966217875480652,
            0.9958152770996094,
            0.996972918510437,
            0.9968712329864502,
            0.9957897067070007
        ]
    },
    "3655": {
        "similarity": 0.9975346922874451,
        "body": "    w, h = map(int, input().split())\n    robot_image = [list(map(int, input().split())) for _ in range(h)]\n    floor_image = []\n    for _ in range(h):\n        row = list(map(int, input().split()))\n        floor_image.append(row)\n    \n    max_matches = 0\n    candidates = []\n    for x in range(w):\n        for y in range(h):\n            matches = sum(a == b for a, b in zip(robot_image[y], floor_image[y]))\n            if matches > max_matches:\n                max_matches = matches\n                candidates = [(x, y)]\n            elif matches == max_matches:\n                candidates.append((x, y))\n    \n    print('\\n'.join(map(str, candidates)))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954938292503357,
            0.9960266947746277,
            0.9916803240776062,
            0.9966762065887451,
            0.9969769716262817,
            0.9964260458946228,
            0.9940032958984375,
            0.9970976114273071,
            0.9940984845161438,
            0.9950513243675232,
            0.996239423751831,
            0.9955129027366638,
            0.9954581260681152,
            0.9975346922874451,
            0.9974353313446045,
            0.995688796043396,
            0.9965572357177734,
            0.9962953329086304,
            0.9969902038574219,
            0.9957128763198853
        ]
    },
    "3589": {
        "similarity": 0.9969703555107117,
        "body": "    count = [0] * 10\n    for x in range(L, R + 1):\n        product = 1\n        temp = x\n        while temp > 0:\n            digit = temp % 10\n            if digit != 0:\n                product *= digit\n            temp //= 10\n        remainder = (product // 10) % 10\n        count[remainder] += 1\n    for i in range(9):\n        print(count[i], end=' ')\n    print()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962752461433411,
            0.9961963295936584,
            0.9957970380783081,
            0.9960925579071045,
            0.9965001344680786,
            0.9960260987281799,
            0.9945423603057861,
            0.9951807260513306,
            0.9921786785125732,
            0.9954663515090942,
            0.9962770342826843,
            0.9952521324157715,
            0.9953573346138,
            0.9967909455299377,
            0.9958325624465942,
            0.9839906096458435,
            0.9969703555107117,
            0.9956187009811401,
            0.9956675171852112,
            0.9969519376754761
        ]
    },
    "3257": {
        "similarity": 0.9955306649208069,
        "body": "    a, b, c = map(float, input().split())\n    if not all(a <= b <= c <= 100):\n        return -1\n    side_length = (a + b + c) / 3\n    area = (side_length ** 2) * 3 ** (0.5)\n    print(\"%.6f\" % area)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9757832288742065,
            0.9944730997085571,
            0.9937143921852112,
            0.9910067319869995,
            0.9953764081001282,
            0.9953338503837585,
            0.9934188723564148,
            0.9944633841514587,
            0.994953989982605,
            0.9896709322929382,
            0.9947261810302734,
            0.9913415312767029,
            0.9939626455307007,
            0.9945359826087952,
            0.9945867657661438,
            0.9955306649208069,
            0.9942476153373718,
            0.9944771528244019,
            0.9936573505401611,
            0.9952546954154968
        ]
    },
    "3927": {
        "similarity": 0.9959362745285034,
        "body": "import math\n\n    n = int(input())\n    masses = list(map(int, input().split()))\n    \n    total_mass = sum(masses)\n    k_values = [0] * (total_mass + 1)\n    \n    for mass in masses:\n        for i in range(total_mass, mass - 1, -1):\n            k_values[i] = max(k_values[i], k_values[i - mass] + 1)\n    \n    return k_values[total_mass]",
        "result": "failed: testcase 0",
        "similarities": [
            0.9934895038604736,
            0.9915291666984558,
            0.9923270344734192,
            0.9937340617179871,
            0.9944221377372742,
            0.9904189109802246,
            0.9949214458465576,
            0.9924101829528809,
            0.9949353933334351,
            0.9959362745285034,
            0.9936169981956482,
            0.9942028522491455,
            0.9900476336479187,
            0.9956669211387634,
            0.9939723610877991,
            0.9956861138343811,
            0.9920995831489563,
            0.9916958212852478,
            0.9958110451698303,
            0.9949682950973511
        ]
    },
    "3319": {
        "similarity": 0.9976999163627625,
        "body": "import sys\n\n    n, nx, ny, nz = map(int, next(sys.stdin).split())\n    planetoids = []\n    for _ in range(n):\n        m, x, y, z, vx, vy, vz = map(int, next(sys.stdin).split())\n        planetoids.append((m, (x, y, z), (vx, vy, vz)))\n    \n    while True:\n        new_planetoids = []\n        collisions = {}\n        for i in range(len(planetoids)):\n            px, py, pz = planetoids[i][2]\n            for j in range(i+1, len(planetoids)):\n                qx, qy, qz = planetoids[j][2]\n                if (px == qx and py == qy and pz == qz):\n                    m1, _, _ = planetoids[i]\n                    m2, _, _ = planetoids[j]\n                    new_m = m1 + m2\n                    new_vx = (m1*planetoids[i][2][0] + m2*planetoids[j][2][0]) // (m1 + m2)\n                    new_vy = (m1*planetoids[i][2][1] + m2*planetoids[j][2][1]) // (m1 + m2)\n                    new_vz = (m1*planetoids[i][2][2] + m2*planetoids[j][2][2]) // (m1 + m2)\n                    collisions[(px, py, pz)] = (new_m, (new_vx, new_vy, new_vz))\n                    break\n            else:\n                new_planetoids.append(planetoids[i])\n        \n        if len(collisions) == 0:\n            break\n        \n        planetoids = [(m, x, y, z) for ((px, py, pz), (m, (x, y, z))) in zip(collisions.keys(), [((new_m, new_vx, new_vy, new_vz)) for _, ((new_m, (new_vx, new_vy, new_vz))) in collisions.items()])\n    \n    planetoids.sort(key=lambda x: (x[0], x[2][0], x[2][1], x[2][2]))\n    p = len(planetoids)\n    print(p)\n    for i, (m, (px, py, pz), (vx, vy, vz)) in enumerate(planetoids):\n        print(f'P{i}: {m} {px} {py} {pz} {vx} {vy} {vz}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9967504739761353,
            0.9972108602523804,
            0.9941516518592834,
            0.9953321218490601,
            0.997389554977417,
            0.9976999163627625,
            0.9976144433021545,
            0.9967542886734009,
            0.9970247149467468,
            0.9942009449005127,
            0.996994137763977,
            0.9958624839782715,
            0.9967042803764343,
            0.996532142162323,
            0.996648371219635,
            0.9969200491905212,
            0.9971269369125366,
            0.9967191815376282,
            0.997428297996521,
            0.996752917766571
        ]
    },
    "3009": {
        "similarity": 0.9970226287841797,
        "body": "import sys\n\n    N = int(input())\n    lamps = []\n    for _ in range(N):\n        x, y, energy = map(int, input().split())\n        lamps.append((x, y, energy))\n    \n    positive_energy = 0\n    negative_energy = 0\n    for lamp in lamps:\n        if lamp[2] > 0:\n            positive_energy += 1\n        else:\n            negative_energy += 1\n    \n    min_length = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            x1, y1, _ = lamps[i]\n            x2, y2, _ = lamps[j]\n            dx = abs(x2 - x1)\n            dy = abs(y2 - y1)\n            if (dx + dy) % 2 == 0 and negative_energy > positive_energy:\n                min_length = min(min_length, dx + dy)\n    \n    if min_length == float('inf'):\n        print(\"IMPOSSIBLE\")\n    else:\n        print(f\"{min_length:.6f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961854815483093,
            0.9957711100578308,
            0.9955366253852844,
            0.9950407147407532,
            0.9966791868209839,
            0.9836006164550781,
            0.9961320757865906,
            0.9952665567398071,
            0.9970226287841797,
            0.9966713786125183,
            0.9962894916534424,
            0.9963399171829224,
            0.9966360330581665,
            0.9968048930168152,
            0.9963447451591492,
            0.9966272115707397,
            0.9963242411613464,
            0.9966191649436951,
            0.9958749413490295,
            0.9962517619132996
        ]
    },
    "3896": {
        "similarity": 0.9941760897636414,
        "body": "    n = int(input())\n    complexity = 0\n    for i in range(2**n):\n        j = i ^ (2**n - 1)\n        while j > 0:\n            if ((j >> (i % 8)) & 1) == ((i >> (i % 8)) & 1):\n                complexity += 1\n            j >>= 1\n    print(complexity % 1000000007)",
        "result": "timed out",
        "similarities": [
            0.9925358295440674,
            0.9934347867965698,
            0.9932261109352112,
            0.9932070374488831,
            0.9925478100776672,
            0.9941760897636414,
            0.9930949211120605,
            0.9870414733886719,
            0.9816418886184692,
            0.9816380739212036,
            0.9744013547897339,
            0.993194580078125,
            0.9920781850814819,
            0.9937589764595032,
            0.9874420166015625,
            0.993229329586029,
            0.9933197498321533,
            0.9930949211120605,
            0.991455078125,
            0.9914276003837585
        ]
    },
    "3509": {
        "similarity": 0.9975160360336304,
        "body": "    a, b = map(int, input().split())\n    n, m = map(int, input().split())\n    roads = []\n    for _ in range(m):\n        u, v, t = map(int, input().split())\n        roads.append((u, v, t))\n    min_time = float('inf')\n    for i in range(1 << n):  # iterate over all possible routes\n        time = a\n        pos = 1\n        for j in range(n):\n            while pos < j and any([r[2] <= time for r in roads if r[0] == pos]):\n                pos += 1\n            time += roads[j - 1][2]\n        time += b\n        min_time = min(min_time, time)\n    return min_time - a",
        "result": "failed: testcase 0",
        "similarities": [
            0.9954655170440674,
            0.9955753684043884,
            0.9950169920921326,
            0.9950627684593201,
            0.9963192343711853,
            0.9974349141120911,
            0.9962896108627319,
            0.9938706159591675,
            0.9967875480651855,
            0.9974114298820496,
            0.9961221814155579,
            0.9964561462402344,
            0.9965196251869202,
            0.9975160360336304,
            0.9941202402114868,
            0.9974774718284607,
            0.9964932799339294,
            0.9960358142852783,
            0.9964118003845215,
            0.9959287047386169
        ]
    },
    "3547": {
        "similarity": 0.9960548281669617,
        "body": "import math\n\n    n = int(input())\n    area = 0\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, input().split())\n        if x1 < x2 and y1 < y2:\n            width = max(0, x2 - x1)\n            height = max(0, y2 - y1)\n            area += width * height\n    print(f\"{area:.2f}\")",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952456951141357,
            0.9932126402854919,
            0.9918578267097473,
            0.9956228137016296,
            0.9943923950195312,
            0.9815112948417664,
            0.9929934144020081,
            0.9960548281669617,
            0.9959930777549744,
            0.9950711131095886,
            0.9959436655044556,
            0.9932695031166077,
            0.9931309223175049,
            0.9910770058631897,
            0.9957185387611389,
            0.9940004944801331,
            0.9915523529052734,
            0.9941548705101013,
            0.9942534565925598,
            0.9956164956092834
        ]
    },
    "3017": {
        "similarity": 0.9952567219734192,
        "body": "    n, e = map(int, input().split())\n    count = 0\n    for k in range(n + 1):\n        str_k = str(k)\n        str_2_e = str(2 ** e)\n        if str_2_e in str_k:\n            count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9942710399627686,
            0.9930992126464844,
            0.994337260723114,
            0.9943978190422058,
            0.9812356233596802,
            0.9947009682655334,
            0.994256854057312,
            0.9944103956222534,
            0.9933950304985046,
            0.9949849843978882,
            0.9949858784675598,
            0.9952567219734192,
            0.9950941205024719,
            0.9642326235771179,
            0.9937155842781067,
            0.9937371015548706,
            0.9935800433158875,
            0.9945531487464905,
            0.9946093559265137,
            0.9943263530731201
        ]
    },
    "3076": {
        "similarity": 0.9981290698051453,
        "body": "import sys\n\n    n, k = map(int, input().split())\n    jewels = []\n    for _ in range(n):\n        s, v = map(int, input().split())\n        jewels.append((s, v))\n    max_values = [0] * (k + 1)\n    for s, v in sorted(jewels):\n        for i in range(k, s - 1, -1):\n            if max_values[i - s] + v > max_values[i]:\n                max_values[i] = max_values[i - s] + v\n    print(*max_values, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9973447918891907,
            0.9980902671813965,
            0.994476318359375,
            0.9979189038276672,
            0.9962513446807861,
            0.9976387023925781,
            0.9975613951683044,
            0.9961734414100647,
            0.99810391664505,
            0.9981290698051453,
            0.9978746175765991,
            0.9968653321266174,
            0.9980151653289795,
            0.9970765709877014,
            0.9951856732368469,
            0.9974873065948486,
            0.9973321557044983,
            0.9978559613227844,
            0.9976649880409241,
            0.9955579042434692
        ]
    },
    "3923": {
        "similarity": 0.9973656535148621,
        "body": "import sys\n\n    N, A, B = map(int, input().split())\n    P = [i+1 for i in range(N)]\n    \n    for i in range(N):\n        if g(i, 1) == A:\n            P[i] = A\n        elif g(i, 1) == B:\n            P[i] = B\n    \n    print(' '.join(map(str, P)))\n\n    while True:\n        if i <= j:\n            return i\n        i = P[i-1]\n        j -= 1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956933856010437,
            0.9967928528785706,
            0.9961716532707214,
            0.9961416125297546,
            0.9964017271995544,
            0.9960224628448486,
            0.9951047301292419,
            0.9961352348327637,
            0.9962248802185059,
            0.9967280030250549,
            0.9970151782035828,
            0.9969722628593445,
            0.9962514638900757,
            0.9967065453529358,
            0.9946196675300598,
            0.9965006113052368,
            0.9944728016853333,
            0.9973656535148621,
            0.9947726726531982,
            0.9942570924758911
        ]
    },
    "3332": {
        "similarity": 0.996876060962677,
        "body": "    n = int(input())\n    streams = []\n    for _ in range(n):\n        s, d, p = map(int, input().split())\n        streams.append((s, d, p))\n    \n    max_p = 0\n    stack = []\n    current_time = 0\n    for s, d, p in sorted(streams):\n        while current_time < s:\n            if stack:\n                stack.pop()\n            current_time += 1\n        if len(stack) < len(streams):\n            stack.append(p)\n        max_p = max(max_p, sum(stack))\n    \n    return str(max_p)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968243837356567,
            0.9967960715293884,
            0.9926125407218933,
            0.9963047504425049,
            0.9966621398925781,
            0.9961389303207397,
            0.9968550801277161,
            0.9961062073707581,
            0.9962457418441772,
            0.995418131351471,
            0.9966515898704529,
            0.9962935447692871,
            0.996876060962677,
            0.9966483116149902,
            0.9950577616691589,
            0.9963434934616089,
            0.9934808015823364,
            0.9964390993118286,
            0.9959562420845032,
            0.9944829344749451
        ]
    },
    "3240": {
        "similarity": 0.9939249753952026,
        "body": "k, v = map(int, input().split())\ntotal_ballots = [0] * (v - 1)\nfor i in range(v - 1):\n    p, b = map(float, input().split())\n    total_ballots[i] = int(b)\n\ntotal_expected = 0\nmax_yraglac_positions = 0\nfor b in range(2**k):\n    yraglac_positions = 0\n    for i in range(v - 1):\n        ballot_bits = bin(total_ballots[i] + (b if random.random() < p_total else 0))[2:].zfill(k)\n        if ballot_bits.count('1') <= int((2**(k-1)) / 2):\n            yraglac_positions += 1\n    total_expected += yraglac_positions / ((p_total ** v) * (1 - p_total) ** (v - 1))\n    max_yraglac_positions = max(max_yraglac_positions, yraglac_positions)\nprint(max([i for i in range(2**k) if sum(bin(i)[2:].zfill(k).count('1') for _ in range(v)) <= int((2**(k-1)) / 2)]))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9930099844932556,
            0.9933041930198669,
            0.993749737739563,
            0.9922768473625183,
            0.9912260174751282,
            0.9938958883285522,
            0.9925180673599243,
            0.9938810467720032,
            0.9920977354049683,
            0.9932796955108643,
            0.9896555542945862,
            0.9711306691169739,
            0.9935009479522705,
            0.993679940700531,
            0.9920778870582581,
            0.9913070201873779,
            0.9939249753952026,
            0.987045168876648,
            0.9896640777587891,
            0.9869661927223206
        ]
    },
    "3368": {
        "similarity": 0.9971285462379456,
        "body": "    n, m = map(int, input().split())\n    animals = [[] for _ in range(n)]\n    for i in range(n):\n        enclosure = input().split()\n        animal_type = enclosure[0]\n        count = int(enclosure[1])\n        for j in range(2, 2 + count):\n            animals[int(enclosure[j]) - 1].append(animal_type)\n    \n    for i in range(n):\n        if len(set(animals[i])) != 1:\n            return \"POSSIBLE\"\n    \n    return \"FALSE ALARM\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950376152992249,
            0.9950029253959656,
            0.9967659711837769,
            0.9927883148193359,
            0.9952830076217651,
            0.9965460896492004,
            0.9963037371635437,
            0.9950973391532898,
            0.995947003364563,
            0.9947600364685059,
            0.9968241453170776,
            0.9926575422286987,
            0.9967970848083496,
            0.9954732656478882,
            0.9971285462379456,
            0.9965184926986694,
            0.9960044026374817,
            0.9964281320571899,
            0.9955014586448669,
            0.9964109659194946
        ]
    },
    "3538": {
        "similarity": 0.9966639280319214,
        "body": "    return l > d\n\n    for frog in frogs:\n        if w + frog[1] <= 10**8 and l > frog[0]:\n            return False\n    return True\n\n    global d\n    n, d = map(int, input().split())\n    frogs = []\n    for _ in range(n):\n        l, w, h = map(int, input().split())\n        frogs.append((l, w, h))\n    frogs.sort(key=lambda x: x[0], reverse=True)\n    escaped = 0\n    while frogs:\n        i = 0\n        for j in range(len(frogs)):\n            if not can_carry(frogs[j][1], frogs[j][2], frogs[i][0]):\n                break\n            i += 1\n        if i > 0 and can_escape(*frogs[i-1]):\n            escaped += i\n            del frogs[:i]\n    return escaped",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936513304710388,
            0.9949290752410889,
            0.9934505820274353,
            0.9951306581497192,
            0.9963818788528442,
            0.9960971474647522,
            0.9962409138679504,
            0.9955500364303589,
            0.9966639280319214,
            0.9950211048126221,
            0.9950891137123108,
            0.9941982626914978,
            0.9959448575973511,
            0.9949001669883728,
            0.9904953837394714,
            0.9948524832725525,
            0.9949268698692322,
            0.99395352602005,
            0.99657142162323,
            0.9962212443351746
        ]
    },
    "3183": {
        "similarity": 0.9977188110351562,
        "body": "    n, m, s, t = map(int, input().split())\n    graph = {}\n    for _ in range(m):\n        u, v, c, w = map(int, input().split())\n        if u not in graph:\n            graph[u] = []\n        if v not in graph:\n            graph[v] = []\n        graph[u].append((v, c, w))\n        graph[v].append((u, 0, 0))  # Residual edge\n    flow, cost = 0, float('inf')\n    for _ in range(n):\n        parent = [-1] * n\n        path_flow = bfs(graph, s, t, parent)\n        while path_flow > 0:\n            flow += path_flow\n            path_cost = 0\n            u = t\n            while u != s:\n                v, c, w = graph[parent[u]][0]\n                path_cost += w\n                for edge in graph[u]:\n                    if edge[1] == c and edge[2] > w:\n                        edge[2] -= (w + 1)\n                        break\n                for edge in graph[v]:\n                    if edge[1] == c and edge[2] < 10001 - w - 1:\n                        edge[2] += (w + 1)\n                        parent[u] = v\n                        u = v\n                        break\n            cost = min(cost, path_cost)\n        for i in range(m):\n            if graph[i // n][i % n][2] < 10001:\n                graph[i // n].remove((i % n, 0, 0))\n                graph[i % n].append((i // n, 0, 0))\n    print(flow, cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959632754325867,
            0.9973124265670776,
            0.9970448017120361,
            0.9971011281013489,
            0.9900238513946533,
            0.9971610903739929,
            0.9973909258842468,
            0.9972562193870544,
            0.9973831176757812,
            0.99578458070755,
            0.9967004656791687,
            0.9970431327819824,
            0.9970626831054688,
            0.9975925087928772,
            0.9974333047866821,
            0.9967461824417114,
            0.9977188110351562,
            0.997070848941803,
            0.9949012398719788,
            0.9970881938934326
        ]
    },
    "3916": {
        "similarity": 0.9953155517578125,
        "body": "import math\n    min_sum = float('inf')\n    for p in range(1, n+1):\n        current_sum = 0\n        for node in nodes:\n            while node > 1:\n                node //= next((i for i in range(2, int(math.sqrt(node)) + 1) if node % i == 0), node)\n            current_sum += abs(p - node)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nn = int(input())\nnodes = [int(x) for x in input().split()]\nprint(calculate_min_sum_of_paths(n, nodes))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951936602592468,
            0.9940452575683594,
            0.9943781495094299,
            0.9945052266120911,
            0.9953155517578125,
            0.9947808980941772,
            0.9936153292655945,
            0.9940617084503174,
            0.9930186867713928,
            0.9951674938201904,
            0.9932484030723572,
            0.9943962097167969,
            0.9949692487716675,
            0.9937296509742737,
            0.9843698143959045,
            0.9949762225151062,
            0.9949418902397156,
            0.9939185976982117,
            0.9948132038116455,
            0.9951378703117371
        ]
    },
    "3195": {
        "similarity": 0.9962260723114014,
        "body": "    T_g, T_y, T_r = map(int, input().split())\n    n = int(input())\n    times = []\n    colors = []\n    for _ in range(n):\n        t, c = input().split()\n        t, c = int(t), c\n        times.append(t)\n        colors.append(c)\n    t_q, c_q = map(str, input().split())\n    t_q, c_q = int(t_q), c_q\n    green_time = 0\n    for i in range(n):\n        if colors[i] == 'green':\n            green_time += T_g\n        elif colors[i] == 'yellow':\n            green_time += T_g + T_y\n        else:\n            green_time += T_g + T_y + T_r\n    if t_q <= green_time:\n        return 1.0\n    else:\n        return (t_q - green_time) / (T_g + T_y + T_r)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9957124590873718,
            0.9959229230880737,
            0.995322585105896,
            0.9876731038093567,
            0.9927240014076233,
            0.9918981790542603,
            0.9955878257751465,
            0.9960421323776245,
            0.9947489500045776,
            0.9962260723114014,
            0.9947996735572815,
            0.993064284324646,
            0.9942765831947327,
            0.9953904747962952,
            0.9943689107894897,
            0.9957532286643982,
            0.9960638284683228,
            0.995060384273529,
            0.9960325956344604,
            0.9951761960983276
        ]
    },
    "3998": {
        "similarity": 0.9963608980178833,
        "body": "    n = int(input())\n    ratings = [int(x) for x in input().split()]\n    R = min(ratings)\n    t = 0\n    parties = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(parties) < 5:\n                party = sorted([i, j])\n                while party[0] > R and len(party) < 2:\n                    party.pop(0)\n                parties.append(party[:])\n    for _ in range(max(len(x) for x in parties)):\n        for party in parties:\n            if party:\n                print('1' if any(x == _ for _ in party) else '0', end='')\n                party.pop(0)\n        t += 1\n    print(R)\n    print(t)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962850213050842,
            0.9953736066818237,
            0.9871088266372681,
            0.9955337047576904,
            0.9960840344429016,
            0.9953108429908752,
            0.993474543094635,
            0.9948166608810425,
            0.9945945739746094,
            0.9958343505859375,
            0.9949551820755005,
            0.9949657917022705,
            0.9929957389831543,
            0.9958749413490295,
            0.9952999949455261,
            0.9952175617218018,
            0.9948337078094482,
            0.9963608980178833,
            0.9918996095657349,
            0.9955479502677917
        ]
    },
    "3150": {
        "similarity": 0.992817759513855,
        "body": "import sys\n\n    N = int(input())\n    trenches = []\n    for _ in range(N):\n        x1, y1, x2, y2 = map(int, input().split())\n        trenches.append((x1, y1, x2, y2))\n    \n    ways = 0\n    for i in range(3):\n        for j in range(i+1, 3):\n            seen = set()\n            for k in range(N):\n                x1, y1, x2, y2 = trenches[k]\n                if (x1 <= min(x1, x2) and x2 <= max(x1, x2)) or \\\n                   (y1 <= min(y1, y2) and y2 <= max(y1, y2)):\n                    seen.add(k)\n            ways += len(seen) if i == 0 else 0\n    \n    print(ways)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9790659546852112,
            0.9857047200202942,
            0.9821678996086121,
            0.9912766814231873,
            0.9901939034461975,
            0.9909603595733643,
            0.9885103106498718,
            0.992817759513855,
            0.9890031218528748,
            0.9901159405708313,
            0.9847486615180969,
            0.9901798963546753,
            0.9884769916534424,
            0.9816828370094299,
            0.9893407225608826,
            0.990738034248352,
            0.9882555603981018,
            0.9861724376678467,
            0.9919490814208984,
            0.9879478812217712
        ]
    },
    "3566": {
        "similarity": 0.996482253074646,
        "body": "    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    for _ in range(q):\n        i, x = map(int, input().split())\n        a[i] = x\n        left, right = 0, sum(a) - x\n        for j in range(n):\n            if a[j] <= left:\n                left += a[j]\n            elif a[n-1-j] <= right:\n                right -= a[n-1-j]\n            else:\n                break\n        print(min(j for j in range(n) if a[j] <= left))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962485432624817,
            0.9963908791542053,
            0.9964296221733093,
            0.9936639666557312,
            0.994704008102417,
            0.9949709177017212,
            0.996482253074646,
            0.9935027956962585,
            0.9958927631378174,
            0.995741605758667,
            0.9955109357833862,
            0.9932361245155334,
            0.9910519123077393,
            0.9948409199714661,
            0.9929677248001099,
            0.9945857524871826,
            0.9932491779327393,
            0.9957109093666077,
            0.9964162111282349,
            0.995527982711792
        ]
    },
    "3401": {
        "similarity": 0.9979721903800964,
        "body": "    n, s, t, q = map(int, input().split())\n    hills = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        hills.append((x, y, h))\n    springs = list(map(int, input().split()))\n    towns = list(map(int, input().split()))\n    \n    total_length = 0\n    for i in range(t):\n        spring_hill_index = springs[i]\n        town_hill_index = towns[i]\n        if spring_hill_index >= town_hill_index:\n            continue\n        for j in range(i+1, t):\n            next_spring_hill_index = springs[j]\n            next_town_hill_index = towns[j]\n            if next_spring_hill_index >= town_hill_index or next_springs.index(next_spring_hill_index) < springs.index(springs[i]):\n                total_length += hills[next_spring_hill_index-1][2] - hills[town_hill_index-1][2]\n    if total_length > q:\n        print(\"IMPOSSIBLE\")\n    else:\n        print(total_length)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9978610873222351,
            0.997791588306427,
            0.9924349784851074,
            0.9974993467330933,
            0.9971022605895996,
            0.9976003766059875,
            0.9959558248519897,
            0.9976457357406616,
            0.9943997263908386,
            0.9974598288536072,
            0.9979721903800964,
            0.9976828694343567,
            0.9976142048835754,
            0.9973357319831848,
            0.9971053600311279,
            0.9977864623069763,
            0.9964304566383362,
            0.9972925782203674,
            0.9969187378883362,
            0.9965971112251282
        ]
    },
    "3660": {
        "similarity": 0.9965336322784424,
        "body": "    message = input().upper()\n    n = int(input())\n    sticker_types = []\n    for _ in range(n):\n        word, price = input().split(), int(input())\n        sticker_types.append((word.upper(), price))\n    \n    cost = 0\n    i = j = 0\n    while i < len(message):\n        overlap = False\n        for k in range(j+1):\n            if message[i:].startswith(sticker_types[k][0]):\n                overlap = True\n                break\n        if not overlap:\n            word, price = sticker_types[j]\n            cost += price\n            j += 1\n        else:\n            i -= len(sticker_types[j-1][0])\n    if j == n:\n        print(cost)\n    else:\n        print('IMPOSSIBLE')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9960011839866638,
            0.9960712790489197,
            0.9959292411804199,
            0.9944913983345032,
            0.9958645701408386,
            0.9953522086143494,
            0.9951730370521545,
            0.9960972666740417,
            0.9952467083930969,
            0.9947381615638733,
            0.9954861998558044,
            0.9965336322784424,
            0.9928094744682312,
            0.9890917539596558,
            0.9954835772514343,
            0.9960333108901978,
            0.9959524869918823,
            0.9964555501937866,
            0.9957159161567688,
            0.9947327375411987
        ]
    },
    "3721": {
        "similarity": 0.9942069053649902,
        "body": "    elements = set()\n    for _ in range(q):\n        r, c = map(int, input().split())\n        elements.add((r, c))\n    remaining = {(i, j) for i in range(1, n+1) for j in range(1, m+1)} - elements\n    purchases = 0\n    while remaining:\n        for (r1, c1), (r2, c2) in [(x, y) for x in range(n) for y in range(m)]:\n            if (r1, c1) in elements and (r2, c2) in elements and (r2, c1) in elements:\n                remaining.discard((r2, c2))\n        purchases += len(remaining)\n    return purchases",
        "result": "failed: testcase 0",
        "similarities": [
            0.9867361187934875,
            0.9935408234596252,
            0.9928990602493286,
            0.9942069053649902,
            0.9917640686035156,
            0.9908440113067627,
            0.9918202757835388,
            0.9909864664077759,
            0.991972804069519,
            0.9936612844467163,
            0.9912294149398804,
            0.9940553307533264,
            0.9903772473335266,
            0.9931245446205139,
            0.9899805188179016,
            0.990445613861084,
            0.9834427237510681,
            0.9907293915748596,
            0.9923685789108276,
            0.9923322796821594
        ]
    },
    "3811": {
        "similarity": 0.9961527585983276,
        "body": "    n = int(input())\n    wcd = -1\n    for _ in range(n):\n        a, b = map(int, input().split())\n        greatest_common_divisor = min(a, b)\n        while greatest_common_divisor > 1 and not (a % greatest_common_divisor == 0 or b % greatest_common_divisor == 0):\n            greatest_common_divisor -= 1\n        if wcd < greatest_common_divisor:\n            wcd = greatest_common_divisor\n    print(wcd)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936797618865967,
            0.9923478960990906,
            0.9961527585983276,
            0.9952021241188049,
            0.9927194714546204,
            0.9953875541687012,
            0.9945999979972839,
            0.9945611357688904,
            0.9931345582008362,
            0.9894437193870544,
            0.9935746788978577,
            0.9948680400848389,
            0.9944698214530945,
            0.9954838156700134,
            0.9947602152824402,
            0.9944750070571899,
            0.9948354959487915,
            0.9960365295410156,
            0.993621826171875,
            0.9937469959259033
        ]
    },
    "3528": {
        "similarity": 0.9968823790550232,
        "body": "import math\n\n    n = int(input())\n    nails = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        nails.append((x, y))\n    \n    picked_nails = list(input()[:n-2])\n    \n    areas = []\n    area = 0.0\n    for i in range(1, n-1):\n        if picked_nails[i] == 'L':\n            x_min = min(x for x, _ in nails[i:])\n        elif picked_nails[i] == 'R':\n            x_max = max(x for x, _ in nails[i:])\n        elif picked_nails[i] == 'U':\n            y_max = max(y for _, y in nails[i:])\n        else:\n            y_min = min(y for _, y in nails[i:])\n        \n        area += (x_max - x_min) * (y_max - y_min)\n    \n    for _ in range(n-2):\n        print(f'{area:.1f}')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9929088950157166,
            0.9960570335388184,
            0.9956002831459045,
            0.9964998960494995,
            0.9959815144538879,
            0.9966269135475159,
            0.9959840178489685,
            0.9957561492919922,
            0.9952751994132996,
            0.9967450499534607,
            0.9966017007827759,
            0.9954976439476013,
            0.9941850304603577,
            0.9901311993598938,
            0.9964866638183594,
            0.9964191913604736,
            0.9965521097183228,
            0.9968823790550232,
            0.9927091002464294,
            0.9965227842330933
        ]
    },
    "3890": {
        "similarity": 0.9935573935508728,
        "body": "    n, k = map(int, input().split())\n    count = [0] * (n + 1)\n    for i in range(k):\n        count[i + 1] += 1\n    for i in range(n - k, 0, -1):\n        count[1] += (count[i] if i <= k else 0) % 1000000007\n    print(count[1] % 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9922375082969666,
            0.9919834136962891,
            0.9921091794967651,
            0.992002010345459,
            0.9823358654975891,
            0.9923434853553772,
            0.9935573935508728,
            0.9916249513626099,
            0.9908312559127808,
            0.9879717826843262,
            0.9930253624916077,
            0.9925488233566284,
            0.9929065704345703,
            0.9928346872329712,
            0.9935189485549927,
            0.9540048837661743,
            0.9932608604431152,
            0.9775661826133728,
            0.9925990700721741,
            0.9927732348442078
        ]
    },
    "3534": {
        "similarity": 0.9958799481391907,
        "body": "    N = int(input())\n    a = [int(x) for x in input().split()]\n    diff = 0\n    total_correct = 1\n    K = 0\n    \n    for i in range(1, N):\n        if a[i] > a[i-1]:\n            diff += 1\n        elif a[i] < a[i-1]:\n            diff -= 1\n        \n        if abs(diff) <= 1:\n            total_correct += 1\n        else:\n            K = max(K, diff)\n    \n    print(total_correct)\n    print(K)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9958799481391907,
            0.9957941770553589,
            0.995835542678833,
            0.9927211403846741,
            0.9865991473197937,
            0.9900244474411011,
            0.9947208762168884,
            0.9949154257774353,
            0.99498450756073,
            0.9951075315475464,
            0.995621919631958,
            0.995490312576294,
            0.9912392497062683,
            0.9925589561462402,
            0.9935895204544067,
            0.9952808022499084,
            0.9911016225814819,
            0.9951151013374329,
            0.9940015077590942,
            0.9951269030570984
        ]
    },
    "3371": {
        "similarity": 0.9970000386238098,
        "body": "    n, c = map(int, input().split())\n    known_pairs = {}\n    for _ in range(c):\n        a, b, y = map(int, input().split())\n        if (a, b) not in known_pairs:\n            known_pairs[(a, b)] = y\n        else:\n            return 'Impossible'\n    year_divider = 0\n    first_met_before_y = set()\n    for pair, y in sorted(known_pairs.items()):\n        if y > year_divider:\n            year_divider = y\n            first_met_before_y = set()\n        first_met_before_y.add(pair[0])\n        first_met_before_y.add(pair[1])\n    if len(first_met_before_y) >= (n * 2) // 3:\n        return 'Impossible'\n    return str(year_divider)",
        "result": "failed: testcase 0",
        "similarities": [
            0.995846688747406,
            0.9967859983444214,
            0.9902721047401428,
            0.9970000386238098,
            0.9953046441078186,
            0.9953661561012268,
            0.9942924976348877,
            0.9949720501899719,
            0.9960466623306274,
            0.9962348937988281,
            0.9937717318534851,
            0.9965549111366272,
            0.9965398907661438,
            0.994553804397583,
            0.9959907531738281,
            0.9937307238578796,
            0.996539294719696,
            0.9961678385734558,
            0.9956688284873962,
            0.9955894351005554
        ]
    },
    "3621": {
        "similarity": 0.9961559176445007,
        "body": "    n = int(input())\n    g = [[int(x) for x in input().split()] for _ in range(n)]\n    ans = 0\n    for i in range(1 << n):\n        color = None\n        for j in range(n):\n            if (i >> j) & 1:\n                if color is None:\n                    color = g[j][0]\n                else:\n                    if color != g[j][0]:\n                        break\n        else:\n            ans += 1\n    print(ans % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961559176445007,
            0.99560546875,
            0.9951516389846802,
            0.9954613447189331,
            0.9945502281188965,
            0.9947618246078491,
            0.9919887185096741,
            0.9930382966995239,
            0.9958563446998596,
            0.9944026470184326,
            0.9900119304656982,
            0.9953885674476624,
            0.9938342571258545,
            0.9957084655761719,
            0.9939623475074768,
            0.9912866353988647,
            0.994920551776886,
            0.9957279562950134,
            0.9955442547798157,
            0.9930335879325867
        ]
    },
    "3392": {
        "similarity": 0.9964159727096558,
        "body": "    N = int(input())\n    tree_heights = []\n    for i in range(N):\n        row = [int(j) for j in input().split()]\n        tree_heights.append(row)\n\n    growth_speeds = []\n    for i in range(N):\n        row = [int(j) for j in input().split()]\n        growth_speeds.append(row)\n\n    max_group_size = 0\n    for i in range(N):\n        for j in range(N):\n            if not tree_heights[i][j]:\n                continue\n            current_height = tree_heights[i][j]\n            group_size = 1\n            stack = [(i, j)]\n            while stack:\n                x, y = stack.pop()\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < N and 0 <= ny < N and tree_heights[nx][ny] == current_height and growth_speeds[nx][ny]:\n                        stack.append((nx, ny))\n                        group_size += 1\n                        tree_heights[nx][ny] = 0\n            max_group_size = max(max_group_size, group_size)\n\n    print(max_group_size)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959738850593567,
            0.9958361387252808,
            0.9963316917419434,
            0.9963377714157104,
            0.9964159727096558,
            0.995147705078125,
            0.9957610964775085,
            0.9899418354034424,
            0.9958752989768982,
            0.9956904053688049,
            0.9928436279296875,
            0.9946164488792419,
            0.996060311794281,
            0.9905690550804138,
            0.9953845143318176,
            0.9955151081085205,
            0.9960153698921204,
            0.9960987567901611,
            0.9958215355873108,
            0.9954480528831482
        ]
    },
    "3095": {
        "similarity": 0.9953450560569763,
        "body": "    r, s = map(int, input().split())\n    cool_matrix = []\n    for _ in range(r):\n        row = list(map(int, input().split()))\n        cool_matrix.append(row)\n    \n    max_size = 0\n    for i in range(1, r-1):\n        for j in range(1, s-1):\n            submatrix = [row[j-1:j+1] for row in cool_matrix[i-1:i+2]]\n            if is_extremely_cool(submatrix):\n                max_size = max(max_size, len([x for row in submatrix for x in row]))\n    \n    print(max_size)\n\n    r, s = len(matrix), len(matrix[0])\n    for i in range(1, r-1):\n        for j in range(1, s-1):\n            if (matrix[i-1][0] + matrix[r-2][j-1] <= matrix[i-1][j-1] + matrix[0][j-1]):\n                return False\n    return True",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943036437034607,
            0.990827739238739,
            0.992806077003479,
            0.9938679933547974,
            0.982529878616333,
            0.992469310760498,
            0.9936591982841492,
            0.9933552145957947,
            0.9952372312545776,
            0.9930447340011597,
            0.9948610067367554,
            0.9877028465270996,
            0.9953450560569763,
            0.9936376810073853,
            0.9934156537055969,
            0.992964506149292,
            0.9941287636756897,
            0.9923204183578491,
            0.994556725025177,
            0.9920508861541748
        ]
    },
    "3769": {
        "similarity": 0.9954792857170105,
        "body": "    p, k = map(int, input().split())\n    dp = [1] * p\n    for x in range(1, p):\n        if x % k == 0:\n            for i in range(k):\n                dp[(x * k + i) % p] += dp[i]\n    print(sum(dp) % (10**9 + 7))",
        "result": "timed out",
        "similarities": [
            0.9952690005302429,
            0.991571843624115,
            0.9753901958465576,
            0.9922611117362976,
            0.9952015280723572,
            0.9934730529785156,
            0.994551420211792,
            0.9949346780776978,
            0.9945604205131531,
            0.9881989359855652,
            0.9886866211891174,
            0.9954792857170105,
            0.994938313961029,
            0.9932820200920105,
            0.9953005909919739,
            0.9930630922317505,
            0.9927940368652344,
            0.9953014850616455,
            0.9941004514694214,
            0.9951786398887634
        ]
    },
    "3563": {
        "similarity": 0.9954464435577393,
        "body": "import sys\n\n    n = int(input())\n    holes = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        holes.append((x, y))\n    holes.sort()\n    lines = 0\n    prev_x = None\n    prev_y = None\n    for i in range(len(holes)):\n        if i > 0 and (holes[i][1] != prev_y or holes[i][0] != prev_x):\n            lines += 1\n        prev_x, prev_y = holes[i]\n    print(lines)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9950228333473206,
            0.9920538663864136,
            0.9954461455345154,
            0.9946963787078857,
            0.9888997673988342,
            0.9954464435577393,
            0.9925906658172607,
            0.9945674538612366,
            0.9909688234329224,
            0.9897792339324951,
            0.99447101354599,
            0.9907276630401611,
            0.9946399331092834,
            0.9935404062271118,
            0.9946398735046387,
            0.9952260255813599,
            0.9889624714851379,
            0.9921151399612427,
            0.9919871091842651,
            0.9941176176071167
        ]
    },
    "3618": {
        "similarity": 0.9943612813949585,
        "body": "    total = 0\n    for i in range(10**n - 1, 10**(n-1)):\n        x = str(i)\n        y = str(i)\n        for _ in range(len(x)):\n            if len(y) < n:\n                break\n            left, right = int(y[0]), int(y[-1])\n            if (y[0] == '9' and right == 8) or (y[0] != '1' and right - left == 1):\n                y = str(int(y[:]) + 1)\n            else:\n                y = str(left - 1) + y[1:]\n        total += 1\n    return total % 998244353",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943612813949585,
            0.9914641380310059,
            0.9864650368690491,
            0.9913764595985413,
            0.9893305897712708,
            0.9922736287117004,
            0.9905627369880676,
            0.9936121106147766,
            0.9931361675262451,
            0.981842041015625,
            0.9919664263725281,
            0.9922944903373718,
            0.9870697855949402,
            0.9894390106201172,
            0.9932789206504822,
            0.9885581135749817,
            0.9898009300231934,
            0.9918496012687683,
            0.9878522753715515,
            0.9909806847572327
        ]
    },
    "3830": {
        "similarity": 0.9973807334899902,
        "body": "    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = list(input().strip())\n        returnable_rooms = 0\n        is_off = False\n        for i in range(n):\n            if s[i] == '-':\n                is_off = not is_off\n            elif (s[i] == '>' and is_off) or (s[i] == '<' and not is_off):\n                returnable_rooms += 1\n        print(returnable_rooms)",
        "result": "failed: testcase 0",
        "similarities": [
            0.996177077293396,
            0.9961273670196533,
            0.995795726776123,
            0.9938210844993591,
            0.9959748983383179,
            0.9970136284828186,
            0.9937143921852112,
            0.9965274333953857,
            0.9969547986984253,
            0.9913917183876038,
            0.9960793256759644,
            0.996512770652771,
            0.9973664879798889,
            0.9971172213554382,
            0.9963234663009644,
            0.9967880249023438,
            0.9961756467819214,
            0.9946979880332947,
            0.9972112774848938,
            0.9973807334899902
        ]
    },
    "3912": {
        "similarity": 0.9953286051750183,
        "body": "    s = ''.join(sorted(s))\n    k = 1\n    res = []\n    for i in range(0, n):\n        if i == n - 1:\n            break\n        if s[i] != s[n - i - 1]:\n            k += 1\n        while i + 1 < n and s[i] == s[i + 1]:\n            i += 1\n    res.append(s[:k])\n    for _ in range(1, k):\n        res.append(''.join([s[j] for j in range(k)]))\n    print(k)\n    print(*res, sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9942886233329773,
            0.9943747520446777,
            0.9909001588821411,
            0.9950348734855652,
            0.9953286051750183,
            0.9913123250007629,
            0.9948803782463074,
            0.9943054914474487,
            0.9948761463165283,
            0.9887442588806152,
            0.9920196533203125,
            0.9952360391616821,
            0.9925765991210938,
            0.9911137819290161,
            0.9941095113754272,
            0.9936204552650452,
            0.993753969669342,
            0.9890657067298889,
            0.994171142578125,
            0.9936643838882446
        ]
    },
    "3878": {
        "similarity": 0.9977818727493286,
        "body": "    n, m = map(int, input().split())\n    friends = {i: set() for i in range(1, n+1)}\n    for _ in range(m):\n        u, v = map(int, input().split())\n        friends[u].add(v)\n        friends[v].add(u)\n\n    steps = 0\n    selected_guests = []\n    while True:\n        max_friends = 0\n        best_guest = None\n        for guest, friend_set in friends.items():\n            if len(friend_set) > max_friends:\n                max_friends = len(friend_set)\n                best_guest = guest\n\n        if best_guest is None:\n            break\n\n        steps += 1\n        selected_guests.append(best_guest)\n\n        new_friends = set()\n        for friend in friends[best_guest]:\n            friends[friend].update(friends[best_guest])\n            new_friends.update({i for i in range(1, n+1) if i not in [best_guest, friend]})\n\n        for friend_set in friends.values():\n            friend_set -= new_friends\n\n    print(steps)\n    print(*selected_guests, sep=' ')",
        "result": "timed out",
        "similarities": [
            0.9954537153244019,
            0.9977641105651855,
            0.9952031373977661,
            0.9977818727493286,
            0.9977161884307861,
            0.9972665905952454,
            0.9956603050231934,
            0.9955946207046509,
            0.9969068169593811,
            0.9969900250434875,
            0.9977320432662964,
            0.9970237612724304,
            0.997458815574646,
            0.997294008731842,
            0.9971188902854919,
            0.9968637228012085,
            0.9966766238212585,
            0.9971432089805603,
            0.9977126121520996,
            0.9975925087928772
        ]
    },
    "3010": {
        "similarity": 0.9962860941886902,
        "body": "    n = int(input())\n    points = set()\n    for _ in range(n):\n        x0, y0, x1, y1 = map(int, input().split())\n        if x0 == x1:\n            for y in range(min(y0, y1), max(y0, y1) + 1):\n                points.add((x0, y))\n        elif y0 == y1:\n            for x in range(min(x0, x1), max(x0, x1) + 1):\n                points.add((x, y0))\n        else:\n            m = (y1 - y0) * 1.0 / (x1 - x0)\n            b = y0 - m * x0\n            for x in range(min(x0, x1), max(x0, x1) + 1):\n                y = int(m * x + b)\n                points.add((x, y))\n    return len(points) if len(points) <= 1000 else -1",
        "result": "failed: testcase 0",
        "similarities": [
            0.9962860941886902,
            0.9939649701118469,
            0.9939175844192505,
            0.9957967400550842,
            0.9884850382804871,
            0.9943265318870544,
            0.9950656890869141,
            0.9958536028862,
            0.9907509684562683,
            0.9951581358909607,
            0.9934242963790894,
            0.9948459267616272,
            0.994472324848175,
            0.994746744632721,
            0.994937002658844,
            0.9911947846412659,
            0.9962778687477112,
            0.9941518902778625,
            0.9942137002944946,
            0.9919419884681702
        ]
    },
    "3068": {
        "similarity": 0.9964137673377991,
        "body": "    N = int(input())\n    suspects = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    solutions = 0\n    for _ in range(N):\n        investigation = input().strip().split()\n        a, b, player, reply = (ch for ch in (investigation[0], investigation[1], *map(int, investigation[2:])) if ch not in ('AB', 'BC'))\n        suspects -= {a, b}\n        if reply == 1:\n            suspects &= set([a, b])\n    for a in suspects:\n        for b in suspects:\n            for c in suspects:\n                if {a, b, c} <= set('ABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n                    solutions += 1\n    print(solutions)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9956943988800049,
            0.9953605532646179,
            0.9964113831520081,
            0.9957100749015808,
            0.9917766451835632,
            0.9958117604255676,
            0.9950156211853027,
            0.9959386587142944,
            0.9957734942436218,
            0.9952266216278076,
            0.9940145611763,
            0.9942094087600708,
            0.9959337115287781,
            0.9912866353988647,
            0.9964137673377991,
            0.9952645897865295,
            0.9957140684127808,
            0.9962929487228394,
            0.9958779215812683,
            0.9947091937065125
        ]
    },
    "3030": {
        "similarity": 0.9965301156044006,
        "body": "    n = int(input())\n    nodes = []\n    for i in range(n):\n        v, p = map(int, input().split())\n        nodes.append((v, p))\n    heap_size = 0\n    for node in reversed(nodes):\n        if node[1] == 0:\n            heap_size += 1\n        else:\n            prev_node = nodes[node[1]-1]\n            if node[0] > prev_node[0]:\n                heap_size += 1\n    return heap_size",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951493144035339,
            0.9945437908172607,
            0.9946780204772949,
            0.9965175986289978,
            0.9955241680145264,
            0.9946568012237549,
            0.9939576983451843,
            0.9957957863807678,
            0.9869325757026672,
            0.9961044788360596,
            0.9936612844467163,
            0.9962401390075684,
            0.9936469197273254,
            0.9945647716522217,
            0.9942736625671387,
            0.9965301156044006,
            0.9943540692329407,
            0.9944534301757812,
            0.9955599904060364,
            0.9936589002609253
        ]
    },
    "3630": {
        "similarity": 0.9962041974067688,
        "body": "    s1, s2 = input().split()\n    moves = 0\n    for i in range(len(s1)):\n        while s1[i] != s2[i]:\n            if 'z' in s1[:i+1]:\n                break\n            elif 'a' in s2[:i+1]:\n                break\n            if ord(s1[i]) < ord(s2[i]):\n                moves += 1\n                for j in range(i):\n                    s1 = (chr(ord(s1[j]) + 1)).join(s1.split()[0])\n            else:\n                moves += 1\n                for j in range(i+1, len(s1)):\n                    s1 = s1[:j] + chr(ord(s1[j]) - 1) + s1[j+1:]\n    print(moves)",
        "result": "timed out",
        "similarities": [
            0.9930532574653625,
            0.9957700967788696,
            0.9937154650688171,
            0.9898662567138672,
            0.9925249218940735,
            0.9959600567817688,
            0.9930219054222107,
            0.9938623309135437,
            0.9939956665039062,
            0.9951096773147583,
            0.9870298504829407,
            0.9962041974067688,
            0.9939430952072144,
            0.9957021474838257,
            0.9958696961402893,
            0.9931433796882629,
            0.9945957660675049,
            0.9950124025344849,
            0.9944873452186584,
            0.9955436587333679
        ]
    },
    "3133": {
        "similarity": 0.9954490661621094,
        "body": "    n, A, B = map(int, input().split())\n    turns = [0] * n\n    for i in range(n):\n        l, r, t = map(int, input().split())\n        if t == 1:\n            if i < A:\n                turns[A] += 1\n            if i < B:\n                turns[B] += 1\n    if turns[A] > turns[B]:\n        return str(turns[A])\n    elif turns[B] > turns[A]:\n        return str(turns[B])\n    else:\n        return \"indistinguishable\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9943006634712219,
            0.993402361869812,
            0.9946019053459167,
            0.99395352602005,
            0.9943404197692871,
            0.9925515055656433,
            0.9944987893104553,
            0.9886964559555054,
            0.9895804524421692,
            0.992775559425354,
            0.9944056272506714,
            0.9949195384979248,
            0.99276202917099,
            0.9928377270698547,
            0.9954490661621094,
            0.9910690784454346,
            0.9946680665016174,
            0.9903627038002014,
            0.9953200817108154,
            0.9953470826148987
        ]
    },
    "3480": {
        "similarity": 0.9967853426933289,
        "body": "import sys\n\n    L, D = map(int, input().split())\n    for _ in range(L):\n        line, times = input().split(), list(map(int, input().split()))\n        first_voice_line = line + ('=' if len(line) > 20 else '')\n        second_voice_line = ''\n        for i, (syllable, time) in enumerate(zip(line.split(), times)):\n            for j in range(time):\n                if j >= D:\n                    second_voice_line += syllable + '_'\n                first_voice_line += syllable\n            first_voice_line += '____' * 20\n        print(first_voice_line)\n        if second_voice_line:\n            print(second_voice_line + '/\\n')\n        else:\n            print('/\\n')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9951791167259216,
            0.994612455368042,
            0.9947879314422607,
            0.9947218894958496,
            0.9948577880859375,
            0.9967853426933289,
            0.9962640404701233,
            0.9937322735786438,
            0.9935173392295837,
            0.9937669634819031,
            0.996354341506958,
            0.9948925375938416,
            0.9959017038345337,
            0.9955237507820129,
            0.9947540760040283,
            0.9950894713401794,
            0.9964916706085205,
            0.9949609637260437,
            0.994087815284729,
            0.993963360786438
        ]
    },
    "3389": {
        "similarity": 0.9962743520736694,
        "body": "    n, k = map(int, input().split())\n    video_types = input()\n\n    clicks = 0\n    current_type = ''\n    for i in range(n):\n        if video_types[i] != current_type:\n            current_type = video_types[i]\n            clicks += 1\n\n    return clicks",
        "result": "failed: testcase 0",
        "similarities": [
            0.9959790110588074,
            0.9955737590789795,
            0.9955902099609375,
            0.9954310059547424,
            0.9948668479919434,
            0.994555652141571,
            0.9913564920425415,
            0.996203601360321,
            0.9961071014404297,
            0.9920617938041687,
            0.9924461245536804,
            0.9953837990760803,
            0.9956418871879578,
            0.9946704506874084,
            0.9962743520736694,
            0.9960168600082397,
            0.9951171875,
            0.9926139712333679,
            0.9930872917175293,
            0.9946020841598511
        ]
    },
    "3925": {
        "similarity": 0.9953063130378723,
        "body": "    s = input()\n    max_length = 0\n    for i in range(len(s)):\n        length = 1\n        for j in range(i + 1, len(s)):\n            if (s[i] == 'b' and s[j] == 'w') or (s[i] == 'w' and s[j] == 'b'):\n                break\n            length += 1\n        max_length = max(max_length, length)\n    print(max_length)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9952143430709839,
            0.9914309978485107,
            0.994367778301239,
            0.9937557578086853,
            0.994318425655365,
            0.9916875958442688,
            0.9941312074661255,
            0.9938756823539734,
            0.9940954446792603,
            0.9935846924781799,
            0.9898298382759094,
            0.9943425059318542,
            0.9945226311683655,
            0.989807665348053,
            0.9922244548797607,
            0.9953063130378723,
            0.9908479452133179,
            0.995013415813446,
            0.993137538433075,
            0.9934327006340027
        ]
    },
    "3700": {
        "similarity": 0.9973697662353516,
        "body": "    n, k = map(int, input().split())\n    count = 0\n    for i in range(1, n):\n        if i <= k:\n            j = k - i\n            if j <= n and j >= i:\n                count += 1\n    print(count)",
        "result": "timed out",
        "similarities": [
            0.9963405132293701,
            0.9955857992172241,
            0.9968129396438599,
            0.9942833781242371,
            0.996490478515625,
            0.9939025044441223,
            0.9973347187042236,
            0.9955466389656067,
            0.9945626854896545,
            0.9937571287155151,
            0.9973697662353516,
            0.9958130717277527,
            0.9972341656684875,
            0.9963449239730835,
            0.9962531924247742,
            0.9960328936576843,
            0.9956873059272766,
            0.9962276816368103,
            0.9946451783180237,
            0.9957911968231201
        ]
    },
    "3944": {
        "similarity": 0.9831629395484924,
        "body": "    N, M, K = map(int, input().split())\n    result = 0\n    for a in range(3):\n        for b in range(3):\n            for c in range(3):\n                win_conditions = (a == 0) + (b == 1 and a == 0) + (c == 1 and a == 2)\n                if win_conditions:\n                    result += 1\n    print(result % 1000000007)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9518492817878723,
            0.9747166037559509,
            0.9640777111053467,
            0.9791203737258911,
            0.9830876588821411,
            0.9819077253341675,
            0.9640244245529175,
            0.9829840660095215,
            0.9826812744140625,
            0.9553095102310181,
            0.9772582054138184,
            0.9553095102310181,
            0.9825376272201538,
            0.9676991701126099,
            0.9611945748329163,
            0.9762508869171143,
            0.9831629395484924,
            0.9518492817878723,
            0.975472092628479,
            0.9816334247589111
        ]
    },
    "3821": {
        "similarity": 0.9951944947242737,
        "body": "import math\n    n = int(input())\n    probs = [float(input()) for _ in range(n)]\n    total_prob = 0\n    for i in range(n):\n        prob = 1\n        for j in range(i+1):\n            prob *= (1-probs[j])\n        total_prob += prob * probs[i]\n    print(total_prob)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9927225708961487,
            0.9908506274223328,
            0.9932230710983276,
            0.9932954907417297,
            0.9949902892112732,
            0.9951306581497192,
            0.9925543069839478,
            0.992426335811615,
            0.9941702485084534,
            0.9943366050720215,
            0.9913529753684998,
            0.9951944947242737,
            0.9944391846656799,
            0.9913229942321777,
            0.975963294506073,
            0.9918287992477417,
            0.9913907647132874,
            0.9939912557601929,
            0.9928745627403259,
            0.9928804039955139
        ]
    },
    "3667": {
        "similarity": 0.9971700310707092,
        "body": "    w, p = map(int, input().split())\n    wells = []\n    for _ in range(w):\n        x, y = map(int, input().split())\n        wells.append((x, y))\n    \n    pipes = []\n    for _ in range(p):\n        s, x, y = map(int, input().split())\n        pipes.append((s-1, (x, y)))\n    \n    intersections = set()\n    for pipe in pipes:\n        for well in wells:\n            if well == pipe[1]:\n                continue\n            if abs(pipe[1][0] - well[0]) <= 1 and abs(pipe[1][1] - well[1]) <= 1:\n                intersections.add(tuple(sorted((pipe[1][0], pipe[1][1], well[0], well[1]))))\n    \n    robots = set()\n    for intersection in intersections:\n        if len(robots) >= 2:\n            return \"impossible\"\n        robots.add(intersection)\n    \n    print(\"possible\" if len(robots) == w else \"impossible\")",
        "result": "failed: testcase 1",
        "similarities": [
            0.9971700310707092,
            0.9951958060264587,
            0.9966933727264404,
            0.9961979389190674,
            0.9961031079292297,
            0.9963491559028625,
            0.9963077902793884,
            0.9967573285102844,
            0.9968515038490295,
            0.995440661907196,
            0.9966707825660706,
            0.9946132302284241,
            0.9956157207489014,
            0.996525228023529,
            0.9968510866165161,
            0.9970614910125732,
            0.9956964254379272,
            0.9970026612281799,
            0.9943979978561401,
            0.9957833886146545
        ]
    },
    "3959": {
        "similarity": 0.9974681735038757,
        "body": "import sys\n    n, m = map(int, input().split())\n    pkm_types = []\n    for _ in range(n):\n        g, *pkm_type = map(int, input().split())\n        pkm_types.append(list(pkm_type))\n    total_pkm_by_type = [0] * (m + 1)\n    for g in pkm_types:\n        for pkm_type in g:\n            total_pkm_by_type[pkm_type] += 1\n    plan_count = 1\n    for count in total_pkm_by_type[1:]:\n        plan_count *= count\n    print(plan_count % (10**9 + 7))",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969442486763,
            0.9948613047599792,
            0.9971210956573486,
            0.9930903911590576,
            0.9964922666549683,
            0.9959873557090759,
            0.9966559410095215,
            0.9967221617698669,
            0.9962695240974426,
            0.9973349571228027,
            0.9941338300704956,
            0.9967030882835388,
            0.9963196516036987,
            0.9964593648910522,
            0.9960653185844421,
            0.9948770403862,
            0.9954109191894531,
            0.9969907999038696,
            0.9974681735038757,
            0.9964926838874817
        ]
    },
    "3692": {
        "similarity": 0.9962778687477112,
        "body": "import math\n\n    n = int(input())\n    regions = 0\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        for i in range(-10, 11):\n            for j in range(-10, 11):\n                if math.hypot(i - x, j - y) <= r:\n                    regions += 1\n    print(regions)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9936232566833496,
            0.9946869611740112,
            0.9944818615913391,
            0.991929292678833,
            0.9925224184989929,
            0.994605541229248,
            0.9940273761749268,
            0.9928701519966125,
            0.9939149618148804,
            0.9960092306137085,
            0.9929827451705933,
            0.9962778687477112,
            0.9962640404701233,
            0.9941269755363464,
            0.9934303164482117,
            0.9944472312927246,
            0.9952631592750549,
            0.9952982664108276,
            0.993010401725769,
            0.9905443787574768
        ]
    },
    "3894": {
        "similarity": 0.9956434369087219,
        "body": "    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    for i in range(n):\n        if a[i] % 2 == 0:\n            if a[i] // 2 <= k:\n                return \"Kevin\"\n    \n    return \"Nicky\"",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945606589317322,
            0.9955080151557922,
            0.9940902590751648,
            0.9921999573707581,
            0.973286509513855,
            0.9917128682136536,
            0.9909399151802063,
            0.9951569437980652,
            0.9950411915779114,
            0.9955217242240906,
            0.9948087930679321,
            0.9941175580024719,
            0.9918648600578308,
            0.9937211871147156,
            0.9943709969520569,
            0.9951779246330261,
            0.9860416054725647,
            0.9956434369087219,
            0.9894738793373108,
            0.9950875639915466
        ]
    },
    "3856": {
        "similarity": 0.9961807131767273,
        "body": "    n = int(input())\n    total_width = 0\n    max_height = 0\n    vertical_rectangles = []\n    \n    for _ in range(n):\n        w, h = map(int, input().split())\n        total_width += w\n        max_height = max(max_height, h)\n        if w > h:\n            vertical_rectangles.append((w, h))\n    \n    vertical_rectangles.sort()\n    remaining_space = total_width - sum(h for _, h in vertical_rectangles)\n    return max_height * (total_width + remaining_space // 2)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9871507287025452,
            0.9957062602043152,
            0.994889497756958,
            0.9955418109893799,
            0.9914151430130005,
            0.9941571950912476,
            0.9924629926681519,
            0.9890564680099487,
            0.9909639954566956,
            0.9952011108398438,
            0.9952527284622192,
            0.9951346516609192,
            0.9942854642868042,
            0.9934744834899902,
            0.993426501750946,
            0.995218813419342,
            0.9950268268585205,
            0.9944878816604614,
            0.9961807131767273,
            0.9948949217796326
        ]
    },
    "3282": {
        "similarity": 0.9952989220619202,
        "body": "    P = int(input())\n    total_count = 0\n    bills = []\n    for a in range(1, P):\n        for b in range(a + 1, P):\n            if str(a) + str(b) != str(P): \n                if len(set(str(a) + str(b))) == 3:\n                    total_count += 1\n                    bills.append((a, b))\n    print(total_count)\n    for i in range(min(5000, total_count)):\n        print(*bills[i])",
        "result": "timed out",
        "similarities": [
            0.9908993244171143,
            0.9894329905509949,
            0.9952989220619202,
            0.9933914542198181,
            0.9948156476020813,
            0.9920637011528015,
            0.995246410369873,
            0.9948325753211975,
            0.993853747844696,
            0.9945657849311829,
            0.9939462542533875,
            0.9930371046066284,
            0.9941300749778748,
            0.9711978435516357,
            0.9946297407150269,
            0.9945118427276611,
            0.9915759563446045,
            0.9946383237838745,
            0.9947438836097717,
            0.9902890920639038
        ]
    },
    "3596": {
        "similarity": 0.996181309223175,
        "body": "from math import gamma, exp, sqrt, pi, sin, cos, erf\nimport sys\n\n    a, b, c = map(float, input().split())\n    t1, t2, t3, t4 = map(int, input().split())\n    n, k, r, s, l = map(int, input().split())\n\n        return c * (integrate(lambda y: t1*gamma(y) + sqrt(t2*log(erf(t3*x))) - pow(J_k(x),t4), 0, x))\n\n        return lambda tau: (cos(k*tau - x*sin(tau)))/pi\n\n        result = 0\n        for i in range(int((b-a)*10000)+1):\n            result += func(a+i/10000*(b-a))\n        return result * (b-a)/10000\n\n        return sum([(f**(i))(0)/(i!)*x**i for i in range(r+1)])\n\n        return sum([P(i,n-1)*x**i for i in range(r+n+1)])\n\n    g = ((P_s(l)) ** ((integrate(lambda x: P_s(x), 0, l)) + 1))\n\n    print(((g + l)**2 / (pi * exp))/((l + 1)))\n\nif __name__ == \"__main__\":\n    main()",
        "result": "failed: testcase 0",
        "similarities": [
            0.9961351156234741,
            0.9947546124458313,
            0.9954631328582764,
            0.9924577474594116,
            0.9938888549804688,
            0.996181309223175,
            0.9954110980033875,
            0.9957903027534485,
            0.9946560263633728,
            0.9925042986869812,
            0.9959238171577454,
            0.9948061108589172,
            0.9917285442352295,
            0.9940854907035828,
            0.9948754906654358,
            0.9948849081993103,
            0.9948548078536987,
            0.9955815672874451,
            0.995906412601471,
            0.9956801533699036
        ]
    },
    "3540": {
        "similarity": 0.9959242939949036,
        "body": "    puzzle = [list(input().strip()) for _ in range(4)]\n    moves = 0\n    for i in range(4):\n        row_count = {'R': 0, 'G': 0, 'B': 0, 'Y': 0}\n        for j in range(4):\n            row_count[puzzle[i][j]] += 1\n        if row_count['R'] > 0 and row_count['G'] > 0 and row_count['B'] > 0 and row_count['Y'] > 0:\n            break\n        elif i < 3 and puzzle[i][0] == puzzle[i+1][0]:\n            moves += 1\n        else:\n            for j in range(4):\n                if puzzle[0][j] != puzzle[3][j]:\n                    break\n            for _ in range(moves + 1):\n                puzzle.append(puzzle.pop(0))\n    return str(moves)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9955227375030518,
            0.9953633546829224,
            0.9927639365196228,
            0.9941972494125366,
            0.9947188496589661,
            0.994424045085907,
            0.9948684573173523,
            0.9959242939949036,
            0.9870752096176147,
            0.9948518872261047,
            0.9953968524932861,
            0.9953830242156982,
            0.9951897859573364,
            0.9949783682823181,
            0.9948588013648987,
            0.9946771264076233,
            0.9956662058830261,
            0.9917594790458679,
            0.99474036693573,
            0.9934943318367004
        ]
    },
    "3354": {
        "similarity": 0.9969062805175781,
        "body": "import math\n\n    s, r, n, z = map(float, input().split())\n    area_sandwich = math.pi * (s ** 2)\n    max_area_pickles = area_sandwich * (z / 100)\n    \n    pickles_placed = 0\n    for i in range(n):\n        if math.pi * (r ** 2) + (math.pi * ((i % 2) * 2 + r) ** 2) <= max_area_pickles:\n            pickles_placed += 1\n        else:\n            break\n    \n    return pickles_placed",
        "result": "failed: testcase 0",
        "similarities": [
            0.9964213371276855,
            0.9947307109832764,
            0.9960397481918335,
            0.9956117868423462,
            0.9964429140090942,
            0.9969062805175781,
            0.99576336145401,
            0.9959008097648621,
            0.9942851066589355,
            0.9941381216049194,
            0.9947296977043152,
            0.9965577721595764,
            0.9944168925285339,
            0.9959936738014221,
            0.9950900673866272,
            0.9956528544425964,
            0.9920145273208618,
            0.9949612021446228,
            0.996830403804779,
            0.9958730936050415
        ]
    },
    "3217": {
        "similarity": 0.9923529624938965,
        "body": "import sys\n\n    n = int(input())\n    panels = set()\n    for _ in range(n):\n        x, y, z = map(int, input().split())\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                for dz in [-1, 0, 1]:\n                    if abs(dx) + abs(dy) + abs(dz) == 1:\n                        panels.add((x+dx, y+dy, z+dz))\n    return len(panels)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9835800528526306,
            0.9879698753356934,
            0.9889229536056519,
            0.9877603650093079,
            0.9890297651290894,
            0.9806298017501831,
            0.9711129069328308,
            0.9907026886940002,
            0.991327166557312,
            0.9923529624938965,
            0.9894216656684875,
            0.9908924102783203,
            0.988075852394104,
            0.9900184273719788,
            0.9918144941329956,
            0.9876496195793152,
            0.9846932291984558,
            0.9902995228767395,
            0.9877872467041016,
            0.9904564619064331
        ]
    },
    "3520": {
        "similarity": 0.9974768757820129,
        "body": "    n, p, c = map(int, input().split())\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n    pills.sort()\n    \n    age = 0\n    last_pill = 0\n    max_age = 0\n    \n    for t, x, y in pills:\n        if t > age + c:\n            age += y\n        else:\n            age += y - (age - last_pill)\n        last_pill = age\n        max_age = max(max_age, age)\n    \n    return float(max_age)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9945580363273621,
            0.9972186088562012,
            0.9966126680374146,
            0.995967447757721,
            0.9956907033920288,
            0.9949800372123718,
            0.9943376779556274,
            0.9971749186515808,
            0.9974039793014526,
            0.9958906769752502,
            0.9967530965805054,
            0.9973440766334534,
            0.9974768757820129,
            0.9965453147888184,
            0.9915961027145386,
            0.9929453134536743,
            0.9968881011009216,
            0.997226893901825,
            0.9969735741615295,
            0.9964831471443176
        ]
    },
    "3475": {
        "similarity": 0.9976071119308472,
        "body": "    t, n = map(int, input().split())\n    d_min = []\n    r_max = []\n    for _ in range(t):\n        d_min.append(int(input()))\n        r_max.append(int(input()) * 1000)\n    d, h = [], []\n    for _ in range(n - 1):\n        d.append(int(input()))\n        h.append(int(input()))\n\n    s = [0]\n    total_distance = 0\n    for i in range(1, n):\n        if (total_distance + d[i-1] < d_min[0]):\n            return 'IMPOSSIBLE'\n        total_distance += d[i-1]\n        heading_diff = abs(h[i-1] - h[i])\n        if (heading_diff > r_max[0]):\n            s.append(i)\n    print(len(s) - 1)",
        "result": "failed: testcase 0",
        "similarities": [
            0.9968982338905334,
            0.9962289929389954,
            0.9964857697486877,
            0.9973798990249634,
            0.9974419474601746,
            0.9970406889915466,
            0.9969482421875,
            0.9970211386680603,
            0.9972864389419556,
            0.9976071119308472,
            0.9971608519554138,
            0.9975581765174866,
            0.9968511462211609,
            0.9963493347167969,
            0.9957480430603027,
            0.9970046877861023,
            0.9972164034843445,
            0.9971570372581482,
            0.9967086315155029,
            0.9966306090354919
        ]
    },
    "3977": {
        "similarity": 0.9944582581520081,
        "body": "    n, m, k = map(int, input().split())\n    gov_nodes = list(map(int, input().split()))\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    \n    max_edges = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            if gov_nodes[i] != gov_nodes[j]:\n                max_edges += 1\n    \n    return max_edges",
        "result": "failed: testcase 0",
        "similarities": [
            0.9918529987335205,
            0.9923027753829956,
            0.9874866008758545,
            0.9886216521263123,
            0.9904252886772156,
            0.993266761302948,
            0.993255615234375,
            0.9919184446334839,
            0.9933154582977295,
            0.9881913065910339,
            0.9906600117683411,
            0.9934371113777161,
            0.9936790466308594,
            0.9908491373062134,
            0.9914670586585999,
            0.9921324849128723,
            0.9944582581520081,
            0.9940748810768127,
            0.9874886870384216,
            0.9896832704544067
        ]
    },
    "3626": {
        "similarity": 0.9968454241752625,
        "body": "    n = int(input())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        rectangles.append((x1, y1, x2, y2))\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            (x1, y1, x2, y2) = rectangles[i]\n            (x3, y3, x4, y4) = rectangles[j]\n            if max(0, min(x2, x4)) <= max(x1, x3) and max(0, min(y2, y4)) <= max(y1, y3):\n                return 1\n    return 0",
        "result": "failed: testcase 0",
        "similarities": [
            0.9913701415061951,
            0.9960033893585205,
            0.9942554831504822,
            0.991159975528717,
            0.9954733848571777,
            0.9962906241416931,
            0.99615877866745,
            0.9950788617134094,
            0.9926779866218567,
            0.989450991153717,
            0.9968454241752625,
            0.9962328672409058,
            0.9953256249427795,
            0.9947296977043152,
            0.9956101775169373,
            0.9957633018493652,
            0.9963365197181702,
            0.9963995218276978,
            0.9937912821769714,
            0.9943152070045471
        ]
    },
    "3584": {
        "similarity": 0.9973575472831726,
        "body": "import math\n\n    N, M, K = map(int, input().split())\n    onions = []\n    fence_posts = []\n    for _ in range(N):\n        x, y = map(int, input().split())\n        onions.append((x, y))\n    for _ in range(M):\n        A, B = map(int, input().split())\n        fence_posts.append((A, B))\n\n    onions.sort()\n    fence_posts.sort()\n\n    max_protected = 0\n    for i in range(len(fence_posts) - K + 1):\n        protected_onions = []\n        for onion in onions:\n            x, y = onion\n            flag = False\n            for j in range(i, i+K):\n                A, B = fence_posts[j]\n                if min(A, B) <= x and max(A, B) >= x and min(A, B) <= y and max(A, B) >= y:\n                    flag = True\n                    break\n            if flag:\n                protected_onions.append(onion)\n        max_protected = max(max_protected, len(protected_onions))\n    return max_protected",
        "result": "failed: testcase 0",
        "similarities": [
            0.9969834089279175,
            0.9966136813163757,
            0.9956790804862976,
            0.9973575472831726,
            0.9945783019065857,
            0.997109055519104,
            0.9964964985847473,
            0.9972898364067078,
            0.9968466758728027,
            0.9969838857650757,
            0.994110107421875,
            0.9971630573272705,
            0.9965240359306335,
            0.995527982711792,
            0.9969896078109741,
            0.9964371919631958,
            0.996486246585846,
            0.9970579743385315,
            0.9971234202384949,
            0.9969743490219116
        ]
    },
    "3950": {
        "similarity": 0.9970289468765259,
        "body": "    n, q = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    for i in range(q):\n        l_i, r_i = map(int, input().split())\n        for j in range(l_i-1, r_i):\n            arr[j] += 1\n    \n    max_val = max(arr)\n    if max_val > q:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(*[i+1 for i in arr], sep=' ')",
        "result": "failed: testcase 0",
        "similarities": [
            0.9970289468765259,
            0.9955937266349792,
            0.9952025413513184,
            0.9952483177185059,
            0.9959722757339478,
            0.9969916939735413,
            0.9927306771278381,
            0.9951657056808472,
            0.9970080852508545,
            0.9949000477790833,
            0.9953077435493469,
            0.9967767596244812,
            0.9915611743927002,
            0.9952894449234009,
            0.9950897097587585,
            0.9968709349632263,
            0.9966919422149658,
            0.9967796206474304,
            0.9965482950210571,
            0.9960429668426514
        ]
    },
    "3075": {
        "similarity": 0.9959119558334351,
        "body": "    n, g = map(int, input().split())\n    costs = []\n    for _ in range(n):\n        d, c = map(int, input().split())\n        if d > g:\n            return \"cancel road trip\"\n        costs.append((c, d))\n    costs.sort()\n    total_distance = 0\n    cost = 0\n    tank_capacity_reached = False\n    for _, d in costs:\n        while total_distance + d <= g and total_distance < g:\n            if not tank_capacity_reached:\n                cost += min(d - total_distance, costs[0][0])\n                tank_capacity_reached = True\n            total_distance += d\n    return str(cost)",
        "result": "failed: testcase 0",
        "similarities": [
            0.990678071975708,
            0.9945600628852844,
            0.9959119558334351,
            0.9951014518737793,
            0.9943241477012634,
            0.9901888966560364,
            0.9950989484786987,
            0.9948748350143433,
            0.9944708943367004,
            0.9930934906005859,
            0.9954226613044739,
            0.9922194480895996,
            0.9954752922058105,
            0.9940938353538513,
            0.9946856498718262,
            0.9932745695114136,
            0.9951955080032349,
            0.9934827089309692,
            0.993689775466919,
            0.9909002184867859
        ]
    },
    "3711": {
        "similarity": 0.99614417552948,
        "body": "    n, m, k = map(int, input().split())\n    if k > n*m // 2:\n        return -1\n    area = max(0, min(n-1, m-1) - k)\n    for i in range(k+1):\n        if (n-i)*(m-k+i) >= area:\n            return (n-i)*(m-k+i)\n    return -1",
        "result": "timed out",
        "similarities": [
            0.9920177459716797,
            0.9941456317901611,
            0.9948282837867737,
            0.9936131834983826,
            0.9935041069984436,
            0.9947931170463562,
            0.9941225647926331,
            0.9953489899635315,
            0.9954288005828857,
            0.9935259819030762,
            0.9944413900375366,
            0.99614417552948,
            0.9959654808044434,
            0.9937809705734253,
            0.9847655892372131,
            0.9950404167175293,
            0.9950746297836304,
            0.98806232213974,
            0.9957793354988098,
            0.9952308535575867
        ]
    }
}