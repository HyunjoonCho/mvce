{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 9.842105263157896
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n    return result",
        "result": "passed",
        "average_distance": 15.473684210526315
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad",
        "result": "passed",
        "average_distance": 4.538461538461538
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for (i, num) in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "result": "passed",
        "average_distance": 7.315789473684211
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        depth = max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed",
        "average_distance": 3.5714285714285716
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_val = 0\n    product_val = 1\n    for number in numbers:\n        sum_val += number\n        product_val *= number\n    return (sum_val, product_val)",
        "result": "passed",
        "average_distance": 18.0
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result",
        "result": "passed",
        "average_distance": 11.357142857142858
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    n = len(string)\n    for i in range(n, -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]\n    return string",
        "result": "failed: ",
        "average_distance": 20.526315789473685
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for (x, y) in zip(a, b)))",
        "result": "passed",
        "average_distance": 6.315789473684211
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
        "result": "passed",
        "average_distance": 2.4
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a",
        "result": "passed",
        "average_distance": 0.631578947368421
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[note] for note in music_string.split()]",
        "result": "passed",
        "average_distance": 6.0
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count",
        "result": "passed",
        "average_distance": 7.315789473684211
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda word: number_map[word])\n    return ' '.join(sorted_numbers)",
        "result": "passed",
        "average_distance": 9.947368421052632
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair",
        "result": "passed",
        "average_distance": 13.722222222222221
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 1.2105263157894737
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor ** 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors",
        "result": "passed",
        "average_distance": 15.133333333333333
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))",
        "result": "passed",
        "average_distance": 3.0
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [x for x in l if x > 0]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 18.526315789473685
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    a = xs[-1]\n    b = sum(xs[:-1])\n    return -b / a",
        "result": "failed: ",
        "average_distance": 27.0
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    indices_to_sort = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in indices_to_sort])\n    result = l[:]\n    for (old_index, new_value) in zip(indices_to_sort, sorted_values):\n        result[old_index] = new_value\n    return result",
        "result": "passed",
        "average_distance": 1.631578947368421
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 4.157894736842105
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed",
        "average_distance": 5.052631578947368
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for (i, value) in zip(even_indices, even_values):\n        result[i] = value\n    return result",
        "result": "passed",
        "average_distance": 27.36842105263158
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    (a, b) = (0, 1)\n    count = 0\n    while True:\n        fib_num = a + b\n        (a, b) = (b, fib_num)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num",
        "result": "failed: name 'num' is not defined",
        "average_distance": 18.5
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 13.0
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    return n * n",
        "result": "passed",
        "average_distance": 1.105263157894737
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [x + 1 for x in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join((str(digit) for digit in digits[::-1]))",
        "result": "passed",
        "average_distance": 8.736842105263158
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return d",
        "result": "passed",
        "average_distance": 7.7368421052631575
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0",
        "result": "passed",
        "average_distance": 12.894736842105264
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text == text[::-1]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))",
        "result": "passed",
        "average_distance": 1.0
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    return all((x < t for x in l))",
        "result": "passed",
        "average_distance": 3.4210526315789473
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b",
        "result": "passed",
        "average_distance": 3.6842105263157894
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "result": "passed",
        "average_distance": 5.473684210526316
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing",
        "result": "passed",
        "average_distance": 25.263157894736842
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 1.1578947368421053
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n",
        "result": "passed",
        "average_distance": 26.23076923076923
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "average_distance": 7.947368421052632
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * x for (i, x) in enumerate(xs)][1:]",
        "result": "passed",
        "average_distance": 5.052631578947368
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    (a, b, c) = (0, 0, 1)\n    for _ in range(3, n + 1):\n        (a, b, c) = (b, c, a + b + c)\n    return c",
        "result": "passed",
        "average_distance": 1.894736842105263
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum((1 for char in s if char in vowels))\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed",
        "average_distance": 11.052631578947368
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return x_str[::-1]\n    shift %= num_digits\n    return x_str[-shift:] + x_str[:-shift]",
        "result": "failed: ",
        "average_distance": 6.0
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges",
        "result": "passed",
        "average_distance": 11.68421052631579
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    min_even_value = float('inf')\n    min_index = -1\n    for (i, value) in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_value = value\n            min_index = i\n    return [min_even_value, min_index] if min_index != -1 else []",
        "result": "passed",
        "average_distance": 5.0
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "result": "passed",
        "average_distance": 2.1
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result",
        "result": "passed",
        "average_distance": 9.526315789473685
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "passed",
        "average_distance": 2.3333333333333335
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes",
        "result": "passed",
        "average_distance": 2.4210526315789473
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    return lst1 if len1 <= len2 else lst2",
        "result": "passed",
        "average_distance": 3.736842105263158
    },
    "HumanEval/75": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1 / n))",
        "result": "failed: This prints if this assert fails 2 (also good for debugging!)",
        "average_distance": 15.9375
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    return round(a ** (1 / 3)) ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "average_distance": 14.470588235294118
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in prime_hex_digits))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'",
        "result": "passed",
        "average_distance": 14.947368421052632
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 2.3157894736842106
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed",
        "average_distance": 8.222222222222221
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 21.941176470588236
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)",
        "result": "failed: ",
        "average_distance": 1.5789473684210527
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(digit) for digit in str(N))))[2:]",
        "result": "passed",
        "average_distance": 1.631578947368421
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 1 and x % 2 == 0))",
        "result": "passed",
        "average_distance": 0.21052631578947367
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "result": "passed",
        "average_distance": 11.473684210526315
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    result = []\n    for (i, row) in enumerate(lst):\n        for (j, value) in enumerate(row[::-1]):\n            if value == x:\n                result.append((i, len(row) - 1 - j))\n    return sorted(result)",
        "result": "failed: ",
        "average_distance": 13.157894736842104
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if not array:\n        return []\n    copy = array[:]\n    if (copy[0] + copy[-1]) % 2 == 0:\n        copy.sort(reverse=True)\n    else:\n        copy.sort()\n    return copy",
        "result": "passed",
        "average_distance": 13.894736842105264
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 2 * 2) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted",
        "result": "passed",
        "average_distance": 45.21052631578947
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_elements = sorted(set(lst))\n    return unique_elements[1] if len(unique_elements) > 1 else None",
        "result": "passed",
        "average_distance": 8.736842105263158
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    sentences = S.split('.')\n    count = sum((1 for sentence in sentences if sentence.strip().startswith('I ')))\n    return count",
        "result": "passed",
        "average_distance": 13.5625
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)",
        "result": "passed",
        "average_distance": 9.157894736842104
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}\n    shifted_vowels.update({k.upper(): v.upper() for (k, v) in shifted_vowels.items()})\n    encoded_message = []\n    for char in message:\n        if char.isalpha():\n            swapped_char = char.swapcase()\n            encoded_message.append(shifted_vowels.get(swapped_char, swapped_char))\n        else:\n            encoded_message.append(char)\n    return ''.join(encoded_message)",
        "result": "passed",
        "average_distance": 55.416666666666664
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    return sum((int(digit) for digit in str(n)))\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime)",
        "result": "failed: name 'n' is not defined",
        "average_distance": 0.0
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not d:\n        return False\n    keys = list(d.keys())\n    lower_case = all((key.islower() for key in keys))\n    upper_case = all((key.isupper() for key in keys))\n    return lower_case or upper_case",
        "result": "failed: name 'd' is not defined",
        "average_distance": 12.736842105263158
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes",
        "result": "failed: name 'num' is not defined",
        "average_distance": 8.333333333333334
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    return a % 10 * (b % 10)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    vowels = 'AEIOU'\n    return sum((1 for (i, c) in enumerate(s) if i % 2 == 0 and c in vowels))",
        "result": "passed",
        "average_distance": 7.7368421052631575
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if abs(num - round(num)) == 0.5:\n        return int(num + (num > 0))\n    else:\n        return round(num)",
        "result": "failed: Test 3",
        "average_distance": 17.3125
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    for i in range(n):\n        stones.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.replace(',', ' ').split()",
        "result": "passed",
        "average_distance": 1.368421052631579
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y - 1 >= x:\n        return y - 1\n    return -1",
        "result": "passed",
        "average_distance": 12.052631578947368
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
        "result": "passed",
        "average_distance": 5.684210526315789
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted([num for num in x if all((int(digit) % 2 != 0 for digit in str(num)))])",
        "result": "passed",
        "average_distance": 3.7142857142857144
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    digit_names = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    sorted_filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_sorted_arr = sorted_filtered_arr[::-1]\n    return [digit_names[num] for num in reversed_sorted_arr]",
        "result": "passed",
        "average_distance": 16.666666666666668
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_numbers = sum(range(1, i + 1))\n            result.append(sum_numbers)\n    return result",
        "result": "passed",
        "average_distance": 15.88888888888889
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "passed",
        "average_distance": 4.571428571428571
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for num in arr if sum((int(d) for d in str(abs(num)))) > 0))",
        "result": "failed: ",
        "average_distance": 1.0
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False",
        "result": "passed",
        "average_distance": 26.0
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    odd_count = sum((1 for x in lst1 if x % 2 != 0))\n    even_count = sum((1 for x in lst2 if x % 2 == 0))\n    return 'YES' if even_count >= odd_count else 'NO'",
        "result": "passed",
        "average_distance": 1.631578947368421
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    if not test:\n        return {}\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for (letter, count) in letter_count.items() if count == max_count}",
        "result": "passed",
        "average_distance": 13.68421052631579
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "average_distance": 4.421052631578948
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return [f'the number of odd elements {sum((1 for char in s if int(char) % 2 != 0))}n the str{s.index(s) + 1}ng {s.index(s) + 1} of the {s.index(s) + 1}nput.' for s in lst]",
        "result": "failed: Test 1",
        "average_distance": 25.05263157894737
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
        "result": "passed",
        "average_distance": 10.368421052631579
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error",
        "average_distance": 4.7894736842105265
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if consonant_count == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 8.052631578947368
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''",
        "result": "passed",
        "average_distance": 6.421052631578948
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    for order in [lst, lst[::-1]]:\n        balance = 0\n        for char in ''.join(order):\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'",
        "result": "passed",
        "average_distance": 8.0
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(arr)[-k:]",
        "result": "failed: ",
        "average_distance": 2.0
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 0 and x % 2 != 0))",
        "result": "passed",
        "average_distance": 0.3157894736842105
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((x for x in arr[:k] if -99 <= x <= 99))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            collatz_sequence.append(n)\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    return sorted(set(collatz_sequence))",
        "result": "passed",
        "average_distance": 26.5
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date or len(date) != 10 or date[2] != '-' or (date[5] != '-'):\n        return False\n    (month, day, year) = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in {4, 6, 9, 11} and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12} and day > 31:\n        return False\n    return True",
        "result": "passed",
        "average_distance": 37.0
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1))",
        "result": "passed",
        "average_distance": 6.578947368421052
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if i > 1 and lst[i] == lst[i - 1] == lst[i - 2]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 40.1578947368421
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    return 'YES' if is_prime(length) else 'NO'",
        "result": "failed: name 'n' is not defined",
        "average_distance": 30.736842105263158
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum",
        "result": "passed",
        "average_distance": 5.2631578947368425
    },
    "HumanEval/129": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(1 + i / 2)\n        else:\n            next_val = result[i - 1] + result[i - 2] + result[i + 1]\n            result.append(next_val)\n    return result",
        "result": "failed: list index out of range",
        "average_distance": 10.421052631578947
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed",
        "average_distance": 7.2631578947368425
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    return nested and (not stack)",
        "result": "failed: ",
        "average_distance": 9.473684210526315
    },
    "HumanEval/133": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    return len(txt) > 0 and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')",
        "result": "failed: ",
        "average_distance": 17.555555555555557
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "passed",
        "average_distance": 4.2631578947368425
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negative_ints = [num for num in lst if num < 0]\n    positive_ints = [num for num in lst if num > 0]\n    largest_negative = max(negative_ints) if negative_ints else None\n    smallest_positive = min(positive_ints) if positive_ints else None\n    return (largest_negative, smallest_positive)",
        "result": "passed",
        "average_distance": 2.210526315789474
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    a = float(str(a).replace(',', '.'))\n    b = float(str(b).replace(',', '.'))\n    if a == b:\n        return None\n    return a if a > b else b",
        "result": "failed: ",
        "average_distance": 31.6
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0",
        "result": "passed",
        "average_distance": 0.8421052631578947
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        factor = 1\n        for j in range(1, i + 1):\n            factor *= j\n        result *= factor\n    return result",
        "result": "passed",
        "average_distance": 9.76923076923077
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            result.append(char)\n            space_count = 0\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n    return ''.join(result)",
        "result": "passed",
        "average_distance": 34.63157894736842
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    (name, extension) = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "passed",
        "average_distance": 65.0
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    return sum((x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x for (i, x) in enumerate(lst)))",
        "result": "passed",
        "average_distance": 11.105263157894736
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: name 'n' is not defined",
        "average_distance": 0.3333333333333333
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (num_x, denom_x) = map(int, x.split('/'))\n    (num_n, denom_n) = map(int, n.split('/'))\n    return num_x * num_n % (denom_x * denom_n) == 0",
        "result": "passed",
        "average_distance": 14.631578947368421
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and (str(num)[-1] in '13579'):\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 23.9375
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 0.7368421052631579
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    (index1, index2) = (planets.index(planet1), planets.index(planet2))\n    (start, end) = sorted((index1, index2))\n    return tuple(planets[start + 1:end])",
        "result": "passed",
        "average_distance": 17.789473684210527
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 4.7368421052631575
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    return x if is_prime(n) else y",
        "result": "failed: name 'num' is not defined",
        "average_distance": 3.111111111111111
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x >= 0 and (x % 2 != 0)))",
        "result": "passed",
        "average_distance": 0.3157894736842105
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(g - s) for (g, s) in zip(guess, game)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        strength = cap - sm\n        if strength > max_strength or (strength == max_strength and (not strongest_extension)):\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "average_distance": 7.368421052631579
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 17.842105263157894
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    num = abs(num)\n    even = sum((1 for digit in str(num) if int(digit) % 2 == 0))\n    odd = sum((1 for digit in str(num) if int(digit) % 2 != 0))\n    return (even, odd)",
        "result": "passed",
        "average_distance": 14.947368421052632
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral",
        "result": "passed",
        "average_distance": 18.736842105263158
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    if not words:\n        return ''\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word",
        "result": "passed",
        "average_distance": 3.3157894736842106
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed",
        "average_distance": 4.157894736842105
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f' {operator[i]} {operand[i + 1]}'\n    return eval(expression)",
        "result": "passed",
        "average_distance": 32.8421052631579
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    if any((char.isalpha() for char in s)):\n        return ''.join((char.swapcase() if char.isalpha() else char for char in s))\n    else:\n        return s[::-1]",
        "result": "passed",
        "average_distance": 7.473684210526316
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end + 1) if i % 2 == 0]",
        "result": "failed: Test 1",
        "average_distance": 3.210526315789474
    }
}