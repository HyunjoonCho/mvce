{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[1 + i]) <= threshold:\n            return True\n    return False",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    group = ''\n    balance = 0\n    for char in paren_string.strip():\n        if char == '(':\n            balance += 1\n            group += char\n        elif char == ')':\n            balance -= 1\n            group += char\n            if balance == 0:\n                groups.append(group)\n                group = ''\n    return groups",
        "result": "passed",
        "average_distance": 46.2
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number % 1",
        "result": "passed",
        "average_distance": 3.0
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)",
        "result": "passed",
        "average_distance": 7.875
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [numbers[i] if i % 2 == 0 else delimeter for i in range(len(numbers))]",
        "result": "failed: ",
        "average_distance": 13.666666666666666
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        levels.append(max_level)\n    return levels",
        "result": "passed",
        "average_distance": 30.384615384615383
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    prod = 1\n    total = 0\n    for num in numbers:\n        total += num\n        prod *= num\n    return (total, prod)",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result",
        "result": "passed",
        "average_distance": 9.454545454545455
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if string[:1 + i] == string[i::-1]:\n            return string + string[i::-1]",
        "result": "failed: ",
        "average_distance": 22.4
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for (x, y) in zip(a, b)))",
        "result": "passed",
        "average_distance": 13.5
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, 1 + len(string))]",
        "result": "passed",
        "average_distance": 3.375
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(1 + n)))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "result": "passed",
        "average_distance": 3.0
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]",
        "result": "passed",
        "average_distance": 10.142857142857142
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    return sum((1 for i in range(len(string)) if string.startswith(substring, i)))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted(numbers.split(), key=ord))",
        "result": "failed: ord() expected a character, but string of length 5 found",
        "average_distance": 17.333333333333332
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[1 + i] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[1 + i])\n    return pair",
        "result": "failed: ",
        "average_distance": 25.53846153846154
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]",
        "result": "passed",
        "average_distance": 7.0
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "average_distance": 3.5384615384615383
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "result": "failed: ",
        "average_distance": 17.083333333333332
    },
    "HumanEval/27": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 1.2
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [i for i in l if i > 0]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 11.333333333333334
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return -xs[-2] / xs[-1]",
        "result": "failed: ",
        "average_distance": 16.941176470588236
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    third_indices = sorted([l[i] for i in range(0, len(l)) if i % 3 == 0])\n    l[::3] = third_indices\n    return l",
        "result": "passed",
        "average_distance": 32.55555555555556
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = sum((str(i).count('7') for i in range(11 if n < 11 else 1 + n // 11) if i % 11 == 0 or i % 13 == 0))\n    return count",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    even_values = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]",
        "result": "passed",
        "average_distance": 35.4
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 + 3 * i, len(s))] for i in range((2 + len(s)) // 3)]\n    groups = [group[0] + group[1:] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 + 3 * i, len(s))] for i in range((2 + len(s)) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)",
        "result": "passed",
        "average_distance": 22.0
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True\n    (a, b) = (0, 1)\n    count = 0\n    while count < n:\n        (a, b) = (b, a + b)\n        if is_prime(a):\n            count += 1\n    return a",
        "result": "failed: ",
        "average_distance": 29.09090909090909
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "failed: ",
        "average_distance": 43.2
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    return n * n // 2",
        "result": "failed: ",
        "average_distance": 11.857142857142858
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [1 + i for i in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 8.411764705882353
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if x < base:\n        return chars[x]\n    else:\n        return change_base(x // base, base) + chars[x % base]",
        "result": "passed",
        "average_distance": 22.153846153846153
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 0.7142857142857143
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(4, 1 + n):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return d",
        "result": "passed",
        "average_distance": 19.88888888888889
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]",
        "result": "passed",
        "average_distance": 16.466666666666665
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text == text[::-1]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((5 + ord(ch) - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 1.6666666666666667
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))",
        "result": "passed",
        "average_distance": 2.8
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    return all((x < t for x in l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    (a, b) = (0, 1)\n    for _ in range(n):\n        (a, b) = (b, a + b)\n    return a",
        "result": "passed",
        "average_distance": 4.529411764705882
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 17.352941176470587
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    return all((x < y for (x, y) in zip(l, l[1:]))) or all((x > y for (x, y) in zip(l, l[1:])))",
        "result": "failed: ",
        "average_distance": 36.857142857142854
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = n\n    while i % 2 == 0:\n        i //= 2\n    for num in range(3, 1 + int(i ** 0.5), 2):\n        while i % num == 0:\n            i //= num\n    return i",
        "result": "failed: ",
        "average_distance": 18.733333333333334
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    return (1 + n) * n // 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0",
        "result": "passed",
        "average_distance": 13.5625
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [(1 + i) * x for (i, x) in enumerate(xs)]",
        "result": "failed: ",
        "average_distance": 6.166666666666667
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n < 3:\n        return n - 1\n    (a, b, c) = (0, 0, 1)\n    for _ in range(2, 1 + n):\n        (a, b, c) = (b, c, a + b + c)\n    return c",
        "result": "failed: ",
        "average_distance": 6.2
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    return sum((1 for c in s.lower() if c in 'aeiou' or (c == 'y' and s[-1] == 'Y')))",
        "result": "failed: Test 3",
        "average_distance": 20.923076923076923
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]",
        "result": "failed: ",
        "average_distance": 17.0625
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    fruits = s.split(' and ')\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n    return n - apples - oranges",
        "result": "passed",
        "average_distance": 20.842105263157894
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    even_nodes = [(val, idx) for (idx, val) in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[0], x[1])) if even_nodes else []",
        "result": "failed: Error",
        "average_distance": 6.947368421052632
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    for (num, count) in freq.items():\n        if num >= count and count > 0:\n            return num\n    return -1",
        "result": "failed: ",
        "average_distance": 23.666666666666668
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
        "result": "passed",
        "average_distance": 26.833333333333332
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        return round(a * b * c / 4, 2)\n    else:\n        return -1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 26.0
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    (left, right) = (0, len(arr) - 1)\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes // 2",
        "result": "failed: ",
        "average_distance": 22.0
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    return lst1 if sum((len(s) for s in lst1)) < sum((len(s) for s in lst2)) else lst2",
        "result": "failed: ",
        "average_distance": 0.5714285714285714
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7]\n    factors = []\n    for p in primes:\n        while a % p == 0 and a >= p:\n            factors.append(p)\n            a //= p\n    return len(factors) == 3",
        "result": "failed: ",
        "average_distance": 33.5
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return x == n ** int(math.log(x, n))",
        "result": "failed: name 'math' is not defined",
        "average_distance": 2.4545454545454546
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    return round(a ** (1.0 / 3)) ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "average_distance": 2.0
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for c in num if c in primes))",
        "result": "passed",
        "average_distance": 2.473684210526316
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    return 'db' + ('db' + bin(decimal)[2:])",
        "result": "passed",
        "average_distance": 6.714285714285714
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set((s[i:3 + i] for i in range(len(s) - 2)))) == len(s) - 2",
        "result": "failed: aabb",
        "average_distance": 0.0
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [grade_map[g] for g in grades]",
        "result": "failed: 3.5",
        "average_distance": 48.23076923076923
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, 1 + int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 6.8
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return 10 ** (n - 2) * 9 + 2",
        "result": "failed: ",
        "average_distance": 7.0
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(digit) for digit in str(N))))[2:]",
        "result": "passed",
        "average_distance": 5.4375
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))",
        "result": "passed",
        "average_distance": 2.625
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    return ' '.join((''.join(sorted(w)) for w in s.split()))",
        "result": "passed",
        "average_distance": 0.5
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    return sorted(((i, j) for (i, row) in enumerate(lst) for (j, num) in enumerate(row) if num == x), key=lambda p: (p[0], -p[1]))",
        "result": "passed",
        "average_distance": 11.363636363636363
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[-1] + array[0]) % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array",
        "result": "failed: list index out of range",
        "average_distance": 18.733333333333334
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            result += chr((4 + (ord(char) - ascii_offset)) % 26 + ascii_offset)\n        else:\n            result += char\n    return result",
        "result": "passed",
        "average_distance": 23.76923076923077
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]",
        "result": "passed",
        "average_distance": 16.5
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    return sum((s.startswith('I ') for s in S.split('!') + (S.split('.') + S.split('?'))))",
        "result": "failed: Test 3",
        "average_distance": 13.941176470588236
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return isinstance(x, int) and (x == y + z or x == y + z or y == x + z)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 23.0
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_msg = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((2 + (ord(char) - ord('a'))) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            encoded_msg += new_char\n        else:\n            encoded_msg += char\n    return encoded_msg",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 29.066666666666666
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    if n < 2:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes) if primes else None\n    return sum((int(digit) for digit in str(largest_prime))) if largest_prime is not None else 0",
        "result": "failed: name 'n' is not defined",
        "average_distance": 11.666666666666666
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not d:\n        return False\n    case = next((k for k in d if k.islower() or k.isupper()), None)\n    return all((k == case for k in d))",
        "result": "failed: name 'd' is not defined",
        "average_distance": 39.0
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if n < 2:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "result": "failed: ",
        "average_distance": 21.1
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)",
        "result": "passed",
        "average_distance": 4.888888888888889
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    return sum((1 for (i, c) in enumerate(s) if c.isupper() and 'AEIOU'.count(c) > 0 and (i % 2 == 0)))",
        "result": "passed",
        "average_distance": 5.75
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(0.5 + num)\n    else:\n        return int(num - 0.5)",
        "result": "passed",
        "average_distance": 14.285714285714286
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    pile = []\n    i = n\n    while i > 0:\n        pile.append(i)\n        i -= 2 if n % 2 == 1 else 1\n    return pile",
        "result": "failed: Test 3",
        "average_distance": 18.944444444444443
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.split(' ') + s.split(',')",
        "result": "failed: ",
        "average_distance": 2.5
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    return next((i for i in range(max(x, y), 1 + min(x, y)) if i % 2 == 0), -1)",
        "result": "failed: ",
        "average_distance": 23.5
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((m + n) / 2)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted(set((n for n in x if not any((d % 2 == 0 for d in str(n))))))",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 7.777777777777778
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    return [names[x - 1] for x in reversed(arr)]",
        "result": "passed",
        "average_distance": 11.909090909090908
    },
    "HumanEval/106": {
        "code": "def f(n):\n    return [i if i % 2 == 0 else sum(range(1, 1 + i)) for i in range(1, 1 + n)]",
        "result": "failed: ",
        "average_distance": 9.615384615384615
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    evens = odds = 0\n    for i in range(1, 1 + n):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)",
        "result": "passed",
        "average_distance": 27.916666666666668
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for x in arr if any((int(digit) != 0 for digit in str(abs(x))))))",
        "result": "failed: ",
        "average_distance": 11.421052631578947
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    return arr == [sorted_arr[0]] + sorted_arr[1:]",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 23.166666666666668
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    even_count = sum((1 for num in lst1 if num % 2 == 0))\n    odd_count = len(lst1) - even_count\n    return 'YES' if odd_count <= len(lst2) else 'NO'",
        "result": "failed: ",
        "average_distance": 52.6
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values()) if counts else 0\n    return {k: v for (k, v) in counts.items() if v == max_count}",
        "result": "passed",
        "average_distance": 11.785714285714286
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])",
        "result": "passed",
        "average_distance": 6.5
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum((1 for n in s if int(n) % 2)), 1 + i, 1 + i, 1 + i) for (i, s) in enumerate(lst)]",
        "result": "failed: Test 1",
        "average_distance": 15.76923076923077
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    curr_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum",
        "result": "passed",
        "average_distance": 23.53846153846154
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    return sum((sum(row) for row in grid)) // capacity",
        "result": "failed: Error",
        "average_distance": 8.526315789473685
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 4.277777777777778
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = [word for word in words if sum((1 for c in word if c in consonants)) == n]\n    return result",
        "result": "passed",
        "average_distance": 6.894736842105263
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[1 + i] not in vowels):\n            return word[i]\n    return ''",
        "result": "passed",
        "average_distance": 3.1666666666666665
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    open_count = 0\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n            if open_count < 0:\n                return 'No'\n    return 'Yes' if open_count == 0 else 'No'",
        "result": "failed: ",
        "average_distance": 43.45454545454545
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]",
        "result": "failed: ",
        "average_distance": 1.1428571428571428
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 0 and x % 2 != 0))",
        "result": "passed",
        "average_distance": 5.25
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((i for i in arr[:k] if abs(i) < 100))",
        "result": "passed",
        "average_distance": 11.0
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    seq = []\n    while n != 1:\n        if n % 2 == 1:\n            seq.append(n)\n        n = n // 2 if n % 2 == 0 else 1 + 3 * n\n    return sorted(seq)",
        "result": "failed: ",
        "average_distance": 13.842105263157896
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    try:\n        (day, month, year) = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in (4, 6, 9, 11) and (not 1 <= day <= 30):\n            return False\n        if month == 2 and (not 1 <= day <= 29):\n            return False\n        if month in (1, 3, 5, 7, 8, 10, 12) and (not 1 <= day <= 31):\n            return False\n    except ValueError:\n        return False\n    return True",
        "result": "failed: ",
        "average_distance": 66.66666666666667
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for c in txt if ord(c) % 2 == 1))",
        "result": "failed: ",
        "average_distance": 1.3333333333333333
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    return lst == sorted(set(lst))",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 7.5
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if n < 2:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = 1 + (end - start)\n        return 'YES' if is_prime(length) else 'NO'\n    else:\n        return 'NO'",
        "result": "failed: name 'n' is not defined",
        "average_distance": 40.05555555555556
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num != 0:\n            sign_product *= 1 if num > 0 else -1\n            sum_magnitudes += abs(num)\n    return sign_product * sum_magnitudes",
        "result": "failed: ",
        "average_distance": 8.5
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = [(grid[0][0], [grid[0][0]])]\n    visited = {(grid[0][0],): True}\n    while queue:\n        if len(queue[0][1]) == k:\n            break\n        for (dx, dy) in directions:\n            (x, y) = (dx + queue[0][0], dy + queue[0][1])\n            if 0 <= x < N and 0 <= y < N and (grid[x][y] not in queue[0][1]):\n                new_path = tuple(sorted((grid[x][y],) + queue[0][1]))\n                if new_path not in visited:\n                    visited[new_path] = True\n                    queue.append((grid[x][y], new_path))\n        queue.pop(0)\n    return sorted(queue[0][1])",
        "result": "failed: can only concatenate list (not \"int\") to list",
        "average_distance": 136.0
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        seq = [3, 1]\n        for i in range(3, 1 + n):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i])\n        return seq",
        "result": "failed: list index out of range",
        "average_distance": 47.64705882352941
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product",
        "result": "failed: ",
        "average_distance": 8.866666666666667
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 6.833333333333333
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((int(x) ** 2 for x in lst))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 0.875
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (not txt[:-1].endswith(' ')):\n        return True\n    else:\n        return False",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/135": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)",
        "result": "passed",
        "average_distance": 3.7142857142857144
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    return None if a == b else max(a, b)",
        "result": "failed: ",
        "average_distance": 27.285714285714285
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    return any((i + j + k + l == n for i in range(2, 10) for j in range(2, 10) for k in range(2, 10) for l in range(2, 10)))",
        "result": "failed: ",
        "average_distance": 48.0
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    import math\n    fact = 1\n    for i in range(1, 1 + n):\n        fact *= math.factorial(i)\n    return fact",
        "result": "passed",
        "average_distance": 11.76923076923077
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    return text.replace(' ', '_').replace('  ', '-')",
        "result": "failed: This prints if this assert fails 4 (good for debugging!)",
        "average_distance": 9.4
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3 or file_name.count('.') != 1 or (not file_name[0].isalpha()) or (file_name.split('.')[1] not in ['txt', 'exe', 'dll']):\n        return 'No'\n    return 'Yes'",
        "result": "passed",
        "average_distance": 41.84615384615385
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    return sum((x ** 3 if i % 4 == 0 and i % 3 != 0 else x ** 2 if i % 3 == 0 else x for (i, x) in enumerate(lst)))",
        "result": "passed",
        "average_distance": 4.357142857142857
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7]\n    return ' '.join((word for word in sentence.split() if len(word) in primes))",
        "result": "passed",
        "average_distance": 7.666666666666667
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (num_x, den_x) = map(int, x.split('/'))\n    (num_n, den_n) = map(int, n.split('/'))\n    return den_n * num_x % den_x == 0",
        "result": "failed: test1",
        "average_distance": 12.88888888888889
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 1.4705882352941178
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = sum((1 for num in nums if num > 10 and str(num)[0] % 2 == 1 and (str(num)[-1] % 2 == 1)))\n    return count",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 11.272727272727273
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [1 + (i * i - i) for i in range(1, 1 + n)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(1 + i, n - 1):\n            for k in range(1 + j, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 10.066666666666666
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    i = planets.index(planet1)\n    j = planets.index(planet2)\n    if i < 0 or j < 0:\n        return ()\n    elif i < j:\n        return tuple(planets[1 + i:j])\n    else:\n        return tuple()",
        "result": "failed: Second test error: ()",
        "average_distance": 32.0
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 3.2941176470588234
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n < 2:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True\n    return x if is_prime(n) else y",
        "result": "failed: ",
        "average_distance": 6.75
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))",
        "result": "passed",
        "average_distance": 2.75
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(x - y) for (x, y) in zip(game, guess)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: sum((1 for c in x if c.isupper())) - sum((1 for c in x if c.islower())))\n    return f'{class_name}.{strongest}'",
        "result": "passed",
        "average_distance": 38.94444444444444
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    rotations = [b[:i] + b[i:] for i in range(len(b))]\n    return any((rotation in a for rotation in rotations))",
        "result": "passed",
        "average_distance": 12.416666666666666
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = sum((1 for digit in str(abs(num)) if int(digit) % 2 == 0))\n    count_odd = len(str(abs(num))) - count_even\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 17.142857142857142
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    roman = ''\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman += syb[i]\n            number -= val[i]\n        i += 1\n    return roman.lower()",
        "result": "passed",
        "average_distance": 34.5
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or a ** 2 + c ** 2 == b ** 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_len = 0\n    max_word = None\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len or (unique_chars == max_len and word < max_word):\n            max_len = unique_chars\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 13.666666666666666
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    eaten = min(need, remaining) + number\n    left = max(remaining - need, 0)\n    return [eaten, left]",
        "result": "passed",
        "average_distance": 10.0
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for (op, num) in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result",
        "result": "failed: ",
        "average_distance": 44.72222222222222
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    return ''.join((c.swapcase() if c.isalpha() else c for c in s))",
        "result": "passed",
        "average_distance": 26.4375
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    return [i for i in range(max(a, b), min(a, b) - 1, -2) if i % 2 == 0]",
        "result": "failed: Test 1",
        "average_distance": 18.333333333333332
    }
}