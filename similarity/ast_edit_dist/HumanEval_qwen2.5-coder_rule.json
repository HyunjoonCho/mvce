{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 5.125
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n    return result",
        "result": "passed",
        "average_distance": 23.105263157894736
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "result": "passed",
        "average_distance": 8.470588235294118
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad",
        "result": "passed",
        "average_distance": 15.4375
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for (i, num) in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result",
        "result": "failed: name 'delimiter' is not defined",
        "average_distance": 4.352941176470588
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths",
        "result": "passed",
        "average_distance": 3.6315789473684212
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list",
        "result": "passed",
        "average_distance": 6.842105263157895
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i - 1::-1]",
        "result": "failed: ",
        "average_distance": 27.263157894736842
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = []\n    for (char_a, char_b) in zip(a, b):\n        if char_a == char_b:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)",
        "result": "passed",
        "average_distance": 14.692307692307692
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "result": "passed",
        "average_distance": 10.555555555555555
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a",
        "result": "passed",
        "average_distance": 9.125
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "result": "passed",
        "average_distance": 1.8666666666666667
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))",
        "result": "passed",
        "average_distance": 18.88235294117647
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "result": "passed",
        "average_distance": 4.555555555555555
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        if note in note_map:\n            result.append(note_map[note])\n    return result",
        "result": "passed",
        "average_distance": 21.352941176470587
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count",
        "result": "passed",
        "average_distance": 14.526315789473685
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_nums = sorted(words, key=lambda word: num_map[word])\n    return ' '.join(sorted_nums)",
        "result": "passed",
        "average_distance": 32.84615384615385
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(numbers[1] - numbers[0])\n    for i in range(2, len(numbers)):\n        current_diff = abs(numbers[i] - numbers[i - 1])\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair",
        "result": "passed",
        "average_distance": 23.764705882352942
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]",
        "result": "passed",
        "average_distance": 3.111111111111111
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor ** 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors",
        "result": "passed",
        "average_distance": 12.615384615384615
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: ",
        "average_distance": 0.9285714285714286
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "result": "passed",
        "average_distance": 8.588235294117647
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for string in strings:\n        result += string\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    result = []\n    for item in l:\n        if item > 0:\n            result.append(item)\n    return result",
        "result": "passed",
        "average_distance": 5.277777777777778
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 1.1764705882352942
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    a = xs[0]\n    b = sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs[1:])])\n    return -b / (2 * a)",
        "result": "failed: name 'x' is not defined",
        "average_distance": 60.69230769230769
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_divisible_indices = sorted([l[i] for i in indices_divisible_by_three])\n    result = l[:]\n    for (original_index, value) in zip(indices_divisible_by_three, values_at_divisible_indices):\n        result[original_index] = value\n    return result",
        "result": "passed",
        "average_distance": 29.210526315789473
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    l = sorted(set(l))\n    return l",
        "result": "passed",
        "average_distance": 19.789473684210527
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val",
        "result": "passed",
        "average_distance": 4.25
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed",
        "average_distance": 1.3333333333333333
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = []\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result",
        "result": "passed",
        "average_distance": 29.0
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    (fib_a, fib_b) = (0, 1)\n    prime_count = 0\n    while True:\n        fib_next = fib_a + fib_b\n        (fib_a, fib_b) = (fib_b, fib_next)\n        if is_prime(fib_next):\n            prime_count += 1\n            if prime_count == n:\n                return fib_next",
        "result": "failed: name 'num' is not defined",
        "average_distance": 19.142857142857142
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 22.526315789473685
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    return n * n",
        "result": "passed",
        "average_distance": 0.47368421052631576
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    for i in range(len(l)):\n        l[i] += 1\n    return l",
        "result": "passed",
        "average_distance": 6.6
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 8.68421052631579
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 13.894736842105264
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 0.5882352941176471
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(3, n + 1):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return d",
        "result": "failed: ",
        "average_distance": 16.736842105263158
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]",
        "result": "passed",
        "average_distance": 6.388888888888889
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True",
        "result": "passed",
        "average_distance": 19.263157894736842
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    for _ in range(n):\n        result = result * base % p\n    return result",
        "result": "passed",
        "average_distance": 10.68421052631579
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "average_distance": 6.466666666666667
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)",
        "result": "passed",
        "average_distance": 8.947368421052632
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    (a, b) = (0, 1)\n    for _ in range(n):\n        (a, b) = (b, a + b)\n    return a",
        "result": "passed",
        "average_distance": 5.888888888888889
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "average_distance": 8.0
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing",
        "result": "passed",
        "average_distance": 11.736842105263158
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    result = sorted(set1.intersection(set2))\n    return result",
        "result": "passed",
        "average_distance": 14.526315789473685
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    factor = 2\n    while n > factor ** 2:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n",
        "result": "failed: ",
        "average_distance": 19.88235294117647
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed",
        "average_distance": 12.631578947368421
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * x for (i, x) in enumerate(xs)][1:]",
        "result": "passed",
        "average_distance": 5.842105263157895
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    (a, b, c) = (0, 0, 1)\n    for i in range(4, n + 1):\n        (a, b, c) = (b, c, a + b + c)\n    return c",
        "result": "failed: ",
        "average_distance": 9.578947368421053
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum((1 for char in s if char in vowels))\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed",
        "average_distance": 17.263157894736842
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    if shift > length:\n        return num_str[::-1]\n    shift %= length\n    return num_str[-shift:] + num_str[:-shift]",
        "result": "passed",
        "average_distance": 7.842105263157895
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
        "result": "passed",
        "average_distance": 6.315789473684211
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = int(words[0])\n    oranges = int(words[3])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed",
        "average_distance": 7.7894736842105265
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    min_val = float('inf')\n    min_idx = -1\n    for (idx, val) in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = idx\n    return [min_val, min_idx] if min_idx != -1 else []",
        "result": "passed",
        "average_distance": 15.842105263157896
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "result": "passed",
        "average_distance": 13.117647058823529
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
        "result": "passed",
        "average_distance": 29.94736842105263
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)",
        "result": "passed",
        "average_distance": 5.090909090909091
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
        "result": "passed",
        "average_distance": 8.0
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes",
        "result": "passed",
        "average_distance": 2.9473684210526314
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    len_lst1 = sum((len(s) for s in lst1))\n    len_lst2 = sum((len(s) for s in lst2))\n    if len_lst1 < len_lst2:\n        return lst1\n    elif len_lst1 > len_lst2:\n        return lst2\n    else:\n        return lst1",
        "result": "passed",
        "average_distance": 5.526315789473684
    },
    "HumanEval/75": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    for i in range(x + 1):\n        if n ** i == x:\n            return True\n    return False",
        "result": "timed out",
        "average_distance": 21.933333333333334
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    for i in range(1, int(abs_a ** (1 / 3)) + 2):\n        if i ** 3 == abs_a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 10.333333333333334
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 3.526315789473684
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal //= 2\n    return f'db{binary}db'",
        "result": "failed: ",
        "average_distance": 15.473684210526315
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed",
        "average_distance": 19.105263157894736
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    return is_prime(len(s))",
        "result": "failed: name 'n' is not defined",
        "average_distance": 1.7058823529411764
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    count = 2 * 10 ** (n - 1) - 10 ** (n - 2)\n    return count",
        "result": "failed: ",
        "average_distance": 12.947368421052632
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    sum_of_digits = sum((int(digit) for digit in str(N)))\n    return bin(sum_of_digits)[2:]",
        "result": "passed",
        "average_distance": 0.3157894736842105
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result",
        "result": "passed",
        "average_distance": 7.947368421052632
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "result": "passed",
        "average_distance": 0.15789473684210525
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    result = []\n    for (row_idx, row) in enumerate(lst):\n        for (col_idx, value) in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda item: (item[0], -item[1]))\n    return result",
        "result": "passed",
        "average_distance": 9.894736842105264
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array[:]\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array",
        "result": "passed",
        "average_distance": 14.894736842105264
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2 % 26\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string",
        "result": "passed",
        "average_distance": 42.714285714285715
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num <= smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None",
        "result": "failed: ",
        "average_distance": 20.263157894736842
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count",
        "result": "passed",
        "average_distance": 10.526315789473685
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    if all((isinstance(i, int) for i in [x, y, z])):\n        return x + y == z or x + z == y or y + z == x\n    return False",
        "result": "passed",
        "average_distance": 9.105263157894736
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            new_char = char.swapcase()\n            if new_char in vowels:\n                index = (vowels.index(new_char) + 2) % len(vowels)\n                new_char = vowels[index]\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 52.8421052631579
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum((int(digit) for digit in str(largest_prime)))",
        "result": "failed: local variable 'num' referenced before assignment",
        "average_distance": 40.5
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not dictionary:\n        return False\n    all_lower = all((key.islower() for key in dictionary))\n    all_upper = all((key.isupper() for key in dictionary))\n    return all_lower or all_upper",
        "result": "failed: name 'dictionary' is not defined",
        "average_distance": 35.0
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    return primes",
        "result": "failed: name 'num' is not defined",
        "average_distance": 2.823529411764706
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b",
        "result": "passed",
        "average_distance": 4.2631578947368425
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 0.6111111111111112
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed",
        "average_distance": 19.25
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for level in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 1\n        else:\n            current_stones += 2\n    return pile",
        "result": "failed: Test 4",
        "average_distance": 3.473684210526316
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.replace(',', ' ').split()",
        "result": "passed",
        "average_distance": 8.466666666666667
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "result": "passed",
        "average_distance": 0.7857142857142857
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
        "result": "passed",
        "average_distance": 3.6
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    odd_digit_numbers = []\n    for number in x:\n        if all((int(digit) % 2 != 0 for digit in str(number))):\n            odd_digit_numbers.append(number)\n    return sorted(odd_digit_numbers)",
        "result": "passed",
        "average_distance": 22.25
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    num_names = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    sorted_nums = [num for num in arr if 1 <= num <= 9]\n    reversed_nums = sorted_nums[::-1]\n    result = [num_names[num] for num in reversed_nums]\n    return result",
        "result": "failed: Error",
        "average_distance": 16.0
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_nums = sum(range(1, i + 1))\n            result.append(sum_nums)\n    return result",
        "result": "passed",
        "average_distance": 24.8
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "failed: local variable 'num' referenced before assignment",
        "average_distance": 13.533333333333333
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum((int(digit) for digit in str(abs(num)))) > 0:\n            count += 1\n    return count",
        "result": "failed: ",
        "average_distance": 8.222222222222221
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if all((arr[j] <= arr[(j + 1) % n] for j in range(n))):\n            return True\n        arr.insert(0, arr.pop())\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 23.473684210526315
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    odd_count = sum((1 for x in lst1 if x % 2 != 0))\n    even_count_in_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    return 'YES' if even_count_in_lst2 >= odd_count else 'NO'",
        "result": "passed",
        "average_distance": 5.526315789473684
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    if not test:\n        return {}\n    letter_counts = {}\n    max_count = 0\n    for letter in test.split():\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n        max_count = max(max_count, letter_counts[letter])\n    result = {letter: count for (letter, count) in letter_counts.items() if count == max_count}\n    return result",
        "result": "passed",
        "average_distance": 24.4375
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    filtered_chars = [char for char in s if char not in c]\n    result_string = ''.join(filtered_chars)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)",
        "result": "passed",
        "average_distance": 13.235294117647058
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        num_odds = sum((1 for c in s if int(c) % 2 != 0))\n        result.append(f'the number of odd elements {num_odds}n the str{num_odds}ng {num_odds} of the {num_odds}nput.')\n    return result",
        "result": "passed",
        "average_distance": 4.894736842105263
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum",
        "result": "passed",
        "average_distance": 11.578947368421053
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error",
        "average_distance": 0.15789473684210525
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 6.222222222222222
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if consonant_count == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 11.058823529411764
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    closest_vowel = ''\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            closest_vowel = word[i]\n            break\n    return closest_vowel",
        "result": "passed",
        "average_distance": 8.647058823529411
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    for order in [lst, lst[::-1]]:\n        balance = 0\n        for char in order[0] + order[1]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'",
        "result": "passed",
        "average_distance": 10.176470588235293
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]",
        "result": "failed: ",
        "average_distance": 1.4210526315789473
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    sum_odd = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_odd += lst[i]\n    return sum_odd",
        "result": "passed",
        "average_distance": 8.789473684210526
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((x for x in arr[:k] if -99 <= x <= 99))",
        "result": "passed",
        "average_distance": 17.57894736842105
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            collatz_sequence.append(n)\n            n = 3 * n + 1\n    collatz_sequence.extend([1])\n    odd_numbers = sorted(set(collatz_sequence))\n    return odd_numbers",
        "result": "passed",
        "average_distance": 19.105263157894736
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    (month, day, year) = map(int, parts)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month == 2 and day > 29:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif day > 31:\n        return False\n    return True",
        "result": "passed",
        "average_distance": 41.294117647058826
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1))",
        "result": "passed",
        "average_distance": 7.368421052631579
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 5 (good for debugging!)",
        "average_distance": 30.68421052631579
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    return 'YES' if is_prime(length) else 'NO'",
        "result": "failed: name 'n' is not defined",
        "average_distance": 4.277777777777778
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    return product_of_signs * sum_of_magnitudes",
        "result": "passed",
        "average_distance": 8.411764705882353
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    paths = [[(i, j)] for i in range(n) for j in range(n)]\n    for _ in range(k - 1):\n        new_paths = []\n        for path in paths:\n            (x, y) = path[-1]\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n:\n                    new_path = path + [(nx, ny)]\n                    new_paths.append(new_path)\n        paths = new_paths\n    min_path = min(paths, key=lambda p: [grid[x][y] for (x, y) in p])\n    return [grid[x][y] for (x, y) in min_path]",
        "result": "timed out",
        "average_distance": 0.0
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i / 2)\n        else:\n            next_val = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]\n            tribonacci.append(next_val)\n    return tribonacci",
        "result": "failed: list index out of range",
        "average_distance": 27.842105263157894
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed",
        "average_distance": 5.526315789473684
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    has_nested = False\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                has_nested = True\n    return has_nested and (not stack)",
        "result": "failed: name 's' is not defined",
        "average_distance": 8.052631578947368
    },
    "HumanEval/133": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False",
        "result": "passed",
        "average_distance": 20.125
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: ",
        "average_distance": 4.2105263157894735
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n    return (a, b)",
        "result": "passed",
        "average_distance": 18.526315789473685
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    a_str = str(a).replace(',', '.')\n    b_str = str(b).replace(',', '.')\n    a_float = float(a_str)\n    b_float = float(b_str)\n    if a_float < b_float:\n        return b\n    elif a_float > b_float:\n        return a\n    else:\n        return None",
        "result": "passed",
        "average_distance": 30.25
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    for i in range(2, n // 2 + 1, 2):\n        for j in range(i, n // 2 + 1, 2):\n            for k in range(j, n // 2 + 1, 2):\n                l = n - (i + j + k)\n                if l >= k and l % 2 == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 23.473684210526315
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result",
        "result": "passed",
        "average_distance": 2.5
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.extend(['_'] * consecutive_spaces)\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.extend(['_'] * consecutive_spaces)\n    return ''.join(result)",
        "result": "passed",
        "average_distance": 5.526315789473684
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    allowed_extensions = ['txt', 'exe', 'dll']\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n    (name, extension) = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    digit_count = sum((c.isdigit() for c in name))\n    if digit_count > 3:\n        return 'No'\n    if extension not in allowed_extensions:\n        return 'No'\n    return 'Yes'",
        "result": "passed",
        "average_distance": 27.36842105263158
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    total_sum = 0\n    for (i, num) in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n    return total_sum",
        "result": "failed: ",
        "average_distance": 9.263157894736842
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: name 'n' is not defined",
        "average_distance": 3.6
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (x_num, x_den) = map(int, x.split('/'))\n    (n_num, n_den) = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0",
        "result": "passed",
        "average_distance": 19.88888888888889
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 9.777777777777779
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count",
        "result": "passed",
        "average_distance": 27.61111111111111
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = min(planets.index(planet1), planets.index(planet2))\n    end_index = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start_index + 1:end_index])",
        "result": "passed",
        "average_distance": 22.941176470588236
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_length_words, key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 0.9473684210526315
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    return x if is_prime(n) else y",
        "result": "failed: name 'num' is not defined",
        "average_distance": 2.2666666666666666
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and (num % 2 != 0):\n            result += num ** 2\n    return result",
        "result": "passed",
        "average_distance": 0.05263157894736842
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "result": "passed",
        "average_distance": 18.0
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap_count = sum((1 for char in extension if char.isupper()))\n        sm_count = sum((1 for char in extension if char.islower()))\n        strength = cap_count - sm_count\n        if strength > max_strength or (strength == max_strength and (not strongest_extension)):\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "average_distance": 8.222222222222221
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 6.894736842105263
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 13.736842105263158
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    roman_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = ''\n    for (value, numeral) in roman_map:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result",
        "result": "passed",
        "average_distance": 14.0
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2",
        "result": "passed",
        "average_distance": 1.4736842105263157
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word",
        "result": "passed",
        "average_distance": 4.0
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed",
        "average_distance": 2.263157894736842
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "average_distance": 34.588235294117645
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    has_letters = False\n    result = []\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(result) if has_letters else s[::-1]",
        "result": "passed",
        "average_distance": 29.57894736842105
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "result": "failed: Test 1",
        "average_distance": 13.31578947368421
    }
}