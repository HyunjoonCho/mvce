{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 3.4444444444444446
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    balance = 0\n    for c in paren_string.replace(' ', ''):\n        if c == '(':\n            balance += 1\n            group += c\n        elif c == ')':\n            balance -= 1\n            group += c\n            if balance == 0:\n                result.append(group)\n                group = ''\n    return result",
        "result": "passed",
        "average_distance": 24.533333333333335
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 1.8666666666666667
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(num - mean) for num in numbers)) / len(numbers)",
        "result": "passed",
        "average_distance": 7.764705882352941
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for (i, num) in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result",
        "result": "passed",
        "average_distance": 14.25
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "result": "passed",
        "average_distance": 21.41176470588235
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    result_sum = 0\n    result_product = 1\n    for num in numbers:\n        result_sum += num\n        result_product *= num\n    return (result_sum, result_product)",
        "result": "passed",
        "average_distance": 10.277777777777779
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for n in numbers:\n        if n >= max_so_far:\n            max_so_far = n\n        result.append(max_so_far)\n    return result",
        "result": "passed",
        "average_distance": 13.631578947368421
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string or is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            return string + prefix[::-1]",
        "result": "failed: ",
        "average_distance": 44.10526315789474
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for (x, y) in zip(a, b)))",
        "result": "passed",
        "average_distance": 26.8
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
        "result": "passed",
        "average_distance": 18.22222222222222
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)",
        "result": "passed",
        "average_distance": 0.631578947368421
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for length in range(1, len(string) + 1):\n        prefixes.append(string[:length])\n    return sorted(prefixes)",
        "result": "passed",
        "average_distance": 13.68421052631579
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))",
        "result": "passed",
        "average_distance": 2.5
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.casefold()))",
        "result": "passed",
        "average_distance": 2.526315789473684
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]",
        "result": "passed",
        "average_distance": 35.77777777777778
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    return sum((1 for i in range(len(string)) if string[i:i + len(substring)] == substring))",
        "result": "passed",
        "average_distance": 24.42105263157895
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    choices = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: choices[x]))",
        "result": "passed",
        "average_distance": 28.61111111111111
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair",
        "result": "passed",
        "average_distance": 19.823529411764707
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(n - min_num) / (max_num - min_num) for n in numbers]",
        "result": "passed",
        "average_distance": 11.071428571428571
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None",
        "result": "passed",
        "average_distance": 1.0526315789473684
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    return factors",
        "result": "passed",
        "average_distance": 16.333333333333332
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "result": "failed: ",
        "average_distance": 6.777777777777778
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    return ''.join((c.swapcase() for c in string))",
        "result": "passed",
        "average_distance": 4.315789473684211
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 0.42857142857142855
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [i for i in l if i > 0]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 0.5
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        raise ValueError('Input must be a list with an even number of coefficients and largest non-zero coefficient')\n    x = -xs[1] / xs[0]\n    return x",
        "result": "failed: ",
        "average_distance": 39.61538461538461
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([y for (i, y) in enumerate(l) if i % 3 == 0])[k] for (k, x) in enumerate(l)]",
        "result": "failed: name 'i' is not defined",
        "average_distance": 17.473684210526315
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')\n    return count",
        "result": "passed",
        "average_distance": 19.27777777777778
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    return l[1::2] + sorted(l[::2])",
        "result": "failed: ",
        "average_distance": 33.875
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    return ''.join([group[0] + group[1:] if len(group) == 3 else group for group in groups])",
        "result": "failed: ",
        "average_distance": 14.105263157894736
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    (a, b) = (0, 1)\n    for i in range(n):\n        (a, b) = (b, a + b)\n        if a > 1:\n            for j in range(2, int(a ** 0.5) + 1):\n                if a % j == 0:\n                    break\n            else:\n                return a",
        "result": "failed: ",
        "average_distance": 36.1764705882353
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        (left, right) = (i + 1, len(l) - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "result": "passed",
        "average_distance": 36.94736842105263
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    collisions = 0\n    for left_car in range(1, n + 1):\n        for right_car in range(1, n + 1):\n            if abs(left_car - right_car) % 2 == 1:\n                collisions += 1\n    return collisions",
        "result": "failed: ",
        "average_distance": 56.36842105263158
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [x + 1 for x in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 18.42105263157895
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = '0123456789'\n    result = ''\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 28.444444444444443
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return a * h / 2",
        "result": "passed",
        "average_distance": 2.2666666666666666
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        (a, b, c, d) = (0, 0, 2, 0)\n        for _ in range(3, n + 1):\n            (a, b, c, d) = (b, c, d, a + b + c + d)\n        return d",
        "result": "failed: ",
        "average_distance": 23.1875
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2",
        "result": "passed",
        "average_distance": 11.266666666666667
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text == text[::-1]",
        "result": "passed",
        "average_distance": 1.2105263157894737
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(n, -1, p)",
        "result": "failed: ",
        "average_distance": 2.526315789473684
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 0.07692307692307693
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])",
        "result": "passed",
        "average_distance": 4.2631578947368425
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    return all((num < t for num in l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    if n <= 0:\n        return 'Input must be a positive integer'\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (1, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b",
        "result": "failed: ",
        "average_distance": 12.352941176470589
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append('<')\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 10.631578947368421
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    return all((a <= b for (a, b) in zip(l, l[1:]))) or all((a >= b for (a, b) in zip(l, l[1:])))",
        "result": "passed",
        "average_distance": 14.5
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 4.421052631578948
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2",
        "result": "passed",
        "average_distance": 2.3684210526315788
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 15.578947368421053
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]",
        "result": "passed",
        "average_distance": 21.41176470588235
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        (a, b, c) = (0, 0, 1)\n        for _ in range(3, n + 1):\n            (a, b, c) = (b, c, b + c + a)\n        return c",
        "result": "passed",
        "average_distance": 4.578947368421052
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    s = s.lower()\n    count = sum((1 for c in s if c in 'aeiouy' and (c != 'y' or s.endswith(c))))\n    return count",
        "result": "passed",
        "average_distance": 22.42105263157895
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "result": "failed: ",
        "average_distance": 18.473684210526315
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 1.5789473684210527
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    parts = s.split()\n    num_apples = int(parts[0])\n    num_oranges = int(parts[-2])\n    return n - num_apples - num_oranges",
        "result": "passed",
        "average_distance": 37.73684210526316
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    even_nodes = [(node, idx) for (idx, node) in enumerate(arr) if node % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[0], x[1])) if even_nodes else []",
        "result": "failed: Error",
        "average_distance": 25.42105263157895
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for (num, count) in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    return max_num",
        "result": "passed",
        "average_distance": 23.0
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
        "result": "passed",
        "average_distance": 49.166666666666664
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and (c + a > b):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "passed",
        "average_distance": 12.0
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "average_distance": 2.823529411764706
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    odd_count = sum((val % 2 != 0 for val in count.values()))\n    return (len(count) - odd_count) // 2",
        "result": "failed: ",
        "average_distance": 29.61111111111111
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    return lst1 if sum((len(s) for s in lst1)) <= sum((len(s) for s in lst2)) else lst2",
        "result": "passed",
        "average_distance": 10.0625
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    for p1 in range(2, int(a ** (1 / 3)) + 1):\n        if a % p1 == 0 and is_prime(p1):\n            a //= p1\n            for p2 in range(p1 + 1, int(a ** (1 / 2)) + 1):\n                if a % p2 == 0 and is_prime(p2):\n                    a //= p2\n                    if is_prime(a) or a <= p2:\n                        return True\n                    a *= p2\n            break",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return n ** round(x ** (1 / n)) == x",
        "result": "failed: This prints if this assert fails 2 (also good for debugging!)",
        "average_distance": 10.722222222222221
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    return a >= 0 and round(a ** (1.0 / 3)) ** 3 == a",
        "result": "failed: Third test error: False",
        "average_distance": 7.4
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    prime_digits = '2357BDF'\n    return sum((1 for digit in num if digit in prime_digits))",
        "result": "failed: Fifth test error: 7",
        "average_distance": 10.944444444444445
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'",
        "result": "passed",
        "average_distance": 7.421052631578948
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set([s[i:i + 3] for i in range(len(s) - 2)])) == len(s) // 3",
        "result": "failed: abcd",
        "average_distance": 10.055555555555555
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades",
        "result": "failed: ",
        "average_distance": 42.13333333333333
    },
    "HumanEval/82": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    return 9 * 10 ** (n - 2) + n * 10 ** (n - 1)",
        "result": "failed: ",
        "average_distance": 26.76923076923077
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(digit) for digit in str(N))))[2:]",
        "result": "passed",
        "average_distance": 12.842105263157896
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    return sum((num for (i, num) in enumerate(lst) if i % 2 != 0 and num % 2 == 0))",
        "result": "passed",
        "average_distance": 12.277777777777779
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    words = s.split()\n    return ' '.join((''.join(sorted(word)) for word in words))",
        "result": "passed",
        "average_distance": 16.05263157894737
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    return sorted(((r, i) for (r, col) in enumerate(row) for (i, v) in enumerate(col) if v == x), key=lambda t: (t[0], -t[1]))",
        "result": "failed: name 'row' is not defined",
        "average_distance": 19.157894736842106
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array\n    total = array[0] + array[-1]\n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "result": "passed",
        "average_distance": 29.42105263157895
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4 * 2\n            index = (alphabet.index(char.lower()) + shift) % 26\n            if char.isupper():\n                result += alphabet[index].upper()\n            else:\n                result += alphabet[index]\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 27.63157894736842
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]",
        "result": "passed",
        "average_distance": 15.368421052631579
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    sentences = S.split('[?.!]')\n    return sum((1 for s in sentences if s.strip() and s.lower().startswith('i')))",
        "result": "failed: Test 2",
        "average_distance": 25.666666666666668
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return (x == y + z or x == z + y or y == x + z or (y == z + x) or (z == x + y) or (z == y + x)) and all((isinstance(i, int) for i in [x, y, z]))",
        "result": "passed",
        "average_distance": 23.5
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 48.8421052631579
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    max_prime = max(filter(lambda x: all((x % i > 0 for i in range(2, int(x ** 0.5) + 1))), lst))\n    return sum((int(digit) for digit in str(max_prime)))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all((isinstance(key, str) and key.islower() for key in dict.keys()))\n    all_upper = all((isinstance(key, str) and key.isupper() for key in dict.keys()))\n    return all_lower or all_upper",
        "result": "passed",
        "average_distance": 17.1875
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and len(primes) < n - 1:\n            primes.append(i)\n    return primes",
        "result": "passed",
        "average_distance": 7.0
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit",
        "result": "passed",
        "average_distance": 6.166666666666667
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    return sum((1 for (i, c) in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU'))",
        "result": "failed: ",
        "average_distance": 12.88888888888889
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if num - int(num) >= 0.5:\n        return int(num + 1)\n    else:\n        return int(num)",
        "result": "failed: Test 3",
        "average_distance": 26.05263157894737
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    result = []\n    level = n\n    while len(result) < n:\n        result.append(level)\n        if level % 2 == 0:\n            level += 2\n        else:\n            level += 1\n    return result",
        "result": "failed: Test 3",
        "average_distance": 24.333333333333332
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.replace(',', ' ').split()",
        "result": "passed",
        "average_distance": 6.666666666666667
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    even_nums = [i for i in range(x, y + 1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1",
        "result": "passed",
        "average_distance": 21.125
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 7.444444444444445
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted([n for n in x if all((d % 2 != 0 for d in str(n)))])",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 5.473684210526316
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[num - 1] for num in reversed_arr]",
        "result": "failed: name 'digit_names' is not defined",
        "average_distance": 30.90909090909091
    },
    "HumanEval/106": {
        "code": "def f(n):\n    return [i * (i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",
        "result": "failed: ",
        "average_distance": 17.944444444444443
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "result": "passed",
        "average_distance": 26.444444444444443
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for num in arr if any((int(digit) > 0 for digit in str(abs(num))))))",
        "result": "failed: ",
        "average_distance": 7.75
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    arr = sorted(arr)\n    return arr == list(reversed(arr)) or not arr",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 42.73684210526316
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    odd_count = sum((1 for num in lst1 if num % 2 != 0))\n    return 'YES' if odd_count == len(lst1) else 'NO'",
        "result": "failed: ",
        "average_distance": 29.894736842105264
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    words = test.split()\n    letter_counts = {}\n    for word in words:\n        if word in letter_counts:\n            letter_counts[word] += 1\n        else:\n            letter_counts[word] = 1\n    max_count = max(letter_counts.values())\n    return {k: v for (k, v) in letter_counts.items() if v == max_count}",
        "result": "failed: max() arg is an empty sequence",
        "average_distance": 32.0625
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    result = ''.join([x for x in s if x not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "average_distance": 6.363636363636363
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return [f'the number of odd elements {len(s) - len(s) // 2}n the str{len(s)}ng {len(s)} of the {len(s)}nput.' for s in lst]",
        "result": "failed: Test 1",
        "average_distance": 27.88235294117647
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "result": "passed",
        "average_distance": 16.5
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    water = sum((sum(row) for row in grid))\n    full_buckets = math.ceil(water / capacity)\n    return full_buckets",
        "result": "failed: Error",
        "average_distance": 27.41176470588235
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 0.631578947368421
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum((1 for c in word if c.lower() not in 'aeiou'))\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 17.842105263157894
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''",
        "result": "passed",
        "average_distance": 25.789473684210527
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    (s1, s2) = lst\n    count = 0\n    for c in s1 + s2:\n        if c == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes'",
        "result": "failed: ",
        "average_distance": 39.05555555555556
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(arr)[-k:]",
        "result": "failed: ",
        "average_distance": 1.3157894736842106
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    return sum((num for (i, num) in enumerate(lst) if i % 2 == 0 and num % 2 != 0))",
        "result": "passed",
        "average_distance": 7.833333333333333
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((i for i in arr[:k] if 10 <= abs(i) < 100))",
        "result": "failed: ",
        "average_distance": 7.333333333333333
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n not in collatz:\n            collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])",
        "result": "passed",
        "average_distance": 14.133333333333333
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3 or not all((p.isnumeric() for p in date_parts)):\n        return False\n    (month, day, year) = map(int, date_parts)\n    if month < 1 or month > 12:\n        return False\n    elif month in [1, 3, 5, 7, 8, 10, 12] and (not 1 <= day <= 31) or (month in [4, 6, 9, 11] and (not 1 <= day <= 30)) or (month == 2 and (not 1 <= day <= 29)):\n        return False\n    return True",
        "result": "passed",
        "average_distance": 90.27777777777777
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        return txt.replace(',', ' ').split()\n    elif not any((c.islower() for c in txt)):\n        return sum((1 for (i, c) in enumerate(text) if c.islower() and ord(c) % 2 == 0))\n    else:\n        return words",
        "result": "failed: ",
        "average_distance": 47.9375
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 11.176470588235293
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    return 'YES' if length > 0 and all((length % i for i in range(2, int(length ** 0.5) + 1))) else 'NO'",
        "result": "failed: ",
        "average_distance": 40.333333333333336
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= 1 if num >= 0 else -1\n    return sum((abs(num) * sign_product for num in arr))",
        "result": "failed: ",
        "average_distance": 24.666666666666668
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    visited = {(i, j) for i in range(n) for j in range(n)}\n    stack = [(0, 0, [], 1)]\n    res = None\n    while stack:\n        (x, y, path, depth) = stack.pop()\n        if (x, y) not in visited or len(path) < k:\n            continue\n        if len(path) == k and (res is None or path < res):\n            res = path\n        for (dx, dy) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in visited):\n                stack.append((nx, ny, path + [grid[nx][ny]], depth))\n        visited.add((x, y))",
        "result": "failed: ",
        "average_distance": 138.0909090909091
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence",
        "result": "failed: ",
        "average_distance": 58.31578947368421
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 26.764705882352942
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((round(num) ** 2 for num in lst))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 9.666666666666666
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    return len(txt) > 0 and txt[-1].isalpha() and (not any((c.isspace() for c in txt[:-1])))",
        "result": "failed: ",
        "average_distance": 20.153846153846153
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1",
        "result": "failed: ",
        "average_distance": 7.222222222222222
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    a = min(negative) if negative else None\n    b = max(positive) if positive else None\n    return (a, b)",
        "result": "failed: ",
        "average_distance": 13.722222222222221
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if type(a) == str and type(b) == int or (type(b) == str and type(a) == int):\n        return None\n    elif a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None",
        "result": "failed: ",
        "average_distance": 64.4375
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    even_nums = [i for i in range(2, n + 1, 2)]\n    return any((sum(nums) == n for nums in itertools.combinations(even_nums, 4)))",
        "result": "failed: name 'itertools' is not defined",
        "average_distance": 62.1764705882353
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined",
        "average_distance": 0.5789473684210527
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '__' in text:\n        text = text.replace('__', '-')\n    return text",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "average_distance": 23.0
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3 or '.' not in file_name or file_name.split('.')[0] == '' or (not file_name.split('.')[0][0].isalpha()) or (file_name.split('.')[-1] not in ['txt', 'exe', 'dll']):\n        return 'No'\n    else:\n        return 'Yes'",
        "result": "failed: ",
        "average_distance": 47.73684210526316
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    return sum((i ** 3 if i % 4 == 0 and i % 3 != 0 else i ** 2 if i % 3 == 0 else i for i in lst))",
        "result": "failed: ",
        "average_distance": 34.1875
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    result = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 56.0
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (x_num, x_denom) = map(int, x.split('/'))\n    (n_num, n_denom) = map(int, n.split('/'))\n    return x_num * n_denom == n_num * x_denom",
        "result": "failed: test1",
        "average_distance": 14.142857142857142
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 1.7894736842105263
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and (str(num)[-1] in '13579'):\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 18.789473684210527
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 33.55555555555556
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    result = [p for (i, p) in enumerate(planets) if idx1 < i < idx2]\n    return tuple(sorted(result))",
        "result": "failed: Second test error: ()",
        "average_distance": 29.5
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0])",
        "result": "failed: ",
        "average_distance": 4.578947368421052
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return y\n        return x",
        "result": "failed: ",
        "average_distance": 3.0
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    return sum((i ** 2 for i in lst if isinstance(i, int) and i % 2 != 0))",
        "result": "failed: This prints if this assert fails 5 (also good for debugging!)",
        "average_distance": 3.588235294117647
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(g - g_) if g_ != g else 0 for (g, g_) in zip(game, guess)]",
        "result": "passed",
        "average_distance": 2.3684210526315788
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda x: sum((c.isupper() for c in x)) - sum((c.islower() for c in x)))\n    return f'{class_name}.{strongest_extension}'",
        "result": "passed",
        "average_distance": 32.611111111111114
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 23.22222222222222
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    count_even = sum((1 for digit in num_str if int(digit) % 2 == 0))\n    count_odd = len(num_str) - count_even\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 17.63157894736842
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for (value, numeral) in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()",
        "result": "passed",
        "average_distance": 13.833333333333334
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 22.63157894736842
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    return [number + max(need - number, 0), min(remaining, need - number)]",
        "result": "failed: Error",
        "average_distance": 17.066666666666666
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result",
        "result": "failed: ",
        "average_distance": 70.11764705882354
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result[::-1] if not any((c.isalpha() for c in s)) else result",
        "result": "passed",
        "average_distance": 25.6875
    },
    "HumanEval/162": {
        "code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash",
        "result": "passed",
        "average_distance": 20.0
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    even_digits = [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]\n    return sorted(even_digits)",
        "result": "failed: Test 1",
        "average_distance": 10.333333333333334
    }
}