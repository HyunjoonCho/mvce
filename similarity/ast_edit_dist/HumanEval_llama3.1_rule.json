{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 24.176470588235293
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_brace_count = 0\n    temp_group = ''\n    for char in paren_string:\n        if char == '(':\n            open_brace_count += 1\n            temp_group += char\n        elif char == ')':\n            open_brace_count -= 1\n            temp_group += char\n            if open_brace_count == 0:\n                result.append(temp_group)\n                temp_group = ''\n    return result",
        "result": "passed",
        "average_distance": 22.8125
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    int_part = 0\n    for i in range(int(number)):\n        int_part += 1\n    decimal_part = number - int_part\n    return decimal_part",
        "result": "passed",
        "average_distance": 21.357142857142858
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance <= 0:\n            return True\n    return False",
        "result": "failed: ",
        "average_distance": 3.9444444444444446
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    sorted_numbers = sorted(numbers)\n    mean = sum(sorted_numbers) / len(sorted_numbers)\n    total_deviation = 0.0\n    for num in numbers:\n        deviation = abs(num - mean)\n        total_deviation += deviation\n    mad = total_deviation / len(numbers)\n    return mad",
        "result": "passed",
        "average_distance": 57.77777777777778
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "result": "passed",
        "average_distance": 21.11111111111111
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    strings = paren_string.split()\n    for s in strings:\n        level = 0\n        max_level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "result": "passed",
        "average_distance": 24.5625
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    for string in strings:\n        if substring <= string:\n            result.append(string)\n    return result",
        "result": "failed: ",
        "average_distance": 2.2777777777777777
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    product = 1\n    for num in numbers:\n        total_sum += num\n        product *= num\n    return (total_sum, product)",
        "result": "passed",
        "average_distance": 9.368421052631579
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num >= max_so_far:\n            max_so_far = num\n        result.append(max_so_far)",
        "result": "failed: list index out of range",
        "average_distance": 17.235294117647058
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    i = 0\n    for length in range(len(string), 0, -1):\n        prefix = string[:length]\n        suffix = string[length:]\n        if is_palindrome(suffix + prefix[::-1]):\n            return string + prefix[::-1]\n    return string",
        "result": "failed: ",
        "average_distance": 53.35294117647059
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    return result",
        "result": "passed",
        "average_distance": 37.57142857142857
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    max_len = 0\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result",
        "result": "passed",
        "average_distance": 15.61111111111111
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    result = a\n    for i in range(2, min(a, b) + 1):\n        while a % i == 0 and b % i == 0:\n            result = i\n            a //= i\n            b //= i\n    return result",
        "result": "failed: ",
        "average_distance": 48.13333333333333
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for length in range(1, len(string) + 1):\n        prefix = string[:length]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes",
        "result": "passed",
        "average_distance": 15.0
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result",
        "result": "failed: ",
        "average_distance": 15.764705882352942
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    characters = []\n    for char in string:\n        lower_char = char.lower()\n        if lower_char not in characters:\n            characters.append(lower_char)\n    return len(characters)",
        "result": "passed",
        "average_distance": 17.133333333333333
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats",
        "result": "passed",
        "average_distance": 43.470588235294116
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    pos = 0\n    while pos <= len(string):\n        pos = string.find(substring, pos)\n        if pos == -1:\n            break\n        count += 1\n        pos += len(substring)\n    return count",
        "result": "failed: ",
        "average_distance": 28.210526315789473
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    for i in range(len(num_list)):\n        for j in range(i + 1, len(num_list)):\n            if number_dict[num_list[i]] > number_dict[num_list[j]]:\n                temp = num_list[i]\n                num_list[i] = num_list[j]\n                num_list[j] = temp\n    return ' '.join(num_list)",
        "result": "passed",
        "average_distance": 117.375
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair",
        "result": "failed: ",
        "average_distance": 33.421052631578945
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_val = numbers[0]\n    max_val = numbers[-1]\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_val) / (max_val - min_val)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers",
        "result": "failed: ",
        "average_distance": 34.46153846153846
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "result": "passed",
        "average_distance": 0.7647058823529411
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "result": "passed",
        "average_distance": 5.555555555555555
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    i = 1\n    for possible_divisor in range(i, n):\n        if n % possible_divisor == 0 and possible_divisor > i:\n            i = possible_divisor\n    return i",
        "result": "passed",
        "average_distance": 15.411764705882353
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        count = 0\n        for j in range(i, n + 1):\n            if n % j == 0 and j > 1:\n                count += 1\n        if count > 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1",
        "result": "failed: ",
        "average_distance": 47.5625
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        found = False\n        for i in result:\n            if i == num:\n                found = True\n                break\n        if not found:\n            result.append(num)\n    return result",
        "result": "failed: ",
        "average_distance": 18.5
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    flipped_string = ''\n    for char in string:\n        if char <= 'z':\n            flipped_string += chr(ord(char) - 32)\n        else:\n            flipped_string += chr(ord(char) + 32)\n    return flipped_string",
        "result": "failed: ",
        "average_distance": 25.375
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in sorted(strings):\n        result += s\n    return result",
        "result": "failed: ",
        "average_distance": 14.0
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "passed",
        "average_distance": 9.052631578947368
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num <= 0:\n            continue\n        positive_nums.append(num)\n    return positive_nums",
        "result": "passed",
        "average_distance": 2.7058823529411766
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 22.8
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    for i in range(len(xs)):\n        if xs[i] != 0 and (len(xs) - i) % 2 == 1:\n            x = -xs[i - 1] / xs[i]\n            return round(x, 5)\n    return None",
        "result": "failed: ",
        "average_distance": 108.83333333333333
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    sorted_lst = []\n    for i in range(len(lst)):\n        if i % 3 <= 0:\n            sorted_lst.append(lst[i])\n        else:\n            temp = [x for (j, x) in enumerate(lst) if j % 3 == i and j != i]\n            sorted_lst.append(sorted(temp))\n    return sorted_lst",
        "result": "failed: name 'lst' is not defined",
        "average_distance": 63.470588235294116
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    result = []\n    for i in l:\n        found = False\n        for j in result:\n            if i <= j:\n                found = True\n                break\n        if not found:\n            result.append(i)\n    return sorted(result)",
        "result": "failed: ",
        "average_distance": 21.705882352941178
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    biggest = l[0]\n    for num in l:\n        if num > biggest:\n            biggest = num\n    return biggest",
        "result": "passed",
        "average_distance": 8.166666666666666
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            for digit in str_i:\n                if digit == '7':\n                    count += 1",
        "result": "failed: ",
        "average_distance": 16.11764705882353
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_index_values = sorted([l[j] for j in range(len(l)) if j % 2 == 0])\n            result.append(sorted_index_values[i // 2])\n        else:\n            result.append(l[i])",
        "result": "failed: 'NoneType' object is not iterable",
        "average_distance": 55.13333333333333
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = []\n    for i in range(0, len(s), 3):\n        group = s[i:i + 3]\n        if len(group) < 3:\n            group += ' ' * (3 - len(group))\n        groups.append(group)\n    decoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            decoded_group = group[2] + group[1] + group[0]\n        else:\n            decoded_group = group\n        decoded_groups.append(decoded_group)\n    return ''.join(decoded_groups)",
        "result": "failed: ",
        "average_distance": 131.11111111111111
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    a = 0\n    b = 1\n    count = 2\n    while count <= n:\n        next_b = a + b\n        if next_b > 1 and next_b < 1000000:\n            is_prime = True\n            for i in range(2, int(next_b ** 0.5) + 1):\n                if next_b % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                a = b\n                b = next_b\n                count += 1",
        "result": "failed: ",
        "average_distance": 80.1875
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        num1 = l[i]\n        for j in range(i + 1, len(l)):\n            num2 = l[j]\n            for k in range(j + 1, len(l)):\n                num3 = l[k]\n                if num1 < num2 and num2 <= num3:\n                    if num1 + num2 + num3 == 0:\n                        return True\n    return False",
        "result": "failed: ",
        "average_distance": 79.33333333333333
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    collision_counts = 0\n    car_positions_lr = [i for i in range(n)]\n    car_positions_rl = [n - i for i in range(n)]\n    for i in range(len(car_positions_lr)):\n        for j in range(i + 1, len(car_positions_rl)):\n            if car_positions_lr[i] <= car_positions_rl[j]:\n                collision_counts += 1\n    return collision_counts",
        "result": "failed: ",
        "average_distance": 55.11764705882353
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    result = []\n    for i in l:\n        incremented_i = i + 1\n        result.append(incremented_i)\n    return result",
        "result": "passed",
        "average_distance": 17.647058823529413
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == 0:\n                return True\n    return False",
        "result": "failed: name 'lst' is not defined",
        "average_distance": 30.333333333333332
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    digits = '0123456789'\n    result = ''\n    temp = x\n    for i in range(base - 1, 0, -1):\n        result += digits[temp % i]\n        temp //= i\n    return result",
        "result": "failed: ",
        "average_distance": 68.84615384615384
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    area = a * h / 2\n    return area",
        "result": "passed",
        "average_distance": 14.352941176470589
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(1, n + 1):\n        e = a + b + c + d\n        d = c\n        c = b\n        b = a\n        a = e",
        "result": "failed: ",
        "average_distance": 55.6
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0",
        "result": "passed",
        "average_distance": 36.266666666666666
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    text = ''.join((char for char in text if char.isalnum())).lower()\n    for i in range(len(text)):\n        if text[i] != text[-(i + 1)]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 40.88235294117647
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    result = 2\n    for i in range(n):\n        result = result * 2 % p\n    return result",
        "result": "failed: ",
        "average_distance": 20.125
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for ch in s:\n        if ch.isalpha():\n            ascii_offset = ord('a') if ch.islower() else ord('A')\n            char_index = (ord(ch) - ascii_offset - 5) % 26\n            result += chr(char_index + ascii_offset)\n        else:\n            result += ch\n    return result",
        "result": "passed",
        "average_distance": 43.6
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "average_distance": 10.733333333333333
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 6.571428571428571
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    result = 0\n    for i in range(y + 1):\n        result = x + result",
        "result": "failed: ",
        "average_distance": 30.8
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for c in s0:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    for c in s1:\n        if c in char_count:\n            char_count[c] -= 1\n        else:\n            return False\n    for count in char_count.values():\n        if count != 0:\n            return False\n    return True",
        "result": "failed: ",
        "average_distance": 45.666666666666664
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    a = 0\n    b = 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return a",
        "result": "failed: ",
        "average_distance": 25.933333333333334
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    open_count = 0\n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            if open_count <= 0:\n                return False\n            open_count -= 1\n    return open_count <= 0",
        "result": "passed",
        "average_distance": 13.88888888888889
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    increasing = decreasing = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            increasing = False\n        if lst[i] < lst[i + 1]:\n            decreasing = False\n    return increasing or decreasing",
        "result": "failed: name 'lst' is not defined",
        "average_distance": 37.77777777777778
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    sorted_l1 = []\n    sorted_l2 = []\n    for item in l1:\n        if item not in sorted_l1:\n            sorted_l1.append(item)\n    for item in l2:\n        if item not in sorted_l2:\n            sorted_l2.append(item)\n    common_elements = []\n    for item in sorted_l1:\n        if item in sorted_l2 and item not in common_elements:\n            common_elements.append(item)\n    return sorted(common_elements)",
        "result": "passed",
        "average_distance": 69.44444444444444
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = 2\n    max_factor = None\n    while n != 1:\n        if n % i == 0:\n            n //= i\n            if max_factor is None or i > max_factor:\n                max_factor = i\n        else:\n            i += 1\n    return max_factor",
        "result": "passed",
        "average_distance": 49.5
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    total = 0\n    num = 1\n    for _ in range(n):\n        if num <= n:\n            total += num\n        num += 1",
        "result": "failed: ",
        "average_distance": 14.705882352941176
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0",
        "result": "passed",
        "average_distance": 8.5
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        coefficient = xs[i] * i\n        result.append(coefficient)\n    return result",
        "result": "passed",
        "average_distance": 18.941176470588236
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3, n + 1):\n        temp = a + b + c\n        a = b\n        b = c\n        c = temp",
        "result": "failed: ",
        "average_distance": 27.058823529411764
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    count = 0\n    for char in s:\n        if char == 'a' or char == 'e' or char == 'i' or (char == 'o') or (char == 'u'):\n            count += 1\n        elif char.lower() == 'y' and s.find(char) == len(s) - 1:\n            count += 1\n    return count",
        "result": "failed: Test 2",
        "average_distance": 50.785714285714285
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    num_digits = len(str(x))\n    x_str = str(x)\n    result = ''\n    for i in range(num_digits):\n        result += x_str[(i - shift) % num_digits]\n    return result",
        "result": "failed: ",
        "average_distance": 48.0
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result",
        "result": "passed",
        "average_distance": 16.88888888888889
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    words = s.split()\n    num_fruits = 0\n    num_apples = 0\n    num_oranges = 0\n    for i in range(len(words)):\n        if words[i] == 'apples' or words[i] == 'oranges':\n            num_fruits += int(words[i - 1])\n    return n - num_fruits",
        "result": "passed",
        "average_distance": 74.25
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    min_even = None\n    min_index = None\n    for (i, num) in enumerate(arr):\n        if num % 2 == 0 and (min_even is None or num < min_even):\n            min_even = num\n            min_index = i\n        elif num % 2 == 0 and num == min_even:\n            if i < min_index:\n                min_index = i\n    return [min_even, min_index] if min_even is not None else []",
        "result": "passed",
        "average_distance": 30.764705882352942
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    greatest = 0\n    for i in lst:\n        count = 0\n        for j in lst:\n            if i == j:\n                count += 1\n        if count >= i and i > greatest:\n            greatest = i\n    return -1 if greatest == 0 else greatest",
        "result": "passed",
        "average_distance": 32.294117647058826
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    sorted_lst = lst.copy()\n    result = []\n    for _ in range(len(sorted_lst)):\n        min_val = min(sorted_lst)\n        result.append(min_val)\n        sorted_lst.remove(min_val)\n        if len(sorted_lst) > 0:\n            max_val = max(sorted_lst)\n            result.append(max_val)\n            sorted_lst.remove(max_val)\n        else:\n            break",
        "result": "failed: min() arg is an empty sequence",
        "average_distance": 60.833333333333336
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    a_valid = a <= b + c and b <= a + c and (c <= a + b)\n    if a_valid:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "failed: ",
        "average_distance": 52.375
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    for i in sorted(q):\n        if q != q[::-1]:\n            return False\n    total = 0\n    for i in q:\n        total += i\n    return total <= w",
        "result": "passed",
        "average_distance": 28.181818181818183
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    max_freq = max(freq.values())\n    total_changes = len(arr) - max_freq\n    odd_num_changes = sum((1 for count in freq.values() if count % 2 != 0))\n    return min(total_changes, odd_num_changes)",
        "result": "failed: ",
        "average_distance": 73.88235294117646
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    len1 = 0\n    for string in lst1:\n        len1 += len(string)\n    len2 = 0\n    for string in lst2:\n        len2 += len(string)\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "average_distance": 18.157894736842106
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    for i in range(1, a + 1):\n        for j in range(i, a + 1):\n            for k in range(j, a + 1):\n                if i * j * k == a and is_prime(i) and is_prime(j) and is_prime(k):\n                    return True\n    return False\n    for p in range(2, n):\n        if p * p <= n and n % p == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 80.3125
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    for i in range(2, x + 1):\n        if n ** i == x and i * n <= x // i:\n            return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 36.54545454545455
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    i = 1\n    while a >= i ** 3:\n        if a == i ** 3:\n            return True\n        i += 1\n    return False",
        "result": "failed: Third test error: False",
        "average_distance": 17.529411764705884
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in hex_primes and digit <= '9':\n            count += 1\n    return count",
        "result": "failed: First test error: 0",
        "average_distance": 18.5
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    binary = ''\n    for digit in str(decimal):\n        if digit == '0':\n            binary += '0'\n        else:\n            binary += '1'\n    return 'db' + binary + 'db'",
        "result": "failed: ",
        "average_distance": 22.235294117647058
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    for i in range(len(s)):\n        if len(s) < 3 or s[i] == s[i + 1] or s[i] == s[i + 2] or (s[i + 1] == s[i + 2]):\n            return False\n    return True",
        "result": "failed: string index out of range",
        "average_distance": 49.0
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: ",
        "average_distance": 27.11764705882353
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    lengths = [5, 6]\n    for length in lengths:\n        if length <= len(string) and len(string) < length + 1:\n            is_prime = True\n            for i in range(2, int(len(string) ** 0.5) + 1):\n                if len(string) % i == 0:\n                    is_prime = False\n                    break\n            return is_prime",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    one_count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':\n            one_count += 1\n    return one_count",
        "result": "passed",
        "average_distance": 56.916666666666664
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    result = ''\n    for i in range(1, N + 1):\n        if N // i % 2 == 1:\n            result += '1'\n        else:\n            result += '0'\n    return result",
        "result": "failed: Error",
        "average_distance": 29.94736842105263
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 != 0:\n            result += lst[i]\n    return result",
        "result": "passed",
        "average_distance": 5.764705882352941
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)",
        "result": "passed",
        "average_distance": 14.842105263157896
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    result = []\n    for (i, row) in enumerate(lst):\n        inner_result = []\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                inner_result.append((i, j))\n        result.extend(inner_result)\n    return sorted(result)",
        "result": "failed: ",
        "average_distance": 84.33333333333333
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if len(array) < 2:\n        return array\n    first = array[0]\n    last = array[-1]\n    total_sum = first + last\n    if total_sum <= 0:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] > array[j]:\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n    else:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] < array[j]:\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n    return array",
        "result": "failed: Error",
        "average_distance": 78.88235294117646
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            position = (alphabet.index(char.lower()) + 2 * 2) % len(alphabet)\n            if char.isupper():\n                encrypted += alphabet[position].upper()\n            else:\n                encrypted += alphabet[position]\n        else:\n            encrypted += char\n    return encrypted",
        "result": "passed",
        "average_distance": 41.8421052631579
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    smallest = None\n    second_smallest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or (num <= second_smallest and num != smallest):\n            second_smallest = num\n    return second_smallest",
        "result": "failed: ",
        "average_distance": 41.0
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    sentences = S.split('. ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count",
        "result": "failed: Test 2",
        "average_distance": 32.94117647058823
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    for i in range(len([x, y, z])):\n        if x <= y + z and x >= y + z and isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 53.888888888888886
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            index = ord(char) - ord('a') + 2\n            encoded_char = chr(ord('a') + index % 6)\n        elif char.isalpha():\n            encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 62.1578947368421
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and (max_prime is None or num > max_prime):\n                max_prime = num\n    sum_of_digits = 0\n    for digit in str(max_prime):\n        sum_of_digits += int(digit)\n    return sum_of_digits",
        "result": "passed",
        "average_distance": 42.69230769230769
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    keys_lower = []\n    keys_upper = []\n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            keys_lower.append(True)\n        elif isinstance(key, str) and key.isupper():\n            keys_upper.append(True)\n    all_keys_lower = len(keys_lower) == len(dict)\n    all_keys_upper = len(keys_upper) == len(dict)\n    return all_keys_lower or all_keys_upper",
        "result": "failed: 1st edge test error: True",
        "average_distance": 54.625
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    primes = []\n    for possiblePrime in range(2, n):\n        if is_prime(possiblePrime):\n            primes.append(possiblePrime)\n    return primes",
        "result": "failed: name 'num' is not defined",
        "average_distance": 29.583333333333332
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product_unit_digits = unit_digit_a * unit_digit_b\n    return product_unit_digits",
        "result": "passed",
        "average_distance": 13.764705882352942
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    upper_vowels = 'AEIOU'\n    total_count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in upper_vowels:\n            total_count += 1\n    return total_count",
        "result": "failed: ",
        "average_distance": 19.105263157894736
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    float_value = float(value)\n    integer_below = int(float_value)\n    integer_above = integer_below + 1\n    distance_to_below = abs(float_value - integer_below)\n    distance_to_above = abs(float_value - integer_above)\n    if distance_to_below <= distance_to_above:\n        return integer_below\n    else:\n        return integer_above",
        "result": "failed: Test 2",
        "average_distance": 45.375
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    result = []\n    current = n\n    for i in range(n):\n        if current % 2 == 0:\n            current += 2\n        else:\n            current += 1\n        result.append(current)\n    return result",
        "result": "failed: Test 3",
        "average_distance": 28.0
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    all_words = []\n    for word in s.split(','):\n        for w in word.split():\n            if w:\n                all_words.append(w)\n    return all_words",
        "result": "passed",
        "average_distance": 38.3125
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    even_nums_in_range = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            even_nums_in_range.append(i)\n    if len(even_nums_in_range) > 0:\n        return max(even_nums_in_range)\n    else:\n        return -1",
        "result": "passed",
        "average_distance": 29.416666666666668
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    avg = total / count\n    avg = round(avg)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 35.38461538461539
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result",
        "result": "passed",
        "average_distance": 16.789473684210527
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    sorted_arr = []\n    for num in arr:\n        if 1 <= num <= 9:\n            sorted_arr.append(num)\n    sorted_arr.sort()\n    reversed_arr = []\n    for i in range(len(sorted_arr) - 1, -1, -1):\n        reversed_arr.append(names[sorted_arr[i]])\n    return reversed_arr",
        "result": "passed",
        "average_distance": 70.8125
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact_i = 1\n            for j in range(1, i + 1):\n                fact_i *= j\n            result.append(fact_i)\n        else:\n            sum_i = 0\n            for k in range(1, i + 1):\n                sum_i += k\n            result.append(sum_i)",
        "result": "failed: ",
        "average_distance": 14.631578947368421
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        num_str = str(i)\n        if num_str == num_str[::-1]:\n            if int(num_str) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "passed",
        "average_distance": 32.473684210526315
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = [num]\n            num = -num\n        else:\n            signed_digits = []\n        total_sum = 0\n        for digit in str(num):\n            total_sum += int(digit)\n        if total_sum > 0:\n            count += 1\n    return count",
        "result": "failed: ",
        "average_distance": 39.2
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    arr_sorted = sorted(arr)\n    is_possible = True\n    for i in range(len(arr)):\n        if arr[i] != arr_sorted[-(i + 1)]:\n            is_possible = False\n            break\n    return is_possible",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 35.09090909090909
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 != 0 and even_count > 0:\n            lst1.remove(num)\n            lst2.append(num)\n            even_count -= 1\n    for num in lst1:\n        if num % 2 != 0:\n            return 'NO'\n    return 'YES'",
        "result": "failed: list.remove(x): x not in list",
        "average_distance": 57.4
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    count_dict = {}\n    max_count = 0\n    for word in test.split():\n        for char in word:\n            if char not in count_dict:\n                count_dict[char] = 1\n            else:\n                count_dict[char] += 1\n            if count_dict[char] > max_count:\n                max_count = count_dict[char]\n    result = {}\n    for (key, value) in count_dict.items():\n        if value == max_count:\n            result[key] = value\n    return result",
        "result": "passed",
        "average_distance": 50.4
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    chars_to_remove = []\n    for char in c:\n        while char in s:\n            chars_to_remove.append(char)\n            s = s.replace(char, '', 1)\n    result_str = ''.join(sorted(s))\n    is_palindrome = result_str == result_str[::-1]\n    return (result_str, is_palindrome)",
        "result": "failed: ",
        "average_distance": 41.166666666666664
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append('the number of odd elements {}n the str{}ng {} of the {}nput.'.format(count, count, len(string), len(string)))",
        "result": "failed: Test 1",
        "average_distance": 37.625
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    temp_sum = 0\n    for num in nums:\n        temp_sum += num\n        if temp_sum <= min_sum:\n            min_sum = temp_sum\n        elif temp_sum > 0:\n            min_sum = min(min_sum, temp_sum)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 35.76470588235294
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    water_needed = 0\n    num_wells = len(grid)\n    for well in range(num_wells):\n        current_water = 0\n        for cell in grid[well]:\n            if cell == 1:\n                current_water += 1\n        full_buckets = (current_water + capacity - 1) // capacity\n        water_needed += full_buckets\n    return water_needed",
        "result": "passed",
        "average_distance": 81.6842105263158
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    sorted_arr = []\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
        "result": "passed",
        "average_distance": 61.526315789473685
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    selected_words = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in vowels and letter.isalpha():\n                consonants += 1\n        if consonants == n:\n            selected_words.append(word)\n    return selected_words",
        "result": "passed",
        "average_distance": 30.625
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels and word[i - 1] not in vowels:\n            return word[i]\n        elif word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return ''",
        "result": "failed: ",
        "average_distance": 46.94736842105263
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        if s == '(':\n            open_count += 1\n        elif s == ')':\n            if open_count <= close_count:\n                return 'No'\n            close_count += 1\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'",
        "result": "failed: ",
        "average_distance": 71.16666666666667
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    arr.sort()\n    max_k = []\n    for i in range(k):\n        max_k.append(arr[i])\n    return max_k",
        "result": "failed: ",
        "average_distance": 13.875
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and (i + 1) % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum",
        "result": "failed: ",
        "average_distance": 14.0
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        num = arr[i]\n        if num < 10 or num <= 100:\n            total += num\n    return total",
        "result": "passed",
        "average_distance": 23.333333333333332
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = []\n    for num in collatz_sequence:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return sorted(odd_numbers)",
        "result": "passed",
        "average_distance": 19.142857142857142
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    day_month_year = date.split('-')\n    if len(day_month_year) != 3 or '' in day_month_year:\n        return False\n    (month, day, year) = map(int, day_month_year)\n    if not 1 <= month <= 12:\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    elif month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31) or (month in [4, 6, 9, 11] and (day < 1 or day > 30)):\n        return False\n    return True",
        "result": "passed",
        "average_distance": 106.75
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    words = []\n    has_whitespace = False\n    for char in txt:\n        if char.isspace():\n            has_whitespace = True\n            break\n    if has_whitespace:\n        for word in txt.split():\n            words.append(word)\n    else:\n        has_comma = False\n        for char in txt:\n            if char == ',':\n                has_comma = True\n                break\n        if has_comma:\n            words.extend(txt.replace(',', ' ').split())\n        else:\n            odd_count = 0\n            for (i, char) in enumerate(txt):\n                if char.islower() and ord(char) % 2 != 0:\n                    odd_count += 1\n            return odd_count\n    return words",
        "result": "failed: ",
        "average_distance": 100.16666666666667
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] > lst[i + 1]:\n            return False\n        for j in range(i + 2, len(lst)):\n            if lst[j] == lst[i]:\n                return False\n        i += 1\n    return True",
        "result": "passed",
        "average_distance": 54.4375
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    start1 = max(interval1[0], interval2[0])\n    end1 = min(interval1[1], interval2[1])\n    if start1 > end1:\n        return 'NO'\n    intersect_length = end1 - start1\n    for num in range(2, int(intersect_length ** 0.5) + 1):\n        if intersect_length % num == 0:\n            return 'NO'\n    return 'YES'",
        "result": "failed: ",
        "average_distance": 39.15384615384615
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = []\n    for num in arr:\n        if num > 0:\n            signs.append(1)\n        elif num < 0:\n            signs.append(-1)\n    sign_product = 1\n    for sign in signs:\n        sign_product *= sign\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num) * sign_product\n    return sum_of_magnitudes",
        "result": "failed: ",
        "average_distance": 39.78947368421053
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    visited = []\n    for i in range(n):\n        for j in range(n):\n            curr_val = grid[i][j]\n            stack = [(i, j, [curr_val])]\n            while stack:\n                (x, y, path) = stack.pop()\n                if len(path) == k + 1:\n                    visited.append((path, x, y))\n                    continue\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        (nx, ny) = (x + dx, y + dy)\n                        if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in path):\n                            stack.append((nx, ny, path + [grid[nx][ny]]))\n    min_path_val = None\n    for (path, _, _) in visited:\n        if min_path_val is None or path < min_path_val:\n            min_path_val = path\n    return list(min_path_val)",
        "result": "failed: ",
        "average_distance": 212.42857142857142
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    result = []\n    for i in range(n + 1):\n        if i == 0:\n            result.append(1)\n        elif i == 1:\n            result.append(3)\n        elif i % 2 == 0:\n            result.append(1 + i // 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + tri(i + 1))",
        "result": "failed: maximum recursion depth exceeded in comparison",
        "average_distance": 47.1875
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 <= 0:\n            return 0\n        else:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "average_distance": 12.882352941176471
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            open_brackets -= 1\n            if open_brackets < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 22.133333333333333
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    result = 0\n    for num in sorted(lst):\n        rounded_num = int(num + 0.99999)\n        result += rounded_num ** 2\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 26.4
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    last_word = words[-1]\n    char_count = len(last_word)\n    return char_count == 1 and last_word <= 'z' and (last_word >= 'a')",
        "result": "failed: ",
        "average_distance": 47.53846153846154
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i - 1]:\n            largest_index = max(largest_index, i)\n    return largest_index",
        "result": "failed: ",
        "average_distance": 15.0
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negative = []\n    positive = []\n    for num in lst:\n        if num < 0:\n            negative.append(num)\n        elif num > 0:\n            positive.append(num)\n    a = None\n    b = None\n    if len(negative) >= 1:\n        a = max(negative)\n    if len(positive) >= 1:\n        b = min(positive)\n    return (a, b)",
        "result": "passed",
        "average_distance": 60.411764705882355
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    for i in (a, b):\n        if isinstance(i, str):\n            i = float(i.replace('.', ','))\n    for i in (a, b):\n        if not isinstance(i, str):\n            i = float(i)\n    if a < b:\n        return a\n    elif a <= b:\n        return b",
        "result": "failed: ",
        "average_distance": 86.5
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    even_numbers = 0\n    current_sum = 0\n    for i in range(2, n + 1, 2):\n        if current_sum < n:\n            even_numbers += 1\n            current_sum += i\n        elif current_sum <= n:\n            return current_sum == n and even_numbers == 4",
        "result": "failed: ",
        "average_distance": 61.44444444444444
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        temp = 1\n        for j in range(1, i + 1):\n            temp *= j\n        result *= temp",
        "result": "failed: Test 4",
        "average_distance": 6.666666666666667
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    i = 0\n    while i < len(text):\n        if text[i] == ' ' and (i == 0 or text[i - 1] != ' '):\n            text = text[:i] + '_' + text[i + 1:]\n            i += 2\n        elif text[i:i + 3] == '   ':\n            text = text[:i] + '-' + text[i + 3:]\n            i += 4\n        else:\n            i += 1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 96.58823529411765
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    count = 0\n    for char in file_name:\n        if char.isdigit():\n            count += 1\n        elif char == '.':\n            break\n    else:\n        return 'No'\n    if count > 3 or not any((char.isalpha() for char in file_name.split('.')[0])):\n        return 'No'\n    extensions = ['txt', 'exe', 'dll']\n    for ext in extensions:\n        if file_name.split('.')[-1] == ext:\n            return 'Yes'\n    return 'No'",
        "result": "failed: ",
        "average_distance": 88.46666666666667
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    total_sum = 0\n    for (i, num) in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum",
        "result": "failed: ",
        "average_distance": 23.473684210526315
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    return ' '.join(result)",
        "result": "passed",
        "average_distance": 77.83333333333333
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (x_num, x_denom) = map(int, x.split('/'))\n    (n_num, n_denom) = map(int, n.split('/'))\n    for i in range(1, min(x_denom, n_denom) + 1):\n        if x_denom % i == 0 and n_denom % i == 0 and (x_num * (n_denom // i) <= n_num * (x_denom // i)):\n            return True\n    return False",
        "result": "failed: test2",
        "average_distance": 39.25
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum((int(digit) for digit in str(abs(nums[i])))) < sum((int(digit) for digit in str(abs(nums[j])))):\n                (nums[i], nums[j]) = (nums[j], nums[i])\n    return nums",
        "result": "failed: ",
        "average_distance": 50.1875
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and (num // 10 % 2 == 1):\n            count += 1\n    return count",
        "result": "failed: ",
        "average_distance": 25.176470588235293
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    count = 0\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = i ** 2 - i + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 98.375
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            p1 = i\n        elif planets[i] == planet2:\n            p2 = i\n    if p1 is None or p2 is None:\n        return ()\n    result = []\n    for j in range(min(p1, p2) + 1, max(p1, p2)):\n        result.append(planets[j])\n    return tuple(sorted(result))",
        "result": "failed: Third test error: ('Earth', 'Jupiter', 'Mars', 'Saturn', 'Venus')",
        "average_distance": 77.05263157894737
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    result = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            result.append(item)\n    result.sort(key=lambda x: (len(x), x))\n    return [item for item in result if len(result) == 1]",
        "result": "failed: ",
        "average_distance": 46.31578947368421
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: ",
        "average_distance": 34.5
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and (num % 2 > 0):\n            sum_of_squares += num ** 2\n    return sum_of_squares",
        "result": "passed",
        "average_distance": 8.733333333333333
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    correct = []\n    for i in range(len(game)):\n        diff = abs(guess[i] - game[i])\n        if diff == 0:\n            correct.append(0)\n        else:\n            correct.append(diff)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 21.058823529411764
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = None\n    max_strength = -1\n    for extension in extensions:\n        CAP = sum((1 for c in extension if c.isupper()))\n        SM = sum((1 for c in extension if c.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest = extension\n    return class_name + '.' + strongest",
        "result": "passed",
        "average_distance": 27.470588235294116
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rot_b = b[i:] + b[:i]\n        if a <= rot_b:\n            return True\n    return False",
        "result": "failed: test #0",
        "average_distance": 18.846153846153847
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) <= 4:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "failed: ",
        "average_distance": 7.6875
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result",
        "result": "passed",
        "average_distance": 233.11111111111111
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    sorted_sides = [a, b, c]\n    for i in range(len(sorted_sides)):\n        for j in range(i + 1, len(sorted_sides)):\n            if sorted_sides[i] ** 2 + sorted_sides[j] ** 2 <= sorted_sides[-1] ** 2:\n                return True\n    return False",
        "result": "failed: ",
        "average_distance": 54.72222222222222
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_word = words[0]\n    max_unique = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_chars\n    return max_word",
        "result": "passed",
        "average_distance": 14.631578947368421
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    total_eaten = number\n    for i in range(need - number):\n        if remaining > 0:\n            total_eaten += 1\n            remaining -= 1\n    return [total_eaten, remaining]",
        "result": "failed: Error",
        "average_distance": 9.1875
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "average_distance": 30.94736842105263
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for c in s:\n        if 'a' <= c <= 'z':\n            result += chr(ord(c) - 32)\n        elif 'A' <= c <= 'Z':\n            result += chr(ord(c) + 32)\n        else:\n            result += c\n    return result",
        "result": "failed: ",
        "average_distance": 36.111111111111114
    },
    "HumanEval/162": {
        "code": "def string_to_md5(text):\n    import hashlib\n    if text == '':\n        return None\n    md5_hash = hashlib.md5()\n    for char in text:\n        md5_hash.update(char.encode())\n    return md5_hash.hexdigest()",
        "result": "passed",
        "average_distance": 15.75
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    even_digits = []\n    for digit in range(min(a, b), max(a, b) + 1):\n        if digit % 2 == 0:\n            even_digits.append(digit)\n    return sorted(even_digits)",
        "result": "failed: Test 1",
        "average_distance": 23.642857142857142
    }
}