{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any((abs(a - b) < threshold for (a, b) in zip(numbers, numbers[1:])))",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if stack:\n                start = stack.pop()\n                groups.append(paren_string[start:i + 1])\n        i += 1\n    return groups",
        "result": "failed: ",
        "average_distance": 49.583333333333336
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 1.4166666666666667
    },
    "HumanEval/3": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum((abs(x - mean) for x in numbers)) / n",
        "result": "passed",
        "average_distance": 6.533333333333333
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.append(num)\n        if len(result) < len(numbers):\n            result.append(delimeter)\n    return result",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "result": "passed",
        "average_distance": 22.454545454545453
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n        product *= num\n    return (total_sum, product)",
        "result": "passed",
        "average_distance": 2.8333333333333335
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if string[:i + 1] == string[i::-1]:\n            return string + string[i::-1][::-1]\n    return string",
        "result": "failed: ",
        "average_distance": 13.916666666666666
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for (x, y) in zip(a, b)))",
        "result": "passed",
        "average_distance": 3.5555555555555554
    },
    "HumanEval/12": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)",
        "result": "passed",
        "average_distance": 1.8
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
        "result": "passed",
        "average_distance": 5.1
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))",
        "result": "passed",
        "average_distance": 1.6666666666666667
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "result": "passed",
        "average_distance": 1.411764705882353
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]",
        "result": "passed",
        "average_distance": 18.142857142857142
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)",
        "result": "failed: ",
        "average_distance": 18.7
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted(map(str.lower, numbers.split())))",
        "result": "failed: ",
        "average_distance": 15.0
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i + 1])\n    return pair",
        "result": "failed: ",
        "average_distance": 15.625
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/22": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 0.6666666666666666
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "average_distance": 7.5
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))",
        "result": "failed: ",
        "average_distance": 18.333333333333332
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    return string.swapcase()",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [i for i in l if i > 0]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return -xs[-2] / xs[-1]",
        "result": "failed: ",
        "average_distance": 19.375
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    divisible_by_three = sorted([x for (i, x) in enumerate(l) if i % 3 == 0])\n    return [divisible_by_three.pop(0) if i % 3 == 0 else x for (i, x) in enumerate(l)]",
        "result": "passed",
        "average_distance": 27.09090909090909
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 0.2727272727272727
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = sum((str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0))\n    return count",
        "result": "passed",
        "average_distance": 11.1
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]",
        "result": "passed",
        "average_distance": 29.0
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    return ''.join(groups)",
        "result": "failed: ",
        "average_distance": 40.0
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n(a, b) = (0, 1)\ncount = 0\nwhile count < n:\n    (a, b) = (b, a + b)\n    if is_prime(a):\n        count += 1\nreturn a",
        "result": "failed: 'return' outside function (<string>, line 30)",
        "average_distance": 27.764705882352942
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    s = set()\n    for a in l:\n        if -a in s:\n            return True\n        s.add(a)\n    return False",
        "result": "failed: ",
        "average_distance": 43.111111111111114
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                collisions += 1\n    return collisions // 2",
        "result": "failed: ",
        "average_distance": 28.4
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [i + 1 for i in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 4.142857142857143
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 18.58823529411765
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 1.1111111111111112
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return d",
        "result": "passed",
        "average_distance": 14.4
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    return (l[n // 2] + l[(n - 1) // 2]) / 2 if n % 2 == 0 else l[n // 2]",
        "result": "passed",
        "average_distance": 18.333333333333332
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text == text[::-1]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 0.09090909090909091
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))",
        "result": "passed",
        "average_distance": 4.153846153846154
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    return all((x < t for x in l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    (a, b) = (0, 1)\n    for _ in range(n):\n        (a, b) = (b, a + b)\n    return a",
        "result": "passed",
        "average_distance": 8.466666666666667
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "result": "passed",
        "average_distance": 13.0
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    return all((x < y for (x, y) in zip(l, l[1:]))) or all((x > y for (x, y) in zip(l, l[1:])))",
        "result": "failed: ",
        "average_distance": 15.0
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = n\n    while i % 2 == 0:\n        i /= 2\n    for num in range(3, int(i ** 0.5) + 1, 2):\n        while i % num == 0:\n            i /= num\n    return int(i)",
        "result": "failed: ",
        "average_distance": 23.647058823529413
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 19.22222222222222
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * (n + 1) for (i, n) in enumerate(xs)]",
        "result": "failed: ",
        "average_distance": 6.375
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n < 3:\n        return n - 1\n    (prev1, prev2, prev3) = (0, 0, 1)\n    for _ in range(3, n + 1):\n        (prev1, prev2, prev3) = (prev2, prev3, prev1 + prev2 + prev3)\n    return prev3",
        "result": "passed",
        "average_distance": 8.4
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    return sum((1 for c in s.lower() if c in 'aeiou'))",
        "result": "failed: Test 3",
        "average_distance": 14.333333333333334
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    s = str(x)[::-1]\n    return s[shift:] + s[:shift]",
        "result": "failed: ",
        "average_distance": 12.777777777777779
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    (a, o) = map(int, s.split(' apples and ')[1].split(' oranges'))\n    return n - a - o",
        "result": "failed: invalid literal for int() with base 10: ''",
        "average_distance": 21.733333333333334
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    evens = [(i, x) for (i, x) in enumerate(arr) if x % 2 == 0]\n    return min(evens, key=lambda x: (x[1], x[0])) if evens else []",
        "result": "failed: Error",
        "average_distance": 8.1875
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    for (num, count) in freq.items():\n        if count >= num and num > 0:\n            return num\n    return -1",
        "result": "failed: ",
        "average_distance": 24.75
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
        "result": "passed",
        "average_distance": 29.272727272727273
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        return round(a * b * c / 4, 2)\n    else:\n        return -1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 29.142857142857142
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    (left, right) = (0, len(arr) - 1)\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes // 2",
        "result": "failed: ",
        "average_distance": 10.357142857142858
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    return lst1 if sum((len(s) for s in lst1)) < sum((len(s) for s in lst2)) else lst2",
        "result": "failed: ",
        "average_distance": 6.555555555555555
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    primes = [2, 3]\n    factors = []\n    while a > 1:\n        for prime in primes:\n            if a % prime == 0:\n                factors.append(prime)\n                a //= prime\n                break\n    return len(factors) == 3",
        "result": "timed out",
        "average_distance": 34.46153846153846
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return x == n ** int(math.log(x, n))",
        "result": "failed: name 'math' is not defined",
        "average_distance": 4.428571428571429
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    return a == round(a ** (1.0 / 3)) ** 3",
        "result": "failed: type complex doesn't define __round__ method",
        "average_distance": 4.5
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for c in num if c in primes))",
        "result": "passed",
        "average_distance": 4.928571428571429
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    return f\"db{bin(n)[2:]}{'db'}\"",
        "result": "failed: name 'n' is not defined",
        "average_distance": 9.142857142857142
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set((s[i:i + 3] for i in range(len(s) - 2)))) == len(s) - 2",
        "result": "failed: aabb",
        "average_distance": 0.0
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    return ['A+' if g >= 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g >= 0.0 else 'E' for g in grades]",
        "result": "failed: ",
        "average_distance": 55.75
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    return is_prime(len(string))",
        "result": "failed: name 'n' is not defined",
        "average_distance": 14.083333333333334
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    elif n > 1:\n        return 9 * 10 ** (n - 2) + 2",
        "result": "failed: ",
        "average_distance": 12.0
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(digit) for digit in str(N))))[2:]",
        "result": "passed",
        "average_distance": 6.666666666666667
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))",
        "result": "passed",
        "average_distance": 8.076923076923077
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    return ' '.join((''.join(sorted(w)) for w in s.split()))",
        "result": "passed",
        "average_distance": 1.5
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    return sorted(((i, j) for (i, row) in enumerate(lst) if x in row for (j, val) in enumerate(row) if val == x), key=lambda p: (p[0], -p[1]))",
        "result": "passed",
        "average_distance": 18.615384615384617
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if sum([array[0], array[-1]]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
        "result": "failed: list index out of range",
        "average_distance": 15.642857142857142
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    return ''.join((chr((ord(c) - 97 + 4) % 26 + 97) if c.isalpha() else c for c in s))",
        "result": "passed",
        "average_distance": 28.583333333333332
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]",
        "result": "failed: ",
        "average_distance": 10.923076923076923
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    return sum((s.startswith('I') for s in S.split('.') + S.split('?') + S.split('!')))",
        "result": "failed: Test 2",
        "average_distance": 15.5
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and all((isinstance(i, int) for i in [x, y, z]))",
        "result": "passed",
        "average_distance": 24.272727272727273
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_char = char.swapcase()\n        encoded_message += encoded_char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 38.7
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))",
        "result": "failed: name 'n' is not defined",
        "average_distance": 26.857142857142858
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not d:\n        return False\n    first_key_case = d.popitem()[0].islower()\n    return all((k.islower() == first_key_case for k in d.keys()))",
        "result": "failed: name 'd' is not defined",
        "average_distance": 18.5
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes[:n]",
        "result": "failed: ",
        "average_distance": 8.545454545454545
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)",
        "result": "failed: First test error: 6",
        "average_distance": 4.333333333333333
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    return sum((1 for (i, c) in enumerate(s) if i % 2 == 0 and c.isupper() and (c in 'AEIOU')))",
        "result": "passed",
        "average_distance": 8.428571428571429
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed",
        "average_distance": 18.5
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 1:\n            pile.append(i * 2 + 1)\n        else:\n            pile.append(i * 2 + 2)\n    return pile",
        "result": "failed: Test 3",
        "average_distance": 27.77777777777778
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.replace(', ', ',').split()",
        "result": "failed: ",
        "average_distance": 2.8
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1",
        "result": "passed",
        "average_distance": 6.0
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 8.454545454545455
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted(set((i for i in x if not any((d % 2 == 0 for d in str(i))))))",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 12.4375
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    return [names[x - 1] for x in reversed(arr)]",
        "result": "passed",
        "average_distance": 12.266666666666667
    },
    "HumanEval/106": {
        "code": "def f(n):\n    return [i if j % 2 == 0 else sum(range(1, j + 1)) for j in range(1, n + 1)]",
        "result": "failed: name 'i' is not defined",
        "average_distance": 14.916666666666666
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    evens = odds = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)",
        "result": "passed",
        "average_distance": 19.071428571428573
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for n in arr if sum((int(d) for d in str(abs(n)))) > 0))",
        "result": "failed: ",
        "average_distance": 7.142857142857143
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    return arr == sorted(arr)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 25.307692307692307
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    return 'YES' if len(odd_lst1) <= sum((x % 2 == 0 for x in lst2)) else 'NO'",
        "result": "passed",
        "average_distance": 47.333333333333336
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    counts = {}\n    max_count = 0\n    for letter in test.split():\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n        max_count = max(max_count, counts[letter])\n    return {k: v for (k, v) in counts.items() if v == max_count}",
        "result": "passed",
        "average_distance": 17.0
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    filtered_s = ''.join((ch for ch in s if ch not in c))\n    return (filtered_s, filtered_s == filtered_s[::-1])",
        "result": "passed",
        "average_distance": 8.333333333333334
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum((1 for c in s if int(c) % 2)), i + 1, i + 1, i + 1) for (i, s) in enumerate(lst)]",
        "result": "failed: Test 1",
        "average_distance": 13.5
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum",
        "result": "passed",
        "average_distance": 31.785714285714285
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    return sum((sum(row) for row in grid)) // capacity",
        "result": "failed: Error",
        "average_distance": 6.642857142857143
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 2.076923076923077
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = [word for word in words if sum((1 for c in word if c in consonants)) == n]\n    return result",
        "result": "passed",
        "average_distance": 4.8125
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''",
        "result": "passed",
        "average_distance": 7.375
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    (s1, s2) = lst\n    count = 0\n    for c in s1 + s2:\n        if c == '(':\n            count += 1\n        elif c == ')':\n            count -= 1\n            if count < 0:\n                break\n    return 'Yes' if count == 0 else 'No'",
        "result": "failed: ",
        "average_distance": 25.666666666666668
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]",
        "result": "failed: ",
        "average_distance": 3.857142857142857
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 0 and x % 2 != 0))",
        "result": "passed",
        "average_distance": 6.857142857142857
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((i for i in arr[:k] if abs(i) < 100))",
        "result": "passed",
        "average_distance": 4.2
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    seq = []\n    while n != 1:\n        if n % 2 == 1:\n            seq.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(seq)",
        "result": "failed: ",
        "average_distance": 11.166666666666666
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date or '-' not in date or len(date) != 10:\n        return False\n    (day, month, year) = map(int, date.split('-'))\n    if month < 1 or month > 12 or (month in [4, 6, 9, 11] and day < 1 or day > 30) or (month == 2 and day < 1 or day > 29):\n        return False\n    return True",
        "result": "failed: ",
        "average_distance": 68.3
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split(' ')\n    else:\n        return sum((ord(c) % 2 == 1 for c in txt.lower()))",
        "result": "failed: ",
        "average_distance": 15.0
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    return all((x < y for (x, y) in zip(lst, lst[1:]))) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 18.8
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = max(0, end - start + 1)\n    return 'YES' if is_prime(length) else 'NO'",
        "result": "failed: name 'n' is not defined",
        "average_distance": 36.23076923076923
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = sum((abs(x) for x in arr))\n    for num in arr:\n        product *= -1 if num < 0 else 1\n    return product * magnitude_sum",
        "result": "failed: ",
        "average_distance": 18.166666666666668
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    paths = []\n    for i in range(n * n):\n        for j in range(4):\n            (x, y) = (i // n + moves[j][0], i % n + moves[j][1])\n            if 0 <= x < n and 0 <= y < n:\n                path = [grid[x][y]]\n                (cx, cy) = (x, y)\n                for _ in range(k - 1):\n                    (nx, ny) = (cx + moves[_ % 4][0], cy + moves[_ % 4][1])\n                    if grid[nx][ny] != path[-1]:\n                        path.append(grid[nx][ny])\n                        (cx, cy) = (nx, ny)\n                paths.append(path)\n    return min(paths)",
        "result": "failed: ",
        "average_distance": 191.0
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    trib = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib[i] = 1 + i // 2\n        else:\n            trib[i] = trib[i - 1] + trib[i - 2] + trib[i + 1]\n    return trib[:n + 1]",
        "result": "failed: ",
        "average_distance": 51.30769230769231
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product",
        "result": "failed: ",
        "average_distance": 9.285714285714286
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 4.0
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((int(x) ** 2 for x in lst))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 3.875
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (not txt.strip().endswith(' '))",
        "result": "failed: ",
        "average_distance": 10.625
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: ",
        "average_distance": 2.25
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)",
        "result": "passed",
        "average_distance": 17.0
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    return None if a == b else max(a, b)",
        "result": "failed: ",
        "average_distance": 42.36363636363637
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    return any((sum(combo) == n for combo in combinations(range(2, n + 1, 2), 4)))",
        "result": "failed: name 'combinations' is not defined",
        "average_distance": 37.666666666666664
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= math.factorial(i)\n    return fact",
        "result": "failed: name 'math' is not defined",
        "average_distance": 9.090909090909092
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    return '_'.join(text.replace('  ', '-').split())",
        "result": "failed: This prints if this assert fails 2 (good for debugging!)",
        "average_distance": 17.142857142857142
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or (not parts[0].isalpha()):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "failed: name 're' is not defined",
        "average_distance": 53.666666666666664
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    return sum((x ** 3 if i % 4 == 0 and i % 3 != 0 else x ** 2 if i % 3 == 0 else x for (i, x) in enumerate(lst)))",
        "result": "passed",
        "average_distance": 3.5714285714285716
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7, 11]\n    return ' '.join((word for word in sentence.split() if len(word) in primes))",
        "result": "passed",
        "average_distance": 15.0625
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (a, b) = map(int, x.split('/'))\n    (c, d) = map(int, n.split('/'))\n    return a * d % b == 0",
        "result": "failed: test1",
        "average_distance": 9.266666666666667
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 14.5
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    return sum((1 for n in nums if n > 10 and str(n)[0] % 2 == 1 and (str(n)[-1] % 2 == 1)))",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 8.8
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 46.46153846153846
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    (idx1, idx2) = (planets.index(planet1), planets.index(planet2))\n    if idx1 > idx2:\n        (idx1, idx2) = (idx2, idx1)\n    return tuple(planets[idx1 + 1:idx2])",
        "result": "passed",
        "average_distance": 23.0
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([x for x in lst if len(x) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 4.125
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    return x if is_prime(n) else y",
        "result": "failed: ",
        "average_distance": 4.285714285714286
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 == 1)))",
        "result": "passed",
        "average_distance": 3.0833333333333335
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(a - b) for (a, b) in zip(game, guess)]",
        "result": "passed",
        "average_distance": 6.0
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: sum((c.isupper() - c.islower() for c in x)))\n    return f'{class_name}.{strongest}'",
        "result": "passed",
        "average_distance": 17.0
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    return any((b[i:] + b[:i] in a for i in range(len(b))))",
        "result": "passed",
        "average_distance": 6.0
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = sum((1 for digit in str(abs(num)) if int(digit) % 2 == 0))\n    count_odd = len(str(abs(num))) - count_even\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 10.222222222222221
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman = ''\n    for i in range(len(values)):\n        while num >= values[i]:\n            num -= values[i]\n            roman += symbols[i]\n    return roman.lower()",
        "result": "failed: local variable 'num' referenced before assignment",
        "average_distance": 26.692307692307693
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or a ** 2 + c ** 2 == b ** 2",
        "result": "passed",
        "average_distance": 4.0
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 22.25
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    eaten = min(need, number + remaining)\n    left = max(0, number + remaining - need)\n    return [eaten, left]",
        "result": "failed: Error",
        "average_distance": 8.142857142857142
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for (op, num) in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result",
        "result": "failed: ",
        "average_distance": 37.333333333333336
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    return ''.join((c.swapcase() if c.isalpha() else c for c in s[::-1] if not all((char.isalpha() for char in s)) or c.isalpha()))",
        "result": "failed: ",
        "average_distance": 23.7
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    return sorted([i for i in range(max(a, b), min(a, b) + 1) if i % 2 == 0])",
        "result": "failed: Test 1",
        "average_distance": 9.333333333333334
    }
}