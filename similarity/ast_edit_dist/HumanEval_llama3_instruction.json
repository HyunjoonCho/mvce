{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 9.444444444444445
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    group_stack = []\n    for char in paren_string:\n        if char == '(':\n            if not group_stack:\n                current_group += '('\n            group_stack.append('(')\n            current_group += '('\n        elif char == ')':\n            group_stack.pop()\n            current_group += ')'\n            if not group_stack:\n                result.append(current_group)\n                current_group = ''\n    return result",
        "result": "failed: ",
        "average_distance": 46.1875
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 1.6153846153846154
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 4.333333333333333
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum((abs(x - sum(numbers) / len(numbers)) for x in numbers)) / len(numbers)",
        "result": "passed",
        "average_distance": 4.631578947368421
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter])\n        result.append(numbers[i])",
        "result": "failed: list index out of range",
        "average_distance": 13.0625
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(1)\n        elif char == ')':\n            level = stack.pop()\n            result.append(level)\n    return result",
        "result": "failed: ",
        "average_distance": 15.818181818181818
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 2.7333333333333334
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    result = (sum(numbers), math.prod(numbers)) if numbers else (0, 1)",
        "result": "failed: ",
        "average_distance": 25.77777777777778
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)",
        "result": "failed: list index out of range",
        "average_distance": 6.2
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[::-1]",
        "result": "passed",
        "average_distance": 43.25
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for (char_a, char_b) in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'",
        "result": "failed: ",
        "average_distance": 35.8421052631579
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = 0\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result",
        "result": "passed",
        "average_distance": 15.466666666666667
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        (a, b) = (b, a % b)",
        "result": "failed: ",
        "average_distance": 6.142857142857143
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])",
        "result": "failed: ",
        "average_distance": 9.294117647058824
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    ' '.join(map(str, range(n + 1)))",
        "result": "failed: ",
        "average_distance": 7.470588235294118
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "result": "passed",
        "average_distance": 7.4375
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        return []\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 7\n        elif music_string[i:i + 2] == 'o|':\n            result.append(2)\n            i += 2\n        elif music_string[i:i + 3] == '.|':\n            result.append(1)\n            i += 3",
        "result": "failed: ",
        "average_distance": 66.58333333333333
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])",
        "result": "passed",
        "average_distance": 23.88888888888889
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    list_of_numbers = [int(num) for num in numbers.split() if num in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']]\n    return ' '.join(sorted(map(str, list_of_numbers)))",
        "result": "failed: invalid literal for int() with base 10: 'three'",
        "average_distance": 43.5
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair",
        "result": "failed: ",
        "average_distance": 12.428571428571429
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]",
        "result": "passed",
        "average_distance": 10.846153846153847
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 7.444444444444445
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1",
        "result": "failed: ",
        "average_distance": 8.214285714285714
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    result = []\n    i = 2\n    while n > 1:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        if count > 0:\n            result.extend([i] * count)\n        i += 1\n    return result",
        "result": "passed",
        "average_distance": 30.666666666666668
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "result": "passed",
        "average_distance": 11.0
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''.join(strings)",
        "result": "failed: ",
        "average_distance": 5.647058823529412
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 1.875
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [num for num in l if num > 0]",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 7.176470588235294
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError('xs must have an even number of coefficients')\n    root = -xs[1] / xs[3]\n    return round(root, 2)",
        "result": "failed: list index out of range",
        "average_distance": 29.705882352941178
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    result = []\n    for (i, x) in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted([y for y in l if i % 3 == 0])[0])\n        else:\n            result.append(x)\n    return result",
        "result": "failed: ",
        "average_distance": 26.055555555555557
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 5.545454545454546
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 16.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    result = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            result += str_i.count('7')",
        "result": "failed: ",
        "average_distance": 9.61111111111111
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    return [x if i % 2 == 0 else x for (i, x) in enumerate(l)]",
        "result": "failed: ",
        "average_distance": 30.058823529411764
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    result = ''\n    i = 0\n    while i < len(s):\n        group = s[i:i + 3]\n        if len(group) == 2:\n            result += group[1] + group[0]\n        else:\n            result += group\n        i += 3",
        "result": "failed: ",
        "average_distance": 74.46666666666667
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    a = 0\n    b = 1\n    result = 2\n    while True:\n        (a, b) = (b, a + b)\n        if len([i for i in range(2, int(b ** 0.5) + 1) if b % i == 0]) == 0:\n            return b",
        "result": "failed: ",
        "average_distance": 58.333333333333336
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 39.46153846153846
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    res = 0\n    for i in range(1, n):\n        res += min(i - 1, n - i)",
        "result": "failed: ",
        "average_distance": 35.42857142857143
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [i + 1 for i in l]",
        "result": "passed",
        "average_distance": 1.4
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)",
        "result": "failed: ",
        "average_distance": 7.466666666666667
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    if base == 1:\n        return str(x)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 29.0625
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 2.5
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(n):\n        (a, b, c, d) = (b, c, d, b + c + d)\n    return d",
        "result": "failed: ",
        "average_distance": 19.384615384615383
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        midpoint = n // 2\n        return (sorted_l[midpoint - 1] + sorted_l[midpoint]) / 2",
        "result": "passed",
        "average_distance": 23.823529411764707
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    text = text.lower()\n    return text == ''.join(reversed(text))",
        "result": "passed",
        "average_distance": 13.529411764705882
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "result": "passed",
        "average_distance": 10.066666666666666
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 6.611111111111111
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    return ''.join([char for char in text if not set('aeiouAEIOU').intersection({char})])",
        "result": "passed",
        "average_distance": 9.294117647058824
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    all((x < t for x in l))",
        "result": "failed: ",
        "average_distance": 0.05555555555555555
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 3.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b",
        "result": "passed",
        "average_distance": 9.125
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack",
        "result": "passed",
        "average_distance": 7.833333333333333
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    for i in range(1, len(l)):\n        if (l[i] > l[i - 1]) != (l[i - 1] < l[0]):\n            return False\n    return True",
        "result": "failed: ",
        "average_distance": 42.23076923076923
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 8.153846153846153
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        while n % i:\n            i += 1\n        n //= i\n    return i",
        "result": "failed: ",
        "average_distance": 14.8
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, n + 1):\n        result += i",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack",
        "result": "passed",
        "average_distance": 9.1875
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]",
        "result": "failed: ",
        "average_distance": 20.9375
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n <= 2:\n        return 0\n    (a, b) = (0, 1)\n    for _ in range(3, n + 1):\n        (a, b) = (b, a + b)\n    return b",
        "result": "failed: ",
        "average_distance": 13.875
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy' and (char == 'y' or not s.endswith('y')):\n            count += 1",
        "result": "failed: Test 1",
        "average_distance": 24.2
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    result = str(x)\n    if shift >= len(result):\n        return result[::-1]\n    else:\n        return result[-shift:] + result[:-shift]",
        "result": "failed: ",
        "average_distance": 29.5
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)",
        "result": "failed: Error",
        "average_distance": 12.736842105263158
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    return n - int(s.split()[4].split()[0]) - int(s.split()[2].split()[1])",
        "result": "failed: invalid literal for int() with base 10: 'oranges'",
        "average_distance": 50.0
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    min_even = float('inf')\n    min_idx = -1\n    for (i, x) in enumerate(arr):\n        if x % 2 == 0 and x < min_even:\n            min_even = x\n            min_idx = i\n    return [min_even, min_idx] if min_even != float('inf') else []",
        "result": "passed",
        "average_distance": 28.875
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > 0:\n            max_num = num\n            break\n    return max_num",
        "result": "failed: ",
        "average_distance": 31.789473684210527
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            result.append(max_val)\n            lst.remove(max_val)",
        "result": "failed: ",
        "average_distance": 38.388888888888886
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1",
        "result": "passed",
        "average_distance": 18.4375
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return len(q) == len(str(q)) and sum(q) <= w",
        "result": "failed: ",
        "average_distance": 13.055555555555555
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    arr = sorted(arr)\n    (i, j) = (0, len(arr) - 1)\n    changes = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1",
        "result": "failed: ",
        "average_distance": 55.333333333333336
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    if sum((len(s) for s in lst1)) <= sum((len(s) for s in lst2)):\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "average_distance": 31.142857142857142
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            p1 = i\n            while a % p1 == 0:\n                p1 += 1\n            for j in range(p1, int((a // p1) ** 0.5) + 1):\n                if a // p1 % j == 0:\n                    p2 = j\n                    while a // p1 % p2 == 0:\n                        p2 += 1\n                    for k in range(p2, int((a // p1 // p2) ** 0.5) + 1):\n                        if a // p1 // p2 % k == 0:\n                            p3 = k\n                            while a // p1 // p2 % p3 == 0:\n                                p3 += 1\n                            return p1 * p2 * p3 == a",
        "result": "failed: ",
        "average_distance": 133.0
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    if x == n ** int(math.log(x, n)):\n        return True\n    else:\n        return False",
        "result": "failed: name 'math' is not defined",
        "average_distance": 22.2
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    c = int(a ** (1.0 / 3))\n    return c * c * c == a",
        "result": "failed: can't convert complex to int",
        "average_distance": 7.071428571428571
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit.upper() in prime_hex:\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 45.333333333333336
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + '1' * len(binary) + 'db'",
        "result": "failed: ",
        "average_distance": 21.38888888888889
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set((s[i:i + 3] for i in range(0, len(s), 3)))) == 3",
        "result": "failed: abcd",
        "average_distance": 27.944444444444443
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    if len(grades) == 0:\n        return []\n    result = []\n    for gpa in grades:\n        if gpa > 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')",
        "result": "failed: ",
        "average_distance": 107.41666666666667
    },
    "HumanEval/82": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    total = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            total += 1",
        "result": "failed: ",
        "average_distance": 23.866666666666667
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    result = ''\n    while N > 0:\n        result = str(N % 2) + result\n        N //= 2",
        "result": "failed: Error",
        "average_distance": 24.266666666666666
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    result = sum((i for i in lst[1::2] if i % 2 == 0))",
        "result": "failed: ",
        "average_distance": 9.375
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    return ' '.join((''.join(sorted(word)) for word in s.split()))",
        "result": "passed",
        "average_distance": 13.647058823529411
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    for (i, row) in enumerate(lst):\n        for (j, x_val) in reversed(list(enumerate(row))):\n            if x_val == x:\n                yield (i, j)",
        "result": "failed: ",
        "average_distance": 34.23529411764706
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if sum(array[0], array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array)[::-1]",
        "result": "failed: list index out of range",
        "average_distance": 9.875
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encrypted_char = chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 26.647058823529413
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]",
        "result": "failed: ",
        "average_distance": 18.333333333333332
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    for sentence in S.split('. ') + [S]:\n        if sentence.strip().startswith('I'):\n            yield 1",
        "result": "failed: Test 1",
        "average_distance": 25.857142857142858
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or x == y - z or x == z - y)",
        "result": "passed",
        "average_distance": 25.142857142857142
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 136.1875
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num > 1 and all((num % i != 0 for i in range(2, num))):\n            max_prime = num\n            break\n    return sum((int(digit) for digit in str(max_prime)))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 25.666666666666668
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    all_lower = all((isinstance(key, str) and key.islower() for key in dict))\n    all_upper = all((isinstance(key, str) and key.isupper() for key in dict))\n    return all_lower or all_upper if dict else False",
        "result": "passed",
        "average_distance": 33.625
    },
    "HumanEval/96": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    return a % 10 * (b % 10)",
        "result": "passed",
        "average_distance": 8.294117647058824
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    for (i, c) in enumerate(s):\n        if i % 2 == 0 and c.upper() in 'AEIO':\n            yield 1\n    yield 0",
        "result": "failed: ",
        "average_distance": 21.214285714285715
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    value = float(value)\n    if abs(int(value) - value) < abs(int(round(value)) - value):\n        return round(value)\n    else:\n        return int(round(value))",
        "result": "failed: Test 2",
        "average_distance": 35.142857142857146
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    result = []\n    i = 1\n    while len(result) < n:\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i + 1)\n        i += 1",
        "result": "failed: Test 3",
        "average_distance": 42.23076923076923
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]",
        "result": "passed",
        "average_distance": 6.8125
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return min(x, y)\n    else:\n        for i in range(max(x, y), min(x, y), -1):\n            if i % 2 == 0:\n                return i\n        return -1",
        "result": "failed: ",
        "average_distance": 30.166666666666668
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]",
        "result": "failed: ",
        "average_distance": 12.11111111111111
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted([i for i in x if not any((int(d) % 2 == 0 for d in str(i)))])",
        "result": "passed",
        "average_distance": 9.875
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = [names[i - 1] for i in sorted([i for i in arr if 1 <= i <= 9], reverse=True)]",
        "result": "failed: Error",
        "average_distance": 43.30769230769231
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))",
        "result": "failed: name 'math' is not defined",
        "average_distance": 17.428571428571427
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    result = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                result[0] += 1\n            else:\n                result[1] += 1",
        "result": "failed: ",
        "average_distance": 44.0
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for num in arr if sum((int(digit) if digit > '0' else -int(digit[1:]) for digit in str(abs(num)))) > 0))",
        "result": "failed: invalid literal for int() with base 10: ''",
        "average_distance": 18.666666666666668
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    if len(arr) == 0 or all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1))):\n        return True\n    else:\n        return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 24.5
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    if not all((num % 2 == 0 for num in lst1)):\n        return 'NO' if any((num % 2 != 0 for num in lst2)) else 'YES'",
        "result": "failed: ",
        "average_distance": 24.571428571428573
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    from collections import Counter\n    counts = Counter(test.split())\n    max_count = max(counts.values())\n    result = {k: v for (k, v) in counts.items() if v == max_count}\n    return result",
        "result": "failed: max() arg is an empty sequence",
        "average_distance": 35.529411764705884
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "average_distance": 14.444444444444445
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    result = []\n    for (i, s) in enumerate(lst):\n        count = sum((1 for c in s if int(c) % 2))\n        result.append(f'the number of odd elements {count}n the str{str(i)}ng {str(i)} of the {str(i)}nput.')",
        "result": "failed: Test 1",
        "average_distance": 37.666666666666664
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    total = float('inf')\n    current = 0\n    for num in nums:\n        current += num\n        if current < total:\n            total = current\n        if current < 0:\n            current = 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 28.4
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    max_fill_time = math.ceil(total_water / capacity)\n    return max_fill_time",
        "result": "failed: Error",
        "average_distance": 29.857142857142858
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))",
        "result": "failed: ",
        "average_distance": 0.7368421052631579
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    result = []\n    words = s.split()\n    for word in words:\n        consonants = sum((1 for char in word if not char.isalpha() or char.lower() not in 'aeiou'))\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 33.4
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in 'aeiouAEIOU':\n            for j in range(i + 1, len(word)):\n                if word[j] in 'aeiouAEIOU':\n                    return word[j]\n    return ''",
        "result": "failed: ",
        "average_distance": 37.666666666666664
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    stack = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack += 1\n            elif c == ')':\n                if stack == 0:\n                    return 'No'\n                stack -= 1\n    return 'Yes' if stack == 0 else 'No'",
        "result": "failed: ",
        "average_distance": 25.666666666666668
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(set(arr), reverse=True)[:k]",
        "result": "failed: ",
        "average_distance": 9.636363636363637
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    total_sum = 0\n    for (i, num) in enumerate(lst):\n        if i % 2 == 1 and num % 2 != 0:\n            total_sum += num",
        "result": "failed: ",
        "average_distance": 20.22222222222222
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    result = sum((x for x in arr[:k] if 10 > abs(x) >= 1))",
        "result": "failed: ",
        "average_distance": 14.631578947368421
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_seq = []\n    for num in seq:\n        if num % 2 != 0:\n            odd_seq.append(num)\n    return sorted(odd_seq)",
        "result": "failed: ",
        "average_distance": 36.55555555555556
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date:\n        return False\n    (day, month, year) = map(int, date.split('-'))\n    if not 1 <= month <= 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12) and (not 1 <= day <= 31):\n        return False\n    if month in (4, 6, 9, 11) and (not 1 <= day <= 30):\n        return False\n    if month == 2 and (not 1 <= day <= 29):\n        return False\n    return True",
        "result": "failed: ",
        "average_distance": 73.66666666666667
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    words = txt.split()\n    result = []\n    for word in words:\n        if ',' in word:\n            result.append(word)\n        else:\n            odd_count = 0\n            for char in word.lower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n            return odd_count",
        "result": "failed: ",
        "average_distance": 57.375
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            if len(set(lst)) != len(lst):\n                return False\n            break\n    return True",
        "result": "failed: ",
        "average_distance": 24.22222222222222
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return 'NO'\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length < 2:\n        return 'YES'\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return 'NO'\n    return 'YES'",
        "result": "failed: ",
        "average_distance": 37.75
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs_product = 1\n    for num in arr:\n        if num > 0:\n            signs_product *= 1\n        elif num < 0:\n            signs_product *= -1\n    return sum((abs(num) * signs_product for num in arr))",
        "result": "failed: ",
        "average_distance": 25.25
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                path = [grid[i][j]]\n                dfs(grid, i, j, k - 1, set(), path)\n                return path\n    n = len(grid)\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in visited):\n                path.append(grid[nx][ny])\n                visited.add((nx, ny))\n                if k > 0:\n                    dfs(grid, nx, ny, k - 1, visited, path)\n                else:\n                    return\n    return",
        "result": "failed: name 'dfs' is not defined",
        "average_distance": 166.375
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    elif n == 2:\n        return [3, 2, 2]\n    else:\n        trib = [3, 2, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(int(i / 2) + 1)\n            else:\n                trib.append(sum(trib[-3:]) + 1)\n        return trib",
        "result": "failed: ",
        "average_distance": 59.266666666666666
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result",
        "result": "failed: ",
        "average_distance": 6.555555555555555
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 15.214285714285714
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((ceil(x) ** 2 for x in lst))",
        "result": "failed: name 'ceil' is not defined",
        "average_distance": 8.705882352941176
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    return txt and (not txt[-1].isalnum())",
        "result": "failed: ",
        "average_distance": 12.0
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1",
        "result": "failed: ",
        "average_distance": 6.2
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    max_negative = min(max((i for i in lst if i < 0)), default=None)\n    min_positive = min((i for i in lst if i > 0), default=None)\n    return (max_negative, min_positive)",
        "result": "failed: max() arg is an empty sequence",
        "average_distance": 39.4
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "result": "failed: ",
        "average_distance": 47.5
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    for i in range(2, n + 1, 2):\n        total = 0\n        for j in range(1, 5):\n            if total + i <= n:\n                total += i\n                if total == n:\n                    return True\n    return False",
        "result": "failed: ",
        "average_distance": 45.84615384615385
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    if n < 1:\n        return 0\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)",
        "result": "failed: name 'math' is not defined",
        "average_distance": 9.3125
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    return text.replace(' ', '_') if '  ' not in text else text.replace(' +', '-').replace('  ', '-')",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "average_distance": 39.05555555555556
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if '.' not in file_name or file_name.split('.')[0].strip().isalpha() == False or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "failed: ",
        "average_distance": 59.75
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    result = sum((i ** (3 if i % 12 == 0 else 4 if i % 4 == 0 and i % 3 != 0 else 1) for i in lst))",
        "result": "failed: ",
        "average_distance": 27.473684210526315
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    result = []\n    words = sentence.split()\n    for word in words:\n        if all((c.isalpha() for c in word)):\n            if is_prime(len(word)):\n                result.append(word)\n    return ' '.join(result)",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 40.333333333333336
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x).limit_denominator() == Fraction(n).limit_denominator()",
        "result": "failed: test1",
        "average_distance": 29.733333333333334
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    nums.sort(key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: 1 is not in list",
        "average_distance": 14.866666666666667
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[-1] % 2 != 0 and (str(abs(num))[0] % 2 != 0):\n            result += 1",
        "result": "failed: ",
        "average_distance": 28.11111111111111
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    result = sum((1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if i * i - i + 1 + (j * j - j + 1) + (k * k - k + 1) % 3 == 0))",
        "result": "failed: ",
        "average_distance": 40.833333333333336
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    if planet1 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] or planet2 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return ()\n    planets = {'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4, 'Jupiter': 5, 'Saturn': 6, 'Uranus': 7, 'Neptune': 8}\n    result = []\n    for planet in sorted([planet1, planet2]):\n        if planets[planet] > planets[planet1] and planets[planet] < planets[planet2]:\n            result.append(planet)\n    return tuple(sorted(result))",
        "result": "failed: First test error: 0",
        "average_distance": 74.86666666666666
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([x for x in set(lst) if len(x) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 13.916666666666666
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n > 1:\n        for p in range(2, int(n ** 0.5) + 1):\n            if n % p == 0:\n                return y\n        return x",
        "result": "failed: ",
        "average_distance": 1.1
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    sum((i ** 2 for i in (x for x in lst if isinstance(x, int) and x >= 0)))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 7.176470588235294
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(score - guess) if score != guess else 0 for (score, guess) in zip(game, guesses)]",
        "result": "failed: name 'guesses' is not defined",
        "average_distance": 11.75
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda extension: len([c for c in extension if c.isupper]) - len([c for c in extension if c.islower]))\n    return f'{class_name}.{strongest}'",
        "result": "failed: ",
        "average_distance": 46.35294117647059
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    if b in a or any((b[i:] + b[:i] in a for i in range(len(b)))):\n        return True\n    return False",
        "result": "passed",
        "average_distance": 16.857142857142858
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 22.789473684210527
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return ''\n    roman = ''\n    thousand = number // 1000\n    if thousand:\n        roman += 'm' * thousand\n        number %= 1000\n    hundred = number // 100\n    if hundred:\n        roman += 'c' * (hundred - 1) + 'd' * (hundred % 10)\n        number %= 100\n    ten = number // 10\n    if ten:\n        roman += {9: 'ix', 8: 'viii', 7: 'vii', 6: 'vi', 5: 'v', 4: 'iv', 3: 'iii', 2: 'ii', 1: 'i'}.get(ten - 1, str(ten) + 'x' * (ten // 10))\n        number %= 10\n    if number:\n        roman += {8: 'viii', 7: 'vii', 6: 'vi', 5: 'v', 4: 'iv', 3: 'iii', 2: 'ii', 1: 'i'}.get(number, str(number))\n    return roman.lower()",
        "result": "failed: ",
        "average_distance": 154.71428571428572
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or c ** 2 + a ** 2 == b ** 2",
        "result": "passed",
        "average_distance": 13.8
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_word = None\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n    return max_word",
        "result": "passed",
        "average_distance": 25.727272727272727
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    total = number + min(need - number, remaining)\n    return [total, remaining - (total - number)]",
        "result": "failed: Error",
        "average_distance": 13.6
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError('Invalid input')\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i]\n        expression += str(operand[i + 1])\n    result = eval(expression)\n    return result",
        "result": "passed",
        "average_distance": 86.08333333333333
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result if any((c.isalpha() for c in s)) else s[::-1]",
        "result": "passed",
        "average_distance": 10.368421052631579
    },
    "HumanEval/162": {
        "code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()",
        "result": "passed",
        "average_distance": 8.727272727272727
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    result = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if str(i).isdigit() and int(str(i)) % 2 == 0:\n            result.append(i)",
        "result": "failed: Test 1",
        "average_distance": 32.421052631578945
    }
}