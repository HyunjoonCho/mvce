{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(1 + i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 0.5294117647058824
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    groups = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                groups.append(current_group)\n                current_group = ''\n    return groups",
        "result": "passed",
        "average_distance": 35.76470588235294
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 3.210526315789474
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum((abs(num - sum(numbers) / len(numbers)) for num in numbers)) / len(numbers)",
        "result": "passed",
        "average_distance": 8.444444444444445
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n    return result",
        "result": "failed: list index out of range",
        "average_distance": 18.058823529411764
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        nesting_level = 0\n        for char in group:\n            if char == '(':\n                nesting_level += 1\n            elif char == ')':\n                nesting_level -= 1\n        result.append(nesting_level)\n    return result",
        "result": "failed: ",
        "average_distance": 30.46153846153846
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.9473684210526315
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    result_sum = 0\n    result_product = 1\n    for num in numbers:\n        result_sum += num\n        result_product *= num\n    return (result_sum, result_product)",
        "result": "passed",
        "average_distance": 9.588235294117647
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = [max(numbers[:1 + i]) for i in range(len(numbers))]",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    prefix = string\n    while not is_palindrome(prefix):\n        prefix = string[::-1]\n    return prefix + prefix[::-1]",
        "result": "failed: ",
        "average_distance": 30.666666666666668
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for (char_a, char_b) in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result",
        "result": "passed",
        "average_distance": 31.72222222222222
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = 0\n    result = ''\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result",
        "result": "passed",
        "average_distance": 12.0625
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        (a, b) = (b, a % b)\n    return a",
        "result": "passed",
        "average_distance": 3.0
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = [string]\n    for i in range(1, len(string)):\n        result.append(string[:i])",
        "result": "failed: ",
        "average_distance": 14.625
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(1 + n)))",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 5\n        elif music_string[i:2 + i] == 'o|':\n            result.append(2)\n            i += 3\n        elif music_string[i:3 + i] == '.|':\n            result.append(1)\n            i += 3",
        "result": "failed: ",
        "average_distance": 36.375
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)",
        "result": "failed: ",
        "average_distance": 24.105263157894736
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted([num for num in numbers.split() if num in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']]))",
        "result": "failed: ",
        "average_distance": 34.0
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(1 + i, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair",
        "result": "failed: ",
        "average_distance": 14.352941176470589
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 4.823529411764706
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 6.4
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.extend([i] * count)\n    if n > 1:\n        factors.append(n)",
        "result": "failed: ",
        "average_distance": 22.0
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    return ''.join((c.upper() if c.islower() else c.lower() for c in string))",
        "result": "passed",
        "average_distance": 4.052631578947368
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 0.17647058823529413
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.9473684210526315
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [x for x in l if x > 0]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 13.833333333333334
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return -xs[0] / xs[-1]",
        "result": "failed: ",
        "average_distance": 29.25
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0])[j] for (j, x) in enumerate(l)]",
        "result": "failed: name 'i' is not defined",
        "average_distance": 29.72222222222222
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 0.6
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')\n    return count",
        "result": "passed",
        "average_distance": 10.083333333333334
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    return [x if i % 2 != 0 else sorted([y for y in l if 2 * (i // 2) == j])[0] for (i, x) in enumerate(l)]",
        "result": "failed: name 'j' is not defined",
        "average_distance": 28.5
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 + 3 * i, len(s))] for i in range((2 + len(s)) // 3)]\n    groups = [group[0] + group[1:] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[i:3 + i] for i in range(0, len(s), 3)]\n    decoded_groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(decoded_groups)",
        "result": "passed",
        "average_distance": 86.25
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    (a, b) = (2, 3)\n    for _ in range(n - 1):\n        if is_prime(b):\n            return b\n        (a, b) = (b, a + b)\n    return None",
        "result": "failed: ",
        "average_distance": 31.615384615384617
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(1 + i, len(l)):\n            for k in range(1 + j, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 37.75
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    return n * (n - 1)",
        "result": "failed: ",
        "average_distance": 10.764705882352942
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [1 + x for x in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 5.421052631578948
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError('Base must be between 2 and 9')\n    convert_string = '012345678'\n    result = ''\n    while x:\n        result = convert_string[x % base] + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 24.384615384615383
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return 0.5 * a * h",
        "result": "passed",
        "average_distance": 1.2105263157894737
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    (a, b, c) = (0, 0, 2)\n    for _ in range(3, n):\n        (a, b, c) = (b, c, a + b + c)\n    return c",
        "result": "failed: ",
        "average_distance": 26.8
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2",
        "result": "passed",
        "average_distance": 13.333333333333334
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text.lower() == ''.join(reversed(text)).lower()",
        "result": "passed",
        "average_distance": 4.944444444444445
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "result": "passed",
        "average_distance": 3.4444444444444446
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((5 + ord(ch) - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) if ch.isalpha() else ch for ch in s])",
        "result": "passed",
        "average_distance": 3.8947368421052633
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    return ''.join((char for char in text if not char.lower() in 'aeiou'))",
        "result": "passed",
        "average_distance": 10.052631578947368
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    all((x < t for x in l))",
        "result": "failed: ",
        "average_distance": 0.3333333333333333
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    if n <= 1:\n        return n\n    (a, b) = (0, 1)\n    for _ in range(2, 1 + n):\n        (a, b) = (b, a + b)\n    return b",
        "result": "passed",
        "average_distance": 5.545454545454546
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack",
        "result": "passed",
        "average_distance": 9.5
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    return l == sorted(l) or l == sorted(l, reverse=True)",
        "result": "passed",
        "average_distance": 32.0
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 3.736842105263158
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            while n % i == 0:\n                n //= i\n            i += 1\n    return n",
        "result": "failed: ",
        "average_distance": 9.875
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, 1 + n):\n        result += i",
        "result": "failed: ",
        "average_distance": 4.117647058823529
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack",
        "result": "passed",
        "average_distance": 16.176470588235293
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * xs[1 + i] for i in range(len(xs) - 1)]",
        "result": "failed: ",
        "average_distance": 9.647058823529411
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        (a, b, c) = (0, 0, 1)\n        for _ in range(3, 1 + n):\n            (a, b, c) = (b, c, b + c)\n        return c",
        "result": "failed: ",
        "average_distance": 10.75
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy' and (char == 'y' or not s.endswith(char)):\n            count += 1\n    return count",
        "result": "failed: Test 1",
        "average_distance": 15.5
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    result = str(x)[::-1]\n    shift %= len(result)\n    return result[-shift:] + result[:-shift]",
        "result": "failed: ",
        "average_distance": 27.263157894736842
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 7.647058823529412
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    return n + s.count('mango') - (s.count('apples') + s.count('oranges'))",
        "result": "failed: ",
        "average_distance": 30.647058823529413
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    even_nodes = [(node, i) for (i, node) in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes)\n    return [smallest_even_node[0], smallest_even_node[1]]",
        "result": "passed",
        "average_distance": 25.470588235294116
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num not in frequency:\n            frequency[num] = 0\n        frequency[num] += 1\n    max_num = -1\n    for (num, count) in frequency.items():\n        if num > 0 and count >= num:\n            max_num = num\n            break\n    return max_num",
        "result": "failed: ",
        "average_distance": 18.94736842105263
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.extend([min_val, max_val])\n        lst.remove(min_val)\n        lst.remove(max_val)",
        "result": "failed: ",
        "average_distance": 40.23529411764706
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    from math import sqrt, pi\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    if area.is_integer():\n        return round(area)\n    else:\n        return -1",
        "result": "failed: math domain error",
        "average_distance": 45.86666666666667
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return len(q) == len(str(q)) and sum(q) <= w",
        "result": "failed: ",
        "average_distance": 10.947368421052632
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            arr[right] = arr[left]\n            changes += 1\n        else:\n            left += 1\n            right -= 1",
        "result": "failed: ",
        "average_distance": 58.1875
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    if sum((len(i) for i in lst1)) <= sum((len(i) for i in lst2)):\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "average_distance": 21.6
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    for i in range(2, 1 + int(a ** 0.5)):\n        if a % i == 0:\n            prime_factors = set()\n            while a > 1:\n                if a % i == 0:\n                    prime_factors.add(i)\n                    a //= i\n                elif i < 10:\n                    break\n                else:\n                    i += 1\n            if len(prime_factors) == 3:\n                return True\n    return False",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return n ** int(math.log(x, n)) == x",
        "result": "failed: name 'math' is not defined",
        "average_distance": 3.3684210526315788
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    c = round(a ** (1.0 / 3))\n    return c ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "average_distance": 13.5
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    prime_hex = {'B': '11', 'D': '13', '7': '7'}\n    primes_count = 0\n    for hex_digit in num:\n        if hex_digit.upper() in prime_hex:\n            primes_count += 1\n    return primes_count",
        "result": "failed: Third test error: 2",
        "average_distance": 27.529411764705884
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    return 'db' + ('db' + bin(decimal)[2:])",
        "result": "passed",
        "average_distance": 10.466666666666667
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set((s[i:3 + i] for i in range(0, len(s), 3)))) == 3",
        "result": "failed: abcd",
        "average_distance": 12.529411764705882
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: ",
        "average_distance": 38.6
    },
    "HumanEval/82": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 5.2
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(x) for x in str(bin(N)[2:]))))",
        "result": "failed: Error",
        "average_distance": 11.055555555555555
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    result = sum((i for i in lst[1::2] if i % 2 == 0))",
        "result": "failed: ",
        "average_distance": 13.0
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    return ' '.join((''.join(sorted(word)) for word in s.split()))",
        "result": "passed",
        "average_distance": 15.538461538461538
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    result = [(i, j) for (i, row) in enumerate(lst) if x in row for j in range(len(row))[::-1] if row[j] == x]",
        "result": "failed: ",
        "average_distance": 27.833333333333332
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if sum(array[0], array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array)[::-1]",
        "result": "failed: list index out of range",
        "average_distance": 12.842105263157896
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s.lower():\n        if char.isalpha():\n            index = (2 * 8 + alphabet.index(char)) % 26\n            result += alphabet[index]\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 28.666666666666668
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]",
        "result": "passed",
        "average_distance": 22.25
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    sentences = S.split('.!?')\n    boredoms = sum((1 for sentence in sentences if sentence.strip().startswith('I')))\n    return boredoms",
        "result": "failed: Test 2",
        "average_distance": 21.2
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or x == y + z or y == x + z)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 29.214285714285715
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((1 + (ord(char) - 65)) % 26 + 65)\n            else:\n                result += chr((3 + (ord(char) - 97)) % 26 + 97)\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 48.63636363636363
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    max_prime = max((i for i in lst if all((i % j for j in range(2, 1 + int(i ** 0.5))))))\n    return sum((int(digit) for digit in str(max_prime)))",
        "result": "passed",
        "average_distance": 27.0
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all((isinstance(k, str) and k.islower() for k in dict))\n    all_upper = all((isinstance(k, str) and k.isupper() for k in dict))\n    return all_lower or all_upper",
        "result": "passed",
        "average_distance": 14.444444444444445
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    result = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, 1 + int(i ** 0.5)):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)",
        "result": "failed: ",
        "average_distance": 1.75
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    return a % 10 * (b % 10)",
        "result": "passed",
        "average_distance": 3.1176470588235294
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    return sum((1 for c in s if c.upper() in 'AEIO' and index % 2 == 0))",
        "result": "failed: name 'index' is not defined",
        "average_distance": 20.0
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    from math import floor, ceil\n    num = float(value)\n    if num == int(num):\n        return int(num)\n    elif num > 0:\n        return ceil(num)\n    else:\n        return floor(num)",
        "result": "failed: Test 3",
        "average_distance": 34.76923076923077
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    result = []\n    i = n\n    while len(result) < n:\n        if i % 2 == 0:\n            result.append(i)\n            i += 1\n        else:\n            result.append(i)\n            i += 2\n    return result",
        "result": "failed: Test 4",
        "average_distance": 28.5625
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return [word.strip().lower() for word in s.replace(',', ' ').split()]",
        "result": "failed: ",
        "average_distance": 5.368421052631579
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return min(x, y)\n    else:\n        for i in range(max(x, y), x - 1, -1):\n            if i % 2 == 0:\n                return i\n        return -1",
        "result": "failed: ",
        "average_distance": 23.5
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    result = round(avg)\n    return bin(result)[2:]",
        "result": "failed: ",
        "average_distance": 14.0
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted([n for n in x if not any((int(digit) % 2 == 0 for digit in str(n)))])",
        "result": "passed",
        "average_distance": 3.5
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    result = sorted([i for i in arr if 1 <= i <= 9])\n    result.reverse()\n    return [names[i - 1] for i in result]",
        "result": "failed: name 'names' is not defined",
        "average_distance": 43.0
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for i in range(1, 1 + n):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, 1 + i)))\n    return result",
        "result": "failed: name 'math' is not defined",
        "average_distance": 11.384615384615385
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even = sum((1 for i in range(1, 1 + n) if str(i) == str(i)[::-1] and i % 2 == 0))\n    odd = sum((1 for i in range(1, 1 + n) if str(i) == str(i)[::-1] and i % 2 != 0))\n    return (even, odd)",
        "result": "passed",
        "average_distance": 20.916666666666668
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for num in arr if sum((int(digit) if digit != '-' else -int(digit[1:]) for digit in str(abs(num)))) > 0))",
        "result": "failed: ",
        "average_distance": 6.444444444444445
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    if len(arr) == 0 or all((arr[i] <= arr[1 + i] for i in range(len(arr) - 1))):\n        return True\n    else:\n        return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 28.11111111111111
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    even_count = sum((1 for x in lst1 if x % 2 == 0))\n    odd_count = len(lst1) - even_count\n    return 'YES' if any((x % 2 != 0 for x in lst2[:odd_count])) else 'NO'",
        "result": "failed: ",
        "average_distance": 25.055555555555557
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    from collections import Counter\n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    most_common = {letter: count for (letter, count) in letter_counts.items() if count == max_count}\n    return most_common",
        "result": "failed: max() arg is an empty sequence",
        "average_distance": 20.263157894736842
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "average_distance": 22.0
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum((1 for d in s if int(d) % 2)), i, i, 'in' if i == 0 else '') for (i, s) in enumerate(lst)]",
        "result": "failed: Test 1",
        "average_distance": 35.529411764705884
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    left = curr_sum = 0\n    for right in range(len(nums)):\n        curr_sum += nums[right]\n        while curr_sum > min_sum:\n            curr_sum -= nums[left]\n            left += 1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 32.473684210526315
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    num_buckets = math.ceil(total_water / capacity)\n    return num_buckets",
        "result": "failed: Error",
        "average_distance": 27.94736842105263
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))",
        "result": "failed: ",
        "average_distance": 0.9473684210526315
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    result = []\n    words = s.split()\n    for word in words:\n        consonants = sum((1 for char in word if not char.isalpha() or char.lower() not in 'aeiou'))\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 33.529411764705884
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in 'aeiouAEIOU':\n            for j in range(1 + i, len(word)):\n                if not word[j].lower() in 'aeiou':\n                    return word[i]\n    return ''",
        "result": "failed: ",
        "average_distance": 45.470588235294116
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                else:\n                    stack.pop()\n    return 'Yes' if not stack else 'No'",
        "result": "failed: ",
        "average_distance": 29.705882352941178
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(set(arr), reverse=True)[:k]",
        "result": "failed: ",
        "average_distance": 24.125
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    result = 0\n    for (i, num) in enumerate(lst):\n        if i % 2 == 1 and num % 2 != 0:\n            result += num",
        "result": "failed: ",
        "average_distance": 14.5625
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    result = sum((x for x in arr[:k] if 10 > abs(x) >= 1))",
        "result": "failed: ",
        "average_distance": 20.555555555555557
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 1 + 3 * n\n        if n % 2 != 0:\n            sequence.append(n)\n    return sorted(set(sequence))",
        "result": "failed: ",
        "average_distance": 24.384615384615383
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date:\n        return False\n    (month, day, year) = date.split('-')\n    month = int(month)\n    day = int(day)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31 or (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):\n        return False",
        "result": "failed: ",
        "average_distance": 85.4
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for c in txt.lower() if ord(c) % 2 != 0))",
        "result": "failed: ",
        "average_distance": 47.72222222222222
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[1 + i]:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 27.63157894736842
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = 1 + (end - start)\n        for p in range(2, 1 + int(length ** 0.5)):\n            if length % p == 0:\n                return 'NO'\n        return 'YES'\n    else:\n        return 'NO'",
        "result": "failed: ",
        "average_distance": 37.166666666666664
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    product_sign = 1 if arr else None\n    total_sum = sum((abs(x) for x in arr))\n    return product_sign * total_sum if product_sign is not None else None",
        "result": "failed: ",
        "average_distance": 35.57142857142857
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if len(res) < k:\n                res.append(grid[i][j])\n            else:\n                for (di, dj) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (ni, nj) = (di + i, dj + j)\n                    if 0 <= ni < n and 0 <= nj < n and (grid[ni][nj] not in res[-k:]):\n                        res.append(grid[ni][nj])\n                        break",
        "result": "failed: ",
        "average_distance": 151.22222222222223
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, 1 + n):\n            if i % 2 == 0:\n                next_term = 1 + i / 2\n            else:\n                next_term = sum(sequence[-2:])\n            sequence.append(next_term)\n        return sequence",
        "result": "failed: ",
        "average_distance": 45.57142857142857
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result",
        "result": "failed: ",
        "average_distance": 2.111111111111111
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 10.9
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((math.ceil(i) ** 2 for i in lst))",
        "result": "failed: name 'math' is not defined",
        "average_distance": 1.631578947368421
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (not txt.rstrip().endswith(txt))",
        "result": "failed: ",
        "average_distance": 19.166666666666668
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i - 1] >= arr[i]:\n            return i - 1\n    return -1",
        "result": "failed: ",
        "average_distance": 8.666666666666666
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)",
        "result": "passed",
        "average_distance": 21.470588235294116
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, (int, float)):\n        a = float(a.replace(',', '.'))\n    elif isinstance(b, str) and isinstance(a, (int, float)):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "result": "failed: ",
        "average_distance": 41.0
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    for i in range(2, 1 + n, 2):\n        even_sum = sum((j for j in range(i, 1 + n, 2)))\n        if even_sum == n:\n            return True\n    return False",
        "result": "failed: ",
        "average_distance": 49.38461538461539
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    if n < 1:\n        raise ValueError('n must be greater than zero')\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined",
        "average_distance": 14.0
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    return text.replace(' ', '_').replace('  ', '_ ').replace('   ', '_- ')",
        "result": "failed: This prints if this assert fails 4 (good for debugging!)",
        "average_distance": 30.444444444444443
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if '.' not in file_name or file_name.count('.') != 1:\n        return 'No'\n    (name, extension) = file_name.split('.')\n    if not name[0].isalpha():\n        return 'No'\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if extension not in allowed_extensions:\n        return 'No'\n    return 'Yes'",
        "result": "failed: string index out of range",
        "average_distance": 45.2
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    result = sum((i ** (3 if i % 3 == 0 and i % 4 != 0 else i % 4 == 0) for i in lst))",
        "result": "failed: ",
        "average_distance": 28.63157894736842
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)\n    if n <= 1:\n        return False\n    for i in range(2, 1 + int(n ** 0.5)):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 27.625
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    fraction1 = Fraction(x).limit_denominator()\n    fraction2 = Fraction(n).limit_denominator()\n    return float(fraction1) == float(fraction2)",
        "result": "failed: name 'Fraction' is not defined",
        "average_distance": 42.73684210526316
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    nums.sort(key=lambda x: (sum((int(digit) for digit in str(abs(x)))), x))",
        "result": "failed: ",
        "average_distance": 10.421052631578947
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[-1] % 2 != 0 and (str(abs(num))[0] % 2 != 0):\n            count += 1\n    return count",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 14.333333333333334
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        a_i = 1 + (i * i - i)\n        for j in range(1 + i, n):\n            a_j = 1 + (j * j - j)\n            for k in range(1 + j, n):\n                a_k = 1 + (k * k - k)\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1",
        "result": "failed: ",
        "average_distance": 22.31578947368421
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    result = []\n    for i in range(index1, index2):\n        result.append(planets[i])\n    return tuple(sorted(result))",
        "result": "failed: First test error: 3",
        "average_distance": 42.94117647058823
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([i for i in set(lst) if len(i) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "average_distance": 3.4705882352941178
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if num < 2:\n        return False\n    for i in range(2, 1 + int(num ** 0.5)):\n        if num % i == 0:\n            return False\n    return True\nreturn x if is_prime(n) else y",
        "result": "failed: 'return' outside function (<string>, line 18)",
        "average_distance": 10.5
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares",
        "result": "passed",
        "average_distance": 8.789473684210526
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(score - guess) for (score, guess) in zip(game, guess)]",
        "result": "passed",
        "average_distance": 5.105263157894737
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: len([c for c in x if c.isupper]) - len([c for c in x if c.islower]))\n    return f'{class_name}.{strongest}'",
        "result": "failed: ",
        "average_distance": 31.94736842105263
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for _ in range(len(b)):\n        b = b[0] + b[1:]\n        if b in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 17.647058823529413
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum((1 for digit in num if int(digit) % 2 == 0))\n    odd = len(num) - even\n    return (even, odd)",
        "result": "passed",
        "average_distance": 24.11764705882353
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman = ''\n    for (value, numeral) in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            roman += numeral\n            number -= value\n    return roman.lower()",
        "result": "passed",
        "average_distance": 78.38461538461539
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + c ** 2 == b ** 2",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 14.411764705882353
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_length = 0\n    max_word = ''\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_length:\n            max_length = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_length and word < max_word:\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 26.94736842105263
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    return [min(need + number, remaining), max(0, remaining - (need + number))]",
        "result": "failed: Error",
        "average_distance": 15.0
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = eval(''.join((op + str(operand[i]) for (i, op) in zip(range(len(operator)), operator))))",
        "result": "failed: unexpected EOF while parsing (<string>, line 1)",
        "average_distance": 73.45454545454545
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result if any((c.isalpha() for c in s)) else s[::-1]",
        "result": "passed",
        "average_distance": 8.210526315789474
    },
    "HumanEval/162": {
        "code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    return sorted([i for i in range(a, 1 + b) if i % 2 == 0])",
        "result": "failed: Test 1",
        "average_distance": 19.157894736842106
    }
}