{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] <= threshold:\n                return True\n    return False",
        "result": "failed: ",
        "average_distance": 21.5
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    count = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            count += 1\n            group += char\n        elif char == ')':\n            count -= 1\n            group += char\n            if count == 0:\n                result.append(group)\n                group = ''\n    return result",
        "result": "passed",
        "average_distance": 19.375
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part",
        "result": "passed",
        "average_distance": 3.0
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    num_mean = sum(numbers) / len(numbers)\n    total_diff = 0\n    for number in numbers:\n        total_diff += abs(number - num_mean)\n    return total_diff / len(numbers)",
        "result": "passed",
        "average_distance": 8.4
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.append(num)\n        if len(result) < len(numbers):\n            result.append(delimeter)\n    return result",
        "result": "failed: ",
        "average_distance": 10.666666666666666
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed",
        "average_distance": 14.421052631578947
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring <= string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    total = 0\n    for num in numbers:\n        total += num\n        product *= num\n    return (total, product)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result",
        "result": "passed",
        "average_distance": 4.142857142857143
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(input_string), 0, -1):\n        if input_string[:i] == input_string[i - 1::-1]:\n            return input_string + input_string[:i][::-1]\n    return input_string",
        "result": "failed: name 'input_string' is not defined",
        "average_distance": 34.1
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result",
        "result": "passed",
        "average_distance": 10.75
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = ''\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "result": "passed",
        "average_distance": 7.0
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while a < b:\n        (a, b) = (b, a % b)\n    return a",
        "result": "failed: ",
        "average_distance": 12.5625
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "result": "failed: ",
        "average_distance": 2.0
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result.rstrip()",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n    return len(char_set)",
        "result": "passed",
        "average_distance": 2.1333333333333333
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == '|':\n            result.append(2)\n        elif char == '.':\n            result.append(1)\n    return result",
        "result": "failed: ",
        "average_distance": 21.0
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 19.4
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_list = [int(num) for num in numbers.split()]\n    num_list.sort()\n    return ' '.join(map(str, num_list))",
        "result": "failed: invalid literal for int() with base 10: 'three'",
        "average_distance": 35.0
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for index_a in range(len(numbers) - 1):\n        for index_b in range(index_a + 1, len(numbers)):\n            diff = numbers[index_b] - numbers[index_a]\n            if diff <= min_diff:\n                min_diff = diff\n                closest_pair = (numbers[index_a], numbers[index_b])\n    return closest_pair",
        "result": "failed: ",
        "average_distance": 46.5
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    scale_factor = 1 / (max_num - min_num)\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_numbers.append((num - min_num) * scale_factor)\n    return rescaled_numbers",
        "result": "passed",
        "average_distance": 9.625
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int) and value <= max_int_value:\n            result.append(value)\n    return result",
        "result": "failed: name 'max_int_value' is not defined",
        "average_distance": 3.0
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    result = 0\n    for char in string:\n        result += 1",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for num in range(n - 1, 0, -1):\n        if n % num == 0:\n            return num",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors",
        "result": "passed",
        "average_distance": 12.933333333333334
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen_nums = set()\n    result = []\n    for num in numbers:\n        if num not in seen_nums:\n            seen_nums.add(num)\n            result.append(num)\n    return result",
        "result": "failed: ",
        "average_distance": 4.5
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "result": "passed",
        "average_distance": 12.0
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string <= prefix:\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "failed: ",
        "average_distance": 0.0
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    result = []\n    for num in l:\n        if num >= 0:\n            result.append(num)\n    return result",
        "result": "failed: ",
        "average_distance": 0.42857142857142855
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for divisor in range(2, int(n ** 0.5) + 1):\n        if n % divisor == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 4.0
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    for i in range(2, len(xs), 2):\n        if xs[i] != 0:\n            return -xs[i - 1] / xs[i]",
        "result": "failed: must be real number, not NoneType",
        "average_distance": 17.5
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    thirds = [x for (i, x) in enumerate(l) if i % 3 == 0]\n    thirds.sort()\n    for i in range(0, len(l), 3):\n        l[i] = thirds.pop(0)\n    return l",
        "result": "passed",
        "average_distance": 28.0
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return sorted(result)",
        "result": "passed",
        "average_distance": 8.090909090909092
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    max_val = float('-inf')\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            while num > 0:\n                digit = num % 10\n                if digit == 7:\n                    count += 1\n                num //= 10\n    return count",
        "result": "passed",
        "average_distance": 6.222222222222222
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    even_nums = []\n    for (idx, num) in enumerate(l):\n        if idx % 2 == 0:\n            even_nums.append(num)\n    even_nums.sort()\n    for (idx, num) in enumerate(l):\n        if idx % 2 == 0:\n            l[idx] = even_nums.pop(0)\n    return l",
        "result": "passed",
        "average_distance": 40.5
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    decoded_groups = ['' for _ in range(len(groups))]\n    for (i, group) in enumerate(groups):\n        if len(group) == 3:\n            decoded_groups[i] = group[-1] + group[:-1]\n        else:\n            decoded_groups[i] = group\n    return ''.join(decoded_groups)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n(a, b) = (0, 1)\ncount = 0\nfor _ in range(n):\n    (a, b) = (b, a + b)\n    if is_prime(b):\n        count += 1\n        if count == n:\n            break\nreturn b",
        "result": "failed: 'return' outside function (<string>, line 32)",
        "average_distance": 30.294117647058822
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    for a_index in range(len(l)):\n        for b_index in range(a_index + 1, len(l)):\n            for c_index in range(b_index + 1, len(l)):\n                if l[a_index] + l[b_index] + l[c_index] == 0:\n                    return True\n    return False",
        "result": "passed",
        "average_distance": 42.583333333333336
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    collisions = 0\n    for left_car in range(n):\n        for right_car in range(left_car + 1, n):\n            if left_car < right_car <= n - 1:\n                collisions += 1\n    return collisions",
        "result": "failed: ",
        "average_distance": 22.22222222222222
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    for idx in range(len(l)):\n        l[idx] += 1",
        "result": "failed: ",
        "average_distance": 8.333333333333334
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen_nums = set()\n    for num in l:\n        if -num in seen_nums:\n            return True\n        seen_nums.add(num)\n    return False",
        "result": "passed",
        "average_distance": 7.769230769230769
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 12.076923076923077
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return a * h / 2",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    (a, b, c, d) = (0, 0, 2, 0)\n    for _ in range(n - 3):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return d",
        "result": "passed",
        "average_distance": 37.36363636363637
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        mid1 = sorted_l[(n - 1) // 2]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2.0",
        "result": "passed",
        "average_distance": 33.63636363636363
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    for _index in range(len(text) // 2):\n        if text[_index] != text[-_index - 1]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 13.818181818181818
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    result = 1\n    for i in range(2, n + 1):\n        result = result * 2 % p\n    return result",
        "result": "failed: ",
        "average_distance": 8.642857142857142
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 + ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "failed: ",
        "average_distance": 11.0
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "passed",
        "average_distance": 0.375
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 4.25
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    for i in range(len(sorted_s0)):\n        if sorted_s0[i] != sorted_s1[i]:\n            return False\n    return len(sorted_s0) == len(sorted_s1)",
        "result": "failed: ",
        "average_distance": 34.214285714285715
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    (a, b) = (0, 1)\n    for _ in range(n):\n        (a, b) = (b, a + b)\n    return a",
        "result": "passed",
        "average_distance": 7.642857142857143
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "result": "passed",
        "average_distance": 11.0
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True",
        "result": "failed: ",
        "average_distance": 35.63636363636363
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    result = []\n    for i in l1:\n        if i <= max(l2) and i >= min(l2) and (i not in result):\n            result.append(i)\n    return sorted(result)",
        "result": "failed: ",
        "average_distance": 10.571428571428571
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = n\n    while i % 2 == 0:\n        i //= 2\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        while i % x == 0:\n            i //= x\n    if i > 2:\n        return i\n    return 2",
        "result": "failed: ",
        "average_distance": 30.636363636363637
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            open_brackets += 1\n        elif bracket == ')':\n            if open_brackets <= 0:\n                return False\n            open_brackets -= 1\n    return open_brackets == 0",
        "result": "passed",
        "average_distance": 10.166666666666666
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n < 3:\n        return n % 2\n    (a, b, c) = (0, 0, 1)\n    for _ in range(3, n + 1):\n        (a, b, c) = (b, c, a + b + c)\n    return c",
        "result": "failed: ",
        "average_distance": 10.5
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels or (char == 'y' and s[-1] == 'y'):\n            count += 1\n    return count",
        "result": "failed: Test 5",
        "average_distance": 5.25
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str",
        "result": "failed: ",
        "average_distance": 20.2
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if 'A' <= c <= 'Z':\n            sum += ord(c)\n    return sum",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    (apples_str, _) = fruit_str.split('and')\n    apples = int(apples_str.strip().split()[0])\n    oranges = int(fruit_str.split()[-1])\n    return total_fruits - apples - oranges",
        "result": "failed: name 'fruit_str' is not defined",
        "average_distance": 26.333333333333332
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    evens = []\n    for (i, num) in enumerate(arr):\n        if num % 2 == 0:\n            evens.append((num, i))\n    return sorted(evens)[0] if evens else []",
        "result": "failed: Error",
        "average_distance": 25.8
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for (num, count) in freq.items():\n        if count >= num and num > 0:\n            return num\n    return -1",
        "result": "failed: ",
        "average_distance": 19.583333333333332
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
        "result": "passed",
        "average_distance": 11.058823529411764
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return area",
        "result": "passed",
        "average_distance": 6.5
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
        "result": "passed",
        "average_distance": 23.25
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    for i in range(len(arr) // 2 + 1):\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes",
        "result": "failed: ",
        "average_distance": 30.46153846153846
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    sum_lst1 = sum((len(word) for word in lst1))\n    sum_lst2 = sum((len(word) for word in lst2))\n    if sum_lst1 < sum_lst2:\n        return lst1\n    elif sum_lst1 > sum_lst2:\n        return lst2\n    else:\n        return lst1",
        "result": "passed",
        "average_distance": 7.714285714285714
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    if a < 6:\n        return False\n    num_factors = 0\n    for i in range(2, int(a ** 0.5) + 1):\n        while a % i == 0 and i <= a // i:\n            num_factors += 1\n            a //= i\n    if a > 1:\n        num_factors += 1\n    return num_factors == 3",
        "result": "passed",
        "average_distance": 42.5
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    i = 0\n    for i in range(n):\n        if x == n ** i:\n            return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 23.63157894736842
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    for i in range(-a, a + 1):\n        if i ** 3 == a:\n            return True\n    return False",
        "result": "failed: Third test error: False",
        "average_distance": 2.6
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for char in num:\n        if char in primes:\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 2.857142857142857
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    binary = ''\n    db = 'db'\n    for _ in range(decimal):\n        binary = str(decimal % 2) + binary\n    return db + binary + db",
        "result": "failed: ",
        "average_distance": 51.0
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 7.8
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: ",
        "average_distance": 20.375
    },
    "HumanEval/82": {
        "code": "def prime_length(string):\n    if n < 2:\n        return False\n    for num in range(2, int(n ** 0.5) + 1):\n        if n % num == 0:\n            return False\n    return True\n    length = len(string)\n    return is_prime(length)",
        "result": "failed: name 'n' is not defined",
        "average_distance": 10.6
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 10.25
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "result": "failed: local variable 'n' referenced before assignment",
        "average_distance": 18.6875
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    sum_even = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even += lst[i]\n    return sum_even",
        "result": "passed",
        "average_distance": 7.0
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    result = ''\n    for word in s.split():\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word + ' '\n    return result.strip()",
        "result": "passed",
        "average_distance": 24.714285714285715
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    result = []\n    for (i, row) in enumerate(lst):\n        if x in row:\n            cols = sorted((j for (j, num) in enumerate(row) if num == x), reverse=True)\n            result.extend(((i, col) for col in cols))\n    return sorted(result)",
        "result": "failed: ",
        "average_distance": 37.07692307692308
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    sorted_array = array.copy()\n    first_index_value = sorted_array[0]\n    last_index_value = sorted_array[-1]\n    if (first_index_value + last_index_value) % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array",
        "result": "failed: list index out of range",
        "average_distance": 37.90909090909091
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + 6) % 26 + ascii_offset)\n            result += encrypted_char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 27.4
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    smallest = largest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            largest = smallest\n            smallest = num\n        elif largest is None or (num > smallest and num <= largest):\n            largest = num\n    return largest",
        "result": "failed: ",
        "average_distance": 13.0625
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    count = 0\n    sentences = s.split('.') + s.split('?') + s.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count",
        "result": "failed: name 's' is not defined",
        "average_distance": 19.571428571428573
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y",
        "result": "passed",
        "average_distance": 25.90909090909091
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            encoded_message += new_char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 28.384615384615383
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    primes = [n for n in lst if is_prime(n)]\n    largest_prime = max(primes)\n    digits_sum = sum((int(digit) for digit in str(largest_prime)))\n    return digits_sum",
        "result": "failed: name 'n' is not defined",
        "average_distance": 26.454545454545453
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not dict_to_check:\n        return False\n    first_key = next(iter(dict_to_check))\n    case = first_key.islower()\n    for key in dict_to_check:\n        if key.islower() != case or not isinstance(key, str):\n            return False\n    return True",
        "result": "failed: name 'dict_to_check' is not defined",
        "average_distance": 24.90909090909091
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "result": "failed: local variable 'num' referenced before assignment",
        "average_distance": 9.571428571428571
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    product = a % 10 * b % 10\n    return product",
        "result": "failed: First test error: 6",
        "average_distance": 11.4
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    vowel_count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ('A', 'E', 'I', 'O', 'U'):\n            vowel_count += 1\n    return vowel_count",
        "result": "passed",
        "average_distance": 5.0
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed",
        "average_distance": 23.4
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 1\n    return pile",
        "result": "failed: Test 3",
        "average_distance": 8.636363636363637
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.split(',') + s.split(' ')",
        "result": "failed: ",
        "average_distance": 6.5
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            biggest_even = num\n            break\n    return biggest_even",
        "result": "passed",
        "average_distance": 7.8
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum_val = 0\n    for i in range(n, m + 1):\n        sum_val += i\n    avg = round(sum_val / (m - n + 1))\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 23.5
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if not any((digit % 2 == 0 for digit in str(num))):\n            result.append(num)\n    return sorted(result)",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 17.733333333333334
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    digits = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digits[num - 1])\n    return result[::-1]",
        "result": "failed: Error",
        "average_distance": 22.357142857142858
    },
    "HumanEval/106": {
        "code": "def f(n):\n    result = []\n    for a in range(1, n + 1):\n        if a % 2 == 0:\n            factorial = 1\n            for b in range(1, a + 1):\n                factorial *= b\n            result.append(factorial)\n        else:\n            sum_ = 0\n            for c in range(1, a + 1):\n                sum_ += c\n            result.append(sum_)\n    return result",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "passed",
        "average_distance": 1.0526315789473684
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum((int(digit) for digit in str(abs(num))))\n        if digit_sum > 0:\n            count += 1\n    return count",
        "result": "failed: ",
        "average_distance": 19.36842105263158
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.append(arr.pop(0))\n        if arr == sorted_arr:\n            return True\n    return False",
        "result": "failed: ",
        "average_distance": 14.083333333333334
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            found = False\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    (lst1[i], lst2[j]) = (lst2[j], lst1[i])\n                    found = True\n                    break\n            if not found:\n                return 'NO'\n    return 'YES'",
        "result": "passed",
        "average_distance": 41.0
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    counts = {}\n    max_count = 0\n    for letter in test.split():\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n    results = {k: v for (k, v) in counts.items() if v == max_count}\n    return results",
        "result": "passed",
        "average_distance": 15.25
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)",
        "result": "passed",
        "average_distance": 9.2
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        num_odds = sum((1 for c in lst[i] if int(c) % 2 != 0))\n        result.append(f'the number of odd elements {num_odds}n the str{num_odds}ng {i + 1} of the {num_odds}nput.')\n    return result",
        "result": "failed: Test 1",
        "average_distance": 14.866666666666667
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "result": "passed",
        "average_distance": 22.58823529411765
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    num_fills = math.ceil(total_water / bucket_capacity)\n    return num_fills",
        "result": "failed: name 'bucket_capacity' is not defined",
        "average_distance": 36.73684210526316
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
        "result": "passed",
        "average_distance": 34.4375
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum((1 for char in word if char in consonants))\n        if count == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "average_distance": 21.153846153846153
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    closest_vowel = ''\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n    return closest_vowel",
        "result": "failed: ",
        "average_distance": 8.0
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n        if open_count < close_count:\n            return 'No'\n    return 'Yes' if open_count == close_count else 'No'",
        "result": "failed: ",
        "average_distance": 11.0
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    max_nums = []\n    for i in range(k):\n        max_num = arr[0]\n        for num in arr:\n            if num >= max_num:\n                max_num = num\n        max_nums.append(max_num)\n        arr.remove(max_num)\n    return sorted(max_nums)",
        "result": "passed",
        "average_distance": 30.416666666666668
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even",
        "result": "passed",
        "average_distance": 13.428571428571429
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if arr[i] < 100 and arr[i] >= 10:\n            total += arr[i]\n    return total",
        "result": "failed: ",
        "average_distance": 6.411764705882353
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    collatz_sequence = []\n    current_number = n\n    while current_number != 1:\n        if current_number % 2 == 1:\n            collatz_sequence.append(current_number)\n        current_number = current_number // 2 if current_number % 2 == 0 else 3 * current_number + 1\n    return sorted(collatz_sequence)",
        "result": "failed: ",
        "average_distance": 10.23076923076923
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    if not date or '-' not in date or len(date) != 10:\n        return False\n    (day, month, year) = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12) and (not 1 <= day <= 31):\n        return False\n    elif month in (4, 6, 9, 11) and (not 1 <= day <= 30):\n        return False\n    elif month == 2 and (not 1 <= day <= 29):\n        return False\n    return True",
        "result": "failed: ",
        "average_distance": 82.83333333333333
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    words = []\n    if ',' in txt:\n        words = txt.split(',')\n    elif ' ' in txt:\n        words = txt.split(' ')\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 != 0:\n                count += 1\n        return count\n    return words",
        "result": "failed: ",
        "average_distance": 61.57142857142857
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    prev = None\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        elif prev == num:\n            return False\n        prev = num\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 17.0
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    if n < 2:\n        return False\n    for num in range(2, int(n ** 0.5) + 1):\n        if n % num == 0:\n            return False\n    return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        return 'YES' if is_prime(length) else 'NO'\n    else:\n        return 'NO'",
        "result": "failed: name 'n' is not defined",
        "average_distance": 8.588235294117647
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sign_product *= 1 if num > 0 else -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum",
        "result": "failed: ",
        "average_distance": 26.875
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    n = len(grid)\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            (x, y) = (i, j)\n            for _ in range(k - 1):\n                (dx, dy) = moves[random.randint(0, 3)]\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n:\n                    path.append(grid[nx][ny])\n                    (x, y) = (nx, ny)\n            paths.append(sorted(path))\n    return min(paths, key=lambda x: tuple(x))",
        "result": "failed: name 'random' is not defined",
        "average_distance": 0.0
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    trib = []\n    for i in range(n + 1):\n        if i == 0:\n            trib.append(1)\n        elif i % 2 == 0:\n            trib.append(1 + i // 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i + 1])\n    return trib",
        "result": "failed: list index out of range",
        "average_distance": 28.5
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "average_distance": 7.285714285714286
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 4.470588235294118
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        squared = int(num + 1) ** 2\n        result += squared\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 9.5
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    for char_index in range(len(txt), -1, -1):\n        if txt[char_index].isalpha():\n            return True\n        elif not txt[char_index].isspace():\n            return False\n    return False",
        "result": "failed: string index out of range",
        "average_distance": 26.0
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: ",
        "average_distance": 3.7142857142857144
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    neg_max = pos_min = None\n    for num in lst:\n        if num < 0 and (neg_max is None or num > neg_max):\n            neg_max = num\n        elif num > 0 and (pos_min is None or num < pos_min):\n            pos_min = num\n    return (neg_max, pos_min)",
        "result": "passed",
        "average_distance": 11.4
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif not isinstance(a, (int, float)):\n        return None\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif not isinstance(b, (int, float)):\n        return None\n    if a <= b:\n        return b\n    else:\n        return None",
        "result": "failed: ",
        "average_distance": 37.07142857142857
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    for a in range(2, n // 2 + 1, 2):\n        for b in range(a + 2, n - a + 2, 2):\n            for c in range(b + 2, n - b + 2, 2):\n                d = n - a - b - c\n                if d >= b and d % 2 == 0:\n                    return True\n    return False",
        "result": "failed: ",
        "average_distance": 40.0
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for current_num in range(1, n + 1):\n        for factorial_mult in range(current_num, 0, -1):\n            result *= factorial_mult\n    return result",
        "result": "passed",
        "average_distance": 11.76923076923077
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    result = ''\n    prev_was_space = False\n    for char in text:\n        if char == ' ':\n            if prev_was_space:\n                result += '-'\n            else:\n                result += '_'\n            prev_was_space = True\n        else:\n            result += char\n            prev_was_space = False\n    return result",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "average_distance": 7.388888888888889
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    num_digits = 0\n    for char in file_name:\n        if char.isdigit():\n            num_digits += 1\n    dot_index = file_name.find('.')\n    if num_digits > 3 or dot_index == -1 or dot_index == 0 or (len(file_name[:dot_index]) == 0) or (not file_name[0].isalpha()) or (file_name[dot_index + 1:] not in ['txt', 'exe', 'dll']):\n        return 'No'\n    else:\n        return 'Yes'",
        "result": "passed",
        "average_distance": 55.416666666666664
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total",
        "result": "failed: ",
        "average_distance": 6.0
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    words = sentence.split()\n    result = ''\n    for word in words:\n        if is_prime(len(word)):\n            result += word + ' '\n    return result.strip()",
        "result": "failed: name 'n' is not defined",
        "average_distance": 34.75
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (x_num, x_den) = map(int, x.split('/'))\n    (n_num, n_den) = map(int, n.split('/'))\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n    return prod_num % prod_den == 0",
        "result": "passed",
        "average_distance": 17.8
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    digit_sums = [(sum((int(digit) for digit in str(num))), idx) for (idx, num) in enumerate(nums)]\n    sorted_digit_sums = sorted(digit_sums)\n    return [num for (_, idx) in sorted_digit_sums for num in nums if nums[idx] == num]",
        "result": "failed: invalid literal for int() with base 10: '-'",
        "average_distance": 55.15384615384615
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 == 1 and (str(num)[-1] % 2 == 1):\n            count += 1\n    return count",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 11.666666666666666
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 14.625
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    (index1, index2) = (None, None)\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            index1 = i\n        elif planets[i] == planet2:\n            index2 = i\n    if index1 is not None and index2 is not None and (index1 < index2):\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return ()",
        "result": "failed: Second test error: ()",
        "average_distance": 0.0
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst",
        "result": "passed",
        "average_distance": 7.555555555555555
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return False\n    for num in range(2, int(n ** 0.5) + 1):\n        if n % num == 0:\n            return False\n    return True\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: ",
        "average_distance": 12.444444444444445
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and (num % 2 != 0):\n            result += num ** 2\n    return result",
        "result": "passed",
        "average_distance": 1.75
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "result": "passed",
        "average_distance": 12.875
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = float('-inf')\n    strongest_ext = None\n    for ext in extensions:\n        cap_count = sum((1 for c in ext if c.isupper()))\n        sm_count = sum((1 for c in ext if c.islower()))\n        strength = cap_count - sm_count\n        if strength > strongest_strength or (strength == strongest_strength and extensions.index(ext) < extensions.index(strongest_ext)):\n            strongest_strength = strength\n            strongest_ext = ext\n    return f'{class_name}.{strongest_ext}'",
        "result": "passed",
        "average_distance": 10.411764705882353
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 28.714285714285715
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit_str in str(abs(num)):\n        if int(digit_str) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed",
        "average_distance": 4.5
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    mini_roman = ''\n    numeral_values = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    for (value, roman) in numeral_values.items():\n        while number >= value:\n            mini_roman += roman\n            number -= value\n    return mini_roman",
        "result": "passed",
        "average_distance": 26.916666666666668
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    for side in [a, b, c]:\n        if side < 0:\n            return False\n    sides_sorted = sorted([a, b, c])\n    if sides_sorted[2] ** 2 == sides_sorted[0] ** 2 + sides_sorted[1] ** 2:\n        return True\n    else:\n        return False",
        "result": "passed",
        "average_distance": 33.625
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_word = ''\n    max_length = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_length or (unique_chars == max_length and word < max_word):\n            max_length = unique_chars\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 4.0
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    eaten = number\n    left = remaining\n    for _ in range(need):\n        if left > 0:\n            eaten += 1\n            left -= 1\n        else:\n            break\n    return [eaten, left]",
        "result": "passed",
        "average_distance": 17.363636363636363
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "average_distance": 24.916666666666668
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result[::-1] if not any((c.isalpha() for c in s)) else result",
        "result": "passed",
        "average_distance": 15.75
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits",
        "result": "failed: Test 1",
        "average_distance": 0.75
    }
}