{
    "4693": {
        "code": "(A, B) = map(int, input().split())\nresult = A + B\nif result >= 10:\n    print('error')\nelse:\n    print(result)",
        "result": "passed",
        "average_distance": 5.473684210526316
    },
    "4077": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4006": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4556": {
        "code": "s = input().split()[1]\nx = s[0]\nprint(x.upper())",
        "result": "failed: testcase 0",
        "average_distance": 19.785714285714285
    },
    "4571": {
        "code": "import sys\nfrom fractions import Fraction\n(N, M) = map(int, input().split())\nexpected_time = 0\nfor i in range(1, M + 1):\n    probability = Fraction(1, 2 ** (i - 1))\n    execution_time = 1900 * i\n    expected_time += probability * execution_time\nfor i in range(M, N):\n    execution_time = 100 * (N - i)\n    expected_time += execution_time\nprint(int(expected_time))",
        "result": "failed: testcase 0",
        "average_distance": 59.0
    },
    "4019": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4265": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4657": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4599": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4774": {
        "code": "import itertools\noperators = ['+', '-', '*', '/']\n(a, b, c, d) = map(int, input().split())\nvalid_expressions = []\nfor (op1, op2) in itertools.product(operators, repeat=2):\n    try:\n        if eval(f'{a} {op1} {b} == {c} {op2} {d}'):\n            valid_expressions.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    except ZeroDivisionError:\n        continue\nif not valid_expressions:\n    print('problems ahead')\nelse:\n    for expr in sorted(valid_expressions):\n        print(expr)",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "4851": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4655": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nq = int(data[0])\nresults = []\nfor i in range(1, q * 3, 3):\n    (a, b, c) = (int(data[i]), int(data[i + 1]), int(data[i + 2]))\n    piles = sorted([a, b, c])\n    total = sum(piles)\n    if piles[0] + piles[1] > piles[2]:\n        alice_max = (total + piles[2]) // 2\n    else:\n        alice_max = piles[0] + piles[1]\n    results.append(alice_max)\nfor result in results:\n    print(result)",
        "result": "failed: testcase 0",
        "average_distance": 86.0
    },
    "4132": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4085": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4399": {
        "code": "if 'AB' in input() or 'BA' in input():\n    print('Yes')\nelse:\n    print('No')",
        "result": "failed: testcase 1",
        "average_distance": 0.0
    },
    "4999": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4727": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4906": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4011": {
        "code": "n = int(input())\na = input().strip()\nf = list(map(int, input().split()))\nmax_num = 0\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        segment = a[i:j]\n        new_segment = ''.join((str(f[int(digit) - 1]) for digit in segment))\n        max_num = max(max_num, int(new_segment))\nprint(max_num)",
        "result": "failed: testcase 0",
        "average_distance": 26.0
    },
    "4099": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4465": {
        "code": "A = int(input())\nB = int(input())\nprint((A - 2) * (B - 2))",
        "result": "failed: testcase 0",
        "average_distance": 4.0
    },
    "4315": {
        "code": "import math\nR = int(input())\ncircumference = 2 * math.pi * R\nprint(circumference)",
        "result": "passed",
        "average_distance": 1.2105263157894737
    },
    "4633": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nt = int(data[0])\nindex = 1\nresults = []\nfor _ in range(t):\n    n = int(data[index])\n    s = int(data[index + 1])\n    index += 2\n    move_count = 0\n    while sum((int(digit) for digit in str(n))) > s:\n        n += 1\n        move_count += 1\n    results.append(move_count)\nfor result in results:\n    print(result)",
        "result": "timed out",
        "average_distance": 47.0
    },
    "4734": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4229": {
        "code": "N = int(input())\ntotal_sum = 0\nfor i in range(1, N + 1):\n    if i % 3 == 0 and i % 5 == 0:\n        total_sum += 0\n    elif i % 3 == 0:\n        total_sum += 0\n    elif i % 5 == 0:\n        total_sum += 0\n    else:\n        total_sum += i\nprint(total_sum)",
        "result": "passed",
        "average_distance": 18.0
    },
    "4321": {
        "code": "(n, k) = map(int, input().split())\nfor _ in range(k):\n    if n % 10 != 0:\n        n -= 1\n    else:\n        n //= 10\nprint(n)",
        "result": "passed",
        "average_distance": 0.0
    },
    "4503": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4855": {
        "code": "import math\n(A, I) = map(int, input().split())\ntotal_citations_needed = I * A - 1\nscientists_to_bribe = math.ceil(total_citations_needed / (A + total_citations_needed))\nprint(scientists_to_bribe)",
        "result": "failed: testcase 0",
        "average_distance": 26.285714285714285
    },
    "4704": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4829": {
        "code": "(l, r) = map(int, input().split())\nif l == 0 and r == 0:\n    print('Not a moose')\nelif l == r:\n    points = l + r\n    print(f'Even {points}')\nelse:\n    points = max(l, r) * 2\n    print(f'Odd {points}')",
        "result": "passed",
        "average_distance": 14.125
    },
    "4730": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4729": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4582": {
        "code": "a = input()\nb = input()\nif a == 'H':\n    if b == 'H':\n        print('H')\n    else:\n        print('D')\nelif b == 'H':\n    print('D')\nelse:\n    print('H')",
        "result": "failed: testcase 0",
        "average_distance": 8.529411764705882
    },
    "4910": {
        "code": "from collections import Counter\nimport sys\nN = int(input().strip())\ncostumes = [input().strip() for _ in range(N)]\ncostume_counts = Counter(costumes)\nmax_count = max(costume_counts.values())\nwinning_costumes = sorted([category for (category, count) in costume_counts.items() if count == max_count])\nprint('\\n'.join(winning_costumes))",
        "result": "failed: testcase 0",
        "average_distance": 7.0
    },
    "4323": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4626": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nq = int(data[0])\nresults = []\nindex = 1\nfor _ in range(q):\n    a = int(data[index])\n    b = int(data[index + 1])\n    c = int(data[index + 2])\n    index += 3\n    min_distance = float('inf')\n    for x in [a - 1, a, a + 1]:\n        for y in [b - 1, b, b + 1]:\n            for z in [c - 1, c, c + 1]:\n                distance = abs(x - y) + abs(x - z) + abs(y - z)\n                if distance < min_distance:\n                    min_distance = distance\n    results.append(min_distance)\nfor result in results:\n    print(result)",
        "result": "passed",
        "average_distance": 84.5
    },
    "4400": {
        "code": "print(max(S.count('R')))",
        "result": "failed: testcase 0",
        "average_distance": 13.75
    },
    "4794": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4096": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4530": {
        "code": "import sys\nfrom collections import Counter\ninput = sys.stdin.read\ndata = input().split()\nt = int(data[0])\nindex = 1\nresults = []\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    skills = list(map(int, data[index:index + n]))\n    index += n\n    skill_count = Counter(skills)\n    unique_skills = set(skill_count.keys())\n    max_size = 0\n    for skill in unique_skills:\n        team_size = skill_count[skill]\n        if len(unique_skills - {skill}) >= team_size:\n            max_size = max(max_size, team_size)\n    results.append(max_size)\nfor result in results:\n    print(result)",
        "result": "failed: testcase 0",
        "average_distance": 44.0
    },
    "4724": {
        "code": "R = int(input())\nG = int(input())\nprint(2 * G - R)",
        "result": "passed",
        "average_distance": 6.8
    },
    "4276": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4708": {
        "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\ntotal_fee = K * X + max(0, N - K) * Y\nprint(total_fee)",
        "result": "failed: testcase 1",
        "average_distance": 3.0
    },
    "4396": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4155": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4557": {
        "code": "(A, B, X) = map(int, input().split())\nif A <= X <= A + B:\n    print('YES')\nelse:\n    print('NO')",
        "result": "passed",
        "average_distance": 10.529411764705882
    },
    "4930": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4715": {
        "code": "(a, b, c) = map(int, input().split())\ncolors = {a, b, c}\nprint(len(colors))",
        "result": "passed",
        "average_distance": 15.5
    },
    "4008": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4257": {
        "code": "(A, B) = map(int, input().split())\nprint(A * B)",
        "result": "passed",
        "average_distance": 0.7894736842105263
    },
    "4584": {
        "code": "import sys\nN = int(input())\nA = list(map(int, input().split()))\nsubordinates_count = [0] * (N + 1)\nfor i in range(2, N + 1):\n    subordinates_count[A[i - 1]] += 1\nfor count in subordinates_count:\n    print(count)",
        "result": "failed: testcase 0",
        "average_distance": 6.0
    },
    "4195": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4176": {
        "code": "import math\n(A, B) = map(int, input().split())\nprint(math.lcm(A, B))",
        "result": "passed",
        "average_distance": 10.818181818181818
    },
    "4166": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4827": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4871": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4148": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\nresult = ''.join([chr((ord(c) - ord('A') + N) % 26 + ord('A')) for c in S])\nprint(result)",
        "result": "passed",
        "average_distance": 2.6666666666666665
    },
    "4316": {
        "code": "s = input()\nchar_count = {}\nfor char in s:\n    if char in char_count:\n        char_count[char] += 1\n    else:\n        char_count[char] = 1\nif len(char_count) == 2 and list(char_count.values()) == [2, 2]:\n    print('Yes')\nelse:\n    print('No')",
        "result": "passed",
        "average_distance": 29.5
    },
    "4397": {
        "code": "(N, i) = map(int, input().split())\nj = N - i + 1\nprint(j)",
        "result": "passed",
        "average_distance": 0.10526315789473684
    },
    "4180": {
        "code": "N = int(input())\nchange = N % 1000\nprint(change)",
        "result": "failed: testcase 0",
        "average_distance": 1.1176470588235294
    },
    "4907": {
        "code": "n = int(input())\nif n % 2 == 0:\n    print('Bob')\nelse:\n    print('Alice\\n1')",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "4839": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nc = list(map(int, data[1:]))\nc.sort()\ns = sum(c)\nif s < n:\n    print('impossible')\nelse:\n    (low, high) = (0, 1.0)\n    while high - low > 1e-06:\n        mid = (low + high) / 2\n        if any((x < mid * i for (i, x) in enumerate(c, start=1))):\n            high = mid\n        else:\n            low = mid\n    print(f'{low:.6f}')",
        "result": "failed: testcase 1",
        "average_distance": 0.0
    },
    "4665": {
        "code": "from collections import namedtuple\nStudent = namedtuple('Student', ['ID', 'MARKS', 'CLASS', 'NAME'])\nN = int(input())\ncolumns = input().split()\nstudents = []\nfor _ in range(N):\n    row = input().split()\n    student = Student(*row)\n    students.append(float(student.MARKS))\naverage_marks = sum(students) / N\nprint(f'{average_marks:.2f}')",
        "result": "failed: testcase 1",
        "average_distance": 25.0
    },
    "4785": {
        "code": "if 'ss' in input():\n    print('hiss')\nelse:\n    print('no hiss')",
        "result": "passed",
        "average_distance": 5.571428571428571
    },
    "4272": {
        "code": "N = int(input())\nS = input()\ncount = S.count('ABC')\nprint(count)",
        "result": "passed",
        "average_distance": 12.857142857142858
    },
    "4092": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4023": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4160": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4815": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4514": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4585": {
        "code": "import math\nX = int(input())\ntime = math.ceil(math.sqrt(2 * X))\nprint(time)",
        "result": "failed: testcase 0",
        "average_distance": 12.166666666666666
    },
    "4781": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nK = int(data[0])\nN = int(data[1])\nplayers = list(range(1, 9))\nindex = players.index(K)\nfor i in range(N):\n    T = int(data[2 + 2 * i])\n    Z = data[3 + 2 * i]\n    if Z == 'P':\n        index = (index + 1) % 8\n    elif Z != 'T':\n        index = (index + 1) % 8\nprint(players[index])",
        "result": "failed: testcase 0",
        "average_distance": 58.5
    },
    "4551": {
        "code": "(A, B, C, D) = map(int, input().split())\nL = A + B\nR = C + D\nif L > R:\n    print('Left')\nelif L < R:\n    print('Right')\nelse:\n    print('Balanced')",
        "result": "passed",
        "average_distance": 5.333333333333333
    },
    "4345": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4075": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4408": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4282": {
        "code": "from sys import stdin, stdout\nn = int(input())\nremembered = [tuple(map(int, input().split())) for _ in range(n)]\nrem_dict = {i + 1: set() for i in range(n)}\nfor (i, (x, y)) in enumerate(remembered):\n    rem_dict[i + 1].add(x)\n    rem_dict[i + 1].add(y)\nstart = None\nfor i in range(1, n + 1):\n    if len(rem_dict[i]) == 2:\n        start = i\n        break\npermutation = [start]\ncurrent = start\nwhile True:\n    next_kid = remembered[current - 1].index(permutation[-1]) + 1\n    next_kid = remembered[current - 1][next_kid % 2]\n    if next_kid in rem_dict[permutation[-1]]:\n        permutation.append(next_kid)\n        current = next_kid\n    else:\n        break\nprint(' '.join(map(str, permutation)))",
        "result": "failed: testcase 0",
        "average_distance": 172.0
    },
    "4331": {
        "code": "N = int(input())\nif '7' in str(N):\n    print('Yes')\nelse:\n    print('No')",
        "result": "passed",
        "average_distance": 4.684210526315789
    },
    "4550": {
        "code": "(a, b, c) = map(int, input().split())\ntotal_candies = a + b + c\nif total_candies % 2 == 0:\n    print('Yes')\nelse:\n    print('No')",
        "result": "failed: testcase 1",
        "average_distance": 10.666666666666666
    },
    "4271": {
        "code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nsatisfaction_points = 0\nfor i in range(N):\n    satisfaction_points += B[A[i] - 1]\n    if i < N - 1 and A[i + 1] == A[i] + 1:\n        satisfaction_points += C[i]\nprint(satisfaction_points)",
        "result": "failed: testcase 0",
        "average_distance": 62.2
    },
    "4848": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4694": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4213": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\nmin_val = min(A)\nmax_val = max(A)\nprint(max_val - min_val)",
        "result": "passed",
        "average_distance": 38.333333333333336
    },
    "4471": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4802": {
        "code": "(h, m) = map(int, input().split())\nif m < 45:\n    h -= 1\n    m += 60 - 45\nelse:\n    m -= 45\nif h < 0:\n    h += 24\nprint(h, m)",
        "result": "passed",
        "average_distance": 22.125
    },
    "4890": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4286": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4713": {
        "code": "N = int(input())\nS = input()\nx = 0\nmax_value = 0\nfor char in S:\n    if char == 'I':\n        x += 1\n    else:\n        x -= 1\n    max_value = max(max_value, x)\nprint(max_value)",
        "result": "passed",
        "average_distance": 3.375
    },
    "4698": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nT = list(map(int, data[1:N + 1]))\nM = int(data[N + 1])\ndrinks = []\nfor i in range(M):\n    P = int(data[N + 2 + i * 2]) - 1\n    X = int(data[N + 3 + i * 2])\n    drinks.append((P, X))\nresults = []\nfor (P, X) in drinks:\n    total_time = sum(T)\n    total_time -= T[P]\n    total_time += X\n    results.append(total_time)\nfor result in results:\n    print(result)",
        "result": "passed",
        "average_distance": 111.0
    },
    "4841": {
        "code": "n = int(input())\ncounts = list(map(str, input().split()))\nexpected_count = 1\nresult = 'makes sense'\nfor count in counts:\n    if count == 'mumble':\n        continue\n    elif int(count) != expected_count:\n        result = 'something is fishy'\n        break\n    else:\n        expected_count += 1\nprint(result)",
        "result": "failed: testcase 0",
        "average_distance": 41.0
    },
    "4865": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4957": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4382": {
        "code": "import sys\nN = int(input())\nprint(N ** 3)",
        "result": "passed",
        "average_distance": 1.0
    },
    "4456": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\np = list(map(int, data[2:n + 2]))\nq = list(map(int, data[n + 2:2 * n + 2]))\nif len(set(p)) < n or len(set(q)) < n:\n    print('NO')\nelse:\n    s = ['a'] * n\n    used_chars = set()\n    for i in range(n):\n        if len(used_chars) == k:\n            break\n        char = chr(ord('a') + len(used_chars))\n        while char in used_chars:\n            char = chr(ord(char) + 1)\n        s[p[i] - 1] = char\n        used_chars.add(char)\n    for i in range(n):\n        if s[q[i] - 1] == 'a':\n            s[q[i] - 1] = chr(ord(s[p[i] - 1]) + 1)\n    print('YES')\n    print(''.join(s))",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "4594": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4560": {
        "code": "N = int(input())\nA = int(input())\nfor i in range(A + 1):\n    if (N - 500 * i) % 1 == 0:\n        print('Yes')\n        break\nelse:\n    print('No')",
        "result": "failed: testcase 1",
        "average_distance": 25.0
    },
    "4320": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4500": {
        "code": "(A, B, C) = map(int, input().split())\nif A + B >= C:\n    print('Yes')\nelse:\n    print('No')",
        "result": "passed",
        "average_distance": 1.0555555555555556
    },
    "4739": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "4410": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nt = int(data[0])\nindex = 1\nresults = []\nfor _ in range(t):\n    n = int(data[index])\n    k = int(data[index + 1])\n    s = data[index + 2]\n    index += 3\n    free_tables = 0\n    last_occupied = -k - 1\n    for i in range(n):\n        if s[i] == '0':\n            if i > last_occupied:\n                free_tables += 1\n                last_occupied = i + k\n    results.append(free_tables)\nfor result in results:\n    print(result)",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "2441": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "276": {
        "code": "gems = ['purple', 'green', 'blue', 'orange', 'red', 'yellow']\nseen_colors = set((input().strip() for _ in range(int(input().strip()))))\nabsent_gems = [gem.capitalize() for gem in gems if gem not in seen_colors]\nprint(len(absent_gems))\nfor gem in absent_gems:\n    print(gem)",
        "result": "failed: testcase 0",
        "average_distance": 3.0
    },
    "2635": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "281": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2300": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:2 + n]))\ni = 2 + n\nresults = []\nfor _ in range(m):\n    t = int(data[i])\n    i += 1\n    if t == 1:\n        x = int(data[i]) - 1\n        v = int(data[i + 1])\n        a[x] = v\n        i += 2\n    elif t == 2:\n        l = int(data[i]) - 1\n        r = int(data[i + 1])\n        f = [0, 0]\n        result = 0\n        for x in range(l, r):\n            if len(f) <= x - l:\n                f.append(f[-1] + f[-2] - 1)\n            result += f[x - l] * a[x] % 1000000000\n        results.append(result)\n        i += 2\n    elif t == 3:\n        l = int(data[i]) - 1\n        r = int(data[i + 1])\n        d = int(data[i + 2])\n        for x in range(l, r):\n            a[x] += d\n        i += 3\nfor result in results:\n    print(result)",
        "result": "failed: testcase 0",
        "average_distance": 181.5
    },
    "2104": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1995": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2064": {
        "code": "n = int(input())\nif n < 2:\n    print(0)\nelif n == 2:\n    print(1)\nelse:\n    num_segments = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    max_number = []\n    for digit in range(9, -1, -1):\n        if n >= num_segments[digit]:\n            max_number.append(str(digit))\n            n -= num_segments[digit]\n    print(''.join(max_number))",
        "result": "failed: testcase 2",
        "average_distance": 0.0
    },
    "1715": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2074": {
        "code": "import sys\n(n, m) = map(int, input().split())\ncosts = [list(map(int, input().split())) for _ in range(n)]\nmax_cost = 0\nfor i in range(n):\n    min_avenue_cost = float('inf')\n    for j in range(m):\n        if costs[i][j] < min_avenue_cost:\n            min_avenue_cost = costs[i][j]\n    if max_cost < min_avenue_cost:\n        max_cost = min_avenue_cost\nprint(max_cost)",
        "result": "passed",
        "average_distance": 0.0
    },
    "2921": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1642": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "947": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "743": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1397": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1144": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "890": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2410": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1004": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "531": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nx = list(map(int, data[1:]))\nmin_x = min(x)\nmax_x = max(x)\ntarget_avg = sum(x) / n\ny = []\nfor xi in x:\n    yi = round(target_avg * n - sum(y))\n    if min_x <= yi <= max_x:\n        y.append(yi)\n    else:\n        y.append(xi)\nprint(sum((1 for (a, b) in zip(x, y) if a == b)))\nprint(' '.join(map(str, y)))",
        "result": "failed: testcase 2",
        "average_distance": 0.0
    },
    "510": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2555": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "324": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2912": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nstrings = data[1:N + 1]\noperations = [(int(data[N + i * 2]) - 1, int(data[N + i * 2 + 1]) - 1) for i in range(N - 1)]\nfor (a, b) in operations:\n    strings[a] += strings[b]\n    strings[b] = ''\nprint(strings[0])",
        "result": "failed: testcase 0",
        "average_distance": 10.545454545454545
    },
    "9": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "249": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2999": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2239": {
        "code": "for _ in range(int(input())):\n    x = int(input())\n    print((x - 2) // 5)",
        "result": "failed: testcase 0",
        "average_distance": 3.0
    },
    "2615": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2542": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "511": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1409": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2274": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2420": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1267": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2356": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "108": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1833": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2324": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2372": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1984": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1253": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "523": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2934": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1745": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1422": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1763": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = int(data[1])\nR = int(data[2])\nM = int(data[3])\nh = list(map(int, data[4:]))\ntarget_height = sum(h) // N\nabove_target = 0\nbelow_target = 0\nfor height in h:\n    if height > target_height:\n        above_target += (height - target_height) * A\n    elif height < target_height:\n        below_target += (target_height - height) * R\nmin_cost = min(above_target, below_target)\nprint(min_cost)",
        "result": "failed: testcase 0",
        "average_distance": 59.333333333333336
    },
    "974": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2343": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "627": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1655": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nclaws = list(map(int, data[1:]))\nalive = [True] * n\nfor i in range(n):\n    if claws[i] > 0:\n        for j in range(max(0, i - claws[i]), i):\n            alive[j] = False\nprint(sum(alive))",
        "result": "passed",
        "average_distance": 0.0
    },
    "2124": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1093": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "899": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "551": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1772": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1339": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "440": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2801": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2749": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nH = int(data[0])\nW = int(data[1])\nN = int(data[2])\na = list(map(int, data[3:]))\ncolors = []\nindex = 0\nfor i in range(N):\n    color = i + 1\n    for _ in range(a[i]):\n        colors.append(color)\ngrid = [[0] * W for _ in range(H)]\n(row, col) = (0, 0)\nfor color in colors:\n    if col == W:\n        row += 1\n        col = 0\n    grid[row][col] = color\n    col += 1\nfor row in grid:\n    print(' '.join(map(str, row)))",
        "result": "failed: testcase 1",
        "average_distance": 78.0
    },
    "2319": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2121": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2617": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "175": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "995": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "582": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1402": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1141": {
        "code": "(n, m) = map(int, input().split())\ns = list(input())\nfor _ in range(m):\n    (l, r, c1, c2) = input().split()\n    (l, r) = (int(l) - 1, int(r))\n    for i in range(l, r):\n        if s[i] == c1:\n            s[i] = c2\nprint(''.join(s))",
        "result": "passed",
        "average_distance": 9.5
    },
    "2836": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1109": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2125": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1746": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1294": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1159": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2025": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1429": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1950": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "631": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2480": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2363": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "909": {
        "code": "a = int(input())\nb = int(input())\nc = int(input())\nprint(max(a + b * c, a * (b + c), a * b * c))",
        "result": "failed: testcase 0",
        "average_distance": 4.625
    },
    "154": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "39": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1885": {
        "code": "from math import comb\nn = int(input())\nresult = sum((comb(n, i) for i in range(5, 8)))\nprint(result)",
        "result": "passed",
        "average_distance": 6.818181818181818
    },
    "1180": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1856": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "522": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1719": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1842": {
        "code": "import math\n(a, b, c) = map(int, input().split())\ndiscriminant = b ** 2 - 4 * a * c\nroot1 = (-b + math.sqrt(discriminant)) / (2 * a)\nroot2 = (-b - math.sqrt(discriminant)) / (2 * a)\nprint(root1)\nprint(root2)",
        "result": "passed",
        "average_distance": 6.090909090909091
    },
    "806": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "365": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1158": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "33": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2498": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2309": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1326": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2950": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1983": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "1767": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "2382": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3907": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3676": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3293": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3587": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3530": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3900": {
        "code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\np = int(data[1])\nedges = defaultdict(list)\nfor i in range(n):\n    x = int(data[2 + 2 * i]) - 1\n    y = int(data[3 + 2 * i]) - 1\n    edges[x].append(y)\n    edges[y].append(x)\n    visited[node] = True\n    component.append(node)\n    for neighbor in edges[node]:\n        if not visited[neighbor]:\n            dfs(neighbor, visited, component)\ncomponents = []\nvisited = [False] * n\nfor i in range(n):\n    if not visited[i]:\n        component = []\n        dfs(i, visited, component)\n        components.append(component)\n    m = len(components)\n    total_ways = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            intersect_size = len(set(components[i]) & set(components[j]))\n            if intersect_size >= p:\n                total_ways += 1\n    return total_ways\nresult = count_ways(components, p)\nprint(result)",
        "result": "failed: testcase 0",
        "average_distance": 136.0
    },
    "3996": {
        "code": "from fractions import Fraction\nimport sys\nk = int(input())\na = list(map(int, input().split()))\nn = 1\nfor ai in a:\n    n *= ai\nprobability = Fraction(1, 2) ** n\np = probability.numerator % (10 ** 9 + 7)\nq = probability.denominator % (10 ** 9 + 7)\nprint(f'{p}/{q}')",
        "result": "timed out",
        "average_distance": 42.6
    },
    "3276": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3834": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3012": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3745": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3028": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3196": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3405": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3126": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3279": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3599": {
        "code": "(T, N) = map(int, input().split())\nbreaks = list(map(int, input().split()))\nresult = []\ncurrent_time = 0\nfor i in range(N):\n    if breaks[i] >= T:\n        result.append(T - current_time)\n        current_time = T\n    else:\n        remaining_break = breaks[i]\n        while remaining_break > 0:\n            if current_time + 2 <= T:\n                result.append(2)\n                current_time += 2\n                remaining_break -= 2\n            else:\n                result.append(T - current_time)\n                current_time = T\n                break\nfor r in result:\n    print(r, end=' ')",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3687": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3864": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3504": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3451": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3156": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3697": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3647": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3699": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3145": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3795": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3353": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3065": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3250": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3306": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\ndetectors = []\nfor i in range(N):\n    P = int(data[2 + 2 * i]) - 1\n    C = int(data[3 + 2 * i])\n    detectors.append((P, C))\ndetectors.sort()\nmin_calls = float('inf')\nleft_detector = None\nright_detector = None\nfor i in range(N):\n    if right_detector is not None and detectors[i][0] > right_detector[0]:\n        min_calls = min(min_calls, left_detector[1])\n    if right_detector is None or detectors[i][0] > right_detector[0]:\n        left_detector = right_detector\n        right_detector = detectors[i]\nif right_detector:\n    min_calls = min(min_calls, right_detector[1])\nprint(min_calls)",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3970": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3655": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3589": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3257": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3927": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3319": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3009": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3896": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3509": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3547": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3017": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3076": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3923": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3332": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3240": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3368": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3538": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3183": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3916": {
        "code": "import sys\nfrom collections import defaultdict, deque\nfactorials = [1]\nfor i in range(1, 5001):\n    factorials.append(factorials[-1] * i)\n    for i in range(2, x + 1):\n        if x % i == 0:\n            return x // i\ngraph = defaultdict(list)\nfor x in range(2, factorials[-1] + 1):\n    parent = get_parent(x)\n    graph[parent].append(x)\n    for v in graph[parent]:\n        if v != size:\n            count[v] = count[parent] - child_count[v] + 1\n            if count[v] > size // 2:\n                return find_centroid(v, size, count, child_count)\n    return parent\n    stack = [(centroid, 0)]\n    visited = set()\n    path_sum = 0\n    while stack:\n        (node, dist) = stack.pop()\n        if node in visited:\n            continue\n        visited.add(node)\n        path_sum += len(graph[node]) * dist\n        for neighbor in graph[node]:\n            stack.append((neighbor, dist + 1))\n    return path_sum\nn = int(input())\nk_values = list(map(int, input().split()))\nfragment_nodes = [factorials[k] for k in k_values]\ncentroid = find_centroid(1, len(fragment_nodes), defaultdict(int), defaultdict(int))\nresult = calculate_path_sum(centroid)\nprint(result)",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3195": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3998": {
        "code": "from typing import List\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nratings = list(map(int, data[1:]))\ntarget_rating = max(ratings)\nmatches = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        if ratings[i] != target_rating or ratings[j] != target_rating:\n            matches.append((i, j))\n            ratings[i] -= 1\n            ratings[j] -= 1\nprint(target_rating)\nprint(len(matches))\nfor match in matches:\n    match_str = ['0'] * n\n    for friend in match:\n        match_str[friend] = '1'\n    print(''.join(match_str))",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3150": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3566": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3401": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3660": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3721": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3811": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3528": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3890": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3534": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3371": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3621": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3392": {
        "code": "import sys\nfrom collections import deque\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nheights = []\ngrowth_speeds = []\nindex = 1\nfor i in range(N):\n    row = list(map(int, data[index:index + N]))\n    heights.append(row)\n    index += N\nfor i in range(N):\n    row = list(map(int, data[index:index + N]))\n    growth_speeds.append(row)\n    index += N\n    queue = deque([start])\n    visited = set([start])\n    size = 1\n    while queue:\n        (x, y) = queue.popleft()\n        for (dx, dy) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N and ((nx, ny) not in visited):\n                current_height = heights[x][y] * (N - max(abs(nx - x), abs(ny - y))) / N\n                neighbor_height = heights[nx][ny] * (N - max(abs(nx - x), abs(ny - y))) / N\n                if abs(current_height - neighbor_height) < 1e-06:\n                    visited.add((nx, ny))\n                    queue.append((nx, ny))\n                    size += 1\n    return size\nmax_size = 0\nfor i in range(N):\n    for j in range(N):\n        max_size = max(max_size, bfs((i, j)))\nprint(max_size)",
        "result": "failed: testcase 0",
        "average_distance": 250.0
    },
    "3095": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3769": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3563": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3618": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3830": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3912": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3878": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3010": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3068": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3030": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nvalues = []\nparents = []\nfor i in range(n):\n    (v, p) = map(int, data[2 * i + 1:2 * i + 3])\n    values.append(v)\n    parents.append(p)\n    from collections import defaultdict\n    from heapq import heappop, heappush\n    graph = defaultdict(list)\n    for i in range(1, n):\n        graph[parents[i]].append(i)\n        heap = []\n        valid = True\n        for child in graph[node]:\n            if not dfs(child):\n                valid = False\n            if heap and values[child] >= heap[0][0]:\n                return False\n            heappush(heap, (-values[child], child))\n        if heap:\n            heappop(heap)\n        return valid\n    if dfs(0):\n        return n\n    else:\n        count = 1\n        for i in range(n):\n            graph[i] = [j for j in graph[i] if values[j] < values[i]]\n        for i in range(n):\n            stack = [(i, 1)]\n            while stack:\n                (node, level) = stack.pop()\n                valid = True\n                for child in graph[node]:\n                    if not dfs(child):\n                        valid = False\n                    if heap and values[child] >= heap[0][0]:\n                        return False\n                    heappush(heap, (-values[child], child))\n                if heap:\n                    heappop(heap)\n                count += 1\n        return count\nprint(max_heap_nodes(values, parents))",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3630": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3133": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3480": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3389": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3925": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3700": {
        "code": "(n, k) = map(int, input().split())\ncount = 0\nfor i in range(1, n):\n    if k - i > i and k - i <= n:\n        count += 1\nprint(count)",
        "result": "timed out",
        "average_distance": 15.857142857142858
    },
    "3944": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3821": {
        "code": "import sys\nfrom itertools import combinations\nn = int(input())\np = list(map(float, input().split()))\nmax_prob = 0\nfor i in range(1, n + 1):\n    for combo in combinations(p, i):\n        prob_no_problem = (1 - sum(combo)) ** (n - i)\n        prob_one_problem = sum(combo) * (1 - sum(combo)) ** (n - i)\n        max_prob = max(max_prob, prob_no_problem + prob_one_problem)\nprint(max_prob)",
        "result": "timed out",
        "average_distance": 0.0
    },
    "3667": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3959": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3692": {
        "code": "if __name__ == '__main__':\n    n = int(input())\n    circles = []\n    for _ in range(n):\n        (x, y, r) = map(int, input().split())\n        circles.append((x, y, r))\n    print(count_regions(n, circles))",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3894": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3856": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3282": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3596": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3540": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3354": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3217": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3520": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3475": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3977": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3626": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3584": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3950": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "3075": {
        "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\ng = int(data[1])\nstations = []\nfor i in range(n):\n    d = int(data[2 + 2 * i])\n    c = int(data[3 + 2 * i])\n    stations.append((d, c))\nstations.sort()\ncurrent_position = 0\ntotal_cost = 0\nfuel_tank = g\nfor (d, c) in stations:\n    distance_to_next_station = d - current_position\n    if fuel_tank < distance_to_next_station:\n        print('cancel road trip')\n        sys.exit(0)\n    refuel_amount = distance_to_next_station - fuel_tank\n    total_cost += refuel_amount * c\n    fuel_tank = g\n    current_position = d\nprint(total_cost)",
        "result": "failed: testcase 0",
        "average_distance": 0.0
    },
    "3711": {
        "code": null,
        "result": "failed",
        "average_distance": null
    }
}