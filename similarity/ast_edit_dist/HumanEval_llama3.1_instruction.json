{
    "HumanEval/0": {
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "average_distance": 12.5
    },
    "HumanEval/1": {
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    temp_str = ''\n    for c in paren_string.replace(' ', ''):\n        if c == '(':\n            stack.append(c)\n            temp_str += c\n        elif c == ')':\n            stack.pop()\n            temp_str += c\n            if not stack:\n                result.append(temp_str)\n                temp_str = ''\n    return result",
        "result": "passed",
        "average_distance": 31.0
    },
    "HumanEval/2": {
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/3": {
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/4": {
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(num - mean) for num in numbers)) / len(numbers)",
        "result": "passed",
        "average_distance": 9.421052631578947
    },
    "HumanEval/5": {
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for (i, num) in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result",
        "result": "passed",
        "average_distance": 16.823529411764707
    },
    "HumanEval/6": {
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result",
        "result": "passed",
        "average_distance": 51.63157894736842
    },
    "HumanEval/7": {
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/8": {
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    total_sum = 0\n    for num in numbers:\n        product *= num\n        total_sum += num\n    return (total_sum, product)",
        "result": "passed",
        "average_distance": 4.578947368421052
    },
    "HumanEval/9": {
        "code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result",
        "result": "passed",
        "average_distance": 13.578947368421053
    },
    "HumanEval/10": {
        "code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    while True:\n        if is_palindrome(string):\n            return string\n        for i in range(len(string), 0, -1):\n            prefix = string[:i]\n            postfix = string[i:]\n            if is_palindrome(postfix):\n                return prefix + postfix",
        "result": "failed: ",
        "average_distance": 49.68421052631579
    },
    "HumanEval/11": {
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for (x, y) in zip(a, b)))",
        "result": "passed",
        "average_distance": 21.75
    },
    "HumanEval/12": {
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings)",
        "result": "failed: ",
        "average_distance": 18.9375
    },
    "HumanEval/13": {
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)",
        "result": "passed",
        "average_distance": 1.3333333333333333
    },
    "HumanEval/14": {
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes",
        "result": "passed",
        "average_distance": 15.526315789473685
    },
    "HumanEval/15": {
        "code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))",
        "result": "passed",
        "average_distance": 2.272727272727273
    },
    "HumanEval/16": {
        "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.casefold()))",
        "result": "passed",
        "average_distance": 1.7058823529411764
    },
    "HumanEval/17": {
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]",
        "result": "passed",
        "average_distance": 22.625
    },
    "HumanEval/18": {
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 26.444444444444443
    },
    "HumanEval/19": {
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
        "result": "passed",
        "average_distance": 26.294117647058822
    },
    "HumanEval/20": {
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair",
        "result": "passed",
        "average_distance": 22.473684210526315
    },
    "HumanEval/21": {
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
        "result": "passed",
        "average_distance": 11.923076923076923
    },
    "HumanEval/22": {
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "average_distance": 2.375
    },
    "HumanEval/23": {
        "code": "def strlen(string: str) -> int:\n    return len(string)",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/24": {
        "code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "result": "passed",
        "average_distance": 6.5
    },
    "HumanEval/25": {
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "average_distance": 24.789473684210527
    },
    "HumanEval/26": {
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result",
        "result": "failed: ",
        "average_distance": 5.421052631578948
    },
    "HumanEval/27": {
        "code": "def flip_case(string: str) -> str:\n    return ''.join((c.swapcase() for c in string))",
        "result": "passed",
        "average_distance": 10.0
    },
    "HumanEval/28": {
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "result": "passed",
        "average_distance": 2.6153846153846154
    },
    "HumanEval/29": {
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "average_distance": 0.3157894736842105
    },
    "HumanEval/30": {
        "code": "def get_positive(l: list):\n    return [i for i in l if i > 0]",
        "result": "passed",
        "average_distance": 1.1875
    },
    "HumanEval/31": {
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "average_distance": 5.722222222222222
    },
    "HumanEval/32": {
        "code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\n\ndef find_zero(xs: list):\n    x = -xs[1] / xs[0]\n    return x",
        "result": "failed: ",
        "average_distance": 48.2
    },
    "HumanEval/33": {
        "code": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([y for (j, y) in enumerate(l) if j % 3 == 0])[k] for (k, x) in enumerate(l)]",
        "result": "failed: name 'i' is not defined",
        "average_distance": 22.0
    },
    "HumanEval/34": {
        "code": "def unique(l: list):\n    return sorted(set(l))",
        "result": "passed",
        "average_distance": 1.7333333333333334
    },
    "HumanEval/35": {
        "code": "def max_element(l: list):\n    return max(l)",
        "result": "passed",
        "average_distance": 2.0
    },
    "HumanEval/36": {
        "code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')",
        "result": "failed: ",
        "average_distance": 16.42105263157895
    },
    "HumanEval/37": {
        "code": "def sort_even(l: list):\n    return [x if i % 2 != 0 else y for (i, (x, y)) in enumerate(zip(l, sorted(l)[::2]))]",
        "result": "failed: ",
        "average_distance": 44.73684210526316
    },
    "HumanEval/38": {
        "code": "def encode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)",
        "result": "passed",
        "average_distance": 16.4375
    },
    "HumanEval/39": {
        "code": "def prime_fib(n: int):\n    (a, b) = (0, 1)\n    i = 1\n    while True:\n        if is_prime(b) and i == n:\n            return b\n        (a, b) = (b, a + b)\n        i += 1\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 45.611111111111114
    },
    "HumanEval/40": {
        "code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "result": "passed",
        "average_distance": 25.0
    },
    "HumanEval/41": {
        "code": "def car_race_collision(n: int):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (j - i) % 2 == 0:\n                count += 1\n    return count",
        "result": "failed: ",
        "average_distance": 48.05555555555556
    },
    "HumanEval/42": {
        "code": "def incr_list(l: list):\n    return [x + 1 for x in l]",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/43": {
        "code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "average_distance": 19.05263157894737
    },
    "HumanEval/44": {
        "code": "def change_base(x: int, base: int):\n    digits = '0123456789'\n    result = ''\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result",
        "result": "passed",
        "average_distance": 25.647058823529413
    },
    "HumanEval/45": {
        "code": "def triangle_area(a, h):\n    return a * h / 2",
        "result": "passed",
        "average_distance": 3.5
    },
    "HumanEval/46": {
        "code": "def fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        (a, b, c, d) = (0, 0, 2, 0)\n        for _ in range(3, n + 1):\n            (a, b, c, d) = (b, c, d, a + b + c + d)\n        return d",
        "result": "failed: ",
        "average_distance": 19.0
    },
    "HumanEval/47": {
        "code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2",
        "result": "passed",
        "average_distance": 11.166666666666666
    },
    "HumanEval/48": {
        "code": "def is_palindrome(text: str):\n    return text == text[::-1]",
        "result": "passed",
        "average_distance": 2.5555555555555554
    },
    "HumanEval/49": {
        "code": "def modp(n: int, p: int):\n    return pow(n, 1, p)",
        "result": "failed: ",
        "average_distance": 6.888888888888889
    },
    "HumanEval/50": {
        "code": "def encode_shift(s: str):\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])",
        "result": "passed",
        "average_distance": 1.588235294117647
    },
    "HumanEval/51": {
        "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
        "result": "passed",
        "average_distance": 5.421052631578948
    },
    "HumanEval/52": {
        "code": "def below_threshold(l: list, t: int):\n    return all((i < t for i in l))",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/53": {
        "code": "def add(x: int, y: int):\n    return x + y",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/54": {
        "code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "average_distance": 2.0
    },
    "HumanEval/55": {
        "code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b",
        "result": "passed",
        "average_distance": 13.5
    },
    "HumanEval/56": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 10.61111111111111
    },
    "HumanEval/57": {
        "code": "def monotonic(l: list):\n    return all((x <= y for (x, y) in zip(l, l[1:]))) or all((x >= y for (x, y) in zip(l, l[1:])))",
        "result": "passed",
        "average_distance": 22.764705882352942
    },
    "HumanEval/58": {
        "code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "average_distance": 9.4
    },
    "HumanEval/59": {
        "code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "result": "passed",
        "average_distance": 0.0
    },
    "HumanEval/60": {
        "code": "def sum_to_n(n: int):\n    result = 0\n    for i in range(1, n + 1):\n        result += i",
        "result": "failed: ",
        "average_distance": 5.5625
    },
    "HumanEval/61": {
        "code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "average_distance": 12.9375
    },
    "HumanEval/62": {
        "code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]",
        "result": "passed",
        "average_distance": 13.2
    },
    "HumanEval/63": {
        "code": "def fibfib(n: int):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        (a, b, c) = (0, 0, 1)\n        for _ in range(3, n + 1):\n            (a, b, c) = (b, c, a + b + c)\n        return c",
        "result": "passed",
        "average_distance": 8.68421052631579
    },
    "HumanEval/64": {
        "code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy' and (s.endswith(char) or char != 'y'):\n            count += 1\n    return count",
        "result": "passed",
        "average_distance": 27.11111111111111
    },
    "HumanEval/65": {
        "code": "def circular_shift(x, shift):\n    str_x = str(x)\n    num_digits = len(str_x)\n    shift %= num_digits\n    return str_x[-shift:] + str_x[:-shift]",
        "result": "failed: ",
        "average_distance": 14.842105263157896
    },
    "HumanEval/66": {
        "code": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))",
        "result": "passed",
        "average_distance": 3.3333333333333335
    },
    "HumanEval/67": {
        "code": "def fruit_distribution(s, n):\n    words = s.split()\n    num_apples = int(words[3])\n    num_oranges = int(words[7])\n    return n - num_apples - num_oranges",
        "result": "failed: list index out of range",
        "average_distance": 40.05263157894737
    },
    "HumanEval/68": {
        "code": "def pluck(arr):\n    even_values = [(val, idx) for (idx, val) in enumerate(arr) if val % 2 == 0]\n    return min(even_values, key=lambda x: (x[0], x[1])) if even_values else []",
        "result": "failed: Error",
        "average_distance": 25.823529411764707
    },
    "HumanEval/69": {
        "code": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq_num = -1\n    for (num, count) in freq.items():\n        if count >= num and num > max_freq_num:\n            max_freq_num = num\n    return max_freq_num",
        "result": "passed",
        "average_distance": 18.647058823529413
    },
    "HumanEval/70": {
        "code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)",
        "result": "failed: ",
        "average_distance": 37.35294117647059
    },
    "HumanEval/71": {
        "code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "passed",
        "average_distance": 28.0
    },
    "HumanEval/72": {
        "code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "average_distance": 2.526315789473684
    },
    "HumanEval/73": {
        "code": "def smallest_change(arr):\n    n = len(arr)\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    max_freq = max(freq.values())\n    return n - max_freq * 2",
        "result": "failed: ",
        "average_distance": 55.8421052631579
    },
    "HumanEval/74": {
        "code": "def total_match(lst1, lst2):\n    return lst1 if sum((len(s) for s in lst1)) <= sum((len(s) for s in lst2)) else lst2",
        "result": "passed",
        "average_distance": 15.0
    },
    "HumanEval/75": {
        "code": "def is_multiply_prime(a):\n    for i in range(2, a + 1):\n        if a % i == 0 and (not (is_prime(i) and is_prime(a // i) and is_prime(a // (a // i)))):\n            return False\n    return True\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 62.125
    },
    "HumanEval/76": {
        "code": "def is_simple_power(x, n):\n    return x == n ** round(x ** (1 / n))",
        "result": "failed: This prints if this assert fails 2 (also good for debugging!)",
        "average_distance": 11.571428571428571
    },
    "HumanEval/77": {
        "code": "def iscube(a):\n    return a ** (1.0 / 3.0) % 1 == 0",
        "result": "failed: can't mod complex numbers.",
        "average_distance": 12.692307692307692
    },
    "HumanEval/78": {
        "code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))",
        "result": "passed",
        "average_distance": 9.947368421052632
    },
    "HumanEval/79": {
        "code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'",
        "result": "passed",
        "average_distance": 8.631578947368421
    },
    "HumanEval/80": {
        "code": "def is_happy(s):\n    return len(s) >= 3 and len(set([s[i:i + 3] for i in range(len(s) - 2)])) == len(s) // 3",
        "result": "failed: abcd",
        "average_distance": 17.25
    },
    "HumanEval/81": {
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: ",
        "average_distance": 70.4
    },
    "HumanEval/82": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/83": {
        "code": "def starts_one_ends(n):\n    if n == 1:\n        return 10\n    elif n > 1:\n        return 9 * 10 ** (n - 2) + 10 ** (n - 1)",
        "result": "failed: ",
        "average_distance": 26.76923076923077
    },
    "HumanEval/84": {
        "code": "def solve(N):\n    return bin(sum((int(digit) for digit in format(N, 'b'))))[2:]",
        "result": "failed: Error",
        "average_distance": 17.842105263157894
    },
    "HumanEval/85": {
        "code": "def add(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 0 and x % 2 == 0))",
        "result": "failed: ",
        "average_distance": 5.0
    },
    "HumanEval/86": {
        "code": "def anti_shuffle(s):\n    words = s.split()\n    return ' '.join((''.join(sorted(w)) for w in words))",
        "result": "passed",
        "average_distance": 9.947368421052632
    },
    "HumanEval/87": {
        "code": "def get_row(lst, x):\n    return sorted(((i, j) for (i, row) in enumerate(lst) for (j, val) in enumerate(row) if val == x), key=lambda y: (y[0], -y[1]))",
        "result": "passed",
        "average_distance": 28.235294117647058
    },
    "HumanEval/88": {
        "code": "def sort_array(array):\n    if len(array) < 2:\n        return array\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array)\n    if sum_first_last % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array",
        "result": "passed",
        "average_distance": 29.31578947368421
    },
    "HumanEval/89": {
        "code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            shifted_ascii = (ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset\n            result += chr(shifted_ascii)\n        else:\n            result += char\n    return result",
        "result": "passed",
        "average_distance": 43.0625
    },
    "HumanEval/90": {
        "code": "def next_smallest(lst):\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    lst = sorted(set(lst))\n    return lst[1]",
        "result": "passed",
        "average_distance": 12.529411764705882
    },
    "HumanEval/91": {
        "code": "def is_bored(S):\n    return S.count('I')",
        "result": "failed: Test 2",
        "average_distance": 24.736842105263158
    },
    "HumanEval/92": {
        "code": "def any_int(x, y, z):\n    return (x == y + z or x == z + y or y == x + z or (y == z + x) or (z == x + y) or (z == y + x)) and all((isinstance(i, int) for i in [x, y, z]))",
        "result": "passed",
        "average_distance": 23.444444444444443
    },
    "HumanEval/93": {
        "code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            index = (ord(char) - 97 + 2) % 26\n            result += chr(97 + index)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 37.36842105263158
    },
    "HumanEval/94": {
        "code": "def skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and (max_prime is None or num > max_prime):\n                max_prime = num\n    return sum((int(digit) for digit in str(max_prime)))",
        "result": "passed",
        "average_distance": 56.0
    },
    "HumanEval/95": {
        "code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all((isinstance(key, str) and key.islower() for key in dict.keys()))\n    all_upper = all((isinstance(key, str) and key.isupper() for key in dict.keys()))\n    return all_lower or all_upper",
        "result": "passed",
        "average_distance": 25.58823529411765
    },
    "HumanEval/96": {
        "code": "def count_up_to(n):\n    result = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            result.append(possiblePrime)\n    return result",
        "result": "passed",
        "average_distance": 2.727272727272727
    },
    "HumanEval/97": {
        "code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    result = unit_digit_a * unit_digit_b\n    return result",
        "result": "passed",
        "average_distance": 8.857142857142858
    },
    "HumanEval/98": {
        "code": "def count_upper(s):\n    return sum((1 for (i, c) in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU'))",
        "result": "failed: ",
        "average_distance": 11.631578947368421
    },
    "HumanEval/99": {
        "code": "def closest_integer(value):\n    value = float(value)\n    if value - int(value) >= 0.5:\n        return int(value + 1)\n    else:\n        return int(value)",
        "result": "failed: Test 3",
        "average_distance": 33.125
    },
    "HumanEval/100": {
        "code": "def make_a_pile(n):\n    result = []\n    stones = n\n    for i in range(n):\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n        result.append(stones)\n    return result",
        "result": "failed: Test 3",
        "average_distance": 29.57894736842105
    },
    "HumanEval/101": {
        "code": "def words_string(s):\n    return s.replace(',', '').split()",
        "result": "passed",
        "average_distance": 3.0588235294117645
    },
    "HumanEval/102": {
        "code": "def choose_num(x, y):\n    even_nums = [i for i in range(x, y + 1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1",
        "result": "passed",
        "average_distance": 35.4
    },
    "HumanEval/103": {
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "average_distance": 10.153846153846153
    },
    "HumanEval/104": {
        "code": "def unique_digits(x):\n    return sorted([num for num in x if all((digit % 2 != 0 for digit in str(num)))])",
        "result": "failed: not all arguments converted during string formatting",
        "average_distance": 2.375
    },
    "HumanEval/105": {
        "code": "def by_length(arr):\n    names = 'One Two Three Four Five Six Seven Eight Nine'\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    return [names[x - 1] for x in arr[::-1]]",
        "result": "failed: Error",
        "average_distance": 47.75
    },
    "HumanEval/106": {
        "code": "def f(n):\n    return [i * (i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",
        "result": "failed: ",
        "average_distance": 14.11111111111111
    },
    "HumanEval/107": {
        "code": "def even_odd_palindrome(n):\n    even = sum((1 for i in range(1, n + 1) if str(i) == str(i)[::-1] and int(i) % 2 == 0))\n    odd = n - even\n    return (even, odd)",
        "result": "failed: ",
        "average_distance": 37.27777777777778
    },
    "HumanEval/108": {
        "code": "def count_nums(arr):\n    return sum((1 for num in arr if any((int(digit) > 0 for digit in str(abs(num))))))",
        "result": "failed: ",
        "average_distance": 16.789473684210527
    },
    "HumanEval/109": {
        "code": "def move_one_ball(arr):\n    return len(set(arr)) == 1 or sorted(arr) == list(reversed(arr))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 27.333333333333332
    },
    "HumanEval/110": {
        "code": "def exchange(lst1, lst2):\n    even = [i for i in lst1 if i % 2 == 0]\n    odd = [i for i in lst1 if i % 2 != 0]\n    return 'YES' if len(even) == len(lst1) else 'NO'",
        "result": "failed: ",
        "average_distance": 29.31578947368421
    },
    "HumanEval/111": {
        "code": "def histogram(test):\n    words = test.split()\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    max_count = max(count_dict.values())\n    result = {word: count for (word, count) in count_dict.items() if count == max_count}\n    return result",
        "result": "failed: max() arg is an empty sequence",
        "average_distance": 24.055555555555557
    },
    "HumanEval/112": {
        "code": "def reverse_delete(s, c):\n    filtered_s = ''.join([x for x in s if x not in c])\n    return (filtered_s, filtered_s == filtered_s[::-1])",
        "result": "passed",
        "average_distance": 35.25
    },
    "HumanEval/113": {
        "code": "def odd_count(lst):\n    return [f'the number of odd elements {sum((int(digit) % 2 == 1 for digit in s))}n the str{len(s)}ng {len(s)} of the {len(lst)}nput.' for s in lst]",
        "result": "failed: Test 1",
        "average_distance": 32.23529411764706
    },
    "HumanEval/114": {
        "code": "def minSubArraySum(nums):\n    current_sum = float('inf')\n    current_window_sum = 0\n    for num in nums:\n        current_window_sum += num\n        current_sum = min(current_sum, current_window_sum)\n        if current_window_sum < 0:\n            current_window_sum = 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 22.133333333333333
    },
    "HumanEval/115": {
        "code": "def max_fill(grid, capacity):\n    import math\n    n = len(grid)\n    m = len(grid[0])\n    total_water = sum((sum(row) for row in grid))\n    buckets_used = math.ceil(total_water / capacity)\n    return buckets_used",
        "result": "failed: Error",
        "average_distance": 46.22222222222222
    },
    "HumanEval/116": {
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "average_distance": 1.1578947368421053
    },
    "HumanEval/117": {
        "code": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if count == n:\n            result.append(word)\n    return result",
        "result": "failed: Fifth test error: []",
        "average_distance": 26.941176470588236
    },
    "HumanEval/118": {
        "code": "def get_closest_vowel(word):\n    vowels = 'AEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''",
        "result": "failed: ",
        "average_distance": 33.26315789473684
    },
    "HumanEval/119": {
        "code": "def match_parens(lst):\n    s = ''.join(lst)\n    return 'Yes' if s.count('(') == s.count(')') else 'No'",
        "result": "failed: ",
        "average_distance": 47.8235294117647
    },
    "HumanEval/120": {
        "code": "def maximum(arr, k):\n    return sorted(arr)[-k:]",
        "result": "failed: ",
        "average_distance": 2.875
    },
    "HumanEval/121": {
        "code": "def solution(lst):\n    return sum((x for (i, x) in enumerate(lst) if i % 2 == 0 and x % 2 != 0))",
        "result": "passed",
        "average_distance": 15.0
    },
    "HumanEval/122": {
        "code": "def add_elements(arr, k):\n    return sum((x for x in arr[:k] if 10 <= abs(x) < 100))",
        "result": "failed: ",
        "average_distance": 8.692307692307692
    },
    "HumanEval/123": {
        "code": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n not in sequence:\n            sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])",
        "result": "passed",
        "average_distance": 15.333333333333334
    },
    "HumanEval/124": {
        "code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    (month, day, year) = map(int, parts)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (not 1 <= day <= 31) or (month in [4, 6, 9, 11] and (not 1 <= day <= 30)) or (month == 2 and (not 1 <= day <= 29)):\n        return False\n    return True",
        "result": "passed",
        "average_distance": 68.52631578947368
    },
    "HumanEval/125": {
        "code": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        return txt.replace(',', ' ').split()\n    elif not [c for c in txt if c.isalpha()]:\n        return sum((1 for (i, _) in enumerate(txt) if (ord(c) - ord('a')) % 2 == 0))\n    else:\n        return words",
        "result": "failed: ",
        "average_distance": 52.388888888888886
    },
    "HumanEval/126": {
        "code": "def is_sorted(lst):\n    return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "average_distance": 7.6875
    },
    "HumanEval/127": {
        "code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        is_prime = all((length % i != 0 for i in range(2, int(length ** 0.5) + 1)))\n        return 'YES' if is_prime else 'NO'\n    return 'NO'",
        "result": "failed: ",
        "average_distance": 31.285714285714285
    },
    "HumanEval/128": {
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = 1\n    for num in arr:\n        if num > 0:\n            signs *= 1\n        elif num < 0:\n            signs *= -1\n    total_sum = sum((abs(num) * signs for num in arr))\n    return total_sum",
        "result": "failed: ",
        "average_distance": 31.529411764705884
    },
    "HumanEval/129": {
        "code": "def minPath(grid, k):\n    N = len(grid)\n    seen = set()\n    queue = [(i, j, tuple()) for i in range(N) for j in range(N)]\n    while queue:\n        (x, y, visited) = heapq.heappop(queue)\n        if (x, y, visited) not in seen and len(visited) == k:\n            return list(visited)\n        for (dx, dy) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N and ((nx, ny, visited) not in seen):\n                heapq.heappush(queue, (nx, ny, visited + (grid[nx][ny],)))\n        seen.add((x, y, visited))",
        "result": "failed: name 'heapq' is not defined",
        "average_distance": 144.0
    },
    "HumanEval/130": {
        "code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        sequence = [3, 2, 8]\n        for i in range(3, n + 1):\n            next_number = 1 + sequence[i - 1] if (i - 1) % 2 == 0 else sum(sequence[-3:])\n            sequence.append(next_number)\n        return sequence",
        "result": "failed: ",
        "average_distance": 56.78947368421053
    },
    "HumanEval/131": {
        "code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "average_distance": 7.0
    },
    "HumanEval/132": {
        "code": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 25.555555555555557
    },
    "HumanEval/133": {
        "code": "def sum_squares(lst):\n    return sum((round(num) ** 2 for num in lst))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "average_distance": 7.2
    },
    "HumanEval/134": {
        "code": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (not any((c.isalpha() for c in txt[:-1])))",
        "result": "failed: ",
        "average_distance": 19.944444444444443
    },
    "HumanEval/135": {
        "code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1",
        "result": "failed: ",
        "average_distance": 4.538461538461538
    },
    "HumanEval/136": {
        "code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)",
        "result": "passed",
        "average_distance": 15.357142857142858
    },
    "HumanEval/137": {
        "code": "def compare_one(a, b):\n    if type(a) == str and ',' in a:\n        a = float(a.replace(',', '.'))\n    if type(b) == str and ',' in b:\n        b = float(b.replace(',', '.'))\n    return max(a, b) if a != b else None",
        "result": "failed: ",
        "average_distance": 58.411764705882355
    },
    "HumanEval/138": {
        "code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and all((i % 2 == 0 for i in range(1, 5)))",
        "result": "failed: ",
        "average_distance": 37.375
    },
    "HumanEval/139": {
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined",
        "average_distance": 4.157894736842105
    },
    "HumanEval/140": {
        "code": "def fix_spaces(text):\n    text = ''.join(['_' if c == ' ' else c for c in text])\n    while '__' in text:\n        text = text.replace('__', '-')\n    return text",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)",
        "average_distance": 29.705882352941178
    },
    "HumanEval/141": {
        "code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or (not parts[0][0].isalpha()):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "passed",
        "average_distance": 53.8421052631579
    },
    "HumanEval/142": {
        "code": "def sum_squares(lst):\n    return sum((x ** 3 if i % 4 == 0 and i % 3 != 0 else x ** 2 if i % 3 == 0 else x for (i, x) in enumerate(lst)))",
        "result": "passed",
        "average_distance": 21.5
    },
    "HumanEval/143": {
        "code": "def words_in_sentence(sentence):\n    return ' '.join([word for word in sentence.split() if is_prime(len(word))])\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "average_distance": 52.75
    },
    "HumanEval/144": {
        "code": "def simplify(x, n):\n    (x_num, x_denom) = map(int, x.split('/'))\n    (n_num, n_denom) = map(int, n.split('/'))\n    return x_num * n_denom == x_denom * n_num",
        "result": "failed: test1",
        "average_distance": 9.705882352941176
    },
    "HumanEval/145": {
        "code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))",
        "result": "failed: ",
        "average_distance": 0.5263157894736842
    },
    "HumanEval/146": {
        "code": "def specialFilter(nums):\n    return sum((1 for num in nums if num > 10 and str(num)[0] in '13579' and (str(num)[-1] in '13579')))",
        "result": "passed",
        "average_distance": 13.0
    },
    "HumanEval/147": {
        "code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "average_distance": 38.35294117647059
    },
    "HumanEval/148": {
        "code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    sorted_planets = [p for (i, p) in enumerate(planets) if idx1 < i < idx2]\n    return tuple(sorted(sorted_planets))",
        "result": "failed: Second test error: ()",
        "average_distance": 31.526315789473685
    },
    "HumanEval/149": {
        "code": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0])",
        "result": "failed: ",
        "average_distance": 7.2105263157894735
    },
    "HumanEval/150": {
        "code": "def x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return y\n        return x",
        "result": "failed: ",
        "average_distance": 21.0
    },
    "HumanEval/151": {
        "code": "def double_the_difference(lst):\n    result = sum((n ** 2 for n in lst if isinstance(n, int) and n % 2 != 0))\n    return result",
        "result": "failed: This prints if this assert fails 5 (also good for debugging!)",
        "average_distance": 10.823529411764707
    },
    "HumanEval/152": {
        "code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for (a, b) in zip(game, guess)]",
        "result": "passed",
        "average_distance": 3.1666666666666665
    },
    "HumanEval/153": {
        "code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda extension: sum((c.isupper() for c in extension)) - sum((c.islower() for c in extension)))\n    return f'{class_name}.{strongest}'",
        "result": "passed",
        "average_distance": 31.263157894736842
    },
    "HumanEval/154": {
        "code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "result": "passed",
        "average_distance": 19.5
    },
    "HumanEval/155": {
        "code": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "result": "passed",
        "average_distance": 15.105263157894736
    },
    "HumanEval/156": {
        "code": "def int_to_mini_roman(number):\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for (value, numeral) in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result",
        "result": "passed",
        "average_distance": 21.466666666666665
    },
    "HumanEval/157": {
        "code": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "result": "passed",
        "average_distance": 4.153846153846154
    },
    "HumanEval/158": {
        "code": "def find_max(words):\n    max_word = words[0]\n    for word in words[1:]:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)) and word < max_word:\n            max_word = word\n    return max_word",
        "result": "passed",
        "average_distance": 18.0
    },
    "HumanEval/159": {
        "code": "def eat(number, need, remaining):\n    return [number + min(need, remaining), max(remaining - need, 0)]",
        "result": "passed",
        "average_distance": 14.61111111111111
    },
    "HumanEval/160": {
        "code": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result",
        "result": "failed: ",
        "average_distance": 71.5
    },
    "HumanEval/161": {
        "code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if any((c.isalpha() for c in s)) else s[::-1]",
        "result": "failed: ",
        "average_distance": 36.833333333333336
    },
    "HumanEval/162": {
        "code": null,
        "result": "failed",
        "average_distance": null
    },
    "HumanEval/163": {
        "code": "def generate_integers(a, b):\n    even_digits = [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]\n    return sorted(even_digits)",
        "result": "failed: Test 1",
        "average_distance": 17.77777777777778
    }
}