{
    "HumanEval/0": {
        "similarity": 0.9997605085372925,
        "body": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9997605085372925,
            0.9997584819793701,
            0.9997605085372925,
            0.9997605085372925,
            0.9997605085372925,
            0.9997605085372925,
            0.9997584819793701,
            0.9997584819793701,
            0.9997584819793701,
            0.9996126890182495,
            0.9983068704605103,
            0.9996126890182495,
            0.9997605085372925,
            0.9980325102806091,
            0.9997605085372925,
            0.9997605085372925,
            0.9997584819793701,
            0.9996126890182495,
            0.9997605085372925,
            0.9997605085372925
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9972325563430786,
        "body": "    stack = [] \n    result = []\n    temp = ''\n    for char in paren_string: \n        if char == ' ': \n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                temp += char\n                stack.pop()\n                if not stack:\n                    result.append(temp)\n                    temp = ''\n            else: \n                temp += char",
        "result": "failed: ",
        "similarities": [
            0.9950742125511169,
            0.9952020049095154,
            0.9972325563430786,
            0.9935785531997681,
            0.9971655011177063,
            0.9967221617698669,
            0.9962451457977295,
            0.996440589427948,
            0.9885208606719971,
            0.9964343905448914,
            0.9964804649353027,
            0.9967436790466309,
            0.997090220451355,
            0.9965260028839111,
            0.9957539439201355,
            0.9968366026878357,
            0.9971649646759033,
            0.9969919323921204,
            0.9964174032211304,
            0.9965788125991821
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9978851675987244,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            0.997467041015625,
            0.9958714246749878,
            0.9978851675987244,
            0.9978851675987244,
            0.9978851675987244,
            0.9978851675987244,
            0.9956358075141907,
            0.9973143339157104,
            0.9978851675987244,
            0.9978851675987244,
            0.9910210967063904,
            0.997467041015625,
            0.997467041015625,
            0.9978851675987244,
            0.9978851675987244,
            0.9976294636726379,
            0.9978851675987244,
            0.997467041015625,
            0.9978851675987244,
            0.991876482963562
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9996518492698669,
        "body": "balance = 0\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)",
        "similarities": [
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222,
            0.9968572854995728,
            0.9986106753349304,
            0.9996518492698669,
            0.9986106753349304,
            0.9995120167732239,
            0.9996517896652222,
            0.9996151328086853,
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222,
            0.9996151328086853,
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222,
            0.9996517896652222
        ]
    },
    "HumanEval/4": {
        "similarity": 0.9974106550216675,
        "body": "    return sum(abs(num - sum(numbers) / len(numbers)) for num in numbers) / len(numbers)",
        "result": "passed",
        "similarities": [
            0.9974106550216675,
            0.9972873330116272,
            0.9972873330116272,
            0.9969266653060913,
            0.9969266653060913,
            0.9880812764167786,
            0.9974106550216675,
            0.9969266653060913,
            0.9969266653060913,
            0.9972873330116272,
            0.9974106550216675,
            0.9972873330116272,
            0.9972873330116272,
            0.983329176902771,
            0.9974106550216675,
            0.9974106550216675,
            0.9966626763343811,
            0.9884657859802246,
            0.9974106550216675,
            0.9972873330116272
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9967604279518127,
        "body": "    result = [numbers[0]]\n    for i in range(1, len(numbers) - 1):\n        result.extend([result[-1], delimeter, numbers[i]])\n    if len(numbers) > 1:\n        result.append(numbers[-1])\n    return result",
        "result": "failed: list index out of range",
        "similarities": [
            0.9965692758560181,
            0.9965435862541199,
            0.9902985095977783,
            0.9964616894721985,
            0.9951158761978149,
            0.9960073232650757,
            0.9965692758560181,
            0.9960073232650757,
            0.9951158761978149,
            0.9839527606964111,
            0.9965692758560181,
            0.9934048056602478,
            0.9960073232650757,
            0.9967604279518127,
            0.9895595908164978,
            0.9953462481498718,
            0.9960073232650757,
            0.9907562732696533,
            0.9965692758560181,
            0.9949431419372559
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9952000975608826,
        "body": "    result = []\n    for s in paren_string.split():        \n        level = 0\n        max_level = 0\n        for c in s:\n            if c == '(': \n                level += 1\n            elif c == ')':                \n                level -= 1\n            max_level = max(max_level, level)\n        result.append(max_level)    \n    return result",
        "result": "passed",
        "similarities": [
            0.9944066405296326,
            0.991688072681427,
            0.9939340353012085,
            0.9933295845985413,
            0.9946528077125549,
            0.9918109774589539,
            0.9934321045875549,
            0.9894517660140991,
            0.9896672964096069,
            0.9936216473579407,
            0.9952000975608826,
            0.994728684425354,
            0.9933807253837585,
            0.9948176145553589,
            0.9907647967338562,
            0.9935395121574402,
            0.9942592978477478,
            0.9925854206085205,
            0.984449565410614,
            0.9926334023475647
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9995459318161011,
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed",
        "similarities": [
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9970893859863281,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9970893859863281,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9995459318161011,
            0.9988561272621155,
            0.9995459318161011,
            0.9988561272621155
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9973140358924866,
        "body": "    result_sum = 0\n    result_product = 1\n    for num in numbers:\n        result_sum += num\n        result_product *= num\n    return result_sum, result_product",
        "result": "passed",
        "similarities": [
            0.9973140358924866,
            0.9964451193809509,
            0.9968650341033936,
            0.9973140358924866,
            0.9955020546913147,
            0.9960781931877136,
            0.9972996115684509,
            0.9972996115684509,
            0.9936748147010803,
            0.9972996115684509,
            0.9960477948188782,
            0.9972996115684509,
            0.9963752627372742,
            0.9972400665283203,
            0.9973140358924866,
            0.9972996115684509,
            0.9857791066169739,
            0.9959570169448853,
            0.9897817373275757,
            0.9967639446258545
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9953848123550415,
        "body": "max_so_far = float('-inf')\nresult = []\n\nfor num in numbers:\n    if num > max_so_far:\n        max_so_far = num\n    result.append(max_so_far)",
        "result": "failed: name 'numbers' is not defined",
        "similarities": [
            0.993068516254425,
            0.9953848123550415,
            0.9861980080604553,
            0.9854822754859924,
            0.9949987530708313,
            0.9949987530708313,
            0.9915823936462402,
            0.9949987530708313,
            0.9953848123550415,
            0.9930191040039062,
            0.9950137138366699,
            0.9858862161636353,
            0.9949987530708313,
            0.9882348775863647,
            0.9922665953636169,
            0.9949987530708313,
            0.9925028085708618,
            0.9898685812950134,
            0.989833652973175,
            0.9949987530708313
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9968113303184509,
        "body": "    prefix = string\n    while not is_palindrome(prefix):\n        prefix += chr(ord('a') + len(string) - len(prefix))\n    return prefix + prefix[::-1]",
        "result": "failed: ",
        "similarities": [
            0.99508136510849,
            0.9956108927726746,
            0.9967121481895447,
            0.9960379600524902,
            0.9951695203781128,
            0.9960445761680603,
            0.9951806664466858,
            0.9952031373977661,
            0.9956437945365906,
            0.9960445761680603,
            0.996161937713623,
            0.9962664246559143,
            0.9947314262390137,
            0.9966996908187866,
            0.9957289695739746,
            0.9968113303184509,
            0.9961968660354614,
            0.9960561394691467,
            0.9963812828063965,
            0.9906293153762817
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9912219643592834,
        "body": "    result = ''\n    for c1, c2 in zip(a, b):\n        if c1 == c2:\n            result += '0'\n        else:\n            result += '1'",
        "result": "failed: ",
        "similarities": [
            0.9909136891365051,
            0.9774894714355469,
            0.9909865856170654,
            0.9831480979919434,
            0.9910061359405518,
            0.9910825490951538,
            0.9790228605270386,
            0.9909865856170654,
            0.9886384606361389,
            0.9886384606361389,
            0.9909136891365051,
            0.9886384606361389,
            0.9912219643592834,
            0.9886383414268494,
            0.9866061806678772,
            0.9790942668914795,
            0.9790077209472656,
            0.9857938885688782,
            0.9776118397712708,
            0.9909393787384033
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9963528513908386,
        "body": "    max_length = 0\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result",
        "result": "passed",
        "similarities": [
            0.9961920380592346,
            0.9961920380592346,
            0.9956977367401123,
            0.9963506460189819,
            0.9963528513908386,
            0.995569109916687,
            0.9963507652282715,
            0.9952520132064819,
            0.9915878176689148,
            0.9949226379394531,
            0.9963506460189819,
            0.9963506460189819,
            0.9949226379394531,
            0.9961447715759277,
            0.9956504702568054,
            0.9949358701705933,
            0.9961920380592346,
            0.9963528513908386,
            0.9963528513908386,
            0.9884613752365112
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9923660159111023,
        "body": "    while b:\n        a, b = b, a % b",
        "result": "failed: ",
        "similarities": [
            0.9919851422309875,
            0.9919851422309875,
            0.9724534749984741,
            0.9724534749984741,
            0.9923660159111023,
            0.9920985698699951,
            0.9892997741699219,
            0.9920132160186768,
            0.9881209135055542,
            0.9885064959526062,
            0.9911237955093384,
            0.9922887682914734,
            0.9880449175834656,
            0.9920132160186768,
            0.9870866537094116,
            0.9920132160186768,
            0.9724534749984741,
            0.9885064959526062,
            0.9919851422309875,
            0.9900927543640137
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9949009418487549,
        "body": "    result = [string]\n    for i in range(1, len(string)):\n        result.append(string[:i])",
        "result": "failed: ",
        "similarities": [
            0.9900143146514893,
            0.993489146232605,
            0.9887369871139526,
            0.9892415404319763,
            0.9900143146514893,
            0.9935475587844849,
            0.9892317056655884,
            0.9949009418487549,
            0.9944069385528564,
            0.9944534301757812,
            0.9946843385696411,
            0.9944534301757812,
            0.9892317056655884,
            0.9905564188957214,
            0.9944069385528564,
            0.9943187236785889,
            0.9944069385528564,
            0.9934642314910889,
            0.9944069385528564,
            0.9892317056655884
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9983857870101929,
        "body": "    return ' '.join(map(str, range(n + 1)))",
        "result": "passed",
        "similarities": [
            0.9977095723152161,
            0.9977923035621643,
            0.9979676008224487,
            0.9983857870101929,
            0.9981716871261597,
            0.9981716871261597,
            0.9983283877372742,
            0.9977923035621643,
            0.9977923035621643,
            0.9977095723152161,
            0.9977923035621643,
            0.9979676008224487,
            0.9979676008224487,
            0.9983283877372742,
            0.9983857870101929,
            0.9983857870101929,
            0.9981717467308044,
            0.9983857870101929,
            0.9983283877372742,
            0.9979676008224487
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9996877908706665,
        "body": "    return len(set(string.casefold()))",
        "result": "passed",
        "similarities": [
            0.999531626701355,
            0.999531626701355,
            0.9996877908706665,
            0.9996877908706665,
            0.999531626701355,
            0.999531626701355,
            0.9996877908706665,
            0.9996877908706665,
            0.999531626701355,
            0.9996877908706665,
            0.999531626701355,
            0.9996877908706665,
            0.999531626701355,
            0.9996877908706665,
            0.9996877908706665,
            0.9996877908706665,
            0.999531626701355,
            0.9996877908706665,
            0.9996877908706665,
            0.9996877908706665
        ]
    },
    "HumanEval/17": {
        "similarity": 0.995855450630188,
        "body": "    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 5\n        elif music_string[i:i+2] == 'o|':\n            result.append(2)\n            i += 3\n        elif music_string[i:i+3] == '.|':\n            result.append(1)\n            i += 3\n    return result",
        "result": "timed out",
        "similarities": [
            0.9953215718269348,
            0.9929266571998596,
            0.9925754070281982,
            0.9929791688919067,
            0.9928101301193237,
            0.995855450630188,
            0.995813250541687,
            0.9957727193832397,
            0.9956669211387634,
            0.9945118427276611,
            0.9909862875938416,
            0.9783182740211487,
            0.9956669211387634,
            0.9952446818351746,
            0.9939631223678589,
            0.9920564293861389,
            0.9957727193832397,
            0.9857920408248901,
            0.9958512187004089,
            0.9935778379440308
        ]
    },
    "HumanEval/18": {
        "similarity": 0.9887593984603882,
        "body": "    return len([i for i in range(len(string)) if string.startswith(substring) and i + len(substring) <= len(string)])",
        "result": "failed: ",
        "similarities": [
            0.9846066832542419,
            0.9880321025848389,
            0.9846066832542419,
            0.9846066832542419,
            0.9881540536880493,
            0.9778258800506592,
            0.9846066832542419,
            0.9774870872497559,
            0.9831961393356323,
            0.9884593486785889,
            0.9709360003471375,
            0.9805018901824951,
            0.9846066832542419,
            0.9887593984603882,
            0.9846066832542419,
            0.9846066832542419,
            0.9854325652122498,
            0.9778258800506592,
            0.9846066832542419,
            0.9847229719161987
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9917144775390625,
        "body": "        nums = {}\n        for num in numbers.split():\n            if num in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']:\n                nums[num] = int(num.replace(' ', ''))  # map string to int value\n        return ' '.join(sorted(nums))",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9915267825126648,
            0.9907245635986328,
            0.9884951710700989,
            0.9887499809265137,
            0.9875581860542297,
            0.9866748452186584,
            0.9844022989273071,
            0.9896267652511597,
            0.9869117736816406,
            0.9916183352470398,
            0.9904261231422424,
            0.9907245635986328,
            0.9857414960861206,
            0.9905097484588623,
            0.9895985126495361,
            0.985034167766571,
            0.9895098805427551,
            0.9911592602729797,
            0.9917144775390625,
            0.980639636516571
        ]
    },
    "HumanEval/20": {
        "similarity": 0.997467577457428,
        "body": "    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return tuple(sorted(closest_pair))",
        "result": "passed",
        "similarities": [
            0.9900478720664978,
            0.9973176717758179,
            0.9971376061439514,
            0.9972648620605469,
            0.9889058470726013,
            0.9834022521972656,
            0.997467577457428,
            0.9944865703582764,
            0.9973742961883545,
            0.9968882203102112,
            0.9973351359367371,
            0.9972751140594482,
            0.9972751140594482,
            0.9973351359367371,
            0.9973151683807373,
            0.9969558715820312,
            0.9941693544387817,
            0.9973141551017761,
            0.9968223571777344,
            0.9964910745620728
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9969542622566223,
        "body": "min_val = min(numbers)\nmax_val = max(numbers)\n\nreturn [(x - min_val) / (max_val - min_val) for x in numbers]",
        "result": "failed: 'return' outside function (<string>, line 13)",
        "similarities": [
            0.9969542622566223,
            0.9959074258804321,
            0.9945184588432312,
            0.9959074258804321,
            0.9945184588432312,
            0.9969542622566223,
            0.9945184588432312,
            0.9945184588432312,
            0.9969542622566223,
            0.9945184588432312,
            0.9969542622566223,
            0.9945184588432312,
            0.9969542622566223,
            0.9969542622566223,
            0.9945184588432312,
            0.9965947866439819,
            0.9968504905700684,
            0.9969542622566223,
            0.9969542622566223,
            0.9965947866439819
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9953557252883911,
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "similarities": [
            0.9953557252883911,
            0.9953557252883911,
            0.9952166676521301,
            0.9952166676521301,
            0.993772029876709,
            0.9882973432540894,
            0.9944468140602112,
            0.9953557252883911,
            0.9953557252883911,
            0.9953557252883911,
            0.9882973432540894,
            0.9953557252883911,
            0.9953556060791016,
            0.9953556060791016,
            0.995274007320404,
            0.9919508695602417,
            0.9597349762916565,
            0.9882973432540894,
            0.9882973432540894,
            0.9953557252883911
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9999998211860657,
        "body": "    return len(string)",
        "result": "passed",
        "similarities": [
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657,
            0.9999998211860657
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9974777698516846,
        "body": "i = n // 2\nwhile i > 0:\n    if n % i == 0:\n        return i\n    i -= 1",
        "result": "failed: 'return' outside function (<string>, line 11)",
        "similarities": [
            0.9967880249023438,
            0.9973431825637817,
            0.9963752627372742,
            0.9973431825637817,
            0.9951097369194031,
            0.9973431825637817,
            0.9969109296798706,
            0.9972658753395081,
            0.9973704814910889,
            0.9973431825637817,
            0.9968423247337341,
            0.9956094026565552,
            0.9962348937988281,
            0.9973704814910889,
            0.9965115785598755,
            0.9968374371528625,
            0.9968423247337341,
            0.9973704814910889,
            0.9931271076202393,
            0.9974777698516846
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9965630769729614,
        "body": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.extend([i] * count)\n    if n > 1:\n        factors.append(n)",
        "result": "failed: ",
        "similarities": [
            0.9927148222923279,
            0.9944679141044617,
            0.9956066608428955,
            0.9964950084686279,
            0.995090663433075,
            0.9917734265327454,
            0.995654284954071,
            0.9944447875022888,
            0.9940456748008728,
            0.996224045753479,
            0.9937189817428589,
            0.9935342073440552,
            0.9962685108184814,
            0.9940508604049683,
            0.9916993379592896,
            0.9957150816917419,
            0.9963396787643433,
            0.9965630769729614,
            0.9914323091506958,
            0.9941818118095398
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9991277456283569,
        "body": "seen = set()\nresult = []\nfor num in numbers:\n    if num not in seen:\n        seen.add(num)\n        result.append(num)",
        "result": "failed: name 'numbers' is not defined",
        "similarities": [
            0.998998761177063,
            0.9991277456283569,
            0.9991277456283569,
            0.9964799284934998,
            0.9991277456283569,
            0.9986507892608643,
            0.9969462156295776,
            0.9991277456283569,
            0.9991277456283569,
            0.9991277456283569,
            0.9991277456283569,
            0.9916387796401978,
            0.998998761177063,
            0.9964799284934998,
            0.9991277456283569,
            0.9991277456283569,
            0.9991277456283569,
            0.9991277456283569,
            0.9991277456283569,
            0.998998761177063
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9993930459022522,
        "body": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "result": "passed",
        "similarities": [
            0.9993930459022522,
            0.9992868304252625,
            0.9989925026893616,
            0.9993695616722107,
            0.9992868304252625,
            0.9993695616722107,
            0.9990409016609192,
            0.9989505410194397,
            0.9993930459022522,
            0.9990409016609192,
            0.9993695616722107,
            0.9990278482437134,
            0.9993695616722107,
            0.9992489218711853,
            0.9992489218711853,
            0.9989505410194397,
            0.9989925026893616,
            0.9989505410194397,
            0.9993930459022522,
            0.9992868304252625
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9994428753852844,
        "body": "    return ''.join(strings)",
        "result": "passed",
        "similarities": [
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9963234663009644,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9963234663009644,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844,
            0.9964797496795654,
            0.9994428753852844,
            0.9994428753852844,
            0.9994428753852844
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9995056986808777,
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "similarities": [
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9955510497093201,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9955510497093201,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777,
            0.9995056986808777
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9982807040214539,
        "body": "    return [num for num in l if num > 0]",
        "result": "passed",
        "similarities": [
            0.9982123970985413,
            0.9948877096176147,
            0.9982807040214539,
            0.9982807040214539,
            0.9982805848121643,
            0.9982805848121643,
            0.9949406981468201,
            0.9958654642105103,
            0.9982807040214539,
            0.9982123970985413,
            0.9982123970985413,
            0.9982123970985413,
            0.9981655478477478,
            0.9981655478477478,
            0.9982807040214539,
            0.9982123970985413,
            0.9982805848121643,
            0.9944032430648804,
            0.9982123970985413,
            0.9939277172088623
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9983014464378357,
        "body": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9981338381767273,
            0.9978709816932678,
            0.9978709816932678,
            0.9983014464378357,
            0.9981532692909241,
            0.9980404376983643,
            0.9966006875038147,
            0.9952008128166199,
            0.9960803985595703,
            0.9982430338859558,
            0.9981338381767273,
            0.9966257810592651,
            0.9980728030204773,
            0.9978709816932678,
            0.9964920878410339,
            0.9968333840370178,
            0.9956468343734741,
            0.9978709816932678,
            0.9981619119644165,
            0.9980273842811584
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9919905662536621,
        "body": "    import math\n    return round(-xs[0] / xs[-1], 2) if len(xs) > 1 else 0",
        "result": "failed: ",
        "similarities": [
            0.9903521537780762,
            0.9901857972145081,
            0.9903521537780762,
            0.9873424172401428,
            0.9895616173744202,
            0.9906194806098938,
            0.9874910116195679,
            0.9898357391357422,
            0.9898037314414978,
            0.9918128848075867,
            0.9832507967948914,
            0.9898878335952759,
            0.9901357293128967,
            0.9871343374252319,
            0.9644938111305237,
            0.9909517168998718,
            0.9853694438934326,
            0.9860777854919434,
            0.9877694845199585,
            0.9919905662536621
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9934328198432922,
        "body": "    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0])[i%3] for i, x in enumerate(l)]",
        "result": "failed: ",
        "similarities": [
            0.9853692650794983,
            0.9875423312187195,
            0.9869074821472168,
            0.9887789487838745,
            0.9921408295631409,
            0.9900838136672974,
            0.988775372505188,
            0.9934328198432922,
            0.990453839302063,
            0.9878708720207214,
            0.985518217086792,
            0.9922391772270203,
            0.9918937683105469,
            0.9921408295631409,
            0.9925128817558289,
            0.9926508665084839,
            0.9930374026298523,
            0.9873000979423523,
            0.9925878643989563,
            0.9927796721458435
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9949210286140442,
        "body": "if len(l) == 0:\n    return []\nelse:\n    return sorted(set(l))",
        "result": "failed: 'return' outside function (<string>, line 9)",
        "similarities": [
            0.9885212779045105,
            0.9793510437011719,
            0.9931046366691589,
            0.9941558837890625,
            0.9941558837890625,
            0.9949210286140442,
            0.9919376373291016,
            0.9941558837890625,
            0.9941558837890625,
            0.9941558837890625,
            0.9949210286140442,
            0.9941558837890625,
            0.9949210286140442,
            0.9931046366691589,
            0.9938668012619019,
            0.9918857216835022,
            0.9919376373291016,
            0.9925419688224792,
            0.9931046366691589,
            0.9890341758728027
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9914076924324036,
        "body": "    return max(l)",
        "result": "passed",
        "similarities": [
            0.9871571063995361,
            0.987626314163208,
            0.9912512898445129,
            0.9671344757080078,
            0.9882156252861023,
            0.9757936596870422,
            0.9914076924324036,
            0.9679285287857056,
            0.9850603342056274,
            0.9851961731910706,
            0.990311861038208,
            0.9886882305145264,
            0.990311861038208,
            0.9914076924324036,
            0.990311861038208,
            0.9914076924324036,
            0.9914076924324036,
            0.9899269938468933,
            0.987138032913208,
            0.9914076924324036
        ]
    },
    "HumanEval/36": {
        "similarity": 0.997236967086792,
        "body": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and str(i).count('7') > 0:\n            count += 1\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9959068298339844,
            0.9966855645179749,
            0.9968575835227966,
            0.9961776733398438,
            0.9968575835227966,
            0.9961776733398438,
            0.9961776733398438,
            0.9970306754112244,
            0.9970306754112244,
            0.9920369982719421,
            0.996235728263855,
            0.9954503774642944,
            0.9941390156745911,
            0.9906917214393616,
            0.995335042476654,
            0.9968575835227966,
            0.9970306754112244,
            0.997236967086792,
            0.9970306754112244,
            0.9970306754112244
        ]
    },
    "HumanEval/37": {
        "similarity": 0.992775559425354,
        "body": "    return [x if i % 2 != 0 else sorted([y for y in l if (i // 2) * 2 == j and 0 <= j < len(l)])[0] for i, x in enumerate(l)]",
        "result": "failed: name 'j' is not defined",
        "similarities": [
            0.9892686605453491,
            0.9778866171836853,
            0.992775559425354,
            0.9912471771240234,
            0.9914241433143616,
            0.9925834536552429,
            0.9885950684547424,
            0.9886525869369507,
            0.9812121391296387,
            0.9909543395042419,
            0.9837701916694641,
            0.9856374859809875,
            0.9917114973068237,
            0.9926022887229919,
            0.9764879941940308,
            0.9926101565361023,
            0.9874538779258728,
            0.9848718047142029,
            0.9915938377380371,
            0.9916113018989563
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9895195364952087,
        "body": "        decoded_groups = [s[i:i+3] for i in range(0, len(s), 3)]\n        return \"\".join([group[-1] + group[1:-1][::-1] + group[0] if len(group) == 3 else group for group in decoded_groups])",
        "result": "failed: unexpected indent (<string>, line 18)",
        "similarities": [
            0.9895195364952087,
            0.9848313927650452,
            0.9887357354164124,
            0.9822981953620911,
            0.9887203574180603,
            0.9868837594985962,
            0.9841503500938416,
            0.9832918047904968,
            0.9887965321540833,
            0.984519362449646,
            0.9854387044906616,
            0.9862493276596069,
            0.9893690347671509,
            0.9828633666038513,
            0.9863561391830444,
            0.9862827658653259,
            0.9859718680381775,
            0.9829726815223694,
            0.9809892773628235,
            0.9868578910827637
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9934611916542053,
        "body": "    a, b = 2, 3\n    for _ in range(n-1):\n        if is_prime(b):\n            return b\n        a, b = b, a+b\n    return None",
        "result": "failed: ",
        "similarities": [
            0.9924699664115906,
            0.9902520775794983,
            0.9926949739456177,
            0.9934611916542053,
            0.9912158846855164,
            0.992714524269104,
            0.9931121468544006,
            0.9932206869125366,
            0.9908733367919922,
            0.9928327798843384,
            0.9931691884994507,
            0.9932742714881897,
            0.9895239472389221,
            0.9934021830558777,
            0.9331449270248413,
            0.9909180402755737,
            0.9918596148490906,
            0.9909565448760986,
            0.9882003664970398,
            0.9928886294364929
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9938746094703674,
        "body": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9927585124969482,
            0.9930280447006226,
            0.9864155650138855,
            0.9934674501419067,
            0.9926788210868835,
            0.9927585124969482,
            0.9938746094703674,
            0.991248607635498,
            0.9873788952827454,
            0.9938722252845764,
            0.9927448630332947,
            0.9883029460906982,
            0.9932256937026978,
            0.9821335673332214,
            0.9938746094703674,
            0.9912322163581848,
            0.9865862131118774,
            0.9862409830093384,
            0.9938746094703674,
            0.9858925342559814
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9968756437301636,
        "body": "    return n * (n - 1) // 2",
        "result": "failed: ",
        "similarities": [
            0.9954724907875061,
            0.9919378161430359,
            0.995735764503479,
            0.9959145784378052,
            0.9941803812980652,
            0.9968756437301636,
            0.9960954785346985,
            0.9961638450622559,
            0.9960954785346985,
            0.995735764503479,
            0.9918017983436584,
            0.9968756437301636,
            0.9961638450622559,
            0.9836896657943726,
            0.9968756437301636,
            0.9957806468009949,
            0.9950947165489197,
            0.9954724907875061,
            0.9935662150382996,
            0.9968756437301636
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9999108910560608,
        "body": "    return [i + 1 for i in l]",
        "result": "passed",
        "similarities": [
            0.9998924136161804,
            0.9998704791069031,
            0.9998922944068909,
            0.9998704791069031,
            0.9998704791069031,
            0.9999108910560608,
            0.9999108910560608,
            0.9998704791069031,
            0.9998922944068909,
            0.9999108910560608,
            0.9998922944068909,
            0.9998922944068909,
            0.9999108910560608,
            0.9998922944068909,
            0.9998922944068909,
            0.9999108910560608,
            0.9998924136161804,
            0.9999108910560608,
            0.9999108910560608,
            0.9998922944068909
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9976305961608887,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9968200325965881,
            0.9976305961608887,
            0.9968200325965881,
            0.9968200325965881,
            0.9968200325965881,
            0.9976305961608887,
            0.9976305961608887,
            0.9974538683891296,
            0.9968270063400269,
            0.9976305961608887,
            0.9974538683891296,
            0.9976305961608887,
            0.9968200325965881,
            0.9976305961608887,
            0.9974538683891296,
            0.9879740476608276,
            0.9968200325965881,
            0.9976305961608887,
            0.9968200325965881,
            0.9931563138961792
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9943553805351257,
        "body": "    convertString = \"0123456789ABC\" if base > 1 else \"01234567\"\n    result = \"\"\n    while x > 0:\n        result = convertString[x % base] + result\n        x //= base\n    return result",
        "result": "passed",
        "similarities": [
            0.991876482963562,
            0.9941082000732422,
            0.9935721158981323,
            0.9901658892631531,
            0.9857026934623718,
            0.9929929971694946,
            0.9939576983451843,
            0.9919857382774353,
            0.9930688738822937,
            0.9935720562934875,
            0.9922116994857788,
            0.9898388385772705,
            0.993845522403717,
            0.9943553805351257,
            0.9922116994857788,
            0.9933669567108154,
            0.975713849067688,
            0.9924533367156982,
            0.980792224407196,
            0.9928867816925049
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9996289610862732,
        "body": "    return 0.5 * a * h",
        "result": "passed",
        "similarities": [
            0.9996289610862732,
            0.9984232187271118,
            0.9996289610862732,
            0.9996289610862732,
            0.9989104270935059,
            0.9996289610862732,
            0.9996289610862732,
            0.9996289610862732,
            0.9989104270935059,
            0.9996289610862732,
            0.9996289610862732,
            0.9996289610862732,
            0.9989104270935059,
            0.9996289610862732,
            0.9996289610862732,
            0.9996289610862732,
            0.9989104270935059,
            0.9996289610862732,
            0.9996289610862732,
            0.9996289610862732
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9953611493110657,
        "body": "    if n < 0 or n >= 5:\n        return 0\n    a, b, c = 0, 2, 2\n    for _ in range(3, n+1):\n        a, b, c = b, c, c+b\n    return c",
        "result": "failed: ",
        "similarities": [
            0.9953611493110657,
            0.9897724986076355,
            0.9941306114196777,
            0.9943767189979553,
            0.9913542866706848,
            0.9944459795951843,
            0.9946237206459045,
            0.987034261226654,
            0.9946353435516357,
            0.9913102984428406,
            0.9948457479476929,
            0.9943674802780151,
            0.9949197173118591,
            0.9912480711936951,
            0.9835883975028992,
            0.9942528605461121,
            0.9887985587120056,
            0.9945599436759949,
            0.9932143688201904,
            0.9942113161087036
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9956943988800049,
        "body": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        mid1 = l[n//2 - 1]\n        mid2 = l[n//2]\n        return (mid1 + mid2) / 2",
        "result": "passed",
        "similarities": [
            0.9949228167533875,
            0.9956200122833252,
            0.9908969402313232,
            0.9924302697181702,
            0.9947103261947632,
            0.9931802153587341,
            0.9950138926506042,
            0.9953964948654175,
            0.9931674599647522,
            0.9924864768981934,
            0.9936954379081726,
            0.9947148561477661,
            0.994933009147644,
            0.9956651329994202,
            0.9956943988800049,
            0.9947462677955627,
            0.9897513389587402,
            0.9956651329994202,
            0.9951282143592834,
            0.9943917989730835
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9984766244888306,
        "body": "    return text.lower() == ''.join(reversed(text)).lower()",
        "result": "passed",
        "similarities": [
            0.996878981590271,
            0.9983127117156982,
            0.9984766244888306,
            0.9984766244888306,
            0.9981713891029358,
            0.9983929395675659,
            0.9983127117156982,
            0.9961932301521301,
            0.9982995390892029,
            0.9981713891029358,
            0.9984766244888306,
            0.996878981590271,
            0.996878981590271,
            0.9981713891029358,
            0.9981713891029358,
            0.9982995390892029,
            0.996878981590271,
            0.9973009824752808,
            0.9984766244888306,
            0.9983929395675659
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9982638955116272,
        "body": "    return pow(2, n, p)",
        "result": "passed",
        "similarities": [
            0.9976633787155151,
            0.9982638955116272,
            0.9982638955116272,
            0.9982638955116272,
            0.9976633787155151,
            0.9982638955116272,
            0.9926912188529968,
            0.9894391298294067,
            0.9976633787155151,
            0.9982638955116272,
            0.9976264834403992,
            0.9976633787155151,
            0.9982638955116272,
            0.9923353791236877,
            0.9977812767028809,
            0.9927312135696411,
            0.9982638955116272,
            0.9982638955116272,
            0.9982638955116272,
            0.9982638955116272
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9997872114181519,
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])",
        "result": "passed",
        "similarities": [
            0.9995806813240051,
            0.9997872114181519,
            0.9997872114181519,
            0.9997872114181519,
            0.9993402361869812,
            0.9997872114181519,
            0.9997872114181519,
            0.9997872114181519,
            0.9995884299278259,
            0.9997872114181519,
            0.9997872114181519,
            0.9996694326400757,
            0.9995884299278259,
            0.9997872114181519,
            0.9995884299278259,
            0.9994657635688782,
            0.9997515678405762,
            0.9995883107185364,
            0.9997872114181519,
            0.9997872114181519
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9970670938491821,
        "body": "    return \"\".join(char for char in text if not char.lower() in 'aeiou')",
        "result": "passed",
        "similarities": [
            0.9922956228256226,
            0.9964993000030518,
            0.9962215423583984,
            0.9955859780311584,
            0.9965760111808777,
            0.9958456158638,
            0.9969185590744019,
            0.9967607259750366,
            0.98697429895401,
            0.9944733381271362,
            0.9968643188476562,
            0.9960271120071411,
            0.9944658875465393,
            0.9970670938491821,
            0.9968643188476562,
            0.9946839213371277,
            0.9954749941825867,
            0.996680498123169,
            0.9967314004898071,
            0.9957659840583801
        ]
    },
    "HumanEval/52": {
        "similarity": 0.999464750289917,
        "body": "    all(x < t for x in l)",
        "result": "failed: ",
        "similarities": [
            0.999464750289917,
            0.9992804527282715,
            0.9991979002952576,
            0.999464750289917,
            0.9991979002952576,
            0.9990425109863281,
            0.9991979002952576,
            0.999464750289917,
            0.999464750289917,
            0.999464750289917,
            0.9991979002952576,
            0.999464750289917,
            0.999464750289917,
            0.999464750289917,
            0.999464750289917,
            0.999464750289917,
            0.99444580078125,
            0.9990425109863281,
            0.999464750289917,
            0.999464750289917
        ]
    },
    "HumanEval/53": {
        "similarity": 1.0,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9999709129333496,
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "similarities": [
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9994477033615112,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496,
            0.9999709129333496
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9985018372535706,
        "body": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
        "result": "passed",
        "similarities": [
            0.9911286234855652,
            0.9924191236495972,
            0.9984817504882812,
            0.9978280663490295,
            0.9985018372535706,
            0.9985018372535706,
            0.9985018372535706,
            0.9984538555145264,
            0.9984415769577026,
            0.9985018372535706,
            0.9962276816368103,
            0.9984538555145264,
            0.9970027804374695,
            0.9968845248222351,
            0.9984538555145264,
            0.9984817504882812,
            0.9985018372535706,
            0.9974877238273621,
            0.9970738291740417,
            0.9984538555145264
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9959905743598938,
        "body": "    stack = []\n    for char in brackets: \n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0",
        "result": "passed",
        "similarities": [
            0.9737802743911743,
            0.9957203269004822,
            0.994553804397583,
            0.9945875406265259,
            0.9957203269004822,
            0.9958978891372681,
            0.9959905743598938,
            0.9716176390647888,
            0.9955488443374634,
            0.9957203269004822,
            0.9957203269004822,
            0.9958978891372681,
            0.99413001537323,
            0.9950483441352844,
            0.9955891370773315,
            0.9950844645500183,
            0.9946614503860474,
            0.9946475625038147,
            0.9957203269004822,
            0.9958978891372681
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9926607012748718,
        "body": "    return (l[1:] == sorted(l)) or (l[1:] == sorted(l, reverse=True))",
        "result": "failed: ",
        "similarities": [
            0.9914103150367737,
            0.9909714460372925,
            0.9913691282272339,
            0.9845194816589355,
            0.9920817017555237,
            0.9914103150367737,
            0.9768558144569397,
            0.9905999898910522,
            0.9926607012748718,
            0.9888548851013184,
            0.9914103150367737,
            0.992173433303833,
            0.9913361072540283,
            0.9857886433601379,
            0.9921732544898987,
            0.9818835854530334,
            0.9892798066139221,
            0.9921678304672241,
            0.9926607012748718,
            0.9876920580863953
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9990706443786621,
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "similarities": [
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9953013062477112,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9990706443786621,
            0.9986644387245178,
            0.9986644387245178,
            0.9958199262619019,
            0.9953013062477112,
            0.9986644387245178
        ]
    },
    "HumanEval/59": {
        "similarity": 0.9928886890411377,
        "body": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            while n % i == 0:\n                n //= i\n            i += 1\n    return n",
        "result": "failed: ",
        "similarities": [
            0.9921371936798096,
            0.980006754398346,
            0.9927570819854736,
            0.9928886890411377,
            0.992076575756073,
            0.9878415465354919,
            0.990525484085083,
            0.9902536273002625,
            0.98863685131073,
            0.992160975933075,
            0.9906513690948486,
            0.9926979541778564,
            0.9918408989906311,
            0.9902536273002625,
            0.9849891662597656,
            0.9337718486785889,
            0.992076575756073,
            0.9916318655014038,
            0.9893696308135986,
            0.9924070239067078
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9980355501174927,
        "body": "    result = 0\n    for i in range(1, n+1):\n        result += i",
        "result": "failed: ",
        "similarities": [
            0.9980355501174927,
            0.9970085620880127,
            0.9937362670898438,
            0.9971797466278076,
            0.9980071187019348,
            0.9980355501174927,
            0.9964599609375,
            0.9971950054168701,
            0.9964599609375,
            0.9973441958427429,
            0.9937362670898438,
            0.9980071187019348,
            0.9937362670898438,
            0.9980071187019348,
            0.9971797466278076,
            0.9980355501174927,
            0.9937362670898438,
            0.9980355501174927,
            0.9971929788589478,
            0.9980355501174927
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9912135601043701,
        "body": "    stack = []\n    for char in brackets: \n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop() \n    return len(stack) == 0",
        "result": "passed",
        "similarities": [
            0.978873610496521,
            0.9908903241157532,
            0.9909189343452454,
            0.9907710552215576,
            0.9854187369346619,
            0.9907710552215576,
            0.9907710552215576,
            0.9818406701087952,
            0.9909189343452454,
            0.9909189343452454,
            0.9431772828102112,
            0.9805805683135986,
            0.9891785383224487,
            0.9785730242729187,
            0.990090012550354,
            0.990203857421875,
            0.9910392761230469,
            0.9912135601043701,
            0.9899341464042664,
            0.9910392761230469
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9960042238235474,
        "body": "    return [i * xs[i+1] for i in range(len(xs)-1)]",
        "result": "failed: ",
        "similarities": [
            0.9960041046142578,
            0.9950675964355469,
            0.9934383034706116,
            0.991827130317688,
            0.9927959442138672,
            0.9938639402389526,
            0.9960041046142578,
            0.9902202486991882,
            0.9960041046142578,
            0.9676005840301514,
            0.9960041046142578,
            0.9927959442138672,
            0.9960041046142578,
            0.9878458976745605,
            0.9960042238235474,
            0.9923830628395081,
            0.9960041046142578,
            0.9958235025405884,
            0.9960041046142578,
            0.9960041046142578
        ]
    },
    "HumanEval/63": {
        "similarity": 0.99822998046875,
        "body": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 0\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b",
        "result": "failed: ",
        "similarities": [
            0.9969504475593567,
            0.9982147216796875,
            0.9974839091300964,
            0.9981416463851929,
            0.9982012510299683,
            0.9968820810317993,
            0.992093026638031,
            0.9958116412162781,
            0.9979425668716431,
            0.9973028898239136,
            0.99822998046875,
            0.997994065284729,
            0.9981391429901123,
            0.9976539611816406,
            0.997994065284729,
            0.9977055788040161,
            0.9967790246009827,
            0.9969929456710815,
            0.9970195293426514,
            0.9975425601005554
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9963685274124146,
        "body": "    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy' and (char == 'y' or not s.endswith('y')):\n            count += 1\n    return count",
        "result": "failed: Test 3",
        "similarities": [
            0.9961808919906616,
            0.9928767681121826,
            0.9962989687919617,
            0.9897340536117554,
            0.9899739623069763,
            0.9961178302764893,
            0.9955247640609741,
            0.995073139667511,
            0.9962965250015259,
            0.9913731813430786,
            0.99624103307724,
            0.9947254657745361,
            0.9963685274124146,
            0.9928769469261169,
            0.9928767681121826,
            0.995936930179596,
            0.9885706901550293,
            0.9909317493438721,
            0.9960811138153076,
            0.995965838432312
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9933537244796753,
        "body": "    str_result = str(x)[::-1]\n    shift %= len(str_result)\n    return str_result[shift:] + str_result[:shift] if shift else str_result",
        "result": "failed: ",
        "similarities": [
            0.9930952191352844,
            0.989939272403717,
            0.9912723898887634,
            0.9932734966278076,
            0.9848253130912781,
            0.9884149432182312,
            0.9900082945823669,
            0.9716921448707581,
            0.9922730326652527,
            0.9933537244796753,
            0.9871811270713806,
            0.992944598197937,
            0.9852656126022339,
            0.9911353588104248,
            0.9863624572753906,
            0.9867978692054749,
            0.9862090945243835,
            0.9907949566841125,
            0.9905053973197937,
            0.989629328250885
        ]
    },
    "HumanEval/66": {
        "similarity": 0.9954307079315186,
        "body": "    return sum(ord(c) for c in s if 'A' <= c <= 'Z')",
        "result": "passed",
        "similarities": [
            0.995430588722229,
            0.9953263998031616,
            0.9949276447296143,
            0.9851012229919434,
            0.9864941835403442,
            0.9953874349594116,
            0.9953874349594116,
            0.9875938296318054,
            0.9953874349594116,
            0.9949276447296143,
            0.995430588722229,
            0.995430588722229,
            0.995430588722229,
            0.9953874349594116,
            0.995430588722229,
            0.9879791140556335,
            0.9749719500541687,
            0.995430588722229,
            0.9953874349594116,
            0.9954307079315186
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9942674040794373,
        "body": "    return s.count('mango') + int(s.split()[0].split('-')[0]) if 'mango' in s else 0",
        "result": "failed: ",
        "similarities": [
            0.994109034538269,
            0.9903668165206909,
            0.9862112998962402,
            0.9924649596214294,
            0.9939616322517395,
            0.9936715960502625,
            0.9940119385719299,
            0.9939914345741272,
            0.9920749664306641,
            0.9852995872497559,
            0.9831388592720032,
            0.9920909404754639,
            0.9906150698661804,
            0.9942674040794373,
            0.9937120079994202,
            0.993019700050354,
            0.9920427203178406,
            0.9924105405807495,
            0.9915304780006409,
            0.9926835894584656
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9955928325653076,
        "body": "    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n    return [smallest_even_node[0], smallest_even_node[1]]",
        "result": "passed",
        "similarities": [
            0.99444180727005,
            0.9946083426475525,
            0.9943903684616089,
            0.9880523681640625,
            0.9932281970977783,
            0.9846934080123901,
            0.9946737885475159,
            0.9953583478927612,
            0.990505039691925,
            0.9942735433578491,
            0.9946111440658569,
            0.9945429563522339,
            0.9942550659179688,
            0.9902809858322144,
            0.9954649209976196,
            0.9955928325653076,
            0.9930813312530518,
            0.9953640699386597,
            0.99444180727005,
            0.994512140750885
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9973588585853577,
        "body": "    frequency_dict = {}\n    for num in lst:\n        if num not in frequency_dict:\n            frequency_dict[num] = 0\n        frequency_dict[num] += 1\n    for num, freq in frequency_dict.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9971311688423157,
            0.9967592358589172,
            0.9950885772705078,
            0.9971345663070679,
            0.994446337223053,
            0.9946498870849609,
            0.9942883849143982,
            0.9947969317436218,
            0.9961440563201904,
            0.9970795512199402,
            0.9969617128372192,
            0.9958275556564331,
            0.9950798749923706,
            0.9963389039039612,
            0.9955688118934631,
            0.9964849352836609,
            0.9973588585853577,
            0.9971472024917603,
            0.9891806244850159,
            0.9972804188728333
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9947763085365295,
        "body": "    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        if len(lst) % 2 != 0:\n            result.append(min_val)\n        else:\n            result.extend([min_val, max_val])\n        lst = [i for i in lst if i not in (min_val, max_val)]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9942530393600464,
            0.9911994934082031,
            0.9931694865226746,
            0.9937934875488281,
            0.9942004680633545,
            0.9916867613792419,
            0.9914977550506592,
            0.9894210696220398,
            0.990580141544342,
            0.9927365183830261,
            0.990479052066803,
            0.9877784252166748,
            0.9903903603553772,
            0.9931952953338623,
            0.9927365183830261,
            0.9947763085365295,
            0.9924159646034241,
            0.9865311980247498,
            0.989299476146698,
            0.9906545281410217
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9954996705055237,
        "body": "    from math import sqrt\n    p = (a + b + c) / 2\n    s = sqrt((p-a)*(p-b)*(p-c))\n    if abs(s - int(s)) < 0.01:\n        return round(0.5 * abs(s), 2)\n    else:\n        return -1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.99371737241745,
            0.9952026009559631,
            0.990444004535675,
            0.9943937063217163,
            0.9950181841850281,
            0.9942803978919983,
            0.98941570520401,
            0.9949744343757629,
            0.992928147315979,
            0.9933660626411438,
            0.9954996705055237,
            0.9945626854896545,
            0.9940860271453857,
            0.9952480792999268,
            0.9929970502853394,
            0.99371737241745,
            0.981293261051178,
            0.9932458996772766,
            0.9932646751403809,
            0.9943297505378723
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9973562359809875,
        "body": "    return all(q == q[::-1]) and sum(q) <= w",
        "result": "failed: 'bool' object is not iterable",
        "similarities": [
            0.9973562359809875,
            0.9963727593421936,
            0.9961636066436768,
            0.997109591960907,
            0.9963451027870178,
            0.9955548048019409,
            0.9950982928276062,
            0.995894193649292,
            0.9963451027870178,
            0.9971096515655518,
            0.9943400025367737,
            0.9971096515655518,
            0.9961636066436768,
            0.9955548048019409,
            0.9961636066436768,
            0.997109591960907,
            0.9973100423812866,
            0.9959573149681091,
            0.997109591960907,
            0.9963451027870178
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9939008355140686,
        "body": "    n = len(arr)\n    rev_arr = arr[::-1]\n    changes = 0\n    i, j = 0, n - 1\n    while i < j:\n        if arr[i] != rev_arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes",
        "result": "failed: ",
        "similarities": [
            0.9938806295394897,
            0.991568922996521,
            0.9937922954559326,
            0.9917118549346924,
            0.9871534109115601,
            0.9920238852500916,
            0.9933289885520935,
            0.9917775392532349,
            0.9939008355140686,
            0.9868128895759583,
            0.9897793531417847,
            0.9935006499290466,
            0.9928652048110962,
            0.9895009398460388,
            0.9936041831970215,
            0.9916594624519348,
            0.9918423891067505,
            0.989592432975769,
            0.9762347340583801,
            0.9878858327865601
        ]
    },
    "HumanEval/74": {
        "similarity": 0.995448887348175,
        "body": "    if sum(len(i) for i in lst1) <= sum(len(i) for i in lst2):\n        return lst1\n    else:\n        return lst2",
        "result": "passed",
        "similarities": [
            0.995448887348175,
            0.9916368126869202,
            0.9952970743179321,
            0.9951925873756409,
            0.9952346682548523,
            0.9900426268577576,
            0.9921101331710815,
            0.9952970743179321,
            0.995123028755188,
            0.995123028755188,
            0.995448887348175,
            0.9877122640609741,
            0.9952970147132874,
            0.9930311441421509,
            0.9952273964881897,
            0.9923592805862427,
            0.9954468607902527,
            0.9911014437675476,
            0.9900676608085632,
            0.9934037923812866
        ]
    },
    "HumanEval/75": {
        "similarity": 0.9873656034469604,
        "body": "            if n < 2: \n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        \n        factors = [i for i in range(2, a+1) if a % i == 0]\n        prime_factors = [f for f in factors if is_prime(f)]\n        return len(prime_factors) >= 3",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9865480065345764,
            0.9861801862716675,
            0.9861568808555603,
            0.9817352294921875,
            0.9804050326347351,
            0.986829936504364,
            0.9871127605438232,
            0.9822056293487549,
            0.9842619895935059,
            0.9868765473365784,
            0.9065040946006775,
            0.9867597818374634,
            0.9873656034469604,
            0.9869627952575684,
            0.9065040946006775,
            0.9835556745529175,
            0.9842385649681091,
            0.984969973564148,
            0.9871131777763367,
            0.9842212200164795
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9983882904052734,
        "body": "    return n ** int(math.log(x, n)) == x",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9983882904052734,
            0.9959826469421387,
            0.9981145262718201,
            0.9983882904052734,
            0.9983882904052734,
            0.9983882904052734,
            0.9983882904052734,
            0.9983882904052734,
            0.9983882904052734,
            0.9981145262718201,
            0.996368944644928,
            0.9983882904052734,
            0.997766375541687,
            0.9983882904052734,
            0.996368944644928,
            0.9983882904052734,
            0.9958074688911438,
            0.9909955263137817,
            0.9977343678474426,
            0.9981145262718201
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9947839379310608,
        "body": "    i = round(a ** (1./3)) \n    return a == i ** 3",
        "result": "failed: type complex doesn't define __round__ method",
        "similarities": [
            0.9868496656417847,
            0.9842859506607056,
            0.9910639524459839,
            0.9920985698699951,
            0.9933803081512451,
            0.9920985698699951,
            0.9944692850112915,
            0.989531397819519,
            0.9918886423110962,
            0.9944309592247009,
            0.9936586022377014,
            0.9944127798080444,
            0.9873692393302917,
            0.9855183959007263,
            0.9921501874923706,
            0.9924092888832092,
            0.9947839379310608,
            0.994337260723114,
            0.9940187335014343,
            0.9884274005889893
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9948491454124451,
        "body": "    primes = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}\n    count = 0\n    for char in num:\n        if char.upper() in primes:\n            count += 1",
        "result": "failed: First test error: None",
        "similarities": [
            0.993570864200592,
            0.9864010214805603,
            0.9941693544387817,
            0.9936137795448303,
            0.9941222667694092,
            0.9944098591804504,
            0.9942916035652161,
            0.9926723837852478,
            0.9946924448013306,
            0.9945022463798523,
            0.9941467642784119,
            0.9931884407997131,
            0.994790256023407,
            0.9932162761688232,
            0.9893423318862915,
            0.9938176870346069,
            0.9876229166984558,
            0.9948491454124451,
            0.9946216940879822,
            0.9939542412757874
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9963930249214172,
        "body": "    return \"db\" + bin(decimal)[2:] + \"db\"",
        "result": "passed",
        "similarities": [
            0.9963930249214172,
            0.9963011741638184,
            0.9960840344429016,
            0.9948717355728149,
            0.9963930249214172,
            0.9960840344429016,
            0.9920925498008728,
            0.9960840344429016,
            0.9963930249214172,
            0.9855459332466125,
            0.9923685789108276,
            0.9963930249214172,
            0.9925428628921509,
            0.9942274689674377,
            0.9855908751487732,
            0.9960840344429016,
            0.9953649640083313,
            0.9960840344429016,
            0.9952860474586487,
            0.9963930249214172
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9956488609313965,
        "body": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == 3",
        "result": "failed: abcd",
        "similarities": [
            0.9955747723579407,
            0.9933973550796509,
            0.9936781525611877,
            0.9851391315460205,
            0.9952492117881775,
            0.9936781525611877,
            0.9956488609313965,
            0.9948161244392395,
            0.9955747723579407,
            0.9938384890556335,
            0.9956488609313965,
            0.9894027709960938,
            0.9956488609313965,
            0.9923880696296692,
            0.9936781525611877,
            0.9956488609313965,
            0.9956488609313965,
            0.9936781525611877,
            0.9955747723579407,
            0.9831858277320862
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9917336702346802,
        "body": "    if len(grades) == 0:\n        return []\n\n    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n\n    return result",
        "result": "failed: ",
        "similarities": [
            0.969456136226654,
            0.989487886428833,
            0.9888180494308472,
            0.9818940758705139,
            0.9891836047172546,
            0.9838451743125916,
            0.9917336702346802,
            0.991502046585083,
            0.9900428652763367,
            0.9896496534347534,
            0.982613205909729,
            0.9880537986755371,
            0.9898099303245544,
            0.9884729981422424,
            0.9892467856407166,
            0.9696412682533264,
            0.9897585511207581,
            0.9891353249549866,
            0.9896408915519714,
            0.9699558615684509
        ]
    },
    "HumanEval/82": {
        "similarity": 0.9983213543891907,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n        return is_prime(len(string))",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9983143210411072,
            0.9979071617126465,
            0.9982566833496094,
            0.9982506632804871,
            0.997218906879425,
            0.9983213543891907,
            0.998002290725708,
            0.9981448650360107,
            0.9745039939880371,
            0.9983206391334534,
            0.9983206391334534,
            0.9982566833496094,
            0.9983206391334534,
            0.9983206391334534,
            0.997639536857605,
            0.9983206391334534,
            0.9978076815605164,
            0.9983213543891907,
            0.9983206391334534,
            0.9978838562965393
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9977270364761353,
        "body": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9924021363258362,
            0.9977270364761353,
            0.9976144433021545,
            0.9883334636688232,
            0.997236967086792,
            0.9965177774429321,
            0.995786190032959,
            0.9964619874954224,
            0.9972233176231384,
            0.9972226023674011,
            0.9958990812301636,
            0.9977270364761353,
            0.995786190032959,
            0.9972381591796875,
            0.9977270364761353,
            0.9964696168899536,
            0.9959620237350464,
            0.9964615702629089,
            0.9954273700714111,
            0.9969167113304138
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9950085878372192,
        "body": "    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",
        "result": "failed: Error",
        "similarities": [
            0.9943517446517944,
            0.9939438700675964,
            0.9940209984779358,
            0.9930837750434875,
            0.9950085878372192,
            0.9779617786407471,
            0.9950085878372192,
            0.9937001466751099,
            0.9924640655517578,
            0.9940082430839539,
            0.992500901222229,
            0.9941285848617554,
            0.9924185872077942,
            0.9823084473609924,
            0.9888396263122559,
            0.9932885766029358,
            0.9943270683288574,
            0.9943540692329407,
            0.9949578046798706,
            0.9941404461860657
        ]
    },
    "HumanEval/85": {
        "similarity": 0.994185209274292,
        "body": "sum(sum(i) for i in lst[1::2] if i % 2 == 0)",
        "result": "failed: name 'lst' is not defined",
        "similarities": [
            0.9932355284690857,
            0.9883256554603577,
            0.9928115010261536,
            0.9833504557609558,
            0.9920411705970764,
            0.991094172000885,
            0.9883256554603577,
            0.9932371377944946,
            0.994185209274292,
            0.9748109579086304,
            0.9920411705970764,
            0.9932371377944946,
            0.9920411705970764,
            0.9932371377944946,
            0.9932371377944946,
            0.9936460256576538,
            0.9932371377944946,
            0.9940390586853027,
            0.9883256554603577,
            0.9862948060035706
        ]
    },
    "HumanEval/86": {
        "similarity": 0.992442786693573,
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        result.append(new_word + ' ')\n    return ''.join(result).strip()",
        "result": "passed",
        "similarities": [
            0.9895819425582886,
            0.9895819425582886,
            0.9876088500022888,
            0.988854169845581,
            0.9903925657272339,
            0.9895819425582886,
            0.9906668663024902,
            0.9849451184272766,
            0.9893220663070679,
            0.9906668663024902,
            0.9867404103279114,
            0.9849451780319214,
            0.9899946451187134,
            0.9898436665534973,
            0.9805316925048828,
            0.9896191954612732,
            0.9879468679428101,
            0.9897605776786804,
            0.992442786693573,
            0.9795135855674744
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9930654764175415,
        "body": "    result = [(i, j) for i, sublst in enumerate(lst) if x in sublst for j, v in sorted(((j, k) for k, v in enumerate(sublst) if v == x), reverse=True)]",
        "result": "failed: free variable 'j' referenced before assignment in enclosing scope",
        "similarities": [
            0.9918971061706543,
            0.9861448407173157,
            0.9930654764175415,
            0.9916545748710632,
            0.9854770302772522,
            0.9890229105949402,
            0.9914590120315552,
            0.98959881067276,
            0.9918971061706543,
            0.9918971061706543,
            0.9922803640365601,
            0.9923794269561768,
            0.9927918314933777,
            0.9884591698646545,
            0.9921914935112,
            0.9837393760681152,
            0.9808233976364136,
            0.9909858703613281,
            0.9891045093536377,
            0.987493097782135
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9952322244644165,
        "body": "    if sum(array[0], array[-1]) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array)[::-1]",
        "result": "failed: list index out of range",
        "similarities": [
            0.9945837259292603,
            0.9952197670936584,
            0.9911525249481201,
            0.9899627566337585,
            0.9875178933143616,
            0.9919939637184143,
            0.9952322244644165,
            0.9925246238708496,
            0.9865928292274475,
            0.9952197670936584,
            0.9952197670936584,
            0.9918752908706665,
            0.9952197670936584,
            0.9952197670936584,
            0.9865929484367371,
            0.9900321960449219,
            0.9932708740234375,
            0.9952197670936584,
            0.9942795634269714,
            0.9943522214889526
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9971790313720703,
        "body": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s.lower():\n        if char.isalpha():\n            shift_amount = (2 * 2) % 26\n            index = (alphabet.index(char) + shift_amount) % 26\n            result += alphabet[index]\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9971426129341125,
            0.996925950050354,
            0.9971094727516174,
            0.9971740245819092,
            0.9971790313720703,
            0.9970751404762268,
            0.9971665143966675,
            0.9971665143966675,
            0.9971346855163574,
            0.9971235394477844,
            0.9969229698181152,
            0.9955284595489502,
            0.996829092502594,
            0.9810317158699036,
            0.9960160851478577,
            0.9960160851478577,
            0.9961342215538025,
            0.9961342215538025,
            0.9963923096656799,
            0.9971737265586853
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9952567219734192,
        "body": "if len(lst) < 2 or min(lst) == max(lst): \n    return None \nlst = sorted(set(lst)) \nreturn lst[1] if len(lst) > 1 else None",
        "result": "failed: 'return' outside function (<string>, line 14)",
        "similarities": [
            0.9933897256851196,
            0.9910816550254822,
            0.9931922554969788,
            0.9936562776565552,
            0.9933761954307556,
            0.9924188256263733,
            0.993134081363678,
            0.9951485395431519,
            0.9952372312545776,
            0.9947240948677063,
            0.9923214316368103,
            0.9945851564407349,
            0.9947493672370911,
            0.9937858581542969,
            0.9845117330551147,
            0.9905552268028259,
            0.9952567219734192,
            0.9922897815704346,
            0.9945851564407349,
            0.9949114918708801
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9963212609291077,
        "body": "    sentences = S.split('. ') + [S]\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    return count",
        "result": "failed: Test 2",
        "similarities": [
            0.9951224327087402,
            0.9952448606491089,
            0.9944301247596741,
            0.9903680682182312,
            0.9941083192825317,
            0.9940022230148315,
            0.9945648908615112,
            0.9927900433540344,
            0.9941573143005371,
            0.9926125407218933,
            0.9954723715782166,
            0.9945995807647705,
            0.9957253336906433,
            0.9934200644493103,
            0.9954227805137634,
            0.9949328899383545,
            0.9940848350524902,
            0.9963212609291077,
            0.9938331246376038,
            0.994354248046875
        ]
    },
    "HumanEval/92": {
        "similarity": 0.994176983833313,
        "body": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or x == z + y or y == x + z)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.9938627481460571,
            0.992176353931427,
            0.993770182132721,
            0.994176983833313,
            0.993672251701355,
            0.99315345287323,
            0.9863092303276062,
            0.9903432130813599,
            0.9938627481460571,
            0.9891570210456848,
            0.99315345287323,
            0.9939271211624146,
            0.9928986430168152,
            0.9922736287117004,
            0.9907658100128174,
            0.9788246154785156,
            0.994176983833313,
            0.9903144836425781,
            0.9929862022399902,
            0.992176353931427
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9965011477470398,
        "body": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9963648915290833,
            0.995248019695282,
            0.9962037801742554,
            0.9957293272018433,
            0.9961672425270081,
            0.9944286346435547,
            0.9911360740661621,
            0.9965011477470398,
            0.9960424304008484,
            0.9893035888671875,
            0.9958668947219849,
            0.9858487844467163,
            0.9962178468704224,
            0.9962150454521179,
            0.9963521361351013,
            0.9949038624763489,
            0.9958212971687317,
            0.9956924915313721,
            0.9899047017097473,
            0.9964355826377869
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9900190234184265,
        "body": "    max_prime = max([i for i in set(lst) if is_prime(i)])\n        if n < 2: return False\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0: return False\n        return True\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 16)",
        "similarities": [
            0.9898759126663208,
            0.9840146899223328,
            0.9898297190666199,
            0.9818364381790161,
            0.9900190234184265,
            0.9888054728507996,
            0.9883917570114136,
            0.9898518919944763,
            0.9805625081062317,
            0.9798987507820129,
            0.9816955924034119,
            0.9817143678665161,
            0.981742262840271,
            0.9797487854957581,
            0.9869666695594788,
            0.9797487854957581,
            0.9878102540969849,
            0.9778603315353394,
            0.9813156127929688,
            0.983931303024292
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9960309267044067,
        "body": "    if not dict: \n        return False\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    return all_upper or all_lower",
        "result": "passed",
        "similarities": [
            0.9958803057670593,
            0.9959680438041687,
            0.9913589954376221,
            0.9959680438041687,
            0.9894176125526428,
            0.9888622760772705,
            0.9858846068382263,
            0.9959680438041687,
            0.9959680438041687,
            0.9939672350883484,
            0.9930076599121094,
            0.9958803057670593,
            0.9947965741157532,
            0.9852619171142578,
            0.9930163025856018,
            0.9929868578910828,
            0.9960309267044067,
            0.995719313621521,
            0.9959238767623901,
            0.9939672350883484
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9967104196548462,
        "body": "        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    primes = [] \n    for num in range(2, n): \n        if is_prime(num): \n            primes.append(num) \n    return primes",
        "result": "failed: unexpected indent (<string>, line 13)",
        "similarities": [
            0.9966949820518494,
            0.9966536164283752,
            0.9964049458503723,
            0.9941282868385315,
            0.995936930179596,
            0.9928429126739502,
            0.9966536164283752,
            0.995936930179596,
            0.996337890625,
            0.996337890625,
            0.9953079223632812,
            0.9937224984169006,
            0.9967104196548462,
            0.9964256286621094,
            0.9961236715316772,
            0.9964866638183594,
            0.9954267144203186,
            0.9956701397895813,
            0.991380512714386,
            0.9923425316810608
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9993087649345398,
        "body": "    return (a % 10) * (b % 10)",
        "result": "passed",
        "similarities": [
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9957305788993835,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9987451434135437,
            0.9973360300064087,
            0.9976949095726013,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398,
            0.9973983764648438,
            0.9993087649345398,
            0.9993087649345398,
            0.9993087649345398
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9933316111564636,
        "body": "    return sum(1 for c in s if c.upper() in 'AEIO' and index % 2 == 0)",
        "result": "failed: name 'index' is not defined",
        "similarities": [
            0.9928582906723022,
            0.9927953481674194,
            0.9909501671791077,
            0.9931024312973022,
            0.9926960468292236,
            0.9914775490760803,
            0.9920907616615295,
            0.9925479888916016,
            0.993149995803833,
            0.9887077212333679,
            0.9925412535667419,
            0.9709122180938721,
            0.9853218793869019,
            0.9914104342460632,
            0.9921784996986389,
            0.9933316111564636,
            0.9929815530776978,
            0.9888826608657837,
            0.9879305958747864,
            0.9709122180938721
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9901414513587952,
        "body": "    if isinstance(value, str):\n        value = float(value)\n    return round(value) if value.is_integer() else (round(value + 0.1) if value < 0 else round(value - 0.1))",
        "result": "failed: Test 2",
        "similarities": [
            0.9871601462364197,
            0.9881379008293152,
            0.9890590310096741,
            0.9881470203399658,
            0.9901414513587952,
            0.988747239112854,
            0.9869421124458313,
            0.9898663759231567,
            0.9831468462944031,
            0.9877442121505737,
            0.9897153973579407,
            0.9865938425064087,
            0.9850583672523499,
            0.9897720813751221,
            0.9462432861328125,
            0.9885534048080444,
            0.9896860718727112,
            0.9892255663871765,
            0.9868766665458679,
            0.9888306856155396
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9948335289955139,
        "body": "    result = []\n    n += 1\n    while len(result) < n:\n        if len(result) % 2 == 0:\n            result.append(len(result) * 2)\n        else:\n            result.append(len(result) * 2 + 1)\n    return result",
        "result": "failed: Test 3",
        "similarities": [
            0.9926304221153259,
            0.9794968366622925,
            0.9828903079032898,
            0.9948335289955139,
            0.9947584271430969,
            0.9927096366882324,
            0.9844679832458496,
            0.9941783547401428,
            0.994178295135498,
            0.9924295544624329,
            0.9941855072975159,
            0.9937997460365295,
            0.9939199090003967,
            0.9918340444564819,
            0.9925526976585388,
            0.9936617612838745,
            0.9938133955001831,
            0.9943112730979919,
            0.9941855072975159,
            0.994332492351532
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9984319806098938,
        "body": "    return [word.strip().lower() for word in s.replace(\",\",\" \").split()]",
        "result": "failed: ",
        "similarities": [
            0.9980807304382324,
            0.9970086812973022,
            0.9957342743873596,
            0.9969267845153809,
            0.9980458617210388,
            0.9970565438270569,
            0.9963340759277344,
            0.9957342743873596,
            0.9977899193763733,
            0.9958916902542114,
            0.9980807304382324,
            0.9957342743873596,
            0.9982655048370361,
            0.9982678294181824,
            0.9984319806098938,
            0.9980807304382324,
            0.9955856204032898,
            0.9980807304382324,
            0.9979291558265686,
            0.9980807304382324
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9953866600990295,
        "body": "    if x % 2 == 0 and y % 2 == 0:\n        return min(x, y)\n    else:\n        for i in range(max(x, y), x - 1, -1):\n            if i % 2 == 0:\n                return i\n        return -1",
        "result": "failed: ",
        "similarities": [
            0.9953866600990295,
            0.9926642179489136,
            0.9895437955856323,
            0.9945142865180969,
            0.9797104597091675,
            0.9922547936439514,
            0.9926659464836121,
            0.9920331239700317,
            0.9934303164482117,
            0.9918278455734253,
            0.9938021302223206,
            0.9931626915931702,
            0.9938225150108337,
            0.9921625852584839,
            0.9925330281257629,
            0.9947911500930786,
            0.9947255849838257,
            0.994482159614563,
            0.9946712851524353,
            0.9928349256515503
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9972440004348755,
        "body": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(int(round(avg)))[2:]",
        "result": "failed: ",
        "similarities": [
            0.9972440004348755,
            0.9966821074485779,
            0.9963092803955078,
            0.9968339204788208,
            0.9962508678436279,
            0.9963053464889526,
            0.9971505999565125,
            0.9971939921379089,
            0.9972440004348755,
            0.996615469455719,
            0.9971505999565125,
            0.9969080090522766,
            0.992531955242157,
            0.9959325194358826,
            0.9965551495552063,
            0.9966603517532349,
            0.9937230944633484,
            0.9953325986862183,
            0.9944537281990051,
            0.9961883425712585
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9986371397972107,
        "body": "    return sorted([i for i in x if not any(int(d) % 2 == 0 for d in str(i))])",
        "result": "passed",
        "similarities": [
            0.9884884357452393,
            0.9985418915748596,
            0.9983444213867188,
            0.9985295534133911,
            0.9985139966011047,
            0.9986371397972107,
            0.9986371397972107,
            0.9986371397972107,
            0.9983444213867188,
            0.9975278973579407,
            0.9984700083732605,
            0.9985139966011047,
            0.99847012758255,
            0.9979581236839294,
            0.998542308807373,
            0.9976792931556702,
            0.9912760853767395,
            0.9986371397972107,
            0.9986371397972107,
            0.9986371397972107
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9944853782653809,
        "body": "    result = sorted([x for x in arr if 1 <= x <= 9])\n    result.reverse()\n    return [name for num in result for name in [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] if str(num) == str(name[3:]) or num < 0]",
        "result": "failed: Error",
        "similarities": [
            0.9938847422599792,
            0.9837180972099304,
            0.9938527345657349,
            0.9936519265174866,
            0.9936737418174744,
            0.9927221536636353,
            0.9900524616241455,
            0.9943410158157349,
            0.9942724108695984,
            0.9908698201179504,
            0.9933602213859558,
            0.9893603920936584,
            0.9944853782653809,
            0.99191814661026,
            0.9940235614776611,
            0.9898346662521362,
            0.9924973249435425,
            0.9929473400115967,
            0.9921818971633911,
            0.991502046585083
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9969790577888489,
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9892135262489319,
            0.9959985613822937,
            0.9966731667518616,
            0.9866194725036621,
            0.9969643354415894,
            0.9964191317558289,
            0.9969643354415894,
            0.9964191317558289,
            0.9859834313392639,
            0.9937205910682678,
            0.9949824810028076,
            0.9969643354415894,
            0.9966731667518616,
            0.9964191317558289,
            0.9957480430603027,
            0.9959985613822937,
            0.9960542321205139,
            0.9969790577888489,
            0.9957480430603027,
            0.9966731667518616
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9962539672851562,
        "body": "    even_count = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0)\n    return even_count, odd_count",
        "result": "passed",
        "similarities": [
            0.9907435178756714,
            0.9921171069145203,
            0.9947929382324219,
            0.9921171069145203,
            0.9960400462150574,
            0.9961499571800232,
            0.9941735863685608,
            0.9960400462150574,
            0.9951356649398804,
            0.9906403422355652,
            0.9957253336906433,
            0.9955462217330933,
            0.9911677837371826,
            0.9959166646003723,
            0.9944341778755188,
            0.9839176535606384,
            0.9941369295120239,
            0.9846990704536438,
            0.9961238503456116,
            0.9962539672851562
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9963060021400452,
        "body": "    return sum(1 for num in arr if sum(int(d) if d > '0' else -int(d[1:]) for d in str(abs(num)).split('-')) > 0)",
        "result": "failed: invalid literal for int() with base 10: ''",
        "similarities": [
            0.993721604347229,
            0.9930192828178406,
            0.996230959892273,
            0.9951093792915344,
            0.9951872825622559,
            0.9942538738250732,
            0.996230959892273,
            0.9923780560493469,
            0.9949204325675964,
            0.9962602853775024,
            0.9957172870635986,
            0.994205892086029,
            0.9963060021400452,
            0.9958040118217468,
            0.9936298727989197,
            0.9936932921409607,
            0.9945845603942871,
            0.9944769144058228,
            0.9960083365440369,
            0.9946618676185608
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9934821128845215,
        "body": "    if len(arr) == 0 or all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return True\n    else:\n        return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9919904470443726,
            0.9920448660850525,
            0.9901284575462341,
            0.9934821128845215,
            0.9909711480140686,
            0.9875620603561401,
            0.9896671175956726,
            0.9910429120063782,
            0.9934821128845215,
            0.9910429120063782,
            0.9919904470443726,
            0.9929233193397522,
            0.993220865726471,
            0.9910429120063782,
            0.9834510684013367,
            0.9915731549263,
            0.9810985922813416,
            0.9929239153862,
            0.9886090159416199,
            0.9852343201637268
        ]
    },
    "HumanEval/110": {
        "similarity": 0.995387613773346,
        "body": "    even_count = sum(1 for x in lst1 if x % 2 == 0) \n    odd_count = len(lst1) - even_count \n    return \"YES\" if all(x % 2 == 0 for x in lst2[:odd_count]) else \"NO\"",
        "result": "failed: ",
        "similarities": [
            0.994709849357605,
            0.9935225248336792,
            0.9834918975830078,
            0.9926460981369019,
            0.9948921203613281,
            0.9946479797363281,
            0.9871620535850525,
            0.9906889200210571,
            0.9861696362495422,
            0.9949365258216858,
            0.9905762076377869,
            0.9924647808074951,
            0.9911860227584839,
            0.9953378438949585,
            0.9953458905220032,
            0.9941837787628174,
            0.9930644035339355,
            0.995387613773346,
            0.9839345216751099,
            0.994834303855896
        ]
    },
    "HumanEval/111": {
        "similarity": 0.9960216879844666,
        "body": "    from collections import Counter\n    words = test.split()\n    counter = Counter(words)\n    max_count = max(counter.values())\n    most_common = {k: v for k, v in counter.items() if v == max_count}\n    return most_common",
        "result": "failed: max() arg is an empty sequence",
        "similarities": [
            0.9943603873252869,
            0.9881045818328857,
            0.9943171143531799,
            0.995496928691864,
            0.9949876666069031,
            0.9941428303718567,
            0.9948766827583313,
            0.9953344464302063,
            0.9949303865432739,
            0.9948766827583313,
            0.9921015501022339,
            0.9956221580505371,
            0.9943603873252869,
            0.9926396608352661,
            0.9960216879844666,
            0.9927574992179871,
            0.995708167552948,
            0.9905489683151245,
            0.9948766827583313,
            0.990648090839386
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9961637258529663,
        "body": "    result = \"\".join([char for char in s if char not in c])\n    return (result, result != result[::-1])",
        "result": "failed: ",
        "similarities": [
            0.995366632938385,
            0.9960362315177917,
            0.9881085753440857,
            0.9961637258529663,
            0.9952499866485596,
            0.9950878024101257,
            0.9953398704528809,
            0.9954440593719482,
            0.9959481954574585,
            0.9898191690444946,
            0.9928377270698547,
            0.9951024651527405,
            0.9923616051673889,
            0.9954625964164734,
            0.9950021505355835,
            0.9961126446723938,
            0.9928842186927795,
            0.9961220622062683,
            0.9955331683158875,
            0.9936330914497375
        ]
    },
    "HumanEval/113": {
        "similarity": 0.9958745241165161,
        "body": "    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(1 for d in s if int(d) % 2), i+1, i+1, 'in' if i == 0 else 'an') for i, s in enumerate(lst)]",
        "result": "failed: Test 1",
        "similarities": [
            0.995256245136261,
            0.9954861998558044,
            0.9937776327133179,
            0.9937218427658081,
            0.995711088180542,
            0.9950202107429504,
            0.9942126870155334,
            0.9951099753379822,
            0.9952105283737183,
            0.9949280619621277,
            0.9943404197692871,
            0.9958745241165161,
            0.9946981072425842,
            0.995256245136261,
            0.9950957298278809,
            0.9951123595237732,
            0.9954559206962585,
            0.9943674802780151,
            0.9958312511444092,
            0.9948793053627014
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9930223226547241,
        "body": "    current_sum = float('inf')\n    result = float('inf')\n\n    for i in range(len(nums)):\n        if current_sum < 0: \n            current_sum = nums[i]\n        else:\n            current_sum += nums[i]\n\n        if current_sum < result:\n            result = current_sum\n\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9885455965995789,
            0.9881047606468201,
            0.9919273853302002,
            0.9918507933616638,
            0.9882352948188782,
            0.9875259399414062,
            0.9800560474395752,
            0.9792317748069763,
            0.9882690906524658,
            0.9918678998947144,
            0.9930223226547241,
            0.9803503155708313,
            0.9906905293464661,
            0.9927917122840881,
            0.9911205172538757,
            0.9918766021728516,
            0.9889128804206848,
            0.9792317748069763,
            0.9905017018318176,
            0.9927538633346558
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9908931255340576,
        "body": "    total_water = sum(sum(row) for row in grid)\n    needed_downs = -(-total_water // capacity)\n    return needed_downs",
        "result": "failed: Error",
        "similarities": [
            0.9820423126220703,
            0.9888467192649841,
            0.9834773540496826,
            0.9896928071975708,
            0.987141489982605,
            0.9878168702125549,
            0.9908931255340576,
            0.9847719073295593,
            0.980194091796875,
            0.9840432405471802,
            0.9702945351600647,
            0.9642918109893799,
            0.9864668846130371,
            0.9664528369903564,
            0.9903178215026855,
            0.9900115132331848,
            0.989443838596344,
            0.9907964468002319,
            0.9888241291046143,
            0.987852931022644
        ]
    },
    "HumanEval/116": {
        "similarity": 0.9997008442878723,
        "body": "    arr.sort(key=lambda x: (bin(x).count('1'), x))",
        "result": "failed: ",
        "similarities": [
            0.999302089214325,
            0.999302089214325,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.999302089214325,
            0.9997008442878723,
            0.9997008442878723,
            0.999302089214325,
            0.999302089214325,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.9997008442878723,
            0.999302089214325
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9929233193397522,
        "body": "        result = []\n        words = s.split()\n        for word in words:\n            consonants = sum(1 for char in word if not char.isalpha() or char.lower() not in 'aeiou')\n            if consonants == n:\n                result.append(word)\n        return result",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9916717410087585,
            0.9906823039054871,
            0.9270766377449036,
            0.9887758493423462,
            0.9841562509536743,
            0.9910374879837036,
            0.9909842610359192,
            0.9929233193397522,
            0.9928621053695679,
            0.9922136068344116,
            0.9833735227584839,
            0.9927988648414612,
            0.9884912371635437,
            0.9876817464828491,
            0.9905821084976196,
            0.9927794933319092,
            0.9917111992835999,
            0.9923787713050842,
            0.9889647960662842,
            0.9928464293479919
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9965549111366272,
        "body": "    for i in range(len(word) - 2, -1, -1):\n        if word[i] in 'aeiouAEIOU':\n            for j in range(i + 1, len(word)):\n                if not word[j].lower() in 'aeiou':\n                    break\n            else:\n                return word[i]\n    return ''",
        "result": "failed: ",
        "similarities": [
            0.9949651956558228,
            0.9953303933143616,
            0.9927617311477661,
            0.9960425496101379,
            0.9960180521011353,
            0.9924772381782532,
            0.9964916110038757,
            0.9930658936500549,
            0.9941942095756531,
            0.9958532452583313,
            0.993148684501648,
            0.9943434000015259,
            0.9957846403121948,
            0.9965549111366272,
            0.9940508604049683,
            0.9948137402534485,
            0.9937041401863098,
            0.9938226342201233,
            0.9917137026786804,
            0.9958305358886719
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9938222765922546,
        "body": "    stack = []\n    for s in lst: \n        for c in s: \n            if c == '(': \n                stack.append(c) \n            elif c == ')': \n                if not stack or stack.pop() != '(': \n                    return 'No'",
        "result": "failed: ",
        "similarities": [
            0.9779857993125916,
            0.9777219891548157,
            0.993610680103302,
            0.9932705760002136,
            0.9916470050811768,
            0.9816429018974304,
            0.9937609434127808,
            0.9938222765922546,
            0.9934093356132507,
            0.9927603006362915,
            0.9935705065727234,
            0.9777219891548157,
            0.9908787608146667,
            0.9924176931381226,
            0.9935699105262756,
            0.9916657209396362,
            0.9937434792518616,
            0.993694007396698,
            0.9926958680152893,
            0.9924769401550293
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9920870065689087,
        "body": "    return sorted(set(arr), reverse=True)[:k]",
        "result": "failed: ",
        "similarities": [
            0.989898681640625,
            0.9860502481460571,
            0.9920870065689087,
            0.9905843138694763,
            0.989898681640625,
            0.9889327883720398,
            0.9903498291969299,
            0.9632458090782166,
            0.9920869469642639,
            0.9915461540222168,
            0.9860842823982239,
            0.9780028462409973,
            0.9842976927757263,
            0.9920870065689087,
            0.9915042519569397,
            0.9920870065689087,
            0.9920870065689087,
            0.9850397706031799,
            0.9853059649467468,
            0.991424560546875
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9931073784828186,
        "body": "sum = 0\nfor i, x in enumerate(lst):\n    if (i + 1) % 2 == 0 and x % 2 != 0:\n        sum += x",
        "result": "failed: name 'lst' is not defined",
        "similarities": [
            0.9789227247238159,
            0.9872446656227112,
            0.9911567568778992,
            0.9908296465873718,
            0.9927099943161011,
            0.9916733503341675,
            0.9913374185562134,
            0.9917646050453186,
            0.9929772615432739,
            0.9908296465873718,
            0.9908761382102966,
            0.9918912649154663,
            0.9894126057624817,
            0.9842854738235474,
            0.9905194640159607,
            0.9911349415779114,
            0.9908296465873718,
            0.9929913878440857,
            0.9927099943161011,
            0.9931073784828186
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9927155375480652,
        "body": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum",
        "result": "passed",
        "similarities": [
            0.9901473522186279,
            0.992545485496521,
            0.9921275973320007,
            0.9901473522186279,
            0.9850096702575684,
            0.9927155375480652,
            0.9905455708503723,
            0.9902791380882263,
            0.9898815155029297,
            0.990942120552063,
            0.9925092458724976,
            0.992540180683136,
            0.9884006977081299,
            0.9887363910675049,
            0.9902055859565735,
            0.9923039674758911,
            0.9885239005088806,
            0.9903285503387451,
            0.9914179444313049,
            0.9871063232421875
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9961475729942322,
        "body": "    sequence = [n] \n    while n != 1: \n        if n % 2 == 0: \n            n = n // 2 \n        else: \n            n = 3*n + 1 \n    odd_sequence = [] \n    for i in range(len(sequence)-1, -1, -1): \n        if sequence[i] % 2 != 0: \n            odd_sequence.append(sequence[i]) \n    return sorted(odd_sequence)",
        "result": "failed: ",
        "similarities": [
            0.9957948327064514,
            0.9930347800254822,
            0.9924715757369995,
            0.9961204528808594,
            0.9958608746528625,
            0.9954346418380737,
            0.995066225528717,
            0.9961475729942322,
            0.9950096011161804,
            0.995066225528717,
            0.9951786398887634,
            0.9954191446304321,
            0.9946629405021667,
            0.9956440329551697,
            0.9946619272232056,
            0.9952328205108643,
            0.9921775460243225,
            0.9947951436042786,
            0.9955611824989319,
            0.9958277344703674
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9954555034637451,
        "body": "    from datetime import datetime\n    \n    try:\n        dt = datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    if not 1 <= int(dt.strftime('%m')) <= 12:\n        return False\n    if not (1 <= int(dt.strftime('%d')) <= 31) and not (int(dt.strftime('%m')) in [4,6,9,11] and not 1 <= int(dt.strftime('%d')) <= 30) and not (int(dt.strftime('%m')) == 2 and not 1 <= int(dt.strftime('%d')) <= 29):\n        return False\n    \n    return True",
        "result": "passed",
        "similarities": [
            0.9951229095458984,
            0.9937679767608643,
            0.9918283224105835,
            0.9947892427444458,
            0.9933781027793884,
            0.9952071309089661,
            0.990675687789917,
            0.993371844291687,
            0.9934985637664795,
            0.9954555034637451,
            0.993137776851654,
            0.9953378438949585,
            0.9916905164718628,
            0.9932594299316406,
            0.9885802268981934,
            0.99309903383255,
            0.993874728679657,
            0.9912674427032471,
            0.9933301210403442,
            0.9943162798881531
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9939697980880737,
        "body": "    words = txt.split()\n    result = []\n    for word in words:\n        if ',' in word:\n            result.append(word.replace(',', ' '))\n        else:\n            pass\n    return [word.strip() for word in result] if result else sum(ord(c) % 2 for c in txt.lower()) + 1",
        "result": "failed: ",
        "similarities": [
            0.9939697980880737,
            0.9840258359909058,
            0.990871250629425,
            0.9925631284713745,
            0.9919859170913696,
            0.9914348125457764,
            0.9849579334259033,
            0.9928821921348572,
            0.9927846193313599,
            0.9926669597625732,
            0.9932990074157715,
            0.9838164448738098,
            0.9924643635749817,
            0.9909296631813049,
            0.9931387901306152,
            0.9936325550079346,
            0.9744333028793335,
            0.9925592541694641,
            0.9935322999954224,
            0.9934287071228027
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9953802227973938,
        "body": "    if len(set(lst)) != len(lst): return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]: return False\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.994831919670105,
            0.9943215250968933,
            0.9946405291557312,
            0.989395260810852,
            0.9933034777641296,
            0.9946405291557312,
            0.9893953204154968,
            0.995172381401062,
            0.9944482445716858,
            0.9944482445716858,
            0.9893953204154968,
            0.9905886650085449,
            0.9893953204154968,
            0.9932309985160828,
            0.9946405291557312,
            0.9946405291557312,
            0.9899681806564331,
            0.9946405291557312,
            0.9953802227973938,
            0.989395260810852
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9967617392539978,
        "body": "    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    if intersection_start <= intersection_end:\n        length = intersection_end - intersection_start + 1\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
        "result": "failed: ",
        "similarities": [
            0.9950003623962402,
            0.9962942004203796,
            0.9964991211891174,
            0.9959756731987,
            0.9943701028823853,
            0.9947305917739868,
            0.9949053525924683,
            0.9895433187484741,
            0.9967281818389893,
            0.9954271912574768,
            0.9946927428245544,
            0.9958327412605286,
            0.9950162172317505,
            0.9966436624526978,
            0.9946088194847107,
            0.9961832761764526,
            0.9959119558334351,
            0.9967617392539978,
            0.9961928129196167,
            0.995468020439148
        ]
    },
    "HumanEval/128": {
        "similarity": 0.99361652135849,
        "body": "if not arr: \n    return None \nsign_prod = 1 \nfor num in arr: \n    sign_prod *= -1 if num < 0 else 1 if num == 0 else 1 \nmagnitude_sum = sum(abs(num) for num in arr) \nreturn sign_prod * magnitude_sum",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9925105571746826,
            0.9905084371566772,
            0.9927507042884827,
            0.9909132122993469,
            0.9883336424827576,
            0.9925300478935242,
            0.9895760416984558,
            0.9927969574928284,
            0.9909330010414124,
            0.99361652135849,
            0.9757536053657532,
            0.9835941195487976,
            0.9915611147880554,
            0.9936113953590393,
            0.9925304055213928,
            0.9921098351478577,
            0.9918042421340942,
            0.9918997883796692,
            0.991798996925354,
            0.9920469522476196
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9954678416252136,
        "body": "    values = set(i for row in grid for i in row)\n    min_path = []\n    visited = set()\n        nonlocal min_path\n        if len(path) > k:\n            return\n        if len(path) == k:\n            min_path = path\n            return\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] not in visited:\n                visited.add(grid[nx][ny])\n                dfs(nx, ny, path + [grid[nx][ny]])\n                visited.remove(grid[nx][ny])\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] not in visited:\n                visited.add(grid[i][j])\n                dfs(i, j, [grid[i][j]])\n                visited.remove(grid[i][j])",
        "result": "failed: unexpected indent (<string>, line 35)",
        "similarities": [
            0.9951252341270447,
            0.9944334626197815,
            0.9954678416252136,
            0.9952250123023987,
            0.9945306181907654,
            0.9944847822189331,
            0.9937842488288879,
            0.9929478168487549,
            0.987540602684021,
            0.9791125059127808,
            0.9946500062942505,
            0.9949682950973511,
            0.9931439757347107,
            0.9945325255393982,
            0.9942994713783264,
            0.991571307182312,
            0.9929078817367554,
            0.9946828484535217,
            0.9950692057609558,
            0.9917014241218567
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9974191784858704,
        "body": "    if n == 0: \n        return [3] \n    elif n == 1: \n        return [3, 1] \n    else: \n        sequence = [3, 1] \n        for _ in range(2, n + 1): \n            if len(sequence) % 2 == 0: \n                next_val = int((sequence[-1] + sequence[-2]) / 2) \n            else: \n                next_val = sum(sequence[-2:]) \n            sequence.append(next_val) \n        return sequence",
        "result": "failed: ",
        "similarities": [
            0.992405354976654,
            0.996842622756958,
            0.997226893901825,
            0.996793270111084,
            0.9974191784858704,
            0.9971885681152344,
            0.9958046674728394,
            0.9963114857673645,
            0.9943650960922241,
            0.9958917498588562,
            0.995308518409729,
            0.9970697164535522,
            0.9966699481010437,
            0.9968047142028809,
            0.9954684376716614,
            0.9971500039100647,
            0.996769368648529,
            0.9959943890571594,
            0.9963005781173706,
            0.9973441958427429
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9977717995643616,
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9974796175956726,
            0.995819091796875,
            0.995819091796875,
            0.9974794983863831,
            0.9974796175956726,
            0.9977717995643616,
            0.9977032542228699,
            0.9977717995643616,
            0.9955765604972839,
            0.9959431886672974,
            0.9955765604972839,
            0.9946585297584534,
            0.9960664510726929,
            0.9974796175956726,
            0.9974796175956726,
            0.9974796175956726,
            0.9977032542228699,
            0.9955765604972839,
            0.9977717995643616,
            0.9973381757736206
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9925515055656433,
        "body": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9907674193382263,
            0.9656326174736023,
            0.9920628070831299,
            0.9910643696784973,
            0.9331271648406982,
            0.9907687306404114,
            0.9903329610824585,
            0.9915507435798645,
            0.9925515055656433,
            0.9896140694618225,
            0.9910643696784973,
            0.9891279339790344,
            0.9925278425216675,
            0.9915507435798645,
            0.9916817545890808,
            0.9920978546142578,
            0.9910643696784973,
            0.9901720285415649,
            0.992112398147583,
            0.9889544248580933
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9981105327606201,
        "body": "    return sum(math.ceil(i)**2 for i in lst)",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9981105327606201,
            0.9956790804862976,
            0.9977682828903198,
            0.9978951215744019,
            0.9960578083992004,
            0.9978951215744019,
            0.9979540109634399,
            0.9976973533630371,
            0.9935556054115295,
            0.9935597777366638,
            0.9977682828903198,
            0.9979540109634399,
            0.9981105327606201,
            0.9948660135269165,
            0.9981105327606201,
            0.9978951215744019,
            0.9978951215744019,
            0.9978951215744019,
            0.9981105327606201,
            0.99630206823349
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9946473836898804,
        "body": "    return txt and not txt.strip().endswith(r'\\w') and txt[-1].isalpha()",
        "result": "failed: ",
        "similarities": [
            0.9925874471664429,
            0.9910493493080139,
            0.9921053647994995,
            0.9939573407173157,
            0.9888083934783936,
            0.9924957156181335,
            0.9910493493080139,
            0.9883739352226257,
            0.9946110248565674,
            0.9943010210990906,
            0.9918027520179749,
            0.9945448040962219,
            0.9946473836898804,
            0.9930526614189148,
            0.9921606183052063,
            0.9921226501464844,
            0.9939966797828674,
            0.9876785278320312,
            0.9878422617912292,
            0.9894850850105286
        ]
    },
    "HumanEval/135": {
        "similarity": 0.9963541626930237,
        "body": "    for i in range(1, len(arr)):\n        if arr[i-1] >= arr[i]:\n            return i-1\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9963541626930237,
            0.9943252205848694,
            0.9957542419433594,
            0.9933301210403442,
            0.996026873588562,
            0.9963541626930237,
            0.9942145347595215,
            0.9554316997528076,
            0.9963541626930237,
            0.9957542419433594,
            0.9953385591506958,
            0.996055006980896,
            0.9950270652770996,
            0.9950270652770996,
            0.9963541626930237,
            0.9957542419433594,
            0.996026873588562,
            0.996055006980896,
            0.996055006980896,
            0.996055006980896
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9936020374298096,
        "body": "    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    \n    a = max(neg) if len(neg) > 0 else None\n    b = min(pos) if len(pos) > 0 else None\n    \n    return (a, b)",
        "result": "passed",
        "similarities": [
            0.993489146232605,
            0.9930480122566223,
            0.980924129486084,
            0.9908761382102966,
            0.9889671802520752,
            0.9903102517127991,
            0.9925416707992554,
            0.9927693605422974,
            0.9866527915000916,
            0.9929143190383911,
            0.987046480178833,
            0.991839587688446,
            0.9935453534126282,
            0.9936020374298096,
            0.9892208576202393,
            0.9883493185043335,
            0.9927287697792053,
            0.993499755859375,
            0.9923723936080933,
            0.9837058186531067
        ]
    },
    "HumanEval/137": {
        "similarity": 0.995066225528717,
        "body": "    if isinstance(a, str) and isinstance(b, (int, float)):\n        a = float(a.replace(',', '.'))\n    elif isinstance(b, str) and isinstance(a, (int, float)):\n        b = float(b.replace(',', '.'))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "result": "failed: ",
        "similarities": [
            0.9936589002609253,
            0.9904313683509827,
            0.9928159117698669,
            0.9930322766304016,
            0.995066225528717,
            0.9899798035621643,
            0.9940693378448486,
            0.9932988882064819,
            0.9901620745658875,
            0.9882555603981018,
            0.9948365092277527,
            0.9921457171440125,
            0.9917085766792297,
            0.9949306845664978,
            0.9950175881385803,
            0.9929056763648987,
            0.994028627872467,
            0.993524968624115,
            0.9935977458953857,
            0.9947628378868103
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9933933615684509,
        "body": "    for i in range(1, n + 1):\n        even_nums = [i * 2 for i in range(4)]\n        if sum(even_nums) == n:\n            return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9914689660072327,
            0.9887304902076721,
            0.9910297393798828,
            0.987393856048584,
            0.9910445809364319,
            0.9926741719245911,
            0.9930191040039062,
            0.9926099181175232,
            0.9887474775314331,
            0.990729808807373,
            0.9869368672370911,
            0.9854188561439514,
            0.9889748096466064,
            0.992598295211792,
            0.989105224609375,
            0.9775230288505554,
            0.9933933615684509,
            0.9868175983428955,
            0.9932104349136353,
            0.9898284077644348
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9958131909370422,
        "body": "if n == 1:\n    return 1\nresult = 1\nfor i in range(2, n + 1):\n    result *= math.factorial(i)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 15)",
        "similarities": [
            0.9954146146774292,
            0.9943215250968933,
            0.9909984469413757,
            0.9924474954605103,
            0.9863813519477844,
            0.9957044720649719,
            0.9956738352775574,
            0.9953854084014893,
            0.9949390888214111,
            0.9923999309539795,
            0.9944444298744202,
            0.9956738352775574,
            0.9946457743644714,
            0.995606005191803,
            0.9938960075378418,
            0.9920441508293152,
            0.9952113628387451,
            0.9943856000900269,
            0.9958131909370422,
            0.9957677125930786
        ]
    },
    "HumanEval/140": {
        "similarity": 0.990442156791687,
        "body": "    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.98900306224823,
            0.9779226183891296,
            0.9846832156181335,
            0.9898521304130554,
            0.9894915223121643,
            0.9780747294425964,
            0.9889345765113831,
            0.9899952411651611,
            0.9884496927261353,
            0.98836749792099,
            0.990442156791687,
            0.989236056804657,
            0.9823165535926819,
            0.9898521304130554,
            0.9880822896957397,
            0.98836749792099,
            0.9838801026344299,
            0.9879447817802429,
            0.990442156791687,
            0.9726610779762268
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9961801767349243,
        "body": "    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    elif '.' not in file_name or file_name.rsplit('.', 1)[0].lstrip().lower()[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    else:\n        ext = file_name.rsplit('.', 1)[1].lower()\n        if ext not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'",
        "result": "failed: ",
        "similarities": [
            0.9950416088104248,
            0.9911260008811951,
            0.9958771467208862,
            0.9945835471153259,
            0.9949826598167419,
            0.9961801767349243,
            0.993148922920227,
            0.9945496916770935,
            0.9950030446052551,
            0.9954896569252014,
            0.9946955442428589,
            0.9935085773468018,
            0.9926418662071228,
            0.9961361289024353,
            0.9939286112785339,
            0.9953278303146362,
            0.9953809976577759,
            0.991319477558136,
            0.9934121370315552,
            0.992009699344635
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9925550222396851,
        "body": "    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))",
        "result": "passed",
        "similarities": [
            0.990447998046875,
            0.9857403635978699,
            0.9923009276390076,
            0.9923858642578125,
            0.9925550222396851,
            0.9923248291015625,
            0.9886193871498108,
            0.9875450134277344,
            0.9892786145210266,
            0.9890040159225464,
            0.9918699860572815,
            0.9892369508743286,
            0.9907152056694031,
            0.9908878207206726,
            0.9890040159225464,
            0.9922894239425659,
            0.9919108152389526,
            0.9924314618110657,
            0.9922178387641907,
            0.9830563068389893
        ]
    },
    "HumanEval/143": {
        "similarity": 0.9949787855148315,
        "body": "    return ' '.join([word for word in sentence.split() if is_prime(len(word))])\n\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: name 'is_prime' is not defined",
        "similarities": [
            0.9931166768074036,
            0.9905543327331543,
            0.9943932294845581,
            0.9930403828620911,
            0.9939320087432861,
            0.9949787855148315,
            0.9945793151855469,
            0.994383692741394,
            0.9945793151855469,
            0.9882802367210388,
            0.9945793151855469,
            0.9891477823257446,
            0.9943932294845581,
            0.9906640648841858,
            0.9906640648841858,
            0.9940050840377808,
            0.9937624931335449,
            0.9900932312011719,
            0.9924600720405579,
            0.9949336051940918
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9925615191459656,
        "body": "    fraction_x = eval('fractions.Fraction({})'.format(x))\n    fraction_n = eval('fractions.Fraction({})'.format(n))\n    return fraction_x * fraction_n % 1 == 0",
        "result": "failed: name 'fractions' is not defined",
        "similarities": [
            0.992527425289154,
            0.9924992918968201,
            0.986932635307312,
            0.9914153218269348,
            0.989409327507019,
            0.9794764518737793,
            0.9866808652877808,
            0.9912164807319641,
            0.9883965253829956,
            0.9904245138168335,
            0.9883458018302917,
            0.9894304871559143,
            0.991985023021698,
            0.9925615191459656,
            0.9894304871559143,
            0.9904245138168335,
            0.9858006834983826,
            0.9894304871559143,
            0.9877896904945374,
            0.9905557036399841
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9971238970756531,
        "body": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))",
        "result": "failed: ",
        "similarities": [
            0.9950563311576843,
            0.9916205406188965,
            0.9934640526771545,
            0.9965367913246155,
            0.9971238970756531,
            0.9947189688682556,
            0.9947189688682556,
            0.9967456459999084,
            0.9971238970756531,
            0.9930106997489929,
            0.9960275292396545,
            0.9971238970756531,
            0.9967456459999084,
            0.9971238970756531,
            0.9967456459999084,
            0.9960275292396545,
            0.9971238970756531,
            0.9947189688682556,
            0.9971238970756531,
            0.9930105805397034
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9951921105384827,
        "body": "    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[-1] % 2 != 0 and str(abs(num))[0] % 2 != 0:\n            count += 1",
        "result": "failed: ",
        "similarities": [
            0.99493008852005,
            0.9889165163040161,
            0.9947194457054138,
            0.99493008852005,
            0.9879376292228699,
            0.99493008852005,
            0.9864924550056458,
            0.9915532469749451,
            0.9942334890365601,
            0.9922011494636536,
            0.9949328899383545,
            0.9922739267349243,
            0.9942334890365601,
            0.9885420799255371,
            0.9903156757354736,
            0.9890367388725281,
            0.9908445477485657,
            0.9942334890365601,
            0.9922772645950317,
            0.9951921105384827
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9987007975578308,
        "body": "    count = 0\n    for i in range(1, n):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1",
        "result": "failed: ",
        "similarities": [
            0.9965507388114929,
            0.9977113604545593,
            0.998693585395813,
            0.9987007975578308,
            0.9977113604545593,
            0.998672604560852,
            0.9985643625259399,
            0.998693585395813,
            0.9978708028793335,
            0.9983850717544556,
            0.9977113604545593,
            0.9986686706542969,
            0.9985998868942261,
            0.9947459697723389,
            0.9982615113258362,
            0.9983636736869812,
            0.9977113604545593,
            0.9986686706542969,
            0.9987007975578308,
            0.9983486533164978
        ]
    },
    "HumanEval/148": {
        "similarity": 0.9968129992485046,
        "body": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    result = tuple([p for p in planets[idx1+1:idx2] if p != planet1 and p != planet2])\n    return (result,)",
        "result": "failed: First test error: 1",
        "similarities": [
            0.9963611960411072,
            0.9943761229515076,
            0.9960720539093018,
            0.9922784566879272,
            0.9937529563903809,
            0.9968010783195496,
            0.9930900931358337,
            0.995111346244812,
            0.9954632520675659,
            0.9938156604766846,
            0.9963937997817993,
            0.995780348777771,
            0.9968129992485046,
            0.9949745535850525,
            0.9942265748977661,
            0.9952242970466614,
            0.9960453510284424,
            0.9966687560081482,
            0.996382474899292,
            0.994685709476471
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9979661703109741,
        "body": "    return sorted([s for s in set(lst) if len(s) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed",
        "similarities": [
            0.9978037476539612,
            0.9979466795921326,
            0.9970107078552246,
            0.9928848147392273,
            0.9972022175788879,
            0.9979466795921326,
            0.9979466795921326,
            0.9978882670402527,
            0.9931643605232239,
            0.9960781931877136,
            0.9978882670402527,
            0.9936997294425964,
            0.9978935122489929,
            0.9979661703109741,
            0.9950354695320129,
            0.9979466795921326,
            0.9979466795921326,
            0.9947937726974487,
            0.9924253225326538,
            0.9979466795921326
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9955205321311951,
        "body": "        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True \n\n    if is_prime(n): \n        return x \n    else: \n        return y",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9952245950698853,
            0.9952560067176819,
            0.9953981041908264,
            0.9951120615005493,
            0.9939635396003723,
            0.9942817687988281,
            0.9954912066459656,
            0.9952248334884644,
            0.9949458241462708,
            0.9949009418487549,
            0.9949619174003601,
            0.9525443911552429,
            0.9951843619346619,
            0.9881693124771118,
            0.9955205321311951,
            0.9952696561813354,
            0.9951565265655518,
            0.9953767657279968,
            0.9952916502952576,
            0.9946582317352295
        ]
    },
    "HumanEval/151": {
        "similarity": 0.996087908744812,
        "body": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares * 2",
        "result": "failed: This prints if this assert fails 2 (good for debugging!)",
        "similarities": [
            0.9815628528594971,
            0.9953128695487976,
            0.9957507252693176,
            0.9855653643608093,
            0.9957330822944641,
            0.9953128695487976,
            0.9958221912384033,
            0.9865058064460754,
            0.9957141876220703,
            0.9957330822944641,
            0.9955872297286987,
            0.9949166178703308,
            0.9953128695487976,
            0.9953128695487976,
            0.9957507252693176,
            0.995466411113739,
            0.9953128695487976,
            0.996087908744812,
            0.9859904050827026,
            0.9953128695487976
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9980133771896362,
        "body": "    return [abs(score - guess) for score, guess in zip(game, guess)]",
        "result": "passed",
        "similarities": [
            0.9978878498077393,
            0.9979286193847656,
            0.9960259199142456,
            0.9974847435951233,
            0.9977990984916687,
            0.9952197670936584,
            0.9960259199142456,
            0.9956532716751099,
            0.9919772148132324,
            0.9979246854782104,
            0.9969592690467834,
            0.9978879690170288,
            0.9973130822181702,
            0.9979286193847656,
            0.9980133771896362,
            0.9960259795188904,
            0.9970422387123108,
            0.9953783750534058,
            0.9966343641281128,
            0.9959782958030701
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9928301572799683,
        "body": "    strongest = max(extensions, key=lambda x: len([c for c in x if c.isupper]) - len([c for c in x if c.islower])) \n    return f\"{class_name}.{strongest}\"",
        "result": "failed: ",
        "similarities": [
            0.9910770058631897,
            0.9836118817329407,
            0.9875622987747192,
            0.9843637347221375,
            0.9926820397377014,
            0.9920517802238464,
            0.9868766665458679,
            0.9874743223190308,
            0.9926820397377014,
            0.9923327565193176,
            0.9863952994346619,
            0.9928301572799683,
            0.9925181865692139,
            0.983046293258667,
            0.9876629710197449,
            0.9907816648483276,
            0.9901143908500671,
            0.9834781289100647,
            0.9916825890541077,
            0.9892136454582214
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9971979856491089,
        "body": "    if b in a or any(b[i:] + b[:i] in a for i in range(len(b))): \n        return True\n    else: \n        return False",
        "result": "passed",
        "similarities": [
            0.9967910647392273,
            0.9955989718437195,
            0.9968370199203491,
            0.9970598816871643,
            0.9915799498558044,
            0.9950494170188904,
            0.9971979856491089,
            0.9969469308853149,
            0.9962712526321411,
            0.9969469308853149,
            0.9955675005912781,
            0.9933489561080933,
            0.9969469308853149,
            0.9955675005912781,
            0.9969469308853149,
            0.9969469308853149,
            0.9969469308853149,
            0.9966779947280884,
            0.9960983991622925,
            0.9961835741996765
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9935032725334167,
        "body": "    num = str(abs(num)) \n    even = sum(1 for digit in num if int(digit) % 2 == 0) \n    odd = len(num) - even \n    return (even, odd)",
        "result": "passed",
        "similarities": [
            0.9931151866912842,
            0.9923380613327026,
            0.9923920035362244,
            0.9893162250518799,
            0.9935032725334167,
            0.9899830222129822,
            0.9934923052787781,
            0.9908419251441956,
            0.9932160973548889,
            0.9887685179710388,
            0.9833997488021851,
            0.9890522360801697,
            0.9853159189224243,
            0.9929125905036926,
            0.9931050539016724,
            0.993017315864563,
            0.982239305973053,
            0.986332356929779,
            0.9918453693389893,
            0.9929578900337219
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9880455732345581,
        "body": "    if number < 1 or number > 1000:\n        raise ValueError(\"Input must be between 1 and 1000\")\n    \n    roman_map = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    \n    result = ''\n    for key, value in sorted(roman_map.items(), reverse=True):\n        while number >= key:\n            result += value\n            number -= key\n    return result.lower()",
        "result": "passed",
        "similarities": [
            0.9871370196342468,
            0.9789612293243408,
            0.9854626059532166,
            0.9837966561317444,
            0.9853047728538513,
            0.986140787601471,
            0.9844922423362732,
            0.9839980602264404,
            0.9877602458000183,
            0.9858530759811401,
            0.8941835165023804,
            0.9858744740486145,
            0.9787936210632324,
            0.9804314970970154,
            0.9781335592269897,
            0.9744272828102112,
            0.9880455732345581,
            0.983862042427063,
            0.9862552285194397,
            0.9869599938392639
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9979665875434875,
        "body": "    return a**2 + b**2 == c**2",
        "result": "failed: ",
        "similarities": [
            0.9979278445243835,
            0.9979278445243835,
            0.9968352913856506,
            0.9979665875434875,
            0.9968352913856506,
            0.995050311088562,
            0.9968352913856506,
            0.9967314004898071,
            0.9979278445243835,
            0.9968352913856506,
            0.9979665875434875,
            0.9970377683639526,
            0.9967314004898071,
            0.9967314004898071,
            0.9944291710853577,
            0.9979665875434875,
            0.9968352913856506,
            0.9979665875434875,
            0.9922878742218018,
            0.9979665875434875
        ]
    },
    "HumanEval/158": {
        "similarity": 0.994812548160553,
        "body": "    max_length = 0\n    result = ''\n    for word in words:\n        if len(set(word)) > max_length:\n            max_length = len(set(word))\n            result = word\n        elif len(set(word)) == max_length:\n            result = min(result, word)\n    return result",
        "result": "passed",
        "similarities": [
            0.986687421798706,
            0.9911257028579712,
            0.9934567809104919,
            0.993291974067688,
            0.99428790807724,
            0.9922540783882141,
            0.9885846376419067,
            0.9935989379882812,
            0.9941165447235107,
            0.9937962889671326,
            0.9933854937553406,
            0.9918193817138672,
            0.9725434184074402,
            0.9923356771469116,
            0.9947775602340698,
            0.9942948222160339,
            0.9932186603546143,
            0.9947881102561951,
            0.994812548160553,
            0.9943738579750061
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9958318471908569,
        "body": "    return [min(number + need, remaining), max(0, remaining - (number + need))]",
        "result": "failed: Error",
        "similarities": [
            0.9917823672294617,
            0.9957624673843384,
            0.9946865439414978,
            0.9939547181129456,
            0.9955554008483887,
            0.9876686930656433,
            0.9898369312286377,
            0.9958318471908569,
            0.9942101836204529,
            0.9926275014877319,
            0.9936822652816772,
            0.9954031109809875,
            0.9954746961593628,
            0.994724452495575,
            0.992561936378479,
            0.9948537945747375,
            0.9905833005905151,
            0.9883440732955933,
            0.9951995015144348,
            0.9942030906677246
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9899286031723022,
        "body": "    expression = '' \n    for i in range(len(operator)): \n        expression += str(operand[i]) + operator[i] \n    if len(operand) > 1: \n        expression += str(operand[-1]) \n    return eval(''.join(map(str, [expression])))",
        "result": "passed",
        "similarities": [
            0.9865772724151611,
            0.9810566306114197,
            0.9899286031723022,
            0.9849884510040283,
            0.9773980379104614,
            0.9841182231903076,
            0.979944109916687,
            0.9876343607902527,
            0.9881565570831299,
            0.98053377866745,
            0.9860427379608154,
            0.9895604848861694,
            0.9855645895004272,
            0.9864315390586853,
            0.9750795960426331,
            0.9885357618331909,
            0.9878415465354919,
            0.9821690917015076,
            0.9856614470481873,
            0.9759801626205444
        ]
    },
    "HumanEval/161": {
        "similarity": 0.9990603923797607,
        "body": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if any(c.isalpha() for c in s) else s[::-1]",
        "result": "passed",
        "similarities": [
            0.9990218281745911,
            0.9990507364273071,
            0.9989975690841675,
            0.9990178942680359,
            0.9989975690841675,
            0.9915819764137268,
            0.9989975690841675,
            0.998732328414917,
            0.9990178942680359,
            0.9990603923797607,
            0.9976173043251038,
            0.9990354180335999,
            0.9990005493164062,
            0.9990507364273071,
            0.9989975690841675,
            0.9989975690841675,
            0.9990507364273071,
            0.9990603923797607,
            0.9990188479423523,
            0.9931502938270569
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9962556958198547,
        "body": "import hashlib\n\nif not text:\n    return None\n\nreturn hashlib.md5(text.encode()).hexdigest()",
        "result": "failed: 'return' outside function (<string>, line 12)",
        "similarities": [
            0.9940638542175293,
            0.9961179494857788,
            0.9958280324935913,
            0.9957471489906311,
            0.9952982664108276,
            0.9957471489906311,
            0.9926199913024902,
            0.9961836934089661,
            0.9962555766105652,
            0.9962555766105652,
            0.9935314655303955,
            0.9948546886444092,
            0.9957471489906311,
            0.9859592914581299,
            0.9948546886444092,
            0.9955282807350159,
            0.9954145550727844,
            0.9883956909179688,
            0.9961179494857788,
            0.9962556958198547
        ]
    },
    "HumanEval/163": {
        "similarity": 0.9899315237998962,
        "body": "    return sorted([i for i in range(min(a, b), max(a, b) + 1) if int(str(i)[-1]) % 2 == 0])",
        "result": "failed: Test 1",
        "similarities": [
            0.9807952046394348,
            0.988431453704834,
            0.9874301552772522,
            0.9874301552772522,
            0.9771477580070496,
            0.9874301552772522,
            0.983540415763855,
            0.9874301552772522,
            0.9874301552772522,
            0.9747462272644043,
            0.979094386100769,
            0.9874301552772522,
            0.9743009805679321,
            0.9845278859138489,
            0.9789211750030518,
            0.9787212014198303,
            0.9874301552772522,
            0.9874301552772522,
            0.9899315237998962,
            0.9895071983337402
        ]
    }
}