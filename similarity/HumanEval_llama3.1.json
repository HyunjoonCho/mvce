{
    "HumanEval/0": {
        "similarity": 0.9991071820259094,
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9972447752952576,
            0.9991071820259094,
            0.9991071820259094,
            0.9991071820259094,
            0.9991032481193542,
            0.9991049766540527,
            0.9991071820259094,
            0.9991071820259094,
            0.9991071820259094,
            0.9991049766540527,
            0.9965226054191589,
            0.9991049766540527,
            0.9991049766540527,
            0.9991071820259094,
            0.9991071820259094,
            0.9991071820259094,
            0.9991071820259094,
            0.9991071820259094,
            0.9878489971160889,
            0.9991071820259094
        ]
    },
    "HumanEval/1": {
        "similarity": 0.9977927207946777,
        "body": "    result = []\n    current_group = ''\n    nesting_level = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            nesting_level += 1\n            current_group += char\n        elif char == ')':\n            nesting_level -= 1\n            current_group += char\n            if nesting_level == 0:\n                result.append(current_group)\n                current_group = ''\n    return result",
        "result": "passed",
        "similarities": [
            0.9922009706497192,
            0.9973610639572144,
            0.9974335432052612,
            0.9964274168014526,
            0.9958057403564453,
            0.9965285062789917,
            0.9977308511734009,
            0.9973765015602112,
            0.9977927207946777,
            0.9973264336585999,
            0.9966999888420105,
            0.9977308511734009,
            0.9973376393318176,
            0.9944151043891907,
            0.9962030053138733,
            0.993973970413208,
            0.9937424063682556,
            0.9975776672363281,
            0.9977001547813416,
            0.9947933554649353
        ]
    },
    "HumanEval/2": {
        "similarity": 0.9984506368637085,
        "body": "    return number - int(number)",
        "result": "passed",
        "similarities": [
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9950770139694214,
            0.9984506368637085,
            0.9960664510726929,
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9984506368637085,
            0.9957395792007446,
            0.9960664510726929,
            0.9963763356208801,
            0.9960664510726929,
            0.9960664510726929,
            0.9984506368637085,
            0.9950770139694214
        ]
    },
    "HumanEval/3": {
        "similarity": 0.9994763135910034,
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9994763135910034,
            0.9994763135910034,
            0.9971040487289429,
            0.9994763135910034,
            0.9994763135910034,
            0.9994763135910034,
            0.9994763135910034,
            0.9994763135910034,
            0.9994739890098572,
            0.9994763135910034,
            0.9994763135910034,
            0.9971040487289429,
            0.9994739890098572,
            0.9994763135910034,
            0.9994763135910034,
            0.9994739890098572,
            0.9994739890098572,
            0.9994763135910034,
            0.9994763135910034,
            0.9971040487289429
        ]
    },
    "HumanEval/4": {
        "similarity": 0.997654139995575,
        "body": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)",
        "result": "passed",
        "similarities": [
            0.9976091980934143,
            0.9948171377182007,
            0.997654139995575,
            0.997397780418396,
            0.997654139995575,
            0.9966068267822266,
            0.990964412689209,
            0.9968474507331848,
            0.997397780418396,
            0.9967482686042786,
            0.9967774152755737,
            0.990964412689209,
            0.9964601397514343,
            0.9964601397514343,
            0.9973788857460022,
            0.9962648153305054,
            0.9971998333930969,
            0.995934247970581,
            0.989906907081604,
            0.9973788857460022
        ]
    },
    "HumanEval/5": {
        "similarity": 0.9966984987258911,
        "body": "    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result",
        "result": "passed",
        "similarities": [
            0.9966984987258911,
            0.9960624575614929,
            0.990223228931427,
            0.9966983795166016,
            0.9921430349349976,
            0.9833793640136719,
            0.9966984987258911,
            0.9935552477836609,
            0.9966984987258911,
            0.9966984987258911,
            0.9966599345207214,
            0.9947422742843628,
            0.9936392903327942,
            0.9960881471633911,
            0.9857629537582397,
            0.9961602091789246,
            0.9966984987258911,
            0.9966984987258911,
            0.9965067505836487,
            0.9965009093284607
        ]
    },
    "HumanEval/6": {
        "similarity": 0.9979717135429382,
        "body": "    result = []\n    for group in paren_string.split():\n        nesting_level = 0\n        max_nesting_level = 0\n        for char in group:\n            if char == '(':\n                nesting_level += 1\n                max_nesting_level = max(max_nesting_level, nesting_level)\n            elif char == ')':\n                nesting_level -= 1\n        result.append(max_nesting_level)\n    return result",
        "result": "passed",
        "similarities": [
            0.9952211976051331,
            0.9955986738204956,
            0.9920461773872375,
            0.9978213906288147,
            0.9978213906288147,
            0.9976640343666077,
            0.9978113770484924,
            0.9976089000701904,
            0.9958802461624146,
            0.9970940947532654,
            0.994293212890625,
            0.9975022673606873,
            0.9979717135429382,
            0.9976335167884827,
            0.9975705742835999,
            0.9979717135429382,
            0.9967392683029175,
            0.9978213906288147,
            0.997279703617096,
            0.9963503479957581
        ]
    },
    "HumanEval/7": {
        "similarity": 0.9996349215507507,
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed",
        "similarities": [
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507,
            0.9967143535614014,
            0.9996349215507507,
            0.9967143535614014,
            0.9996349215507507,
            0.9996349215507507,
            0.9996349215507507
        ]
    },
    "HumanEval/8": {
        "similarity": 0.9971341490745544,
        "body": "    total_sum = 0\n    product = 1\n    for num in numbers:\n        total_sum += num\n        product *= num\n    return total_sum, product",
        "result": "passed",
        "similarities": [
            0.9965726137161255,
            0.9965509176254272,
            0.9970996379852295,
            0.9955180287361145,
            0.9969831705093384,
            0.9970295429229736,
            0.9971341490745544,
            0.996987521648407,
            0.9868851900100708,
            0.9970118999481201,
            0.9970108866691589,
            0.9954665303230286,
            0.995538592338562,
            0.9969900250434875,
            0.9943442344665527,
            0.980746328830719,
            0.9971341490745544,
            0.9961103200912476,
            0.996968150138855,
            0.9949501752853394
        ]
    },
    "HumanEval/9": {
        "similarity": 0.9955223798751831,
        "body": "    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result",
        "result": "passed",
        "similarities": [
            0.9955223798751831,
            0.9952232241630554,
            0.9821994304656982,
            0.9920503497123718,
            0.9951334595680237,
            0.9821994304656982,
            0.9951180815696716,
            0.9944080710411072,
            0.9950097799301147,
            0.9940639138221741,
            0.9955223798751831,
            0.9949858784675598,
            0.9931936860084534,
            0.9953075051307678,
            0.9951204061508179,
            0.9951334595680237,
            0.9953886270523071,
            0.9953075051307678,
            0.9953197836875916,
            0.9919742941856384
        ]
    },
    "HumanEval/10": {
        "similarity": 0.9969690442085266,
        "body": "    prefix = ''\n    for i in range(len(string), 0, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            return prefix + string[:i] + postfix[::-1]\n        prefix = string[:i] + postfix\n    return string",
        "result": "failed: ",
        "similarities": [
            0.9967274069786072,
            0.9952254295349121,
            0.9963790774345398,
            0.9949066042900085,
            0.9955952167510986,
            0.9948884844779968,
            0.9957000613212585,
            0.9966697692871094,
            0.9967653155326843,
            0.9955975413322449,
            0.9947335124015808,
            0.992570698261261,
            0.9938872456550598,
            0.9969690442085266,
            0.9960993528366089,
            0.9951071739196777,
            0.9962713122367859,
            0.9954900145530701,
            0.9967805743217468,
            0.9872920513153076
        ]
    },
    "HumanEval/11": {
        "similarity": 0.9915448427200317,
        "body": "    return ''.join('1' if (a[i] == '1') ^ (b[i] == '1') else '0' for i in range(len(a)))",
        "result": "passed",
        "similarities": [
            0.9879865050315857,
            0.9912807941436768,
            0.9892652630805969,
            0.9824421405792236,
            0.9889723062515259,
            0.9879865050315857,
            0.9896439909934998,
            0.9872090220451355,
            0.986647367477417,
            0.9915448427200317,
            0.9856756329536438,
            0.9870133996009827,
            0.982663631439209,
            0.9888723492622375,
            0.9886957406997681,
            0.9766138792037964,
            0.9893222451210022,
            0.9892652630805969,
            0.983386218547821,
            0.9893222451210022
        ]
    },
    "HumanEval/12": {
        "similarity": 0.9881987571716309,
        "body": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)",
        "result": "passed",
        "similarities": [
            0.9754672646522522,
            0.9853867292404175,
            0.9876186847686768,
            0.9848013520240784,
            0.9836741089820862,
            0.9787037372589111,
            0.9827234148979187,
            0.9822415709495544,
            0.9836741089820862,
            0.9749789834022522,
            0.9876186847686768,
            0.9845802187919617,
            0.9798350930213928,
            0.9857088327407837,
            0.9790233969688416,
            0.9881987571716309,
            0.9787037372589111,
            0.9779632091522217,
            0.9784369468688965,
            0.9784630537033081
        ]
    },
    "HumanEval/13": {
        "similarity": 0.9989172220230103,
        "body": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)",
        "result": "passed",
        "similarities": [
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9908451437950134,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9986843466758728,
            0.9989172220230103,
            0.9989172220230103,
            0.9900314211845398,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103,
            0.9989172220230103
        ]
    },
    "HumanEval/14": {
        "similarity": 0.9932072162628174,
        "body": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return sorted(prefixes)",
        "result": "passed",
        "similarities": [
            0.9843613505363464,
            0.993020236492157,
            0.9931907653808594,
            0.9897281527519226,
            0.9928056597709656,
            0.9932072162628174,
            0.991373598575592,
            0.9905760884284973,
            0.9850841164588928,
            0.9916483163833618,
            0.9932072162628174,
            0.9905760884284973,
            0.9931907653808594,
            0.9932072162628174,
            0.9916483163833618,
            0.9932072162628174,
            0.9863494038581848,
            0.9863494038581848,
            0.9843613505363464,
            0.9932072162628174
        ]
    },
    "HumanEval/15": {
        "similarity": 0.9990382790565491,
        "body": "    return ' '.join(map(str, range(n + 1)))",
        "result": "passed",
        "similarities": [
            0.9990382790565491,
            0.9989220499992371,
            0.9990382790565491,
            0.9990382790565491,
            0.9989220499992371,
            0.9989220499992371,
            0.9990382790565491,
            0.9990382790565491,
            0.9989220499992371,
            0.9969709515571594,
            0.9989220499992371,
            0.9990382790565491,
            0.9990382790565491,
            0.9989220499992371,
            0.9990382790565491,
            0.9989220499992371,
            0.9989220499992371,
            0.9990382790565491,
            0.9989220499992371,
            0.9990382790565491
        ]
    },
    "HumanEval/16": {
        "similarity": 0.9991101026535034,
        "body": "    return len(set(string.casefold()))",
        "result": "passed",
        "similarities": [
            0.9991101026535034,
            0.9991101026535034,
            0.9991101026535034,
            0.9988216757774353,
            0.9990545511245728,
            0.9991101026535034,
            0.9991101026535034,
            0.9991101026535034,
            0.9988216757774353,
            0.9988216757774353,
            0.9991101026535034,
            0.9990545511245728,
            0.9991101026535034,
            0.9988216757774353,
            0.9988216757774353,
            0.9988216757774353,
            0.9988216757774353,
            0.9991101026535034,
            0.9991101026535034,
            0.9989222288131714
        ]
    },
    "HumanEval/17": {
        "similarity": 0.9912394285202026,
        "body": "    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result",
        "result": "passed",
        "similarities": [
            0.9821912050247192,
            0.9895578026771545,
            0.9780062437057495,
            0.9902865886688232,
            0.9835669994354248,
            0.9825651049613953,
            0.9889639019966125,
            0.9851369261741638,
            0.9823348522186279,
            0.989586591720581,
            0.9828988909721375,
            0.9827677011489868,
            0.9853678345680237,
            0.9891697764396667,
            0.9881913065910339,
            0.9897538423538208,
            0.9912394285202026,
            0.9910041689872742,
            0.973162829875946,
            0.9885139465332031
        ]
    },
    "HumanEval/18": {
        "similarity": 0.992171049118042,
        "body": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9878299236297607,
            0.9908744692802429,
            0.9822543263435364,
            0.9872894287109375,
            0.9864672422409058,
            0.9868392944335938,
            0.9737939238548279,
            0.9906608462333679,
            0.9872894287109375,
            0.990478515625,
            0.9872894287109375,
            0.9908744692802429,
            0.9878299236297607,
            0.992171049118042,
            0.9869276285171509,
            0.9865981936454773,
            0.9911476969718933,
            0.9835495352745056,
            0.9895113110542297,
            0.9908744692802429
        ]
    },
    "HumanEval/19": {
        "similarity": 0.9912914633750916,
        "body": "        valid_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        numbers_list = [valid_numbers[num] for num in numbers.split()]\n        return ' '.join(sorted([str(num) for num in numbers_list]))",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9874178171157837,
            0.9868209362030029,
            0.9734570384025574,
            0.9902798533439636,
            0.9851208925247192,
            0.9734570384025574,
            0.9912914633750916,
            0.9903064370155334,
            0.9884688854217529,
            0.9911178946495056,
            0.9904001951217651,
            0.990664541721344,
            0.9770860075950623,
            0.9876793622970581,
            0.9875297546386719,
            0.9896398186683655,
            0.9902855753898621,
            0.9906771779060364,
            0.9902572631835938,
            0.9902572631835938
        ]
    },
    "HumanEval/20": {
        "similarity": 0.9977380633354187,
        "body": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair",
        "result": "passed",
        "similarities": [
            0.9973160624504089,
            0.9968767762184143,
            0.9931760430335999,
            0.9976608157157898,
            0.9941645264625549,
            0.9970793724060059,
            0.9975496530532837,
            0.9942353963851929,
            0.9966468811035156,
            0.9974173307418823,
            0.9958629608154297,
            0.9972177147865295,
            0.9944677948951721,
            0.9970899820327759,
            0.9949291944503784,
            0.9963434934616089,
            0.9975496530532837,
            0.9963486194610596,
            0.9971455931663513,
            0.9977380633354187
        ]
    },
    "HumanEval/21": {
        "similarity": 0.9942017793655396,
        "body": "    smallest = min(numbers)\n    largest = max(numbers)\n    return [(x - smallest) / (largest - smallest) for x in numbers]",
        "result": "passed",
        "similarities": [
            0.9899688363075256,
            0.9901815056800842,
            0.9940677285194397,
            0.9704818725585938,
            0.9901815056800842,
            0.99394690990448,
            0.9941415190696716,
            0.9841289520263672,
            0.9843745827674866,
            0.9941271543502808,
            0.9940873980522156,
            0.99394690990448,
            0.9940873980522156,
            0.9940873980522156,
            0.9941271543502808,
            0.9899688363075256,
            0.9941651225090027,
            0.99394690990448,
            0.9942017793655396,
            0.9940491914749146
        ]
    },
    "HumanEval/22": {
        "similarity": 0.9997162222862244,
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed",
        "similarities": [
            0.9956086874008179,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9995627403259277,
            0.9997162222862244,
            0.9997162222862244,
            0.9997162222862244,
            0.9995627403259277,
            0.9997162222862244,
            0.9997162222862244,
            0.9995627403259277,
            0.9995627403259277
        ]
    },
    "HumanEval/23": {
        "similarity": 0.9980598092079163,
        "body": "return len(string)",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9980598092079163,
            0.9980598092079163,
            0.9963968396186829,
            0.9963968396186829,
            0.9980598092079163,
            0.9980598092079163,
            0.9963968396186829,
            0.9980598092079163,
            0.9963968396186829,
            0.9980598092079163,
            0.9980598092079163,
            0.9980598092079163,
            0.9963968396186829,
            0.9963968396186829,
            0.9980598092079163,
            0.9980598092079163,
            0.9980598092079163,
            0.9980598092079163,
            0.9963968396186829,
            0.9980598092079163
        ]
    },
    "HumanEval/24": {
        "similarity": 0.9996674060821533,
        "body": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None",
        "result": "passed",
        "similarities": [
            0.9996674060821533,
            0.9996674060821533,
            0.9996674060821533,
            0.9974426627159119,
            0.9995160698890686,
            0.9995160698890686,
            0.9996674060821533,
            0.9996674060821533,
            0.9996445178985596,
            0.9995160698890686,
            0.9995160698890686,
            0.9995160698890686,
            0.9996674060821533,
            0.9994701743125916,
            0.9995160698890686,
            0.9995160698890686,
            0.9996674060821533,
            0.9996674060821533,
            0.9995446801185608,
            0.9996445178985596
        ]
    },
    "HumanEval/25": {
        "similarity": 0.9983163475990295,
        "body": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed",
        "similarities": [
            0.9980894327163696,
            0.9983163475990295,
            0.9980894327163696,
            0.9983163475990295,
            0.9959931969642639,
            0.9983163475990295,
            0.9983163475990295,
            0.9953169822692871,
            0.9980894327163696,
            0.9980894327163696,
            0.9980894327163696,
            0.9959143400192261,
            0.9980140328407288,
            0.9983163475990295,
            0.9982932209968567,
            0.9959931969642639,
            0.9959498047828674,
            0.9983163475990295,
            0.9980894327163696,
            0.9980894327163696
        ]
    },
    "HumanEval/26": {
        "similarity": 0.9949826598167419,
        "body": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9887849688529968,
            0.9949826002120972,
            0.9948455691337585,
            0.9948455691337585,
            0.9889435172080994,
            0.9949826598167419,
            0.9948455691337585,
            0.9949826598167419,
            0.9944585561752319,
            0.9887849688529968,
            0.9949826598167419,
            0.9948455691337585,
            0.9947869181632996,
            0.9702913165092468,
            0.9949826598167419,
            0.9948455691337585,
            0.9949826002120972,
            0.9892967939376831,
            0.9949826002120972,
            0.9949826002120972
        ]
    },
    "HumanEval/27": {
        "similarity": 0.9982251524925232,
        "body": "    return ''.join(c.swapcase() for c in string)",
        "result": "passed",
        "similarities": [
            0.9982251524925232,
            0.9982251524925232,
            0.9982251524925232,
            0.9981374144554138,
            0.9981374144554138,
            0.9978260397911072,
            0.9982251524925232,
            0.9978260397911072,
            0.9978260397911072,
            0.9981374144554138,
            0.9982251524925232,
            0.9978260397911072,
            0.9981374144554138,
            0.9982251524925232,
            0.9982251524925232,
            0.9755012392997742,
            0.9982251524925232,
            0.9978260397911072,
            0.9982251524925232,
            0.9959872364997864
        ]
    },
    "HumanEval/28": {
        "similarity": 0.9979456663131714,
        "body": "    return ''.join(strings)",
        "result": "passed",
        "similarities": [
            0.9950149059295654,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9950147867202759,
            0.9950147867202759,
            0.9950147867202759,
            0.9979456663131714,
            0.9979456663131714,
            0.9797621369361877,
            0.9979456663131714,
            0.9979456663131714,
            0.9979456663131714,
            0.9950149059295654
        ]
    },
    "HumanEval/29": {
        "similarity": 0.9999648928642273,
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed",
        "similarities": [
            0.9999648928642273,
            0.999934732913971,
            0.999934732913971,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.9999648928642273,
            0.999934732913971,
            0.999934732913971,
            0.9999648928642273,
            0.999934732913971,
            0.9999648928642273,
            0.999934732913971,
            0.9999648928642273,
            0.999934732913971
        ]
    },
    "HumanEval/30": {
        "similarity": 0.9996239542961121,
        "body": "    return [i for i in l if i > 0]",
        "result": "passed",
        "similarities": [
            0.995114266872406,
            0.9996239542961121,
            0.9995109438896179,
            0.9996239542961121,
            0.9996239542961121,
            0.9996239542961121,
            0.9995545744895935,
            0.9996239542961121,
            0.9996239542961121,
            0.9995109438896179,
            0.9996239542961121,
            0.9996239542961121,
            0.9996239542961121,
            0.9995109438896179,
            0.9995109438896179,
            0.9996239542961121,
            0.9995545744895935,
            0.9995545744895935,
            0.9995109438896179,
            0.9996239542961121
        ]
    },
    "HumanEval/31": {
        "similarity": 0.9996871948242188,
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed",
        "similarities": [
            0.9981046915054321,
            0.9996610283851624,
            0.9996744394302368,
            0.999674379825592,
            0.999680757522583,
            0.9996871948242188,
            0.9996744394302368,
            0.9996744394302368,
            0.9996744394302368,
            0.999680757522583,
            0.9996744394302368,
            0.9981046915054321,
            0.9996871948242188,
            0.9996610283851624,
            0.999680757522583,
            0.999680757522583,
            0.9996744394302368,
            0.999680757522583,
            0.9989807605743408,
            0.9994528889656067
        ]
    },
    "HumanEval/32": {
        "similarity": 0.9917529225349426,
        "body": "    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n    a = xs[-1]\n    b = -sum([coeff for i, coeff in enumerate(xs) if i < len(xs) - 1 and coeff != 0])\n    x = round(-b / (2 * a), 12)\n    return x",
        "result": "failed: ",
        "similarities": [
            0.9830055236816406,
            0.9829129576683044,
            0.9913790822029114,
            0.9917529225349426,
            0.9799661040306091,
            0.9856740236282349,
            0.9780572652816772,
            0.9857353568077087,
            0.9867897033691406,
            0.9900647401809692,
            0.9908149242401123,
            0.991337239742279,
            0.9671658277511597,
            0.9911394715309143,
            0.9797186851501465,
            0.9866878986358643,
            0.9896313548088074,
            0.9877806305885315,
            0.9809580445289612,
            0.9871340394020081
        ]
    },
    "HumanEval/33": {
        "similarity": 0.9940845370292664,
        "body": "    return [x if i % 3 != 0 else sorted([y for j, y in enumerate(l) if j % 3 == 0])[k] \n            for k, x in enumerate(l)]",
        "result": "failed: name 'i' is not defined",
        "similarities": [
            0.993565022945404,
            0.9938802123069763,
            0.9809660911560059,
            0.9927466511726379,
            0.9926648736000061,
            0.9938802123069763,
            0.9917646646499634,
            0.9940845370292664,
            0.9940845370292664,
            0.9926648736000061,
            0.9929960370063782,
            0.9926648736000061,
            0.9892120361328125,
            0.9780514240264893,
            0.992975115776062,
            0.9933457970619202,
            0.9930080771446228,
            0.9872955679893494,
            0.9933502674102783,
            0.9877526164054871
        ]
    },
    "HumanEval/34": {
        "similarity": 0.9998934864997864,
        "body": "    return sorted(set(l))",
        "result": "passed",
        "similarities": [
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9979806542396545,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864,
            0.9998934864997864
        ]
    },
    "HumanEval/35": {
        "similarity": 0.9966782331466675,
        "body": "return max(l)",
        "result": "failed: 'return' outside function (<string>, line 10)",
        "similarities": [
            0.9959397912025452,
            0.9959397912025452,
            0.9966782331466675,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9959397912025452,
            0.9966782331466675,
            0.9966782331466675,
            0.9959397912025452
        ]
    },
    "HumanEval/36": {
        "similarity": 0.9941297769546509,
        "body": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count",
        "result": "failed: ",
        "similarities": [
            0.9941297769546509,
            0.9903053641319275,
            0.9927151203155518,
            0.992680013179779,
            0.9941297769546509,
            0.9927151203155518,
            0.9916797280311584,
            0.992680013179779,
            0.986822247505188,
            0.992680013179779,
            0.9940902590751648,
            0.9923305511474609,
            0.9856909513473511,
            0.992680013179779,
            0.9918409585952759,
            0.9927151203155518,
            0.986822247505188,
            0.9941297769546509,
            0.9911641478538513,
            0.9907501935958862
        ]
    },
    "HumanEval/37": {
        "similarity": 0.9928725361824036,
        "body": "    return l.copy()[:len(l):2] + sorted([x for i, x in enumerate(l) if i % 2 == 0])",
        "result": "failed: ",
        "similarities": [
            0.9883597493171692,
            0.9893223643302917,
            0.9838161468505859,
            0.981961190700531,
            0.9910226464271545,
            0.9895569682121277,
            0.9845408201217651,
            0.9928725361824036,
            0.9906469583511353,
            0.9899091124534607,
            0.9904195070266724,
            0.9882551431655884,
            0.9912317395210266,
            0.9903837442398071,
            0.9883597493171692,
            0.9784700274467468,
            0.9900588989257812,
            0.9914265871047974,
            0.9907025694847107,
            0.9836911559104919
        ]
    },
    "HumanEval/38": {
        "similarity": 0.9985884428024292,
        "body": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([group[0] if len(group) == 3 else group for group in groups])",
        "result": "failed: ",
        "similarities": [
            0.9985884428024292,
            0.9979658722877502,
            0.9985884428024292,
            0.9970144033432007,
            0.9985884428024292,
            0.9985280632972717,
            0.9979658722877502,
            0.9916698932647705,
            0.9932873249053955,
            0.9985884428024292,
            0.9983843564987183,
            0.9982264637947083,
            0.9985884428024292,
            0.9984763264656067,
            0.9979332685470581,
            0.9985811114311218,
            0.9985884428024292,
            0.9984723329544067,
            0.9970691204071045,
            0.9982264637947083
        ]
    },
    "HumanEval/39": {
        "similarity": 0.9969450235366821,
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        if is_prime(b):\n            n -= 1\n    return b",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.9950312376022339,
            0.995601236820221,
            0.9955209493637085,
            0.9969450235366821,
            0.9948633909225464,
            0.9953834414482117,
            0.9959489703178406,
            0.9926149249076843,
            0.9967938661575317,
            0.9940494894981384,
            0.9965571165084839,
            0.9953161478042603,
            0.9956405162811279,
            0.9960473775863647,
            0.9968158602714539,
            0.9934027791023254,
            0.9969450235366821,
            0.9958783388137817,
            0.9955062866210938,
            0.9965453147888184
        ]
    },
    "HumanEval/40": {
        "similarity": 0.9942631125450134,
        "body": "    l = sorted(set(l))  # remove duplicates and sort the list\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if -l[i] - l[j] in l[j+1:]:\n                return True\n    return False",
        "result": "failed: ",
        "similarities": [
            0.9762870669364929,
            0.9907719492912292,
            0.9938756227493286,
            0.9940972924232483,
            0.9941102862358093,
            0.9938756227493286,
            0.9938827157020569,
            0.9937248229980469,
            0.9942631125450134,
            0.9937248229980469,
            0.9939658641815186,
            0.9897800087928772,
            0.9942094683647156,
            0.9936360120773315,
            0.9926175475120544,
            0.9940972924232483,
            0.9940972924232483,
            0.9936360120773315,
            0.9902771711349487,
            0.9937117695808411
        ]
    },
    "HumanEval/41": {
        "similarity": 0.9875836968421936,
        "body": "    coll = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i - j) % 2 == 1:\n                coll += 1\n    return coll",
        "result": "failed: ",
        "similarities": [
            0.9677808880805969,
            0.9677808880805969,
            0.9875836968421936,
            0.9806315898895264,
            0.9859938621520996,
            0.9864246845245361,
            0.9771973490715027,
            0.9735758900642395,
            0.9822707176208496,
            0.9677808880805969,
            0.9646132588386536,
            0.9776844382286072,
            0.9871906638145447,
            0.977159321308136,
            0.9841051697731018,
            0.9873813986778259,
            0.9875564575195312,
            0.9677808880805969,
            0.9874041676521301,
            0.9729708433151245
        ]
    },
    "HumanEval/42": {
        "similarity": 0.9999573230743408,
        "body": "    return [x + 1 for x in l]",
        "result": "passed",
        "similarities": [
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408,
            0.9998720288276672,
            0.9999573230743408,
            0.9999573230743408,
            0.9998720288276672,
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408,
            0.9998720288276672,
            0.9999573230743408,
            0.9998720288276672,
            0.9998720288276672,
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408,
            0.9999573230743408
        ]
    },
    "HumanEval/43": {
        "similarity": 0.9971398115158081,
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed",
        "similarities": [
            0.9971398115158081,
            0.996681809425354,
            0.9971398115158081,
            0.9966502785682678,
            0.9971398115158081,
            0.9961513876914978,
            0.9971242547035217,
            0.9971398115158081,
            0.9877184629440308,
            0.9964807629585266,
            0.9895914793014526,
            0.9971398115158081,
            0.996738851070404,
            0.9971398115158081,
            0.9962649345397949,
            0.9962186217308044,
            0.9971398115158081,
            0.9971398115158081,
            0.9964978098869324,
            0.9964807629585266
        ]
    },
    "HumanEval/44": {
        "similarity": 0.9952222108840942,
        "body": "    if x == 0:\n        return '0'\n\n    digits = \"0123456789\"\n    result = \"\"\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n\n    return result",
        "result": "passed",
        "similarities": [
            0.9940709471702576,
            0.9952222108840942,
            0.9949368834495544,
            0.988219141960144,
            0.9949031472206116,
            0.9884788393974304,
            0.9943757653236389,
            0.990228533744812,
            0.9934548139572144,
            0.9935067892074585,
            0.9944177269935608,
            0.9909481406211853,
            0.9946020245552063,
            0.9947820901870728,
            0.994003415107727,
            0.9933841228485107,
            0.9942747354507446,
            0.98422771692276,
            0.9951459169387817,
            0.989650309085846
        ]
    },
    "HumanEval/45": {
        "similarity": 0.9990878105163574,
        "body": "    return (a * h) / 2",
        "result": "passed",
        "similarities": [
            0.9974046349525452,
            0.9990878105163574,
            0.9982233643531799,
            0.9974046349525452,
            0.9984686970710754,
            0.9974046349525452,
            0.9990878105163574,
            0.9990878105163574,
            0.9990878105163574,
            0.9990878105163574,
            0.9990878105163574,
            0.9990878105163574,
            0.9990878105163574,
            0.9982233643531799,
            0.9970930814743042,
            0.9990878105163574,
            0.9984686970710754,
            0.9990878105163574,
            0.9982233643531799,
            0.9982233643531799
        ]
    },
    "HumanEval/46": {
        "similarity": 0.9971815347671509,
        "body": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
        "result": "failed: ",
        "similarities": [
            0.9971626996994019,
            0.996780514717102,
            0.9961276650428772,
            0.9962286949157715,
            0.9932764172554016,
            0.9971815347671509,
            0.9945254921913147,
            0.9971815347671509,
            0.9971712231636047,
            0.9971815347671509,
            0.9900773763656616,
            0.9885352253913879,
            0.9971665143966675,
            0.994989275932312,
            0.9944563508033752,
            0.9965146780014038,
            0.9944941997528076,
            0.9944008588790894,
            0.9965843558311462,
            0.9971815347671509
        ]
    },
    "HumanEval/47": {
        "similarity": 0.9973753690719604,
        "body": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2]) / 2",
        "result": "passed",
        "similarities": [
            0.9965097308158875,
            0.9941824078559875,
            0.9972307085990906,
            0.9953557252883911,
            0.9970263242721558,
            0.9955963492393494,
            0.9969479441642761,
            0.9928613901138306,
            0.997373104095459,
            0.9949160218238831,
            0.9951488971710205,
            0.9956823587417603,
            0.9973753690719604,
            0.9969785809516907,
            0.9957678914070129,
            0.9971238970756531,
            0.9969479441642761,
            0.9973753690719604,
            0.9969479441642761,
            0.9967131614685059
        ]
    },
    "HumanEval/48": {
        "similarity": 0.9994996786117554,
        "body": "    return text == text[::-1]",
        "result": "passed",
        "similarities": [
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9904962182044983,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554,
            0.9994996786117554
        ]
    },
    "HumanEval/49": {
        "similarity": 0.9987229108810425,
        "body": "    return pow(n, -1, p)",
        "result": "failed: ",
        "similarities": [
            0.9987229108810425,
            0.9983445405960083,
            0.9987229108810425,
            0.9983197450637817,
            0.9987229108810425,
            0.9931829571723938,
            0.9983445405960083,
            0.9987229108810425,
            0.9931829571723938,
            0.9982157349586487,
            0.9987229108810425,
            0.9987229108810425,
            0.9987229108810425,
            0.9987229108810425,
            0.9933574199676514,
            0.9987229108810425,
            0.9982157349586487,
            0.9982157349586487,
            0.9983445405960083,
            0.9987229108810425
        ]
    },
    "HumanEval/50": {
        "similarity": 0.9993161559104919,
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed",
        "similarities": [
            0.9983705282211304,
            0.9984453916549683,
            0.99850994348526,
            0.9993161559104919,
            0.99850994348526,
            0.9993161559104919,
            0.9993161559104919,
            0.9979438781738281,
            0.9993161559104919,
            0.9993161559104919,
            0.9992910623550415,
            0.9993161559104919,
            0.9993161559104919,
            0.9993161559104919,
            0.9985098838806152,
            0.9993161559104919,
            0.9993161559104919,
            0.9993161559104919,
            0.9993161559104919,
            0.9993161559104919
        ]
    },
    "HumanEval/51": {
        "similarity": 0.9987760782241821,
        "body": "    return ''.join([c for c in text if c.lower() not in 'aeiou'])",
        "result": "passed",
        "similarities": [
            0.9987207055091858,
            0.9985404014587402,
            0.9987207055091858,
            0.9985404014587402,
            0.9987207055091858,
            0.9987207055091858,
            0.9985404014587402,
            0.9985404014587402,
            0.9976325035095215,
            0.9987207055091858,
            0.9986847639083862,
            0.9987207055091858,
            0.9985404014587402,
            0.9987760782241821,
            0.9987207055091858,
            0.9985404014587402,
            0.9985404014587402,
            0.9987207055091858,
            0.9987207055091858,
            0.9976325035095215
        ]
    },
    "HumanEval/52": {
        "similarity": 0.9996328949928284,
        "body": "    return all(i < t for i in l)",
        "result": "passed",
        "similarities": [
            0.99950110912323,
            0.9996328949928284,
            0.996923565864563,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9966490864753723,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284,
            0.9996328949928284
        ]
    },
    "HumanEval/53": {
        "similarity": 0.998252272605896,
        "body": "    return x + y",
        "result": "passed",
        "similarities": [
            0.998252272605896,
            0.9980657696723938,
            0.9980657696723938,
            0.998252272605896,
            0.998252272605896,
            0.9980657696723938,
            0.9980657696723938,
            0.998252272605896,
            0.9980657696723938,
            0.9980657696723938,
            0.998252272605896,
            0.9980657696723938,
            0.998252272605896,
            0.998252272605896,
            0.9942651391029358,
            0.9980657696723938,
            0.998252272605896,
            0.998252272605896,
            0.9980657696723938,
            0.998252272605896
        ]
    },
    "HumanEval/54": {
        "similarity": 0.9996981620788574,
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: ",
        "similarities": [
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9942644834518433,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574,
            0.9996981620788574
        ]
    },
    "HumanEval/55": {
        "similarity": 0.9964789152145386,
        "body": "    if n < 2:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
        "result": "passed",
        "similarities": [
            0.9933913350105286,
            0.9959248900413513,
            0.99567049741745,
            0.9958051443099976,
            0.9959670901298523,
            0.9957255125045776,
            0.9905881285667419,
            0.9943998456001282,
            0.995762050151825,
            0.9927488565444946,
            0.9962561726570129,
            0.9960424304008484,
            0.9905881285667419,
            0.995762050151825,
            0.9964789152145386,
            0.9950846433639526,
            0.996275782585144,
            0.9958051443099976,
            0.9900220632553101,
            0.9955761432647705
        ]
    },
    "HumanEval/56": {
        "similarity": 0.9946309924125671,
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed",
        "similarities": [
            0.9942126274108887,
            0.9942089915275574,
            0.9946309924125671,
            0.9942126274108887,
            0.9727098345756531,
            0.9942126274108887,
            0.972379207611084,
            0.9777554869651794,
            0.9938856363296509,
            0.9942126274108887,
            0.9942506551742554,
            0.9942089915275574,
            0.9942089915275574,
            0.9942506551742554,
            0.9945359826087952,
            0.9942506551742554,
            0.9942126274108887,
            0.9946309924125671,
            0.9942560791969299,
            0.9942506551742554
        ]
    },
    "HumanEval/57": {
        "similarity": 0.9963560700416565,
        "body": "    return all(i <= j for i, j in zip(l, l[1:])) or all(i >= j for i, j in zip(l, l[1:]))",
        "result": "passed",
        "similarities": [
            0.9949297904968262,
            0.9956905245780945,
            0.9931260943412781,
            0.9958440065383911,
            0.9902355074882507,
            0.9902225136756897,
            0.9958440065383911,
            0.9963560700416565,
            0.9954207539558411,
            0.9958440065383911,
            0.9902355074882507,
            0.9938921928405762,
            0.9958440065383911,
            0.9954207539558411,
            0.9958440065383911,
            0.9958440065383911,
            0.9958440065383911,
            0.9958440065383911,
            0.9958440065383911,
            0.9954207539558411
        ]
    },
    "HumanEval/58": {
        "similarity": 0.9990866780281067,
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed",
        "similarities": [
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.995935320854187,
            0.9990866780281067,
            0.995935320854187,
            0.9971338510513306,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9990866780281067,
            0.9960293173789978,
            0.9990866780281067
        ]
    },
    "HumanEval/59": {
        "similarity": 1.000000238418579,
        "body": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "result": "passed",
        "similarities": [
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579,
            1.000000238418579
        ]
    },
    "HumanEval/60": {
        "similarity": 0.9990038871765137,
        "body": "    return n * (n + 1) // 2",
        "result": "passed",
        "similarities": [
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9921116232872009,
            0.9990038871765137,
            0.9925356507301331,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9964659810066223,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137,
            0.9990038871765137
        ]
    },
    "HumanEval/61": {
        "similarity": 0.9931288361549377,
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append('(')\n        elif bracket == ')' and stack:\n            stack.pop()\n    return not stack",
        "result": "failed: ",
        "similarities": [
            0.9925705790519714,
            0.9928045868873596,
            0.9925705790519714,
            0.9925705790519714,
            0.9825903177261353,
            0.9825903177261353,
            0.9925705790519714,
            0.9931288361549377,
            0.9921061992645264,
            0.9850252270698547,
            0.9925705790519714,
            0.9825903177261353,
            0.9925705790519714,
            0.9925705790519714,
            0.9928047060966492,
            0.9825903177261353,
            0.9925705790519714,
            0.9864311218261719,
            0.9925705790519714,
            0.9925705790519714
        ]
    },
    "HumanEval/62": {
        "similarity": 0.9941453337669373,
        "body": "    n = len(xs) - 1\n    return [i * xs[i] for i in range(n)]",
        "result": "failed: ",
        "similarities": [
            0.9872987866401672,
            0.9926850199699402,
            0.9927976727485657,
            0.9928542971611023,
            0.993915855884552,
            0.991748034954071,
            0.9925503134727478,
            0.9867191314697266,
            0.9843167662620544,
            0.991748034954071,
            0.9923264384269714,
            0.9941453337669373,
            0.9870855212211609,
            0.9809184074401855,
            0.9905831217765808,
            0.9920455813407898,
            0.9930368065834045,
            0.991748034954071,
            0.9927976727485657,
            0.9872987866401672
        ]
    },
    "HumanEval/63": {
        "similarity": 0.9994317889213562,
        "body": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c + a\n        return c",
        "result": "passed",
        "similarities": [
            0.9994292855262756,
            0.999428391456604,
            0.9990583658218384,
            0.9994317889213562,
            0.9994131326675415,
            0.9987229108810425,
            0.9987446665763855,
            0.9994317889213562,
            0.999428391456604,
            0.999428391456604,
            0.9994292855262756,
            0.999428391456604,
            0.999428391456604,
            0.9987080097198486,
            0.9927680492401123,
            0.9987716674804688,
            0.9993981719017029,
            0.9993504285812378,
            0.9994298815727234,
            0.9994317889213562
        ]
    },
    "HumanEval/64": {
        "similarity": 0.9965563416481018,
        "body": "    s = s.lower()\n    count = sum(1 for c in s if c in 'aeiouy' and (c != 'y' or s.endswith(c))) \n    return count",
        "result": "passed",
        "similarities": [
            0.9949123859405518,
            0.9954131245613098,
            0.9938679933547974,
            0.9948531985282898,
            0.9964051842689514,
            0.9926976561546326,
            0.9953520894050598,
            0.9927790760993958,
            0.9965563416481018,
            0.9962742328643799,
            0.996378481388092,
            0.9920346140861511,
            0.9963222146034241,
            0.9949637055397034,
            0.9964436292648315,
            0.9949132204055786,
            0.991424560546875,
            0.992091715335846,
            0.9932101368904114,
            0.9924048185348511
        ]
    },
    "HumanEval/65": {
        "similarity": 0.9953394532203674,
        "body": "    x = str(x)\n    n = len(x)\n    if shift >= n:\n        return x[::-1]\n    return x[-shift:] + x[:-shift]",
        "result": "failed: ",
        "similarities": [
            0.9944402575492859,
            0.9855043292045593,
            0.9944713115692139,
            0.9847838878631592,
            0.994033932685852,
            0.9952720999717712,
            0.9947925209999084,
            0.9877805113792419,
            0.994376540184021,
            0.9922716021537781,
            0.991788387298584,
            0.994480550289154,
            0.9918937683105469,
            0.9953394532203674,
            0.987859845161438,
            0.9950441122055054,
            0.9945529103279114,
            0.9949600100517273,
            0.994787335395813,
            0.9951828718185425
        ]
    },
    "HumanEval/66": {
        "similarity": 0.999592125415802,
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed",
        "similarities": [
            0.999592125415802,
            0.9987763166427612,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.9987763166427612,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.9987763166427612,
            0.999592125415802,
            0.9987763166427612,
            0.999592125415802,
            0.999592125415802,
            0.999592125415802,
            0.9987763166427612
        ]
    },
    "HumanEval/67": {
        "similarity": 0.9940072894096375,
        "body": "    words = s.split()\n    total_apples = int(''.join(filter(str.isdigit, words[0])))\n    total_oranges = int(''.join(filter(str.isdigit, words[-1])))\n    return n - total_apples - total_oranges",
        "result": "failed: invalid literal for int() with base 10: ''",
        "similarities": [
            0.9924407005310059,
            0.9885751605033875,
            0.9917309284210205,
            0.993835985660553,
            0.9890705943107605,
            0.9924558401107788,
            0.9917988181114197,
            0.9917072653770447,
            0.9899325370788574,
            0.9859206676483154,
            0.9901868104934692,
            0.9925081133842468,
            0.9923954010009766,
            0.9904924035072327,
            0.9930381774902344,
            0.9865298867225647,
            0.9940072894096375,
            0.9932971596717834,
            0.9894052743911743,
            0.9938806295394897
        ]
    },
    "HumanEval/68": {
        "similarity": 0.9957261681556702,
        "body": "    if not arr:\n        return []\n    \n    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    \n    smallest_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n    \n    return [smallest_even_node[0], smallest_even_node[1]]",
        "result": "failed: min() arg is an empty sequence",
        "similarities": [
            0.9950370788574219,
            0.9941727519035339,
            0.9953296184539795,
            0.9941191673278809,
            0.9931166768074036,
            0.9948933124542236,
            0.995387852191925,
            0.9948513507843018,
            0.9952222108840942,
            0.9957261681556702,
            0.9939984679222107,
            0.9950879812240601,
            0.9940534830093384,
            0.9933730959892273,
            0.9921632409095764,
            0.9926223754882812,
            0.99457186460495,
            0.9945461750030518,
            0.988468587398529,
            0.9899405241012573
        ]
    },
    "HumanEval/69": {
        "similarity": 0.9937396049499512,
        "body": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    ans = -1\n    for key, value in freq.items():\n        if 0 < key <= value:\n            ans = max(ans, key)\n    return ans",
        "result": "passed",
        "similarities": [
            0.9881535768508911,
            0.9918177723884583,
            0.9910788536071777,
            0.9645658731460571,
            0.9886489510536194,
            0.9933744072914124,
            0.9923039674758911,
            0.9936172366142273,
            0.9897450804710388,
            0.9913149476051331,
            0.9934397339820862,
            0.9917210936546326,
            0.9932261109352112,
            0.9929473400115967,
            0.9881535768508911,
            0.9930823445320129,
            0.9928173422813416,
            0.9931454062461853,
            0.9937396049499512,
            0.9924331307411194
        ]
    },
    "HumanEval/70": {
        "similarity": 0.9911447167396545,
        "body": "    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        if len(lst) % 2 == 1:  # if length is odd\n            result.append(min_val)\n            del lst[lst.index(min_val)]\n            if lst:  # check if list is not empty\n                result.append(max_val)\n                del lst[lst.index(max_val)]\n        else:\n            result.extend(sorted([min_val, max_val], reverse=True))\n            del lst[lst.index(min_val) : lst.index(max_val) + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9891376495361328,
            0.985079824924469,
            0.9874474406242371,
            0.9876939058303833,
            0.9904782176017761,
            0.9889034628868103,
            0.9878102540969849,
            0.9911447167396545,
            0.9908856749534607,
            0.9837807416915894,
            0.990564227104187,
            0.9902145266532898,
            0.9883862733840942,
            0.990911602973938,
            0.989698588848114,
            0.9623503684997559,
            0.9889388680458069,
            0.9840416312217712,
            0.9902923107147217,
            0.9899531006813049
        ]
    },
    "HumanEval/71": {
        "similarity": 0.9978115558624268,
        "body": "    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "passed",
        "similarities": [
            0.9959709048271179,
            0.9967108368873596,
            0.9974035024642944,
            0.9957008361816406,
            0.9974198937416077,
            0.9965924620628357,
            0.9978115558624268,
            0.996629536151886,
            0.9971169829368591,
            0.9974196553230286,
            0.997184157371521,
            0.996629536151886,
            0.997248113155365,
            0.9953263998031616,
            0.996629536151886,
            0.996629536151886,
            0.9972148537635803,
            0.9971760511398315,
            0.9974873065948486,
            0.997184157371521
        ]
    },
    "HumanEval/72": {
        "similarity": 0.9987625479698181,
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed",
        "similarities": [
            0.9987625479698181,
            0.9985897541046143,
            0.9985897541046143,
            0.9985897541046143,
            0.9985897541046143,
            0.9987625479698181,
            0.9974981546401978,
            0.9985897541046143,
            0.9985897541046143,
            0.9966108202934265,
            0.9987625479698181,
            0.9985897541046143,
            0.9987625479698181,
            0.9987625479698181,
            0.9987625479698181,
            0.9987625479698181,
            0.9987625479698181,
            0.9941225647926331,
            0.9987625479698181,
            0.9985897541046143
        ]
    },
    "HumanEval/73": {
        "similarity": 0.9968463778495789,
        "body": "    n = len(arr)\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    odd_counts = sum(count % 2 for count in freq.values())\n    return (n - max(freq.values())) // 2 + odd_counts",
        "result": "failed: ",
        "similarities": [
            0.9965356588363647,
            0.9961719512939453,
            0.9968463778495789,
            0.9954442381858826,
            0.9929719567298889,
            0.9965617656707764,
            0.994383692741394,
            0.9962902069091797,
            0.9958673119544983,
            0.996756911277771,
            0.9854663014411926,
            0.9952715039253235,
            0.9872876405715942,
            0.9959242939949036,
            0.9945772886276245,
            0.9952998161315918,
            0.9961050152778625,
            0.9910887479782104,
            0.9957143664360046,
            0.9948190450668335
        ]
    },
    "HumanEval/74": {
        "similarity": 0.9933986663818359,
        "body": "    return (lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2)\n            else lst2)",
        "result": "passed",
        "similarities": [
            0.9925627708435059,
            0.9925627708435059,
            0.9925627708435059,
            0.9933986663818359,
            0.9925627708435059,
            0.9875785708427429,
            0.9889973998069763,
            0.9874701499938965,
            0.9916355609893799,
            0.9925628304481506,
            0.9913251996040344,
            0.9913579821586609,
            0.9913251996040344,
            0.9925628304481506,
            0.9814805388450623,
            0.9913251996040344,
            0.9925627708435059,
            0.9891788959503174,
            0.9913251996040344,
            0.9933986663818359
        ]
    },
    "HumanEval/75": {
        "similarity": 0.99823397397995,
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a+1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    count = len(factors)\n    return count >= 3 and all(is_prime(factor) for factor in set(factors))",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9977516531944275,
            0.9959270358085632,
            0.9978427886962891,
            0.9976897239685059,
            0.9972234964370728,
            0.99823397397995,
            0.9981948733329773,
            0.9976850152015686,
            0.9978212118148804,
            0.9979003071784973,
            0.9979755878448486,
            0.996612548828125,
            0.9977641105651855,
            0.997247576713562,
            0.9982114434242249,
            0.9971600770950317,
            0.9980294108390808,
            0.9978810548782349,
            0.9974080324172974,
            0.9964872598648071
        ]
    },
    "HumanEval/76": {
        "similarity": 0.9968473315238953,
        "body": "    return n ** round(x ** (1 / float(n))) == x",
        "result": "failed: This prints if this assert fails 2 (also good for debugging!)",
        "similarities": [
            0.9902327656745911,
            0.9925952553749084,
            0.9956051707267761,
            0.9949145913124084,
            0.9968473315238953,
            0.9962102174758911,
            0.9950768351554871,
            0.9949186444282532,
            0.9954717755317688,
            0.9932657480239868,
            0.9962102174758911,
            0.9946144819259644,
            0.9949186444282532,
            0.9960455894470215,
            0.9916458129882812,
            0.9950858950614929,
            0.9954716563224792,
            0.9963836669921875,
            0.9960455894470215,
            0.9952666759490967
        ]
    },
    "HumanEval/77": {
        "similarity": 0.9974408745765686,
        "body": "    return round(a ** (1./3)) ** 3 == a",
        "result": "failed: type complex doesn't define __round__ method",
        "similarities": [
            0.9967904686927795,
            0.9886561036109924,
            0.9957225322723389,
            0.995888352394104,
            0.9961597919464111,
            0.9974408745765686,
            0.997247576713562,
            0.9957225322723389,
            0.997247576713562,
            0.997247576713562,
            0.9952663779258728,
            0.9974408745765686,
            0.997247576713562,
            0.997247576713562,
            0.9963688254356384,
            0.995888352394104,
            0.9973317384719849,
            0.9973317384719849,
            0.9932068586349487,
            0.996310293674469
        ]
    },
    "HumanEval/78": {
        "similarity": 0.9946001768112183,
        "body": "    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_digits)\n    return count",
        "result": "passed",
        "similarities": [
            0.9918971657752991,
            0.994544506072998,
            0.9932632446289062,
            0.9915401935577393,
            0.993967592716217,
            0.9925855398178101,
            0.9929420351982117,
            0.9933205842971802,
            0.9920039772987366,
            0.9919884204864502,
            0.9946001768112183,
            0.9891465902328491,
            0.99261873960495,
            0.9903727173805237,
            0.9933229088783264,
            0.9922048449516296,
            0.9941524863243103,
            0.9943466186523438,
            0.9919884204864502,
            0.9843577146530151
        ]
    },
    "HumanEval/79": {
        "similarity": 0.9989439249038696,
        "body": "    return 'db' + bin(decimal)[2:] + 'db'",
        "result": "passed",
        "similarities": [
            0.9982741475105286,
            0.9966380596160889,
            0.9989439249038696,
            0.9989439249038696,
            0.9987082481384277,
            0.9989439249038696,
            0.9989439249038696,
            0.9982741475105286,
            0.9955092072486877,
            0.9989439249038696,
            0.9987082481384277,
            0.9982938170433044,
            0.9982741475105286,
            0.9989439249038696,
            0.9987082481384277,
            0.9989439249038696,
            0.9980607628822327,
            0.9989439249038696,
            0.9987082481384277,
            0.9989439249038696
        ]
    },
    "HumanEval/80": {
        "similarity": 0.9962573647499084,
        "body": "    return len(s) >= 3 and len(set([s[i:i+3] for i in range(len(s)-2)])) == len(s)//3",
        "result": "failed: abcd",
        "similarities": [
            0.9919371604919434,
            0.9887710213661194,
            0.9962573647499084,
            0.9960142374038696,
            0.9919371604919434,
            0.9962573647499084,
            0.9919371604919434,
            0.9962573647499084,
            0.9922900199890137,
            0.9946228861808777,
            0.9884164929389954,
            0.9887710213661194,
            0.9962573647499084,
            0.9947210550308228,
            0.9958263039588928,
            0.9947210550308228,
            0.9960142374038696,
            0.9923930764198303,
            0.9962573647499084,
            0.9960142374038696
        ]
    },
    "HumanEval/81": {
        "similarity": 0.9946566224098206,
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades",
        "result": "failed: ",
        "similarities": [
            0.9795209169387817,
            0.9946340322494507,
            0.9863532185554504,
            0.9946370720863342,
            0.9799469709396362,
            0.9932962656021118,
            0.9912890195846558,
            0.9945954084396362,
            0.9946061372756958,
            0.9939548373222351,
            0.9833730459213257,
            0.9945954084396362,
            0.9946370720863342,
            0.9946566224098206,
            0.9945952892303467,
            0.9936710000038147,
            0.9931811094284058,
            0.9916377663612366,
            0.9937154650688171,
            0.9946370720863342
        ]
    },
    "HumanEval/82": {
        "similarity": 0.999419093132019,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9993900656700134,
            0.9973400831222534,
            0.9994189739227295,
            0.9987353086471558,
            0.999419093132019,
            0.999419093132019,
            0.9993900656700134,
            0.999419093132019,
            0.9993900656700134,
            0.9987353086471558,
            0.9987353086471558,
            0.999419093132019,
            0.999419093132019,
            0.9973400831222534,
            0.9983009696006775,
            0.997392475605011,
            0.999419093132019,
            0.999419093132019,
            0.9993900656700134,
            0.999419093132019
        ]
    },
    "HumanEval/83": {
        "similarity": 0.9946322441101074,
        "body": "    return sum(10**(i-1) <= num < 10**i for i in range(1, n+1)) * 2",
        "result": "failed: name 'num' is not defined",
        "similarities": [
            0.9946322441101074,
            0.9933914542198181,
            0.9943704009056091,
            0.9904130697250366,
            0.9899808764457703,
            0.9945229887962341,
            0.9932510852813721,
            0.9935515522956848,
            0.9939705729484558,
            0.9945948719978333,
            0.9904927611351013,
            0.993600070476532,
            0.9893550872802734,
            0.9850538372993469,
            0.9939233660697937,
            0.9944757223129272,
            0.9913787841796875,
            0.9943010210990906,
            0.994468092918396,
            0.9889721274375916
        ]
    },
    "HumanEval/84": {
        "similarity": 0.9957194924354553,
        "body": "    return bin(sum(int(digit) for digit in str(N)))[2:]",
        "result": "passed",
        "similarities": [
            0.9957194924354553,
            0.9876761436462402,
            0.9944984912872314,
            0.9946199059486389,
            0.9944179058074951,
            0.9914677143096924,
            0.9952219724655151,
            0.9944179058074951,
            0.9951044321060181,
            0.9888178110122681,
            0.9888178110122681,
            0.9946199059486389,
            0.9946199059486389,
            0.9951067566871643,
            0.9953619241714478,
            0.9952219724655151,
            0.9944179058074951,
            0.9918991923332214,
            0.987059473991394,
            0.9952219724655151
        ]
    },
    "HumanEval/85": {
        "similarity": 0.9917467832565308,
        "body": "    return sum(i for i in lst if i % 2 == 0 and (lst.index(i) + 1) % 2 != 0)",
        "result": "failed: ",
        "similarities": [
            0.9907377362251282,
            0.9878076314926147,
            0.9913906455039978,
            0.9912216067314148,
            0.9870998859405518,
            0.9863694906234741,
            0.9878594279289246,
            0.9878077507019043,
            0.9903839826583862,
            0.9907377362251282,
            0.991382896900177,
            0.9911104440689087,
            0.9879994988441467,
            0.9870998859405518,
            0.9913906455039978,
            0.9917467832565308,
            0.9907377362251282,
            0.9876793622970581,
            0.9913906455039978,
            0.9881668090820312
        ]
    },
    "HumanEval/86": {
        "similarity": 0.9896240234375,
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        char_list = sorted(list(word))\n        result.append(''.join(char_list))\n    return ' '.join(result)",
        "result": "passed",
        "similarities": [
            0.9895079731941223,
            0.9885339140892029,
            0.9824570417404175,
            0.9889081716537476,
            0.9881883859634399,
            0.989088773727417,
            0.9887277483940125,
            0.9876522421836853,
            0.9742417931556702,
            0.9889081716537476,
            0.9751108884811401,
            0.9881628155708313,
            0.9893736839294434,
            0.9887277483940125,
            0.9895164370536804,
            0.9860379099845886,
            0.9896240234375,
            0.9893737435340881,
            0.982774019241333,
            0.9704499840736389
        ]
    },
    "HumanEval/87": {
        "similarity": 0.9951459765434265,
        "body": "    return sorted(((i, j) for i, row in enumerate(lst) for j in range(len(row)) if row[j] == x),\n                  key=lambda c: (c[0], -c[1]))",
        "result": "passed",
        "similarities": [
            0.9951459765434265,
            0.9947057366371155,
            0.9839913249015808,
            0.9934188723564148,
            0.9944518208503723,
            0.9899463653564453,
            0.9945355653762817,
            0.9935358762741089,
            0.9947200417518616,
            0.9916347861289978,
            0.9943162798881531,
            0.9937816262245178,
            0.9932137727737427,
            0.9874181151390076,
            0.9941486716270447,
            0.9942153096199036,
            0.9936729073524475,
            0.9905615448951721,
            0.985611081123352,
            0.9922731518745422
        ]
    },
    "HumanEval/88": {
        "similarity": 0.9939866662025452,
        "body": "    if len(array) < 2:\n        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    return sorted_array",
        "result": "passed",
        "similarities": [
            0.9929907917976379,
            0.9916335940361023,
            0.991637110710144,
            0.991754412651062,
            0.9905622601509094,
            0.9905844330787659,
            0.9925298094749451,
            0.9668192863464355,
            0.9936618804931641,
            0.9907788634300232,
            0.9901230335235596,
            0.9914649128913879,
            0.9922540783882141,
            0.9792540669441223,
            0.9923409223556519,
            0.9870519042015076,
            0.9939866662025452,
            0.9873223900794983,
            0.9906637072563171,
            0.9939866662025452
        ]
    },
    "HumanEval/89": {
        "similarity": 0.9972571134567261,
        "body": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted_index = (alphabet.index(char.lower()) + 4 * 2) % len(alphabet)\n            if char.isupper():\n                result += alphabet[shifted_index].upper()\n            else:\n                result += alphabet[shifted_index]\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9958054423332214,
            0.9965466856956482,
            0.9873902201652527,
            0.9951252341270447,
            0.9951633810997009,
            0.9971668124198914,
            0.996831476688385,
            0.9950502514839172,
            0.9880488514900208,
            0.9969022870063782,
            0.9971929788589478,
            0.9960234761238098,
            0.99602872133255,
            0.9967341423034668,
            0.9965693950653076,
            0.9968627095222473,
            0.9971501231193542,
            0.9972571134567261,
            0.9971329569816589,
            0.9968368411064148
        ]
    },
    "HumanEval/90": {
        "similarity": 0.9983251690864563,
        "body": "    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]",
        "result": "passed",
        "similarities": [
            0.998073399066925,
            0.9966732859611511,
            0.9977356791496277,
            0.9983251690864563,
            0.997933566570282,
            0.9947022199630737,
            0.9962275624275208,
            0.9975267052650452,
            0.9973399639129639,
            0.9965440630912781,
            0.9971154928207397,
            0.9975267052650452,
            0.9970005750656128,
            0.9981436729431152,
            0.9977689981460571,
            0.998123288154602,
            0.9980258941650391,
            0.9970390200614929,
            0.9966732859611511,
            0.9969416260719299
        ]
    },
    "HumanEval/91": {
        "similarity": 0.9923229217529297,
        "body": "    sentences = S.split('[?.!]')\n    return sum(1 for s in sentences if s.strip() and s.lower().startswith('i'))",
        "result": "failed: Test 2",
        "similarities": [
            0.9916512370109558,
            0.981574296951294,
            0.985203206539154,
            0.9844143390655518,
            0.9923229217529297,
            0.9852030873298645,
            0.9831594228744507,
            0.9905427694320679,
            0.984584629535675,
            0.984584629535675,
            0.9915323853492737,
            0.990372896194458,
            0.9892909526824951,
            0.9892162680625916,
            0.98529452085495,
            0.9919791221618652,
            0.9916548728942871,
            0.9912625551223755,
            0.984584629535675,
            0.9914922118186951
        ]
    },
    "HumanEval/92": {
        "similarity": 0.9960198998451233,
        "body": "    return (x == y + z or y == x + z or z == x + y) and all(isinstance(i, int) for i in [x, y, z])",
        "result": "passed",
        "similarities": [
            0.9948195219039917,
            0.9870664477348328,
            0.9954457879066467,
            0.9938863515853882,
            0.9948195219039917,
            0.9956932067871094,
            0.991574227809906,
            0.9909135103225708,
            0.9956932067871094,
            0.9960198998451233,
            0.994562029838562,
            0.9925399422645569,
            0.9933263063430786,
            0.9956932067871094,
            0.9934052228927612,
            0.9918307065963745,
            0.9948195219039917,
            0.9944491386413574,
            0.9956932067871094,
            0.9927017688751221
        ]
    },
    "HumanEval/93": {
        "similarity": 0.9973034262657166,
        "body": "    result = ''\n    for char in message:\n        if char.isalpha():\n            shift = 65 if char.isupper() else 97\n            if char.lower() in 'aeiou':\n                new_char = chr((ord(char.lower()) - shift + 2) % 26 + shift)\n            else:\n                new_char = 'A' if char.isupper() else 'a'\n            result += new_char\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9947558045387268,
            0.9924350380897522,
            0.9962461590766907,
            0.9962042570114136,
            0.9973034262657166,
            0.9963533282279968,
            0.9966947436332703,
            0.995475172996521,
            0.995694637298584,
            0.9968549609184265,
            0.9967828989028931,
            0.9955536723136902,
            0.9952645897865295,
            0.9949802756309509,
            0.996611475944519,
            0.9957666993141174,
            0.9951099753379822,
            0.9943759441375732,
            0.9971345663070679,
            0.9969804883003235
        ]
    },
    "HumanEval/94": {
        "similarity": 0.9978768229484558,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_prime = None\n    for num in lst:\n        if is_prime(num) and (max_prime is None or num > max_prime):\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)",
        "similarities": [
            0.9978176951408386,
            0.9977280497550964,
            0.9961066842079163,
            0.9975467324256897,
            0.9975757598876953,
            0.9974502921104431,
            0.9976900815963745,
            0.9975757598876953,
            0.9974599480628967,
            0.996791422367096,
            0.9974895119667053,
            0.9975985288619995,
            0.9826294779777527,
            0.9976007342338562,
            0.9976525902748108,
            0.9968129992485046,
            0.9978768229484558,
            0.9977864027023315,
            0.9974609017372131,
            0.9975218772888184
        ]
    },
    "HumanEval/95": {
        "similarity": 0.9960082173347473,
        "body": "    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper",
        "result": "passed",
        "similarities": [
            0.9960082173347473,
            0.9914594888687134,
            0.9953275918960571,
            0.9818384051322937,
            0.9939973950386047,
            0.9931973218917847,
            0.9957819581031799,
            0.9960082173347473,
            0.9926611185073853,
            0.9960082173347473,
            0.9938585162162781,
            0.9952403903007507,
            0.9848054647445679,
            0.9960082173347473,
            0.9945887327194214,
            0.9958202838897705,
            0.9894627928733826,
            0.9960082173347473,
            0.9939973950386047,
            0.9947336316108704
        ]
    },
    "HumanEval/96": {
        "similarity": 0.9989252686500549,
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes",
        "result": "failed: unexpected indent (<string>, line 13)",
        "similarities": [
            0.9973983764648438,
            0.9985212087631226,
            0.9988760948181152,
            0.9984331727027893,
            0.9973983764648438,
            0.9981778860092163,
            0.9965365529060364,
            0.9987270832061768,
            0.9985111951828003,
            0.9988760948181152,
            0.9988164305686951,
            0.9987374544143677,
            0.998815655708313,
            0.9976913332939148,
            0.9985796213150024,
            0.9989252686500549,
            0.9987534284591675,
            0.9982091784477234,
            0.9984635710716248,
            0.9989192485809326
        ]
    },
    "HumanEval/97": {
        "similarity": 0.9983875751495361,
        "body": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return (unit_digit_a * unit_digit_b) % 10",
        "result": "failed: First test error: 6",
        "similarities": [
            0.9983335733413696,
            0.9978254437446594,
            0.9983335733413696,
            0.9967692494392395,
            0.9978543519973755,
            0.9983875751495361,
            0.9978254437446594,
            0.9983875751495361,
            0.9983335137367249,
            0.9978254437446594,
            0.9978049397468567,
            0.9983335137367249,
            0.9982110261917114,
            0.9983056783676147,
            0.9962225556373596,
            0.9962225556373596,
            0.9962225556373596,
            0.9923186302185059,
            0.9962225556373596,
            0.9981287717819214
        ]
    },
    "HumanEval/98": {
        "similarity": 0.9974226951599121,
        "body": "    return sum(1 for i, c in enumerate(s) if 'AEIOU'.upper() in (c.upper(),) and i % 2 == 0)",
        "result": "failed: ",
        "similarities": [
            0.9967758059501648,
            0.9942135214805603,
            0.9952652454376221,
            0.9973497986793518,
            0.9967856407165527,
            0.9963547587394714,
            0.9972255229949951,
            0.996069073677063,
            0.9887179136276245,
            0.9973497986793518,
            0.9966796040534973,
            0.9973497986793518,
            0.9967169761657715,
            0.995941162109375,
            0.9973497986793518,
            0.9967381358146667,
            0.9961873292922974,
            0.9972255229949951,
            0.9974226951599121,
            0.9963547587394714
        ]
    },
    "HumanEval/99": {
        "similarity": 0.9917024374008179,
        "body": "    value = float(value)\n    if value - int(value) >= 0.5:\n        return round(value)\n    else:\n        return round(value) - (1 if round(value) < 0 else 1)",
        "result": "failed: Test 1",
        "similarities": [
            0.9917024374008179,
            0.9893609881401062,
            0.979679524898529,
            0.9794857501983643,
            0.9898584485054016,
            0.9901300668716431,
            0.9906180500984192,
            0.9897356629371643,
            0.9912489652633667,
            0.988754153251648,
            0.9894502758979797,
            0.9881300926208496,
            0.9795916676521301,
            0.9901783466339111,
            0.9901665449142456,
            0.9910272359848022,
            0.9795916676521301,
            0.9754148721694946,
            0.9863108396530151,
            0.9913241863250732
        ]
    },
    "HumanEval/100": {
        "similarity": 0.9975163340568542,
        "body": "    pile = []\n    level_stones = n\n    for i in range(1, n + 1):\n        if level_stones % 2 == 0:\n            level_stones += 2\n        else:\n            level_stones += 1\n        pile.append(level_stones)\n    return pile",
        "result": "failed: Test 3",
        "similarities": [
            0.9973543882369995,
            0.9922417402267456,
            0.9970394968986511,
            0.996809720993042,
            0.9970536828041077,
            0.9925955533981323,
            0.9970281720161438,
            0.9975163340568542,
            0.996850848197937,
            0.99688720703125,
            0.9974077343940735,
            0.9964066743850708,
            0.9973608255386353,
            0.9970502257347107,
            0.9957780241966248,
            0.9970687031745911,
            0.9957090616226196,
            0.9970961213111877,
            0.9937641620635986,
            0.9971427917480469
        ]
    },
    "HumanEval/101": {
        "similarity": 0.9976746439933777,
        "body": "    return [word for word in s.replace(\",\", \" \").split()]",
        "result": "passed",
        "similarities": [
            0.9972027540206909,
            0.9969195127487183,
            0.9972027540206909,
            0.9972027540206909,
            0.9961927533149719,
            0.9922164082527161,
            0.9972027540206909,
            0.9938187003135681,
            0.997403085231781,
            0.9972028136253357,
            0.9920437335968018,
            0.9970221519470215,
            0.9962326884269714,
            0.9973611235618591,
            0.9969195127487183,
            0.9972028136253357,
            0.996222972869873,
            0.997403085231781,
            0.9976746439933777,
            0.9964621663093567
        ]
    },
    "HumanEval/102": {
        "similarity": 0.9886243939399719,
        "body": "    if x > y:\n        return -1\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1",
        "result": "passed",
        "similarities": [
            0.9751012921333313,
            0.978074848651886,
            0.9768723249435425,
            0.9850287437438965,
            0.9789561033248901,
            0.9841015338897705,
            0.9789561033248901,
            0.9885675311088562,
            0.987798810005188,
            0.9789561033248901,
            0.981754720211029,
            0.9751012921333313,
            0.9789561033248901,
            0.9836620688438416,
            0.9886243939399719,
            0.978373110294342,
            0.9796581268310547,
            0.9877006411552429,
            0.9838961362838745,
            0.979377269744873
        ]
    },
    "HumanEval/103": {
        "similarity": 0.9967523217201233,
        "body": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
        "result": "failed: ",
        "similarities": [
            0.9957295656204224,
            0.9949365854263306,
            0.9967523217201233,
            0.9903433918952942,
            0.9959850311279297,
            0.9967523217201233,
            0.9959191083908081,
            0.9967523217201233,
            0.9944708943367004,
            0.9962314963340759,
            0.9960931539535522,
            0.9945756196975708,
            0.9967523217201233,
            0.9957287311553955,
            0.9942753314971924,
            0.9967523217201233,
            0.9945763945579529,
            0.9958151578903198,
            0.99407958984375,
            0.9954633116722107
        ]
    },
    "HumanEval/104": {
        "similarity": 0.9981110095977783,
        "body": "    return sorted([i for i in x if all(int(j) % 2 != 0 for j in str(i))])",
        "result": "passed",
        "similarities": [
            0.9979215860366821,
            0.9980464577674866,
            0.9980124235153198,
            0.9980932474136353,
            0.9977575540542603,
            0.9862780570983887,
            0.9981110095977783,
            0.9980124235153198,
            0.9980124235153198,
            0.9977016448974609,
            0.9856114983558655,
            0.9980124235153198,
            0.9980549216270447,
            0.9980124235153198,
            0.9980124235153198,
            0.9980124235153198,
            0.9980932474136353,
            0.9980354309082031,
            0.9977149963378906,
            0.9980124235153198
        ]
    },
    "HumanEval/105": {
        "similarity": 0.9918389916419983,
        "body": "    sorted_arr = sorted([i for i in arr if 1 <= i <= 9])\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[i-1] for i in reversed_arr]\n\n# You'll also need to define digit_names somewhere, e.g.:\ndigit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]",
        "result": "passed",
        "similarities": [
            0.9874120950698853,
            0.9911867380142212,
            0.9862679243087769,
            0.9912781119346619,
            0.9918389916419983,
            0.9873472452163696,
            0.9862335920333862,
            0.9882537722587585,
            0.9816568493843079,
            0.9892818927764893,
            0.9850009083747864,
            0.977944016456604,
            0.9896988272666931,
            0.9911364316940308,
            0.9879845380783081,
            0.9874958395957947,
            0.9845976829528809,
            0.9852096438407898,
            0.9877809286117554,
            0.9894647002220154
        ]
    },
    "HumanEval/106": {
        "similarity": 0.9943112730979919,
        "body": "    return [i * (i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",
        "result": "failed: ",
        "similarities": [
            0.9940371513366699,
            0.9922258257865906,
            0.9940371513366699,
            0.9829639792442322,
            0.9943112730979919,
            0.9940371513366699,
            0.9838457703590393,
            0.9939237833023071,
            0.9922991394996643,
            0.9938920736312866,
            0.9940371513366699,
            0.9940371513366699,
            0.9837145805358887,
            0.9940371513366699,
            0.9943112730979919,
            0.9887294769287109,
            0.9926453828811646,
            0.9906538128852844,
            0.9865734577178955,
            0.9838457703590393
        ]
    },
    "HumanEval/107": {
        "similarity": 0.9956488609313965,
        "body": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and int(str(i)[0]) % 2 == 0:\n            even_count += 1\n        elif str(i) == str(i)[::-1]:\n            odd_count += 1\n    return (even_count, odd_count)",
        "result": "passed",
        "similarities": [
            0.994765043258667,
            0.9955007433891296,
            0.9877151846885681,
            0.9839895367622375,
            0.9950350522994995,
            0.9956488609313965,
            0.9894558787345886,
            0.9944368600845337,
            0.9948318004608154,
            0.9918453693389893,
            0.995073139667511,
            0.995326578617096,
            0.9948318004608154,
            0.9947295188903809,
            0.9952392578125,
            0.9955007433891296,
            0.9912187457084656,
            0.994765043258667,
            0.9920070171356201,
            0.9924115538597107
        ]
    },
    "HumanEval/108": {
        "similarity": 0.9948315024375916,
        "body": "    return sum(1 for x in arr if any(int(d) > 0 for d in str(abs(x))))",
        "result": "failed: ",
        "similarities": [
            0.993300199508667,
            0.9895239472389221,
            0.993300199508667,
            0.993300199508667,
            0.993300199508667,
            0.9889706373214722,
            0.9948018789291382,
            0.9930063486099243,
            0.9948315024375916,
            0.9937342405319214,
            0.9947167634963989,
            0.9884018301963806,
            0.993300199508667,
            0.9882200956344604,
            0.9937342405319214,
            0.993300199508667,
            0.993300199508667,
            0.9932419657707214,
            0.9936941266059875,
            0.9848995208740234
        ]
    },
    "HumanEval/109": {
        "similarity": 0.9915918111801147,
        "body": "    if len(arr) == 0:\n        return True\n    return arr == sorted(arr) or all(a <= b for a, b in zip(arr[1:], arr))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9915918111801147,
            0.9911386370658875,
            0.9790266156196594,
            0.987628161907196,
            0.9867735505104065,
            0.9844063520431519,
            0.990421712398529,
            0.9894935488700867,
            0.9868636131286621,
            0.9874456524848938,
            0.9853790998458862,
            0.9877231121063232,
            0.9881550669670105,
            0.9852997660636902,
            0.9870328307151794,
            0.9887974262237549,
            0.984635591506958,
            0.9865924715995789,
            0.9899625182151794,
            0.9888582825660706
        ]
    },
    "HumanEval/110": {
        "similarity": 0.9952693581581116,
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count = len(lst1) - odd_count\n    return \"YES\" if odd_count <= len(lst2) else \"NO\"",
        "result": "failed: ",
        "similarities": [
            0.9943661093711853,
            0.9926864504814148,
            0.9924071431159973,
            0.9903859496116638,
            0.9938158988952637,
            0.992162823677063,
            0.9909639954566956,
            0.9911960959434509,
            0.993879497051239,
            0.9930823445320129,
            0.9952693581581116,
            0.9949036836624146,
            0.99334716796875,
            0.993597149848938,
            0.9946947693824768,
            0.9938353300094604,
            0.9896903038024902,
            0.9865667223930359,
            0.9912633299827576,
            0.9938169121742249
        ]
    },
    "HumanEval/111": {
        "similarity": 0.995844304561615,
        "body": "    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}",
        "result": "passed",
        "similarities": [
            0.9936011433601379,
            0.995191752910614,
            0.9919735789299011,
            0.9887022972106934,
            0.995844304561615,
            0.9953280091285706,
            0.9910821318626404,
            0.993076741695404,
            0.9950579404830933,
            0.9952146410942078,
            0.9879269003868103,
            0.9952816367149353,
            0.9944332838058472,
            0.9919735789299011,
            0.9919735789299011,
            0.9952367544174194,
            0.9902056455612183,
            0.9927384257316589,
            0.9958118796348572,
            0.9939640760421753
        ]
    },
    "HumanEval/112": {
        "similarity": 0.9960489869117737,
        "body": "    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])",
        "result": "passed",
        "similarities": [
            0.9948052763938904,
            0.9960466027259827,
            0.9938709139823914,
            0.9956484436988831,
            0.9959034323692322,
            0.9913177490234375,
            0.9959631562232971,
            0.9909409284591675,
            0.9957646131515503,
            0.9893829226493835,
            0.9951035380363464,
            0.9943976402282715,
            0.9913177490234375,
            0.9948415160179138,
            0.9957112669944763,
            0.9960489869117737,
            0.9912251830101013,
            0.9952744245529175,
            0.9918296337127686,
            0.9960312247276306
        ]
    },
    "HumanEval/113": {
        "similarity": 0.997374415397644,
        "body": "    return [f\"the number of odd elements {len(''.join(s for s in i if int(s) % 2))}n the str{len(i)}ng {i[0]} of the {len(i)}nput.\" for i in lst]",
        "result": "failed: Test 1",
        "similarities": [
            0.9972690939903259,
            0.9967448711395264,
            0.996285080909729,
            0.9963275790214539,
            0.997374415397644,
            0.9959728717803955,
            0.9965553283691406,
            0.9959728717803955,
            0.9968608021736145,
            0.9969255328178406,
            0.9894914031028748,
            0.9970170259475708,
            0.9962266683578491,
            0.9957106709480286,
            0.9925417900085449,
            0.996992826461792,
            0.9969201683998108,
            0.9968938231468201,
            0.9915755391120911,
            0.9964738488197327
        ]
    },
    "HumanEval/114": {
        "similarity": 0.9963475465774536,
        "body": "    if not nums:\n        return 0\n    current_sum = max_sum = float('inf')\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        max_sum = min(max_sum, current_sum)\n    return max_sum",
        "result": "passed",
        "similarities": [
            0.9956711530685425,
            0.9963475465774536,
            0.9943376183509827,
            0.9942415952682495,
            0.9816065430641174,
            0.9944952130317688,
            0.9944477081298828,
            0.9944952130317688,
            0.9944528341293335,
            0.9962599873542786,
            0.9944970011711121,
            0.9961927533149719,
            0.9959267377853394,
            0.9952995181083679,
            0.9939937591552734,
            0.9952512979507446,
            0.9956960082054138,
            0.9951627850532532,
            0.9951083660125732,
            0.9842488169670105
        ]
    },
    "HumanEval/115": {
        "similarity": 0.9892172813415527,
        "body": "    n = len(grid)\n    m = len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed",
        "result": "failed: Error",
        "similarities": [
            0.9890217185020447,
            0.9771819710731506,
            0.9877603650093079,
            0.9868070483207703,
            0.9771820902824402,
            0.9873602986335754,
            0.9454536437988281,
            0.9885250926017761,
            0.9884200096130371,
            0.9885374307632446,
            0.9883937835693359,
            0.9885374307632446,
            0.9708539247512817,
            0.9892172813415527,
            0.9799816608428955,
            0.9884154796600342,
            0.9771820902824402,
            0.9614673256874084,
            0.9890861511230469,
            0.9749824404716492
        ]
    },
    "HumanEval/116": {
        "similarity": 0.999670147895813,
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed",
        "similarities": [
            0.9992300271987915,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.9992300271987915,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.999670147895813,
            0.9992300271987915,
            0.999670147895813,
            0.9992300271987915,
            0.9992300271987915,
            0.999670147895813,
            0.9992300271987915
        ]
    },
    "HumanEval/117": {
        "similarity": 0.9975518584251404,
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed",
        "similarities": [
            0.9967676401138306,
            0.9960300922393799,
            0.9965940713882446,
            0.9941215515136719,
            0.9955685138702393,
            0.9964232444763184,
            0.993913471698761,
            0.9973636269569397,
            0.989690899848938,
            0.9951378703117371,
            0.9973769783973694,
            0.9970628619194031,
            0.9975446462631226,
            0.9973913431167603,
            0.9960403442382812,
            0.9896030426025391,
            0.9969807863235474,
            0.9972853660583496,
            0.995370090007782,
            0.9975518584251404
        ]
    },
    "HumanEval/118": {
        "similarity": 0.9979293346405029,
        "body": "    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels:\n            if word[i-1] in vowels or word[0] in vowels:\n                return word[i-1]\n    return ''",
        "result": "failed: ",
        "similarities": [
            0.9972050189971924,
            0.993935227394104,
            0.9962429404258728,
            0.9969956278800964,
            0.9969927072525024,
            0.9974899291992188,
            0.9974221587181091,
            0.9978674054145813,
            0.9979293346405029,
            0.9948484301567078,
            0.9964568614959717,
            0.9975295066833496,
            0.9974470734596252,
            0.9975088834762573,
            0.9946319460868835,
            0.9968129396438599,
            0.996817946434021,
            0.9968195557594299,
            0.9969301819801331,
            0.9972365498542786
        ]
    },
    "HumanEval/119": {
        "similarity": 0.9949974417686462,
        "body": "    s1, s2 = lst\n    count = 0\n    for c in s1 + s2:\n        if c == ')':\n            count -= 1\n        else:\n            count += 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'",
        "result": "failed: ",
        "similarities": [
            0.9944087862968445,
            0.9942598938941956,
            0.9949063658714294,
            0.9949974417686462,
            0.9938744306564331,
            0.9933692812919617,
            0.9947641491889954,
            0.9915804862976074,
            0.994817852973938,
            0.9828222393989563,
            0.9947646260261536,
            0.9939202070236206,
            0.9861645102500916,
            0.9934765696525574,
            0.9942460656166077,
            0.9930930733680725,
            0.9887639880180359,
            0.9938499331474304,
            0.9942469596862793,
            0.9878653287887573
        ]
    },
    "HumanEval/120": {
        "similarity": 0.9984428286552429,
        "body": "    return sorted(arr)[-k:]",
        "result": "failed: ",
        "similarities": [
            0.9979196190834045,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9941483736038208,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9984428286552429,
            0.9960840344429016,
            0.9984428286552429,
            0.9979196190834045,
            0.9960840344429016,
            0.9984428286552429,
            0.9960840344429016,
            0.9979196190834045,
            0.9960840344429016
        ]
    },
    "HumanEval/121": {
        "similarity": 0.9950181841850281,
        "body": "    return sum(num for i, num in enumerate(lst) if num % 2 != 0 and i % 2 == 0)",
        "result": "passed",
        "similarities": [
            0.9839468598365784,
            0.9945279359817505,
            0.9933252930641174,
            0.9817546010017395,
            0.9945279359817505,
            0.9945279359817505,
            0.9948531985282898,
            0.9945279359817505,
            0.9945279359817505,
            0.9834046959877014,
            0.9945279359817505,
            0.9948530793190002,
            0.9948555827140808,
            0.9948530793190002,
            0.9817546010017395,
            0.9950181841850281,
            0.9945279359817505,
            0.9820331931114197,
            0.9945279359817505,
            0.9935165047645569
        ]
    },
    "HumanEval/122": {
        "similarity": 0.9970714449882507,
        "body": "    return sum(num for num in arr[:k] if num >= 10 and num < 100)",
        "result": "failed: ",
        "similarities": [
            0.9970374703407288,
            0.9967247843742371,
            0.9969630837440491,
            0.9970445036888123,
            0.9969545602798462,
            0.9969545602798462,
            0.9949712157249451,
            0.984626293182373,
            0.9970374703407288,
            0.9969545602798462,
            0.9970374703407288,
            0.9949864745140076,
            0.9949712157249451,
            0.9882970452308655,
            0.9969630837440491,
            0.9970714449882507,
            0.9969630837440491,
            0.9970714449882507,
            0.9970241189002991,
            0.9962624311447144
        ]
    },
    "HumanEval/123": {
        "similarity": 0.9982791543006897,
        "body": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n not in sequence and n % 2 != 0:\n            sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])",
        "result": "passed",
        "similarities": [
            0.9981350302696228,
            0.9964196085929871,
            0.9973788261413574,
            0.9980025291442871,
            0.9957087635993958,
            0.9982791543006897,
            0.9981456398963928,
            0.9967753887176514,
            0.9981240630149841,
            0.9977692365646362,
            0.9957088828086853,
            0.9982606768608093,
            0.997633695602417,
            0.9980505108833313,
            0.9980440735816956,
            0.9956398010253906,
            0.9955978393554688,
            0.9966171979904175,
            0.9957107901573181,
            0.9972086548805237
        ]
    },
    "HumanEval/124": {
        "similarity": 0.9951406121253967,
        "body": "    try:\n        month, day, year = map(int, date.split('-'))\n        if not (1 <= month <= 12 and 1 <= day <= 31 and 1000 <= year <= 9999):\n            return False\n        if month in [1,3,5,7,8,10,12] and day > 31:\n            return False\n        elif month in [4,6,9,11] and day > 30:\n            return False\n        elif month == 2 and (day > 29 or (year % 4 == 0 and year % 100 != 0 and day > 28)):\n            return False\n        return True\n    except ValueError:\n        return False",
        "result": "passed",
        "similarities": [
            0.988535463809967,
            0.994642436504364,
            0.9945070147514343,
            0.9951168894767761,
            0.9945064187049866,
            0.9913274645805359,
            0.9951187968254089,
            0.9887570142745972,
            0.9922875165939331,
            0.9951406121253967,
            0.9911493062973022,
            0.994419276714325,
            0.9918453693389893,
            0.9937646985054016,
            0.991454005241394,
            0.9944877624511719,
            0.9935358762741089,
            0.9951213002204895,
            0.9949834942817688,
            0.9919861555099487
        ]
    },
    "HumanEval/125": {
        "similarity": 0.9967862367630005,
        "body": "    words = txt.split()\n    if not words and ',' in txt:\n        return txt.replace(',', ' ').split()\n    elif not any(c.islower() for c in txt):\n        return sum(1 for i, c in enumerate(text) if c.islower() and ord(c) % 2 == 0)\n    else:\n        return words",
        "result": "failed: ",
        "similarities": [
            0.9953745603561401,
            0.9957562685012817,
            0.9949365258216858,
            0.9963472485542297,
            0.9948621392250061,
            0.9948727488517761,
            0.9965300559997559,
            0.9956343770027161,
            0.9950571656227112,
            0.99444979429245,
            0.991611659526825,
            0.992763340473175,
            0.9910884499549866,
            0.9926703572273254,
            0.9967862367630005,
            0.9961180686950684,
            0.9928030967712402,
            0.9952173829078674,
            0.9959582090377808,
            0.9966914653778076
        ]
    },
    "HumanEval/126": {
        "similarity": 0.9975709319114685,
        "body": "    return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)",
        "similarities": [
            0.9975709319114685,
            0.9937139749526978,
            0.9975709319114685,
            0.9950540661811829,
            0.9975708723068237,
            0.9975708723068237,
            0.9909800291061401,
            0.9975708723068237,
            0.9975709319114685,
            0.9972890615463257,
            0.9972890615463257,
            0.9975709319114685,
            0.9975709319114685,
            0.9975709319114685,
            0.9934813976287842,
            0.9950202107429504,
            0.9949951171875,
            0.99502032995224,
            0.9975709319114685,
            0.9932548403739929
        ]
    },
    "HumanEval/127": {
        "similarity": 0.9968251585960388,
        "body": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start\n    if length <= 0:\n        return \"NO\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'is_prime' is not defined",
        "similarities": [
            0.9961071014404297,
            0.9951164126396179,
            0.9943844676017761,
            0.9960987567901611,
            0.9967655539512634,
            0.9940527081489563,
            0.9914403557777405,
            0.9955540895462036,
            0.9964150190353394,
            0.9967694878578186,
            0.9962618947029114,
            0.9964150190353394,
            0.9929768443107605,
            0.9957143664360046,
            0.9968251585960388,
            0.9919540882110596,
            0.9961680173873901,
            0.9962449669837952,
            0.9934206604957581,
            0.9964691996574402
        ]
    },
    "HumanEval/128": {
        "similarity": 0.9960697889328003,
        "body": "    if not arr:\n        return None\n    product = 1\n    magnitude_sum = sum(abs(x) for x in arr)\n    for num in arr:\n        product *= -1 if num < 0 else 1\n    return magnitude_sum * product",
        "result": "failed: ",
        "similarities": [
            0.9938065409660339,
            0.9951977133750916,
            0.9946080446243286,
            0.9956153035163879,
            0.9954655170440674,
            0.9941397309303284,
            0.993094801902771,
            0.9887957572937012,
            0.9936317801475525,
            0.9944117665290833,
            0.9960697889328003,
            0.9955432415008545,
            0.993994951248169,
            0.9944993853569031,
            0.9922804832458496,
            0.9922025799751282,
            0.9911858439445496,
            0.9933076500892639,
            0.9929772615432739,
            0.9957696795463562
        ]
    },
    "HumanEval/129": {
        "similarity": 0.9969137907028198,
        "body": "    N = len(grid)\n    value_grid = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            value_grid[i][j] = (i*N + j) * 10000 + grid[i][j]\n\n    min_path = []\n        if len(path) == k:\n            min_path[:] = path\n            return\n\n        for x, y in [(1,0), (-1,0), (0,1), (0,-1)]:\n            ni, nj = i + x, j + y\n            if 0 <= ni < N and 0 <= nj < N and (ni*nj, nj) not in visited:\n                new_path = path + [grid[ni][nj]]\n                new_visited = visited | {(ni*nj, nj)}\n                dfs(ni, nj, new_path, new_visited, k)\n\n    for i in range(N):\n        for j in range(N):\n            value_grid[i][j] = (value_grid[i][j], grid[i][j])\n    min_path.sort(key=lambda x: (x[0]))\n    for val, _ in min_path:\n        dfs(val // 10000, val % 10000, [], set(), k)\n    return [cell[1] for cell in min_path]",
        "result": "failed: unexpected indent (<string>, line 39)",
        "similarities": [
            0.9953410625457764,
            0.9969137907028198,
            0.9920923113822937,
            0.9965018033981323,
            0.9952489733695984,
            0.9957982301712036,
            0.9955627918243408,
            0.9966378808021545,
            0.9960635304450989,
            0.996799886226654,
            0.9958440065383911,
            0.995635986328125,
            0.9965860247612,
            0.9959155917167664,
            0.9915429353713989,
            0.9958925843238831,
            0.9966075420379639,
            0.9952150583267212,
            0.9957647919654846,
            0.9963456988334656
        ]
    },
    "HumanEval/130": {
        "similarity": 0.9973877668380737,
        "body": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + (i / 2))\n            else:\n                trib.append(sum(trib[-3:]))\n        return trib",
        "result": "failed: ",
        "similarities": [
            0.9957414269447327,
            0.9937266111373901,
            0.9970021843910217,
            0.9909258484840393,
            0.9971908926963806,
            0.9955008625984192,
            0.9962121844291687,
            0.9959703087806702,
            0.9964269399642944,
            0.9964035749435425,
            0.9961932301521301,
            0.9961186647415161,
            0.9971913695335388,
            0.9971765279769897,
            0.9967235922813416,
            0.9958131909370422,
            0.996680498123169,
            0.9973877668380737,
            0.9955438375473022,
            0.9961112141609192
        ]
    },
    "HumanEval/131": {
        "similarity": 0.9998583793640137,
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: ",
        "similarities": [
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.999739408493042,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9974328875541687,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137,
            0.9998583793640137
        ]
    },
    "HumanEval/132": {
        "similarity": 0.9912551045417786,
        "body": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)",
        "similarities": [
            0.9820285439491272,
            0.9893167614936829,
            0.9903846383094788,
            0.9698815941810608,
            0.9810181856155396,
            0.9895851016044617,
            0.9892115592956543,
            0.9807139039039612,
            0.9901960492134094,
            0.991025447845459,
            0.9873252511024475,
            0.9891846179962158,
            0.9907355308532715,
            0.9911198019981384,
            0.9912551045417786,
            0.9799525737762451,
            0.9901291728019714,
            0.9911198019981384,
            0.9782547354698181,
            0.991044282913208
        ]
    },
    "HumanEval/133": {
        "similarity": 0.9955881237983704,
        "body": "import math\n    return sum(math.ceil(num) ** 2 for num in lst)",
        "result": "failed: unexpected indent (<string>, line 17)",
        "similarities": [
            0.9951590299606323,
            0.9950238466262817,
            0.9951590299606323,
            0.9953872561454773,
            0.9952217936515808,
            0.9890409111976624,
            0.9949923157691956,
            0.9934274554252625,
            0.9948106408119202,
            0.9929433465003967,
            0.9856507182121277,
            0.9940266013145447,
            0.9955881237983704,
            0.9927554130554199,
            0.9951999187469482,
            0.9918867349624634,
            0.989080548286438,
            0.9952616691589355,
            0.9955255389213562,
            0.9934274554252625
        ]
    },
    "HumanEval/134": {
        "similarity": 0.9953275918960571,
        "body": "    return len(txt) > 0 and txt[-1].isalpha() and not any(c.isalpha() for c in txt[:-1])",
        "result": "failed: ",
        "similarities": [
            0.9874047040939331,
            0.9943183064460754,
            0.9952802062034607,
            0.9929863810539246,
            0.9917575716972351,
            0.995324969291687,
            0.9817707538604736,
            0.9935212731361389,
            0.9949276447296143,
            0.9929567575454712,
            0.9879961609840393,
            0.9951780438423157,
            0.9914404153823853,
            0.990649402141571,
            0.9948166608810425,
            0.995324969291687,
            0.9953275918960571,
            0.9933496117591858,
            0.992721676826477,
            0.9934965372085571
        ]
    },
    "HumanEval/135": {
        "similarity": 0.99884033203125,
        "body": "    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1",
        "result": "failed: ",
        "similarities": [
            0.9988254904747009,
            0.9978258013725281,
            0.9973531365394592,
            0.99884033203125,
            0.9954320192337036,
            0.99884033203125,
            0.9988254904747009,
            0.9988324046134949,
            0.9925373792648315,
            0.997898280620575,
            0.9963710308074951,
            0.9985119700431824,
            0.9988324046134949,
            0.9988011717796326,
            0.99884033203125,
            0.9988324046134949,
            0.9985153079032898,
            0.99884033203125,
            0.99884033203125,
            0.9978068470954895
        ]
    },
    "HumanEval/136": {
        "similarity": 0.9964975118637085,
        "body": "    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    a = max(neg_ints) if neg_ints else None\n    b = min(pos_ints) if pos_ints else None\n\n    return (a, b)",
        "result": "passed",
        "similarities": [
            0.995334804058075,
            0.9927029013633728,
            0.9956220388412476,
            0.9913535118103027,
            0.9959399700164795,
            0.995749831199646,
            0.9961614012718201,
            0.9960362315177917,
            0.9925733804702759,
            0.9927934408187866,
            0.9921196699142456,
            0.9964975118637085,
            0.9947785139083862,
            0.995618999004364,
            0.9951866865158081,
            0.9952706098556519,
            0.99590665102005,
            0.9927548766136169,
            0.9962254762649536,
            0.9924601316452026
        ]
    },
    "HumanEval/137": {
        "similarity": 0.9927861094474792,
        "body": "    if type(a) == str and a.replace('.', '', 1).replace(',', '.', 1).replace('-', '', 1).isdigit():\n        a = float(a)\n    elif type(b) == str and b.replace('.', '', 1).replace(',', '.', 1).replace('-', '', 1).isdigit():\n        b = float(b)\n\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None",
        "result": "failed: '>' not supported between instances of 'int' and 'str'",
        "similarities": [
            0.9854045510292053,
            0.9802089333534241,
            0.9912706017494202,
            0.9914215803146362,
            0.989091694355011,
            0.9921929240226746,
            0.9927861094474792,
            0.9926463961601257,
            0.9923338890075684,
            0.9905439615249634,
            0.9901682138442993,
            0.9920529723167419,
            0.9883412718772888,
            0.9898027181625366,
            0.9907718300819397,
            0.9871910810470581,
            0.9809867739677429,
            0.9887827634811401,
            0.9887914061546326,
            0.9895989298820496
        ]
    },
    "HumanEval/138": {
        "similarity": 0.9894620180130005,
        "body": "    even_nums = [i for i in range(2, n+1, 2)]\n    return any(sum(nums) == n for nums in itertools.combinations(even_nums, 4))",
        "result": "failed: name 'itertools' is not defined",
        "similarities": [
            0.9865036010742188,
            0.9805833697319031,
            0.9844043254852295,
            0.9736611247062683,
            0.9880947470664978,
            0.9886346459388733,
            0.9830644726753235,
            0.9881359934806824,
            0.9893128275871277,
            0.9891699552536011,
            0.9842367768287659,
            0.9827016592025757,
            0.9869641065597534,
            0.9879871010780334,
            0.9886996746063232,
            0.9882324934005737,
            0.9879769682884216,
            0.9759164452552795,
            0.9821743369102478,
            0.9894620180130005
        ]
    },
    "HumanEval/139": {
        "similarity": 0.9998400807380676,
        "body": "    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined",
        "similarities": [
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998295307159424,
            0.9998295307159424,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9998400807380676,
            0.9969967603683472,
            0.9998295307159424,
            0.9998295307159424,
            0.9998400807380676,
            0.9998400807380676
        ]
    },
    "HumanEval/140": {
        "similarity": 0.9963503479957581,
        "body": "    while '__' in text or '  ' in text:\n        text = text.replace('__', '_')\n        text = text.replace('  ', '-')\n    return text",
        "result": "failed: This prints if this assert fails 2 (good for debugging!)",
        "similarities": [
            0.9925183057785034,
            0.989180326461792,
            0.9959985017776489,
            0.9961292743682861,
            0.9954808950424194,
            0.9962222576141357,
            0.9962222576141357,
            0.9952387809753418,
            0.9963503479957581,
            0.9937025308609009,
            0.9949324727058411,
            0.9962168335914612,
            0.9948058128356934,
            0.9925183057785034,
            0.9949324727058411,
            0.9924549460411072,
            0.9882674217224121,
            0.9777939319610596,
            0.994989275932312,
            0.995863676071167
        ]
    },
    "HumanEval/141": {
        "similarity": 0.9966374635696411,
        "body": "    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    elif '.' not in file_name or file_name.index('.') == 0 or file_name[file_name.index('.'):].lower().split('.')[1] not in ['txt', 'exe', 'dll'] or not file_name[:file_name.index('.')].isalpha():\n        return 'No'\n    else:\n        return 'Yes'",
        "result": "failed: ",
        "similarities": [
            0.995045006275177,
            0.99449622631073,
            0.9952378869056702,
            0.9917445182800293,
            0.9911035299301147,
            0.9953503012657166,
            0.9955806732177734,
            0.9950703382492065,
            0.9958620667457581,
            0.9932307004928589,
            0.9951026439666748,
            0.9955954551696777,
            0.9911946058273315,
            0.9956358671188354,
            0.9958412647247314,
            0.9966374635696411,
            0.9955548644065857,
            0.9951361417770386,
            0.9934043884277344,
            0.9960176348686218
        ]
    },
    "HumanEval/142": {
        "similarity": 0.9912377595901489,
        "body": "    return sum(\n        num ** (3 if i % 4 == 0 and i % 3 != 0 else 2) \n        for i, num in enumerate(lst)\n    )",
        "result": "failed: ",
        "similarities": [
            0.9870543479919434,
            0.9822993874549866,
            0.9878274202346802,
            0.9840644001960754,
            0.9912377595901489,
            0.9871336221694946,
            0.9828806519508362,
            0.9904491901397705,
            0.9905117750167847,
            0.9882102012634277,
            0.9889441132545471,
            0.9884880781173706,
            0.9830141663551331,
            0.9870656728744507,
            0.9889442920684814,
            0.9884424805641174,
            0.9882234334945679,
            0.9905005097389221,
            0.9884850382804871,
            0.9884788393974304
        ]
    },
    "HumanEval/143": {
        "similarity": 0.997963547706604,
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)",
        "result": "failed: unexpected indent (<string>, line 22)",
        "similarities": [
            0.997887372970581,
            0.9979009032249451,
            0.9976235628128052,
            0.9979009032249451,
            0.9975625872612,
            0.9979221820831299,
            0.9979009032249451,
            0.9979009032249451,
            0.9978970885276794,
            0.9974748492240906,
            0.997963547706604,
            0.9957507252693176,
            0.9974175691604614,
            0.9965237975120544,
            0.9962899088859558,
            0.9974677562713623,
            0.9975976347923279,
            0.9979009032249451,
            0.997271716594696,
            0.9979009032249451
        ]
    },
    "HumanEval/144": {
        "similarity": 0.9965563416481018,
        "body": "    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n\n    return (num1 * den2) == (den1 * num2)",
        "result": "failed: test1",
        "similarities": [
            0.9961411356925964,
            0.9953463673591614,
            0.9957062602043152,
            0.9942721128463745,
            0.9916613698005676,
            0.9961434602737427,
            0.9965563416481018,
            0.9959731101989746,
            0.9946082234382629,
            0.9940223693847656,
            0.9923511147499084,
            0.9959731101989746,
            0.9935676455497742,
            0.995999276638031,
            0.996146559715271,
            0.9964479207992554,
            0.9950064420700073,
            0.9917550683021545,
            0.9897790551185608,
            0.9940911531448364
        ]
    },
    "HumanEval/145": {
        "similarity": 0.9995248913764954,
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: ",
        "similarities": [
            0.9995248913764954,
            0.9995248913764954,
            0.9970957040786743,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9937998056411743,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954,
            0.9995248913764954
        ]
    },
    "HumanEval/146": {
        "similarity": 0.9939330220222473,
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9939330220222473,
            0.9934064149856567,
            0.9939330220222473,
            0.9897642731666565,
            0.9939330220222473,
            0.9919441938400269,
            0.9845877289772034,
            0.9939330220222473,
            0.9890508055686951,
            0.9856652021408081,
            0.993116557598114,
            0.9894644021987915,
            0.9939330220222473,
            0.9925409555435181,
            0.9939330220222473,
            0.9890508055686951,
            0.9939330220222473,
            0.9933229088783264,
            0.9925409555435181,
            0.9895603060722351
        ]
    },
    "HumanEval/147": {
        "similarity": 0.9973933696746826,
        "body": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed",
        "similarities": [
            0.9973630309104919,
            0.9973835349082947,
            0.992401659488678,
            0.9973835349082947,
            0.9973637461662292,
            0.9973835349082947,
            0.9973545074462891,
            0.9971967935562134,
            0.9973576068878174,
            0.9925227761268616,
            0.9973933696746826,
            0.9973835349082947,
            0.9973630309104919,
            0.9919745922088623,
            0.9954671263694763,
            0.9973835349082947,
            0.9973433613777161,
            0.9932072162628174,
            0.9853124022483826,
            0.9973545074462891
        ]
    },
    "HumanEval/148": {
        "similarity": 0.997575044631958,
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    return tuple([p for p in planets[idx1+1:idx2] + planets[:idx1] if p != planet1 and p != planet2])",
        "result": "failed: First test error: 6",
        "similarities": [
            0.9973154664039612,
            0.9974916577339172,
            0.9951637983322144,
            0.9958591461181641,
            0.9962338805198669,
            0.9967855215072632,
            0.9953147768974304,
            0.997567355632782,
            0.9965305328369141,
            0.9958088397979736,
            0.9968905448913574,
            0.9957488179206848,
            0.9948799014091492,
            0.997575044631958,
            0.9959374666213989,
            0.9972484111785889,
            0.9948739409446716,
            0.994483470916748,
            0.9954769015312195,
            0.9974319934844971
        ]
    },
    "HumanEval/149": {
        "similarity": 0.9978141784667969,
        "body": "    return sorted([word for word in lst if len(word) % 2 == 0])",
        "result": "failed: ",
        "similarities": [
            0.9974949359893799,
            0.9978141784667969,
            0.9974949359893799,
            0.9978141784667969,
            0.9974949359893799,
            0.9974949359893799,
            0.9974949359893799,
            0.9950473308563232,
            0.9974949359893799,
            0.9950019717216492,
            0.9978141784667969,
            0.9978141784667969,
            0.9978141784667969,
            0.9904586672782898,
            0.9950019717216492,
            0.9974949359893799,
            0.9974949359893799,
            0.9978141784667969,
            0.9950473308563232,
            0.9951968193054199
        ]
    },
    "HumanEval/150": {
        "similarity": 0.9992055296897888,
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: unexpected indent (<string>, line 11)",
        "similarities": [
            0.9988719820976257,
            0.9991834759712219,
            0.9983595013618469,
            0.9991570711135864,
            0.9992055296897888,
            0.9991834759712219,
            0.9992055296897888,
            0.9976903200149536,
            0.9991752505302429,
            0.9992055296897888,
            0.9988764524459839,
            0.9991570711135864,
            0.9991834759712219,
            0.9992055296897888,
            0.9985558390617371,
            0.9991570711135864,
            0.9989703297615051,
            0.9991570711135864,
            0.9982958436012268,
            0.9973772764205933
        ]
    },
    "HumanEval/151": {
        "similarity": 0.9980868101119995,
        "body": "    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)",
        "result": "failed: This prints if this assert fails 5 (also good for debugging!)",
        "similarities": [
            0.9980868101119995,
            0.9967169761657715,
            0.9963583946228027,
            0.9979478716850281,
            0.9978868365287781,
            0.9855629801750183,
            0.9980279803276062,
            0.9980868101119995,
            0.9919079542160034,
            0.9978868365287781,
            0.9980868101119995,
            0.9978868365287781,
            0.9978868365287781,
            0.9914020895957947,
            0.9980868101119995,
            0.9980135560035706,
            0.9980868101119995,
            0.9977233409881592,
            0.9980135560035706,
            0.9980279803276062
        ]
    },
    "HumanEval/152": {
        "similarity": 0.9990068078041077,
        "body": "    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]",
        "result": "passed",
        "similarities": [
            0.9970486164093018,
            0.9987606406211853,
            0.9987384676933289,
            0.9988391399383545,
            0.9980166554450989,
            0.9989798665046692,
            0.9980166554450989,
            0.9989798665046692,
            0.9988318085670471,
            0.9987606406211853,
            0.9990068078041077,
            0.9987245798110962,
            0.99767005443573,
            0.9939764142036438,
            0.9989585876464844,
            0.9989798665046692,
            0.9986174702644348,
            0.9990068078041077,
            0.9990068078041077,
            0.9980166554450989
        ]
    },
    "HumanEval/153": {
        "similarity": 0.9938828349113464,
        "body": "    max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"",
        "result": "passed",
        "similarities": [
            0.9915598034858704,
            0.9918548464775085,
            0.9915598034858704,
            0.9915322065353394,
            0.9935618042945862,
            0.9922778606414795,
            0.9938828349113464,
            0.9917640686035156,
            0.9918548464775085,
            0.9916833639144897,
            0.992541491985321,
            0.992598295211792,
            0.9824467897415161,
            0.993874192237854,
            0.9925322532653809,
            0.9916614890098572,
            0.992541491985321,
            0.9918199777603149,
            0.9850664734840393,
            0.9925554394721985
        ]
    },
    "HumanEval/154": {
        "similarity": 0.9945018291473389,
        "body": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a or b in a:\n            return True\n    return False",
        "result": "passed",
        "similarities": [
            0.9936221241950989,
            0.9945018291473389,
            0.9939111471176147,
            0.9883292317390442,
            0.9911287426948547,
            0.9881362915039062,
            0.9910807609558105,
            0.9939111471176147,
            0.9945018291473389,
            0.9936859011650085,
            0.9927754998207092,
            0.9884210228919983,
            0.9936859011650085,
            0.9933463931083679,
            0.9939723610877991,
            0.9924989342689514,
            0.9939723610877991,
            0.9943289756774902,
            0.9881362915039062,
            0.9881362915039062
        ]
    },
    "HumanEval/155": {
        "similarity": 0.9963009357452393,
        "body": "    num = str(abs(num))\n    even = sum(digit % 2 == 0 for digit in num)\n    odd = len(num) - even\n    return (even, odd)",
        "result": "failed: not all arguments converted during string formatting",
        "similarities": [
            0.9918099641799927,
            0.9960594177246094,
            0.9962865710258484,
            0.9958940148353577,
            0.9928873181343079,
            0.9929963946342468,
            0.9963009357452393,
            0.9951302409172058,
            0.9961794018745422,
            0.9935327768325806,
            0.9928873777389526,
            0.990615963935852,
            0.9961467385292053,
            0.9945375323295593,
            0.9906467795372009,
            0.9962734580039978,
            0.9942085146903992,
            0.9958544373512268,
            0.9962935447692871,
            0.9906919598579407
        ]
    },
    "HumanEval/156": {
        "similarity": 0.9941011667251587,
        "body": "    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            number -= value\n            result += numeral\n    \n    return result",
        "result": "passed",
        "similarities": [
            0.9938493371009827,
            0.9939346313476562,
            0.9883538484573364,
            0.9938493371009827,
            0.9872282147407532,
            0.9916594624519348,
            0.9890564680099487,
            0.9919530153274536,
            0.9888389110565186,
            0.9890564680099487,
            0.99382483959198,
            0.9834119081497192,
            0.9882856607437134,
            0.9882312417030334,
            0.9882329702377319,
            0.9925475716590881,
            0.9940918684005737,
            0.9937666654586792,
            0.9941011667251587,
            0.9940832257270813
        ]
    },
    "HumanEval/157": {
        "similarity": 0.9980175495147705,
        "body": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2",
        "result": "passed",
        "similarities": [
            0.9980175495147705,
            0.9980175495147705,
            0.9938560128211975,
            0.9980175495147705,
            0.9980175495147705,
            0.9980175495147705,
            0.9980175495147705,
            0.99462890625,
            0.9980175495147705,
            0.99462890625,
            0.9969891905784607,
            0.9980175495147705,
            0.9950718283653259,
            0.9960720539093018,
            0.9938560128211975,
            0.9980175495147705,
            0.9934204816818237,
            0.9980175495147705,
            0.9950718283653259,
            0.9980175495147705
        ]
    },
    "HumanEval/158": {
        "similarity": 0.9948944449424744,
        "body": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word, max_unique_chars = word, unique_chars\n    return max_word",
        "result": "passed",
        "similarities": [
            0.99383944272995,
            0.9932746887207031,
            0.990305483341217,
            0.9935373067855835,
            0.9897821545600891,
            0.9948944449424744,
            0.9888617992401123,
            0.9947497844696045,
            0.9892122149467468,
            0.9939225912094116,
            0.9893251657485962,
            0.9945357441902161,
            0.9893251657485962,
            0.9948239922523499,
            0.9925006031990051,
            0.9947381615638733,
            0.9945357441902161,
            0.9945357441902161,
            0.9948944449424744,
            0.9947637319564819
        ]
    },
    "HumanEval/159": {
        "similarity": 0.9918089509010315,
        "body": "    return [number + max(need - number, 0), remaining - max(need - number, 0)]",
        "result": "failed: Error",
        "similarities": [
            0.9907135367393494,
            0.9826189279556274,
            0.9847093224525452,
            0.9880894422531128,
            0.9866118431091309,
            0.9862033724784851,
            0.9866118431091309,
            0.9855263233184814,
            0.987726092338562,
            0.9913420677185059,
            0.9888437986373901,
            0.98468416929245,
            0.9917505383491516,
            0.9861875772476196,
            0.9866118431091309,
            0.9866118431091309,
            0.9875636100769043,
            0.9785848259925842,
            0.9820333123207092,
            0.9918089509010315
        ]
    },
    "HumanEval/160": {
        "similarity": 0.9947232604026794,
        "body": "    if len(operand) < 2 or len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid input\")\n    for num in operand:\n        if not isinstance(num, int) or num < 0:\n            raise ValueError(\"All numbers must be non-negative integers\")\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: ",
        "similarities": [
            0.9929834008216858,
            0.992286205291748,
            0.9896762371063232,
            0.993984043598175,
            0.9935711622238159,
            0.9889247417449951,
            0.9894435405731201,
            0.9936639070510864,
            0.99267578125,
            0.9926778674125671,
            0.9928680062294006,
            0.9937549233436584,
            0.9840676188468933,
            0.9940353035926819,
            0.9928508400917053,
            0.9929854869842529,
            0.9947232604026794,
            0.9889247417449951,
            0.9942095875740051,
            0.99225252866745
        ]
    },
    "HumanEval/161": {
        "similarity": 0.995979905128479,
        "body": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in s) else result",
        "result": "passed",
        "similarities": [
            0.9950103759765625,
            0.9958799481391907,
            0.9951127767562866,
            0.995979905128479,
            0.9944705963134766,
            0.9952895641326904,
            0.995955228805542,
            0.9908485412597656,
            0.9959259033203125,
            0.9947274923324585,
            0.9924718141555786,
            0.9931263327598572,
            0.9938153624534607,
            0.9928905963897705,
            0.9928714632987976,
            0.995955228805542,
            0.9772617816925049,
            0.9867131114006042,
            0.9902459383010864,
            0.9949785470962524
        ]
    },
    "HumanEval/162": {
        "similarity": 0.9977981448173523,
        "body": "import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash",
        "result": "failed: unexpected indent (<string>, line 10)",
        "similarities": [
            0.9970311522483826,
            0.9973517060279846,
            0.9963153004646301,
            0.9968216419219971,
            0.9977981448173523,
            0.9975091814994812,
            0.9971283674240112,
            0.9971283674240112,
            0.9972236156463623,
            0.9946771264076233,
            0.9918116331100464,
            0.997473955154419,
            0.9974526762962341,
            0.9977117776870728,
            0.9966787099838257,
            0.9973863363265991,
            0.9971283674240112,
            0.9911897778511047,
            0.9960676431655884,
            0.9976469278335571
        ]
    },
    "HumanEval/163": {
        "similarity": 0.992247462272644,
        "body": "    even_digits = [i for i in range(min(a, b), max(a, b)+1) if i % 2 == 0]\n    return sorted(even_digits)",
        "result": "failed: Test 1",
        "similarities": [
            0.9920831322669983,
            0.9895766377449036,
            0.9922473430633545,
            0.9922473430633545,
            0.9723004102706909,
            0.9907624125480652,
            0.992247462272644,
            0.9762413501739502,
            0.9867193102836609,
            0.9922473430633545,
            0.9891821146011353,
            0.9857165813446045,
            0.9922473430633545,
            0.9899371266365051,
            0.9860680103302002,
            0.9922473430633545,
            0.9834657907485962,
            0.9874460101127625,
            0.9920831322669983,
            0.9897111654281616
        ]
    }
}