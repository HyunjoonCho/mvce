{
    "HumanEval/0": {
        "body": "for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/1": {
        "body": "    paren_groups = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        \n        current_group.append(char)\n        \n        if depth == 0 and current_group:\n            paren_groups.append(''.join(current_group))\n            current_group = []\n\n    return paren_groups",
        "result": "passed"
    },
    "HumanEval/2": {
        "body": "    return number - int(number)",
        "result": "passed"
    },
    "HumanEval/3": {
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/4": {
        "body": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad",
        "result": "passed"
    },
    "HumanEval/5": {
        "body": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result",
        "result": "failed: name 'delimiter' is not defined"
    },
    "HumanEval/6": {
        "body": "    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed"
    },
    "HumanEval/7": {
        "body": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "passed"
    },
    "HumanEval/8": {
        "body": "    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return (total_sum, total_product)",
        "result": "passed"
    },
    "HumanEval/9": {
        "body": "    result = []\n    current_max = float('-inf')\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    return result",
        "result": "passed"
    },
    "HumanEval/10": {
        "body": "    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return string + prefix[::-1]\n\n    return string",
        "result": "passed"
    },
    "HumanEval/11": {
        "body": "    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)",
        "result": "passed"
    },
    "HumanEval/12": {
        "body": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) >= len(longest_str):\n            longest_str = string\n    return longest_str",
        "result": "failed: "
    },
    "HumanEval/13": {
        "body": "    while b != 0:\n        a, b = b, a % b\n    return a",
        "result": "passed"
    },
    "HumanEval/14": {
        "body": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "result": "passed"
    },
    "HumanEval/15": {
        "body": "    return ' '.join(str(i) for i in range(n + 1))",
        "result": "passed"
    },
    "HumanEval/16": {
        "body": "    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "result": "passed"
    },
    "HumanEval/17": {
        "body": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        if note in note_map:\n            result.append(note_map[note])\n    return result",
        "result": "passed"
    },
    "HumanEval/18": {
        "body": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/19": {
        "body": "    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    \n    sorted_numbers = []\n    for number in numbers.split():\n        if number in number_map:\n            sorted_numbers.append(number_map[number])\n    \n    sorted_numbers.sort()\n    \n    result = \"\"\n    for num in sorted_numbers:\n        for key, value in number_map.items():\n            if value == num:\n                result += key + \" \"\n    \n    return result.strip()",
        "result": "passed"
    },
    "HumanEval/20": {
        "body": "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(2, len(numbers)):\n        current_diff = abs(numbers[i] - numbers[i - 1])\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair",
        "result": "passed"
    },
    "HumanEval/21": {
        "body": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]",
        "result": "passed"
    },
    "HumanEval/22": {
        "body": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "result": "passed"
    },
    "HumanEval/23": {
        "body": "    count = 0\n    for char in string:\n        count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/24": {
        "body": "for divisor in range(n // 2, 0, -1):\n    if n % divisor == 0:\n        return divisor",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/25": {
        "body": "    factors = []\n    divisor = 2\n    while n >= divisor ** 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors",
        "result": "passed"
    },
    "HumanEval/26": {
        "body": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "result": "failed: "
    },
    "HumanEval/27": {
        "body": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)",
        "result": "failed: name 's' is not defined"
    },
    "HumanEval/28": {
        "body": "result = ''\nfor s in strings:\n    result += s\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/29": {
        "body": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "result": "passed"
    },
    "HumanEval/30": {
        "body": "    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers",
        "result": "passed"
    },
    "HumanEval/31": {
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/32": {
        "body": "    a = xs[0]\n    b = sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs[1:])])\n    return -b / (2 * a)",
        "result": "failed: name 'x' is not defined"
    },
    "HumanEval/33": {
        "body": "    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_divisible_indices = sorted([l[i] for i in indices_divisible_by_three])\n    \n    result = l[:]\n    for original_index, value in zip(indices_divisible_by_three, values_at_divisible_indices):\n        result[original_index] = value\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/34": {
        "body": "    return sorted(set(l))",
        "result": "passed"
    },
    "HumanEval/35": {
        "body": "    max_val = l[0]\n    for elem in l:\n        if elem > max_val:\n            max_val = elem\n    return max_val",
        "result": "passed"
    },
    "HumanEval/36": {
        "body": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "result": "passed"
    },
    "HumanEval/37": {
        "body": "    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = []\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result",
        "result": "passed"
    },
    "HumanEval/38": {
        "body": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\ndecoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(decoded_groups)",
        "result": "failed: 'return' outside function (<string>, line 20)"
    },
    "HumanEval/39": {
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        next_fib = fib1 + fib2\n        fib1, fib2 = fib2, next_fib\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib",
        "result": "failed: name 'num' is not defined"
    },
    "HumanEval/40": {
        "body": "    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed"
    },
    "HumanEval/41": {
        "body": "    return n * n",
        "result": "passed"
    },
    "HumanEval/42": {
        "body": "for i in range(len(l)):\n    l[i] += 1\nreturn l",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/43": {
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed"
    },
    "HumanEval/44": {
        "body": "    if x == 0:\n        return \"0\"\n    \n    result = \"\"\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x //= base\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/45": {
        "body": "    return 0.5 * a * h",
        "result": "passed"
    },
    "HumanEval/46": {
        "body": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a",
        "result": "passed"
    },
    "HumanEval/47": {
        "body": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]",
        "result": "passed"
    },
    "HumanEval/48": {
        "body": "    for i in range(len(text) // 2):\n        if text[i] != text[-(i + 1)]:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/49": {
        "body": "    result = 1\n    base = 2\n\n    for _ in range(n):\n        result = (result * base) % p\n\n    return result",
        "result": "passed"
    },
    "HumanEval/50": {
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed"
    },
    "HumanEval/51": {
        "body": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "result": "passed"
    },
    "HumanEval/52": {
        "body": "    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/53": {
        "body": "    return x + y",
        "result": "passed"
    },
    "HumanEval/54": {
        "body": "    return set(s0) == set(s1)",
        "result": "passed"
    },
    "HumanEval/55": {
        "body": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "result": "passed"
    },
    "HumanEval/56": {
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed"
    },
    "HumanEval/57": {
        "body": "    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
        "result": "passed"
    },
    "HumanEval/58": {
        "body": "    set1 = set(l1)\n    set2 = set(l2)\n    result = sorted(set1.intersection(set2))\n    return result",
        "result": "passed"
    },
    "HumanEval/59": {
        "body": "    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor",
        "result": "passed"
    },
    "HumanEval/60": {
        "body": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total",
        "result": "passed"
    },
    "HumanEval/61": {
        "body": "    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "result": "passed"
    },
    "HumanEval/62": {
        "body": "    return [i * x for i, x in enumerate(xs)][1:]",
        "result": "passed"
    },
    "HumanEval/63": {
        "body": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed"
    },
    "HumanEval/64": {
        "body": "    vowels = \"aeiou\"\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/65": {
        "body": "    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        return digits[::-1]\n    \n    shift %= num_digits\n    return digits[-shift:] + digits[:-shift]",
        "result": "passed"
    },
    "HumanEval/66": {
        "body": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
        "result": "passed"
    },
    "HumanEval/67": {
        "body": "    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes",
        "result": "passed"
    },
    "HumanEval/68": {
        "body": "    min_val = float('inf')\n    min_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < min_val:\n            min_val = value\n            min_index = index\n\n    return [min_val, min_index] if min_index != -1 else []",
        "result": "passed"
    },
    "HumanEval/69": {
        "body": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    \n    return -1",
        "result": "passed"
    },
    "HumanEval/70": {
        "body": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result",
        "result": "passed"
    },
    "HumanEval/71": {
        "body": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)",
        "result": "passed"
    },
    "HumanEval/72": {
        "body": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
        "result": "passed"
    },
    "HumanEval/73": {
        "body": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes",
        "result": "passed"
    },
    "HumanEval/74": {
        "body": "    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    \n    if len_lst1 <= len_lst2:\n        return lst1\n    else:\n        return lst2",
        "result": "passed"
    },
    "HumanEval/75": {
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False",
        "result": "failed: unexpected indent (<string>, line 10)"
    },
    "HumanEval/76": {
        "body": "    for i in range(x + 1):\n        if n ** i == x:\n            return True\n    return False",
        "result": "timed out"
    },
    "HumanEval/77": {
        "body": "    if a == 0:\n        return True\n    abs_a = abs(a)\n    for i in range(1, int(abs_a ** (1/3)) + 2):\n        if i**3 == abs_a:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/78": {
        "body": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/79": {
        "body": "    binary = \"\"\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"",
        "result": "passed"
    },
    "HumanEval/80": {
        "body": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/81": {
        "body": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "passed"
    },
    "HumanEval/82": {
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return is_prime(len(string))",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/83": {
        "body": "    if n == 1:\n        return 1\n    count = 2 * (10 ** (n - 1)) - 10 ** (n - 2)\n    return count",
        "result": "failed: "
    },
    "HumanEval/84": {
        "body": "    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]",
        "result": "passed"
    },
    "HumanEval/85": {
        "body": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result",
        "result": "passed"
    },
    "HumanEval/86": {
        "body": "    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "result": "passed"
    },
    "HumanEval/87": {
        "body": "    coordinates = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_idx, col_idx))\n    sorted_coordinates = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))\n    return sorted_coordinates",
        "result": "passed"
    },
    "HumanEval/88": {
        "body": "    if not array or len(array) <= 1:\n        return array[:]\n    \n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array",
        "result": "passed"
    },
    "HumanEval/89": {
        "body": "    encrypted_str = ''\n    for char in s:\n        if char.isalpha():\n            shift = (2 * 2) % 26\n            base = 'a' if char.islower() else 'A'\n            encrypted_char = chr((ord(char) - ord(base) + shift) % 26 + ord(base))\n            encrypted_str += encrypted_char\n        else:\n            encrypted_str += char\n    return encrypted_str",
        "result": "passed"
    },
    "HumanEval/90": {
        "body": "    if len(lst) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in lst:\n        if num <= smallest:\n            smallest, second_smallest = num, smallest\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None",
        "result": "failed: "
    },
    "HumanEval/91": {
        "body": "    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count",
        "result": "passed"
    },
    "HumanEval/92": {
        "body": "    if all(isinstance(i, int) for i in [x, y, z]):\n        return x + y == z or x + z == y or y + z == x\n    return False",
        "result": "passed"
    },
    "HumanEval/93": {
        "body": "    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            swapped_char = char.swapcase()\n            if swapped_char in vowels:\n                index = (vowels.index(swapped_char) + 2) % len(vowels)\n                encoded_message += vowels[index].upper() if char.islower() else vowels[index]\n            else:\n                encoded_message += swapped_char\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/94": {
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/95": {
        "body": "    if not dictionary:\n        return False\n    \n    lower_case = upper_case = None\n\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if lower_case is None and upper_case is None:\n            lower_case = key.islower()\n            upper_case = key.isupper()\n        elif (lower_case and not key.islower()) or (upper_case and not key.isupper()):\n            return False\n    \n    return True",
        "result": "failed: name 'dictionary' is not defined"
    },
    "HumanEval/96": {
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    prime_numbers = []\n    for number in range(2, n):\n        if is_prime(number):\n            prime_numbers.append(number)\n    return prime_numbers",
        "result": "failed: name 'num' is not defined"
    },
    "HumanEval/97": {
        "body": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b",
        "result": "passed"
    },
    "HumanEval/98": {
        "body": "    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/99": {
        "body": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed"
    },
    "HumanEval/100": {
        "body": "    stones = []\n    current_stones = n\n    for level in range(n):\n        stones.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones",
        "result": "passed"
    },
    "HumanEval/101": {
        "body": "    return s.replace(',', ' ').split()",
        "result": "passed"
    },
    "HumanEval/102": {
        "body": "    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "result": "passed"
    },
    "HumanEval/103": {
        "body": "    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)",
        "result": "passed"
    },
    "HumanEval/104": {
        "body": "        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    result = [num for num in x if has_no_even_digit(num)]\n    result.sort()\n    return result",
        "result": "failed: unexpected indent (<string>, line 14)"
    },
    "HumanEval/105": {
        "body": "    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_filtered_nums = [num for num in arr if 1 <= num <= 9]\n    sorted_filtered_nums.sort()\n    reversed_sorted_nums = sorted_filtered_nums[::-1]\n    result = [digit_names[num - 1] for num in reversed_sorted_nums]\n    return result",
        "result": "passed"
    },
    "HumanEval/106": {
        "body": "import math\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "result": "failed: unexpected indent (<string>, line 13)"
    },
    "HumanEval/107": {
        "body": "    return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "result": "failed: local variable 'num' referenced before assignment"
    },
    "HumanEval/108": {
        "body": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count",
        "result": "failed: "
    },
    "HumanEval/109": {
        "body": "    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        if all(arr[j] <= arr[(j + 1) % n] for j in range(n)):\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/110": {
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    return \"YES\" if even_count_in_lst2 >= odd_count else \"NO\"",
        "result": "passed"
    },
    "HumanEval/111": {
        "body": "    if not test:\n        return {}\n    \n    letter_counts = {}\n    max_count = 0\n    \n    for letter in test.split():\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n        max_count = max(max_count, letter_counts[letter])\n    \n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/112": {
        "body": "    filtered_chars = [char for char in s if char not in c]\n    result_string = ''.join(filtered_chars)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)",
        "result": "passed"
    },
    "HumanEval/113": {
        "body": "    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result",
        "result": "passed"
    },
    "HumanEval/114": {
        "body": "    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum",
        "result": "passed"
    },
    "HumanEval/115": {
        "body": "    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)",
        "result": "failed: Error"
    },
    "HumanEval/116": {
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed"
    },
    "HumanEval/117": {
        "body": "    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/118": {
        "body": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed"
    },
    "HumanEval/119": {
        "body": "    for order in [lst, lst[::-1]]:\n        balance = 0\n        for char in order[0] + order[1]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'",
        "result": "passed"
    },
    "HumanEval/120": {
        "body": "    arr.sort()\n    return arr[-k:]",
        "result": "failed: "
    },
    "HumanEval/121": {
        "body": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total",
        "result": "passed"
    },
    "HumanEval/122": {
        "body": "    return sum(x for x in arr[:k] if -99 <= x <= 99)",
        "result": "passed"
    },
    "HumanEval/123": {
        "body": "    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            collatz_sequence.append(n)\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    return sorted(set(collatz_sequence))",
        "result": "passed"
    },
    "HumanEval/124": {
        "body": "    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month == 2:\n        if day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    else:\n        if day > 31:\n            return False\n    \n    return True",
        "result": "passed"
    },
    "HumanEval/125": {
        "body": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)",
        "result": "failed: "
    },
    "HumanEval/126": {
        "body": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 5 (good for debugging!)"
    },
    "HumanEval/127": {
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/128": {
        "body": "    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n        \n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product",
        "result": "passed"
    },
    "HumanEval/129": {
        "body": "import heapq\n\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = []\n    for i in range(n):\n        for j in range(n):\n            heapq.heappush(pq, (grid[i][j], i, j, 1))\n    \n    while pq:\n        value, x, y, length = heapq.heappop(pq)\n        if length == k:\n            return [value]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                heapq.heappush(pq, (grid[nx][ny], nx, ny, length + 1))",
        "result": "failed: unexpected indent (<string>, line 34)"
    },
    "HumanEval/130": {
        "body": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i / 2\n        else:\n            next_val = result[i - 1] + result[i - 2] + result[i + 1]\n        result.append(next_val)\n    \n    return result",
        "result": "failed: list index out of range"
    },
    "HumanEval/131": {
        "body": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n    return product if has_odd else 0",
        "result": "passed"
    },
    "HumanEval/132": {
        "body": "    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested and not stack",
        "result": "failed: "
    },
    "HumanEval/133": {
        "body": "import math\n\n    return sum(math.ceil(x) ** 2 for x in lst)",
        "result": "failed: unexpected indent (<string>, line 18)"
    },
    "HumanEval/134": {
        "body": "    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False",
        "result": "passed"
    },
    "HumanEval/135": {
        "body": "    for idx in range(1, len(arr)):\n        if arr[idx] < arr[idx - 1]:\n            return idx\n    return -1",
        "result": "failed: "
    },
    "HumanEval/136": {
        "body": "    negative_ints = []\n    positive_ints = []\n\n    for num in lst:\n        if num < 0:\n            negative_ints.append(num)\n        elif num > 0:\n            positive_ints.append(num)\n\n    a = max(negative_ints) if negative_ints else None\n    b = min(positive_ints) if positive_ints else None\n\n    return (a, b)",
        "result": "passed"
    },
    "HumanEval/137": {
        "body": "    a_float = float(str(a).replace(',', '.'))\n    b_float = float(str(b).replace(',', '.'))\n    \n    if a_float == b_float:\n        return None\n    \n    if a_float > b_float:\n        return a\n    else:\n        return b",
        "result": "passed"
    },
    "HumanEval/138": {
        "body": "    return n >= 8 and n % 2 == 0",
        "result": "passed"
    },
    "HumanEval/139": {
        "body": "import math\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: unexpected indent (<string>, line 16)"
    },
    "HumanEval/140": {
        "body": "    result = []\n    space_count = 0\n\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append(\"-\")\n            elif space_count > 0:\n                result.extend([\"_\"] * space_count)\n            result.append(char)\n            space_count = 0\n\n    if space_count > 2:\n        result.append(\"-\")\n    elif space_count > 0:\n        result.extend([\"_\"] * space_count)\n\n    return \"\".join(result)",
        "result": "passed"
    },
    "HumanEval/141": {
        "body": "    allowed_extensions = ['txt', 'exe', 'dll']\n    dot_count = file_name.count('.')\n    \n    if dot_count != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in name)\n    \n    if digit_count > 3:\n        return 'No'\n    \n    if extension not in allowed_extensions:\n        return 'No'\n    \n    return 'Yes'",
        "result": "passed"
    },
    "HumanEval/142": {
        "body": "    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n    return total_sum",
        "result": "failed: "
    },
    "HumanEval/143": {
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/144": {
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * num_n) % (den_x * den_n) == 0",
        "result": "passed"
    },
    "HumanEval/145": {
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: "
    },
    "HumanEval/146": {
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/147": {
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/148": {
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    start, end = sorted([index1, index2])\n    \n    return tuple(planets[start + 1:end])",
        "result": "passed"
    },
    "HumanEval/149": {
        "body": "    even_length_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_length_lst, key=lambda x: (len(x), x))",
        "result": "passed"
    },
    "HumanEval/150": {
        "body": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: name 'num' is not defined"
    },
    "HumanEval/151": {
        "body": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    return result",
        "result": "passed"
    },
    "HumanEval/152": {
        "body": "    return [abs(g - s) for g, s in zip(guess, game)]",
        "result": "passed"
    },
    "HumanEval/153": {
        "body": "    strongest_extension = ''\n    highest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > highest_strength or (strength == highest_strength and not strongest_extension):\n            strongest_extension = extension\n            highest_strength = strength\n    \n    return f'{class_name}.{strongest_extension}'",
        "result": "passed"
    },
    "HumanEval/154": {
        "body": "    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/155": {
        "body": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "result": "passed"
    },
    "HumanEval/156": {
        "body": "    roman_numerals = [\n        ('m', 1000), ('cm', 900), ('d', 500), ('cd', 400),\n        ('c', 100), ('xc', 90), ('l', 50), ('xl', 40),\n        ('x', 10), ('ix', 9), ('v', 5), ('iv', 4), ('i', 1)\n    ]\n    \n    result = ''\n    for numeral, value in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/157": {
        "body": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "result": "passed"
    },
    "HumanEval/158": {
        "body": "    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word",
        "result": "passed"
    },
    "HumanEval/159": {
        "body": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]",
        "result": "passed"
    },
    "HumanEval/160": {
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: "
    },
    "HumanEval/161": {
        "body": "    has_letters = any(c.isalpha() for c in s)\n    if not has_letters:\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)",
        "result": "passed"
    },
    "HumanEval/162": {
        "body": "import hashlib\n\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/163": {
        "body": "    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits",
        "result": "failed: Test 1"
    }
}