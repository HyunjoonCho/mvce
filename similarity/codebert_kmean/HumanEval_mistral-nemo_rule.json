{
    "HumanEval/0": {
        "body": "for num_a_index in range(len(numbers)):\n    for num_b_index in range(num_a_index + 1, len(numbers)):\n        if numbers[num_a_index] - numbers[num_b_index] <= threshold:\n            return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/1": {
        "body": "    groups = []\n    current_group = ''\n    group_level = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            group_level += 1\n            current_group += char\n        elif char == ')':\n            group_level -= 1\n            current_group += char\n            if group_level == 0:\n                groups.append(current_group)\n                current_group = ''\n    return groups",
        "result": "passed"
    },
    "HumanEval/2": {
        "body": "    integer_part = int(number)\n    return number - integer_part",
        "result": "passed"
    },
    "HumanEval/3": {
        "body": "balance = 0\n\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\n\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 18)"
    },
    "HumanEval/4": {
        "body": "num_mean = sum(numbers) / len(numbers)\nmad = 0.0\nfor num in numbers:\n    mad += abs(num - num_mean)\nreturn mad / len(numbers)",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/5": {
        "body": "result = []\nfor index, num in enumerate(numbers):\n    result.append(num)\n    if index < len(numbers) - 1:\n        result.append(delimeter)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 16)"
    },
    "HumanEval/6": {
        "body": "    groups = paren_string.split()\n    results = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results",
        "result": "passed"
    },
    "HumanEval/7": {
        "body": "filtered_strings = []\n\nfor string in strings:\n    if substring <= string:\n        filtered_strings.append(string)\n\nreturn filtered_strings",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/8": {
        "body": "total_sum = 0\ntotal_product = 1\n\nfor num in numbers:\n    total_sum += num\n    total_product *= num\n\nreturn total_sum, total_product",
        "result": "failed: 'return' outside function (<string>, line 19)"
    },
    "HumanEval/9": {
        "body": "    max_num = float('-inf')\n    result = []\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result",
        "result": "passed"
    },
    "HumanEval/10": {
        "body": "    for i in range(len(string), 0, -1):\n        if string[:i] == string[i-1::-1]:\n            return string + string[:-i][::-1]\n    return string",
        "result": "passed"
    },
    "HumanEval/11": {
        "body": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result",
        "result": "passed"
    },
    "HumanEval/12": {
        "body": "  if not strings:\n      return None\n\n  longest_str = ''\n  for string in strings:\n      if len(string) > len(longest_str):\n          longest_str = string\n\n  return longest_str",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 14)"
    },
    "HumanEval/13": {
        "body": "    while a < b:\n        a, b = b, a % b\n    return a",
        "result": "failed: "
    },
    "HumanEval/14": {
        "body": "result = []\nfor i in range(len(string) + 1):\n    result.append(string[:i])\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/15": {
        "body": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.rstrip()",
        "result": "passed"
    },
    "HumanEval/16": {
        "body": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)",
        "result": "passed"
    },
    "HumanEval/17": {
        "body": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == '|':\n            result.append(2)\n        elif char == '.':\n            result.append(1)\n\n    return result",
        "result": "failed: "
    },
    "HumanEval/18": {
        "body": "count = 0\nfor i in range(len(string)):\n    if string[i:i+len(substring)] == substring:\n        count += 1",
        "result": "failed: name 'string' is not defined"
    },
    "HumanEval/19": {
        "body": "    num_list = numbers.split()\n    sorted_nums = []\n    for i in range(10):\n        for num in num_list:\n            if i == int(num):\n                sorted_nums.append(num)\n    return ' '.join(sorted_nums)",
        "result": "failed: invalid literal for int() with base 10: 'three'"
    },
    "HumanEval/20": {
        "body": "min_diff = float('inf')\nclosest_pair = None\n\nfor i in range(len(numbers) - 1):\n    for j in range(i + 1, len(numbers)):\n        diff = numbers[j] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[j])\n\nreturn closest_pair",
        "result": "failed: 'return' outside function (<string>, line 22)"
    },
    "HumanEval/21": {
        "body": "min_num = min(numbers)\nmax_num = max(numbers)\n\nfor i in range(len(numbers)):\n    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\nreturn numbers",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/22": {
        "body": "filtered_values = []\nfor value in values:\n    if isinstance(value, int) and value <= 0:\n        filtered_values.append(value)\nreturn filtered_values",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/23": {
        "body": "length = 0\nfor char in string:\n    length += 1\nreturn length",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/24": {
        "body": "for my_var in range(n - 1, 0, -1):\n    if n % my_var == 0:\n        return my_var",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/25": {
        "body": "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors",
        "result": "passed"
    },
    "HumanEval/26": {
        "body": "seen = set()\nresult = []\nfor num in numbers:\n    if num not in seen:\n        result.append(num)\n        seen.add(num)\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 16)"
    },
    "HumanEval/27": {
        "body": "for i in range(len(string)):\n    if string[i] >= 'a' and string[i] <= 'z':\n        string = string[:i] + chr(ord(string[i]) - 32) + string[i+1:]\n    elif string[i] >= 'A' and string[i] <= 'Z':\n        string = string[:i] + chr(ord(string[i]) + 32) + string[i+1:]\nreturn string",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/28": {
        "body": "result = \"\"\nfor string in strings:\n    result += string",
        "result": "failed: name 'strings' is not defined"
    },
    "HumanEval/29": {
        "body": "filtered_strings = []\nfor string in strings:\n    if string <= prefix:\n        filtered_strings.append(string)\nreturn filtered_strings",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/30": {
        "body": "    result = []\n    for num in l:\n        if num >= 0:\n            result.append(num)\n    return result",
        "result": "failed: "
    },
    "HumanEval/31": {
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/32": {
        "body": "for i in range(2, len(xs), 2):\n    if xs[i] != 0:\n        return -xs[i-1] / xs[i]",
        "result": "failed: 'return' outside function (<string>, line 26)"
    },
    "HumanEval/33": {
        "body": "third_values = []\nfor idx, val in enumerate(l):\n    if idx % 3 == 0:\n        third_values.append(val)\nthird_values.sort()\n\nfor idx, val in enumerate(l):\n    if idx % 3 != 0 or len(third_values) == 0:\n        continue\n    l[idx] = third_values.pop(0)\n\nreturn l",
        "result": "failed: 'return' outside function (<string>, line 23)"
    },
    "HumanEval/34": {
        "body": "    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return sorted(result)",
        "result": "passed"
    },
    "HumanEval/35": {
        "body": "max_val = l[0]\nfor num in l:\n    if num <= max_val:\n        continue\n    max_val = num\nreturn max_val",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/36": {
        "body": "    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            while num > 0:\n                digit = num % 10\n                if digit == 7:\n                    count += 1\n                num //= 10\n    return count",
        "result": "passed"
    },
    "HumanEval/37": {
        "body": "    even_nums = [l[i] for i in range(0, len(l), 2)]\n    even_nums.sort()\n    for i, num in enumerate(even_nums):\n        l[2 * i] = num\n    return l",
        "result": "passed"
    },
    "HumanEval/38": {
        "body": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\nfor i in range(len(groups)):\n    if len(groups[i]) == 3:\n        groups[i] = groups[i][-1] + groups[i][:-1]\nreturn \"\".join(groups)",
        "result": "failed: 'return' outside function (<string>, line 22)"
    },
    "HumanEval/39": {
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n    return a",
        "result": "failed: name 'num' is not defined"
    },
    "HumanEval/40": {
        "body": "for num_a in range(len(l)):\n    for num_b in range(num_a + 1, len(l)):\n        for num_c in range(num_b + 1, len(l)):\n            if l[num_a] + l[num_b] + l[num_c] == 0:\n                return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 24)"
    },
    "HumanEval/41": {
        "body": "    collisions = 0\n    for left_car in range(n):\n        for right_car in range(left_car + 1, n):\n            if left_car < right_car <= n - 1:\n                collisions += 1\n    return collisions",
        "result": "failed: "
    },
    "HumanEval/42": {
        "body": "for index in range(len(l)):\n    l[index] += 1",
        "result": "failed: name 'l' is not defined"
    },
    "HumanEval/43": {
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed"
    },
    "HumanEval/44": {
        "body": "    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result",
        "result": "passed"
    },
    "HumanEval/45": {
        "body": "area = 0.5 * a * h",
        "result": "failed: name 'a' is not defined"
    },
    "HumanEval/46": {
        "body": "    if n < 4:\n        return [0, 0, 2][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(3, n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d",
        "result": "passed"
    },
    "HumanEval/47": {
        "body": "n = len(l)\nl_sorted = sorted(l)\nif n % 2 == 1:\n    return l_sorted[n // 2]\nelse:\n    return (l_sorted[(n - 1) // 2] + l_sorted[n // 2]) / 2.0",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/48": {
        "body": "    for char_a, char_b in zip(text, text[::-1]):\n        if char_a != char_b:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/49": {
        "body": "    result = 1\n    for i in range(2, n + 1):\n        if i < p:\n            result = (result * 2) % p\n    return result",
        "result": "failed: "
    },
    "HumanEval/50": {
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed"
    },
    "HumanEval/51": {
        "body": "  vowels = \"aeiouAEIOU\"\n  result = \"\"\n  for char in text:\n    if char not in vowels:\n      result += char\n  return result",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 19)"
    },
    "HumanEval/52": {
        "body": "    for num in l:\n        if num >= t:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/53": {
        "body": "    return x + y",
        "result": "passed"
    },
    "HumanEval/54": {
        "body": "    chars_s0 = {}\n    chars_s1 = {}\n\n    for char in s0:\n        if char in chars_s0:\n            chars_s0[char] += 1\n        else:\n            chars_s0[char] = 1\n\n    for char in s1:\n        if char in chars_s1:\n            chars_s1[char] += 1\n        else:\n            chars_s1[char] = 1\n\n    return chars_s0 == chars_s1",
        "result": "failed: "
    },
    "HumanEval/55": {
        "body": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "result": "passed"
    },
    "HumanEval/56": {
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0",
        "result": "passed"
    },
    "HumanEval/57": {
        "body": "    for i in range(1, len(l)):\n        if l[i] <= l[i-1]:\n            return False\n    return True",
        "result": "failed: "
    },
    "HumanEval/58": {
        "body": "    common_elements = []\n    for elem in l1:\n        if elem <= max(l2) and elem >= min(l2):\n            if elem not in common_elements:\n                common_elements.append(elem)\n    return sorted(common_elements)",
        "result": "failed: "
    },
    "HumanEval/59": {
        "body": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n",
        "result": "passed"
    },
    "HumanEval/60": {
        "body": "    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total",
        "result": "passed"
    },
    "HumanEval/61": {
        "body": "    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count <= 0:\n                return False\n            open_count -= 1\n    return open_count == 0",
        "result": "passed"
    },
    "HumanEval/62": {
        "body": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result",
        "result": "passed"
    },
    "HumanEval/63": {
        "body": "    if n < 3:\n        return n % 2\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "failed: "
    },
    "HumanEval/64": {
        "body": "vowels = 'aeiou'\ncount = 0\n\nfor char in s.lower():\n    if char in vowels or (char == 'y' and s[-1] == 'y'):\n        count += 1",
        "result": "failed: name 's' is not defined"
    },
    "HumanEval/65": {
        "body": "    x_str = str(x)\n    len_x = len(x_str)\n\n    if shift >= len_x:\n        return x_str[::-1]\n\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str",
        "result": "failed: "
    },
    "HumanEval/66": {
        "body": "total = 0\nfor char in s:\n    if 'A' <= char <= 'Z':\n        total += ord(char)\nreturn total",
        "result": "failed: 'return' outside function (<string>, line 19)"
    },
    "HumanEval/67": {
        "body": "    fruits = s.split(' and ')\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n\n    return n - apples - oranges",
        "result": "passed"
    },
    "HumanEval/68": {
        "body": "    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    smallest = min(evens, key=lambda x: (x[1], x[0])) if evens else []\n    return [smallest[1]] if smallest else []",
        "result": "failed: Error"
    },
    "HumanEval/69": {
        "body": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num, count in freq.items():\n        if count >= num and num > 0:\n            return num\n\n    return -1",
        "result": "failed: "
    },
    "HumanEval/70": {
        "body": "    sorted_lst = []\n    while lst:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst",
        "result": "passed"
    },
    "HumanEval/71": {
        "body": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    s = (a + b + c) / 2\n    area = round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return area",
        "result": "passed"
    },
    "HumanEval/72": {
        "body": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
        "result": "passed"
    },
    "HumanEval/73": {
        "body": "    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2 + 1):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes",
        "result": "failed: "
    },
    "HumanEval/74": {
        "body": "total_chars_lst1 = sum(len(item) for item in lst1)\ntotal_chars_lst2 = sum(len(item) for item in lst2)\n\nif total_chars_lst1 < total_chars_lst2:\n    return lst1\nelif total_chars_lst1 > total_chars_lst2:\n    return lst2\nelse:\n    return lst1",
        "result": "failed: 'return' outside function (<string>, line 20)"
    },
    "HumanEval/75": {
        "body": "        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = a\n    while num > 1 and count < 3:\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                num //= i\n                break\n        else:\n            num //= num\n        if num > 1 and check_prime(num):\n            count += 1\n    return count == 3",
        "result": "failed: unexpected indent (<string>, line 10)"
    },
    "HumanEval/76": {
        "body": "    i = 0\n    for _ in range(n):\n        if x == n ** i:\n            return True\n        i += 1\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/77": {
        "body": "for num in range(-a, a + 1):\n    if num ** 3 == a:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/78": {
        "body": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/79": {
        "body": "binary = \"\"\nfor i in range(decimal):\n    binary = str(i % 2) + binary\nreturn \"db\" + binary + \"db\"",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/80": {
        "body": "    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/81": {
        "body": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: "
    },
    "HumanEval/82": {
        "body": "    if n < 2:\n        return False\n    for num in range(2, int(n**0.5) + 1):\n        if n % num == 0:\n            return False\n    return True\n\n    length = len(string)\n    return is_prime(length)",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/83": {
        "body": "count = 0\nfor i in range(10**(n-1), 10**n):\n    if str(i).startswith('1') or str(i).endswith('1'):\n        count += 1\nreturn count",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/84": {
        "body": "    result = \"\"\n    while n > 0:\n        result = str(n % 2) + result\n        n //= 2\n    return result",
        "result": "failed: local variable 'n' referenced before assignment"
    },
    "HumanEval/85": {
        "body": "total = 0\nfor i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n        total += lst[i]\nreturn total",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/86": {
        "body": "    result = ''\n    for word in s.split():\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word + ' '\n    return result.rstrip()",
        "result": "passed"
    },
    "HumanEval/87": {
        "body": "    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            cols = [j for j, val in enumerate(row) if val == x]\n            coords = list(zip([i]*len(cols), cols[::-1]))\n            coordinates.extend(coords)\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))",
        "result": "passed"
    },
    "HumanEval/88": {
        "body": "    sorted_array = array.copy()\n    first_index_value = sorted_array[0]\n    last_index_value = sorted_array[-1]\n\n    if (first_index_value + last_index_value) % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n\n    return sorted_array",
        "result": "failed: list index out of range"
    },
    "HumanEval/89": {
        "body": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted += chr((ord(char) - ascii_offset + 8) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/90": {
        "body": "    smallest = largest = None\n\n    for num in lst:\n        if smallest is None or num < smallest:\n            largest = smallest\n            smallest = num\n        elif largest is None or num > largest and num < smallest:\n            largest = num\n\n    return largest",
        "result": "failed: "
    },
    "HumanEval/91": {
        "body": "    count = 0\n    words = s.split('.') + s.split('?') + s.split('!')\n    for word in words:\n        if word.strip().startswith('I'):\n            count += 1\n    return count",
        "result": "failed: name 's' is not defined"
    },
    "HumanEval/92": {
        "body": "    for num in [x, y, z]:\n        if not isinstance(num, int):\n            return False\n    if x + y == z or y + z == x or z + x == y:\n        return True\n    return False",
        "result": "passed"
    },
    "HumanEval/93": {
        "body": "for char in message:\n    if char.isalpha():\n        if char.lower() in 'aeiou':\n            encoded_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_char = char.swapcase()\n        print(encoded_char, end='')\n    else:\n        print(char, end='')",
        "result": "failed: name 'message' is not defined"
    },
    "HumanEval/94": {
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    primes = []\n    for num in lst:\n        if is_prime(num):\n            primes.append(num)\n    largest = max(primes, default=None)\n    return sum(int(digit) for digit in str(largest)) if largest else 0",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/95": {
        "body": "    if not dict_to_check:\n        return False\n\n    first_key = next(iter(dict_to_check))\n    case = first_key.islower()\n\n    for key in dict_to_check:\n        if key.islower() != case or not isinstance(key, str):\n            return False\n\n    return True",
        "result": "failed: name 'dict_to_check' is not defined"
    },
    "HumanEval/96": {
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "result": "failed: local variable 'num' referenced before assignment"
    },
    "HumanEval/97": {
        "body": "    product = a % 10 * b % 10\n    return product",
        "result": "failed: First test error: 6"
    },
    "HumanEval/98": {
        "body": "count = 0\nfor i in range(0, len(s), 2):\n    if s[i] in 'AEIOU':\n        count += 1",
        "result": "failed: name 's' is not defined"
    },
    "HumanEval/99": {
        "body": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed"
    },
    "HumanEval/100": {
        "body": "    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 1\n    return pile",
        "result": "failed: Test 3"
    },
    "HumanEval/101": {
        "body": "words = []\nfor word in s.split(','):\n    words.append(word.strip())\nreturn words",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/102": {
        "body": "for num in range(y, x - 1, -1):\n    if num % 2 == 0:\n        return num\nreturn -1",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/103": {
        "body": "for num in range(n, m + 1):\n    total += num\navg = round(total / (m - n + 1))\nreturn bin(avg) if n <= m else -1",
        "result": "failed: 'return' outside function (<string>, line 16)"
    },
    "HumanEval/104": {
        "body": "    result = []\n    for num in x:\n        if not any(digit % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)",
        "result": "failed: not all arguments converted during string formatting"
    },
    "HumanEval/105": {
        "body": "    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digits[num - 1])\n    return result[::-1]",
        "result": "failed: Error"
    },
    "HumanEval/106": {
        "body": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_ = 0\n            for j in range(1, i + 1):\n                sum_ += j\n            result.append(sum_)\n    return result",
        "result": "passed"
    },
    "HumanEval/107": {
        "body": "    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "result": "passed"
    },
    "HumanEval/108": {
        "body": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count",
        "result": "failed: invalid literal for int() with base 10: '-'"
    },
    "HumanEval/109": {
        "body": "    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.append(arr.pop(0))\n        if arr == sorted_arr:\n            return True\n    return False",
        "result": "failed: "
    },
    "HumanEval/110": {
        "body": "for i in range(len(lst1)):\n    if lst1[i] % 2 != 0:\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                break\n        else:\n            return \"NO\"\nreturn \"YES\"",
        "result": "failed: 'return' outside function (<string>, line 22)"
    },
    "HumanEval/111": {
        "body": "    counts = {}\n    max_count = 0\n    for letter in test.split():\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n    result = {k: v for k, v in counts.items() if v == max_count}\n    return result",
        "result": "passed"
    },
    "HumanEval/112": {
        "body": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result = char + result\n    return result, result == result[::-1]",
        "result": "failed: "
    },
    "HumanEval/113": {
        "body": "    result = []\n    for i in range(len(lst)):\n        count = sum(1 for digit in lst[i] if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i+1} of the {count}nput.\")\n    return result",
        "result": "failed: Test 1"
    },
    "HumanEval/114": {
        "body": "    min_sum = float('inf')\n    cur_sum = 0\n\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum",
        "result": "passed"
    },
    "HumanEval/115": {
        "body": "    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed",
        "result": "failed: Error"
    },
    "HumanEval/116": {
        "body": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
        "result": "passed"
    },
    "HumanEval/117": {
        "body": "    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            result.append(word)\n    return result",
        "result": "passed"
    },
    "HumanEval/118": {
        "body": "vowels = 'aeiou'\nresult = ''\nfor i in range(1, len(word) - 1):\n    if word[i] in vowels and word[i - 1].isalpha() and word[i + 1].isalpha():\n        result = word[i]\n        break\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 23)"
    },
    "HumanEval/119": {
        "body": "    open_count = 0\n    close_count = 0\n\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n\n        if open_count < close_count:\n            return 'No'\n\n    return 'Yes' if open_count == close_count else 'No'",
        "result": "failed: "
    },
    "HumanEval/120": {
        "body": "    max_nums = []\n    for i in range(k):\n        max_num = arr[0]\n        for num in arr:\n            if num >= max_num:\n                max_num = num\n        max_nums.append(max_num)\n        arr.remove(max_num)\n    return sorted(max_nums)",
        "result": "passed"
    },
    "HumanEval/121": {
        "body": "  total = 0\n  for i in range(0, len(lst), 2):\n    if lst[i] % 2 != 0:\n      total += lst[i]\n  return total",
        "result": "failed: unindent does not match any outer indentation level (<string>, line 11)"
    },
    "HumanEval/122": {
        "body": "    total = 0\n    for i in range(k):\n        if arr[i] >= 0 and arr[i] < 100:\n            total += arr[i]\n    return total",
        "result": "failed: "
    },
    "HumanEval/123": {
        "body": "    collatz = []\n    num = n\n    while num != 1:\n        if num % 2 == 1:\n            collatz.append(num)\n        if num % 2 == 0:\n            num /= 2\n        else:\n            num = 3 * num + 1\n    return sorted(collatz)",
        "result": "failed: "
    },
    "HumanEval/124": {
        "body": "    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    day = int(date[:2])\n    month = int(date[3:5])\n    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n    elif month in (4, 6, 9, 11) and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n    elif month in (1, 3, 5, 7, 8, 10, 12) and day < 1 or day > 31:\n        return False\n\n    return True",
        "result": "failed: "
    },
    "HumanEval/125": {
        "body": "words = []\nfor char in txt:\n    if char.isalpha():\n        words.append(char)\n    elif char == ' ' or char == ',':\n        words.append('')\n\nnum_lower_odd_order = 0\nfor i in range(len(words)):\n    word = words[i]\n    if word != '' and ord(word) % 2 == 1:\n        num_lower_odd_order += 1\n\nif any(word != '' for word in words):\n    return [''.join(words)]\nelse:\n    return num_lower_odd_order",
        "result": "failed: 'return' outside function (<string>, line 26)"
    },
    "HumanEval/126": {
        "body": "    prev_num = None\n    for num in lst:\n        if prev_num is not None and num < prev_num:\n            return False\n        elif prev_num == num:\n            return False\n        prev_num = num\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)"
    },
    "HumanEval/127": {
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/128": {
        "body": "sign_product = 1\ntotal_sum = 0\n\nfor num in arr:\n    if num != 0:\n        sign_product *= (1 if num > 0 else -1)\n        total_sum += abs(num)\n\nreturn None if len(arr) == 0 else sign_product * total_sum",
        "result": "failed: 'return' outside function (<string>, line 22)"
    },
    "HumanEval/129": {
        "body": "    n = len(grid)\n    dirs = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    visited = [[False] * n for _ in range(n)]\n    path = []\n\n        if steps == k:\n            return\n        visited[x][y] = True\n        path.append(grid[x][y])\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                dfs(nx, ny, steps + 1)\n        visited[x][y] = False\n        path.pop()\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, 0)\n    path.sort()\n    return path[:k]",
        "result": "failed: unexpected indent (<string>, line 37)"
    },
    "HumanEval/130": {
        "body": "    seq = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq[i] = 1 + i // 2\n        else:\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n    return seq[:n + 1]",
        "result": "failed: list index out of range"
    },
    "HumanEval/131": {
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: "
    },
    "HumanEval/132": {
        "body": "    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/133": {
        "body": "total = 0\nfor num in lst:\n    total += (int(num) + 1)**2\nreturn total",
        "result": "failed: 'return' outside function (<string>, line 19)"
    },
    "HumanEval/134": {
        "body": "for char_index in range(len(txt), 0, -1):\n    if txt[char_index].isalpha():\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/135": {
        "body": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "result": "failed: "
    },
    "HumanEval/136": {
        "body": "a = None\nb = None\nfor num in lst:\n    if num < 0 and a is None or num < a:\n        a = num\n    elif num > 0 and b is None or num < b:\n        b = num\nreturn (a, b)",
        "result": "failed: 'return' outside function (<string>, line 21)"
    },
    "HumanEval/137": {
        "body": "    if type(a) == str and ',' in a:\n        a = float(a.replace(',', '.'))\n    elif type(b) == str and ',' in b:\n        b = float(b.replace(',', '.'))\n\n    if a <= b:\n        return a\n    elif a >= b:\n        return b\n    else:\n        return None",
        "result": "failed: "
    },
    "HumanEval/138": {
        "body": "for a in range(2, n + 1):\n    for b in range(a, n // 2 + 1):\n        for c in range(b, (n - a - b) // 2 + 1):\n            d = n - a - b - c\n            if d >= c and d % 2 == 0:\n                return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/139": {
        "body": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n        for j in range(i - 1, 0, -1):\n            result *= j\n    return result",
        "result": "passed"
    },
    "HumanEval/140": {
        "body": "    result = \"\"\n    prev_space = False\n    for char in text:\n        if char == \" \":\n            if prev_space:\n                result += \"-\"\n            else:\n                result += \"_\"\n            prev_space = True\n        else:\n            result += char\n            prev_space = False\n    return result",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)"
    },
    "HumanEval/141": {
        "body": "    digit_count = 0\n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n    if digit_count > 3:\n        return 'No'\n\n    dot_position = file_name.find('.')\n    if dot_position == -1 or dot_position == 0 or dot_position == len(file_name) - 1:\n        return 'No'\n\n    prefix = file_name[:dot_position]\n    suffix = file_name[dot_position + 1:]\n    if not prefix[0].isalpha():\n        return 'No'\n    if suffix not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "result": "passed"
    },
    "HumanEval/142": {
        "body": "total = 0\nfor i in range(len(lst)):\n    if i % 3 == 0:\n        total += lst[i] ** 2\n    elif i % 4 == 0 and i % 3 != 0:\n        total += lst[i] ** 3",
        "result": "failed: name 'lst' is not defined"
    },
    "HumanEval/143": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = \"\"\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()",
        "result": "failed: unexpected indent (<string>, line 22)"
    },
    "HumanEval/144": {
        "body": "    x_num, x_den = map(int, x_str.split('/'))\n    n_num, n_den = map(int, n_str.split('/'))\n    prod_num = x_num * n_den\n    prod_den = x_den * n_num\n    return prod_num < prod_den",
        "result": "failed: name 'x_str' is not defined"
    },
    "HumanEval/145": {
        "body": "        return abs(sum(int(digit) for digit in str(n)))\n\n    sorted_nums = []\n    for i in range(len(nums)):\n        point_sum = sum_digits(nums[i])\n        inserted = False\n        for j, num in enumerate(sorted_nums):\n            if point_sum < sum_digits(num) or (point_sum == sum_digits(num) and i < sorted_nums[j][1]):\n                sorted_nums.insert(j, (nums[i], i))\n                inserted = True\n                break\n        if not inserted:\n            sorted_nums.append((nums[i], i))\n\n    return [num for num, _ in sorted_nums]",
        "result": "failed: unexpected indent (<string>, line 13)"
    },
    "HumanEval/146": {
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and (\n            str(num)[0] in '13579' and\n            str(num)[-1] in '13579'\n        ):\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/147": {
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/148": {
        "body": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])",
        "result": "failed: unexpected indent (<string>, line 20)"
    },
    "HumanEval/149": {
        "body": "    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst",
        "result": "passed"
    },
    "HumanEval/150": {
        "body": "for num in range(2, int(n**0.5) + 1):\n    if n % num == 0:\n        return y\n\nreturn x",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/151": {
        "body": "result = 0\nfor num in lst:\n    if isinstance(num, int) and num >= 0 and num % 2 != 0:\n        result += num ** 2\nreturn result",
        "result": "failed: 'return' outside function (<string>, line 18)"
    },
    "HumanEval/152": {
        "body": "    result = []\n    for i in range(len(game_scores)):\n        diff = abs(game_scores[i] - guessed_scores[i])\n        result.append(diff)\n    return result",
        "result": "failed: name 'game_scores' is not defined"
    },
    "HumanEval/153": {
        "body": "    strongest_strength = float('-inf')\n    strongest_ext = None\n\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n\n        if strength > strongest_strength or (strength == strongest_strength and extensions.index(ext) < extensions.index(strongest_ext)):\n            strongest_strength = strength\n            strongest_ext = ext\n\n    return f\"{class_name}.{strongest_ext}\"",
        "result": "passed"
    },
    "HumanEval/154": {
        "body": "for i in range(len(b)):\n    if b[i:] + b[:i] in a:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/155": {
        "body": "    count_even = 0\n    count_odd = 0\n\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)",
        "result": "passed"
    },
    "HumanEval/156": {
        "body": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result",
        "result": "passed"
    },
    "HumanEval/157": {
        "body": "    for side in [a, b, c]:\n        if side < 0:\n            return False\n    sides_sorted = sorted([a, b, c])\n    if sides_sorted[2] ** 2 == sides_sorted[0] ** 2 + sides_sorted[1] ** 2:\n        return True\n    else:\n        return False",
        "result": "passed"
    },
    "HumanEval/158": {
        "body": "    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word",
        "result": "passed"
    },
    "HumanEval/159": {
        "body": "    eaten = number\n    left = remaining\n\n    for _ in range(need):\n        if left == 0:\n            break\n        eaten += 1\n        left -= 1\n\n    return [eaten, left]",
        "result": "passed"
    },
    "HumanEval/160": {
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: "
    },
    "HumanEval/161": {
        "body": "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result[::-1] if not any(c.isalpha() for c in s) else result",
        "result": "passed"
    },
    "HumanEval/162": {
        "body": "import hashlib\n\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/163": {
        "body": "    even_digits = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits",
        "result": "failed: Test 1"
    }
}