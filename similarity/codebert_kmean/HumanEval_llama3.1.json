{
    "HumanEval/0": {
        "body": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "result": "passed"
    },
    "HumanEval/1": {
        "body": "    result = []\n    current_group = ''\n    balance = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            if balance == 0:\n                result.append(current_group)\n                current_group = ''\n    return result",
        "result": "passed"
    },
    "HumanEval/2": {
        "body": "    return number - int(number)",
        "result": "passed"
    },
    "HumanEval/3": {
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/4": {
        "body": "    mean_x = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean_x) for x in numbers) / len(numbers)\n    return mad",
        "result": "passed"
    },
    "HumanEval/5": {
        "body": "    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result",
        "result": "passed"
    },
    "HumanEval/6": {
        "body": "    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "result": "passed"
    },
    "HumanEval/7": {
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed"
    },
    "HumanEval/8": {
        "body": "    total_sum = 0\n    product = 1\n    for num in numbers:\n        total_sum += num\n        product *= num\n    return total_sum, product",
        "result": "passed"
    },
    "HumanEval/9": {
        "body": "    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result",
        "result": "passed"
    },
    "HumanEval/10": {
        "body": "    if not string:\n        return ''\n    \n    prefix = ''\n    while True:\n        suffix = string[::-1]\n        for i in range(len(string)):\n            if string[i:] == suffix[:len(suffix) - i]:\n                prefix += string[:i]\n                string = string[i:]\n                break\n        else:\n            break\n\n    return string + prefix",
        "result": "timed out"
    },
    "HumanEval/11": {
        "body": "    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))",
        "result": "passed"
    },
    "HumanEval/12": {
        "body": "    if not strings:\n        return None\n    max_len = 0\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result",
        "result": "passed"
    },
    "HumanEval/13": {
        "body": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)",
        "result": "passed"
    },
    "HumanEval/14": {
        "body": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return sorted(prefixes)",
        "result": "passed"
    },
    "HumanEval/15": {
        "body": "    return ' '.join(map(str, range(n + 1)))",
        "result": "passed"
    },
    "HumanEval/16": {
        "body": "    return len(set(string.casefold()))",
        "result": "passed"
    },
    "HumanEval/17": {
        "body": "    music_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [music_map[note] for note in music_string.split()]",
        "result": "passed"
    },
    "HumanEval/18": {
        "body": "    count = 0\n    i = string.find(substring)\n    while i != -1:\n        count += 1\n        i = string.find(substring, i + 1)\n    return count",
        "result": "passed"
    },
    "HumanEval/19": {
        "body": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = sorted([num_dict[num] for num in numbers.split()])\n    return ' '.join([list(num_dict.keys())[i] for i in numbers_list])",
        "result": "passed"
    },
    "HumanEval/20": {
        "body": "    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = tuple(sorted((numbers[i], numbers[i+1])))\n            \n    return closest_pair",
        "result": "failed: "
    },
    "HumanEval/21": {
        "body": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
        "result": "passed"
    },
    "HumanEval/22": {
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed"
    },
    "HumanEval/23": {
        "body": "return len(string)",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/24": {
        "body": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None",
        "result": "passed"
    },
    "HumanEval/25": {
        "body": "    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    return factors",
        "result": "passed"
    },
    "HumanEval/26": {
        "body": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "result": "failed: "
    },
    "HumanEval/27": {
        "body": "    return ''.join(c.swapcase() for c in string)",
        "result": "passed"
    },
    "HumanEval/28": {
        "body": "    return ''.join(strings)",
        "result": "passed"
    },
    "HumanEval/29": {
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed"
    },
    "HumanEval/30": {
        "body": "    return [i for i in l if i > 0]",
        "result": "passed"
    },
    "HumanEval/31": {
        "body": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/32": {
        "body": "    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n    a = xs[-1]\n    b = -sum([coeff for i, coeff in enumerate(xs) if i < len(xs) - 1 and coeff != 0])\n    x = round(-b / (2 * a), 12)\n    return x",
        "result": "failed: "
    },
    "HumanEval/33": {
        "body": "    return [x if i % 3 != 0 else sorted([y for j, y in enumerate(l) if j % 3 == 0])[k] \n            for k, i, x in enumerate(l)]",
        "result": "failed: not enough values to unpack (expected 3, got 2)"
    },
    "HumanEval/34": {
        "body": "    return sorted(set(l))",
        "result": "passed"
    },
    "HumanEval/35": {
        "body": "return max(l)",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/36": {
        "body": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')\n    return count",
        "result": "passed"
    },
    "HumanEval/37": {
        "body": "    return [x if i % 2 != 0 else sorted([y for i, y in enumerate(l) if i % 2 == 0])[i // 2] for i, x in enumerate(l)]",
        "result": "passed"
    },
    "HumanEval/38": {
        "body": "    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([group[0] if len(group) == 3 else group for group in groups])",
        "result": "failed: "
    },
    "HumanEval/39": {
        "body": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if all(b % j != 0 for j in range(2, int(b**0.5) + 1)):\n            return b",
        "result": "failed: "
    },
    "HumanEval/40": {
        "body": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed"
    },
    "HumanEval/41": {
        "body": "    coll = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i - j) % 2 == 1:\n                coll += 1\n    return coll",
        "result": "failed: "
    },
    "HumanEval/42": {
        "body": "    return [x + 1 for x in l]",
        "result": "passed"
    },
    "HumanEval/43": {
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed"
    },
    "HumanEval/44": {
        "body": "    if x == 0:\n        return '0'\n    digits = '0123456789'\n    result = ''\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result",
        "result": "passed"
    },
    "HumanEval/45": {
        "body": "    return (a * h) / 2",
        "result": "passed"
    },
    "HumanEval/46": {
        "body": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
        "result": "failed: "
    },
    "HumanEval/47": {
        "body": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return float(sorted_l[n // 2])\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2",
        "result": "passed"
    },
    "HumanEval/48": {
        "body": "    return text == text[::-1]",
        "result": "passed"
    },
    "HumanEval/49": {
        "body": "    return pow(n, -1, p)",
        "result": "failed: "
    },
    "HumanEval/50": {
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed"
    },
    "HumanEval/51": {
        "body": "    return ''.join([char for char in text if char.lower() not in 'aeiou'])",
        "result": "passed"
    },
    "HumanEval/52": {
        "body": "    return all(i < t for i in l)",
        "result": "passed"
    },
    "HumanEval/53": {
        "body": "    return x + y",
        "result": "passed"
    },
    "HumanEval/54": {
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: "
    },
    "HumanEval/55": {
        "body": "    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b",
        "result": "failed: "
    },
    "HumanEval/56": {
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed"
    },
    "HumanEval/57": {
        "body": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))",
        "result": "passed"
    },
    "HumanEval/58": {
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed"
    },
    "HumanEval/59": {
        "body": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "result": "passed"
    },
    "HumanEval/60": {
        "body": "    return n * (n + 1) // 2",
        "result": "passed"
    },
    "HumanEval/61": {
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "result": "passed"
    },
    "HumanEval/62": {
        "body": "    return [i * x for i, x in enumerate(xs[1:], start=1)]",
        "result": "passed"
    },
    "HumanEval/63": {
        "body": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c",
        "result": "passed"
    },
    "HumanEval/64": {
        "body": "    s = s.lower()\n    count = sum(1 for c in s if c in 'aeiouy' and (c != 'y' or s.endswith(c))) \n    return count",
        "result": "passed"
    },
    "HumanEval/65": {
        "body": "    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "result": "failed: "
    },
    "HumanEval/66": {
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed"
    },
    "HumanEval/67": {
        "body": "    s = s.replace('apples', '').replace('oranges', '')\n    return n - int(s.split()[0]) - int(s.split()[2])",
        "result": "passed"
    },
    "HumanEval/68": {
        "body": "    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    return (min(even_nodes, key=lambda x: (x[0], x[1])) or [])[:2] if even_nodes else []",
        "result": "failed: Error"
    },
    "HumanEval/69": {
        "body": "    freq = {}\n    for num in lst:\n        if num not in freq or freq[num] < num:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    max_num = -1\n    for num, count in freq.items():\n        if num > max_num and count >= num:\n            max_num = num\n    return max_num",
        "result": "failed: "
    },
    "HumanEval/70": {
        "body": "    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
        "result": "passed"
    },
    "HumanEval/71": {
        "body": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "result": "passed"
    },
    "HumanEval/72": {
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed"
    },
    "HumanEval/73": {
        "body": "    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n\n    odd_count = sum(value % 2 for value in count.values())\n    return max(0, (len(count) - 1 - odd_count) // 2)",
        "result": "failed: "
    },
    "HumanEval/74": {
        "body": "    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",
        "result": "passed"
    },
    "HumanEval/75": {
        "body": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a+1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    count = len(factors)\n    return count >= 3 and all(is_prime(factor) for factor in set(factors))",
        "result": "failed: unexpected indent (<string>, line 10)"
    },
    "HumanEval/76": {
        "body": "    return x >= 0 and round(n ** (x / n)) ** n == x",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/77": {
        "body": "    return a >= 0 and round(a ** (1./3)) ** 3 == a",
        "result": "failed: Third test error: False"
    },
    "HumanEval/78": {
        "body": "    prime_hex_digits = set('2347BD')\n    return sum(1 for d in num if d in prime_hex_digits)",
        "result": "passed"
    },
    "HumanEval/79": {
        "body": "    return 'db' + bin(decimal)[2:] + 'db'",
        "result": "passed"
    },
    "HumanEval/80": {
        "body": "    return len(s) >= 3 and len(set([s[i:i+3] for i in range(len(s)-2)])) == len(s)//3",
        "result": "failed: abcd"
    },
    "HumanEval/81": {
        "body": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "result": "failed: "
    },
    "HumanEval/82": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/83": {
        "body": "    return (10 ** (n - 1) - 1) + (10 ** n - 10 ** (n - 1))",
        "result": "failed: "
    },
    "HumanEval/84": {
        "body": "    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",
        "result": "failed: Error"
    },
    "HumanEval/85": {
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)",
        "result": "passed"
    },
    "HumanEval/86": {
        "body": "    words = s.split()\n    return ' '.join(''.join(sorted(word)) for word in words)",
        "result": "passed"
    },
    "HumanEval/87": {
        "body": "    return sorted([(i, j) for i, row in enumerate(lst) if x in row for j, val in enumerate(row) if val == x], key=lambda y: (y[0], -y[1]))",
        "result": "passed"
    },
    "HumanEval/88": {
        "body": "    if len(array) < 2:\n        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    return sorted_array",
        "result": "passed"
    },
    "HumanEval/89": {
        "body": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            new_char_value = (ord(char) - ascii_offset + 2*2) % 26 + ascii_offset\n            result += chr(new_char_value)\n        else:\n            result += char\n    return result",
        "result": "passed"
    },
    "HumanEval/90": {
        "body": "    if len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]",
        "result": "passed"
    },
    "HumanEval/91": {
        "body": "    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].lower() == 'i')",
        "result": "failed: Test 2"
    },
    "HumanEval/92": {
        "body": "    return (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x) and all(isinstance(i, int) for i in [x, y, z])",
        "result": "passed"
    },
    "HumanEval/93": {
        "body": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_char = chr(ord(char) + 2)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/94": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/95": {
        "body": "    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper",
        "result": "passed"
    },
    "HumanEval/96": {
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n - 2: # we only want n-2 prime numbers\n            break\n\n    return primes",
        "result": "failed: unexpected indent (<string>, line 13)"
    },
    "HumanEval/97": {
        "body": "    return (a % 10) * (b % 10)",
        "result": "passed"
    },
    "HumanEval/98": {
        "body": "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')",
        "result": "failed: "
    },
    "HumanEval/99": {
        "body": "    return int(round(float(value)))",
        "result": "failed: Test 2"
    },
    "HumanEval/100": {
        "body": "    pile = []\n    level_stones = n\n    for i in range(1, n + 1):\n        if level_stones % 2 == 0:\n            level_stones += 2\n        else:\n            level_stones += 1\n        pile.append(level_stones)\n    return pile",
        "result": "failed: Test 3"
    },
    "HumanEval/101": {
        "body": "    return s.replace(\",\", \" \").split()",
        "result": "passed"
    },
    "HumanEval/102": {
        "body": "    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    return max(even_nums) if even_nums else -1",
        "result": "passed"
    },
    "HumanEval/103": {
        "body": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]",
        "result": "failed: "
    },
    "HumanEval/104": {
        "body": "    return sorted([i for i in x if all(d % 2 != 0 for d in str(i))])",
        "result": "failed: not all arguments converted during string formatting"
    },
    "HumanEval/105": {
        "body": "    sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = sorted_arr[::-1]\n    digit_names = {\n        \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\",\n        \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"\n    }\n    return [digit_names[str(num)] for num in reversed_arr]",
        "result": "passed"
    },
    "HumanEval/106": {
        "body": "    return [i * (i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n)]",
        "result": "failed: "
    },
    "HumanEval/107": {
        "body": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "result": "passed"
    },
    "HumanEval/108": {
        "body": "    return sum(1 for num in arr if any(int(digit) > 0 for digit in str(abs(num))))",
        "result": "failed: "
    },
    "HumanEval/109": {
        "body": "    if len(arr) == 0:\n        return True\n    max_val = max(arr)\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr[-i-1] != max_val or arr[-i-1] != arr_sorted[-i-1]:\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/110": {
        "body": "    odd_in_lst1 = [num for num in lst1 if num % 2 != 0]\n    return 'YES' if len(odd_in_lst1) == len(lst1) else 'NO'",
        "result": "failed: "
    },
    "HumanEval/111": {
        "body": "    if not test:\n        return {}\n    \n    words = test.split()\n    counts = {}\n    \n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    \n    max_count = max(counts.values())\n    \n    result = {word: count for word, count in counts.items() if count == max_count}\n    \n    return result",
        "result": "passed"
    },
    "HumanEval/112": {
        "body": "    result = ''.join([x for x in s if x not in c])\n    return (result, result == result[::-1])",
        "result": "passed"
    },
    "HumanEval/113": {
        "body": "    return [f\"the number of odd elements {sum(1 for d in s if int(d) % 2)}n the str{sum(1 for d in s if int(d) % 2)}ng {len(s)} of the nput.\" for s in lst]",
        "result": "failed: Test 1"
    },
    "HumanEval/114": {
        "body": "    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "result": "passed"
    },
    "HumanEval/115": {
        "body": "    rows = len(grid)\n    cols = len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // (capacity * rows))",
        "result": "failed: Error"
    },
    "HumanEval/116": {
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed"
    },
    "HumanEval/117": {
        "body": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.isalpha() and c.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed"
    },
    "HumanEval/118": {
        "body": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels or word[i+2] in vowels:\n                return word[i+1]\n    return \"\"",
        "result": "failed: string index out of range"
    },
    "HumanEval/119": {
        "body": "    s = ''.join(lst)\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'",
        "result": "failed: "
    },
    "HumanEval/120": {
        "body": "    return sorted(arr)[-k:]",
        "result": "failed: "
    },
    "HumanEval/121": {
        "body": "    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)",
        "result": "passed"
    },
    "HumanEval/122": {
        "body": "    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)",
        "result": "failed: "
    },
    "HumanEval/123": {
        "body": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([num for num in sequence if num % 2 != 0])",
        "result": "passed"
    },
    "HumanEval/124": {
        "body": "    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3 or len(parts[0]) != 2 or len(parts[1]) != 2 or len(parts[2]) != 4:\n        return False\n    day, month, year = map(int, parts)\n    if not (1 <= month <= 12):\n        return False\n    if month in [1,3,5,7,8,10,12] and not (1 <= day <= 31):\n        return False\n    if month in [4,6,9,11] and not (1 <= day <= 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    return True",
        "result": "failed: "
    },
    "HumanEval/125": {
        "body": "    words = txt.split()\n    if not any(char.isspace() for char in txt) and ',' in txt:\n        return txt.replace(',', ' ').split()\n    elif not any(char.isspace() for char in txt) and not ',' in txt:\n        return sum(1 for i, c in enumerate(txt.lower()) if ord(c) % 2 == 1)\n    else:\n        return words",
        "result": "failed: "
    },
    "HumanEval/126": {
        "body": "    return lst == sorted(lst) and len(set(lst)) == len(lst)",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)"
    },
    "HumanEval/127": {
        "body": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"",
        "result": "failed: unexpected indent (<string>, line 26)"
    },
    "HumanEval/128": {
        "body": "    if not arr:\n        return None\n    product = 1\n    magnitude_sum = sum(abs(x) for x in arr)\n    for num in arr:\n        product *= -1 if num < 0 else 1\n    return magnitude_sum * product",
        "result": "failed: "
    },
    "HumanEval/129": {
        "body": "    m, n = len(grid), len(grid[0])\n    visited = [[False]*n for _ in range(m)]\n    queue = [(i, j, [grid[i][j]]) for i in range(m) for j in range(n)]\n    ans = []\n    while queue:\n        x, y, path = queue.pop(0)\n        if len(path) == k+1:  # found a path of length k\n            ans = path\n            break\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                queue.append((nx, ny, path + [grid[nx][ny]]))\n                visited[nx][ny] = True\n    return ans",
        "result": "failed: "
    },
    "HumanEval/130": {
        "body": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + (i / 2))\n            else:\n                trib.append(sum(trib[-3:]))\n        return trib",
        "result": "failed: "
    },
    "HumanEval/131": {
        "body": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
        "result": "failed: "
    },
    "HumanEval/132": {
        "body": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/133": {
        "body": "import math\n\n    return sum(math.ceil(x)**2 for x in lst)",
        "result": "failed: unexpected indent (<string>, line 18)"
    },
    "HumanEval/134": {
        "body": "    return len(txt) > 0 and txt[-1].isalpha() and not any(c.isalpha() for c in txt[:-1])",
        "result": "failed: "
    },
    "HumanEval/135": {
        "body": "    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1",
        "result": "failed: "
    },
    "HumanEval/136": {
        "body": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    a = min(negatives) if negatives else None\n    b = max(positives) if positives else None\n\n    return (a, b)",
        "result": "failed: "
    },
    "HumanEval/137": {
        "body": "    if type(a) != type(b):\n        a = float(a) if isinstance(a, str) else a\n        b = float(b) if isinstance(b, str) else b\n    elif isinstance(a, str):\n        a = float(a.replace('.', ','))\n    elif isinstance(b, str):\n        b = float(b.replace('.', ','))\n    \n    return max(a, b) if a != b else None",
        "result": "failed: could not convert string to float: '2,3'"
    },
    "HumanEval/138": {
        "body": "    for i in range(4):\n        for j in range(i+1, 4):\n            for k in range(j+1, 4):\n                for m in range(k+1, 4):\n                    if i + j + k + m == n and all((i+j+k+m)%2==0 for a in [i,j,k,m] if a%2==0):\n                        return True\n    return False",
        "result": "failed: "
    },
    "HumanEval/139": {
        "body": "    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result",
        "result": "failed: name 'math' is not defined"
    },
    "HumanEval/140": {
        "body": "    while '  ' in text: \n        text = text.replace('  ', '-')\n    return text.replace(' ', '_')",
        "result": "failed: This prints if this assert fails 3 (good for debugging!)"
    },
    "HumanEval/141": {
        "body": "    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    elif '.' not in file_name or file_name.split('.')[0] == '' or not file_name[0].isalpha():\n        return 'No'\n    elif file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'",
        "result": "failed: "
    },
    "HumanEval/142": {
        "body": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            total += num ** 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num ** 2\n    return total",
        "result": "failed: "
    },
    "HumanEval/143": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)",
        "result": "failed: unexpected indent (<string>, line 22)"
    },
    "HumanEval/144": {
        "body": "    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) % b == 0 and (c * b) % d == 0",
        "result": "failed: test1"
    },
    "HumanEval/145": {
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: "
    },
    "HumanEval/146": {
        "body": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/147": {
        "body": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/148": {
        "body": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    return tuple([p for p in planets[idx1+1:idx2] + planets[:idx1] if p != planet1 and p != planet2])",
        "result": "failed: First test error: 6"
    },
    "HumanEval/149": {
        "body": "    return sorted([s for s in lst if len(s) % 2 == 0])",
        "result": "failed: "
    },
    "HumanEval/150": {
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/151": {
        "body": "    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)",
        "result": "failed: This prints if this assert fails 5 (also good for debugging!)"
    },
    "HumanEval/152": {
        "body": "    return [abs(g - g_) if g != g_ else 0 for g, g_ in zip(game, guess)]",
        "result": "passed"
    },
    "HumanEval/153": {
        "body": "    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'",
        "result": "passed"
    },
    "HumanEval/154": {
        "body": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a: \n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/155": {
        "body": "    num = str(abs(num))\n    even = sum(1 for d in num if int(d) % 2 == 0)\n    odd = len(num) - even\n    return (even, odd)",
        "result": "passed"
    },
    "HumanEval/156": {
        "body": "    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result",
        "result": "passed"
    },
    "HumanEval/157": {
        "body": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2",
        "result": "passed"
    },
    "HumanEval/158": {
        "body": "    max_word = max(words, key=lambda s: (len(set(s)), s))\n    return max_word",
        "result": "failed: t2"
    },
    "HumanEval/159": {
        "body": "    return [number + min(need, remaining), max(remaining - need, 0)]",
        "result": "passed"
    },
    "HumanEval/160": {
        "body": "    result = 1\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result",
        "result": "failed: "
    },
    "HumanEval/161": {
        "body": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result",
        "result": "passed"
    },
    "HumanEval/162": {
        "body": "import hashlib\n\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/163": {
        "body": "    even_digits = [i for i in range(min(a, b), max(a, b)+1) if i % 2 == 0]\n    return sorted(even_digits)",
        "result": "failed: Test 1"
    }
}