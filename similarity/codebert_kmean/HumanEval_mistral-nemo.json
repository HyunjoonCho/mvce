{
    "HumanEval/0": {
        "body": "for i in range(len(numbers) - 1):\n    if abs(numbers[i] - numbers[i + 1]) <= threshold:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/1": {
        "body": "    groups = []\n    group = ''\n    balance = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            balance += 1\n            group += char\n        elif char == ')':\n            balance -= 1\n            group += char\n            if balance == 0:\n                groups.append(group)\n                group = ''\n    return groups",
        "result": "passed"
    },
    "HumanEval/2": {
        "body": "return number - int(number)",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/3": {
        "body": "balance = 0\nfor op in operations:\n    balance += op\n    if balance < 0:\n        return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/4": {
        "body": "mean = sum(numbers) / len(numbers)\nreturn sum(abs(x - mean) for x in numbers) / len(numbers)",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/5": {
        "body": "return [numbers[i // 2] if i % 2 == 0 else delimeter for i in range(2 * len(numbers) - 1)]",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/6": {
        "body": "    levels = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        levels.append(max_level)\n    return levels",
        "result": "passed"
    },
    "HumanEval/7": {
        "body": "return [s for s in strings if substring in s]",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/8": {
        "body": "    product = 1\n    total = 0\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product",
        "result": "passed"
    },
    "HumanEval/9": {
        "body": "    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result",
        "result": "passed"
    },
    "HumanEval/10": {
        "body": "for i in range(len(string)):\n    if string[:i+1] == string[i::-1]:\n        return string + string[:i][::-1]",
        "result": "failed: 'return' outside function (<string>, line 22)"
    },
    "HumanEval/11": {
        "body": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/12": {
        "body": "if not strings:\n    return None\nreturn max(strings, key=len)",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/13": {
        "body": "if b == 0:\n    return a\nelse:\n    return greatest_common_divisor(b, a % b)",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/14": {
        "body": "    return [string[:i] for i in range(1, len(string) + 1)]",
        "result": "passed"
    },
    "HumanEval/15": {
        "body": "for i in range(n + 1):\n    print(i, end=' ')",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/16": {
        "body": "return len(set(string.lower()))",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/17": {
        "body": "music_string = music_string.replace('o', '4').replace('o|', '2').replace('.|', '1')\nreturn [int(beat) for beat in music_string.split()]",
        "result": "failed: 'return' outside function (<string>, line 18)"
    },
    "HumanEval/18": {
        "body": "return string.count(substring)",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/19": {
        "body": "numbers = [int(num) for num in numbers.split()]\nreturn ' '.join(str(n) for n in sorted(numbers))",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/20": {
        "body": "    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result",
        "result": "failed: "
    },
    "HumanEval/21": {
        "body": "min_num = min(numbers)\nmax_num = max(numbers)\nreturn [(num - min_num) / (max_num - min_num) for num in numbers]",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/22": {
        "body": "return [value for value in values if isinstance(value, int)]",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/23": {
        "body": "len(string)",
        "result": "failed: name 'string' is not defined"
    },
    "HumanEval/24": {
        "body": "for i in range(n-1, 0, -1):\n    if n % i == 0:\n        return i",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/25": {
        "body": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "result": "passed"
    },
    "HumanEval/26": {
        "body": "return list(dict.fromkeys(numbers))",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/27": {
        "body": "return string.swapcase()",
        "result": "failed: 'return' outside function (<string>, line 8)"
    },
    "HumanEval/28": {
        "body": "    return \"\".join(strings)",
        "result": "passed"
    },
    "HumanEval/29": {
        "body": "return [s for s in strings if s.startswith(prefix)]",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/30": {
        "body": "return [i for i in l if i > 0]",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/31": {
        "body": "if n < 2:\n    return False\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        return False\nreturn True",
        "result": "failed: 'return' outside function (<string>, line 21)"
    },
    "HumanEval/32": {
        "body": "    return (-xs[-2]) / xs[-1]",
        "result": "failed: "
    },
    "HumanEval/33": {
        "body": "    third_values = sorted([l[i] for i in range(len(l)) if (i+1) % 3 == 0])\n    l[::3] = third_values\n    return l",
        "result": "failed: attempt to assign sequence of size 3 to extended slice of size 4"
    },
    "HumanEval/34": {
        "body": "return sorted(set(l))",
        "result": "failed: 'return' outside function (<string>, line 8)"
    },
    "HumanEval/35": {
        "body": "return max(l)",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/36": {
        "body": "for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n        while i > 0 and i % 10 != 7:\n            i //= 10\n        else:\n            count += 1",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/37": {
        "body": "even = sorted(l[::2])\nl[::2] = even\nreturn l",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/38": {
        "body": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "result": "passed"
    },
    "HumanEval/39": {
        "body": "        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n    return a",
        "result": "failed: unexpected indent (<string>, line 17)"
    },
    "HumanEval/40": {
        "body": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed"
    },
    "HumanEval/41": {
        "body": "for _ in range(n):\n    pass",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/42": {
        "body": "for i in range(len(l)):\n    l[i] += 1",
        "result": "failed: name 'l' is not defined"
    },
    "HumanEval/43": {
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "result": "passed"
    },
    "HumanEval/44": {
        "body": "    chars = \"0123456789ABCDEF\"\n    if x < base:\n        return chars[x]\n    else:\n        return change_base(x // base, base) + chars[x % base]",
        "result": "passed"
    },
    "HumanEval/45": {
        "body": "    return 0.5 * a * h",
        "result": "passed"
    },
    "HumanEval/46": {
        "body": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d",
        "result": "passed"
    },
    "HumanEval/47": {
        "body": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]",
        "result": "passed"
    },
    "HumanEval/48": {
        "body": "    return text == text[::-1]",
        "result": "passed"
    },
    "HumanEval/49": {
        "body": "return pow(2, n, p)",
        "result": "failed: 'return' outside function (<string>, line 16)"
    },
    "HumanEval/50": {
        "body": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/51": {
        "body": "    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)",
        "result": "passed"
    },
    "HumanEval/52": {
        "body": "return all(x < t for x in l)",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/53": {
        "body": "return x + y",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/54": {
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: "
    },
    "HumanEval/55": {
        "body": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "result": "passed"
    },
    "HumanEval/56": {
        "body": "    count = 0\n    for b in brackets:\n        if b == '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "result": "passed"
    },
    "HumanEval/57": {
        "body": "return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/58": {
        "body": "return sorted(set(l1) & set(l2))",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/59": {
        "body": "    i = n\n    while i % 2 == 0:\n        i //= 2\n\n    for num in range(3,int(i**0.5)+1,2):\n        while i % num== 0:\n            i //= num\n\n    return i if i>2 else num",
        "result": "failed: "
    },
    "HumanEval/60": {
        "body": "    return n * (n + 1) // 2",
        "result": "passed"
    },
    "HumanEval/61": {
        "body": "    count = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n        elif b == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "result": "passed"
    },
    "HumanEval/62": {
        "body": "    return [i * (n + 1) for i, n in enumerate(xs)]",
        "result": "failed: "
    },
    "HumanEval/63": {
        "body": "    if n < 3:\n        return n - 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "result": "passed"
    },
    "HumanEval/64": {
        "body": "    return sum(1 for c in s.lower() if c in 'aeiou' or (c == 'y' and s[-1] == 'y'))",
        "result": "failed: Test 5"
    },
    "HumanEval/65": {
        "body": "    s = str(x)\n    return s[-shift:] + s[:-shift] if shift <= len(s) else s[::-1]",
        "result": "passed"
    },
    "HumanEval/66": {
        "body": "    return sum(ord(c) for c in s if c.isupper())",
        "result": "passed"
    },
    "HumanEval/67": {
        "body": "    fruits = s.split(' and ')\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n    return n - apples - oranges",
        "result": "passed"
    },
    "HumanEval/68": {
        "body": "    evens = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    return min(evens, key=lambda x: (x[0], x[1])) if evens else []",
        "result": "failed: Error"
    },
    "HumanEval/69": {
        "body": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    for num, count in freq.items():\n        if num >= count and count > 0:\n            return num\n\n    return -1",
        "result": "failed: "
    },
    "HumanEval/70": {
        "body": "    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
        "result": "passed"
    },
    "HumanEval/71": {
        "body": "if a + b > c and a + c > b and b + c > a:\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\nelse:\n    return -1",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/72": {
        "body": "    return q == q[::-1] and sum(q) <= w",
        "result": "passed"
    },
    "HumanEval/73": {
        "body": "    left, right = 0, len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes // 2",
        "result": "failed: "
    },
    "HumanEval/74": {
        "body": "    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2",
        "result": "failed: "
    },
    "HumanEval/75": {
        "body": "    primes = [2, 3, 5, 7]\n    factors = []\n    for p in primes:\n        while a % p == 0 and a != 1:\n            factors.append(p)\n            a /= p\n    return len(factors) >= 3",
        "result": "failed: "
    },
    "HumanEval/76": {
        "body": "    return x == n ** int(math.log(x, n))",
        "result": "failed: name 'math' is not defined"
    },
    "HumanEval/77": {
        "body": "return a ** 0.5 % 1 == 0",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/78": {
        "body": "    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for c in num if c in primes)",
        "result": "passed"
    },
    "HumanEval/79": {
        "body": "    return f\"db{bin(decimal)[2:] * 8}db\"",
        "result": "failed: "
    },
    "HumanEval/80": {
        "body": "if len(s) >= 3:\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\nreturn False",
        "result": "failed: 'return' outside function (<string>, line 17)"
    },
    "HumanEval/81": {
        "body": "if gpa > 4.0:\n    return \"A+\"\nelif gpa > 3.7:\n    return \"A\"\nelif gpa > 3.3:\n    return \"A-\"\nelif gpa > 3.0:\n    return \"B+\"\nelif gpa > 2.7:\n    return \"B\"\nelif gpa > 2.3:\n    return \"B-\"\nelif gpa > 2.0:\n    return \"C+\"\nelif gpa > 1.7:\n    return \"C\"\nelif gpa > 1.3:\n    return \"C-\"\nelif gpa > 1.0:\n    return \"D+\"\nelif gpa > 0.7:\n    return \"D\"\nelse:\n    return \"E\"",
        "result": "failed: 'return' outside function (<string>, line 28)"
    },
    "HumanEval/82": {
        "body": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/83": {
        "body": "for i in range(10**(n-1), 10**n):\n    if str(i).startswith('1') or str(i).endswith('1'):\n        count += 1\nreturn count",
        "result": "failed: 'return' outside function (<string>, line 10)"
    },
    "HumanEval/84": {
        "body": "    return bin(sum(int(digit) for digit in str(N)))[2:]",
        "result": "passed"
    },
    "HumanEval/85": {
        "body": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
        "result": "passed"
    },
    "HumanEval/86": {
        "body": "    return ' '.join(''.join(sorted(word)) for word in s.split())",
        "result": "passed"
    },
    "HumanEval/87": {
        "body": "    return sorted(((i, j) for i, row in enumerate(lst) for j, num in enumerate(row) if num == x), key=lambda p: (p[0], -p[1]))",
        "result": "passed"
    },
    "HumanEval/88": {
        "body": "    sorted_arr = array.copy()\n    if sum(sorted_arr[0], sorted_arr[-1]) % 2 == 1:\n        sorted_arr.sort()\n    else:\n        sorted_arr.sort(reverse=True)\n    return sorted_arr",
        "result": "failed: list index out of range"
    },
    "HumanEval/89": {
        "body": "    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - ascii_offset + 6) % 26 + ascii_offset)\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/90": {
        "body": "    lst.sort()\n    return None if len(lst) < 2 else lst[1]",
        "result": "failed: "
    },
    "HumanEval/91": {
        "body": "    return sum(s.startswith('I') for s in S.split('.') + S.split('?') + S.split('!'))",
        "result": "failed: Test 2"
    },
    "HumanEval/92": {
        "body": "if all(isinstance(i, int) for i in (x, y, z)) and any(x + y == z or x + z == y or y + z == x):\n    return True\nelse:\n    return False",
        "result": "failed: 'return' outside function (<string>, line 21)"
    },
    "HumanEval/93": {
        "body": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    return result",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/94": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in lst if is_prime(n)]\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/95": {
        "body": "if not dict:\n    return False\nreturn all(key.islower() == value for key, value in dict.items())",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/96": {
        "body": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes[:n]",
        "result": "failed: local variable 'num' referenced before assignment"
    },
    "HumanEval/97": {
        "body": "return abs(a % 10 * b % 10)",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/98": {
        "body": "return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and c in 'AEIOU')",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/99": {
        "body": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "result": "passed"
    },
    "HumanEval/100": {
        "body": "    result = []\n    current = n\n    while current > 0:\n        result.append(current)\n        current -= 2 if current % 2 == 0 else 1\n    return result",
        "result": "failed: Test 3"
    },
    "HumanEval/101": {
        "body": "return s.split(',') + s.split()",
        "result": "failed: 'return' outside function (<string>, line 11)"
    },
    "HumanEval/102": {
        "body": "for i in range(y, x-1, -1):\n    if i % 2 == 0:\n        return i\nreturn -1",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/103": {
        "body": "if n > m:\n    return -1\navg = round((sum(range(n, m + 1)) / (m - n + 1)))\nreturn bin(avg)[2:]",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/104": {
        "body": "    return sorted(set(num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))))",
        "result": "passed"
    },
    "HumanEval/105": {
        "body": "    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [names[x-1] for x in arr]",
        "result": "passed"
    },
    "HumanEval/106": {
        "body": "    return [(i if i % 2 == 0 else sum(range(1, i + 1))) for i in range(1, n + 1)]",
        "result": "failed: "
    },
    "HumanEval/107": {
        "body": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "result": "passed"
    },
    "HumanEval/108": {
        "body": "    return sum(1 for num in arr if any(int(digit) != 0 for digit in str(num)))",
        "result": "failed: invalid literal for int() with base 10: '-'"
    },
    "HumanEval/109": {
        "body": "    sorted_arr = sorted(arr)\n    return arr == sorted_arr[-len(arr):] + sorted_arr[:-len(arr)]",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/110": {
        "body": "for i in range(len(lst1)):\n    if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n        lst1[i], lst2[i] = lst2[i], lst1[i]\nreturn \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"",
        "result": "failed: 'return' outside function (<string>, line 18)"
    },
    "HumanEval/111": {
        "body": "    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n\n    max_count = max(counts.values()) if counts else 0\n    return {k: v for k, v in counts.items() if v == max_count}",
        "result": "passed"
    },
    "HumanEval/112": {
        "body": "    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])",
        "result": "passed"
    },
    "HumanEval/113": {
        "body": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for c in s if int(c) % 2), i+1, i+1, i+1) for i, s in enumerate(lst)]",
        "result": "failed: Test 1"
    },
    "HumanEval/114": {
        "body": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < 0:\n            curr_sum = 0\n        else:\n            min_sum = min(min_sum, curr_sum)\n    return min_sum",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/115": {
        "body": "    return sum(sum(row) for row in grid) // capacity",
        "result": "failed: Error"
    },
    "HumanEval/116": {
        "body": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "result": "passed"
    },
    "HumanEval/117": {
        "body": "    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    words = s.split()\n    result = [word for word in words if sum(1 for c in word if c in consonants) == n]\n    return result",
        "result": "passed"
    },
    "HumanEval/118": {
        "body": "    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "result": "passed"
    },
    "HumanEval/119": {
        "body": "        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    a, b = lst\n    return 'Yes' if check_balance(a + b) or check_balance(b + a) else 'No'",
        "result": "failed: unexpected indent (<string>, line 17)"
    },
    "HumanEval/120": {
        "body": "    return sorted(arr, reverse=True)[:k]",
        "result": "failed: "
    },
    "HumanEval/121": {
        "body": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "result": "passed"
    },
    "HumanEval/122": {
        "body": "    return sum(x for x in arr[:k] if -9 <= x < 10)",
        "result": "failed: "
    },
    "HumanEval/123": {
        "body": "    sequence = []\n    while n != 1:\n        if n % 2 == 1:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(sequence)",
        "result": "failed: "
    },
    "HumanEval/124": {
        "body": "import re\n    if not date or len(date) != 10 or '-' not in date or not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    day, month, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12) and not(1 <= day <= 31):\n        return False\n    if month in (4, 6, 9, 11) and not(1 <= day <= 30):\n        return False\n    if month == 2 and not(1 <= day <= 29):\n        return False\n    return True",
        "result": "failed: unexpected indent (<string>, line 23)"
    },
    "HumanEval/125": {
        "body": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)",
        "result": "failed: "
    },
    "HumanEval/126": {
        "body": "return lst == sorted(set(lst))",
        "result": "failed: 'return' outside function (<string>, line 18)"
    },
    "HumanEval/127": {
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length <= 0 or not is_prime(length):\n        return \"NO\"\n    else:\n        return \"YES\"",
        "result": "failed: name 'n' is not defined"
    },
    "HumanEval/128": {
        "body": "if not arr:\n    return None\n\nsign_prod = 1\nmag_sum = 0\n\nfor num in arr:\n    if num < 0:\n        sign_prod *= -1\n    elif num > 0:\n        mag_sum += abs(num)\n\nreturn sign_prod * mag_sum",
        "result": "failed: 'return' outside function (<string>, line 15)"
    },
    "HumanEval/129": {
        "body": "    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = [[False] * n for _ in range(n)]\n    min_path = []\n\n        if len(path) == k:\n            nonlocal min_path\n            if not min_path or path < min_path:\n                min_path = path\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                dfs(nx, ny, path + [grid[nx][ny]])\n                visited[nx][ny] = False\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n    return min_path",
        "result": "failed: unexpected indent (<string>, line 37)"
    },
    "HumanEval/130": {
        "body": "    if n == 0: return []\n    elif n == 1: return [3]\n    else:\n        seq = [3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[min(i, len(seq) - 1)])\n        return seq",
        "result": "failed: list index out of range"
    },
    "HumanEval/131": {
        "body": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product",
        "result": "failed: "
    },
    "HumanEval/132": {
        "body": "    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/133": {
        "body": "    return sum(int(x) ** 2 for x in lst)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/134": {
        "body": "if txt and txt[-1].isalpha() and not txt.strip().endswith(' '):\n    return True\nelse:\n    return False",
        "result": "failed: 'return' outside function (<string>, line 16)"
    },
    "HumanEval/135": {
        "body": "for i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n        return i\nreturn -1",
        "result": "failed: 'return' outside function (<string>, line 14)"
    },
    "HumanEval/136": {
        "body": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return max(negatives) if negatives else None, min(positives) if positives else None",
        "result": "passed"
    },
    "HumanEval/137": {
        "body": "if isinstance(a, str):\n    a = float(a.replace(',', '.'))\nif isinstance(b, str):\n    b = float(b.replace(',', '.'))\n\nif a > b:\n    return a if isinstance(a, float) else str(a)\nelif a < b:\n    return b if isinstance(b, float) else str(b)\nelse:\n    return None",
        "result": "failed: 'return' outside function (<string>, line 20)"
    },
    "HumanEval/138": {
        "body": "    return any(sum(c) == n for r in range(1, 5) for c in combinations(range(2, n+1, 2), r))",
        "result": "failed: name 'combinations' is not defined"
    },
    "HumanEval/139": {
        "body": "        import math\n        product = 1\n        for i in range(1, n + 1):\n            product *= math.factorial(i)\n        return product",
        "result": "failed: unexpected indent (<string>, line 14)"
    },
    "HumanEval/140": {
        "body": "return text.replace(' ', '_').replace('__', '-')",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/141": {
        "body": "    if not any(c.isalpha() for c in file_name.split('.')[0]):\n        return 'No'\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if '.' not in file_name or file_name.count('.') != 1:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "result": "failed: name 're' is not defined"
    },
    "HumanEval/142": {
        "body": "    return sum(x**3 if i%4==0 and i%3!=0 else x**2 if i%3==0 else x for i,x in enumerate(lst))",
        "result": "passed"
    },
    "HumanEval/143": {
        "body": "        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))",
        "result": "failed: unexpected indent (<string>, line 22)"
    },
    "HumanEval/144": {
        "body": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * num_n) % den_x == 0",
        "result": "failed: test4"
    },
    "HumanEval/145": {
        "body": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: "
    },
    "HumanEval/146": {
        "body": "    count = sum(1 for num in nums if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0)\n    return count",
        "result": "failed: not all arguments converted during string formatting"
    },
    "HumanEval/147": {
        "body": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "result": "passed"
    },
    "HumanEval/148": {
        "body": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return ()",
        "result": "failed: unexpected indent (<string>, line 20)"
    },
    "HumanEval/149": {
        "body": "    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed"
    },
    "HumanEval/150": {
        "body": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return x if is_prime(n) else y",
        "result": "failed: "
    },
    "HumanEval/151": {
        "body": "    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)",
        "result": "passed"
    },
    "HumanEval/152": {
        "body": "    return [abs(g - g_) for g, g_ in zip(guess, game)]",
        "result": "passed"
    },
    "HumanEval/153": {
        "body": "    strongest = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest}\"",
        "result": "passed"
    },
    "HumanEval/154": {
        "body": "    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    return any(rotation in a for rotation in rotations)",
        "result": "passed"
    },
    "HumanEval/155": {
        "body": "    count_even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    count_odd = len(str(abs(num))) - count_even\n    return (count_even, count_odd)",
        "result": "passed"
    },
    "HumanEval/156": {
        "body": "{\n  \"code\": \"\"\"\nmini_roman = {\n  1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n  100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n  10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n}\n\n    roman = ''\n    for i in sorted(mini_roman.keys(), reverse=True):\n        while number >= i:\n            roman += mini_roman[i]\n            number -= i\n    return roman.lower()\n\"\"\"\n}",
        "result": "failed: "
    },
    "HumanEval/157": {
        "body": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n    return True\nelse:\n    return False",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/158": {
        "body": "    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result",
        "result": "passed"
    },
    "HumanEval/159": {
        "body": "    if number + need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "result": "failed: Error"
    },
    "HumanEval/160": {
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
        "result": "failed: "
    },
    "HumanEval/161": {
        "body": "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",
        "result": "passed"
    },
    "HumanEval/162": {
        "body": "import hashlib\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/163": {
        "body": "for i in range(a, b + 1):\n    if i % 2 == 0:\n        yield i",
        "result": "failed: 'yield' outside function (<string>, line 14)"
    }
}