{
    "HumanEval/0": {
        "body": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "result": "passed"
    },
    "HumanEval/1": {
        "body": "    result = []\n    stack = []\n    temp = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            if stack: \n                temp += '('\n            else: \n                result.append(temp)\n                temp = '('\n            stack.append(1)\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack: \n                result.append(temp)\n                temp = ''\n    return [x for x in result if x]",
        "result": "passed"
    },
    "HumanEval/2": {
        "body": "    return number - int(number)",
        "result": "passed"
    },
    "HumanEval/3": {
        "body": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/4": {
        "body": "    return sum(abs(num - sum(numbers) / len(numbers)) for num in numbers) / len(numbers)",
        "result": "passed"
    },
    "HumanEval/5": {
        "body": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter])\n        result.append(numbers[i])",
        "result": "failed: list index out of range"
    },
    "HumanEval/6": {
        "body": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(1)\n        elif char == ')':\n            level = stack.pop()\n            result.append(level)\n    return result",
        "result": "failed: "
    },
    "HumanEval/7": {
        "body": "    return [s for s in strings if substring in s]",
        "result": "passed"
    },
    "HumanEval/8": {
        "body": "    result = (sum(numbers), functools.reduce(lambda x, y: x * y, [1] + numbers, 1)) if numbers else (0, 1)",
        "result": "failed: "
    },
    "HumanEval/9": {
        "body": "max_so_far = float('-inf')\nresult = []\nfor num in numbers:\n    if num > max_so_far:\n        max_so_far = num\n    result.append(max_so_far)",
        "result": "failed: name 'numbers' is not defined"
    },
    "HumanEval/10": {
        "body": "    prefix = string\n    while not is_palindrome(prefix):\n        prefix += chr(122 - ord(string[0]))\n    return prefix + prefix[::-1][len(string):]",
        "result": "timed out"
    },
    "HumanEval/11": {
        "body": "    result = ''\n    for c1, c2 in zip(a, b):\n        if c1 == c2:\n            result += '0'\n        else:\n            result += '1'",
        "result": "failed: "
    },
    "HumanEval/12": {
        "body": "    if not strings:\n        return None\n    max_len = 0\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result",
        "result": "passed"
    },
    "HumanEval/13": {
        "body": "    while b:\n        a, b = b, a % b",
        "result": "failed: "
    },
    "HumanEval/14": {
        "body": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])",
        "result": "failed: "
    },
    "HumanEval/15": {
        "body": "    ' '.join(map(str, range(n + 1)))",
        "result": "failed: "
    },
    "HumanEval/16": {
        "body": "    return len(set(string.lower()))",
        "result": "passed"
    },
    "HumanEval/17": {
        "body": "    if music_string[0] == 'o': \n        return [4] + parse_music(music_string[2:]) \n    elif music_string[:2] == 'o|': \n        return [2] + parse_music(music_string[2:]) \n    elif music_string[:2] == '.|': \n        return [1] + parse_music(music_string[2:]) \n    else: \n        raise ValueError(f\"Invalid input '{music_string}'\")",
        "result": "failed: string index out of range"
    },
    "HumanEval/18": {
        "body": "    return string.count(substring)",
        "result": "failed: "
    },
    "HumanEval/19": {
        "body": "    list_of_numbers = [int(num) for num in numbers.split() if num in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']]\n    return ' '.join(sorted(map(str, list_of_numbers)))",
        "result": "failed: invalid literal for int() with base 10: 'three'"
    },
    "HumanEval/20": {
        "body": "    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair",
        "result": "failed: "
    },
    "HumanEval/21": {
        "body": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]",
        "result": "passed"
    },
    "HumanEval/22": {
        "body": "    return [value for value in values if isinstance(value, int)]",
        "result": "passed"
    },
    "HumanEval/23": {
        "body": "    return len(string)",
        "result": "passed"
    },
    "HumanEval/24": {
        "body": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1",
        "result": "passed"
    },
    "HumanEval/25": {
        "body": "    result = []\n    i = 2\n    while n > 1:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        if count > 0:\n            result.extend([i] * count)\n        i += 1\n    return result",
        "result": "passed"
    },
    "HumanEval/26": {
        "body": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)",
        "result": "failed: "
    },
    "HumanEval/27": {
        "body": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "result": "passed"
    },
    "HumanEval/28": {
        "body": "    result = ''.join(strings)",
        "result": "failed: "
    },
    "HumanEval/29": {
        "body": "    return [s for s in strings if s.startswith(prefix)]",
        "result": "passed"
    },
    "HumanEval/30": {
        "body": "    return [x for x in l if x > 0]",
        "result": "passed"
    },
    "HumanEval/31": {
        "body": "    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True",
        "result": "passed"
    },
    "HumanEval/32": {
        "body": "    if len(xs) % 2 != 0 or xs[-1] == 0:        \n        return None    \n    p = poly(xs[:-1], -xs[-1]/(2*xs[-2]))    \n    return round(p, 2)",
        "result": "failed: "
    },
    "HumanEval/33": {
        "body": "    result = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted([y for j, y in enumerate(l) if j % 3 == 0])[i//3])\n        else:\n            result.append(x)\n    return result",
        "result": "passed"
    },
    "HumanEval/34": {
        "body": "    return sorted(set(l))",
        "result": "passed"
    },
    "HumanEval/35": {
        "body": "max_element = lambda l: max(l)",
        "result": "passed"
    },
    "HumanEval/36": {
        "body": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')",
        "result": "failed: "
    },
    "HumanEval/37": {
        "body": "    even_elements = sorted([x for x in l if l.index(x) % 2 == 0])\n    return [x if i % 2 != 0 else y for i, (x, y) in enumerate(zip(l, even_elements))]",
        "result": "failed: "
    },
    "HumanEval/38": {
        "body": "    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else list(reversed(group)) for group in [s[i:i+3] for i in range(0, len(s), 3)]]\n    return \"\".join(groups)",
        "result": "failed: sequence item 4: expected str instance, list found"
    },
    "HumanEval/39": {
        "body": "        if m <= 1:\n            return False\n        for i in range(2, int(m ** 0.5) + 1):\n            if m % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    result = None\n    while n > 1:\n        a, b = b, a + b\n        if is_prime(b):\n            result = b\n            break",
        "result": "failed: unexpected indent (<string>, line 17)"
    },
    "HumanEval/40": {
        "body": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "result": "passed"
    },
    "HumanEval/41": {
        "body": "        for i in range(2*n):\n            collision_count = 0\n            for j in range(n):\n                if (j + n) % (i + 1) < n and (j - n) % (i + 1) >= 0:\n                    collision_count += 1\n            yield collision_count",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/42": {
        "body": "    return [x + 1 for x in l]",
        "result": "passed"
    },
    "HumanEval/43": {
        "body": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)",
        "result": "failed: "
    },
    "HumanEval/44": {
        "body": "    if base == 1:\n        return str(x)\n    result = ''\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result",
        "result": "passed"
    },
    "HumanEval/45": {
        "body": "    return 0.5 * a * h",
        "result": "passed"
    },
    "HumanEval/46": {
        "body": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n-3):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d",
        "result": "passed"
    },
    "HumanEval/47": {
        "body": "    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n//2]\n    else:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2",
        "result": "passed"
    },
    "HumanEval/48": {
        "body": "    return text.lower() == text[::-1].lower()",
        "result": "passed"
    },
    "HumanEval/49": {
        "body": "    return pow(2, n, p)",
        "result": "passed"
    },
    "HumanEval/50": {
        "body": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "result": "passed"
    },
    "HumanEval/51": {
        "body": "    return \"\".join(c for c in text if not set(\"aeiouAEIOU\").__contains__(c))",
        "result": "passed"
    },
    "HumanEval/52": {
        "body": "    all(x < t for x in l)",
        "result": "failed: "
    },
    "HumanEval/53": {
        "body": "    return x + y",
        "result": "passed"
    },
    "HumanEval/54": {
        "body": "    return sorted(s0) == sorted(s1)",
        "result": "failed: "
    },
    "HumanEval/55": {
        "body": "if n == 0:\n    return 0\nelif n <= 1:\n    return 1\nelse:\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/56": {
        "body": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack",
        "result": "passed"
    },
    "HumanEval/57": {
        "body": "    if len(l) < 2:\n        return True\n    increasing = l[1] > l[0]\n    for i in range(2, len(l)):\n        if (increasing and l[i] <= l[i-1]) or (not increasing and l[i] >= l[i-1]):\n            return False\n    return True",
        "result": "failed: "
    },
    "HumanEval/58": {
        "body": "    return sorted(set(l1) & set(l2))",
        "result": "passed"
    },
    "HumanEval/59": {
        "body": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n            i += 1",
        "result": "failed: "
    },
    "HumanEval/60": {
        "body": "    result = 0\n    for i in range(1, n + 1):\n        result += i",
        "result": "failed: "
    },
    "HumanEval/61": {
        "body": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack",
        "result": "passed"
    },
    "HumanEval/62": {
        "body": "    return [i * (xs[i] + i*xs[0]) for i in range(1, len(xs))]",
        "result": "failed: "
    },
    "HumanEval/63": {
        "body": "    if n <= 2:\n        return 0\n    a, b = 0, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b",
        "result": "failed: "
    },
    "HumanEval/64": {
        "body": "    return sum(1 for char in s.lower() if char in 'aeiouy' and (char != 'y' or s[-1] == char))",
        "result": "failed: Test 5"
    },
    "HumanEval/65": {
        "body": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]",
        "result": "failed: "
    },
    "HumanEval/66": {
        "body": "    return sum(ord(c) for c in s if 'A' <= c <= 'Z')",
        "result": "passed"
    },
    "HumanEval/67": {
        "body": "        s = s.replace('apples', '0').replace('oranges', '0')\n        return n - int(re.sub(r'\\D+', '', s).split()[1]) - int(re.sub(r'\\D+', '', s).split()[3])",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/68": {
        "body": "    if not arr: \n        return []\n    even_nodes = [(node, idx) for idx, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes: \n        return []\n    smallest_node = min(even_nodes)\n    return [smallest_node[0], smallest_node[1]]",
        "result": "passed"
    },
    "HumanEval/69": {
        "body": "    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 0\n        freq_dict[num] += 1\n    max_freq_num = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            max_freq_num = num\n            break\n    return max_freq_num",
        "result": "failed: "
    },
    "HumanEval/70": {
        "body": "    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        if len(lst) % 2 == 1:\n            result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            result.append(max_val)\n            lst.remove(max_val)\n    return result",
        "result": "failed: "
    },
    "HumanEval/71": {
        "body": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s*(s-a)*(s-b)*(s-c))**0.5, 2)\n    else:\n        return -1",
        "result": "passed"
    },
    "HumanEval/72": {
        "body": "    return all(q[i] == q[-i-1] for i in range(len(q))) and sum(q) <= w",
        "result": "passed"
    },
    "HumanEval/73": {
        "body": "    arr = [str(x) for x in arr]\n    rev_arr = arr[::-1]\n    total_changes = sum(1 for i in range(len(arr)) if arr[i] != rev_arr[-i-1])\n    return total_changes",
        "result": "failed: "
    },
    "HumanEval/74": {
        "body": "    if sum(len(i) for i in lst1) <= sum(len(i) for i in lst2):\n        return lst1\n    else:\n        return lst2",
        "result": "passed"
    },
    "HumanEval/75": {
        "body": "            if b < 2:\n                return False\n            for i in range(2, int(b**0.5) + 1):\n                if b % i == 0:\n                    return False\n            return True\n        primes = [i for i in range(2, a//3+1) if is_prime(i)]\n        for p1 in primes:\n            for p2 in primes:\n                for p3 in primes:\n                    if p1 * p2 * p3 == a:\n                        return True\n        return False",
        "result": "failed: unexpected indent (<string>, line 10)"
    },
    "HumanEval/76": {
        "body": "    if n == 0 and x == 1: \n        return True \n    if n != int(x ** (1. / float(n))): \n        return False \n    return True",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/77": {
        "body": "    n = int(a ** (1./3.))\n    return n * n * n == a",
        "result": "failed: can't convert complex to int"
    },
    "HumanEval/78": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n        count = 0\n        for char in num:\n            if char.upper() in '237BD':\n                count += (is_prime(int(char, 16)))",
        "result": "failed: unexpected indent (<string>, line 20)"
    },
    "HumanEval/79": {
        "body": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + (\"1\" * len(binary)) + \"db\"",
        "result": "failed: "
    },
    "HumanEval/80": {
        "body": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        triplet = s[i:i+3]\n        if len(set(triplet)) != 3:\n            return False\n    return True",
        "result": "passed"
    },
    "HumanEval/81": {
        "body": "    if not isinstance(grades, list):\n        return []\n\n    letter_grades = []\n\n    for g in grades:\n        if isinstance(g, float) and 4.0 >= g > 0.0:\n            if g >= 4.0:\n                letter_grades.append('A+')\n            elif g > 3.7:\n                letter_grades.append('A')\n            elif g > 3.3:\n                letter_grades.append('A-')\n            elif g > 3.0:\n                letter_grades.append('B+')\n            elif g > 2.7:\n                letter_grades.append('B')\n            elif g > 2.3:\n                letter_grades.append('B-')\n            elif g > 2.0:\n                letter_grades.append('C+')\n            elif g > 1.7:\n                letter_grades.append('C')\n            elif g > 1.3:\n                letter_grades.append('C-')\n            elif g > 1.0:\n                letter_grades.append('D+')\n            elif g > 0.7:\n                letter_grades.append('D')\n            else:\n                letter_grades.append('E')\n        else:\n            return []",
        "result": "failed: "
    },
    "HumanEval/82": {
        "body": "        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n        return is_prime(len(string))",
        "result": "failed: unexpected indent (<string>, line 11)"
    },
    "HumanEval/83": {
        "body": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1",
        "result": "failed: "
    },
    "HumanEval/84": {
        "body": "    result = ''\n    while N > 0:\n        result = str(N % 2) + result\n        N //= 2\n    return result",
        "result": "failed: Error"
    },
    "HumanEval/85": {
        "body": "    result = sum(i for i in lst[1::2] if i % 2 == 0)",
        "result": "failed: "
    },
    "HumanEval/86": {
        "body": "    return ' '.join(''.join(sorted(word)) for word in s.split())",
        "result": "passed"
    },
    "HumanEval/87": {
        "body": "    result = [(i, j) for i, row in enumerate(lst) if x in row for j in range(len(row)-1, -1, -1) if row[j] == x]",
        "result": "failed: "
    },
    "HumanEval/88": {
        "body": "    if sum(array[0], array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array)[::-1]",
        "result": "failed: list index out of range"
    },
    "HumanEval/89": {
        "body": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + (2 * 2)) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/90": {
        "body": "\tif len(lst) < 2:\n\t\treturn None\n\tlst.sort()\n\tfor i in range(1, len(lst)):\n\t\tif lst[i] != lst[0]:\n\t\t\treturn lst[i]\n\treturn None",
        "result": "failed: inconsistent use of tabs and spaces in indentation (<string>, line 13)"
    },
    "HumanEval/91": {
        "body": "        return sum(1 for sentence in S.split('.?!') if sentence.strip().startswith('I'))",
        "result": "failed: unexpected indent (<string>, line 14)"
    },
    "HumanEval/92": {
        "body": "    return (x == y + z) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/93": {
        "body": "        result = \"\"\n        for char in message:\n            if char.isalpha():\n                if char.isupper():\n                    result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n                else:\n                    result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += char",
        "result": "failed: unexpected indent (<string>, line 16)"
    },
    "HumanEval/94": {
        "body": "        largest_prime = max((i for i in lst if is_prime(i)), default=0)\n        return sum(int(digit) for digit in str(largest_prime))\n\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "result": "failed: unexpected indent (<string>, line 15)"
    },
    "HumanEval/95": {
        "body": "    for k in dict: \n        if not isinstance(k, str) or (dict.get(k).isalpha() and k != dict[k].upper()): \n            return False \n    return len(dict) > 0",
        "result": "failed: First test error: False"
    },
    "HumanEval/96": {
        "body": "        if k < 2: return False\n        for i in range(2, int(k**0.5) + 1):\n            if k % i == 0: return False\n        return True\n\n    result = []\n    k = 2\n    while len(result) < n:\n        if is_prime(k): result.append(k)\n        k += 1",
        "result": "failed: unexpected indent (<string>, line 13)"
    },
    "HumanEval/97": {
        "body": "    return (a % 10) * (b % 10)",
        "result": "passed"
    },
    "HumanEval/98": {
        "body": "    for i, c in enumerate(s): \n        if i % 2 == 0 and c.upper() in 'AEIO': \n            yield 1 \n    yield 0",
        "result": "failed: "
    },
    "HumanEval/99": {
        "body": "    if isinstance(value, str):\n        value = float(value)\n    return round(value) if abs(value - int(round(value))) < 0.5 else int(round(value)) if value >= 0 else int(round(-value)) - 1",
        "result": "failed: Test 2"
    },
    "HumanEval/100": {
        "body": "    if n % 2 == 0:\n        pile = [n]\n        for _ in range(n - 1):\n            pile.append(pile[-1] + 2)\n    else:\n        pile = [n]\n        for _ in range(n - 1):\n            pile.append(pile[-1] + 1)",
        "result": "failed: Test 3"
    },
    "HumanEval/101": {
        "body": "    return s.replace(\",\", \" \").split()",
        "result": "passed"
    },
    "HumanEval/102": {
        "body": "max_val = max(x, y)\nif max_val % 2 == 0:\n    return max_val\nelse:\n    lower = (x + y) // 2\n    if x <= lower <= y and lower % 2 == 0:\n        return lower\n    else:\n        return -1",
        "result": "failed: 'return' outside function (<string>, line 13)"
    },
    "HumanEval/103": {
        "body": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg)).replace(\"0b\", \"\")",
        "result": "failed: "
    },
    "HumanEval/104": {
        "body": "        return sorted([i for i in x if not any(int(d) % 2 == 0 for d in str(i))])",
        "result": "failed: unexpected indent (<string>, line 14)"
    },
    "HumanEval/105": {
        "body": "    names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[i] for i in sorted([i for i in arr if 1 <= i <= 9])][::-1]",
        "result": "passed"
    },
    "HumanEval/106": {
        "body": "if n == 0:\n    return []\nresult = []\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        result.append(math.factorial(i))\n    else:\n        result.append(sum(range(1, i+1)))",
        "result": "failed: 'return' outside function (<string>, line 12)"
    },
    "HumanEval/107": {
        "body": "        even = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0)\n        odd = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0)\n        return even, odd",
        "result": "failed: unexpected indent (<string>, line 25)"
    },
    "HumanEval/108": {
        "body": "        return sum(1 for num in arr if sum(int(digit) if digit > '0' else -int(digit[1:]) for digit in str(abs(num))) > 0)",
        "result": "failed: unexpected indent (<string>, line 12)"
    },
    "HumanEval/109": {
        "body": "    if len(arr) == 0 or arr[1:] <= arr[:-1]:\n        return True\n    return False",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/110": {
        "body": "    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    if any(x % 2 != 0 for x in lst2):\n        return \"NO\"\n    return \"YES\" if odd_count == 0 else \"NO\"",
        "result": "failed: "
    },
    "HumanEval/111": {
        "body": "    max_count = 0\n    result = {}\n    for letter in test.split():\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n        if result[letter] > max_count:\n            max_count = result[letter]\n    max_letters = [k for k, v in result.items() if v == max_count]\n    return {letter: max_count for letter in max_letters}",
        "result": "passed"
    },
    "HumanEval/112": {
        "body": "    result = ''.join([char for char in s if char not in c])\n    return (result, result != result[::-1])",
        "result": "failed: "
    },
    "HumanEval/113": {
        "body": "        return [f\"the number of odd elements {str(i+1)}n the str{i+1}ng {i+1} of the {i+1}nput.\" for i in range(len(lst[0])) if any(int(digit)%2!=0 for digit in lst[0][i])]",
        "result": "failed: unexpected indent (<string>, line 14)"
    },
    "HumanEval/114": {
        "body": "    result = float('inf')\n    left = 0\n    current_sum = 0\n    for right in range(len(nums)):\n        current_sum += nums[right]\n        while current_sum > 0:\n            result = min(result, current_sum)\n            current_sum -= nums[left]\n            left += 1",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/115": {
        "body": "    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)",
        "result": "failed: Error"
    },
    "HumanEval/116": {
        "body": "    arr.sort(key=lambda x: (bin(x).count('1'), x))",
        "result": "failed: "
    },
    "HumanEval/117": {
        "body": "    result = []\n    words = s.split()\n    for word in words:\n        consonants = sum(1 for char in word if not char.isalpha() or char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result",
        "result": "passed"
    },
    "HumanEval/118": {
        "body": "        word = word[::-1]\n        for char in word:\n            if char.lower() in 'aeiou':\n                for i in range(len(word) - 1, 0, -1):\n                    if word[i-1].lower() not in 'aeiou':\n                        return word[i-1].upper()\n        return ''",
        "result": "failed: unexpected indent (<string>, line 17)"
    },
    "HumanEval/119": {
        "body": "    stack = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack += 1\n            elif c == ')':\n                stack -= 1\n            if stack < 0:\n                return 'No'\n    return 'Yes' if stack == 0 else 'No'",
        "result": "failed: "
    },
    "HumanEval/120": {
        "body": "    return sorted(set(arr), reverse=True)[:k]",
        "result": "failed: "
    },
    "HumanEval/121": {
        "body": "    result = sum(i for i, x in enumerate(lst) if x % 2 != 0 and i % 2 == 0)",
        "result": "failed: "
    },
    "HumanEval/122": {
        "body": "    result = sum(i for i in arr[:k] if 10 > abs(i) >= 1)",
        "result": "failed: "
    },
    "HumanEval/123": {
        "body": "        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sorted([x for x in sequence if x % 2 != 0])",
        "result": "failed: unexpected indent (<string>, line 19)"
    },
    "HumanEval/124": {
        "body": "    if not date:\n        return False\n    day, month, year = date.split('-')\n    day, month, year = int(day), int(month), int(year)\n    if month < 1 or month > 12:\n        return False\n    if (month in [1,3,5,7,8,10,12] and day < 1) or (month in [4,6,9,11] and day > 30) or (month == 2 and day > 29):\n        return False\n    return True",
        "result": "failed: "
    },
    "HumanEval/125": {
        "body": "    words = txt.split()\n    if not any(char.isalnum() for char in words[0]):\n        result = [char.strip(',') for char in words]\n    else:\n        result = []\n        for word in words:\n            if ',' in word:\n                result.extend(word.split(','))\n            elif len([c for c in word.lower() if ord(c) % 2 == 1]) % 2 != 0:\n                return len([c for c in word.lower() if ord(c) % 2 == 1])\n    return result",
        "result": "failed: "
    },
    "HumanEval/126": {
        "body": "    for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n        elif len(set(lst)) != len(lst):\n            return False\n    return True",
        "result": "failed: This prints if this assert fails 7 (good for debugging!)"
    },
    "HumanEval/127": {
        "body": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start + 1\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return \"YES\" if is_prime(intersection_length) else \"NO\"",
        "result": "failed: unexpected indent (<string>, line 27)"
    },
    "HumanEval/128": {
        "body": "\tif not arr:\n\t\treturn None\n\t\n\tsign = 1\n\tfor num in arr:\n\t\tsign *= -1 if num < 0 else 1 if num > 0 else 0\n\t\n\treturn sum(abs(num) for num in arr) * sign",
        "result": "failed: inconsistent use of tabs and spaces in indentation (<string>, line 14)"
    },
    "HumanEval/129": {
        "body": "    visited = set()\n    path = []\n        if len(path) == k:\n            return path\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] not in visited:\n                visited.add(grid[ni][nj])\n                path.append(grid[ni][nj])\n                result = dfs(ni, nj, k)\n                if result is not None:\n                    return result\n                visited.remove(grid[ni][nj])\n                path.pop()\n        return None",
        "result": "failed: unexpected indent (<string>, line 34)"
    },
    "HumanEval/130": {
        "body": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        result = [3, 1]\n        for _ in range(2, n + 1):\n            if result[-1] % 2 == 0:\n                result.append(int(result[-1] / 2) + 1)\n            else:\n                prev3 = result[-1] - result[-2] - result[-3]\n                result.extend([prev3, int(prev3 / 2) + 1])\n        return result",
        "result": "failed: list index out of range"
    },
    "HumanEval/131": {
        "body": "    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result",
        "result": "failed: "
    },
    "HumanEval/132": {
        "body": "    stack = 0\n    for char in string:\n        if char == '[':\n            stack += 1\n        elif char == ']':\n            if stack <= 0:\n                return False\n            stack -= 1\n    return stack > 0",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/133": {
        "body": "    return sum(ceil(x) ** 2 for x in lst)",
        "result": "failed: name 'ceil' is not defined"
    },
    "HumanEval/134": {
        "body": "    return txt and not txt[-1].isalnum()",
        "result": "failed: "
    },
    "HumanEval/135": {
        "body": "    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1",
        "result": "failed: "
    },
    "HumanEval/136": {
        "body": "    max_negative = max((x for x in lst if x < 0), default=None)\n    min_positive = min((x for x in lst if x > 0), default=None)\n    return (max_negative, min_positive) if max_negative is not None and min_positive is not None else ((None, None))",
        "result": "failed: "
    },
    "HumanEval/137": {
        "body": "    if isinstance(a, str):\n        a = float(str.replace(',', '.').replace('.', ''))\n    if isinstance(b, str):\n        b = float(str.replace(',', '.').replace('.', ''))\n\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None",
        "result": "failed: replace expected at least 2 arguments, got 1"
    },
    "HumanEval/138": {
        "body": "    for i in range(2, 33):\n        total = 0\n        for j in range(1, 5):\n            if n == (total := total + i * 2**(j-1)):\n                return True\n    return False",
        "result": "failed: "
    },
    "HumanEval/139": {
        "body": "    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)",
        "result": "failed: name 'math' is not defined"
    },
    "HumanEval/140": {
        "body": "    return text.replace(' ', '_').replace('  ', '_ ').replace('   ', '_-')",
        "result": "failed: This prints if this assert fails 4 (good for debugging!)"
    },
    "HumanEval/141": {
        "body": "    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    elif '.' not in file_name or file_name.split('.')[0][0].lower() < 'a':\n        return 'No'\n    else:\n        ext = file_name.split('.')[-1]\n        if ext.lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'",
        "result": "failed: "
    },
    "HumanEval/142": {
        "body": "    result = sum(i ** (3 if i % 3 == 0 and i % 4 != 0 else 2) for i in lst)",
        "result": "failed: "
    },
    "HumanEval/143": {
        "body": "        result = []\n        for word in sentence.split():\n            if is_prime(len(word)):\n                result.append(word)\n        return ' '.join(result)",
        "result": "failed: unexpected indent (<string>, line 22)"
    },
    "HumanEval/144": {
        "body": "    from fractions import Fraction\n    return Fraction(x).limit_denominator() == Fraction(n).limit_denominator()",
        "result": "failed: test1"
    },
    "HumanEval/145": {
        "body": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "result": "failed: 1 is not in list"
    },
    "HumanEval/146": {
        "body": "        count = 0\n        for num in nums:\n            if abs(num) > 10 and str(abs(num))[-1] % 2 != 0 and str(abs(num))[0] % 2 != 0:\n                count += 1",
        "result": "failed: unexpected indent (<string>, line 10)"
    },
    "HumanEval/147": {
        "body": "    result = 0\n    for i in range(1, n):\n        a_i = i * i - i + 1\n        for j in range(i+1, n):\n            a_j = j * j - j + 1\n            for k in range(j+1, n):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    result += 1",
        "result": "failed: "
    },
    "HumanEval/148": {
        "body": "    if set(planet1) & {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"} != set([planet1]) or set(planet2) & {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"} != set([planet2]):\n        return ()\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index2 < index1:\n        index1, index2 = index2, index1\n    return tuple(sorted([planets[i] for i in range(index1+1, index2)]))",
        "result": "failed: First test error: 0"
    },
    "HumanEval/149": {
        "body": "    return sorted([x for x in set(lst) if len(x) % 2 == 0], key=lambda x: (len(x), x))",
        "result": "passed"
    },
    "HumanEval/150": {
        "body": "    if n > 1: \n        for p in range(2, int(n**0.5) + 1): \n            if n % p == 0: \n                return y \n        return x",
        "result": "failed: "
    },
    "HumanEval/151": {
        "body": "    sum((i ** 2 for i in (x for x in lst if isinstance(x, int) and x >= 0)))",
        "result": "failed: This prints if this assert fails 1 (good for debugging!)"
    },
    "HumanEval/152": {
        "body": "    return [(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]",
        "result": "passed"
    },
    "HumanEval/153": {
        "body": "    max_strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(c.isupper() for c in extension)\n        sm = len(extension) - cap\n        strength = cap - sm\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"",
        "result": "failed: "
    },
    "HumanEval/154": {
        "body": "    for _ in range(len(b)):\n        b = b[1:] + b[0]\n        if b in a:\n            return True\n    return False",
        "result": "passed"
    },
    "HumanEval/155": {
        "body": "    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)",
        "result": "passed"
    },
    "HumanEval/156": {
        "body": "    if number < 1 or number > 1000:\n        return ''\n    \n    roman = ''\n    thousands = number // 1000\n    if thousands > 0:\n        roman += 'm' * thousands\n        number %= 1000\n    \n    hundreds = number // 100\n    if hundreds > 0:\n        roman += 'c' * hundreds\n        number %= 100\n    \n    tens = number // 10\n    if tens > 9:\n        if tens == 90:\n            roman += 'xc'\n            number %= 10\n        elif tens in [40,50,60,70,80]:\n            roman += {'40':'xl', '50':'l', '60':'lx', '70':'lxx', '80':'lxxx'}[str(tens)]\n            number %= 10\n        else:\n            roman += 'x' * (tens - 1)\n            roman += 'ix'\n            number %= 9\n    elif tens > 0:\n        if tens == 4:\n            roman += 'iv'\n            return roman.lower()\n        elif tens == 5:\n            roman += 'v'\n            return roman.lower()\n        else:\n            roman += 'i' * (tens - 1)\n            roman += 'v'\n            return roman.lower()\n    \n    ones = number\n    if ones > 3 and (number % 4) in [2,3]:\n        roman += 'iv'\n        number %= 4\n    elif ones > 0:\n        if ones >= 5:\n            roman += {'1':'i', '4':'iv', '5':'v', '6':'vi', '7':'vii', '8':'viii', '9':'ix'}[str(ones)]\n            return roman.lower()\n        else:\n            roman += {0:'', 1:'i', 2:'ii', 3:'iii'}[ones]\n            if ones == 3 and (number % 4) in [1,2]:\n                roman = roman[:-1] + 'iv'\n                return roman.lower()\n    \n    return roman.lower()",
        "result": "failed: "
    },
    "HumanEval/157": {
        "body": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2",
        "result": "passed"
    },
    "HumanEval/158": {
        "body": "    max_word = None\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word",
        "result": "passed"
    },
    "HumanEval/159": {
        "body": "    total = number + min(need - number, remaining)\n    return [total, max(0, remaining - (need - number))]",
        "result": "failed: Error"
    },
    "HumanEval/160": {
        "body": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result",
        "result": "failed: "
    },
    "HumanEval/161": {
        "body": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in s) else result",
        "result": "passed"
    },
    "HumanEval/162": {
        "body": "    import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()",
        "result": "passed"
    },
    "HumanEval/163": {
        "body": "    result = []\n    for i in range(min(a, b), max(a, b)+1):\n        if str(i).isdigit() and int(str(i)) % 2 == 0:\n            result.append(int(str(i)))",
        "result": "failed: Test 1"
    }
}